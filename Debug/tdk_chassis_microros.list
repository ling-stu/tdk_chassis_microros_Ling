
tdk_chassis_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d594  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001668  0801d768  0801d768  0001e768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801edd0  0801edd0  0002095c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801edd0  0801edd0  0001fdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801edd8  0801edd8  0002095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0801edd8  0801edd8  0001fdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801edf4  0801edf4  0001fdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000095c  20000000  0801edf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000113d8  20000960  0801f754  00020960  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011d38  0801f754  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002095c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030dc5  00000000  00000000  0002098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062f9  00000000  00000000  00051751  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e10  00000000  00000000  00057a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001740  00000000  00000000  00059860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f427  00000000  00000000  0005afa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b17c  00000000  00000000  0008a3c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc0b0  00000000  00000000  000b5543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b15f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e18  00000000  00000000  001b166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001ba484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000960 	.word	0x20000960
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d74c 	.word	0x0801d74c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000964 	.word	0x20000964
 800020c:	0801d74c 	.word	0x0801d74c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN11PinpointI2CC1EP17I2C_HandleTypeDefhm>:
PinpointI2C pinpoint(&hi2c1);
PinpointI2C::BulkData bd;
bool initi_yet = 0;

// ---- 建構 ----
PinpointI2C::PinpointI2C(I2C_HandleTypeDef* hi2c, uint8_t addr7bit, uint32_t timeoutMs)
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71fb      	strb	r3, [r7, #7]
: hi2c_(hi2c),
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	601a      	str	r2, [r3, #0]
  devAddr_(static_cast<uint16_t>(addr7bit) << 1), // HAL 多數範例使用 8-bit 位址（左移 1）
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	809a      	strh	r2, [r3, #4]
  timeoutMs_(timeoutMs)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2205      	movs	r2, #5
 8000f14:	731a      	strb	r2, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	735a      	strb	r2, [r3, #13]
{}
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <_ZN11PinpointI2C13Pinpoint_InitEv>:

void PinpointI2C::Pinpoint_Init()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	initi_yet = 1;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <_ZN11PinpointI2C13Pinpoint_InitEv+0x44>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
    // 1) 連線檢測
    if (!ping()) {
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f863 	bl	8001006 <_ZN11PinpointI2C4pingEv>
        // TODO: 報警或重試
    }
    // 2) 一次性配置（每次上電後都要重新送配置；手冊明確說明）
    setTicksPerMM(19.894f);       // 依你的 pod 實際數值
 8000f40:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000f74 <_ZN11PinpointI2C13Pinpoint_InitEv+0x48>
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f98c 	bl	8001262 <_ZN11PinpointI2C13setTicksPerMMEf>
    setOffsets(10.0f, -10.0f);  // 依你的機構量測
 8000f4a:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 8000f4e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f996 	bl	8001284 <_ZN11PinpointI2C10setOffsetsEff>
    // pinpoint.setYawScalar(1.0f);        // 通常不建議改動
    // 3) 方向確認（前+X、左+Y）
    setEncoderDirections(PinpointI2C::EncDir::Forward,
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f9c6 	bl	80012ee <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_>
                                  PinpointI2C::EncDir::Forward);
    // 4) 開賽或程式啟動時：確保靜止後歸零+IMU校正（~0.25s）
    resetPosAndIMU();
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f9b3 	bl	80012ce <_ZN11PinpointI2C14resetPosAndIMUEv>

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200009b8 	.word	0x200009b8
 8000f74:	419f26e9 	.word	0x419f26e9

08000f78 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv>:
void PinpointI2C::Pinpoint_TaskLoop()
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    // a) 用 Bulk 取資料（最省 I²C 次數）
		if (readBulk(bd)) {
 8000f80:	4913      	ldr	r1, [pc, #76]	@ (8000fd0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x58>)
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f926 	bl	80011d4 <_ZN11PinpointI2C8readBulkERNS_8BulkDataE>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x1e>
			i2c_connected = 1;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x5c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
			}else{
	        	//i2c_connected = 1;

			}
		}
}
 8000f94:	e018      	b.n	8000fc8 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x50>
			if (!isConnected()) {
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f822 	bl	8000fe0 <_ZNK11PinpointI2C11isConnectedEv>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00f      	beq.n	8000fc8 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x50>
	        	i2c_connected = 0;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
				HAL_I2C_DeInit(&hi2c1);
 8000fae:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x60>)
 8000fb0:	f004 fec6 	bl	8005d40 <HAL_I2C_DeInit>
				HAL_I2C_Init (&hi2c1);
 8000fb4:	4808      	ldr	r0, [pc, #32]	@ (8000fd8 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x60>)
 8000fb6:	f004 fd7f 	bl	8005ab8 <HAL_I2C_Init>
				i2c_reconnect = ping();
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f823 	bl	8001006 <_ZN11PinpointI2C4pingEv>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x64>)
 8000fc6:	701a      	strb	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000990 	.word	0x20000990
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	20005460 	.word	0x20005460
 8000fdc:	2000097c 	.word	0x2000097c

08000fe0 <_ZNK11PinpointI2C11isConnectedEv>:
// ---- 連線檢測 ----
void PinpointI2C::setMaxConsecutiveErrors(uint8_t n) { maxConsecutiveErrors_ = n ? n : 1; }
uint8_t PinpointI2C::consecutiveErrors() const { return consecutiveErrors_; }

bool PinpointI2C::isConnected() const {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    return consecutiveErrors_ < maxConsecutiveErrors_;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7b5a      	ldrb	r2, [r3, #13]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7b1b      	ldrb	r3, [r3, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	bf34      	ite	cc
 8000ff4:	2301      	movcc	r3, #1
 8000ff6:	2300      	movcs	r3, #0
 8000ff8:	b2db      	uxtb	r3, r3
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_ZN11PinpointI2C4pingEv>:

bool PinpointI2C::ping() {
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
    uint32_t id = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
    if (!readDeviceID(id)) return false;
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	4619      	mov	r1, r3
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f8cc 	bl	80011b6 <_ZN11PinpointI2C12readDeviceIDERm>
 800101e:	4603      	mov	r3, r0
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <_ZN11PinpointI2C4pingEv+0x28>
 800102a:	2300      	movs	r3, #0
 800102c:	e005      	b.n	800103a <_ZN11PinpointI2C4pingEv+0x34>
    return (id == 2u); // 手冊：Device ID 應為 2
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b02      	cmp	r3, #2
 8001032:	bf0c      	ite	eq
 8001034:	2301      	moveq	r3, #1
 8001036:	2300      	movne	r3, #0
 8001038:	b2db      	uxtb	r3, r3
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN11PinpointI2C7regReadEhPvt>:

// ---- 公用讀寫 ----
bool PinpointI2C::regRead(uint8_t reg, void* buf, uint16_t len) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	af04      	add	r7, sp, #16
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	461a      	mov	r2, r3
 800104e:	460b      	mov	r3, r1
 8001050:	72fb      	strb	r3, [r7, #11]
 8001052:	4613      	mov	r3, r2
 8001054:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6818      	ldr	r0, [r3, #0]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8899      	ldrh	r1, [r3, #4]
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	b29a      	uxth	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	893b      	ldrh	r3, [r7, #8]
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	f004 ff8f 	bl	8005f94 <HAL_I2C_Mem_Read>
 8001076:	4603      	mov	r3, r0
                         static_cast<uint8_t*>(buf), len, timeoutMs_) == HAL_OK) {
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
    if (HAL_I2C_Mem_Read(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <_ZN11PinpointI2C7regReadEhPvt+0x4e>
        onOk();
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f000 f870 	bl	800116c <_ZN11PinpointI2C4onOkEv>
        return true;
 800108c:	2301      	movs	r3, #1
 800108e:	e003      	b.n	8001098 <_ZN11PinpointI2C7regReadEhPvt+0x56>
    }
    onErr();
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f000 f87c 	bl	800118e <_ZN11PinpointI2C5onErrEv>
    return false;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN11PinpointI2C8regWriteEhPKvt>:

bool PinpointI2C::regWrite(uint8_t reg, const void* buf, uint16_t len) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af04      	add	r7, sp, #16
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	461a      	mov	r2, r3
 80010ac:	460b      	mov	r3, r1
 80010ae:	72fb      	strb	r3, [r7, #11]
 80010b0:	4613      	mov	r3, r2
 80010b2:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Write(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	8899      	ldrh	r1, [r3, #4]
 80010bc:	7afb      	ldrb	r3, [r7, #11]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	893b      	ldrh	r3, [r7, #8]
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	f004 fe66 	bl	8005da0 <HAL_I2C_Mem_Write>
 80010d4:	4603      	mov	r3, r0
                          const_cast<uint8_t*>(static_cast<const uint8_t*>(buf)), len, timeoutMs_) == HAL_OK) {
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
    if (HAL_I2C_Mem_Write(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <_ZN11PinpointI2C8regWriteEhPKvt+0x4e>
        onOk();
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f841 	bl	800116c <_ZN11PinpointI2C4onOkEv>
        return true;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e003      	b.n	80010f6 <_ZN11PinpointI2C8regWriteEhPKvt+0x56>
    }
    onErr();
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f000 f84d 	bl	800118e <_ZN11PinpointI2C5onErrEv>
    return false;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <_ZN11PinpointI2C8writeU32Ehm>:

bool PinpointI2C::writeU32(uint8_t reg, uint32_t v) { return regWrite(reg, &v, sizeof(v)); }
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	460b      	mov	r3, r1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	72fb      	strb	r3, [r7, #11]
 800110c:	1d3a      	adds	r2, r7, #4
 800110e:	7af9      	ldrb	r1, [r7, #11]
 8001110:	2304      	movs	r3, #4
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f7ff ffc4 	bl	80010a0 <_ZN11PinpointI2C8regWriteEhPKvt>
 8001118:	4603      	mov	r3, r0
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_ZN11PinpointI2C7readU32EhRm>:
bool PinpointI2C::readU32(uint8_t reg, uint32_t& v) { return regRead(reg, &v, sizeof(v)); }
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	460b      	mov	r3, r1
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	72fb      	strb	r3, [r7, #11]
 8001130:	7af9      	ldrb	r1, [r7, #11]
 8001132:	2304      	movs	r3, #4
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff83 	bl	8001042 <_ZN11PinpointI2C7regReadEhPvt>
 800113c:	4603      	mov	r3, r0
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZN11PinpointI2C8writeF32Ehf>:
bool PinpointI2C::writeF32(uint8_t reg, float v)    { return regWrite(reg, &v, sizeof(v)); }
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	460b      	mov	r3, r1
 8001150:	ed87 0a01 	vstr	s0, [r7, #4]
 8001154:	72fb      	strb	r3, [r7, #11]
 8001156:	1d3a      	adds	r2, r7, #4
 8001158:	7af9      	ldrb	r1, [r7, #11]
 800115a:	2304      	movs	r3, #4
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff ff9f 	bl	80010a0 <_ZN11PinpointI2C8regWriteEhPKvt>
 8001162:	4603      	mov	r3, r0
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <_ZN11PinpointI2C4onOkEv>:
bool PinpointI2C::readF32(uint8_t reg, float& v)    { return regRead(reg, &v, sizeof(v)); }

void PinpointI2C::onOk()  { if (consecutiveErrors_ > 0) consecutiveErrors_ = 0; }
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7b5b      	ldrb	r3, [r3, #13]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <_ZN11PinpointI2C4onOkEv+0x16>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	735a      	strb	r2, [r3, #13]
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_ZN11PinpointI2C5onErrEv>:
void PinpointI2C::onErr() { if (consecutiveErrors_ < 0xFF) ++consecutiveErrors_; }
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7b5b      	ldrb	r3, [r3, #13]
 800119a:	2bff      	cmp	r3, #255	@ 0xff
 800119c:	d005      	beq.n	80011aa <_ZN11PinpointI2C5onErrEv+0x1c>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b5b      	ldrb	r3, [r3, #13]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	735a      	strb	r2, [r3, #13]
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_ZN11PinpointI2C12readDeviceIDERm>:

// ---- 基礎暫存器 ----
bool PinpointI2C::readDeviceID(uint32_t& id)      { return readU32(REG_DEVICE_ID, id); }
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ffac 	bl	8001122 <_ZN11PinpointI2C7readU32EhRm>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZN11PinpointI2C8readBulkERNS_8BulkDataE>:
    bool okY = readU32(REG_ENC_Y, encY);
    return okX && okY;
}

// ---- Bulk Read ----
bool PinpointI2C::readBulk(BulkData& out) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	@ 0x30
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
    // 手冊：Bulk Read 總長 40 bytes，內容順序對應文件（此處採用常見版本的排列）
    uint8_t buf[40] = {0};
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2228      	movs	r2, #40	@ 0x28
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f01b fba8 	bl	801c93c <memset>
    if (!regRead(REG_BULK, buf, sizeof(buf))) return false;
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	2328      	movs	r3, #40	@ 0x28
 80011f2:	2112      	movs	r1, #18
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff24 	bl	8001042 <_ZN11PinpointI2C7regReadEhPvt>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f083 0301 	eor.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <_ZN11PinpointI2C8readBulkERNS_8BulkDataE+0x36>
 8001206:	2300      	movs	r3, #0
 8001208:	e027      	b.n	800125a <_ZN11PinpointI2C8readBulkERNS_8BulkDataE+0x86>

    // 解析：依序 4-byte 對齊（uint32/float）
    std::memcpy(&out.device_status, &buf[0], 4);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.loop_time_us,  &buf[4], 4);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3304      	adds	r3, #4
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.enc_x_raw,     &buf[8], 4);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3308      	adds	r3, #8
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.enc_y_raw,     &buf[12],4);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	330c      	adds	r3, #12
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.pos_x_mm,      &buf[16],4);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3310      	adds	r3, #16
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.pos_y_mm,      &buf[20],4);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3314      	adds	r3, #20
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.heading_rad,   &buf[24],4);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3318      	adds	r3, #24
 800123c:	6a3a      	ldr	r2, [r7, #32]
 800123e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_x_mm_s,    &buf[28],4);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	331c      	adds	r3, #28
 8001244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001246:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_y_mm_s,    &buf[32],4);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	3320      	adds	r3, #32
 800124c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800124e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_h_rad_s,   &buf[36],4);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3324      	adds	r3, #36	@ 0x24
 8001254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001256:	601a      	str	r2, [r3, #0]
    return true;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3730      	adds	r7, #48	@ 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZN11PinpointI2C13setTicksPerMMEf>:
           readF32(REG_VEL_Y, v.vy_mm_s) &&
           readF32(REG_VEL_H, v.w_rad_s);
}

// ---- 設定 ----
bool PinpointI2C::setTicksPerMM(float tpm) {
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	ed87 0a00 	vstr	s0, [r7]
    return writeF32(REG_TICKS_PER_MM, tpm);
 800126e:	ed97 0a00 	vldr	s0, [r7]
 8001272:	210e      	movs	r1, #14
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff66 	bl	8001146 <_ZN11PinpointI2C8writeF32Ehf>
 800127a:	4603      	mov	r3, r0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_ZN11PinpointI2C10setOffsetsEff>:

bool PinpointI2C::setOffsets(float x_offset_mm, float y_offset_mm) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001290:	edc7 0a01 	vstr	s1, [r7, #4]
    bool ok1 = writeF32(REG_X_OFFSET, x_offset_mm);
 8001294:	ed97 0a02 	vldr	s0, [r7, #8]
 8001298:	210f      	movs	r1, #15
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f7ff ff53 	bl	8001146 <_ZN11PinpointI2C8writeF32Ehf>
 80012a0:	4603      	mov	r3, r0
 80012a2:	75fb      	strb	r3, [r7, #23]
    bool ok2 = writeF32(REG_Y_OFFSET, y_offset_mm);
 80012a4:	ed97 0a01 	vldr	s0, [r7, #4]
 80012a8:	2110      	movs	r1, #16
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ff4b 	bl	8001146 <_ZN11PinpointI2C8writeF32Ehf>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75bb      	strb	r3, [r7, #22]
    return ok1 && ok2;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <_ZN11PinpointI2C10setOffsetsEff+0x40>
 80012ba:	7dbb      	ldrb	r3, [r7, #22]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZN11PinpointI2C10setOffsetsEff+0x40>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <_ZN11PinpointI2C10setOffsetsEff+0x42>
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <_ZN11PinpointI2C14resetPosAndIMUEv>:
bool PinpointI2C::resetIMU() {
    uint32_t cmd = CTRL_RESET_IMU;
    return writeU32(REG_DEVICE_CTRL, cmd);
}

bool PinpointI2C::resetPosAndIMU() {
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
    uint32_t cmd = CTRL_RESET_POS_AND_IMU;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60fb      	str	r3, [r7, #12]
    return writeU32(REG_DEVICE_CTRL, cmd);
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	2104      	movs	r1, #4
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff0d 	bl	80010fe <_ZN11PinpointI2C8writeU32Ehm>
 80012e4:	4603      	mov	r3, r0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_>:

bool PinpointI2C::setEncoderDirections(EncDir x, EncDir y) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	70fb      	strb	r3, [r7, #3]
 80012fa:	4613      	mov	r3, r2
 80012fc:	70bb      	strb	r3, [r7, #2]
    uint32_t cmd = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
    cmd |= (y == EncDir::Reversed) ? CTRL_SET_Y_REV : CTRL_SET_Y_FWD;
 8001302:	78bb      	ldrb	r3, [r7, #2]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x1e>
 8001308:	2304      	movs	r3, #4
 800130a:	e000      	b.n	800130e <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x20>
 800130c:	2308      	movs	r3, #8
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
    cmd |= (x == EncDir::Reversed) ? CTRL_SET_X_REV : CTRL_SET_X_FWD;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x30>
 800131a:	2310      	movs	r3, #16
 800131c:	e000      	b.n	8001320 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x32>
 800131e:	2320      	movs	r3, #32
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
    return writeU32(REG_DEVICE_CTRL, cmd);
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	2104      	movs	r1, #4
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fee7 	bl	80010fe <_ZN11PinpointI2C8writeU32Ehm>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_ZN11PinpointI2C13writePositionERKNS_4PoseE>:

// ---- setPosition（覆寫位置暫存器）----
bool PinpointI2C::writePosition(const Pose& p) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	6039      	str	r1, [r7, #0]
    bool okx = writeF32(REG_POS_X, p.x_mm);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eeb0 0a67 	vmov.f32	s0, s15
 800134e:	2108      	movs	r1, #8
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff fef8 	bl	8001146 <_ZN11PinpointI2C8writeF32Ehf>
 8001356:	4603      	mov	r3, r0
 8001358:	73fb      	strb	r3, [r7, #15]
    bool oky = writeF32(REG_POS_Y, p.y_mm);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001360:	eeb0 0a67 	vmov.f32	s0, s15
 8001364:	2109      	movs	r1, #9
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff feed 	bl	8001146 <_ZN11PinpointI2C8writeF32Ehf>
 800136c:	4603      	mov	r3, r0
 800136e:	73bb      	strb	r3, [r7, #14]
    bool okh = writeF32(REG_POS_H, p.heading);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	edd3 7a02 	vldr	s15, [r3, #8]
 8001376:	eeb0 0a67 	vmov.f32	s0, s15
 800137a:	210a      	movs	r1, #10
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fee2 	bl	8001146 <_ZN11PinpointI2C8writeF32Ehf>
 8001382:	4603      	mov	r3, r0
 8001384:	737b      	strb	r3, [r7, #13]
    return okx && oky && okh;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <_ZN11PinpointI2C13writePositionERKNS_4PoseE+0x62>
 800138c:	7bbb      	ldrb	r3, [r7, #14]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d004      	beq.n	800139c <_ZN11PinpointI2C13writePositionERKNS_4PoseE+0x62>
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <_ZN11PinpointI2C13writePositionERKNS_4PoseE+0x62>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <_ZN11PinpointI2C13writePositionERKNS_4PoseE+0x64>
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <_Z41__static_initialization_and_destruction_0v>:
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
PinpointI2C pinpoint(&hi2c1);
 80013ac:	230a      	movs	r3, #10
 80013ae:	2231      	movs	r2, #49	@ 0x31
 80013b0:	4902      	ldr	r1, [pc, #8]	@ (80013bc <_Z41__static_initialization_and_destruction_0v+0x14>)
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <_Z41__static_initialization_and_destruction_0v+0x18>)
 80013b4:	f7ff fd98 	bl	8000ee8 <_ZN11PinpointI2CC1EP17I2C_HandleTypeDefhm>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20005460 	.word	0x20005460
 80013c0:	20000980 	.word	0x20000980

080013c4 <_GLOBAL__sub_I_i2c_req>:
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	f7ff ffee 	bl	80013a8 <_Z41__static_initialization_and_destruction_0v>
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <pinpoint_init>:


double pos_x, pos_y, pos_z, vel_x, vel_y, vel_z;
bool check = 0;

 void pinpoint_init(){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
 	osDelay(500);
 80013d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80013d8:	f008 feaa 	bl	800a130 <osDelay>
 	pinpoint.Pinpoint_Init();
 80013dc:	4802      	ldr	r0, [pc, #8]	@ (80013e8 <pinpoint_init+0x18>)
 80013de:	f7ff fda5 	bl	8000f2c <_ZN11PinpointI2C13Pinpoint_InitEv>
 }
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000980 	.word	0x20000980

080013ec <pinpoint_monitor>:
//    } else {
//        // I2C 裝置未回應，可能需要重試或報錯
//    }
//}

void pinpoint_monitor(){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	if (sec == update_period){
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <pinpoint_monitor+0x60>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b64      	cmp	r3, #100	@ 0x64
 80013f6:	d115      	bne.n	8001424 <pinpoint_monitor+0x38>
		// pinpoint.Pinpoint_TaskLoop();
		// sec = 0;
		  // 檢查連線狀態
        if (pinpoint.isConnected()) {
 80013f8:	4815      	ldr	r0, [pc, #84]	@ (8001450 <pinpoint_monitor+0x64>)
 80013fa:	f7ff fdf1 	bl	8000fe0 <_ZNK11PinpointI2C11isConnectedEv>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <pinpoint_monitor+0x20>
            pinpoint.Pinpoint_TaskLoop();
 8001404:	4812      	ldr	r0, [pc, #72]	@ (8001450 <pinpoint_monitor+0x64>)
 8001406:	f7ff fdb7 	bl	8000f78 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv>
 800140a:	e008      	b.n	800141e <pinpoint_monitor+0x32>
        } else {
            // I2C 連線異常，嘗試重新初始化
            HAL_I2C_DeInit(&hi2c1);
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <pinpoint_monitor+0x68>)
 800140e:	f004 fc97 	bl	8005d40 <HAL_I2C_DeInit>
            osDelay(100);
 8001412:	2064      	movs	r0, #100	@ 0x64
 8001414:	f008 fe8c 	bl	800a130 <osDelay>
            HAL_I2C_Init(&hi2c1);
 8001418:	480e      	ldr	r0, [pc, #56]	@ (8001454 <pinpoint_monitor+0x68>)
 800141a:	f004 fb4d 	bl	8005ab8 <HAL_I2C_Init>
        }
        sec = 0;
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <pinpoint_monitor+0x60>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
	}
	if(temp == 10000){
 8001424:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <pinpoint_monitor+0x6c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f242 7210 	movw	r2, #10000	@ 0x2710
 800142c:	4293      	cmp	r3, r2
 800142e:	d10a      	bne.n	8001446 <pinpoint_monitor+0x5a>
		relocateRobot(100,1100,0.2);
 8001430:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 800145c <pinpoint_monitor+0x70>
 8001434:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001460 <pinpoint_monitor+0x74>
 8001438:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001464 <pinpoint_monitor+0x78>
 800143c:	f000 f814 	bl	8001468 <relocateRobot>
		temp = 0;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <pinpoint_monitor+0x6c>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
	}
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20008714 	.word	0x20008714
 8001450:	20000980 	.word	0x20000980
 8001454:	20005460 	.word	0x20005460
 8001458:	2000871c 	.word	0x2000871c
 800145c:	3e4ccccd 	.word	0x3e4ccccd
 8001460:	44898000 	.word	0x44898000
 8001464:	42c80000 	.word	0x42c80000

08001468 <relocateRobot>:

void relocateRobot(float x, float y, float angle) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001472:	edc7 0a02 	vstr	s1, [r7, #8]
 8001476:	ed87 1a01 	vstr	s2, [r7, #4]
	PinpointI2C::Pose newPos;
    newPos.x_mm = x;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	617b      	str	r3, [r7, #20]
    newPos.y_mm = y;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	61bb      	str	r3, [r7, #24]
    newPos.heading = angle;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	61fb      	str	r3, [r7, #28]

    if (!pinpoint.writePosition(newPos)) {
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4808      	ldr	r0, [pc, #32]	@ (80014b0 <relocateRobot+0x48>)
 800148e:	f7ff ff54 	bl	800133a <_ZN11PinpointI2C13writePositionERKNS_4PoseE>
 8001492:	4603      	mov	r3, r0
 8001494:	f083 0301 	eor.w	r3, r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <relocateRobot+0x40>
    	fail_reloc++;
 800149e:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <relocateRobot+0x4c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a03      	ldr	r2, [pc, #12]	@ (80014b4 <relocateRobot+0x4c>)
 80014a6:	6013      	str	r3, [r2, #0]
        // 處理錯誤
    }
}
 80014a8:	bf00      	nop
 80014aa:	3720      	adds	r7, #32
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000980 	.word	0x20000980
 80014b4:	200009bc 	.word	0x200009bc

080014b8 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	ed87 0a01 	vstr	s0, [r7, #4]
 80014c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014c6:	f019 ffd5 	bl	801b474 <cosf>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	eeb0 0a67 	vmov.f32	s0, s15
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	ed87 0a01 	vstr	s0, [r7, #4]
 80014e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80014e6:	f01a f809 	bl	801b4fc <sinf>
 80014ea:	eef0 7a40 	vmov.f32	s15, s0
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_ZN7Chassis8setSpeedEfff>:
#include "chassis.hpp"
#include "motor_config.h"
float Vx_global,Vy_global,dt;
void Chassis::setSpeed(float Vx_goal, float Vy_goal, float W_goal){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	ed87 0a02 	vstr	s0, [r7, #8]
 8001504:	edc7 0a01 	vstr	s1, [r7, #4]
 8001508:	ed87 1a00 	vstr	s2, [r7]
    _Vx_goal = Vx_goal; _Vy_goal = Vy_goal; _W_goal = W_goal;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	631a      	str	r2, [r3, #48]	@ 0x30
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
    Mecan_InverseKinematics();
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f9a2 	bl	8001868 <_ZN7Chassis23Mecan_InverseKinematicsEv>
    _motorFR->setSpeed(_V_FR_goal);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	edd3 7a07 	vldr	s15, [r3, #28]
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	4610      	mov	r0, r2
 8001534:	f000 fac8 	bl	8001ac8 <_ZN15MotorController8setSpeedEf>
    _motorFL->setSpeed(_V_FL_goal);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001542:	eeb0 0a67 	vmov.f32	s0, s15
 8001546:	4610      	mov	r0, r2
 8001548:	f000 fabe 	bl	8001ac8 <_ZN15MotorController8setSpeedEf>
    _motorBR->setSpeed(_V_BR_goal);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	4610      	mov	r0, r2
 800155c:	f000 fab4 	bl	8001ac8 <_ZN15MotorController8setSpeedEf>
    _motorBL->setSpeed(_V_BL_goal);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	4610      	mov	r0, r2
 8001570:	f000 faaa 	bl	8001ac8 <_ZN15MotorController8setSpeedEf>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN7Chassis11getLocationEv>:

void Chassis::getLocation(){
 800157c:	b580      	push	{r7, lr}
 800157e:	ed2d 8b02 	vpush	{d8}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	Mecan_ForwardKinematics();
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f88d 	bl	80016a8 <_ZN7Chassis23Mecan_ForwardKinematicsEv>
	dt = DT;
 800158e:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <_ZN7Chassis11getLocationEv+0x118>)
 8001590:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001594:	601a      	str	r2, [r3, #0]
    theta += _W_now * DT/1000;                                              // rad
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	ed93 7a02 	vldr	s14, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80015a2:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8001698 <_ZN7Chassis11getLocationEv+0x11c>
 80015a6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edc3 7a02 	vstr	s15, [r3, #8]
    Vx_global = _Vx_now * cos(theta) - _Vy_now * sin(theta);   // cm/s
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015c0:	eeb0 0a67 	vmov.f32	s0, s15
 80015c4:	f7ff ff78 	bl	80014b8 <_ZSt3cosf>
 80015c8:	eef0 7a40 	vmov.f32	s15, s0
 80015cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 8a0f 	vldr	s17, [r3, #60]	@ 0x3c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	f7ff ff7a 	bl	80014d8 <_ZSt3sinf>
 80015e4:	eef0 7a40 	vmov.f32	s15, s0
 80015e8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80015ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <_ZN7Chassis11getLocationEv+0x120>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
    Vy_global = _Vx_now * sin(theta) + _Vy_now * cos(theta);   // cm/s
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	f7ff ff67 	bl	80014d8 <_ZSt3sinf>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	edd3 8a0f 	vldr	s17, [r3, #60]	@ 0x3c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edd3 7a02 	vldr	s15, [r3, #8]
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	f7ff ff49 	bl	80014b8 <_ZSt3cosf>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800162e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001632:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <_ZN7Chassis11getLocationEv+0x124>)
 8001634:	edc3 7a00 	vstr	s15, [r3]
    x += (Vx_global * (dt/1000));                                        // cm
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a00 	vldr	s14, [r3]
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <_ZN7Chassis11getLocationEv+0x118>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8001698 <_ZN7Chassis11getLocationEv+0x11c>
 8001648:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_ZN7Chassis11getLocationEv+0x120>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edc3 7a00 	vstr	s15, [r3]
    y += (Vy_global * (dt/1000));										// cm
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	ed93 7a01 	vldr	s14, [r3, #4]
 8001666:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <_ZN7Chassis11getLocationEv+0x118>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8001698 <_ZN7Chassis11getLocationEv+0x11c>
 8001670:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <_ZN7Chassis11getLocationEv+0x124>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	ecbd 8b02 	vpop	{d8}
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200009c8 	.word	0x200009c8
 8001698:	447a0000 	.word	0x447a0000
 800169c:	200009c0 	.word	0x200009c0
 80016a0:	200009c4 	.word	0x200009c4
 80016a4:	00000000 	.word	0x00000000

080016a8 <_ZN7Chassis23Mecan_ForwardKinematicsEv>:

void Chassis::Mecan_ForwardKinematics(){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
    _V_FR_now = _motorFR->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fa87 	bl	8001bc8 <_ZN15MotorController8getSpeedEv>
 80016ba:	ee10 3a10 	vmov	r3, s0
 80016be:	4618      	mov	r0, r3
 80016c0:	f7fe ff72 	bl	80005a8 <__aeabi_f2d>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 80016ca:	f7fe ffc5 	bl	8000658 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	a360      	add	r3, pc, #384	@ (adr r3, 8001858 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe ffbc 	bl	8000658 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9c8 	bl	8000a7c <__aeabi_d2f>
 80016ec:	4602      	mov	r2, r0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	649a      	str	r2, [r3, #72]	@ 0x48
    _V_FL_now = _motorFL->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fa66 	bl	8001bc8 <_ZN15MotorController8getSpeedEv>
 80016fc:	ee10 3a10 	vmov	r3, s0
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff51 	bl	80005a8 <__aeabi_f2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b55      	ldr	r3, [pc, #340]	@ (8001860 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 800170c:	f7fe ffa4 	bl	8000658 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a34f      	add	r3, pc, #316	@ (adr r3, 8001858 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff9b 	bl	8000658 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f9a7 	bl	8000a7c <__aeabi_d2f>
 800172e:	4602      	mov	r2, r0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	64da      	str	r2, [r3, #76]	@ 0x4c
    _V_BR_now = _motorBR->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fa45 	bl	8001bc8 <_ZN15MotorController8getSpeedEv>
 800173e:	ee10 3a10 	vmov	r3, s0
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff30 	bl	80005a8 <__aeabi_f2d>
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 800174e:	f7fe ff83 	bl	8000658 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001858 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ff7a 	bl	8000658 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f986 	bl	8000a7c <__aeabi_d2f>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	651a      	str	r2, [r3, #80]	@ 0x50
    _V_BL_now = _motorBL->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fa24 	bl	8001bc8 <_ZN15MotorController8getSpeedEv>
 8001780:	ee10 3a10 	vmov	r3, s0
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe ff0f 	bl	80005a8 <__aeabi_f2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 8001790:	f7fe ff62 	bl	8000658 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001858 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff59 	bl	8000658 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f7ff f965 	bl	8000a7c <__aeabi_d2f>
 80017b2:	4602      	mov	r2, r0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	655a      	str	r2, [r3, #84]	@ 0x54

    _Vx_now = (-_V_FR_now + _V_FL_now + _V_BR_now - _V_BL_now) / 4.0f;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80017c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80017ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80017d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017dc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80017e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    _Vy_now = (_V_FR_now + _V_FL_now + _V_BR_now + _V_BL_now) / 4.0f;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80017f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800180a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001812:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    _W_now = (-_V_FR_now +   _V_FL_now - _V_BR_now + _V_BL_now) / (CHASSIS_WIDTH + CHASSIS_LENGTH);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001828:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800183c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001840:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001864 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1bc>
 8001844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	4d12d84a 	.word	0x4d12d84a
 800185c:	400921fb 	.word	0x400921fb
 8001860:	40240000 	.word	0x40240000
 8001864:	42600000 	.word	0x42600000

08001868 <_ZN7Chassis23Mecan_InverseKinematicsEv>:

void Chassis::Mecan_InverseKinematics(){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
    _V_FR_goal = -_Vx_goal + _Vy_goal + _W_goal * _chassis_factor;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800187c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edc3 7a07 	vstr	s15, [r3, #28]
    _V_FL_goal = _Vx_goal + _Vy_goal - _W_goal * _chassis_factor;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80018a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80018b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a08 	vstr	s15, [r3, #32]
    _V_BR_goal = _Vx_goal + _Vy_goal + _W_goal * _chassis_factor;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80018d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80018e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    _V_BL_goal = -_Vx_goal + _Vy_goal - _W_goal * _chassis_factor;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_>:
/**********************************************************************/
extern float Vx_global,Vy_global,dt;

class Chassis {
    public:
        Chassis(MotorController* motorFR, MotorController* motorFL, MotorController* motorBR, MotorController* motorBL):
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
                _motorFR(motorFR), _motorFL(motorFL), _motorBR(motorBR), _motorBL(motorBL){}
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	60da      	str	r2, [r3, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	619a      	str	r2, [r3, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	621a      	str	r2, [r3, #32]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	@ 0x28
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4a0c      	ldr	r2, [pc, #48]	@ (80019e8 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_+0xc4>)
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	649a      	str	r2, [r3, #72]	@ 0x48
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	3fe42a1f 	.word	0x3fe42a1f

080019ec <chassis_monitor>:
float w_goal,x_goal,y_goal;
extern PinpointI2C::BulkData bd;
float x_error,y_error;


void chassis_monitor(void) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
//	if(bd.pos_y_mm< y_goal){
    chassis.setSpeed(Vx_goal,Vy_goal, W_goal);
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <chassis_monitor+0x34>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <chassis_monitor+0x38>)
 80019f8:	ed93 7a00 	vldr	s14, [r3]
 80019fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <chassis_monitor+0x3c>)
 80019fe:	edd3 6a00 	vldr	s13, [r3]
 8001a02:	eeb0 1a66 	vmov.f32	s2, s13
 8001a06:	eef0 0a47 	vmov.f32	s1, s14
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <chassis_monitor+0x40>)
 8001a10:	f7ff fd72 	bl	80014f8 <_ZN7Chassis8setSpeedEfff>
//	}else{
//		chassis.setSpeed(0,0,0);
//	}
	chassis.getLocation();
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <chassis_monitor+0x40>)
 8001a16:	f7ff fdb1 	bl	800157c <_ZN7Chassis11getLocationEv>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000a24 	.word	0x20000a24
 8001a24:	20000a28 	.word	0x20000a28
 8001a28:	20000a2c 	.word	0x20000a2c
 8001a2c:	200009cc 	.word	0x200009cc

08001a30 <_Z41__static_initialization_and_destruction_0v>:

void chassis_set_speed(double vx,double vy,double vz)
{
	chassis.setSpeed(vx, vy, vz);
}
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af02      	add	r7, sp, #8
Chassis chassis(&Motor_FR, &Motor_FL , &Motor_BR, &Motor_BL);
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001a3c:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8001a3e:	4906      	ldr	r1, [pc, #24]	@ (8001a58 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8001a40:	4806      	ldr	r0, [pc, #24]	@ (8001a5c <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8001a42:	f7ff ff6f 	bl	8001924 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_>
}
 8001a46:	bf00      	nop
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000b20 	.word	0x20000b20
 8001a50:	20000ad0 	.word	0x20000ad0
 8001a54:	20000a80 	.word	0x20000a80
 8001a58:	20000a30 	.word	0x20000a30
 8001a5c:	200009cc 	.word	0x200009cc

08001a60 <_GLOBAL__sub_I_chassis>:
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	f7ff ffe4 	bl	8001a30 <_Z41__static_initialization_and_destruction_0v>
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a78:	eef0 7ae7 	vabs.f32	s15, s15
 8001a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_ZN15MotorController4initEii>:
#include "motor_ctrl.hpp"
int times = 0;
uint32_t current_cnt;
void MotorController::init(int en_ctrl,int dir_ctrl) {
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	213c      	movs	r1, #60	@ 0x3c
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f006 f871 	bl	8007b84 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f005 fefb 	bl	80078a8 <HAL_TIM_PWM_Start>
    _dir_ctrl = dir_ctrl;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
    _en_ctrl = en_ctrl;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	ed87 0a00 	vstr	s0, [r7]

    _targetSpeed = speed;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	631a      	str	r2, [r3, #48]	@ 0x30
//    times++;
    ComputePID();
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f884 	bl	8001be8 <_ZN15MotorController10ComputePIDEv>

//    if (_pidOutput > 80.0) _pidOutput = 80.0;
//    if (_pidOutput < -80.0) _pidOutput = -80.0;
    if (_dir_ctrl == 1){
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d112      	bne.n	8001b0e <_ZN15MotorController8setSpeedEf+0x46>
    	HAL_GPIO_WritePin(_dirGPIO, _dirPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68d8      	ldr	r0, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	8a19      	ldrh	r1, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	db01      	blt.n	8001b04 <_ZN15MotorController8setSpeedEf+0x3c>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <_ZN15MotorController8setSpeedEf+0x3e>
 8001b04:	2300      	movs	r3, #0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f003 ffbc 	bl	8005a84 <HAL_GPIO_WritePin>
 8001b0c:	e014      	b.n	8001b38 <_ZN15MotorController8setSpeedEf+0x70>
    }else{
    	HAL_GPIO_WritePin(_dirGPIO, _dirPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68d8      	ldr	r0, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8a19      	ldrh	r1, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	bfac      	ite	ge
 8001b26:	2301      	movge	r3, #1
 8001b28:	2300      	movlt	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f083 0301 	eor.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	f003 ffa6 	bl	8005a84 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b42:	f7ff ff92 	bl	8001a6a <_ZSt4fabsf>
 8001b46:	eef0 7a40 	vmov.f32	s15, s0
 8001b4a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001bc4 <_ZN15MotorController8setSpeedEf+0xfc>
 8001b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b56:	ee17 3a90 	vmov	r3, s15
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    if (_pwmValue < 20) _pwmValue = 0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b64:	2b13      	cmp	r3, #19
 8001b66:	d802      	bhi.n	8001b6e <_ZN15MotorController8setSpeedEf+0xa6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	84da      	strh	r2, [r3, #38]	@ 0x26
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <_ZN15MotorController8setSpeedEf+0xbc>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	635a      	str	r2, [r3, #52]	@ 0x34
//	if(_pidOutput > 0) HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_SET);
//	else HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_RESET);
//
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);

}
 8001b82:	e01b      	b.n	8001bbc <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d106      	bne.n	8001b9a <_ZN15MotorController8setSpeedEf+0xd2>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b98:	e010      	b.n	8001bbc <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d106      	bne.n	8001bb0 <_ZN15MotorController8setSpeedEf+0xe8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001bae:	e005      	b.n	8001bbc <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	447a0000 	.word	0x447a0000

08001bc8 <_ZN15MotorController8getSpeedEv>:

float MotorController::getSpeed() {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
//	updateSpeed();
    return _currentSpeed;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	ee07 3a90 	vmov	s15, r3
}
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <_ZN15MotorController10ComputePIDEv>:

float MotorController::ComputePID() {
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    updateSpeed();
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8a9 	bl	8001d48 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    _integral += _error * (DT / 1000.0);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fcc9 	bl	80005a8 <__aeabi_f2d>
 8001c16:	4604      	mov	r4, r0
 8001c18:	460d      	mov	r5, r1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fcc2 	bl	80005a8 <__aeabi_f2d>
 8001c24:	a345      	add	r3, pc, #276	@ (adr r3, 8001d3c <_ZN15MotorController10ComputePIDEv+0x154>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fd15 	bl	8000658 <__aeabi_dmul>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4620      	mov	r0, r4
 8001c34:	4629      	mov	r1, r5
 8001c36:	f7fe fb59 	bl	80002ec <__adddf3>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ff1b 	bl	8000a7c <__aeabi_d2f>
 8001c46:	4602      	mov	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c52:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	db04      	blt.n	8001c6a <_ZN15MotorController10ComputePIDEv+0x82>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001c66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c68:	e00d      	b.n	8001c86 <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c70:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	d803      	bhi.n	8001c86 <_ZN15MotorController10ComputePIDEv+0x9e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001c84:	63da      	str	r2, [r3, #60]	@ 0x3c


    float derivative = (_error - _lastError) / (DT / 1000.0);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c96:	ee17 0a90 	vmov	r0, s15
 8001c9a:	f7fe fc85 	bl	80005a8 <__aeabi_f2d>
 8001c9e:	a327      	add	r3, pc, #156	@ (adr r3, 8001d3c <_ZN15MotorController10ComputePIDEv+0x154>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fe02 	bl	80008ac <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe fee4 	bl	8000a7c <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edd3 6a06 	vldr	s13, [r3, #24]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    // Update last error
    _lastError = _error;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(_pidOutput > 1) _pidOutput = 1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	dd04      	ble.n	8001d08 <_ZN15MotorController10ComputePIDEv+0x120>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d06:	e00c      	b.n	8001d22 <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001d0e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d502      	bpl.n	8001d22 <_ZN15MotorController10ComputePIDEv+0x13a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a06      	ldr	r2, [pc, #24]	@ (8001d38 <_ZN15MotorController10ComputePIDEv+0x150>)
 8001d20:	629a      	str	r2, [r3, #40]	@ 0x28
    return _pidOutput;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d26:	ee07 3a90 	vmov	s15, r3
////    pre_error = error;
//
//	if (_pidOutput > 1) _pidOutput = 1;
//	else if (_pidOutput < -1) _pidOutput = -1;
//    return _pidOutput;
}
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	bf800000 	.word	0xbf800000
 8001d3c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d40:	3f50624d 	.word	0x3f50624d
 8001d44:	00000000 	.word	0x00000000

08001d48 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
//    else
//        _currentSpeed = (__HAL_TIM_GET_COUNTER(_enc) / ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0); // RPS
//
//    _last_cnt = __HAL_TIM_GET_COUNTER(_enc);

	cnt = __HAL_TIM_GetCounter(_enc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d58:	b21a      	sxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	849a      	strh	r2, [r3, #36]	@ 0x24
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fc0d 	bl	8000584 <__aeabi_i2d>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <_ZN15MotorController11updateSpeedEv+0xb8>)
 8001d70:	f7fe fd9c 	bl	80008ac <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <_ZN15MotorController11updateSpeedEv+0xbc>)
 8001d82:	f7fe fd93 	bl	80008ac <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <_ZN15MotorController11updateSpeedEv+0xc0>)
 8001d94:	f7fe fd8a 	bl	80008ac <__aeabi_ddiv>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	a315      	add	r3, pc, #84	@ (adr r3, 8001df8 <_ZN15MotorController11updateSpeedEv+0xb0>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fd81 	bl	80008ac <__aeabi_ddiv>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4610      	mov	r0, r2
 8001db0:	4619      	mov	r1, r3
 8001db2:	f7fe fe63 	bl	8000a7c <__aeabi_d2f>
 8001db6:	4602      	mov	r2, r0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(_enc, 0);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    return _currentSpeed;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de6:	ee07 3a90 	vmov	s15, r3
}
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	f3af 8000 	nop.w
 8001df8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001dfc:	3f50624d 	.word	0x3f50624d
 8001e00:	40590000 	.word	0x40590000
 8001e04:	40500000 	.word	0x40500000
 8001e08:	40100000 	.word	0x40100000

08001e0c <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* dirGPIO, uint16_t dirPin, double kp, double ki, double kd):
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e14:	6239      	str	r1, [r7, #32]
 8001e16:	61fa      	str	r2, [r7, #28]
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	ed87 0b04 	vstr	d0, [r7, #16]
 8001e1e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001e22:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _dirGPIO(dirGPIO), _dirPin(dirPin), _kp(kp), _ki(ki), _kd(kd){}
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	6a3a      	ldr	r2, [r7, #32]
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e42:	821a      	strh	r2, [r3, #16]
 8001e44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e48:	f7fe fe18 	bl	8000a7c <__aeabi_d2f>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	615a      	str	r2, [r3, #20]
 8001e52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e56:	f7fe fe11 	bl	8000a7c <__aeabi_d2f>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5e:	619a      	str	r2, [r3, #24]
 8001e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e64:	f7fe fe0a 	bl	8000a7c <__aeabi_d2f>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	61da      	str	r2, [r3, #28]
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2020 	strb.w	r2, [r3, #32]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	2200      	movs	r2, #0
 8001e88:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0xd8>)
 8001ec4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	4618      	mov	r0, r3
 8001ede:	3728      	adds	r7, #40	@ 0x28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	42c80000 	.word	0x42c80000

08001ee8 <motor_init>:
float VgoalFL = 0.0;
float VgoalBR = 0.0;
float VgoalBL = 0.0;


void motor_init(){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	Motor_FR.init(1,1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2101      	movs	r1, #1
 8001ef0:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <motor_init+0x38>)
 8001ef2:	f7ff fdca 	bl	8001a8a <_ZN15MotorController4initEii>
	Motor_FL.init(1,-1);
 8001ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001efa:	2101      	movs	r1, #1
 8001efc:	4809      	ldr	r0, [pc, #36]	@ (8001f24 <motor_init+0x3c>)
 8001efe:	f7ff fdc4 	bl	8001a8a <_ZN15MotorController4initEii>
	Motor_BR.init(-1,1);
 8001f02:	2201      	movs	r2, #1
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f08:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <motor_init+0x40>)
 8001f0a:	f7ff fdbe 	bl	8001a8a <_ZN15MotorController4initEii>
	Motor_BL.init(1,-1);
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f12:	2101      	movs	r1, #1
 8001f14:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <motor_init+0x44>)
 8001f16:	f7ff fdb8 	bl	8001a8a <_ZN15MotorController4initEii>
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000a30 	.word	0x20000a30
 8001f24:	20000a80 	.word	0x20000a80
 8001f28:	20000ad0 	.word	0x20000ad0
 8001f2c:	20000b20 	.word	0x20000b20

08001f30 <_Z41__static_initialization_and_destruction_0v>:
    Motor_BL.setSpeed(VgoalBL);
//    test = Motor_BR.getSpeed();
//    Motor_BL.getSpeed();
//    Motor_FR.getSpeed();
//    Motor_FL.getSpeed();
}
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af02      	add	r7, sp, #8
MotorController Motor_FR(&htim1, &htim8, TIM_CHANNEL_1, GPIOB, GPIO_PIN_12, 1.1, 40, 0);
 8001f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	ed9f 2b21 	vldr	d2, [pc, #132]	@ 8001fc8 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f44:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8001fd0 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f48:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8001fd8 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	4a25      	ldr	r2, [pc, #148]	@ (8001fe4 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f50:	4925      	ldr	r1, [pc, #148]	@ (8001fe8 <_Z41__static_initialization_and_destruction_0v+0xb8>)
 8001f52:	4826      	ldr	r0, [pc, #152]	@ (8001fec <_Z41__static_initialization_and_destruction_0v+0xbc>)
 8001f54:	f7ff ff5a 	bl	8001e0c <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_FL(&htim2, &htim8, TIM_CHANNEL_2, GPIOA, GPIO_PIN_12, 1.1, 40, 0);
 8001f58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	ed9f 2b19 	vldr	d2, [pc, #100]	@ 8001fc8 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f66:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001fd0 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f6a:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001fd8 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe4 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f72:	4920      	ldr	r1, [pc, #128]	@ (8001ff4 <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001f74:	4820      	ldr	r0, [pc, #128]	@ (8001ff8 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 8001f76:	f7ff ff49 	bl	8001e0c <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_BR(&htim3, &htim8, TIM_CHANNEL_3, GPIOB, GPIO_PIN_14, 1.1, 40, 0);
 8001f7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	ed9f 2b10 	vldr	d2, [pc, #64]	@ 8001fc8 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f88:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001fd0 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f8c:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001fd8 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f90:	2308      	movs	r3, #8
 8001f92:	4a14      	ldr	r2, [pc, #80]	@ (8001fe4 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f94:	4919      	ldr	r1, [pc, #100]	@ (8001ffc <_Z41__static_initialization_and_destruction_0v+0xcc>)
 8001f96:	481a      	ldr	r0, [pc, #104]	@ (8002000 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 8001f98:	f7ff ff38 	bl	8001e0c <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_BL(&htim4, &htim8, TIM_CHANNEL_4, GPIOB, GPIO_PIN_15, 1.1, 40, 0);
 8001f9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8001fc8 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001faa:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001fd0 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001fae:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001fd8 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001fb2:	230c      	movs	r3, #12
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001fb6:	4913      	ldr	r1, [pc, #76]	@ (8002004 <_Z41__static_initialization_and_destruction_0v+0xd4>)
 8001fb8:	4813      	ldr	r0, [pc, #76]	@ (8002008 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 8001fba:	f7ff ff27 	bl	8001e0c <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	f3af 8000 	nop.w
	...
 8001fd4:	40440000 	.word	0x40440000
 8001fd8:	9999999a 	.word	0x9999999a
 8001fdc:	3ff19999 	.word	0x3ff19999
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	2000561c 	.word	0x2000561c
 8001fe8:	200054b4 	.word	0x200054b4
 8001fec:	20000a30 	.word	0x20000a30
 8001ff0:	40020000 	.word	0x40020000
 8001ff4:	200054fc 	.word	0x200054fc
 8001ff8:	20000a80 	.word	0x20000a80
 8001ffc:	20005544 	.word	0x20005544
 8002000:	20000ad0 	.word	0x20000ad0
 8002004:	2000558c 	.word	0x2000558c
 8002008:	20000b20 	.word	0x20000b20

0800200c <_GLOBAL__sub_I_Motor_FR>:
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
 8002010:	f7ff ff8e 	bl	8001f30 <_Z41__static_initialization_and_destruction_0v>
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 800201e:	4b14      	ldr	r3, [pc, #80]	@ (8002070 <uros_init+0x58>)
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <uros_init+0x5c>)
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <uros_init+0x60>)
 8002028:	4a14      	ldr	r2, [pc, #80]	@ (800207c <uros_init+0x64>)
 800202a:	4915      	ldr	r1, [pc, #84]	@ (8002080 <uros_init+0x68>)
 800202c:	2001      	movs	r0, #1
 800202e:	f00e ff61 	bl	8010ef4 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4618      	mov	r0, r3
 8002036:	f00e fb75 	bl	8010724 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <uros_init+0x6c>)
 800203c:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <uros_init+0x70>)
 8002040:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <uros_init+0x74>)
 8002044:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <uros_init+0x78>)
 8002048:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4618      	mov	r0, r3
 800204e:	f00e fb77 	bl	8010740 <rcutils_set_default_allocator>
 8002052:	4603      	mov	r3, r0
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 800205e:	213f      	movs	r1, #63	@ 0x3f
 8002060:	480c      	ldr	r0, [pc, #48]	@ (8002094 <uros_init+0x7c>)
 8002062:	f01a fae5 	bl	801c630 <iprintf>
  }
}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	08002b69 	.word	0x08002b69
 8002074:	08002b01 	.word	0x08002b01
 8002078:	08002ae1 	.word	0x08002ae1
 800207c:	08002ab5 	.word	0x08002ab5
 8002080:	20005664 	.word	0x20005664
 8002084:	0800351d 	.word	0x0800351d
 8002088:	08003561 	.word	0x08003561
 800208c:	08003599 	.word	0x08003599
 8002090:	08003605 	.word	0x08003605
 8002094:	0801d768 	.word	0x0801d768

08002098 <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  switch (status) {
 800209c:	4b11      	ldr	r3, [pc, #68]	@ (80020e4 <uros_agent_status_check+0x4c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d81c      	bhi.n	80020de <uros_agent_status_check+0x46>
 80020a4:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <uros_agent_status_check+0x14>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	080020c1 	.word	0x080020c1
 80020b0:	080020c7 	.word	0x080020c7
 80020b4:	080020cd 	.word	0x080020cd
 80020b8:	080020d3 	.word	0x080020d3
 80020bc:	080020d9 	.word	0x080020d9
    case AGENT_WAITING:
      handle_state_agent_waiting();
 80020c0:	f000 f812 	bl	80020e8 <handle_state_agent_waiting>
      break;
 80020c4:	e00c      	b.n	80020e0 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 80020c6:	f000 f821 	bl	800210c <handle_state_agent_available>
      break;
 80020ca:	e009      	b.n	80020e0 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 80020cc:	f000 f82c 	bl	8002128 <handle_state_agent_connected>
      break;
 80020d0:	e006      	b.n	80020e0 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 80020d2:	f000 f85b 	bl	800218c <handle_state_agent_trying>
      break;
 80020d6:	e003      	b.n	80020e0 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 80020d8:	f000 f882 	bl	80021e0 <handle_state_agent_disconnected>
      break;
 80020dc:	e000      	b.n	80020e0 <uros_agent_status_check+0x48>
    default:
      break;
 80020de:	bf00      	nop
  }
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000f90 	.word	0x20000f90

080020e8 <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 80020ec:	210a      	movs	r1, #10
 80020ee:	2064      	movs	r0, #100	@ 0x64
 80020f0:	f00e ff16 	bl	8010f20 <rmw_uros_ping_agent>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <handle_state_agent_waiting+0x16>
 80020fa:	2201      	movs	r2, #1
 80020fc:	e000      	b.n	8002100 <handle_state_agent_waiting+0x18>
 80020fe:	2200      	movs	r2, #0
 8002100:	4b01      	ldr	r3, [pc, #4]	@ (8002108 <handle_state_agent_waiting+0x20>)
 8002102:	701a      	strb	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000f90 	.word	0x20000f90

0800210c <handle_state_agent_available>:
void handle_state_agent_available(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  uros_create_entities();
 8002110:	f000 f872 	bl	80021f8 <uros_create_entities>
  status = AGENT_CONNECTED;
 8002114:	4b02      	ldr	r3, [pc, #8]	@ (8002120 <handle_state_agent_available+0x14>)
 8002116:	2202      	movs	r2, #2
 8002118:	701a      	strb	r2, [r3, #0]
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000f90 	.word	0x20000f90
 8002124:	00000000 	.word	0x00000000

08002128 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 800212c:	2105      	movs	r1, #5
 800212e:	2014      	movs	r0, #20
 8002130:	f00e fef6 	bl	8010f20 <rmw_uros_ping_agent>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d009      	beq.n	8002158 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 8002144:	a30f      	add	r3, pc, #60	@ (adr r3, 8002184 <handle_state_agent_connected+0x5c>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	480b      	ldr	r0, [pc, #44]	@ (8002178 <handle_state_agent_connected+0x50>)
 800214c:	f00e f976 	bl	801043c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <handle_state_agent_connected+0x54>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 8002156:	e00b      	b.n	8002170 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8002158:	4b08      	ldr	r3, [pc, #32]	@ (800217c <handle_state_agent_connected+0x54>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	4a07      	ldr	r2, [pc, #28]	@ (800217c <handle_state_agent_connected+0x54>)
 8002160:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <handle_state_agent_connected+0x54>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b04      	cmp	r3, #4
 8002168:	dd02      	ble.n	8002170 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 800216a:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <handle_state_agent_connected+0x58>)
 800216c:	2203      	movs	r2, #3
 800216e:	701a      	strb	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	f3af 8000 	nop.w
 8002178:	20000f08 	.word	0x20000f08
 800217c:	20000f94 	.word	0x20000f94
 8002180:	20000f90 	.word	0x20000f90
 8002184:	02faf080 	.word	0x02faf080
 8002188:	00000000 	.word	0x00000000

0800218c <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8002190:	210a      	movs	r1, #10
 8002192:	2032      	movs	r0, #50	@ 0x32
 8002194:	f00e fec4 	bl	8010f20 <rmw_uros_ping_agent>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	bf0c      	ite	eq
 800219e:	2301      	moveq	r3, #1
 80021a0:	2300      	movne	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <handle_state_agent_trying+0x4c>)
 80021aa:	2202      	movs	r2, #2
 80021ac:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <handle_state_agent_trying+0x50>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 80021b4:	e00e      	b.n	80021d4 <handle_state_agent_trying+0x48>
    ping_fail_count++;
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <handle_state_agent_trying+0x50>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a07      	ldr	r2, [pc, #28]	@ (80021dc <handle_state_agent_trying+0x50>)
 80021be:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <handle_state_agent_trying+0x50>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	dd05      	ble.n	80021d4 <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <handle_state_agent_trying+0x4c>)
 80021ca:	2204      	movs	r2, #4
 80021cc:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 80021ce:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <handle_state_agent_trying+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000f90 	.word	0x20000f90
 80021dc:	20000f94 	.word	0x20000f94

080021e0 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 80021e4:	f000 f93e 	bl	8002464 <uros_destroy_entities>
  status = AGENT_WAITING;
 80021e8:	4b02      	ldr	r3, [pc, #8]	@ (80021f4 <handle_state_agent_disconnected+0x14>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000f90 	.word	0x20000f90

080021f8 <uros_create_entities>:


void uros_create_entities(void) {
 80021f8:	b5b0      	push	{r4, r5, r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
  // 重置积分变量
  last_cmd_vel_time = 0;
 80021fe:	4b7e      	ldr	r3, [pc, #504]	@ (80023f8 <uros_create_entities+0x200>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
  last_cmd_arm_time = 0;
 8002204:	4b7d      	ldr	r3, [pc, #500]	@ (80023fc <uros_create_entities+0x204>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
  current_yaw = 0.0f;
 800220a:	4b7d      	ldr	r3, [pc, #500]	@ (8002400 <uros_create_entities+0x208>)
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

  allocator = rcl_get_default_allocator();
 8002212:	4c7c      	ldr	r4, [pc, #496]	@ (8002404 <uros_create_entities+0x20c>)
 8002214:	463b      	mov	r3, r7
 8002216:	4618      	mov	r0, r3
 8002218:	f00e fab0 	bl	801077c <rcutils_get_default_allocator>
 800221c:	4625      	mov	r5, r4
 800221e:	463c      	mov	r4, r7
 8002220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 8002228:	f00c faa0 	bl	800e76c <rcl_get_zero_initialized_init_options>
 800222c:	4603      	mov	r3, r0
 800222e:	4a76      	ldr	r2, [pc, #472]	@ (8002408 <uros_create_entities+0x210>)
 8002230:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 8002232:	4b74      	ldr	r3, [pc, #464]	@ (8002404 <uros_create_entities+0x20c>)
 8002234:	466c      	mov	r4, sp
 8002236:	f103 020c 	add.w	r2, r3, #12
 800223a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800223e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002244:	4870      	ldr	r0, [pc, #448]	@ (8002408 <uros_create_entities+0x210>)
 8002246:	f00c fa93 	bl	800e770 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 800224a:	2100      	movs	r1, #0
 800224c:	486e      	ldr	r0, [pc, #440]	@ (8002408 <uros_create_entities+0x210>)
 800224e:	f00c fb8b 	bl	800e968 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 8002252:	4b6c      	ldr	r3, [pc, #432]	@ (8002404 <uros_create_entities+0x20c>)
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4b6c      	ldr	r3, [pc, #432]	@ (8002408 <uros_create_entities+0x210>)
 8002258:	2200      	movs	r2, #0
 800225a:	2100      	movs	r1, #0
 800225c:	486b      	ldr	r0, [pc, #428]	@ (800240c <uros_create_entities+0x214>)
 800225e:	f00e f927 	bl	80104b0 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 8002262:	4869      	ldr	r0, [pc, #420]	@ (8002408 <uros_create_entities+0x210>)
 8002264:	f00c faea 	bl	800e83c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8002268:	4b68      	ldr	r3, [pc, #416]	@ (800240c <uros_create_entities+0x214>)
 800226a:	4a69      	ldr	r2, [pc, #420]	@ (8002410 <uros_create_entities+0x218>)
 800226c:	4969      	ldr	r1, [pc, #420]	@ (8002414 <uros_create_entities+0x21c>)
 800226e:	486a      	ldr	r0, [pc, #424]	@ (8002418 <uros_create_entities+0x220>)
 8002270:	f00e f97c 	bl	801056c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 8002274:	f00c f8f2 	bl	800e45c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002278:	4602      	mov	r2, r0
 800227a:	4b68      	ldr	r3, [pc, #416]	@ (800241c <uros_create_entities+0x224>)
 800227c:	4966      	ldr	r1, [pc, #408]	@ (8002418 <uros_create_entities+0x220>)
 800227e:	4868      	ldr	r0, [pc, #416]	@ (8002420 <uros_create_entities+0x228>)
 8002280:	f00e f9b0 	bl	80105e4 <rclc_publisher_init_default>
    &pose_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
    "robot/pose");
  pose_msg.pose.pose.position.x = 830.0;
 8002284:	4967      	ldr	r1, [pc, #412]	@ (8002424 <uros_create_entities+0x22c>)
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	4b67      	ldr	r3, [pc, #412]	@ (8002428 <uros_create_entities+0x230>)
 800228c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = 6160.0;
 8002290:	4964      	ldr	r1, [pc, #400]	@ (8002424 <uros_create_entities+0x22c>)
 8002292:	a355      	add	r3, pc, #340	@ (adr r3, 80023e8 <uros_create_entities+0x1f0>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.position.z = 0.0;
 800229c:	4961      	ldr	r1, [pc, #388]	@ (8002424 <uros_create_entities+0x22c>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  pose_msg.pose.pose.orientation.x = 0.0;
 80022aa:	495e      	ldr	r1, [pc, #376]	@ (8002424 <uros_create_entities+0x22c>)
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  pose_msg.pose.pose.orientation.y = 0.0;
 80022b8:	495a      	ldr	r1, [pc, #360]	@ (8002424 <uros_create_entities+0x22c>)
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  pose_msg.pose.pose.orientation.z = 0.0;
 80022c6:	4957      	ldr	r1, [pc, #348]	@ (8002424 <uros_create_entities+0x22c>)
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.pose.pose.orientation.w = 0.0;
 80022d4:	4953      	ldr	r1, [pc, #332]	@ (8002424 <uros_create_entities+0x22c>)
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 80022e2:	f010 f9c7 	bl	8012674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b50      	ldr	r3, [pc, #320]	@ (800242c <uros_create_entities+0x234>)
 80022ea:	494b      	ldr	r1, [pc, #300]	@ (8002418 <uros_create_entities+0x220>)
 80022ec:	4850      	ldr	r0, [pc, #320]	@ (8002430 <uros_create_entities+0x238>)
 80022ee:	f00e f979 	bl	80105e4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 80022f2:	4b50      	ldr	r3, [pc, #320]	@ (8002434 <uros_create_entities+0x23c>)
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022f8:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80022fa:	4849      	ldr	r0, [pc, #292]	@ (8002420 <uros_create_entities+0x228>)
 80022fc:	f00c fe2c 	bl	800ef58 <rcl_publisher_get_rmw_handle>
 8002300:	4603      	mov	r3, r0
 8002302:	210a      	movs	r1, #10
 8002304:	4618      	mov	r0, r3
 8002306:	f00f fdfd 	bl	8011f04 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&pose_pub),
    10);

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 800230a:	4849      	ldr	r0, [pc, #292]	@ (8002430 <uros_create_entities+0x238>)
 800230c:	f00c fe24 	bl	800ef58 <rcl_publisher_get_rmw_handle>
 8002310:	4603      	mov	r3, r0
 8002312:	210a      	movs	r1, #10
 8002314:	4618      	mov	r0, r3
 8002316:	f00f fdf5 	bl	8011f04 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for command velocity
 800231a:	f00a fbd5 	bl	800cac8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800231e:	4602      	mov	r2, r0
 8002320:	4b45      	ldr	r3, [pc, #276]	@ (8002438 <uros_create_entities+0x240>)
 8002322:	493d      	ldr	r1, [pc, #244]	@ (8002418 <uros_create_entities+0x220>)
 8002324:	4845      	ldr	r0, [pc, #276]	@ (800243c <uros_create_entities+0x244>)
 8002326:	f00e f991 	bl	801064c <rclc_subscription_init_default>
    &cmd_vel_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "robot/cmd_vel");
  cmd_vel_msg.linear.x = 0.0;
 800232a:	4945      	ldr	r1, [pc, #276]	@ (8002440 <uros_create_entities+0x248>)
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c1 2300 	strd	r2, r3, [r1]
  cmd_vel_msg.linear.y = 0.0;
 8002338:	4941      	ldr	r1, [pc, #260]	@ (8002440 <uros_create_entities+0x248>)
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9c1 2302 	strd	r2, r3, [r1, #8]
  cmd_vel_msg.linear.z = 0.0;
 8002346:	493e      	ldr	r1, [pc, #248]	@ (8002440 <uros_create_entities+0x248>)
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9c1 2304 	strd	r2, r3, [r1, #16]
  cmd_vel_msg.angular.x = 0.0;
 8002354:	493a      	ldr	r1, [pc, #232]	@ (8002440 <uros_create_entities+0x248>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c1 2306 	strd	r2, r3, [r1, #24]
  cmd_vel_msg.angular.y = 0.0;
 8002362:	4937      	ldr	r1, [pc, #220]	@ (8002440 <uros_create_entities+0x248>)
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  cmd_vel_msg.angular.z = 0.0;
 8002370:	4933      	ldr	r1, [pc, #204]	@ (8002440 <uros_create_entities+0x248>)
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 800237e:	f010 f979 	bl	8012674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002382:	4602      	mov	r2, r0
 8002384:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <uros_create_entities+0x24c>)
 8002386:	4924      	ldr	r1, [pc, #144]	@ (8002418 <uros_create_entities+0x220>)
 8002388:	482f      	ldr	r0, [pc, #188]	@ (8002448 <uros_create_entities+0x250>)
 800238a:	f00e f95f 	bl	801064c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 800238e:	4b2f      	ldr	r3, [pc, #188]	@ (800244c <uros_create_entities+0x254>)
 8002390:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002394:	601a      	str	r2, [r3, #0]


  rclc_timer_init_default(&pose_pub_timer, &support, RCL_MS_TO_NS(50), pose_pub_timer_cb);
 8002396:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <uros_create_entities+0x258>)
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	a315      	add	r3, pc, #84	@ (adr r3, 80023f0 <uros_create_entities+0x1f8>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	491a      	ldr	r1, [pc, #104]	@ (800240c <uros_create_entities+0x214>)
 80023a2:	482c      	ldr	r0, [pc, #176]	@ (8002454 <uros_create_entities+0x25c>)
 80023a4:	f00e f986 	bl	80106b4 <rclc_timer_init_default>

  
  rclc_executor_init(&executor, &support.context, 3, &allocator); // Create executor (1 timer + 2 subscriptions)
 80023a8:	4b16      	ldr	r3, [pc, #88]	@ (8002404 <uros_create_entities+0x20c>)
 80023aa:	2203      	movs	r2, #3
 80023ac:	4917      	ldr	r1, [pc, #92]	@ (800240c <uros_create_entities+0x214>)
 80023ae:	482a      	ldr	r0, [pc, #168]	@ (8002458 <uros_create_entities+0x260>)
 80023b0:	f00d fd56 	bl	800fe60 <rclc_executor_init>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_sub_cb, ON_NEW_DATA); // Add subscriber to executor
 80023b4:	2300      	movs	r3, #0
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <uros_create_entities+0x264>)
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <uros_create_entities+0x248>)
 80023bc:	491f      	ldr	r1, [pc, #124]	@ (800243c <uros_create_entities+0x244>)
 80023be:	4826      	ldr	r0, [pc, #152]	@ (8002458 <uros_create_entities+0x260>)
 80023c0:	f00d fdf2 	bl	800ffa8 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 80023c4:	2300      	movs	r3, #0
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <uros_create_entities+0x268>)
 80023ca:	4a20      	ldr	r2, [pc, #128]	@ (800244c <uros_create_entities+0x254>)
 80023cc:	491e      	ldr	r1, [pc, #120]	@ (8002448 <uros_create_entities+0x250>)
 80023ce:	4822      	ldr	r0, [pc, #136]	@ (8002458 <uros_create_entities+0x260>)
 80023d0:	f00d fdea 	bl	800ffa8 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pose_pub_timer); // Add timer to executor
 80023d4:	491f      	ldr	r1, [pc, #124]	@ (8002454 <uros_create_entities+0x25c>)
 80023d6:	4820      	ldr	r0, [pc, #128]	@ (8002458 <uros_create_entities+0x260>)
 80023d8:	f00d fe1a 	bl	8010010 <rclc_executor_add_timer>
}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bdb0      	pop	{r4, r5, r7, pc}
 80023e4:	f3af 8000 	nop.w
 80023e8:	00000000 	.word	0x00000000
 80023ec:	40b81000 	.word	0x40b81000
 80023f0:	02faf080 	.word	0x02faf080
 80023f4:	00000000 	.word	0x00000000
 80023f8:	20000ea4 	.word	0x20000ea4
 80023fc:	20000ea8 	.word	0x20000ea8
 8002400:	20000eac 	.word	0x20000eac
 8002404:	20000ee4 	.word	0x20000ee4
 8002408:	20000f00 	.word	0x20000f00
 800240c:	20000eb0 	.word	0x20000eb0
 8002410:	0801d790 	.word	0x0801d790
 8002414:	0801d794 	.word	0x0801d794
 8002418:	20000ef8 	.word	0x20000ef8
 800241c:	0801d7a0 	.word	0x0801d7a0
 8002420:	20000b88 	.word	0x20000b88
 8002424:	20000b90 	.word	0x20000b90
 8002428:	4089f000 	.word	0x4089f000
 800242c:	0801d7ac 	.word	0x0801d7ac
 8002430:	20000e90 	.word	0x20000e90
 8002434:	20000e94 	.word	0x20000e94
 8002438:	0801d7c0 	.word	0x0801d7c0
 800243c:	20000e58 	.word	0x20000e58
 8002440:	20000e60 	.word	0x20000e60
 8002444:	0801d7d0 	.word	0x0801d7d0
 8002448:	20000e98 	.word	0x20000e98
 800244c:	20000e9c 	.word	0x20000e9c
 8002450:	08002549 	.word	0x08002549
 8002454:	20000ea0 	.word	0x20000ea0
 8002458:	20000f08 	.word	0x20000f08
 800245c:	080024dd 	.word	0x080024dd
 8002460:	080025ad 	.word	0x080025ad

08002464 <uros_destroy_entities>:
void uros_destroy_entities(void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 800246a:	4814      	ldr	r0, [pc, #80]	@ (80024bc <uros_destroy_entities+0x58>)
 800246c:	f00c f904 	bl	800e678 <rcl_context_get_rmw_context>
 8002470:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 8002472:	2100      	movs	r1, #0
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f00f fd4d 	bl	8011f14 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&pose_pub, &node);
 800247a:	4911      	ldr	r1, [pc, #68]	@ (80024c0 <uros_destroy_entities+0x5c>)
 800247c:	4811      	ldr	r0, [pc, #68]	@ (80024c4 <uros_destroy_entities+0x60>)
 800247e:	f00c fced 	bl	800ee5c <rcl_publisher_fini>
  rcl_publisher_fini(&arm_pub, &node);
 8002482:	490f      	ldr	r1, [pc, #60]	@ (80024c0 <uros_destroy_entities+0x5c>)
 8002484:	4810      	ldr	r0, [pc, #64]	@ (80024c8 <uros_destroy_entities+0x64>)
 8002486:	f00c fce9 	bl	800ee5c <rcl_publisher_fini>

  // Destroy subscriber
  rcl_subscription_fini(&cmd_vel_sub, &node);
 800248a:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <uros_destroy_entities+0x5c>)
 800248c:	480f      	ldr	r0, [pc, #60]	@ (80024cc <uros_destroy_entities+0x68>)
 800248e:	f00c fe39 	bl	800f104 <rcl_subscription_fini>
  rcl_subscription_fini(&cmd_arm_sub, &node);
 8002492:	490b      	ldr	r1, [pc, #44]	@ (80024c0 <uros_destroy_entities+0x5c>)
 8002494:	480e      	ldr	r0, [pc, #56]	@ (80024d0 <uros_destroy_entities+0x6c>)
 8002496:	f00c fe35 	bl	800f104 <rcl_subscription_fini>

  rcl_timer_fini(&pose_pub_timer);
 800249a:	480e      	ldr	r0, [pc, #56]	@ (80024d4 <uros_destroy_entities+0x70>)
 800249c:	f00d f866 	bl	800f56c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 80024a0:	480d      	ldr	r0, [pc, #52]	@ (80024d8 <uros_destroy_entities+0x74>)
 80024a2:	f00d fd4d 	bl	800ff40 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 80024a6:	4806      	ldr	r0, [pc, #24]	@ (80024c0 <uros_destroy_entities+0x5c>)
 80024a8:	f00c fbb6 	bl	800ec18 <rcl_node_fini>
  rclc_support_fini(&support);
 80024ac:	4803      	ldr	r0, [pc, #12]	@ (80024bc <uros_destroy_entities+0x58>)
 80024ae:	f00e f833 	bl	8010518 <rclc_support_fini>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000eb0 	.word	0x20000eb0
 80024c0:	20000ef8 	.word	0x20000ef8
 80024c4:	20000b88 	.word	0x20000b88
 80024c8:	20000e90 	.word	0x20000e90
 80024cc:	20000e58 	.word	0x20000e58
 80024d0:	20000e98 	.word	0x20000e98
 80024d4:	20000ea0 	.word	0x20000ea0
 80024d8:	20000f08 	.word	0x20000f08

080024dc <cmd_vel_sub_cb>:

void cmd_vel_sub_cb(const void* msgin) {
 80024dc:	b4b0      	push	{r4, r5, r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60fb      	str	r3, [r7, #12]
  
  // 检查消息指针是否有效
  if (msg == NULL) {
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d01e      	beq.n	800252c <cmd_vel_sub_cb+0x50>
    return;
  }
  
  cmd_vel_msg = *msg;
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <cmd_vel_sub_cb+0x5c>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4614      	mov	r4, r2
 80024f4:	461d      	mov	r5, r3
 80024f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002502:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  vx = cmd_vel_msg.linear.x;
 8002506:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <cmd_vel_sub_cb+0x5c>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	490b      	ldr	r1, [pc, #44]	@ (800253c <cmd_vel_sub_cb+0x60>)
 800250e:	e9c1 2300 	strd	r2, r3, [r1]
  vy = cmd_vel_msg.linear.y;
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <cmd_vel_sub_cb+0x5c>)
 8002514:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002518:	4909      	ldr	r1, [pc, #36]	@ (8002540 <cmd_vel_sub_cb+0x64>)
 800251a:	e9c1 2300 	strd	r2, r3, [r1]
  vz = cmd_vel_msg.angular.z;
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <cmd_vel_sub_cb+0x5c>)
 8002520:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002524:	4907      	ldr	r1, [pc, #28]	@ (8002544 <cmd_vel_sub_cb+0x68>)
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
 800252a:	e000      	b.n	800252e <cmd_vel_sub_cb+0x52>
    return;
 800252c:	bf00      	nop
//
////	  rcl_publish(&pose_pub, &pose_msg, NULL);
//  }
//
//  last_cmd_vel_time = current_time;
}
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	bcb0      	pop	{r4, r5, r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000e60 	.word	0x20000e60
 800253c:	20000b70 	.word	0x20000b70
 8002540:	20000b78 	.word	0x20000b78
 8002544:	20000b80 	.word	0x20000b80

08002548 <pose_pub_timer_cb>:
  pose_msg.twist.twist.linear.y = vel_y;
  pose_msg.twist.twist.angular.z = vel_z;
}


void pose_pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	e9c7 2300 	strd	r2, r3, [r7]
  // 更新时间戳
  uint32_t current_tick = HAL_GetTick();
 8002554:	f001 fef8 	bl	8004348 <HAL_GetTick>
 8002558:	6178      	str	r0, [r7, #20]
  pose_msg.header.stamp.sec = current_tick / 1000;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4a0f      	ldr	r2, [pc, #60]	@ (800259c <pose_pub_timer_cb+0x54>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	461a      	mov	r2, r3
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <pose_pub_timer_cb+0x58>)
 8002568:	601a      	str	r2, [r3, #0]
  pose_msg.header.stamp.nanosec = (current_tick % 1000) * 1000000;
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <pose_pub_timer_cb+0x54>)
 800256e:	fba3 1302 	umull	r1, r3, r3, r2
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	4a09      	ldr	r2, [pc, #36]	@ (80025a4 <pose_pub_timer_cb+0x5c>)
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	4a06      	ldr	r2, [pc, #24]	@ (80025a0 <pose_pub_timer_cb+0x58>)
 8002586:	6053      	str	r3, [r2, #4]
  
//  rcl_ret_t ret = rcl_publish(&pose_pub, &pose_msg, NULL);
  rcl_publish(&pose_pub, &pose_msg, NULL);
 8002588:	2200      	movs	r2, #0
 800258a:	4905      	ldr	r1, [pc, #20]	@ (80025a0 <pose_pub_timer_cb+0x58>)
 800258c:	4806      	ldr	r0, [pc, #24]	@ (80025a8 <pose_pub_timer_cb+0x60>)
 800258e:	f00c fcbf 	bl	800ef10 <rcl_publish>
  // 可选：添加调试信息（如果需要的话）
  // printf("Published pose: x=%.2f, y=%.2f, yaw=%.2f, ret=%d\n", 
  //        pose_msg.pose.pose.position.x, 
  //        pose_msg.pose.pose.position.y, 
  //        current_yaw, ret);
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	10624dd3 	.word	0x10624dd3
 80025a0:	20000b90 	.word	0x20000b90
 80025a4:	000f4240 	.word	0x000f4240
 80025a8:	20000b88 	.word	0x20000b88

080025ac <cmd_arm_sub_cb>:

void cmd_arm_sub_cb(const void* msgin) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <cmd_arm_sub_cb+0x58>)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6013      	str	r3, [r2, #0]
  uint32_t current_time = HAL_GetTick();
 80025c0:	f001 fec2 	bl	8004348 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]

  if(arm_msg.data != cmd_arm_msg.data) {
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <cmd_arm_sub_cb+0x5c>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <cmd_arm_sub_cb+0x58>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d010      	beq.n	80025f4 <cmd_arm_sub_cb+0x48>
    if(current_time - last_cmd_arm_time > 2000) {
 80025d2:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <cmd_arm_sub_cb+0x60>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80025de:	d90c      	bls.n	80025fa <cmd_arm_sub_cb+0x4e>
      arm_msg = cmd_arm_msg;
 80025e0:	4a09      	ldr	r2, [pc, #36]	@ (8002608 <cmd_arm_sub_cb+0x5c>)
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <cmd_arm_sub_cb+0x58>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6013      	str	r3, [r2, #0]
      rcl_publish(&arm_pub, &arm_msg, NULL);
 80025e8:	2200      	movs	r2, #0
 80025ea:	4907      	ldr	r1, [pc, #28]	@ (8002608 <cmd_arm_sub_cb+0x5c>)
 80025ec:	4808      	ldr	r0, [pc, #32]	@ (8002610 <cmd_arm_sub_cb+0x64>)
 80025ee:	f00c fc8f 	bl	800ef10 <rcl_publish>
    }
  }
  else{
    last_cmd_arm_time = current_time;
  }
}
 80025f2:	e002      	b.n	80025fa <cmd_arm_sub_cb+0x4e>
    last_cmd_arm_time = current_time;
 80025f4:	4a05      	ldr	r2, [pc, #20]	@ (800260c <cmd_arm_sub_cb+0x60>)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6013      	str	r3, [r2, #0]
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000e9c 	.word	0x20000e9c
 8002608:	20000e94 	.word	0x20000e94
 800260c:	20000ea8 	.word	0x20000ea8
 8002610:	20000e90 	.word	0x20000e90

08002614 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	@ 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002620:	f008 fdc8 	bl	800b1b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002624:	4b5a      	ldr	r3, [pc, #360]	@ (8002790 <pvPortMallocMicroROS+0x17c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800262c:	f000 f986 	bl	800293c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002630:	4b58      	ldr	r3, [pc, #352]	@ (8002794 <pvPortMallocMicroROS+0x180>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8090 	bne.w	800275e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01e      	beq.n	8002682 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002644:	2208      	movs	r2, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4413      	add	r3, r2
 800264a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f023 0307 	bic.w	r3, r3, #7
 800265c:	3308      	adds	r3, #8
 800265e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800266a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800266e:	f383 8811 	msr	BASEPRI, r3
 8002672:	f3bf 8f6f 	isb	sy
 8002676:	f3bf 8f4f 	dsb	sy
 800267a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	e7fd      	b.n	800267e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d06a      	beq.n	800275e <pvPortMallocMicroROS+0x14a>
 8002688:	4b43      	ldr	r3, [pc, #268]	@ (8002798 <pvPortMallocMicroROS+0x184>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	429a      	cmp	r2, r3
 8002690:	d865      	bhi.n	800275e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <pvPortMallocMicroROS+0x188>)
 8002694:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <pvPortMallocMicroROS+0x188>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800269c:	e004      	b.n	80026a8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d903      	bls.n	80026ba <pvPortMallocMicroROS+0xa6>
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f1      	bne.n	800269e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80026ba:	4b35      	ldr	r3, [pc, #212]	@ (8002790 <pvPortMallocMicroROS+0x17c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d04c      	beq.n	800275e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4413      	add	r3, r2
 80026cc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	1ad2      	subs	r2, r2, r3
 80026de:	2308      	movs	r3, #8
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d920      	bls.n	8002728 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00b      	beq.n	8002710 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	613b      	str	r3, [r7, #16]
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	1ad2      	subs	r2, r2, r3
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002722:	69b8      	ldr	r0, [r7, #24]
 8002724:	f000 f96c 	bl	8002a00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <pvPortMallocMicroROS+0x184>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	4a19      	ldr	r2, [pc, #100]	@ (8002798 <pvPortMallocMicroROS+0x184>)
 8002734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002736:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <pvPortMallocMicroROS+0x184>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <pvPortMallocMicroROS+0x18c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d203      	bcs.n	800274a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <pvPortMallocMicroROS+0x184>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a16      	ldr	r2, [pc, #88]	@ (80027a0 <pvPortMallocMicroROS+0x18c>)
 8002748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <pvPortMallocMicroROS+0x180>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	431a      	orrs	r2, r3
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800275e:	f008 fd37 	bl	800b1d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800276c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	60fb      	str	r3, [r7, #12]
}
 800277e:	bf00      	nop
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002784:	69fb      	ldr	r3, [r7, #28]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20004ba0 	.word	0x20004ba0
 8002794:	20004bac 	.word	0x20004bac
 8002798:	20004ba4 	.word	0x20004ba4
 800279c:	20004b98 	.word	0x20004b98
 80027a0:	20004ba8 	.word	0x20004ba8

080027a4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d04a      	beq.n	800284c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80027b6:	2308      	movs	r3, #8
 80027b8:	425b      	negs	r3, r3
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	4b22      	ldr	r3, [pc, #136]	@ (8002854 <vPortFreeMicroROS+0xb0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <vPortFreeMicroROS+0x46>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	60fb      	str	r3, [r7, #12]
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	e7fd      	b.n	80027e6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <vPortFreeMicroROS+0x66>
	__asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	60bb      	str	r3, [r7, #8]
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	e7fd      	b.n	8002806 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <vPortFreeMicroROS+0xb0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d019      	beq.n	800284c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d115      	bne.n	800284c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <vPortFreeMicroROS+0xb0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	43db      	mvns	r3, r3
 800282a:	401a      	ands	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002830:	f008 fcc0 	bl	800b1b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <vPortFreeMicroROS+0xb4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4413      	add	r3, r2
 800283e:	4a06      	ldr	r2, [pc, #24]	@ (8002858 <vPortFreeMicroROS+0xb4>)
 8002840:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002842:	6938      	ldr	r0, [r7, #16]
 8002844:	f000 f8dc 	bl	8002a00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002848:	f008 fcc2 	bl	800b1d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800284c:	bf00      	nop
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20004bac 	.word	0x20004bac
 8002858:	20004ba4 	.word	0x20004ba4

0800285c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002868:	2308      	movs	r3, #8
 800286a:	425b      	negs	r3, r3
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4413      	add	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <getBlockSize+0x38>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	43db      	mvns	r3, r3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

	return count;
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	4618      	mov	r0, r3
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20004bac 	.word	0x20004bac

08002898 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80028a2:	f008 fc87 	bl	800b1b4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f7ff feb4 	bl	8002614 <pvPortMallocMicroROS>
 80028ac:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d017      	beq.n	80028e4 <pvPortReallocMicroROS+0x4c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d014      	beq.n	80028e4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffce 	bl	800285c <getBlockSize>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2208      	movs	r2, #8
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d201      	bcs.n	80028d4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68b8      	ldr	r0, [r7, #8]
 80028da:	f01a f8f8 	bl	801cace <memcpy>

		vPortFreeMicroROS(pv);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ff60 	bl	80027a4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80028e4:	f008 fc74 	bl	800b1d0 <xTaskResumeAll>

	return newmem;
 80028e8:	68bb      	ldr	r3, [r7, #8]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b086      	sub	sp, #24
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80028fc:	f008 fc5a 	bl	800b1b4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	fb02 f303 	mul.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff fe82 	bl	8002614 <pvPortMallocMicroROS>
 8002910:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002916:	e004      	b.n	8002922 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	613a      	str	r2, [r7, #16]
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	617a      	str	r2, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f5      	bne.n	8002918 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800292c:	f008 fc50 	bl	800b1d0 <xTaskResumeAll>
  	return mem;
 8002930:	68fb      	ldr	r3, [r7, #12]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002942:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002946:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002948:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <prvHeapInit+0xac>)
 800294a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00c      	beq.n	8002970 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3307      	adds	r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0307 	bic.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	4a1f      	ldr	r2, [pc, #124]	@ (80029e8 <prvHeapInit+0xac>)
 800296c:	4413      	add	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002974:	4a1d      	ldr	r2, [pc, #116]	@ (80029ec <prvHeapInit+0xb0>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800297a:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <prvHeapInit+0xb0>)
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4413      	add	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002988:	2208      	movs	r2, #8
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0307 	bic.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a15      	ldr	r2, [pc, #84]	@ (80029f0 <prvHeapInit+0xb4>)
 800299c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <prvHeapInit+0xb4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2200      	movs	r2, #0
 80029a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029a6:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <prvHeapInit+0xb4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	1ad2      	subs	r2, r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <prvHeapInit+0xb4>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <prvHeapInit+0xb8>)
 80029ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <prvHeapInit+0xbc>)
 80029d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <prvHeapInit+0xc0>)
 80029d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000f98 	.word	0x20000f98
 80029ec:	20004b98 	.word	0x20004b98
 80029f0:	20004ba0 	.word	0x20004ba0
 80029f4:	20004ba8 	.word	0x20004ba8
 80029f8:	20004ba4 	.word	0x20004ba4
 80029fc:	20004bac 	.word	0x20004bac

08002a00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a08:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <prvInsertBlockIntoFreeList+0xac>)
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e002      	b.n	8002a14 <prvInsertBlockIntoFreeList+0x14>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d8f7      	bhi.n	8002a0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	4413      	add	r3, r2
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d108      	bne.n	8002a42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	441a      	add	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d118      	bne.n	8002a88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b15      	ldr	r3, [pc, #84]	@ (8002ab0 <prvInsertBlockIntoFreeList+0xb0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d00d      	beq.n	8002a7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e008      	b.n	8002a90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <prvInsertBlockIntoFreeList+0xb0>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e003      	b.n	8002a90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d002      	beq.n	8002a9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20004b98 	.word	0x20004b98
 8002ab0:	20004ba0 	.word	0x20004ba0

08002ab4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ac2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ac4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ac8:	4904      	ldr	r1, [pc, #16]	@ (8002adc <cubemx_transport_open+0x28>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f006 f84e 	bl	8008b6c <HAL_UART_Receive_DMA>
    return true;
 8002ad0:	2301      	movs	r3, #1
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20004bb0 	.word	0x20004bb0

08002ae0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002aee:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f006 f860 	bl	8008bb6 <HAL_UART_DMAStop>
    return true;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b14:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d11c      	bne.n	8002b5c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	6978      	ldr	r0, [r7, #20]
 8002b2c:	f005 ffa2 	bl	8008a74 <HAL_UART_Transmit_DMA>
 8002b30:	4603      	mov	r3, r0
 8002b32:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b34:	e002      	b.n	8002b3c <cubemx_transport_write+0x3c>
            osDelay(1);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f007 fafa 	bl	800a130 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <cubemx_transport_write+0x4e>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d1f3      	bne.n	8002b36 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <cubemx_transport_write+0x58>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	e002      	b.n	8002b5e <cubemx_transport_write+0x5e>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e000      	b.n	8002b5e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002b5c:	2300      	movs	r3, #0
    }
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b7c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b82:	b672      	cpsid	i
}
 8002b84:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002b92:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <cubemx_transport_read+0x9c>)
 8002b94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b96:	b662      	cpsie	i
}
 8002b98:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f007 fac5 	bl	800a130 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002ba6:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <cubemx_transport_read+0xa0>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	4b16      	ldr	r3, [pc, #88]	@ (8002c04 <cubemx_transport_read+0x9c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d103      	bne.n	8002bba <cubemx_transport_read+0x52>
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	dbe3      	blt.n	8002b82 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002bbe:	e011      	b.n	8002be4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <cubemx_transport_read+0xa0>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	440b      	add	r3, r1
 8002bca:	4910      	ldr	r1, [pc, #64]	@ (8002c0c <cubemx_transport_read+0xa4>)
 8002bcc:	5c8a      	ldrb	r2, [r1, r2]
 8002bce:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c08 <cubemx_transport_read+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bda:	4a0b      	ldr	r2, [pc, #44]	@ (8002c08 <cubemx_transport_read+0xa0>)
 8002bdc:	6013      	str	r3, [r2, #0]
        wrote++;
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002be4:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <cubemx_transport_read+0xa0>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <cubemx_transport_read+0x9c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d003      	beq.n	8002bf8 <cubemx_transport_read+0x90>
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d3e3      	bcc.n	8002bc0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200053b4 	.word	0x200053b4
 8002c08:	200053b0 	.word	0x200053b0
 8002c0c:	20004bb0 	.word	0x20004bb0

08002c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c14:	f001 fb62 	bl	80042dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c18:	f000 f82a 	bl	8002c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c1c:	f000 fc0e 	bl	800343c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c20:	f000 fbce 	bl	80033c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c24:	f000 fba2 	bl	800336c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002c28:	f000 f956 	bl	8002ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c2c:	f000 f9ac 	bl	8002f88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c30:	f000 f9fe 	bl	8003030 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c34:	f000 fa50 	bl	80030d8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c38:	f000 faa2 	bl	8003180 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c3c:	f000 faee 	bl	800321c <MX_TIM8_Init>
  MX_ADC1_Init();
 8002c40:	f000 f876 	bl	8002d30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c44:	f000 f91a 	bl	8002e7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c48:	f007 f996 	bl	8009f78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c4c:	4a05      	ldr	r2, [pc, #20]	@ (8002c64 <main+0x54>)
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4805      	ldr	r0, [pc, #20]	@ (8002c68 <main+0x58>)
 8002c52:	f007 f9db 	bl	800a00c <osThreadNew>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a04      	ldr	r2, [pc, #16]	@ (8002c6c <main+0x5c>)
 8002c5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002c5c:	f007 f9b0 	bl	8009fc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <main+0x50>
 8002c64:	0801d828 	.word	0x0801d828
 8002c68:	080041d9 	.word	0x080041d9
 8002c6c:	2000576c 	.word	0x2000576c

08002c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b094      	sub	sp, #80	@ 0x50
 8002c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	2234      	movs	r2, #52	@ 0x34
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f019 fe5c 	bl	801c93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <SystemClock_Config+0xb8>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	4a22      	ldr	r2, [pc, #136]	@ (8002d28 <SystemClock_Config+0xb8>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca4:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <SystemClock_Config+0xb8>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d2c <SystemClock_Config+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d2c <SystemClock_Config+0xbc>)
 8002cbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b19      	ldr	r3, [pc, #100]	@ (8002d2c <SystemClock_Config+0xbc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f004 fa31 	bl	800714c <HAL_RCC_OscConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002cf0:	f000 fc0e 	bl	8003510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d08:	f107 0308 	add.w	r3, r7, #8
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f003 ff26 	bl	8006b60 <HAL_RCC_ClockConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002d1a:	f000 fbf9 	bl	8003510 <Error_Handler>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3750      	adds	r7, #80	@ 0x50
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40007000 	.word	0x40007000

08002d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d36:	463b      	mov	r3, r7
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d42:	4b4b      	ldr	r3, [pc, #300]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d44:	4a4b      	ldr	r2, [pc, #300]	@ (8002e74 <MX_ADC1_Init+0x144>)
 8002d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d48:	4b49      	ldr	r3, [pc, #292]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d4e:	4b48      	ldr	r3, [pc, #288]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d54:	4b46      	ldr	r3, [pc, #280]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d5a:	4b45      	ldr	r3, [pc, #276]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d60:	4b43      	ldr	r3, [pc, #268]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d68:	4b41      	ldr	r3, [pc, #260]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d6e:	4b40      	ldr	r3, [pc, #256]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d70:	4a41      	ldr	r2, [pc, #260]	@ (8002e78 <MX_ADC1_Init+0x148>)
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d74:	4b3e      	ldr	r3, [pc, #248]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d80:	4b3b      	ldr	r3, [pc, #236]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d88:	4b39      	ldr	r3, [pc, #228]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d8e:	4838      	ldr	r0, [pc, #224]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002d90:	f001 fae6 	bl	8004360 <HAL_ADC_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002d9a:	f000 fbb9 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002da6:	2301      	movs	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002daa:	463b      	mov	r3, r7
 8002dac:	4619      	mov	r1, r3
 8002dae:	4830      	ldr	r0, [pc, #192]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002db0:	f001 fc4c 	bl	800464c <HAL_ADC_ConfigChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002dba:	f000 fba9 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002dbe:	230a      	movs	r3, #10
 8002dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4829      	ldr	r0, [pc, #164]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002dcc:	f001 fc3e 	bl	800464c <HAL_ADC_ConfigChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002dd6:	f000 fb9b 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002dda:	230b      	movs	r3, #11
 8002ddc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002dde:	2303      	movs	r3, #3
 8002de0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de2:	463b      	mov	r3, r7
 8002de4:	4619      	mov	r1, r3
 8002de6:	4822      	ldr	r0, [pc, #136]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002de8:	f001 fc30 	bl	800464c <HAL_ADC_ConfigChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002df2:	f000 fb8d 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002df6:	230c      	movs	r3, #12
 8002df8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dfe:	463b      	mov	r3, r7
 8002e00:	4619      	mov	r1, r3
 8002e02:	481b      	ldr	r0, [pc, #108]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002e04:	f001 fc22 	bl	800464c <HAL_ADC_ConfigChannel>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8002e0e:	f000 fb7f 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002e12:	230d      	movs	r3, #13
 8002e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002e16:	2305      	movs	r3, #5
 8002e18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4814      	ldr	r0, [pc, #80]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002e20:	f001 fc14 	bl	800464c <HAL_ADC_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8002e2a:	f000 fb71 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e2e:	230e      	movs	r3, #14
 8002e30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002e32:	2306      	movs	r3, #6
 8002e34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e36:	463b      	mov	r3, r7
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002e3c:	f001 fc06 	bl	800464c <HAL_ADC_ConfigChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8002e46:	f000 fb63 	bl	8003510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002e4e:	2307      	movs	r3, #7
 8002e50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	4619      	mov	r1, r3
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <MX_ADC1_Init+0x140>)
 8002e58:	f001 fbf8 	bl	800464c <HAL_ADC_ConfigChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8002e62:	f000 fb55 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200053b8 	.word	0x200053b8
 8002e74:	40012000 	.word	0x40012000
 8002e78:	0f000001 	.word	0x0f000001

08002e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e80:	4b12      	ldr	r3, [pc, #72]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002e82:	4a13      	ldr	r2, [pc, #76]	@ (8002ed0 <MX_I2C1_Init+0x54>)
 8002e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002e88:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <MX_I2C1_Init+0x58>)
 8002e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002e9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eac:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eb8:	4804      	ldr	r0, [pc, #16]	@ (8002ecc <MX_I2C1_Init+0x50>)
 8002eba:	f002 fdfd 	bl	8005ab8 <HAL_I2C_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ec4:	f000 fb24 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20005460 	.word	0x20005460
 8002ed0:	40005400 	.word	0x40005400
 8002ed4:	000186a0 	.word	0x000186a0

08002ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08c      	sub	sp, #48	@ 0x30
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	2224      	movs	r2, #36	@ 0x24
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f019 fd28 	bl	801c93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ef4:	4b22      	ldr	r3, [pc, #136]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002ef6:	4a23      	ldr	r2, [pc, #140]	@ (8002f84 <MX_TIM1_Init+0xac>)
 8002ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002efa:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f20:	2303      	movs	r3, #3
 8002f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	4619      	mov	r1, r3
 8002f4a:	480d      	ldr	r0, [pc, #52]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f4c:	f004 fd74 	bl	8007a38 <HAL_TIM_Encoder_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002f56:	f000 fadb 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	@ (8002f80 <MX_TIM1_Init+0xa8>)
 8002f68:	f005 fc52 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002f72:	f000 facd 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	3730      	adds	r7, #48	@ 0x30
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200054b4 	.word	0x200054b4
 8002f84:	40010000 	.word	0x40010000

08002f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	@ 0x30
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f8e:	f107 030c 	add.w	r3, r7, #12
 8002f92:	2224      	movs	r2, #36	@ 0x24
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f019 fcd0 	bl	801c93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fa4:	4b21      	ldr	r3, [pc, #132]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002fa6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002fac:	4b1f      	ldr	r3, [pc, #124]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002fba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fc6:	4b19      	ldr	r3, [pc, #100]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ff0:	f107 030c 	add.w	r3, r7, #12
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	480d      	ldr	r0, [pc, #52]	@ (800302c <MX_TIM2_Init+0xa4>)
 8002ff8:	f004 fd1e 	bl	8007a38 <HAL_TIM_Encoder_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003002:	f000 fa85 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	4619      	mov	r1, r3
 8003012:	4806      	ldr	r0, [pc, #24]	@ (800302c <MX_TIM2_Init+0xa4>)
 8003014:	f005 fbfc 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800301e:	f000 fa77 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003022:	bf00      	nop
 8003024:	3730      	adds	r7, #48	@ 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200054fc 	.word	0x200054fc

08003030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	@ 0x30
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	2224      	movs	r2, #36	@ 0x24
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f019 fc7c 	bl	801c93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800304c:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 800304e:	4a21      	ldr	r2, [pc, #132]	@ (80030d4 <MX_TIM3_Init+0xa4>)
 8003050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003052:	4b1f      	ldr	r3, [pc, #124]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003058:	4b1d      	ldr	r3, [pc, #116]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800305e:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 8003060:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003066:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800306c:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 800306e:	2200      	movs	r2, #0
 8003070:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003072:	2303      	movs	r3, #3
 8003074:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800307a:	2301      	movs	r3, #1
 800307c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003086:	2300      	movs	r3, #0
 8003088:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800308a:	2301      	movs	r3, #1
 800308c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800308e:	2300      	movs	r3, #0
 8003090:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	4619      	mov	r1, r3
 800309c:	480c      	ldr	r0, [pc, #48]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 800309e:	f004 fccb 	bl	8007a38 <HAL_TIM_Encoder_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80030a8:	f000 fa32 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4805      	ldr	r0, [pc, #20]	@ (80030d0 <MX_TIM3_Init+0xa0>)
 80030ba:	f005 fba9 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80030c4:	f000 fa24 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030c8:	bf00      	nop
 80030ca:	3730      	adds	r7, #48	@ 0x30
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20005544 	.word	0x20005544
 80030d4:	40000400 	.word	0x40000400

080030d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	@ 0x30
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2224      	movs	r2, #36	@ 0x24
 80030e4:	2100      	movs	r1, #0
 80030e6:	4618      	mov	r0, r3
 80030e8:	f019 fc28 	bl	801c93c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030f4:	4b20      	ldr	r3, [pc, #128]	@ (8003178 <MX_TIM4_Init+0xa0>)
 80030f6:	4a21      	ldr	r2, [pc, #132]	@ (800317c <MX_TIM4_Init+0xa4>)
 80030f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80030fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003178 <MX_TIM4_Init+0xa0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003100:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <MX_TIM4_Init+0xa0>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <MX_TIM4_Init+0xa0>)
 8003108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800310c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800310e:	4b1a      	ldr	r3, [pc, #104]	@ (8003178 <MX_TIM4_Init+0xa0>)
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003114:	4b18      	ldr	r3, [pc, #96]	@ (8003178 <MX_TIM4_Init+0xa0>)
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800311a:	2303      	movs	r3, #3
 800311c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003132:	2301      	movs	r3, #1
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003136:	2300      	movs	r3, #0
 8003138:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	4619      	mov	r1, r3
 8003144:	480c      	ldr	r0, [pc, #48]	@ (8003178 <MX_TIM4_Init+0xa0>)
 8003146:	f004 fc77 	bl	8007a38 <HAL_TIM_Encoder_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003150:	f000 f9de 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800315c:	1d3b      	adds	r3, r7, #4
 800315e:	4619      	mov	r1, r3
 8003160:	4805      	ldr	r0, [pc, #20]	@ (8003178 <MX_TIM4_Init+0xa0>)
 8003162:	f005 fb55 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800316c:	f000 f9d0 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003170:	bf00      	nop
 8003172:	3730      	adds	r7, #48	@ 0x30
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000558c 	.word	0x2000558c
 800317c:	40000800 	.word	0x40000800

08003180 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003194:	463b      	mov	r3, r7
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800319c:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <MX_TIM5_Init+0x94>)
 800319e:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <MX_TIM5_Init+0x98>)
 80031a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80031a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031a4:	220f      	movs	r2, #15
 80031a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80031ae:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b6:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031bc:	4b15      	ldr	r3, [pc, #84]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031be:	2200      	movs	r2, #0
 80031c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80031c2:	4814      	ldr	r0, [pc, #80]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031c4:	f004 fa60 	bl	8007688 <HAL_TIM_Base_Init>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80031ce:	f000 f99f 	bl	8003510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80031d8:	f107 0308 	add.w	r3, r7, #8
 80031dc:	4619      	mov	r1, r3
 80031de:	480d      	ldr	r0, [pc, #52]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031e0:	f004 ff10 	bl	8008004 <HAL_TIM_ConfigClockSource>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80031ea:	f000 f991 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ee:	2300      	movs	r3, #0
 80031f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80031f6:	463b      	mov	r3, r7
 80031f8:	4619      	mov	r1, r3
 80031fa:	4806      	ldr	r0, [pc, #24]	@ (8003214 <MX_TIM5_Init+0x94>)
 80031fc:	f005 fb08 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003206:	f000 f983 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200055d4 	.word	0x200055d4
 8003218:	40000c00 	.word	0x40000c00

0800321c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b092      	sub	sp, #72	@ 0x48
 8003220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003222:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800322c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
 800323c:	615a      	str	r2, [r3, #20]
 800323e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2220      	movs	r2, #32
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f019 fb78 	bl	801c93c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800324c:	4b45      	ldr	r3, [pc, #276]	@ (8003364 <MX_TIM8_Init+0x148>)
 800324e:	4a46      	ldr	r2, [pc, #280]	@ (8003368 <MX_TIM8_Init+0x14c>)
 8003250:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003252:	4b44      	ldr	r3, [pc, #272]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003254:	22b3      	movs	r2, #179	@ 0xb3
 8003256:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003258:	4b42      	ldr	r3, [pc, #264]	@ (8003364 <MX_TIM8_Init+0x148>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 800325e:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003260:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003264:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003266:	4b3f      	ldr	r3, [pc, #252]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003268:	2200      	movs	r2, #0
 800326a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800326c:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <MX_TIM8_Init+0x148>)
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003272:	4b3c      	ldr	r3, [pc, #240]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003278:	483a      	ldr	r0, [pc, #232]	@ (8003364 <MX_TIM8_Init+0x148>)
 800327a:	f004 fac5 	bl	8007808 <HAL_TIM_PWM_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003284:	f000 f944 	bl	8003510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003288:	2300      	movs	r3, #0
 800328a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800328c:	2300      	movs	r3, #0
 800328e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003290:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003294:	4619      	mov	r1, r3
 8003296:	4833      	ldr	r0, [pc, #204]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003298:	f005 faba 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80032a2:	f000 f935 	bl	8003510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a6:	2360      	movs	r3, #96	@ 0x60
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032b2:	2300      	movs	r3, #0
 80032b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032ba:	2300      	movs	r3, #0
 80032bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c6:	2200      	movs	r2, #0
 80032c8:	4619      	mov	r1, r3
 80032ca:	4826      	ldr	r0, [pc, #152]	@ (8003364 <MX_TIM8_Init+0x148>)
 80032cc:	f004 fdd8 	bl	8007e80 <HAL_TIM_PWM_ConfigChannel>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80032d6:	f000 f91b 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032de:	2204      	movs	r2, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4820      	ldr	r0, [pc, #128]	@ (8003364 <MX_TIM8_Init+0x148>)
 80032e4:	f004 fdcc 	bl	8007e80 <HAL_TIM_PWM_ConfigChannel>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80032ee:	f000 f90f 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f6:	2208      	movs	r2, #8
 80032f8:	4619      	mov	r1, r3
 80032fa:	481a      	ldr	r0, [pc, #104]	@ (8003364 <MX_TIM8_Init+0x148>)
 80032fc:	f004 fdc0 	bl	8007e80 <HAL_TIM_PWM_ConfigChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003306:	f000 f903 	bl	8003510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800330a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800330e:	220c      	movs	r2, #12
 8003310:	4619      	mov	r1, r3
 8003312:	4814      	ldr	r0, [pc, #80]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003314:	f004 fdb4 	bl	8007e80 <HAL_TIM_PWM_ConfigChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800331e:	f000 f8f7 	bl	8003510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800333a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4807      	ldr	r0, [pc, #28]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003346:	f005 fadf 	bl	8008908 <HAL_TIMEx_ConfigBreakDeadTime>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8003350:	f000 f8de 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003354:	4803      	ldr	r0, [pc, #12]	@ (8003364 <MX_TIM8_Init+0x148>)
 8003356:	f000 fca1 	bl	8003c9c <HAL_TIM_MspPostInit>

}
 800335a:	bf00      	nop
 800335c:	3748      	adds	r7, #72	@ 0x48
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	2000561c 	.word	0x2000561c
 8003368:	40010400 	.word	0x40010400

0800336c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <MX_USART2_UART_Init+0x50>)
 8003374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 8003378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800337c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800337e:	4b0e      	ldr	r3, [pc, #56]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 8003386:	2200      	movs	r2, #0
 8003388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800338a:	4b0b      	ldr	r3, [pc, #44]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 800338c:	2200      	movs	r2, #0
 800338e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 8003392:	220c      	movs	r2, #12
 8003394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003396:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 8003398:	2200      	movs	r2, #0
 800339a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800339c:	4b06      	ldr	r3, [pc, #24]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 800339e:	2200      	movs	r2, #0
 80033a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033a2:	4805      	ldr	r0, [pc, #20]	@ (80033b8 <MX_USART2_UART_Init+0x4c>)
 80033a4:	f005 fb16 	bl	80089d4 <HAL_UART_Init>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80033ae:	f000 f8af 	bl	8003510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20005664 	.word	0x20005664
 80033bc:	40004400 	.word	0x40004400

080033c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <MX_DMA_Init+0x78>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003438 <MX_DMA_Init+0x78>)
 80033d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d6:	4b18      	ldr	r3, [pc, #96]	@ (8003438 <MX_DMA_Init+0x78>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4b14      	ldr	r3, [pc, #80]	@ (8003438 <MX_DMA_Init+0x78>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a13      	ldr	r2, [pc, #76]	@ (8003438 <MX_DMA_Init+0x78>)
 80033ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <MX_DMA_Init+0x78>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2105      	movs	r1, #5
 8003402:	2010      	movs	r0, #16
 8003404:	f001 fc8a 	bl	8004d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003408:	2010      	movs	r0, #16
 800340a:	f001 fca3 	bl	8004d54 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800340e:	2200      	movs	r2, #0
 8003410:	2105      	movs	r1, #5
 8003412:	2011      	movs	r0, #17
 8003414:	f001 fc82 	bl	8004d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003418:	2011      	movs	r0, #17
 800341a:	f001 fc9b 	bl	8004d54 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800341e:	2200      	movs	r2, #0
 8003420:	2105      	movs	r1, #5
 8003422:	2038      	movs	r0, #56	@ 0x38
 8003424:	f001 fc7a 	bl	8004d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003428:	2038      	movs	r0, #56	@ 0x38
 800342a:	f001 fc93 	bl	8004d54 <HAL_NVIC_EnableIRQ>

}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800

0800343c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003442:	f107 030c 	add.w	r3, r7, #12
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	4a2a      	ldr	r2, [pc, #168]	@ (8003504 <MX_GPIO_Init+0xc8>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6313      	str	r3, [r2, #48]	@ 0x30
 8003462:	4b28      	ldr	r3, [pc, #160]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	4b24      	ldr	r3, [pc, #144]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6313      	str	r3, [r2, #48]	@ 0x30
 800347e:	4b21      	ldr	r3, [pc, #132]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	603b      	str	r3, [r7, #0]
 800348e:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <MX_GPIO_Init+0xc8>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	6313      	str	r3, [r2, #48]	@ 0x30
 800349a:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <MX_GPIO_Init+0xc8>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80034a6:	2200      	movs	r2, #0
 80034a8:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80034ac:	4816      	ldr	r0, [pc, #88]	@ (8003508 <MX_GPIO_Init+0xcc>)
 80034ae:	f002 fae9 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80034b2:	2200      	movs	r2, #0
 80034b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034b8:	4814      	ldr	r0, [pc, #80]	@ (800350c <MX_GPIO_Init+0xd0>)
 80034ba:	f002 fae3 	bl	8005a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80034be:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80034c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c4:	2301      	movs	r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	4619      	mov	r1, r3
 80034d6:	480c      	ldr	r0, [pc, #48]	@ (8003508 <MX_GPIO_Init+0xcc>)
 80034d8:	f002 f84c 	bl	8005574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e2:	2301      	movs	r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	4619      	mov	r1, r3
 80034f4:	4805      	ldr	r0, [pc, #20]	@ (800350c <MX_GPIO_Init+0xd0>)
 80034f6:	f002 f83d 	bl	8005574 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80034fa:	bf00      	nop
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023800 	.word	0x40023800
 8003508:	40020400 	.word	0x40020400
 800350c:	40020000 	.word	0x40020000

08003510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003514:	b672      	cpsid	i
}
 8003516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <Error_Handler+0x8>

0800351c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003526:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <microros_allocate+0x3c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	461a      	mov	r2, r3
 8003532:	4b09      	ldr	r3, [pc, #36]	@ (8003558 <microros_allocate+0x3c>)
 8003534:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <microros_allocate+0x40>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	461a      	mov	r2, r3
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <microros_allocate+0x40>)
 8003544:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff f864 	bl	8002614 <pvPortMallocMicroROS>
 800354c:	4603      	mov	r3, r0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200086ac 	.word	0x200086ac
 800355c:	200086b0 	.word	0x200086b0

08003560 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff f973 	bl	800285c <getBlockSize>
 8003576:	4603      	mov	r3, r0
 8003578:	4a06      	ldr	r2, [pc, #24]	@ (8003594 <microros_deallocate+0x34>)
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	461a      	mov	r2, r3
 8003580:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <microros_deallocate+0x34>)
 8003582:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff f90d 	bl	80027a4 <vPortFreeMicroROS>
  }
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200086b0 	.word	0x200086b0

08003598 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80035a4:	4b15      	ldr	r3, [pc, #84]	@ (80035fc <microros_reallocate+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b12      	ldr	r3, [pc, #72]	@ (80035fc <microros_reallocate+0x64>)
 80035b2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80035b4:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <microros_reallocate+0x68>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4413      	add	r3, r2
 80035be:	461a      	mov	r2, r3
 80035c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <microros_reallocate+0x68>)
 80035c2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80035ca:	68b8      	ldr	r0, [r7, #8]
 80035cc:	f7ff f822 	bl	8002614 <pvPortMallocMicroROS>
 80035d0:	4603      	mov	r3, r0
 80035d2:	e00e      	b.n	80035f2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff f941 	bl	800285c <getBlockSize>
 80035da:	4603      	mov	r3, r0
 80035dc:	4a08      	ldr	r2, [pc, #32]	@ (8003600 <microros_reallocate+0x68>)
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b06      	ldr	r3, [pc, #24]	@ (8003600 <microros_reallocate+0x68>)
 80035e6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff f954 	bl	8002898 <pvPortReallocMicroROS>
 80035f0:	4603      	mov	r3, r0
  }
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200086ac 	.word	0x200086ac
 8003600:	200086b0 	.word	0x200086b0

08003604 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	4a0c      	ldr	r2, [pc, #48]	@ (800364c <microros_zero_allocate+0x48>)
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	4413      	add	r3, r2
 800361e:	461a      	mov	r2, r3
 8003620:	4b0a      	ldr	r3, [pc, #40]	@ (800364c <microros_zero_allocate+0x48>)
 8003622:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	4a08      	ldr	r2, [pc, #32]	@ (8003650 <microros_zero_allocate+0x4c>)
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	4413      	add	r3, r2
 8003632:	461a      	mov	r2, r3
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <microros_zero_allocate+0x4c>)
 8003636:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff f959 	bl	80028f2 <pvPortCallocMicroROS>
 8003640:	4603      	mov	r3, r0
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200086ac 	.word	0x200086ac
 8003650:	200086b0 	.word	0x200086b0
 8003654:	00000000 	.word	0x00000000

08003658 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003658:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800366a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800366e:	a320      	add	r3, pc, #128	@ (adr r3, 80036f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f7fd fa52 	bl	8000b1c <__aeabi_ldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8003682:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003686:	a31a      	add	r3, pc, #104	@ (adr r3, 80036f0 <UTILS_NanosecondsToTimespec+0x98>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fd fa46 	bl	8000b1c <__aeabi_ldivmod>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	da20      	bge.n	80036de <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a11      	ldr	r2, [pc, #68]	@ (80036e8 <UTILS_NanosecondsToTimespec+0x90>)
 80036a2:	fb82 1203 	smull	r1, r2, r2, r3
 80036a6:	1712      	asrs	r2, r2, #28
 80036a8:	17db      	asrs	r3, r3, #31
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b6:	6979      	ldr	r1, [r7, #20]
 80036b8:	17c8      	asrs	r0, r1, #31
 80036ba:	460c      	mov	r4, r1
 80036bc:	4605      	mov	r5, r0
 80036be:	ebb2 0804 	subs.w	r8, r2, r4
 80036c2:	eb63 0905 	sbc.w	r9, r3, r5
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4906      	ldr	r1, [pc, #24]	@ (80036ec <UTILS_NanosecondsToTimespec+0x94>)
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	441a      	add	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]
    }
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036e8:	44b82fa1 	.word	0x44b82fa1
 80036ec:	3b9aca00 	.word	0x3b9aca00
 80036f0:	3b9aca00 	.word	0x3b9aca00
 80036f4:	00000000 	.word	0x00000000

080036f8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80036f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036fc:	b08e      	sub	sp, #56	@ 0x38
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6278      	str	r0, [r7, #36]	@ 0x24
 8003702:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003704:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003708:	2300      	movs	r3, #0
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800371a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800371e:	4618      	mov	r0, r3
 8003720:	f007 ffd2 	bl	800b6c8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003726:	17da      	asrs	r2, r3, #31
 8003728:	61bb      	str	r3, [r7, #24]
 800372a:	61fa      	str	r2, [r7, #28]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	000b      	movs	r3, r1
 8003738:	2200      	movs	r2, #0
 800373a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800373e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003740:	2200      	movs	r2, #0
 8003742:	461c      	mov	r4, r3
 8003744:	4615      	mov	r5, r2
 8003746:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800374a:	1911      	adds	r1, r2, r4
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	416b      	adcs	r3, r5
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003756:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800375a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	f04f 0400 	mov.w	r4, #0
 8003766:	f04f 0500 	mov.w	r5, #0
 800376a:	015d      	lsls	r5, r3, #5
 800376c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003770:	0154      	lsls	r4, r2, #5
 8003772:	4622      	mov	r2, r4
 8003774:	462b      	mov	r3, r5
 8003776:	ebb2 0800 	subs.w	r8, r2, r0
 800377a:	eb63 0901 	sbc.w	r9, r3, r1
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800378a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800378e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003792:	4690      	mov	r8, r2
 8003794:	4699      	mov	r9, r3
 8003796:	eb18 0a00 	adds.w	sl, r8, r0
 800379a:	eb49 0b01 	adc.w	fp, r9, r1
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037aa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b2:	ebb2 040a 	subs.w	r4, r2, sl
 80037b6:	603c      	str	r4, [r7, #0]
 80037b8:	eb63 030b 	sbc.w	r3, r3, fp
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037c2:	4623      	mov	r3, r4
 80037c4:	181b      	adds	r3, r3, r0
 80037c6:	613b      	str	r3, [r7, #16]
 80037c8:	462b      	mov	r3, r5
 80037ca:	eb41 0303 	adc.w	r3, r1, r3
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	6a3a      	ldr	r2, [r7, #32]
 80037d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037d6:	f7ff ff3f 	bl	8003658 <UTILS_NanosecondsToTimespec>

    return 0;
 80037da:	2300      	movs	r3, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	3738      	adds	r7, #56	@ 0x38
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080037e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <HAL_MspInit+0x54>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	4a11      	ldr	r2, [pc, #68]	@ (800383c <HAL_MspInit+0x54>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80037fe:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <HAL_MspInit+0x54>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800380a:	2300      	movs	r3, #0
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <HAL_MspInit+0x54>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <HAL_MspInit+0x54>)
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003818:	6413      	str	r3, [r2, #64]	@ 0x40
 800381a:	4b08      	ldr	r3, [pc, #32]	@ (800383c <HAL_MspInit+0x54>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003822:	603b      	str	r3, [r7, #0]
 8003824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	210f      	movs	r1, #15
 800382a:	f06f 0001 	mvn.w	r0, #1
 800382e:	f001 fa75 	bl	8004d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a3c      	ldr	r2, [pc, #240]	@ (8003950 <HAL_ADC_MspInit+0x110>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d171      	bne.n	8003946 <HAL_ADC_MspInit+0x106>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	4b3b      	ldr	r3, [pc, #236]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	4a3a      	ldr	r2, [pc, #232]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003870:	6453      	str	r3, [r2, #68]	@ 0x44
 8003872:	4b38      	ldr	r3, [pc, #224]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	4b34      	ldr	r3, [pc, #208]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	4a33      	ldr	r2, [pc, #204]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 8003888:	f043 0304 	orr.w	r3, r3, #4
 800388c:	6313      	str	r3, [r2, #48]	@ 0x30
 800388e:	4b31      	ldr	r3, [pc, #196]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	4b2d      	ldr	r3, [pc, #180]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003954 <HAL_ADC_MspInit+0x114>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60bb      	str	r3, [r7, #8]
 80038b4:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80038b6:	233f      	movs	r3, #63	@ 0x3f
 80038b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ba:	2303      	movs	r3, #3
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	4619      	mov	r1, r3
 80038c8:	4823      	ldr	r0, [pc, #140]	@ (8003958 <HAL_ADC_MspInit+0x118>)
 80038ca:	f001 fe53 	bl	8005574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038ce:	2301      	movs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d2:	2303      	movs	r3, #3
 80038d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 0314 	add.w	r3, r7, #20
 80038de:	4619      	mov	r1, r3
 80038e0:	481e      	ldr	r0, [pc, #120]	@ (800395c <HAL_ADC_MspInit+0x11c>)
 80038e2:	f001 fe47 	bl	8005574 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80038e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 80038e8:	4a1e      	ldr	r2, [pc, #120]	@ (8003964 <HAL_ADC_MspInit+0x124>)
 80038ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f8:	4b19      	ldr	r3, [pc, #100]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038fe:	4b18      	ldr	r3, [pc, #96]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003900:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003908:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800390c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003910:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003916:	4b12      	ldr	r3, [pc, #72]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800391c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003920:	2200      	movs	r2, #0
 8003922:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003924:	4b0e      	ldr	r3, [pc, #56]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003926:	2200      	movs	r2, #0
 8003928:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800392a:	480d      	ldr	r0, [pc, #52]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 800392c:	f001 fa20 	bl	8004d70 <HAL_DMA_Init>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003936:	f7ff fdeb 	bl	8003510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a08      	ldr	r2, [pc, #32]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 800393e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003940:	4a07      	ldr	r2, [pc, #28]	@ (8003960 <HAL_ADC_MspInit+0x120>)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003946:	bf00      	nop
 8003948:	3728      	adds	r7, #40	@ 0x28
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40012000 	.word	0x40012000
 8003954:	40023800 	.word	0x40023800
 8003958:	40020800 	.word	0x40020800
 800395c:	40020000 	.word	0x40020000
 8003960:	20005400 	.word	0x20005400
 8003964:	40026410 	.word	0x40026410

08003968 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <HAL_I2C_MspInit+0x84>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d12c      	bne.n	80039e4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	4b18      	ldr	r3, [pc, #96]	@ (80039f0 <HAL_I2C_MspInit+0x88>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_I2C_MspInit+0x88>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	6313      	str	r3, [r2, #48]	@ 0x30
 800399a:	4b15      	ldr	r3, [pc, #84]	@ (80039f0 <HAL_I2C_MspInit+0x88>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039ac:	2312      	movs	r3, #18
 80039ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b4:	2303      	movs	r3, #3
 80039b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039b8:	2304      	movs	r3, #4
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4619      	mov	r1, r3
 80039c2:	480c      	ldr	r0, [pc, #48]	@ (80039f4 <HAL_I2C_MspInit+0x8c>)
 80039c4:	f001 fdd6 	bl	8005574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <HAL_I2C_MspInit+0x88>)
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	4a07      	ldr	r2, [pc, #28]	@ (80039f0 <HAL_I2C_MspInit+0x88>)
 80039d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <HAL_I2C_MspInit+0x88>)
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80039e4:	bf00      	nop
 80039e6:	3728      	adds	r7, #40	@ 0x28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40005400 	.word	0x40005400
 80039f0:	40023800 	.word	0x40023800
 80039f4:	40020400 	.word	0x40020400

080039f8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0b      	ldr	r2, [pc, #44]	@ (8003a34 <HAL_I2C_MspDeInit+0x3c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d10f      	bne.n	8003a2a <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_I2C_MspDeInit+0x40>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <HAL_I2C_MspDeInit+0x40>)
 8003a10:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a14:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a1a:	4808      	ldr	r0, [pc, #32]	@ (8003a3c <HAL_I2C_MspDeInit+0x44>)
 8003a1c:	f001 ff3e 	bl	800589c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003a20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a24:	4805      	ldr	r0, [pc, #20]	@ (8003a3c <HAL_I2C_MspDeInit+0x44>)
 8003a26:	f001 ff39 	bl	800589c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40005400 	.word	0x40005400
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40020400 	.word	0x40020400

08003a40 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b090      	sub	sp, #64	@ 0x40
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a64      	ldr	r2, [pc, #400]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d12d      	bne.n	8003abe <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a66:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	4a62      	ldr	r2, [pc, #392]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a72:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a82:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8e:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003aac:	2301      	movs	r3, #1
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4850      	ldr	r0, [pc, #320]	@ (8003bf8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003ab8:	f001 fd5c 	bl	8005574 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003abc:	e094      	b.n	8003be8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac6:	d12c      	bne.n	8003b22 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ac8:	2300      	movs	r3, #0
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	4a48      	ldr	r2, [pc, #288]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ad8:	4b46      	ldr	r3, [pc, #280]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	623b      	str	r3, [r7, #32]
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	4b42      	ldr	r3, [pc, #264]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	4a41      	ldr	r2, [pc, #260]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af4:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003b00:	2322      	movs	r3, #34	@ 0x22
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b10:	2301      	movs	r3, #1
 8003b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4837      	ldr	r0, [pc, #220]	@ (8003bf8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003b1c:	f001 fd2a 	bl	8005574 <HAL_GPIO_Init>
}
 8003b20:	e062      	b.n	8003be8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a35      	ldr	r2, [pc, #212]	@ (8003bfc <HAL_TIM_Encoder_MspInit+0x1bc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d12c      	bne.n	8003b86 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	4b30      	ldr	r3, [pc, #192]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b58:	4b26      	ldr	r3, [pc, #152]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b64:	23c0      	movs	r3, #192	@ 0xc0
 8003b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b74:	2302      	movs	r3, #2
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	481e      	ldr	r0, [pc, #120]	@ (8003bf8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003b80:	f001 fcf8 	bl	8005574 <HAL_GPIO_Init>
}
 8003b84:	e030      	b.n	8003be8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c00 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d12b      	bne.n	8003be8 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	4a16      	ldr	r2, [pc, #88]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ba0:	4b14      	ldr	r3, [pc, #80]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	4a0f      	ldr	r2, [pc, #60]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003bb6:	f043 0302 	orr.w	r3, r3, #2
 8003bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc8:	23c0      	movs	r3, #192	@ 0xc0
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003be0:	4619      	mov	r1, r3
 8003be2:	4808      	ldr	r0, [pc, #32]	@ (8003c04 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003be4:	f001 fcc6 	bl	8005574 <HAL_GPIO_Init>
}
 8003be8:	bf00      	nop
 8003bea:	3740      	adds	r7, #64	@ 0x40
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40000400 	.word	0x40000400
 8003c00:	40000800 	.word	0x40000800
 8003c04:	40020400 	.word	0x40020400

08003c08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0e      	ldr	r2, [pc, #56]	@ (8003c50 <HAL_TIM_Base_MspInit+0x48>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d115      	bne.n	8003c46 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <HAL_TIM_Base_MspInit+0x4c>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c22:	4a0c      	ldr	r2, [pc, #48]	@ (8003c54 <HAL_TIM_Base_MspInit+0x4c>)
 8003c24:	f043 0308 	orr.w	r3, r3, #8
 8003c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_TIM_Base_MspInit+0x4c>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2105      	movs	r1, #5
 8003c3a:	2032      	movs	r0, #50	@ 0x32
 8003c3c:	f001 f86e 	bl	8004d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c40:	2032      	movs	r0, #50	@ 0x32
 8003c42:	f001 f887 	bl	8004d54 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40000c00 	.word	0x40000c00
 8003c54:	40023800 	.word	0x40023800

08003c58 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0b      	ldr	r2, [pc, #44]	@ (8003c94 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10d      	bne.n	8003c86 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c98 <HAL_TIM_PWM_MspInit+0x40>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	4a09      	ldr	r2, [pc, #36]	@ (8003c98 <HAL_TIM_PWM_MspInit+0x40>)
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7a:	4b07      	ldr	r3, [pc, #28]	@ (8003c98 <HAL_TIM_PWM_MspInit+0x40>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40023800 	.word	0x40023800

08003c9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a12      	ldr	r2, [pc, #72]	@ (8003d04 <HAL_TIM_MspPostInit+0x68>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d11e      	bne.n	8003cfc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	4b11      	ldr	r3, [pc, #68]	@ (8003d08 <HAL_TIM_MspPostInit+0x6c>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	4a10      	ldr	r2, [pc, #64]	@ (8003d08 <HAL_TIM_MspPostInit+0x6c>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <HAL_TIM_MspPostInit+0x6c>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003cda:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003cde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cec:	2303      	movs	r3, #3
 8003cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cf0:	f107 030c 	add.w	r3, r7, #12
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4805      	ldr	r0, [pc, #20]	@ (8003d0c <HAL_TIM_MspPostInit+0x70>)
 8003cf8:	f001 fc3c 	bl	8005574 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003cfc:	bf00      	nop
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40010400 	.word	0x40010400
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40020800 	.word	0x40020800

08003d10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	@ 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003e64 <HAL_UART_MspInit+0x154>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f040 8093 	bne.w	8003e5a <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	4b4b      	ldr	r3, [pc, #300]	@ (8003e68 <HAL_UART_MspInit+0x158>)
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	4a4a      	ldr	r2, [pc, #296]	@ (8003e68 <HAL_UART_MspInit+0x158>)
 8003d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d44:	4b48      	ldr	r3, [pc, #288]	@ (8003e68 <HAL_UART_MspInit+0x158>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	4b44      	ldr	r3, [pc, #272]	@ (8003e68 <HAL_UART_MspInit+0x158>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d58:	4a43      	ldr	r2, [pc, #268]	@ (8003e68 <HAL_UART_MspInit+0x158>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d60:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <HAL_UART_MspInit+0x158>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d70:	2302      	movs	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4619      	mov	r1, r3
 8003d86:	4839      	ldr	r0, [pc, #228]	@ (8003e6c <HAL_UART_MspInit+0x15c>)
 8003d88:	f001 fbf4 	bl	8005574 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d8c:	4b38      	ldr	r3, [pc, #224]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003d8e:	4a39      	ldr	r2, [pc, #228]	@ (8003e74 <HAL_UART_MspInit+0x164>)
 8003d90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d92:	4b37      	ldr	r3, [pc, #220]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003d94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d9a:	4b35      	ldr	r3, [pc, #212]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da0:	4b33      	ldr	r3, [pc, #204]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003da6:	4b32      	ldr	r3, [pc, #200]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dae:	4b30      	ldr	r3, [pc, #192]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003db4:	4b2e      	ldr	r3, [pc, #184]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003dba:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003dbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003dc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003dc4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003dc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dca:	4b29      	ldr	r3, [pc, #164]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003dd0:	4827      	ldr	r0, [pc, #156]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003dd2:	f000 ffcd 	bl	8004d70 <HAL_DMA_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003ddc:	f7ff fb98 	bl	8003510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a23      	ldr	r2, [pc, #140]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003de4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003de6:	4a22      	ldr	r2, [pc, #136]	@ (8003e70 <HAL_UART_MspInit+0x160>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003dec:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003dee:	4a23      	ldr	r2, [pc, #140]	@ (8003e7c <HAL_UART_MspInit+0x16c>)
 8003df0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003df2:	4b21      	ldr	r3, [pc, #132]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003df4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003df8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003dfc:	2240      	movs	r2, #64	@ 0x40
 8003dfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e00:	4b1d      	ldr	r3, [pc, #116]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e06:	4b1c      	ldr	r3, [pc, #112]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e14:	4b18      	ldr	r3, [pc, #96]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e1a:	4b17      	ldr	r3, [pc, #92]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e20:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e22:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e26:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e28:	4b13      	ldr	r3, [pc, #76]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e2e:	4812      	ldr	r0, [pc, #72]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e30:	f000 ff9e 	bl	8004d70 <HAL_DMA_Init>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003e3a:	f7ff fb69 	bl	8003510 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e42:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e44:	4a0c      	ldr	r2, [pc, #48]	@ (8003e78 <HAL_UART_MspInit+0x168>)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2105      	movs	r1, #5
 8003e4e:	2026      	movs	r0, #38	@ 0x26
 8003e50:	f000 ff64 	bl	8004d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e54:	2026      	movs	r0, #38	@ 0x26
 8003e56:	f000 ff7d 	bl	8004d54 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003e5a:	bf00      	nop
 8003e5c:	3728      	adds	r7, #40	@ 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40004400 	.word	0x40004400
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	200056ac 	.word	0x200056ac
 8003e74:	40026088 	.word	0x40026088
 8003e78:	2000570c 	.word	0x2000570c
 8003e7c:	400260a0 	.word	0x400260a0

08003e80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08e      	sub	sp, #56	@ 0x38
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <HAL_InitTick+0xe4>)
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	4a32      	ldr	r2, [pc, #200]	@ (8003f64 <HAL_InitTick+0xe4>)
 8003e9a:	f043 0310 	orr.w	r3, r3, #16
 8003e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ea0:	4b30      	ldr	r3, [pc, #192]	@ (8003f64 <HAL_InitTick+0xe4>)
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003eac:	f107 0210 	add.w	r2, r7, #16
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f002 ff6c 	bl	8006d94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ec6:	f002 ff3d 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 8003eca:	6378      	str	r0, [r7, #52]	@ 0x34
 8003ecc:	e004      	b.n	8003ed8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003ece:	f002 ff39 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	4a23      	ldr	r2, [pc, #140]	@ (8003f68 <HAL_InitTick+0xe8>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	0c9b      	lsrs	r3, r3, #18
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003ee6:	4b21      	ldr	r3, [pc, #132]	@ (8003f6c <HAL_InitTick+0xec>)
 8003ee8:	4a21      	ldr	r2, [pc, #132]	@ (8003f70 <HAL_InitTick+0xf0>)
 8003eea:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003eec:	4b1f      	ldr	r3, [pc, #124]	@ (8003f6c <HAL_InitTick+0xec>)
 8003eee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ef2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f6c <HAL_InitTick+0xec>)
 8003ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003efa:	4b1c      	ldr	r3, [pc, #112]	@ (8003f6c <HAL_InitTick+0xec>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f00:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <HAL_InitTick+0xec>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f06:	4b19      	ldr	r3, [pc, #100]	@ (8003f6c <HAL_InitTick+0xec>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003f0c:	4817      	ldr	r0, [pc, #92]	@ (8003f6c <HAL_InitTick+0xec>)
 8003f0e:	f003 fbbb 	bl	8007688 <HAL_TIM_Base_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003f18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d11b      	bne.n	8003f58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f20:	4812      	ldr	r0, [pc, #72]	@ (8003f6c <HAL_InitTick+0xec>)
 8003f22:	f003 fc01 	bl	8007728 <HAL_TIM_Base_Start_IT>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d111      	bne.n	8003f58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f34:	2036      	movs	r0, #54	@ 0x36
 8003f36:	f000 ff0d 	bl	8004d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b0f      	cmp	r3, #15
 8003f3e:	d808      	bhi.n	8003f52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003f40:	2200      	movs	r2, #0
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	2036      	movs	r0, #54	@ 0x36
 8003f46:	f000 fee9 	bl	8004d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <HAL_InitTick+0xf4>)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	e002      	b.n	8003f58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003f58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3738      	adds	r7, #56	@ 0x38
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	431bde83 	.word	0x431bde83
 8003f6c:	200086b4 	.word	0x200086b4
 8003f70:	40001000 	.word	0x40001000
 8003f74:	2000000c 	.word	0x2000000c

08003f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <NMI_Handler+0x4>

08003f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f84:	bf00      	nop
 8003f86:	e7fd      	b.n	8003f84 <HardFault_Handler+0x4>

08003f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <MemManage_Handler+0x4>

08003f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <BusFault_Handler+0x4>

08003f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <UsageFault_Handler+0x4>

08003fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
	...

08003fb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003fb4:	4802      	ldr	r0, [pc, #8]	@ (8003fc0 <DMA1_Stream5_IRQHandler+0x10>)
 8003fb6:	f001 f873 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200056ac 	.word	0x200056ac

08003fc4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003fc8:	4802      	ldr	r0, [pc, #8]	@ (8003fd4 <DMA1_Stream6_IRQHandler+0x10>)
 8003fca:	f001 f869 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	2000570c 	.word	0x2000570c

08003fd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fdc:	4802      	ldr	r0, [pc, #8]	@ (8003fe8 <USART2_IRQHandler+0x10>)
 8003fde:	f004 fe69 	bl	8008cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20005664 	.word	0x20005664

08003fec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ff0:	4802      	ldr	r0, [pc, #8]	@ (8003ffc <TIM5_IRQHandler+0x10>)
 8003ff2:	f003 fe55 	bl	8007ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200055d4 	.word	0x200055d4

08004000 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004004:	4802      	ldr	r0, [pc, #8]	@ (8004010 <TIM6_DAC_IRQHandler+0x10>)
 8004006:	f003 fe4b 	bl	8007ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200086b4 	.word	0x200086b4

08004014 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004018:	4802      	ldr	r0, [pc, #8]	@ (8004024 <DMA2_Stream0_IRQHandler+0x10>)
 800401a:	f001 f841 	bl	80050a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20005400 	.word	0x20005400

08004028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return 1;
 800402c:	2301      	movs	r3, #1
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_kill>:

int _kill(int pid, int sig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004042:	f018 fd0f 	bl	801ca64 <__errno>
 8004046:	4603      	mov	r3, r0
 8004048:	2216      	movs	r2, #22
 800404a:	601a      	str	r2, [r3, #0]
  return -1;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_exit>:

void _exit (int status)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004060:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffe7 	bl	8004038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800406a:	bf00      	nop
 800406c:	e7fd      	b.n	800406a <_exit+0x12>

0800406e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b086      	sub	sp, #24
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e00a      	b.n	8004096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004080:	f3af 8000 	nop.w
 8004084:	4601      	mov	r1, r0
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	1c5a      	adds	r2, r3, #1
 800408a:	60ba      	str	r2, [r7, #8]
 800408c:	b2ca      	uxtb	r2, r1
 800408e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	429a      	cmp	r2, r3
 800409c:	dbf0      	blt.n	8004080 <_read+0x12>
  }

  return len;
 800409e:	687b      	ldr	r3, [r7, #4]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e009      	b.n	80040ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	60ba      	str	r2, [r7, #8]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	dbf1      	blt.n	80040ba <_write+0x12>
  }
  return len;
 80040d6:	687b      	ldr	r3, [r7, #4]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_close>:

int _close(int file)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004108:	605a      	str	r2, [r3, #4]
  return 0;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <_isatty>:

int _isatty(int file)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004120:	2301      	movs	r3, #1
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004150:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <_sbrk+0x5c>)
 8004152:	4b15      	ldr	r3, [pc, #84]	@ (80041a8 <_sbrk+0x60>)
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800415c:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <_sbrk+0x64>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <_sbrk+0x64>)
 8004166:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <_sbrk+0x68>)
 8004168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <_sbrk+0x64>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	429a      	cmp	r2, r3
 8004176:	d207      	bcs.n	8004188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004178:	f018 fc74 	bl	801ca64 <__errno>
 800417c:	4603      	mov	r3, r0
 800417e:	220c      	movs	r2, #12
 8004180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004182:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004186:	e009      	b.n	800419c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004188:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <_sbrk+0x64>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800418e:	4b07      	ldr	r3, [pc, #28]	@ (80041ac <_sbrk+0x64>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	4a05      	ldr	r2, [pc, #20]	@ (80041ac <_sbrk+0x64>)
 8004198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20020000 	.word	0x20020000
 80041a8:	00000400 	.word	0x00000400
 80041ac:	20008700 	.word	0x20008700
 80041b0:	20011d38 	.word	0x20011d38

080041b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <SystemInit+0x20>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	4a05      	ldr	r2, [pc, #20]	@ (80041d4 <SystemInit+0x20>)
 80041c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <StartDefaultTask>:
//TimerHandle_t xTimer;

//void motorTimerCallback(TimerHandle_t xTimer);

void StartDefaultTask(void *argument)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
//    xTimer = xTimerCreate("MotorTimer", pdMS_TO_TICKS(1), pdTRUE, (void *)0, motorTimerCallback);
//    xTimerStart(xTimer, 0);
//    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	HAL_TIM_Base_Start_IT(&htim5);
 80041e0:	4808      	ldr	r0, [pc, #32]	@ (8004204 <StartDefaultTask+0x2c>)
 80041e2:	f003 faa1 	bl	8007728 <HAL_TIM_Base_Start_IT>
	uros_init();
 80041e6:	f7fd ff17 	bl	8002018 <uros_init>
    motor_init();
 80041ea:	f7fd fe7d 	bl	8001ee8 <motor_init>
    pinpoint_init();
 80041ee:	f7fd f8ef 	bl	80013d0 <pinpoint_init>
    trace_init();
 80041f2:	f000 f83b 	bl	800426c <trace_init>

    for(;;)
    {
        uros_agent_status_check();
 80041f6:	f7fd ff4f 	bl	8002098 <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 80041fa:	2032      	movs	r0, #50	@ 0x32
 80041fc:	f005 ff98 	bl	800a130 <osDelay>
        uros_agent_status_check();
 8004200:	bf00      	nop
 8004202:	e7f8      	b.n	80041f6 <StartDefaultTask+0x1e>
 8004204:	200055d4 	.word	0x200055d4

08004208 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a10      	ldr	r2, [pc, #64]	@ (8004258 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d112      	bne.n	8004240 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		sec++;
 800421a:	4b10      	ldr	r3, [pc, #64]	@ (800425c <HAL_TIM_PeriodElapsedCallback+0x54>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3301      	adds	r3, #1
 8004220:	4a0e      	ldr	r2, [pc, #56]	@ (800425c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004222:	6013      	str	r3, [r2, #0]
		tct++;
 8004224:	4b0e      	ldr	r3, [pc, #56]	@ (8004260 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3301      	adds	r3, #1
 800422a:	4a0d      	ldr	r2, [pc, #52]	@ (8004260 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800422c:	6013      	str	r3, [r2, #0]
		temp++;
 800422e:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004236:	6013      	str	r3, [r2, #0]
		chassis_monitor();
 8004238:	f7fd fbd8 	bl	80019ec <chassis_monitor>
//		motor_monitor();
//		chassis_set_speed(vx, vy, vz);
//		update_pinpoint_pose();
//		update_pose(pos_x, pos_y, pos_z, vel_x, vel_y, vel_z);
		pinpoint_monitor();
 800423c:	f7fd f8d6 	bl	80013ec <pinpoint_monitor>
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a08      	ldr	r2, [pc, #32]	@ (8004268 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		HAL_IncTick();
 800424a:	f000 f869 	bl	8004320 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40000c00 	.word	0x40000c00
 800425c:	20008714 	.word	0x20008714
 8004260:	20008718 	.word	0x20008718
 8004264:	2000871c 	.word	0x2000871c
 8004268:	40001000 	.word	0x40001000

0800426c <trace_init>:

/*-----Variable for computing the offset from black line-----*/
float weight_err = 0, weight_change = 0, weight_lastTime = 0;
double cmd_Vx = 0, cmd_Vy = 0, cmd_W = 0;

void trace_init(){
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcRead, 7);
 8004270:	2207      	movs	r2, #7
 8004272:	4903      	ldr	r1, [pc, #12]	@ (8004280 <trace_init+0x14>)
 8004274:	4803      	ldr	r0, [pc, #12]	@ (8004284 <trace_init+0x18>)
 8004276:	f000 f8b7 	bl	80043e8 <HAL_ADC_Start_DMA>
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20008704 	.word	0x20008704
 8004284:	200053b8 	.word	0x200053b8

08004288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800428c:	f7ff ff92 	bl	80041b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004290:	480c      	ldr	r0, [pc, #48]	@ (80042c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004292:	490d      	ldr	r1, [pc, #52]	@ (80042c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004294:	4a0d      	ldr	r2, [pc, #52]	@ (80042cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004298:	e002      	b.n	80042a0 <LoopCopyDataInit>

0800429a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800429a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800429c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429e:	3304      	adds	r3, #4

080042a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a4:	d3f9      	bcc.n	800429a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a6:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042a8:	4c0a      	ldr	r4, [pc, #40]	@ (80042d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042ac:	e001      	b.n	80042b2 <LoopFillZerobss>

080042ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042b0:	3204      	adds	r2, #4

080042b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b4:	d3fb      	bcc.n	80042ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80042b6:	f018 fbdb 	bl	801ca70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ba:	f7fe fca9 	bl	8002c10 <main>
  bx  lr    
 80042be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c8:	2000095c 	.word	0x2000095c
  ldr r2, =_sidata
 80042cc:	0801edf8 	.word	0x0801edf8
  ldr r2, =_sbss
 80042d0:	20000960 	.word	0x20000960
  ldr r4, =_ebss
 80042d4:	20011d38 	.word	0x20011d38

080042d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d8:	e7fe      	b.n	80042d8 <ADC_IRQHandler>
	...

080042dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <HAL_Init+0x40>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <HAL_Init+0x40>)
 80042e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <HAL_Init+0x40>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0a      	ldr	r2, [pc, #40]	@ (800431c <HAL_Init+0x40>)
 80042f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f8:	4b08      	ldr	r3, [pc, #32]	@ (800431c <HAL_Init+0x40>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a07      	ldr	r2, [pc, #28]	@ (800431c <HAL_Init+0x40>)
 80042fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004304:	2003      	movs	r0, #3
 8004306:	f000 fcfe 	bl	8004d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800430a:	200f      	movs	r0, #15
 800430c:	f7ff fdb8 	bl	8003e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004310:	f7ff fa6a 	bl	80037e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023c00 	.word	0x40023c00

08004320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004324:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_IncTick+0x20>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_IncTick+0x24>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4413      	add	r3, r2
 8004330:	4a04      	ldr	r2, [pc, #16]	@ (8004344 <HAL_IncTick+0x24>)
 8004332:	6013      	str	r3, [r2, #0]
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	20000010 	.word	0x20000010
 8004344:	20008720 	.word	0x20008720

08004348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return uwTick;
 800434c:	4b03      	ldr	r3, [pc, #12]	@ (800435c <HAL_GetTick+0x14>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	20008720 	.word	0x20008720

08004360 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e033      	b.n	80043de <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff fa5e 	bl	8003840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	d118      	bne.n	80043d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043a6:	f023 0302 	bic.w	r3, r3, #2
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa7c 	bl	80048b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80043ce:	e001      	b.n	80043d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_ADC_Start_DMA+0x22>
 8004406:	2302      	movs	r3, #2
 8004408:	e0eb      	b.n	80045e2 <HAL_ADC_Start_DMA+0x1fa>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d018      	beq.n	8004452 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004430:	4b6e      	ldr	r3, [pc, #440]	@ (80045ec <HAL_ADC_Start_DMA+0x204>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6e      	ldr	r2, [pc, #440]	@ (80045f0 <HAL_ADC_Start_DMA+0x208>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	0c9a      	lsrs	r2, r3, #18
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8004444:	e002      	b.n	800444c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	3b01      	subs	r3, #1
 800444a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f9      	bne.n	8004446 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800445c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004460:	d107      	bne.n	8004472 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004470:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 80a3 	bne.w	80045c8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800448a:	f023 0301 	bic.w	r3, r3, #1
 800448e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044ac:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c0:	d106      	bne.n	80044d0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	f023 0206 	bic.w	r2, r3, #6
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80044ce:	e002      	b.n	80044d6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044de:	4b45      	ldr	r3, [pc, #276]	@ (80045f4 <HAL_ADC_Start_DMA+0x20c>)
 80044e0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	4a44      	ldr	r2, [pc, #272]	@ (80045f8 <HAL_ADC_Start_DMA+0x210>)
 80044e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	4a43      	ldr	r2, [pc, #268]	@ (80045fc <HAL_ADC_Start_DMA+0x214>)
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f6:	4a42      	ldr	r2, [pc, #264]	@ (8004600 <HAL_ADC_Start_DMA+0x218>)
 80044f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004502:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004512:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004522:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	334c      	adds	r3, #76	@ 0x4c
 800452e:	4619      	mov	r1, r3
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f000 fcca 	bl	8004ecc <HAL_DMA_Start_IT>
 8004538:	4603      	mov	r3, r0
 800453a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	2b00      	cmp	r3, #0
 8004546:	d12a      	bne.n	800459e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2d      	ldr	r2, [pc, #180]	@ (8004604 <HAL_ADC_Start_DMA+0x21c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d015      	beq.n	800457e <HAL_ADC_Start_DMA+0x196>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a2c      	ldr	r2, [pc, #176]	@ (8004608 <HAL_ADC_Start_DMA+0x220>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d105      	bne.n	8004568 <HAL_ADC_Start_DMA+0x180>
 800455c:	4b25      	ldr	r3, [pc, #148]	@ (80045f4 <HAL_ADC_Start_DMA+0x20c>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a27      	ldr	r2, [pc, #156]	@ (800460c <HAL_ADC_Start_DMA+0x224>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d136      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
 8004572:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_ADC_Start_DMA+0x20c>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b00      	cmp	r3, #0
 800457c:	d130      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d129      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	e020      	b.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a18      	ldr	r2, [pc, #96]	@ (8004604 <HAL_ADC_Start_DMA+0x21c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d11b      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d114      	bne.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045c4:	609a      	str	r2, [r3, #8]
 80045c6:	e00b      	b.n	80045e0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045cc:	f043 0210 	orr.w	r2, r3, #16
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000008 	.word	0x20000008
 80045f0:	431bde83 	.word	0x431bde83
 80045f4:	40012300 	.word	0x40012300
 80045f8:	08004aa9 	.word	0x08004aa9
 80045fc:	08004b63 	.word	0x08004b63
 8004600:	08004b7f 	.word	0x08004b7f
 8004604:	40012000 	.word	0x40012000
 8004608:	40012100 	.word	0x40012100
 800460c:	40012200 	.word	0x40012200

08004610 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x1c>
 8004664:	2302      	movs	r3, #2
 8004666:	e113      	b.n	8004890 <HAL_ADC_ConfigChannel+0x244>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b09      	cmp	r3, #9
 8004676:	d925      	bls.n	80046c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68d9      	ldr	r1, [r3, #12]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	3b1e      	subs	r3, #30
 800468e:	2207      	movs	r2, #7
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43da      	mvns	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	400a      	ands	r2, r1
 800469c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68d9      	ldr	r1, [r3, #12]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	4603      	mov	r3, r0
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	4403      	add	r3, r0
 80046b6:	3b1e      	subs	r3, #30
 80046b8:	409a      	lsls	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	e022      	b.n	800470a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6919      	ldr	r1, [r3, #16]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	2207      	movs	r2, #7
 80046da:	fa02 f303 	lsl.w	r3, r2, r3
 80046de:	43da      	mvns	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	400a      	ands	r2, r1
 80046e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	4618      	mov	r0, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4403      	add	r3, r0
 8004700:	409a      	lsls	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b06      	cmp	r3, #6
 8004710:	d824      	bhi.n	800475c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	3b05      	subs	r3, #5
 8004724:	221f      	movs	r2, #31
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43da      	mvns	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	400a      	ands	r2, r1
 8004732:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	4618      	mov	r0, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	3b05      	subs	r3, #5
 800474e:	fa00 f203 	lsl.w	r2, r0, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34
 800475a:	e04c      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d824      	bhi.n	80047ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	3b23      	subs	r3, #35	@ 0x23
 8004776:	221f      	movs	r2, #31
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43da      	mvns	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	400a      	ands	r2, r1
 8004784:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	4618      	mov	r0, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	3b23      	subs	r3, #35	@ 0x23
 80047a0:	fa00 f203 	lsl.w	r2, r0, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80047ac:	e023      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	3b41      	subs	r3, #65	@ 0x41
 80047c0:	221f      	movs	r2, #31
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	400a      	ands	r2, r1
 80047ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	4618      	mov	r0, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	3b41      	subs	r3, #65	@ 0x41
 80047ea:	fa00 f203 	lsl.w	r2, r0, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047f6:	4b29      	ldr	r3, [pc, #164]	@ (800489c <HAL_ADC_ConfigChannel+0x250>)
 80047f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a28      	ldr	r2, [pc, #160]	@ (80048a0 <HAL_ADC_ConfigChannel+0x254>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10f      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x1d8>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b12      	cmp	r3, #18
 800480a:	d10b      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1d      	ldr	r2, [pc, #116]	@ (80048a0 <HAL_ADC_ConfigChannel+0x254>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d12b      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x23a>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1c      	ldr	r2, [pc, #112]	@ (80048a4 <HAL_ADC_ConfigChannel+0x258>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <HAL_ADC_ConfigChannel+0x1f4>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b11      	cmp	r3, #17
 800483e:	d122      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <HAL_ADC_ConfigChannel+0x258>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004862:	4b11      	ldr	r3, [pc, #68]	@ (80048a8 <HAL_ADC_ConfigChannel+0x25c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a11      	ldr	r2, [pc, #68]	@ (80048ac <HAL_ADC_ConfigChannel+0x260>)
 8004868:	fba2 2303 	umull	r2, r3, r2, r3
 800486c:	0c9a      	lsrs	r2, r3, #18
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004878:	e002      	b.n	8004880 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	3b01      	subs	r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f9      	bne.n	800487a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40012300 	.word	0x40012300
 80048a0:	40012000 	.word	0x40012000
 80048a4:	10000012 	.word	0x10000012
 80048a8:	20000008 	.word	0x20000008
 80048ac:	431bde83 	.word	0x431bde83

080048b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048b8:	4b79      	ldr	r3, [pc, #484]	@ (8004aa0 <ADC_Init+0x1f0>)
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6859      	ldr	r1, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	021a      	lsls	r2, r3, #8
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6859      	ldr	r1, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800492a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6899      	ldr	r1, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004942:	4a58      	ldr	r2, [pc, #352]	@ (8004aa4 <ADC_Init+0x1f4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d022      	beq.n	800498e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6899      	ldr	r1, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6899      	ldr	r1, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	e00f      	b.n	80049ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800499c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0202 	bic.w	r2, r2, #2
 80049bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6899      	ldr	r1, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7e1b      	ldrb	r3, [r3, #24]
 80049c8:	005a      	lsls	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	3b01      	subs	r3, #1
 8004a08:	035a      	lsls	r2, r3, #13
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	e007      	b.n	8004a24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	051a      	lsls	r2, r3, #20
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6899      	ldr	r1, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a66:	025a      	lsls	r2, r3, #9
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6899      	ldr	r1, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	029a      	lsls	r2, r3, #10
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40012300 	.word	0x40012300
 8004aa4:	0f000001 	.word	0x0f000001

08004aa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d13c      	bne.n	8004b3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d12b      	bne.n	8004b34 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d127      	bne.n	8004b34 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d006      	beq.n	8004b00 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d119      	bne.n	8004b34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0220 	bic.w	r2, r2, #32
 8004b0e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d105      	bne.n	8004b34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff fd6b 	bl	8004610 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b3a:	e00e      	b.n	8004b5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff fd75 	bl	8004638 <HAL_ADC_ErrorCallback>
}
 8004b4e:	e004      	b.n	8004b5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff fd57 	bl	8004624 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2240      	movs	r2, #64	@ 0x40
 8004b90:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	f043 0204 	orr.w	r2, r3, #4
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff fd4a 	bl	8004638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bde:	4a04      	ldr	r2, [pc, #16]	@ (8004bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	60d3      	str	r3, [r2, #12]
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bf8:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <__NVIC_GetPriorityGrouping+0x18>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	f003 0307 	and.w	r3, r3, #7
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000ed00 	.word	0xe000ed00

08004c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	db0b      	blt.n	8004c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	4907      	ldr	r1, [pc, #28]	@ (8004c48 <__NVIC_EnableIRQ+0x38>)
 8004c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	2001      	movs	r0, #1
 8004c32:	fa00 f202 	lsl.w	r2, r0, r2
 8004c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	e000e100 	.word	0xe000e100

08004c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	6039      	str	r1, [r7, #0]
 8004c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	db0a      	blt.n	8004c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	490c      	ldr	r1, [pc, #48]	@ (8004c98 <__NVIC_SetPriority+0x4c>)
 8004c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c6a:	0112      	lsls	r2, r2, #4
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	440b      	add	r3, r1
 8004c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c74:	e00a      	b.n	8004c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	4908      	ldr	r1, [pc, #32]	@ (8004c9c <__NVIC_SetPriority+0x50>)
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	3b04      	subs	r3, #4
 8004c84:	0112      	lsls	r2, r2, #4
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	440b      	add	r3, r1
 8004c8a:	761a      	strb	r2, [r3, #24]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	e000e100 	.word	0xe000e100
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	@ 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f1c3 0307 	rsb	r3, r3, #7
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	bf28      	it	cs
 8004cbe:	2304      	movcs	r3, #4
 8004cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2b06      	cmp	r3, #6
 8004cc8:	d902      	bls.n	8004cd0 <NVIC_EncodePriority+0x30>
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	3b03      	subs	r3, #3
 8004cce:	e000      	b.n	8004cd2 <NVIC_EncodePriority+0x32>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43da      	mvns	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf2:	43d9      	mvns	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf8:	4313      	orrs	r3, r2
         );
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3724      	adds	r7, #36	@ 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b082      	sub	sp, #8
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ff4c 	bl	8004bac <__NVIC_SetPriorityGrouping>
}
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2e:	f7ff ff61 	bl	8004bf4 <__NVIC_GetPriorityGrouping>
 8004d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	6978      	ldr	r0, [r7, #20]
 8004d3a:	f7ff ffb1 	bl	8004ca0 <NVIC_EncodePriority>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff ff80 	bl	8004c4c <__NVIC_SetPriority>
}
 8004d4c:	bf00      	nop
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff ff54 	bl	8004c10 <__NVIC_EnableIRQ>
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d7c:	f7ff fae4 	bl	8004348 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e099      	b.n	8004ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dac:	e00f      	b.n	8004dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dae:	f7ff facb 	bl	8004348 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d908      	bls.n	8004dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e078      	b.n	8004ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e8      	bne.n	8004dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4b38      	ldr	r3, [pc, #224]	@ (8004ec8 <HAL_DMA_Init+0x158>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d107      	bne.n	8004e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	4313      	orrs	r3, r2
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f023 0307 	bic.w	r3, r3, #7
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d117      	bne.n	8004e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fb01 	bl	800547c <DMA_CheckFifoParam>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2240      	movs	r2, #64	@ 0x40
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e016      	b.n	8004ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fab8 	bl	8005410 <DMA_CalcBaseAndBitshift>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea8:	223f      	movs	r2, #63	@ 0x3f
 8004eaa:	409a      	lsls	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	f010803f 	.word	0xf010803f

08004ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_DMA_Start_IT+0x26>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e040      	b.n	8004f74 <HAL_DMA_Start_IT+0xa8>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d12f      	bne.n	8004f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2202      	movs	r2, #2
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 fa4a 	bl	80053b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	223f      	movs	r2, #63	@ 0x3f
 8004f26:	409a      	lsls	r2, r3
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0216 	orr.w	r2, r2, #22
 8004f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0208 	orr.w	r2, r2, #8
 8004f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e005      	b.n	8004f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f8a:	f7ff f9dd 	bl	8004348 <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d008      	beq.n	8004fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2280      	movs	r2, #128	@ 0x80
 8004fa0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e052      	b.n	8005054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0216 	bic.w	r2, r2, #22
 8004fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_DMA_Abort+0x62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0208 	bic.w	r2, r2, #8
 8004fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ffe:	e013      	b.n	8005028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005000:	f7ff f9a2 	bl	8004348 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b05      	cmp	r3, #5
 800500c:	d90c      	bls.n	8005028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2203      	movs	r2, #3
 8005018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e015      	b.n	8005054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e4      	bne.n	8005000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503a:	223f      	movs	r2, #63	@ 0x3f
 800503c:	409a      	lsls	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d004      	beq.n	800507a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2280      	movs	r2, #128	@ 0x80
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e00c      	b.n	8005094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2205      	movs	r2, #5
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050ac:	4b8e      	ldr	r3, [pc, #568]	@ (80052e8 <HAL_DMA_IRQHandler+0x248>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a8e      	ldr	r2, [pc, #568]	@ (80052ec <HAL_DMA_IRQHandler+0x24c>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	0a9b      	lsrs	r3, r3, #10
 80050b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ca:	2208      	movs	r2, #8
 80050cc:	409a      	lsls	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01a      	beq.n	800510c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d013      	beq.n	800510c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f8:	2208      	movs	r2, #8
 80050fa:	409a      	lsls	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005104:	f043 0201 	orr.w	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	2201      	movs	r2, #1
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d012      	beq.n	8005142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00b      	beq.n	8005142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512e:	2201      	movs	r2, #1
 8005130:	409a      	lsls	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	f043 0202 	orr.w	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005146:	2204      	movs	r2, #4
 8005148:	409a      	lsls	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d012      	beq.n	8005178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	2204      	movs	r2, #4
 8005166:	409a      	lsls	r2, r3
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005170:	f043 0204 	orr.w	r2, r3, #4
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800517c:	2210      	movs	r2, #16
 800517e:	409a      	lsls	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4013      	ands	r3, r2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d043      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d03c      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519a:	2210      	movs	r2, #16
 800519c:	409a      	lsls	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d108      	bne.n	80051d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d024      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
 80051ce:	e01f      	b.n	8005210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	4798      	blx	r3
 80051e0:	e016      	b.n	8005210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d107      	bne.n	8005200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0208 	bic.w	r2, r2, #8
 80051fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005214:	2220      	movs	r2, #32
 8005216:	409a      	lsls	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 808f 	beq.w	8005340 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0310 	and.w	r3, r3, #16
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 8087 	beq.w	8005340 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005236:	2220      	movs	r2, #32
 8005238:	409a      	lsls	r2, r3
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b05      	cmp	r3, #5
 8005248:	d136      	bne.n	80052b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0216 	bic.w	r2, r2, #22
 8005258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <HAL_DMA_IRQHandler+0x1da>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005276:	2b00      	cmp	r3, #0
 8005278:	d007      	beq.n	800528a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0208 	bic.w	r2, r2, #8
 8005288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800528e:	223f      	movs	r2, #63	@ 0x3f
 8005290:	409a      	lsls	r2, r3
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d07e      	beq.n	80053ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
        }
        return;
 80052b6:	e079      	b.n	80053ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01d      	beq.n	8005302 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10d      	bne.n	80052f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d031      	beq.n	8005340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
 80052e4:	e02c      	b.n	8005340 <HAL_DMA_IRQHandler+0x2a0>
 80052e6:	bf00      	nop
 80052e8:	20000008 	.word	0x20000008
 80052ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d023      	beq.n	8005340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	4798      	blx	r3
 8005300:	e01e      	b.n	8005340 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10f      	bne.n	8005330 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0210 	bic.w	r2, r2, #16
 800531e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005344:	2b00      	cmp	r3, #0
 8005346:	d032      	beq.n	80053ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d022      	beq.n	800539a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2205      	movs	r2, #5
 8005358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0201 	bic.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	3301      	adds	r3, #1
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	429a      	cmp	r2, r3
 8005376:	d307      	bcc.n	8005388 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f2      	bne.n	800536c <HAL_DMA_IRQHandler+0x2cc>
 8005386:	e000      	b.n	800538a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005388:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
 80053aa:	e000      	b.n	80053ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80053ac:	bf00      	nop
    }
  }
}
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80053d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	2b40      	cmp	r3, #64	@ 0x40
 80053e0:	d108      	bne.n	80053f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80053f2:	e007      	b.n	8005404 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	60da      	str	r2, [r3, #12]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	3b10      	subs	r3, #16
 8005420:	4a14      	ldr	r2, [pc, #80]	@ (8005474 <DMA_CalcBaseAndBitshift+0x64>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800542a:	4a13      	ldr	r2, [pc, #76]	@ (8005478 <DMA_CalcBaseAndBitshift+0x68>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d909      	bls.n	8005452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	1d1a      	adds	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005450:	e007      	b.n	8005462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800545a:	f023 0303 	bic.w	r3, r3, #3
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	aaaaaaab 	.word	0xaaaaaaab
 8005478:	0801d864 	.word	0x0801d864

0800547c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11f      	bne.n	80054d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d856      	bhi.n	800554a <DMA_CheckFifoParam+0xce>
 800549c:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <DMA_CheckFifoParam+0x28>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054b5 	.word	0x080054b5
 80054a8:	080054c7 	.word	0x080054c7
 80054ac:	080054b5 	.word	0x080054b5
 80054b0:	0800554b 	.word	0x0800554b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d046      	beq.n	800554e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c4:	e043      	b.n	800554e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054ce:	d140      	bne.n	8005552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d4:	e03d      	b.n	8005552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054de:	d121      	bne.n	8005524 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d837      	bhi.n	8005556 <DMA_CheckFifoParam+0xda>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <DMA_CheckFifoParam+0x70>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	080054fd 	.word	0x080054fd
 80054f0:	08005503 	.word	0x08005503
 80054f4:	080054fd 	.word	0x080054fd
 80054f8:	08005515 	.word	0x08005515
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e030      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d025      	beq.n	800555a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005512:	e022      	b.n	800555a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005518:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800551c:	d11f      	bne.n	800555e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005522:	e01c      	b.n	800555e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d903      	bls.n	8005532 <DMA_CheckFifoParam+0xb6>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d003      	beq.n	8005538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005530:	e018      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
      break;
 8005536:	e015      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00e      	beq.n	8005562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	73fb      	strb	r3, [r7, #15]
      break;
 8005548:	e00b      	b.n	8005562 <DMA_CheckFifoParam+0xe6>
      break;
 800554a:	bf00      	nop
 800554c:	e00a      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 800554e:	bf00      	nop
 8005550:	e008      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 8005552:	bf00      	nop
 8005554:	e006      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 8005556:	bf00      	nop
 8005558:	e004      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 800555a:	bf00      	nop
 800555c:	e002      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;   
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <DMA_CheckFifoParam+0xe8>
      break;
 8005562:	bf00      	nop
    }
  } 
  
  return status; 
 8005564:	7bfb      	ldrb	r3, [r7, #15]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop

08005574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	@ 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e165      	b.n	800585c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005590:	2201      	movs	r2, #1
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4013      	ands	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	f040 8154 	bne.w	8005856 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d005      	beq.n	80055c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d130      	bne.n	8005628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	2203      	movs	r2, #3
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055fc:	2201      	movs	r2, #1
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	43db      	mvns	r3, r3
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	4013      	ands	r3, r2
 800560a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	091b      	lsrs	r3, r3, #4
 8005612:	f003 0201 	and.w	r2, r3, #1
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4313      	orrs	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	2b03      	cmp	r3, #3
 8005632:	d017      	beq.n	8005664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4013      	ands	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4313      	orrs	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d123      	bne.n	80056b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	08da      	lsrs	r2, r3, #3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3208      	adds	r2, #8
 8005678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	220f      	movs	r2, #15
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	43db      	mvns	r3, r3
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4013      	ands	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	08da      	lsrs	r2, r3, #3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3208      	adds	r2, #8
 80056b2:	69b9      	ldr	r1, [r7, #24]
 80056b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	2203      	movs	r2, #3
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	4013      	ands	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0203 	and.w	r2, r3, #3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80ae 	beq.w	8005856 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005874 <HAL_GPIO_Init+0x300>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	4a5c      	ldr	r2, [pc, #368]	@ (8005874 <HAL_GPIO_Init+0x300>)
 8005704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005708:	6453      	str	r3, [r2, #68]	@ 0x44
 800570a:	4b5a      	ldr	r3, [pc, #360]	@ (8005874 <HAL_GPIO_Init+0x300>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005716:	4a58      	ldr	r2, [pc, #352]	@ (8005878 <HAL_GPIO_Init+0x304>)
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	3302      	adds	r3, #2
 800571e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	220f      	movs	r2, #15
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	43db      	mvns	r3, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4013      	ands	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a4f      	ldr	r2, [pc, #316]	@ (800587c <HAL_GPIO_Init+0x308>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d025      	beq.n	800578e <HAL_GPIO_Init+0x21a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a4e      	ldr	r2, [pc, #312]	@ (8005880 <HAL_GPIO_Init+0x30c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01f      	beq.n	800578a <HAL_GPIO_Init+0x216>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a4d      	ldr	r2, [pc, #308]	@ (8005884 <HAL_GPIO_Init+0x310>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d019      	beq.n	8005786 <HAL_GPIO_Init+0x212>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a4c      	ldr	r2, [pc, #304]	@ (8005888 <HAL_GPIO_Init+0x314>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d013      	beq.n	8005782 <HAL_GPIO_Init+0x20e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a4b      	ldr	r2, [pc, #300]	@ (800588c <HAL_GPIO_Init+0x318>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00d      	beq.n	800577e <HAL_GPIO_Init+0x20a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a4a      	ldr	r2, [pc, #296]	@ (8005890 <HAL_GPIO_Init+0x31c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d007      	beq.n	800577a <HAL_GPIO_Init+0x206>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a49      	ldr	r2, [pc, #292]	@ (8005894 <HAL_GPIO_Init+0x320>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_GPIO_Init+0x202>
 8005772:	2306      	movs	r3, #6
 8005774:	e00c      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 8005776:	2307      	movs	r3, #7
 8005778:	e00a      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 800577a:	2305      	movs	r3, #5
 800577c:	e008      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 800577e:	2304      	movs	r3, #4
 8005780:	e006      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 8005782:	2303      	movs	r3, #3
 8005784:	e004      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 8005786:	2302      	movs	r3, #2
 8005788:	e002      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <HAL_GPIO_Init+0x21c>
 800578e:	2300      	movs	r3, #0
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	f002 0203 	and.w	r2, r2, #3
 8005796:	0092      	lsls	r2, r2, #2
 8005798:	4093      	lsls	r3, r2
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	4313      	orrs	r3, r2
 800579e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a0:	4935      	ldr	r1, [pc, #212]	@ (8005878 <HAL_GPIO_Init+0x304>)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	089b      	lsrs	r3, r3, #2
 80057a6:	3302      	adds	r3, #2
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005898 <HAL_GPIO_Init+0x324>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	4013      	ands	r3, r2
 80057bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057d2:	4a31      	ldr	r2, [pc, #196]	@ (8005898 <HAL_GPIO_Init+0x324>)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005898 <HAL_GPIO_Init+0x324>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057fc:	4a26      	ldr	r2, [pc, #152]	@ (8005898 <HAL_GPIO_Init+0x324>)
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005802:	4b25      	ldr	r3, [pc, #148]	@ (8005898 <HAL_GPIO_Init+0x324>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	43db      	mvns	r3, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4013      	ands	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005826:	4a1c      	ldr	r2, [pc, #112]	@ (8005898 <HAL_GPIO_Init+0x324>)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800582c:	4b1a      	ldr	r3, [pc, #104]	@ (8005898 <HAL_GPIO_Init+0x324>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	43db      	mvns	r3, r3
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4013      	ands	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d003      	beq.n	8005850 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005850:	4a11      	ldr	r2, [pc, #68]	@ (8005898 <HAL_GPIO_Init+0x324>)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b0f      	cmp	r3, #15
 8005860:	f67f ae96 	bls.w	8005590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	3724      	adds	r7, #36	@ 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	40013800 	.word	0x40013800
 800587c:	40020000 	.word	0x40020000
 8005880:	40020400 	.word	0x40020400
 8005884:	40020800 	.word	0x40020800
 8005888:	40020c00 	.word	0x40020c00
 800588c:	40021000 	.word	0x40021000
 8005890:	40021400 	.word	0x40021400
 8005894:	40021800 	.word	0x40021800
 8005898:	40013c00 	.word	0x40013c00

0800589c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e0c7      	b.n	8005a48 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058b8:	2201      	movs	r2, #1
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4013      	ands	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	f040 80b7 	bne.w	8005a42 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80058d4:	4a62      	ldr	r2, [pc, #392]	@ (8005a60 <HAL_GPIO_DeInit+0x1c4>)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	089b      	lsrs	r3, r3, #2
 80058da:	3302      	adds	r3, #2
 80058dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	220f      	movs	r2, #15
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	4013      	ands	r3, r2
 80058f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005a64 <HAL_GPIO_DeInit+0x1c8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d025      	beq.n	800594a <HAL_GPIO_DeInit+0xae>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a59      	ldr	r2, [pc, #356]	@ (8005a68 <HAL_GPIO_DeInit+0x1cc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d01f      	beq.n	8005946 <HAL_GPIO_DeInit+0xaa>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a58      	ldr	r2, [pc, #352]	@ (8005a6c <HAL_GPIO_DeInit+0x1d0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d019      	beq.n	8005942 <HAL_GPIO_DeInit+0xa6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a57      	ldr	r2, [pc, #348]	@ (8005a70 <HAL_GPIO_DeInit+0x1d4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_GPIO_DeInit+0xa2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a56      	ldr	r2, [pc, #344]	@ (8005a74 <HAL_GPIO_DeInit+0x1d8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00d      	beq.n	800593a <HAL_GPIO_DeInit+0x9e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a55      	ldr	r2, [pc, #340]	@ (8005a78 <HAL_GPIO_DeInit+0x1dc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d007      	beq.n	8005936 <HAL_GPIO_DeInit+0x9a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a54      	ldr	r2, [pc, #336]	@ (8005a7c <HAL_GPIO_DeInit+0x1e0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <HAL_GPIO_DeInit+0x96>
 800592e:	2306      	movs	r3, #6
 8005930:	e00c      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 8005932:	2307      	movs	r3, #7
 8005934:	e00a      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 8005936:	2305      	movs	r3, #5
 8005938:	e008      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 800593a:	2304      	movs	r3, #4
 800593c:	e006      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 800593e:	2303      	movs	r3, #3
 8005940:	e004      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 8005942:	2302      	movs	r3, #2
 8005944:	e002      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_GPIO_DeInit+0xb0>
 800594a:	2300      	movs	r3, #0
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	f002 0203 	and.w	r2, r2, #3
 8005952:	0092      	lsls	r2, r2, #2
 8005954:	4093      	lsls	r3, r2
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	429a      	cmp	r2, r3
 800595a:	d132      	bne.n	80059c2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800595c:	4b48      	ldr	r3, [pc, #288]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	43db      	mvns	r3, r3
 8005964:	4946      	ldr	r1, [pc, #280]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 8005966:	4013      	ands	r3, r2
 8005968:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800596a:	4b45      	ldr	r3, [pc, #276]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	43db      	mvns	r3, r3
 8005972:	4943      	ldr	r1, [pc, #268]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 8005974:	4013      	ands	r3, r2
 8005976:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005978:	4b41      	ldr	r3, [pc, #260]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	43db      	mvns	r3, r3
 8005980:	493f      	ldr	r1, [pc, #252]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 8005982:	4013      	ands	r3, r2
 8005984:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005986:	4b3e      	ldr	r3, [pc, #248]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	43db      	mvns	r3, r3
 800598e:	493c      	ldr	r1, [pc, #240]	@ (8005a80 <HAL_GPIO_DeInit+0x1e4>)
 8005990:	4013      	ands	r3, r2
 8005992:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	220f      	movs	r2, #15
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80059a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005a60 <HAL_GPIO_DeInit+0x1c4>)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	089b      	lsrs	r3, r3, #2
 80059aa:	3302      	adds	r3, #2
 80059ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	43da      	mvns	r2, r3
 80059b4:	482a      	ldr	r0, [pc, #168]	@ (8005a60 <HAL_GPIO_DeInit+0x1c4>)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	089b      	lsrs	r3, r3, #2
 80059ba:	400a      	ands	r2, r1
 80059bc:	3302      	adds	r3, #2
 80059be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	2103      	movs	r1, #3
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	401a      	ands	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	08da      	lsrs	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3208      	adds	r2, #8
 80059e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f003 0307 	and.w	r3, r3, #7
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	220f      	movs	r2, #15
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	08d2      	lsrs	r2, r2, #3
 80059f8:	4019      	ands	r1, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	3208      	adds	r2, #8
 80059fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2103      	movs	r1, #3
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	401a      	ands	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	2103      	movs	r1, #3
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	43db      	mvns	r3, r3
 8005a3c:	401a      	ands	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	3301      	adds	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	f67f af34 	bls.w	80058b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40013800 	.word	0x40013800
 8005a64:	40020000 	.word	0x40020000
 8005a68:	40020400 	.word	0x40020400
 8005a6c:	40020800 	.word	0x40020800
 8005a70:	40020c00 	.word	0x40020c00
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40021400 	.word	0x40021400
 8005a7c:	40021800 	.word	0x40021800
 8005a80:	40013c00 	.word	0x40013c00

08005a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
 8005a90:	4613      	mov	r3, r2
 8005a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a94:	787b      	ldrb	r3, [r7, #1]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aa0:	e003      	b.n	8005aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	041a      	lsls	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e12b      	b.n	8005d22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fd ff42 	bl	8003968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2224      	movs	r2, #36	@ 0x24
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f001 f912 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 8005b20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4a81      	ldr	r2, [pc, #516]	@ (8005d2c <HAL_I2C_Init+0x274>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d807      	bhi.n	8005b3c <HAL_I2C_Init+0x84>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a80      	ldr	r2, [pc, #512]	@ (8005d30 <HAL_I2C_Init+0x278>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	bf94      	ite	ls
 8005b34:	2301      	movls	r3, #1
 8005b36:	2300      	movhi	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	e006      	b.n	8005b4a <HAL_I2C_Init+0x92>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a7d      	ldr	r2, [pc, #500]	@ (8005d34 <HAL_I2C_Init+0x27c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	bf94      	ite	ls
 8005b44:	2301      	movls	r3, #1
 8005b46:	2300      	movhi	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e0e7      	b.n	8005d22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4a78      	ldr	r2, [pc, #480]	@ (8005d38 <HAL_I2C_Init+0x280>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	0c9b      	lsrs	r3, r3, #18
 8005b5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4a6a      	ldr	r2, [pc, #424]	@ (8005d2c <HAL_I2C_Init+0x274>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d802      	bhi.n	8005b8c <HAL_I2C_Init+0xd4>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	e009      	b.n	8005ba0 <HAL_I2C_Init+0xe8>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	4a69      	ldr	r2, [pc, #420]	@ (8005d3c <HAL_I2C_Init+0x284>)
 8005b98:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9c:	099b      	lsrs	r3, r3, #6
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	495c      	ldr	r1, [pc, #368]	@ (8005d2c <HAL_I2C_Init+0x274>)
 8005bbc:	428b      	cmp	r3, r1
 8005bbe:	d819      	bhi.n	8005bf4 <HAL_I2C_Init+0x13c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1e59      	subs	r1, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bce:	1c59      	adds	r1, r3, #1
 8005bd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bd4:	400b      	ands	r3, r1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_I2C_Init+0x138>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	1e59      	subs	r1, r3, #1
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005be8:	3301      	adds	r3, #1
 8005bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bee:	e051      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e04f      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d111      	bne.n	8005c20 <HAL_I2C_Init+0x168>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	1e58      	subs	r0, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6859      	ldr	r1, [r3, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	440b      	add	r3, r1
 8005c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	bf0c      	ite	eq
 8005c18:	2301      	moveq	r3, #1
 8005c1a:	2300      	movne	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e012      	b.n	8005c46 <HAL_I2C_Init+0x18e>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1e58      	subs	r0, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	0099      	lsls	r1, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <HAL_I2C_Init+0x196>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e022      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10e      	bne.n	8005c74 <HAL_I2C_Init+0x1bc>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1e58      	subs	r0, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	460b      	mov	r3, r1
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	440b      	add	r3, r1
 8005c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c68:	3301      	adds	r3, #1
 8005c6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c72:	e00f      	b.n	8005c94 <HAL_I2C_Init+0x1dc>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	1e58      	subs	r0, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	0099      	lsls	r1, r3, #2
 8005c84:	440b      	add	r3, r1
 8005c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	6809      	ldr	r1, [r1, #0]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6911      	ldr	r1, [r2, #16]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68d2      	ldr	r2, [r2, #12]
 8005cce:	4311      	orrs	r1, r2
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6812      	ldr	r2, [r2, #0]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	000186a0 	.word	0x000186a0
 8005d30:	001e847f 	.word	0x001e847f
 8005d34:	003d08ff 	.word	0x003d08ff
 8005d38:	431bde83 	.word	0x431bde83
 8005d3c:	10624dd3 	.word	0x10624dd3

08005d40 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e021      	b.n	8005d96 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2224      	movs	r2, #36	@ 0x24
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fd fe44 	bl	80039f8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	817b      	strh	r3, [r7, #10]
 8005db2:	460b      	mov	r3, r1
 8005db4:	813b      	strh	r3, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005dba:	f7fe fac5 	bl	8004348 <HAL_GetTick>
 8005dbe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	f040 80d9 	bne.w	8005f80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2319      	movs	r3, #25
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	496d      	ldr	r1, [pc, #436]	@ (8005f8c <HAL_I2C_Mem_Write+0x1ec>)
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fc8b 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005de4:	2302      	movs	r3, #2
 8005de6:	e0cc      	b.n	8005f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_I2C_Mem_Write+0x56>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e0c5      	b.n	8005f82 <HAL_I2C_Mem_Write+0x1e2>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d007      	beq.n	8005e1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2221      	movs	r2, #33	@ 0x21
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2240      	movs	r2, #64	@ 0x40
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a3a      	ldr	r2, [r7, #32]
 8005e46:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a4d      	ldr	r2, [pc, #308]	@ (8005f90 <HAL_I2C_Mem_Write+0x1f0>)
 8005e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e5e:	88f8      	ldrh	r0, [r7, #6]
 8005e60:	893a      	ldrh	r2, [r7, #8]
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 fac2 	bl	80063f8 <I2C_RequestMemoryWrite>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d052      	beq.n	8005f20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e081      	b.n	8005f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fd50 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d107      	bne.n	8005ea6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e06b      	b.n	8005f82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d11b      	bne.n	8005f20 <HAL_I2C_Mem_Write+0x180>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d017      	beq.n	8005f20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1aa      	bne.n	8005e7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fd43 	bl	80069b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00d      	beq.n	8005f54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d107      	bne.n	8005f50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e016      	b.n	8005f82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	e000      	b.n	8005f82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f80:	2302      	movs	r3, #2
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	00100002 	.word	0x00100002
 8005f90:	ffff0000 	.word	0xffff0000

08005f94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08c      	sub	sp, #48	@ 0x30
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	817b      	strh	r3, [r7, #10]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	813b      	strh	r3, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fae:	f7fe f9cb 	bl	8004348 <HAL_GetTick>
 8005fb2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	f040 8214 	bne.w	80063ea <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2319      	movs	r3, #25
 8005fc8:	2201      	movs	r2, #1
 8005fca:	497b      	ldr	r1, [pc, #492]	@ (80061b8 <HAL_I2C_Mem_Read+0x224>)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fb91 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e207      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_I2C_Mem_Read+0x56>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e200      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d007      	beq.n	8006010 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800601e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2222      	movs	r2, #34	@ 0x22
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2240      	movs	r2, #64	@ 0x40
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006046:	b29a      	uxth	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a5b      	ldr	r2, [pc, #364]	@ (80061bc <HAL_I2C_Mem_Read+0x228>)
 8006050:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006052:	88f8      	ldrh	r0, [r7, #6]
 8006054:	893a      	ldrh	r2, [r7, #8]
 8006056:	8979      	ldrh	r1, [r7, #10]
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fa5e 	bl	8006524 <I2C_RequestMemoryRead>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e1bc      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d113      	bne.n	80060a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800607a:	2300      	movs	r3, #0
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	623b      	str	r3, [r7, #32]
 800608e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e190      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d11b      	bne.n	80060e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	e170      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d11b      	bne.n	8006122 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	61bb      	str	r3, [r7, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	e150      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006122:	2300      	movs	r3, #0
 8006124:	617b      	str	r3, [r7, #20]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	617b      	str	r3, [r7, #20]
 8006136:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006138:	e144      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613e:	2b03      	cmp	r3, #3
 8006140:	f200 80f1 	bhi.w	8006326 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006148:	2b01      	cmp	r3, #1
 800614a:	d123      	bne.n	8006194 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fc79 	bl	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e145      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006188:	b29b      	uxth	r3, r3
 800618a:	3b01      	subs	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006192:	e117      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006198:	2b02      	cmp	r3, #2
 800619a:	d14e      	bne.n	800623a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	2200      	movs	r2, #0
 80061a4:	4906      	ldr	r1, [pc, #24]	@ (80061c0 <HAL_I2C_Mem_Read+0x22c>)
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 faa4 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e11a      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
 80061b6:	bf00      	nop
 80061b8:	00100002 	.word	0x00100002
 80061bc:	ffff0000 	.word	0xffff0000
 80061c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006222:	3b01      	subs	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006238:	e0c4      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	2200      	movs	r2, #0
 8006242:	496c      	ldr	r1, [pc, #432]	@ (80063f4 <HAL_I2C_Mem_Read+0x460>)
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fa55 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e0cb      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	2200      	movs	r2, #0
 800629e:	4955      	ldr	r1, [pc, #340]	@ (80063f4 <HAL_I2C_Mem_Read+0x460>)
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fa27 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e09d      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062dc:	3b01      	subs	r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006324:	e04e      	b.n	80063c4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006328:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 fb8c 	bl	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e058      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d124      	bne.n	80063c4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637e:	2b03      	cmp	r3, #3
 8006380:	d107      	bne.n	8006392 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006390:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f47f aeb6 	bne.w	800613a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3728      	adds	r7, #40	@ 0x28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	00010004 	.word	0x00010004

080063f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	4608      	mov	r0, r1
 8006402:	4611      	mov	r1, r2
 8006404:	461a      	mov	r2, r3
 8006406:	4603      	mov	r3, r0
 8006408:	817b      	strh	r3, [r7, #10]
 800640a:	460b      	mov	r3, r1
 800640c:	813b      	strh	r3, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006420:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	2200      	movs	r2, #0
 800642a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f960 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006448:	d103      	bne.n	8006452 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006450:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e05f      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006456:	897b      	ldrh	r3, [r7, #10]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006464:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	492d      	ldr	r1, [pc, #180]	@ (8006520 <I2C_RequestMemoryWrite+0x128>)
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f9bb 	bl	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e04c      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006494:	6a39      	ldr	r1, [r7, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fa46 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d107      	bne.n	80064ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e02b      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d105      	bne.n	80064d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064c4:	893b      	ldrh	r3, [r7, #8]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	611a      	str	r2, [r3, #16]
 80064ce:	e021      	b.n	8006514 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064d0:	893b      	ldrh	r3, [r7, #8]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e0:	6a39      	ldr	r1, [r7, #32]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fa20 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00d      	beq.n	800650a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d107      	bne.n	8006506 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006504:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e005      	b.n	8006516 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800650a:	893b      	ldrh	r3, [r7, #8]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	00010002 	.word	0x00010002

08006524 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af02      	add	r7, sp, #8
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4603      	mov	r3, r0
 8006534:	817b      	strh	r3, [r7, #10]
 8006536:	460b      	mov	r3, r1
 8006538:	813b      	strh	r3, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800654c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800655c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	2200      	movs	r2, #0
 8006566:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 f8c2 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00d      	beq.n	8006592 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006584:	d103      	bne.n	800658e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800658c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	e0aa      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	6a3a      	ldr	r2, [r7, #32]
 80065a6:	4952      	ldr	r1, [pc, #328]	@ (80066f0 <I2C_RequestMemoryRead+0x1cc>)
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f91d 	bl	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e097      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	6a39      	ldr	r1, [r7, #32]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f9a8 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00d      	beq.n	80065fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d107      	bne.n	80065f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e076      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d105      	bne.n	800660c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006600:	893b      	ldrh	r3, [r7, #8]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	611a      	str	r2, [r3, #16]
 800660a:	e021      	b.n	8006650 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800661c:	6a39      	ldr	r1, [r7, #32]
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f982 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00d      	beq.n	8006646 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	2b04      	cmp	r3, #4
 8006630:	d107      	bne.n	8006642 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e050      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006646:	893b      	ldrh	r3, [r7, #8]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006652:	6a39      	ldr	r1, [r7, #32]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f967 	bl	8006928 <I2C_WaitOnTXEFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006664:	2b04      	cmp	r3, #4
 8006666:	d107      	bne.n	8006678 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006676:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e035      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800668a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	2200      	movs	r2, #0
 8006694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f82b 	bl	80066f4 <I2C_WaitOnFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b2:	d103      	bne.n	80066bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e013      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066c0:	897b      	ldrh	r3, [r7, #10]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f043 0301 	orr.w	r3, r3, #1
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	6a3a      	ldr	r2, [r7, #32]
 80066d4:	4906      	ldr	r1, [pc, #24]	@ (80066f0 <I2C_RequestMemoryRead+0x1cc>)
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f886 	bl	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	00010002 	.word	0x00010002

080066f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006704:	e048      	b.n	8006798 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800670c:	d044      	beq.n	8006798 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fd fe1b 	bl	8004348 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d139      	bne.n	8006798 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	0c1b      	lsrs	r3, r3, #16
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d10d      	bne.n	800674a <I2C_WaitOnFlagUntilTimeout+0x56>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	43da      	mvns	r2, r3
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4013      	ands	r3, r2
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	e00c      	b.n	8006764 <I2C_WaitOnFlagUntilTimeout+0x70>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	43da      	mvns	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	429a      	cmp	r2, r3
 8006768:	d116      	bne.n	8006798 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	f043 0220 	orr.w	r2, r3, #32
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e023      	b.n	80067e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	0c1b      	lsrs	r3, r3, #16
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10d      	bne.n	80067be <I2C_WaitOnFlagUntilTimeout+0xca>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	43da      	mvns	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4013      	ands	r3, r2
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf0c      	ite	eq
 80067b4:	2301      	moveq	r3, #1
 80067b6:	2300      	movne	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	e00c      	b.n	80067d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	43da      	mvns	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d093      	beq.n	8006706 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067f6:	e071      	b.n	80068dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006806:	d123      	bne.n	8006850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006816:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006820:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683c:	f043 0204 	orr.w	r2, r3, #4
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e067      	b.n	8006920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006856:	d041      	beq.n	80068dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006858:	f7fd fd76 	bl	8004348 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d136      	bne.n	80068dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	0c1b      	lsrs	r3, r3, #16
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	d10c      	bne.n	8006892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	43da      	mvns	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4013      	ands	r3, r2
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	bf14      	ite	ne
 800688a:	2301      	movne	r3, #1
 800688c:	2300      	moveq	r3, #0
 800688e:	b2db      	uxtb	r3, r3
 8006890:	e00b      	b.n	80068aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	43da      	mvns	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4013      	ands	r3, r2
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bf14      	ite	ne
 80068a4:	2301      	movne	r3, #1
 80068a6:	2300      	moveq	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	f043 0220 	orr.w	r2, r3, #32
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e021      	b.n	8006920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	0c1b      	lsrs	r3, r3, #16
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d10c      	bne.n	8006900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	43da      	mvns	r2, r3
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	4013      	ands	r3, r2
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	bf14      	ite	ne
 80068f8:	2301      	movne	r3, #1
 80068fa:	2300      	moveq	r3, #0
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	e00b      	b.n	8006918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	43da      	mvns	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4013      	ands	r3, r2
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf14      	ite	ne
 8006912:	2301      	movne	r3, #1
 8006914:	2300      	moveq	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	f47f af6d 	bne.w	80067f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006934:	e034      	b.n	80069a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f8e3 	bl	8006b02 <I2C_IsAcknowledgeFailed>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e034      	b.n	80069b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800694c:	d028      	beq.n	80069a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694e:	f7fd fcfb 	bl	8004348 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11d      	bne.n	80069a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696e:	2b80      	cmp	r3, #128	@ 0x80
 8006970:	d016      	beq.n	80069a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698c:	f043 0220 	orr.w	r2, r3, #32
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e007      	b.n	80069b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d1c3      	bne.n	8006936 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069c4:	e034      	b.n	8006a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f89b 	bl	8006b02 <I2C_IsAcknowledgeFailed>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e034      	b.n	8006a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069dc:	d028      	beq.n	8006a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069de:	f7fd fcb3 	bl	8004348 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d302      	bcc.n	80069f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d11d      	bne.n	8006a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d016      	beq.n	8006a30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1c:	f043 0220 	orr.w	r2, r3, #32
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e007      	b.n	8006a40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d1c3      	bne.n	80069c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a54:	e049      	b.n	8006aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d119      	bne.n	8006a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0210 	mvn.w	r2, #16
 8006a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e030      	b.n	8006afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a98:	f7fd fc56 	bl	8004348 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d302      	bcc.n	8006aae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d11d      	bne.n	8006aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab8:	2b40      	cmp	r3, #64	@ 0x40
 8006aba:	d016      	beq.n	8006aea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	f043 0220 	orr.w	r2, r3, #32
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e007      	b.n	8006afa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af4:	2b40      	cmp	r3, #64	@ 0x40
 8006af6:	d1ae      	bne.n	8006a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b18:	d11b      	bne.n	8006b52 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b22:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f043 0204 	orr.w	r2, r3, #4
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e000      	b.n	8006b54 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e0cc      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b74:	4b68      	ldr	r3, [pc, #416]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d90c      	bls.n	8006b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b82:	4b65      	ldr	r3, [pc, #404]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	b2d2      	uxtb	r2, r2
 8006b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8a:	4b63      	ldr	r3, [pc, #396]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d001      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0b8      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d020      	beq.n	8006bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb4:	4b59      	ldr	r3, [pc, #356]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	4a58      	ldr	r2, [pc, #352]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bcc:	4b53      	ldr	r3, [pc, #332]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4a52      	ldr	r2, [pc, #328]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd8:	4b50      	ldr	r3, [pc, #320]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	494d      	ldr	r1, [pc, #308]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d044      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfe:	4b47      	ldr	r3, [pc, #284]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d119      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e07f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d003      	beq.n	8006c1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d107      	bne.n	8006c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e06f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e067      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3e:	4b37      	ldr	r3, [pc, #220]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f023 0203 	bic.w	r2, r3, #3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4934      	ldr	r1, [pc, #208]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c50:	f7fd fb7a 	bl	8004348 <HAL_GetTick>
 8006c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c58:	f7fd fb76 	bl	8004348 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e04f      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 020c 	and.w	r2, r3, #12
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d1eb      	bne.n	8006c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c80:	4b25      	ldr	r3, [pc, #148]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 030f 	and.w	r3, r3, #15
 8006c88:	683a      	ldr	r2, [r7, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d20c      	bcs.n	8006ca8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8e:	4b22      	ldr	r3, [pc, #136]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c96:	4b20      	ldr	r3, [pc, #128]	@ (8006d18 <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d001      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e032      	b.n	8006d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d008      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb4:	4b19      	ldr	r3, [pc, #100]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4916      	ldr	r1, [pc, #88]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d009      	beq.n	8006ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd2:	4b12      	ldr	r3, [pc, #72]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	490e      	ldr	r1, [pc, #56]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ce6:	f000 f887 	bl	8006df8 <HAL_RCC_GetSysClockFreq>
 8006cea:	4602      	mov	r2, r0
 8006cec:	4b0b      	ldr	r3, [pc, #44]	@ (8006d1c <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	091b      	lsrs	r3, r3, #4
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	490a      	ldr	r1, [pc, #40]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf8:	5ccb      	ldrb	r3, [r1, r3]
 8006cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfe:	4a09      	ldr	r2, [pc, #36]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c4>)
 8006d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d02:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <HAL_RCC_ClockConfig+0x1c8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd f8ba 	bl	8003e80 <HAL_InitTick>

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40023c00 	.word	0x40023c00
 8006d1c:	40023800 	.word	0x40023800
 8006d20:	0801d84c 	.word	0x0801d84c
 8006d24:	20000008 	.word	0x20000008
 8006d28:	2000000c 	.word	0x2000000c

08006d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d30:	4b03      	ldr	r3, [pc, #12]	@ (8006d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d32:	681b      	ldr	r3, [r3, #0]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000008 	.word	0x20000008

08006d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d48:	f7ff fff0 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	0a9b      	lsrs	r3, r3, #10
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	4903      	ldr	r1, [pc, #12]	@ (8006d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d5a:	5ccb      	ldrb	r3, [r1, r3]
 8006d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	40023800 	.word	0x40023800
 8006d68:	0801d85c 	.word	0x0801d85c

08006d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d70:	f7ff ffdc 	bl	8006d2c <HAL_RCC_GetHCLKFreq>
 8006d74:	4602      	mov	r2, r0
 8006d76:	4b05      	ldr	r3, [pc, #20]	@ (8006d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	0b5b      	lsrs	r3, r3, #13
 8006d7c:	f003 0307 	and.w	r3, r3, #7
 8006d80:	4903      	ldr	r1, [pc, #12]	@ (8006d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d82:	5ccb      	ldrb	r3, [r1, r3]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	0801d85c 	.word	0x0801d85c

08006d94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220f      	movs	r2, #15
 8006da2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006da4:	4b12      	ldr	r3, [pc, #72]	@ (8006df0 <HAL_RCC_GetClockConfig+0x5c>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 0203 	and.w	r2, r3, #3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006db0:	4b0f      	ldr	r3, [pc, #60]	@ (8006df0 <HAL_RCC_GetClockConfig+0x5c>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <HAL_RCC_GetClockConfig+0x5c>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006dc8:	4b09      	ldr	r3, [pc, #36]	@ (8006df0 <HAL_RCC_GetClockConfig+0x5c>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006dd6:	4b07      	ldr	r3, [pc, #28]	@ (8006df4 <HAL_RCC_GetClockConfig+0x60>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 020f 	and.w	r2, r3, #15
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	601a      	str	r2, [r3, #0]
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	40023800 	.word	0x40023800
 8006df4:	40023c00 	.word	0x40023c00

08006df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dfc:	b0a6      	sub	sp, #152	@ 0x98
 8006dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e1e:	4bc8      	ldr	r3, [pc, #800]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	2b0c      	cmp	r3, #12
 8006e28:	f200 817e 	bhi.w	8007128 <HAL_RCC_GetSysClockFreq+0x330>
 8006e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08007129 	.word	0x08007129
 8006e3c:	08007129 	.word	0x08007129
 8006e40:	08007129 	.word	0x08007129
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	08007129 	.word	0x08007129
 8006e4c:	08007129 	.word	0x08007129
 8006e50:	08007129 	.word	0x08007129
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08007129 	.word	0x08007129
 8006e5c:	08007129 	.word	0x08007129
 8006e60:	08007129 	.word	0x08007129
 8006e64:	08006fe3 	.word	0x08006fe3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e68:	4bb6      	ldr	r3, [pc, #728]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006e6e:	e15f      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e70:	4bb5      	ldr	r3, [pc, #724]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x350>)
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006e76:	e15b      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e78:	4bb1      	ldr	r3, [pc, #708]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e84:	4bae      	ldr	r3, [pc, #696]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d031      	beq.n	8006ef4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e90:	4bab      	ldr	r3, [pc, #684]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	099b      	lsrs	r3, r3, #6
 8006e96:	2200      	movs	r2, #0
 8006e98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e9a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ea8:	4ba7      	ldr	r3, [pc, #668]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x350>)
 8006eaa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006eae:	462a      	mov	r2, r5
 8006eb0:	fb03 f202 	mul.w	r2, r3, r2
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	4aa2      	ldr	r2, [pc, #648]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x350>)
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	fba1 1202 	umull	r1, r2, r1, r2
 8006ec6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ec8:	460a      	mov	r2, r1
 8006eca:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006ecc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ece:	4413      	add	r3, r2
 8006ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006eda:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006edc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ee0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006ee4:	f7f9 fe6a 	bl	8000bbc <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4613      	mov	r3, r2
 8006eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ef2:	e064      	b.n	8006fbe <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef4:	4b92      	ldr	r3, [pc, #584]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	099b      	lsrs	r3, r3, #6
 8006efa:	2200      	movs	r2, #0
 8006efc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006efe:	657a      	str	r2, [r7, #84]	@ 0x54
 8006f00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f08:	2300      	movs	r3, #0
 8006f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f0c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006f10:	4622      	mov	r2, r4
 8006f12:	462b      	mov	r3, r5
 8006f14:	f04f 0000 	mov.w	r0, #0
 8006f18:	f04f 0100 	mov.w	r1, #0
 8006f1c:	0159      	lsls	r1, r3, #5
 8006f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f22:	0150      	lsls	r0, r2, #5
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4621      	mov	r1, r4
 8006f2a:	1a51      	subs	r1, r2, r1
 8006f2c:	6139      	str	r1, [r7, #16]
 8006f2e:	4629      	mov	r1, r5
 8006f30:	eb63 0301 	sbc.w	r3, r3, r1
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f42:	4659      	mov	r1, fp
 8006f44:	018b      	lsls	r3, r1, #6
 8006f46:	4651      	mov	r1, sl
 8006f48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f4c:	4651      	mov	r1, sl
 8006f4e:	018a      	lsls	r2, r1, #6
 8006f50:	4651      	mov	r1, sl
 8006f52:	ebb2 0801 	subs.w	r8, r2, r1
 8006f56:	4659      	mov	r1, fp
 8006f58:	eb63 0901 	sbc.w	r9, r3, r1
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f70:	4690      	mov	r8, r2
 8006f72:	4699      	mov	r9, r3
 8006f74:	4623      	mov	r3, r4
 8006f76:	eb18 0303 	adds.w	r3, r8, r3
 8006f7a:	60bb      	str	r3, [r7, #8]
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	eb49 0303 	adc.w	r3, r9, r3
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f90:	4629      	mov	r1, r5
 8006f92:	028b      	lsls	r3, r1, #10
 8006f94:	4621      	mov	r1, r4
 8006f96:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	028a      	lsls	r2, r1, #10
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006faa:	647a      	str	r2, [r7, #68]	@ 0x44
 8006fac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006fb0:	f7f9 fe04 	bl	8000bbc <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006fbe:	4b60      	ldr	r3, [pc, #384]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	f003 0303 	and.w	r3, r3, #3
 8006fc8:	3301      	adds	r3, #1
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8006fd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fdc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006fe0:	e0a6      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fe2:	4b57      	ldr	r3, [pc, #348]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fee:	4b54      	ldr	r3, [pc, #336]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02a      	beq.n	8007050 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffa:	4b51      	ldr	r3, [pc, #324]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	099b      	lsrs	r3, r3, #6
 8007000:	2200      	movs	r2, #0
 8007002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007004:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800700c:	2100      	movs	r1, #0
 800700e:	4b4e      	ldr	r3, [pc, #312]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x350>)
 8007010:	fb03 f201 	mul.w	r2, r3, r1
 8007014:	2300      	movs	r3, #0
 8007016:	fb00 f303 	mul.w	r3, r0, r3
 800701a:	4413      	add	r3, r2
 800701c:	4a4a      	ldr	r2, [pc, #296]	@ (8007148 <HAL_RCC_GetSysClockFreq+0x350>)
 800701e:	fba0 1202 	umull	r1, r2, r0, r2
 8007022:	677a      	str	r2, [r7, #116]	@ 0x74
 8007024:	460a      	mov	r2, r1
 8007026:	673a      	str	r2, [r7, #112]	@ 0x70
 8007028:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800702a:	4413      	add	r3, r2
 800702c:	677b      	str	r3, [r7, #116]	@ 0x74
 800702e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007032:	2200      	movs	r2, #0
 8007034:	633b      	str	r3, [r7, #48]	@ 0x30
 8007036:	637a      	str	r2, [r7, #52]	@ 0x34
 8007038:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800703c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8007040:	f7f9 fdbc 	bl	8000bbc <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4613      	mov	r3, r2
 800704a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800704e:	e05b      	b.n	8007108 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007050:	4b3b      	ldr	r3, [pc, #236]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	099b      	lsrs	r3, r3, #6
 8007056:	2200      	movs	r2, #0
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800705a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	623b      	str	r3, [r7, #32]
 8007064:	2300      	movs	r3, #0
 8007066:	627b      	str	r3, [r7, #36]	@ 0x24
 8007068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	f04f 0000 	mov.w	r0, #0
 8007074:	f04f 0100 	mov.w	r1, #0
 8007078:	0159      	lsls	r1, r3, #5
 800707a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800707e:	0150      	lsls	r0, r2, #5
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	4641      	mov	r1, r8
 8007086:	ebb2 0a01 	subs.w	sl, r2, r1
 800708a:	4649      	mov	r1, r9
 800708c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800709c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070a4:	ebb2 040a 	subs.w	r4, r2, sl
 80070a8:	eb63 050b 	sbc.w	r5, r3, fp
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	00eb      	lsls	r3, r5, #3
 80070b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070ba:	00e2      	lsls	r2, r4, #3
 80070bc:	4614      	mov	r4, r2
 80070be:	461d      	mov	r5, r3
 80070c0:	4643      	mov	r3, r8
 80070c2:	18e3      	adds	r3, r4, r3
 80070c4:	603b      	str	r3, [r7, #0]
 80070c6:	464b      	mov	r3, r9
 80070c8:	eb45 0303 	adc.w	r3, r5, r3
 80070cc:	607b      	str	r3, [r7, #4]
 80070ce:	f04f 0200 	mov.w	r2, #0
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070da:	4629      	mov	r1, r5
 80070dc:	028b      	lsls	r3, r1, #10
 80070de:	4621      	mov	r1, r4
 80070e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070e4:	4621      	mov	r1, r4
 80070e6:	028a      	lsls	r2, r1, #10
 80070e8:	4610      	mov	r0, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f0:	2200      	movs	r2, #0
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	61fa      	str	r2, [r7, #28]
 80070f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070fa:	f7f9 fd5f 	bl	8000bbc <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4613      	mov	r3, r2
 8007104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007108:	4b0d      	ldr	r3, [pc, #52]	@ (8007140 <HAL_RCC_GetSysClockFreq+0x348>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	0f1b      	lsrs	r3, r3, #28
 800710e:	f003 0307 	and.w	r3, r3, #7
 8007112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8007116:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800711a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007126:	e003      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <HAL_RCC_GetSysClockFreq+0x34c>)
 800712a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800712e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007130:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8007134:	4618      	mov	r0, r3
 8007136:	3798      	adds	r7, #152	@ 0x98
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	00f42400 	.word	0x00f42400
 8007148:	017d7840 	.word	0x017d7840

0800714c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e28d      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8083 	beq.w	8007272 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800716c:	4b94      	ldr	r3, [pc, #592]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 030c 	and.w	r3, r3, #12
 8007174:	2b04      	cmp	r3, #4
 8007176:	d019      	beq.n	80071ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007178:	4b91      	ldr	r3, [pc, #580]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 030c 	and.w	r3, r3, #12
        || \
 8007180:	2b08      	cmp	r3, #8
 8007182:	d106      	bne.n	8007192 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007184:	4b8e      	ldr	r3, [pc, #568]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800718c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007190:	d00c      	beq.n	80071ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007192:	4b8b      	ldr	r3, [pc, #556]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800719a:	2b0c      	cmp	r3, #12
 800719c:	d112      	bne.n	80071c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800719e:	4b88      	ldr	r3, [pc, #544]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071aa:	d10b      	bne.n	80071c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ac:	4b84      	ldr	r3, [pc, #528]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d05b      	beq.n	8007270 <HAL_RCC_OscConfig+0x124>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d157      	bne.n	8007270 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e25a      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071cc:	d106      	bne.n	80071dc <HAL_RCC_OscConfig+0x90>
 80071ce:	4b7c      	ldr	r3, [pc, #496]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a7b      	ldr	r2, [pc, #492]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	e01d      	b.n	8007218 <HAL_RCC_OscConfig+0xcc>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e4:	d10c      	bne.n	8007200 <HAL_RCC_OscConfig+0xb4>
 80071e6:	4b76      	ldr	r3, [pc, #472]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a75      	ldr	r2, [pc, #468]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	4b73      	ldr	r3, [pc, #460]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a72      	ldr	r2, [pc, #456]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80071f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	e00b      	b.n	8007218 <HAL_RCC_OscConfig+0xcc>
 8007200:	4b6f      	ldr	r3, [pc, #444]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a6e      	ldr	r2, [pc, #440]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	4b6c      	ldr	r3, [pc, #432]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a6b      	ldr	r2, [pc, #428]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d013      	beq.n	8007248 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fd f892 	bl	8004348 <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007228:	f7fd f88e 	bl	8004348 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b64      	cmp	r3, #100	@ 0x64
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e21f      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723a:	4b61      	ldr	r3, [pc, #388]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0xdc>
 8007246:	e014      	b.n	8007272 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007248:	f7fd f87e 	bl	8004348 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007250:	f7fd f87a 	bl	8004348 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	@ 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e20b      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007262:	4b57      	ldr	r3, [pc, #348]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x104>
 800726e:	e000      	b.n	8007272 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d06f      	beq.n	800735e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800727e:	4b50      	ldr	r3, [pc, #320]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 030c 	and.w	r3, r3, #12
 8007286:	2b00      	cmp	r3, #0
 8007288:	d017      	beq.n	80072ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800728a:	4b4d      	ldr	r3, [pc, #308]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007292:	2b08      	cmp	r3, #8
 8007294:	d105      	bne.n	80072a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007296:	4b4a      	ldr	r3, [pc, #296]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072a2:	4b47      	ldr	r3, [pc, #284]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80072aa:	2b0c      	cmp	r3, #12
 80072ac:	d11c      	bne.n	80072e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ae:	4b44      	ldr	r3, [pc, #272]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ba:	4b41      	ldr	r3, [pc, #260]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_RCC_OscConfig+0x186>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d001      	beq.n	80072d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e1d3      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d2:	4b3b      	ldr	r3, [pc, #236]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4937      	ldr	r1, [pc, #220]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e6:	e03a      	b.n	800735e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d020      	beq.n	8007332 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072f0:	4b34      	ldr	r3, [pc, #208]	@ (80073c4 <HAL_RCC_OscConfig+0x278>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fd f827 	bl	8004348 <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072fe:	f7fd f823 	bl	8004348 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1b4      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007310:	4b2b      	ldr	r3, [pc, #172]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731c:	4b28      	ldr	r3, [pc, #160]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	4925      	ldr	r1, [pc, #148]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
 8007330:	e015      	b.n	800735e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007332:	4b24      	ldr	r3, [pc, #144]	@ (80073c4 <HAL_RCC_OscConfig+0x278>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fd f806 	bl	8004348 <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007340:	f7fd f802 	bl	8004348 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e193      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007352:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f0      	bne.n	8007340 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d036      	beq.n	80073d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007372:	4b15      	ldr	r3, [pc, #84]	@ (80073c8 <HAL_RCC_OscConfig+0x27c>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007378:	f7fc ffe6 	bl	8004348 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007380:	f7fc ffe2 	bl	8004348 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e173      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007392:	4b0b      	ldr	r3, [pc, #44]	@ (80073c0 <HAL_RCC_OscConfig+0x274>)
 8007394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x234>
 800739e:	e01b      	b.n	80073d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a0:	4b09      	ldr	r3, [pc, #36]	@ (80073c8 <HAL_RCC_OscConfig+0x27c>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a6:	f7fc ffcf 	bl	8004348 <HAL_GetTick>
 80073aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ac:	e00e      	b.n	80073cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073ae:	f7fc ffcb 	bl	8004348 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d907      	bls.n	80073cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e15c      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
 80073c0:	40023800 	.word	0x40023800
 80073c4:	42470000 	.word	0x42470000
 80073c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073cc:	4b8a      	ldr	r3, [pc, #552]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80073ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ea      	bne.n	80073ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8097 	beq.w	8007514 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ea:	4b83      	ldr	r3, [pc, #524]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	4b7f      	ldr	r3, [pc, #508]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	4a7e      	ldr	r2, [pc, #504]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007404:	6413      	str	r3, [r2, #64]	@ 0x40
 8007406:	4b7c      	ldr	r3, [pc, #496]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800740e:	60bb      	str	r3, [r7, #8]
 8007410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007416:	4b79      	ldr	r3, [pc, #484]	@ (80075fc <HAL_RCC_OscConfig+0x4b0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d118      	bne.n	8007454 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007422:	4b76      	ldr	r3, [pc, #472]	@ (80075fc <HAL_RCC_OscConfig+0x4b0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a75      	ldr	r2, [pc, #468]	@ (80075fc <HAL_RCC_OscConfig+0x4b0>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800742e:	f7fc ff8b 	bl	8004348 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007436:	f7fc ff87 	bl	8004348 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e118      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007448:	4b6c      	ldr	r3, [pc, #432]	@ (80075fc <HAL_RCC_OscConfig+0x4b0>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d106      	bne.n	800746a <HAL_RCC_OscConfig+0x31e>
 800745c:	4b66      	ldr	r3, [pc, #408]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007460:	4a65      	ldr	r2, [pc, #404]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	@ 0x70
 8007468:	e01c      	b.n	80074a4 <HAL_RCC_OscConfig+0x358>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b05      	cmp	r3, #5
 8007470:	d10c      	bne.n	800748c <HAL_RCC_OscConfig+0x340>
 8007472:	4b61      	ldr	r3, [pc, #388]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007476:	4a60      	ldr	r2, [pc, #384]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007478:	f043 0304 	orr.w	r3, r3, #4
 800747c:	6713      	str	r3, [r2, #112]	@ 0x70
 800747e:	4b5e      	ldr	r3, [pc, #376]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007482:	4a5d      	ldr	r2, [pc, #372]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6713      	str	r3, [r2, #112]	@ 0x70
 800748a:	e00b      	b.n	80074a4 <HAL_RCC_OscConfig+0x358>
 800748c:	4b5a      	ldr	r3, [pc, #360]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007490:	4a59      	ldr	r2, [pc, #356]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	6713      	str	r3, [r2, #112]	@ 0x70
 8007498:	4b57      	ldr	r3, [pc, #348]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800749a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800749c:	4a56      	ldr	r2, [pc, #344]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800749e:	f023 0304 	bic.w	r3, r3, #4
 80074a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d015      	beq.n	80074d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ac:	f7fc ff4c 	bl	8004348 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b2:	e00a      	b.n	80074ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fc ff48 	bl	8004348 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e0d7      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ca:	4b4b      	ldr	r3, [pc, #300]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ee      	beq.n	80074b4 <HAL_RCC_OscConfig+0x368>
 80074d6:	e014      	b.n	8007502 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fc ff36 	bl	8004348 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fc ff32 	bl	8004348 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0c1      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f6:	4b40      	ldr	r3, [pc, #256]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1ee      	bne.n	80074e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d105      	bne.n	8007514 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007508:	4b3b      	ldr	r3, [pc, #236]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800750a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750c:	4a3a      	ldr	r2, [pc, #232]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800750e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80ad 	beq.w	8007678 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800751e:	4b36      	ldr	r3, [pc, #216]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 030c 	and.w	r3, r3, #12
 8007526:	2b08      	cmp	r3, #8
 8007528:	d060      	beq.n	80075ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d145      	bne.n	80075be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007532:	4b33      	ldr	r3, [pc, #204]	@ (8007600 <HAL_RCC_OscConfig+0x4b4>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007538:	f7fc ff06 	bl	8004348 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007540:	f7fc ff02 	bl	8004348 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e093      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	4b29      	ldr	r3, [pc, #164]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	3b01      	subs	r3, #1
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007580:	061b      	lsls	r3, r3, #24
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007588:	071b      	lsls	r3, r3, #28
 800758a:	491b      	ldr	r1, [pc, #108]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 800758c:	4313      	orrs	r3, r2
 800758e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007590:	4b1b      	ldr	r3, [pc, #108]	@ (8007600 <HAL_RCC_OscConfig+0x4b4>)
 8007592:	2201      	movs	r2, #1
 8007594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007596:	f7fc fed7 	bl	8004348 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800759e:	f7fc fed3 	bl	8004348 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e064      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075b0:	4b11      	ldr	r3, [pc, #68]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d0f0      	beq.n	800759e <HAL_RCC_OscConfig+0x452>
 80075bc:	e05c      	b.n	8007678 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075be:	4b10      	ldr	r3, [pc, #64]	@ (8007600 <HAL_RCC_OscConfig+0x4b4>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c4:	f7fc fec0 	bl	8004348 <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075ca:	e008      	b.n	80075de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075cc:	f7fc febc 	bl	8004348 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e04d      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075de:	4b06      	ldr	r3, [pc, #24]	@ (80075f8 <HAL_RCC_OscConfig+0x4ac>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <HAL_RCC_OscConfig+0x480>
 80075ea:	e045      	b.n	8007678 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d107      	bne.n	8007604 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e040      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
 80075f8:	40023800 	.word	0x40023800
 80075fc:	40007000 	.word	0x40007000
 8007600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007604:	4b1f      	ldr	r3, [pc, #124]	@ (8007684 <HAL_RCC_OscConfig+0x538>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d030      	beq.n	8007674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800761c:	429a      	cmp	r2, r3
 800761e:	d129      	bne.n	8007674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800762a:	429a      	cmp	r2, r3
 800762c:	d122      	bne.n	8007674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007634:	4013      	ands	r3, r2
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800763a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800763c:	4293      	cmp	r3, r2
 800763e:	d119      	bne.n	8007674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800764a:	085b      	lsrs	r3, r3, #1
 800764c:	3b01      	subs	r3, #1
 800764e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007650:	429a      	cmp	r2, r3
 8007652:	d10f      	bne.n	8007674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007660:	429a      	cmp	r2, r3
 8007662:	d107      	bne.n	8007674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007670:	429a      	cmp	r2, r3
 8007672:	d001      	beq.n	8007678 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	e000      	b.n	800767a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	40023800 	.word	0x40023800

08007688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e041      	b.n	800771e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fc faaa 	bl	8003c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3304      	adds	r3, #4
 80076c4:	4619      	mov	r1, r3
 80076c6:	4610      	mov	r0, r2
 80076c8:	f000 fd8c 	bl	80081e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
	...

08007728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	d001      	beq.n	8007740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e04e      	b.n	80077de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a23      	ldr	r2, [pc, #140]	@ (80077ec <HAL_TIM_Base_Start_IT+0xc4>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d022      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800776a:	d01d      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a1f      	ldr	r2, [pc, #124]	@ (80077f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d018      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a1e      	ldr	r2, [pc, #120]	@ (80077f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d013      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1c      	ldr	r2, [pc, #112]	@ (80077f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00e      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1b      	ldr	r2, [pc, #108]	@ (80077fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a19      	ldr	r2, [pc, #100]	@ (8007800 <HAL_TIM_Base_Start_IT+0xd8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIM_Base_Start_IT+0x80>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a18      	ldr	r2, [pc, #96]	@ (8007804 <HAL_TIM_Base_Start_IT+0xdc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d111      	bne.n	80077cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d010      	beq.n	80077dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f042 0201 	orr.w	r2, r2, #1
 80077c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ca:	e007      	b.n	80077dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40010400 	.word	0x40010400
 8007800:	40014000 	.word	0x40014000
 8007804:	40001800 	.word	0x40001800

08007808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e041      	b.n	800789e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fc fa12 	bl	8003c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 fccc 	bl	80081e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
	...

080078a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <HAL_TIM_PWM_Start+0x24>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	bf14      	ite	ne
 80078c4:	2301      	movne	r3, #1
 80078c6:	2300      	moveq	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e022      	b.n	8007912 <HAL_TIM_PWM_Start+0x6a>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d109      	bne.n	80078e6 <HAL_TIM_PWM_Start+0x3e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	bf14      	ite	ne
 80078de:	2301      	movne	r3, #1
 80078e0:	2300      	moveq	r3, #0
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	e015      	b.n	8007912 <HAL_TIM_PWM_Start+0x6a>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b08      	cmp	r3, #8
 80078ea:	d109      	bne.n	8007900 <HAL_TIM_PWM_Start+0x58>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	e008      	b.n	8007912 <HAL_TIM_PWM_Start+0x6a>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	bf14      	ite	ne
 800790c:	2301      	movne	r3, #1
 800790e:	2300      	moveq	r3, #0
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e07c      	b.n	8007a14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <HAL_TIM_PWM_Start+0x82>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007928:	e013      	b.n	8007952 <HAL_TIM_PWM_Start+0xaa>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b04      	cmp	r3, #4
 800792e:	d104      	bne.n	800793a <HAL_TIM_PWM_Start+0x92>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007938:	e00b      	b.n	8007952 <HAL_TIM_PWM_Start+0xaa>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b08      	cmp	r3, #8
 800793e:	d104      	bne.n	800794a <HAL_TIM_PWM_Start+0xa2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007948:	e003      	b.n	8007952 <HAL_TIM_PWM_Start+0xaa>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2202      	movs	r2, #2
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2201      	movs	r2, #1
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 ff32 	bl	80087c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a2d      	ldr	r2, [pc, #180]	@ (8007a1c <HAL_TIM_PWM_Start+0x174>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_TIM_PWM_Start+0xcc>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a20 <HAL_TIM_PWM_Start+0x178>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d101      	bne.n	8007978 <HAL_TIM_PWM_Start+0xd0>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <HAL_TIM_PWM_Start+0xd2>
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d007      	beq.n	800798e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800798c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a22      	ldr	r2, [pc, #136]	@ (8007a1c <HAL_TIM_PWM_Start+0x174>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d022      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a0:	d01d      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a1f      	ldr	r2, [pc, #124]	@ (8007a24 <HAL_TIM_PWM_Start+0x17c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d018      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <HAL_TIM_PWM_Start+0x180>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d013      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1c      	ldr	r2, [pc, #112]	@ (8007a2c <HAL_TIM_PWM_Start+0x184>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a16      	ldr	r2, [pc, #88]	@ (8007a20 <HAL_TIM_PWM_Start+0x178>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d009      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a18      	ldr	r2, [pc, #96]	@ (8007a30 <HAL_TIM_PWM_Start+0x188>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <HAL_TIM_PWM_Start+0x136>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a16      	ldr	r2, [pc, #88]	@ (8007a34 <HAL_TIM_PWM_Start+0x18c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d111      	bne.n	8007a02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d010      	beq.n	8007a12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0201 	orr.w	r2, r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a00:	e007      	b.n	8007a12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f042 0201 	orr.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40010400 	.word	0x40010400
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40000800 	.word	0x40000800
 8007a2c:	40000c00 	.word	0x40000c00
 8007a30:	40014000 	.word	0x40014000
 8007a34:	40001800 	.word	0x40001800

08007a38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e097      	b.n	8007b7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7fb ffed 	bl	8003a40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6812      	ldr	r2, [r2, #0]
 8007a78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a7c:	f023 0307 	bic.w	r3, r3, #7
 8007a80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f000 fba9 	bl	80081e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aba:	f023 0303 	bic.w	r3, r3, #3
 8007abe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	021b      	lsls	r3, r3, #8
 8007aca:	4313      	orrs	r3, r2
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007ad8:	f023 030c 	bic.w	r3, r3, #12
 8007adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ae4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	4313      	orrs	r3, r2
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	011a      	lsls	r2, r3, #4
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	031b      	lsls	r3, r3, #12
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007b1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ba4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d110      	bne.n	8007bd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d102      	bne.n	8007bc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bba:	7b7b      	ldrb	r3, [r7, #13]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d001      	beq.n	8007bc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e069      	b.n	8007c98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd4:	e031      	b.n	8007c3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d110      	bne.n	8007bfe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d102      	bne.n	8007be8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007be2:	7b3b      	ldrb	r3, [r7, #12]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d001      	beq.n	8007bec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e055      	b.n	8007c98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007bfc:	e01d      	b.n	8007c3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d108      	bne.n	8007c16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d105      	bne.n	8007c16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c0a:	7b7b      	ldrb	r3, [r7, #13]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d102      	bne.n	8007c16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c10:	7b3b      	ldrb	r3, [r7, #12]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d001      	beq.n	8007c1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e03e      	b.n	8007c98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2202      	movs	r2, #2
 8007c36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <HAL_TIM_Encoder_Start+0xc4>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b04      	cmp	r3, #4
 8007c44:	d008      	beq.n	8007c58 <HAL_TIM_Encoder_Start+0xd4>
 8007c46:	e00f      	b.n	8007c68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	2100      	movs	r1, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fdb7 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007c56:	e016      	b.n	8007c86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	2104      	movs	r1, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fdaf 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007c66:	e00e      	b.n	8007c86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f000 fda7 	bl	80087c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	2104      	movs	r1, #4
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fda0 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007c84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0201 	orr.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d020      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01b      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0202 	mvn.w	r2, #2
 8007cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa5b 	bl	80081a6 <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fa4d 	bl	8008192 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa5e 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d020      	beq.n	8007d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01b      	beq.n	8007d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0204 	mvn.w	r2, #4
 8007d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2202      	movs	r2, #2
 8007d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa35 	bl	80081a6 <HAL_TIM_IC_CaptureCallback>
 8007d3c:	e005      	b.n	8007d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa27 	bl	8008192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa38 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d020      	beq.n	8007d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d01b      	beq.n	8007d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0208 	mvn.w	r2, #8
 8007d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2204      	movs	r2, #4
 8007d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	f003 0303 	and.w	r3, r3, #3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa0f 	bl	80081a6 <HAL_TIM_IC_CaptureCallback>
 8007d88:	e005      	b.n	8007d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa01 	bl	8008192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fa12 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d020      	beq.n	8007de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01b      	beq.n	8007de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f06f 0210 	mvn.w	r2, #16
 8007db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2208      	movs	r2, #8
 8007dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f9e9 	bl	80081a6 <HAL_TIM_IC_CaptureCallback>
 8007dd4:	e005      	b.n	8007de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f9db 	bl	8008192 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9ec 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00c      	beq.n	8007e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0201 	mvn.w	r2, #1
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fc f9fe 	bl	8004208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00c      	beq.n	8007e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d007      	beq.n	8007e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fdc8 	bl	80089c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00c      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d007      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f9bd 	bl	80081ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00c      	beq.n	8007e78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d007      	beq.n	8007e78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0220 	mvn.w	r2, #32
 8007e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fd9a 	bl	80089ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e78:	bf00      	nop
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e0ae      	b.n	8007ffc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b0c      	cmp	r3, #12
 8007eaa:	f200 809f 	bhi.w	8007fec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007eae:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ee9 	.word	0x08007ee9
 8007eb8:	08007fed 	.word	0x08007fed
 8007ebc:	08007fed 	.word	0x08007fed
 8007ec0:	08007fed 	.word	0x08007fed
 8007ec4:	08007f29 	.word	0x08007f29
 8007ec8:	08007fed 	.word	0x08007fed
 8007ecc:	08007fed 	.word	0x08007fed
 8007ed0:	08007fed 	.word	0x08007fed
 8007ed4:	08007f6b 	.word	0x08007f6b
 8007ed8:	08007fed 	.word	0x08007fed
 8007edc:	08007fed 	.word	0x08007fed
 8007ee0:	08007fed 	.word	0x08007fed
 8007ee4:	08007fab 	.word	0x08007fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fa1e 	bl	8008330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0208 	orr.w	r2, r2, #8
 8007f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0204 	bic.w	r2, r2, #4
 8007f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6999      	ldr	r1, [r3, #24]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	619a      	str	r2, [r3, #24]
      break;
 8007f26:	e064      	b.n	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 fa6e 	bl	8008410 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6999      	ldr	r1, [r3, #24]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	021a      	lsls	r2, r3, #8
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	619a      	str	r2, [r3, #24]
      break;
 8007f68:	e043      	b.n	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fac3 	bl	80084fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0208 	orr.w	r2, r2, #8
 8007f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 0204 	bic.w	r2, r2, #4
 8007f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69d9      	ldr	r1, [r3, #28]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	61da      	str	r2, [r3, #28]
      break;
 8007fa8:	e023      	b.n	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68b9      	ldr	r1, [r7, #8]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fb17 	bl	80085e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69da      	ldr	r2, [r3, #28]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69d9      	ldr	r1, [r3, #28]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	021a      	lsls	r2, r3, #8
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	61da      	str	r2, [r3, #28]
      break;
 8007fea:	e002      	b.n	8007ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]
      break;
 8007ff0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008018:	2b01      	cmp	r3, #1
 800801a:	d101      	bne.n	8008020 <HAL_TIM_ConfigClockSource+0x1c>
 800801c:	2302      	movs	r3, #2
 800801e:	e0b4      	b.n	800818a <HAL_TIM_ConfigClockSource+0x186>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800803e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008058:	d03e      	beq.n	80080d8 <HAL_TIM_ConfigClockSource+0xd4>
 800805a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800805e:	f200 8087 	bhi.w	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008066:	f000 8086 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x172>
 800806a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800806e:	d87f      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008070:	2b70      	cmp	r3, #112	@ 0x70
 8008072:	d01a      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0xa6>
 8008074:	2b70      	cmp	r3, #112	@ 0x70
 8008076:	d87b      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008078:	2b60      	cmp	r3, #96	@ 0x60
 800807a:	d050      	beq.n	800811e <HAL_TIM_ConfigClockSource+0x11a>
 800807c:	2b60      	cmp	r3, #96	@ 0x60
 800807e:	d877      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008080:	2b50      	cmp	r3, #80	@ 0x50
 8008082:	d03c      	beq.n	80080fe <HAL_TIM_ConfigClockSource+0xfa>
 8008084:	2b50      	cmp	r3, #80	@ 0x50
 8008086:	d873      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b40      	cmp	r3, #64	@ 0x40
 800808a:	d058      	beq.n	800813e <HAL_TIM_ConfigClockSource+0x13a>
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d86f      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b30      	cmp	r3, #48	@ 0x30
 8008092:	d064      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x15a>
 8008094:	2b30      	cmp	r3, #48	@ 0x30
 8008096:	d86b      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 8008098:	2b20      	cmp	r3, #32
 800809a:	d060      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x15a>
 800809c:	2b20      	cmp	r3, #32
 800809e:	d867      	bhi.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d05c      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x15a>
 80080a4:	2b10      	cmp	r3, #16
 80080a6:	d05a      	beq.n	800815e <HAL_TIM_ConfigClockSource+0x15a>
 80080a8:	e062      	b.n	8008170 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080ba:	f000 fb63 	bl	8008784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80080cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	609a      	str	r2, [r3, #8]
      break;
 80080d6:	e04f      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080e8:	f000 fb4c 	bl	8008784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689a      	ldr	r2, [r3, #8]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80080fa:	609a      	str	r2, [r3, #8]
      break;
 80080fc:	e03c      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800810a:	461a      	mov	r2, r3
 800810c:	f000 fac0 	bl	8008690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2150      	movs	r1, #80	@ 0x50
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fb19 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 800811c:	e02c      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800812a:	461a      	mov	r2, r3
 800812c:	f000 fadf 	bl	80086ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2160      	movs	r1, #96	@ 0x60
 8008136:	4618      	mov	r0, r3
 8008138:	f000 fb09 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 800813c:	e01c      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800814a:	461a      	mov	r2, r3
 800814c:	f000 faa0 	bl	8008690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2140      	movs	r1, #64	@ 0x40
 8008156:	4618      	mov	r0, r3
 8008158:	f000 faf9 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 800815c:	e00c      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4619      	mov	r1, r3
 8008168:	4610      	mov	r0, r2
 800816a:	f000 faf0 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 800816e:	e003      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	73fb      	strb	r3, [r7, #15]
      break;
 8008174:	e000      	b.n	8008178 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008188:	7bfb      	ldrb	r3, [r7, #15]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008192:	b480      	push	{r7}
 8008194:	b083      	sub	sp, #12
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr

080081a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a43      	ldr	r2, [pc, #268]	@ (8008304 <TIM_Base_SetConfig+0x120>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d013      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008202:	d00f      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a40      	ldr	r2, [pc, #256]	@ (8008308 <TIM_Base_SetConfig+0x124>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a3f      	ldr	r2, [pc, #252]	@ (800830c <TIM_Base_SetConfig+0x128>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d007      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a3e      	ldr	r2, [pc, #248]	@ (8008310 <TIM_Base_SetConfig+0x12c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d003      	beq.n	8008224 <TIM_Base_SetConfig+0x40>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a3d      	ldr	r2, [pc, #244]	@ (8008314 <TIM_Base_SetConfig+0x130>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d108      	bne.n	8008236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800822a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a32      	ldr	r2, [pc, #200]	@ (8008304 <TIM_Base_SetConfig+0x120>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d02b      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008244:	d027      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a2f      	ldr	r2, [pc, #188]	@ (8008308 <TIM_Base_SetConfig+0x124>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d023      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2e      	ldr	r2, [pc, #184]	@ (800830c <TIM_Base_SetConfig+0x128>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01f      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a2d      	ldr	r2, [pc, #180]	@ (8008310 <TIM_Base_SetConfig+0x12c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d01b      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a2c      	ldr	r2, [pc, #176]	@ (8008314 <TIM_Base_SetConfig+0x130>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d017      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a2b      	ldr	r2, [pc, #172]	@ (8008318 <TIM_Base_SetConfig+0x134>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d013      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2a      	ldr	r2, [pc, #168]	@ (800831c <TIM_Base_SetConfig+0x138>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d00f      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a29      	ldr	r2, [pc, #164]	@ (8008320 <TIM_Base_SetConfig+0x13c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00b      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a28      	ldr	r2, [pc, #160]	@ (8008324 <TIM_Base_SetConfig+0x140>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d007      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a27      	ldr	r2, [pc, #156]	@ (8008328 <TIM_Base_SetConfig+0x144>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d003      	beq.n	8008296 <TIM_Base_SetConfig+0xb2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a26      	ldr	r2, [pc, #152]	@ (800832c <TIM_Base_SetConfig+0x148>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d108      	bne.n	80082a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800829c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	689a      	ldr	r2, [r3, #8]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <TIM_Base_SetConfig+0x120>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_Base_SetConfig+0xf2>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a10      	ldr	r2, [pc, #64]	@ (8008314 <TIM_Base_SetConfig+0x130>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d103      	bne.n	80082de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	691a      	ldr	r2, [r3, #16]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	40010000 	.word	0x40010000
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00
 8008314:	40010400 	.word	0x40010400
 8008318:	40014000 	.word	0x40014000
 800831c:	40014400 	.word	0x40014400
 8008320:	40014800 	.word	0x40014800
 8008324:	40001800 	.word	0x40001800
 8008328:	40001c00 	.word	0x40001c00
 800832c:	40002000 	.word	0x40002000

08008330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008330:	b480      	push	{r7}
 8008332:	b087      	sub	sp, #28
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a1b      	ldr	r3, [r3, #32]
 8008344:	f023 0201 	bic.w	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800835e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0303 	bic.w	r3, r3, #3
 8008366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f023 0302 	bic.w	r3, r3, #2
 8008378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4313      	orrs	r3, r2
 8008382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a20      	ldr	r2, [pc, #128]	@ (8008408 <TIM_OC1_SetConfig+0xd8>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d003      	beq.n	8008394 <TIM_OC1_SetConfig+0x64>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a1f      	ldr	r2, [pc, #124]	@ (800840c <TIM_OC1_SetConfig+0xdc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10c      	bne.n	80083ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	f023 0308 	bic.w	r3, r3, #8
 800839a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f023 0304 	bic.w	r3, r3, #4
 80083ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a15      	ldr	r2, [pc, #84]	@ (8008408 <TIM_OC1_SetConfig+0xd8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d003      	beq.n	80083be <TIM_OC1_SetConfig+0x8e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a14      	ldr	r2, [pc, #80]	@ (800840c <TIM_OC1_SetConfig+0xdc>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d111      	bne.n	80083e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	621a      	str	r2, [r3, #32]
}
 80083fc:	bf00      	nop
 80083fe:	371c      	adds	r7, #28
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr
 8008408:	40010000 	.word	0x40010000
 800840c:	40010400 	.word	0x40010400

08008410 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	f023 0210 	bic.w	r2, r3, #16
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f023 0320 	bic.w	r3, r3, #32
 800845a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a22      	ldr	r2, [pc, #136]	@ (80084f4 <TIM_OC2_SetConfig+0xe4>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d003      	beq.n	8008478 <TIM_OC2_SetConfig+0x68>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a21      	ldr	r2, [pc, #132]	@ (80084f8 <TIM_OC2_SetConfig+0xe8>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d10d      	bne.n	8008494 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800847e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4313      	orrs	r3, r2
 800848a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008492:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a17      	ldr	r2, [pc, #92]	@ (80084f4 <TIM_OC2_SetConfig+0xe4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d003      	beq.n	80084a4 <TIM_OC2_SetConfig+0x94>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a16      	ldr	r2, [pc, #88]	@ (80084f8 <TIM_OC2_SetConfig+0xe8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d113      	bne.n	80084cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	621a      	str	r2, [r3, #32]
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40010000 	.word	0x40010000
 80084f8:	40010400 	.word	0x40010400

080084fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	021b      	lsls	r3, r3, #8
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	4313      	orrs	r3, r2
 8008550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a21      	ldr	r2, [pc, #132]	@ (80085dc <TIM_OC3_SetConfig+0xe0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d003      	beq.n	8008562 <TIM_OC3_SetConfig+0x66>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a20      	ldr	r2, [pc, #128]	@ (80085e0 <TIM_OC3_SetConfig+0xe4>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d10d      	bne.n	800857e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008568:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800857c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a16      	ldr	r2, [pc, #88]	@ (80085dc <TIM_OC3_SetConfig+0xe0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d003      	beq.n	800858e <TIM_OC3_SetConfig+0x92>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a15      	ldr	r2, [pc, #84]	@ (80085e0 <TIM_OC3_SetConfig+0xe4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d113      	bne.n	80085b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800859c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	693a      	ldr	r2, [r7, #16]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	621a      	str	r2, [r3, #32]
}
 80085d0:	bf00      	nop
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40010400 	.word	0x40010400

080085e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800861a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4313      	orrs	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800862e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	031b      	lsls	r3, r3, #12
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a12      	ldr	r2, [pc, #72]	@ (8008688 <TIM_OC4_SetConfig+0xa4>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_OC4_SetConfig+0x68>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a11      	ldr	r2, [pc, #68]	@ (800868c <TIM_OC4_SetConfig+0xa8>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d109      	bne.n	8008660 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008652:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	695b      	ldr	r3, [r3, #20]
 8008658:	019b      	lsls	r3, r3, #6
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4313      	orrs	r3, r2
 800865e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	621a      	str	r2, [r3, #32]
}
 800867a:	bf00      	nop
 800867c:	371c      	adds	r7, #28
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	40010000 	.word	0x40010000
 800868c:	40010400 	.word	0x40010400

08008690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	f023 0201 	bic.w	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	011b      	lsls	r3, r3, #4
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f023 030a 	bic.w	r3, r3, #10
 80086cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	621a      	str	r2, [r3, #32]
}
 80086e2:	bf00      	nop
 80086e4:	371c      	adds	r7, #28
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b087      	sub	sp, #28
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	f023 0210 	bic.w	r2, r3, #16
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	031b      	lsls	r3, r3, #12
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800872a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	621a      	str	r2, [r3, #32]
}
 8008742:	bf00      	nop
 8008744:	371c      	adds	r7, #28
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	f043 0307 	orr.w	r3, r3, #7
 8008770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	609a      	str	r2, [r3, #8]
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800879e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	021a      	lsls	r2, r3, #8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	609a      	str	r2, [r3, #8]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2201      	movs	r2, #1
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1a      	ldr	r2, [r3, #32]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	43db      	mvns	r3, r3
 80087e6:	401a      	ands	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a1a      	ldr	r2, [r3, #32]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	fa01 f303 	lsl.w	r3, r1, r3
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	621a      	str	r2, [r3, #32]
}
 8008802:	bf00      	nop
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008824:	2302      	movs	r3, #2
 8008826:	e05a      	b.n	80088de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a21      	ldr	r2, [pc, #132]	@ (80088ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d022      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008874:	d01d      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1d      	ldr	r2, [pc, #116]	@ (80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d018      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1b      	ldr	r2, [pc, #108]	@ (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d013      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a1a      	ldr	r2, [pc, #104]	@ (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d00e      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a18      	ldr	r2, [pc, #96]	@ (80088fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d009      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a17      	ldr	r2, [pc, #92]	@ (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d004      	beq.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a15      	ldr	r2, [pc, #84]	@ (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d10c      	bne.n	80088cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3714      	adds	r7, #20
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40010400 	.word	0x40010400
 8008900:	40014000 	.word	0x40014000
 8008904:	40001800 	.word	0x40001800

08008908 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008920:	2302      	movs	r3, #2
 8008922:	e03d      	b.n	80089a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	4313      	orrs	r3, r2
 8008946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4313      	orrs	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	69db      	ldr	r3, [r3, #28]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e042      	b.n	8008a6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d106      	bne.n	8008a00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fb f988 	bl	8003d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2224      	movs	r2, #36	@ 0x24
 8008a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fff5 	bl	8009a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	691a      	ldr	r2, [r3, #16]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695a      	ldr	r2, [r3, #20]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68da      	ldr	r2, [r3, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2220      	movs	r2, #32
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08c      	sub	sp, #48	@ 0x30
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d162      	bne.n	8008b54 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <HAL_UART_Transmit_DMA+0x26>
 8008a94:	88fb      	ldrh	r3, [r7, #6]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e05b      	b.n	8008b56 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	88fa      	ldrh	r2, [r7, #6]
 8008aa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2221      	movs	r2, #33	@ 0x21
 8008aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ac2:	4a27      	ldr	r2, [pc, #156]	@ (8008b60 <HAL_UART_Transmit_DMA+0xec>)
 8008ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aca:	4a26      	ldr	r2, [pc, #152]	@ (8008b64 <HAL_UART_Transmit_DMA+0xf0>)
 8008acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad2:	4a25      	ldr	r2, [pc, #148]	@ (8008b68 <HAL_UART_Transmit_DMA+0xf4>)
 8008ad4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ada:	2200      	movs	r2, #0
 8008adc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	6819      	ldr	r1, [r3, #0]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3304      	adds	r3, #4
 8008af2:	461a      	mov	r2, r3
 8008af4:	88fb      	ldrh	r3, [r7, #6]
 8008af6:	f7fc f9e9 	bl	8004ecc <HAL_DMA_Start_IT>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2210      	movs	r2, #16
 8008b04:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e021      	b.n	8008b56 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b1a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3314      	adds	r3, #20
 8008b22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3314      	adds	r3, #20
 8008b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6a39      	ldr	r1, [r7, #32]
 8008b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e5      	bne.n	8008b1c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
  }
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3730      	adds	r7, #48	@ 0x30
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	08009285 	.word	0x08009285
 8008b64:	0800931f 	.word	0x0800931f
 8008b68:	080094a3 	.word	0x080094a3

08008b6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b20      	cmp	r3, #32
 8008b84:	d112      	bne.n	8008bac <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <HAL_UART_Receive_DMA+0x26>
 8008b8c:	88fb      	ldrh	r3, [r7, #6]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e00b      	b.n	8008bae <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b9c:	88fb      	ldrh	r3, [r7, #6]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fcc8 	bl	8009538 <UART_Start_Receive_DMA>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	e000      	b.n	8008bae <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b090      	sub	sp, #64	@ 0x40
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bcc:	2b80      	cmp	r3, #128	@ 0x80
 8008bce:	bf0c      	ite	eq
 8008bd0:	2301      	moveq	r3, #1
 8008bd2:	2300      	movne	r3, #0
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b21      	cmp	r3, #33	@ 0x21
 8008be2:	d128      	bne.n	8008c36 <HAL_UART_DMAStop+0x80>
 8008be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d025      	beq.n	8008c36 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e5      	bne.n	8008bea <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d004      	beq.n	8008c30 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fc f9a6 	bl	8004f7c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fd27 	bl	8009684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c40:	2b40      	cmp	r3, #64	@ 0x40
 8008c42:	bf0c      	ite	eq
 8008c44:	2301      	moveq	r3, #1
 8008c46:	2300      	movne	r3, #0
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b22      	cmp	r3, #34	@ 0x22
 8008c56:	d128      	bne.n	8008caa <HAL_UART_DMAStop+0xf4>
 8008c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d025      	beq.n	8008caa <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3314      	adds	r3, #20
 8008c64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3314      	adds	r3, #20
 8008c7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c7e:	61fa      	str	r2, [r7, #28]
 8008c80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	69b9      	ldr	r1, [r7, #24]
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e5      	bne.n	8008c5e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d004      	beq.n	8008ca4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fc f96c 	bl	8004f7c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fd15 	bl	80096d4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3740      	adds	r7, #64	@ 0x40
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b0ba      	sub	sp, #232	@ 0xe8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10f      	bne.n	8008d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d009      	beq.n	8008d1a <HAL_UART_IRQHandler+0x66>
 8008d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fdba 	bl	800988c <UART_Receive_IT>
      return;
 8008d18:	e273      	b.n	8009202 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80de 	beq.w	8008ee0 <HAL_UART_IRQHandler+0x22c>
 8008d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d106      	bne.n	8008d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80d1 	beq.w	8008ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <HAL_UART_IRQHandler+0xae>
 8008d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5a:	f043 0201 	orr.w	r2, r3, #1
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d66:	f003 0304 	and.w	r3, r3, #4
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00b      	beq.n	8008d86 <HAL_UART_IRQHandler+0xd2>
 8008d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7e:	f043 0202 	orr.w	r2, r3, #2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <HAL_UART_IRQHandler+0xf6>
 8008d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d96:	f003 0301 	and.w	r3, r3, #1
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d005      	beq.n	8008daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008da2:	f043 0204 	orr.w	r2, r3, #4
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dae:	f003 0308 	and.w	r3, r3, #8
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d011      	beq.n	8008dda <HAL_UART_IRQHandler+0x126>
 8008db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d105      	bne.n	8008dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d005      	beq.n	8008dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd2:	f043 0208 	orr.w	r2, r3, #8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 820a 	beq.w	80091f8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d008      	beq.n	8008e02 <HAL_UART_IRQHandler+0x14e>
 8008df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fd45 	bl	800988c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e0c:	2b40      	cmp	r3, #64	@ 0x40
 8008e0e:	bf0c      	ite	eq
 8008e10:	2301      	moveq	r3, #1
 8008e12:	2300      	movne	r3, #0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <HAL_UART_IRQHandler+0x17a>
 8008e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d04f      	beq.n	8008ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc50 	bl	80096d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3e:	2b40      	cmp	r3, #64	@ 0x40
 8008e40:	d141      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3314      	adds	r3, #20
 8008e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3314      	adds	r3, #20
 8008e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1d9      	bne.n	8008e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d013      	beq.n	8008ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e9a:	4a8a      	ldr	r2, [pc, #552]	@ (80090c4 <HAL_UART_IRQHandler+0x410>)
 8008e9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7fc f8da 	bl	800505c <HAL_DMA_Abort_IT>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d016      	beq.n	8008edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ebc:	e00e      	b.n	8008edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 f9ca 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec4:	e00a      	b.n	8008edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f9c6 	bl	8009258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ecc:	e006      	b.n	8008edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9c2 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008eda:	e18d      	b.n	80091f8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008edc:	bf00      	nop
    return;
 8008ede:	e18b      	b.n	80091f8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	f040 8167 	bne.w	80091b8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eee:	f003 0310 	and.w	r3, r3, #16
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8160 	beq.w	80091b8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efc:	f003 0310 	and.w	r3, r3, #16
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8159 	beq.w	80091b8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f06:	2300      	movs	r3, #0
 8008f08:	60bb      	str	r3, [r7, #8]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	60bb      	str	r3, [r7, #8]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	60bb      	str	r3, [r7, #8]
 8008f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f26:	2b40      	cmp	r3, #64	@ 0x40
 8008f28:	f040 80ce 	bne.w	80090c8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 80a9 	beq.w	8009094 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	f080 80a2 	bcs.w	8009094 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f62:	f000 8088 	beq.w	8009076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	330c      	adds	r3, #12
 8008f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008f92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1d9      	bne.n	8008f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fc4:	f023 0301 	bic.w	r3, r3, #1
 8008fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3314      	adds	r3, #20
 8008fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e1      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3314      	adds	r3, #20
 800900e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009012:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009014:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e3      	bne.n	8008fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009046:	f023 0310 	bic.w	r3, r3, #16
 800904a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	330c      	adds	r3, #12
 8009054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009058:	65ba      	str	r2, [r7, #88]	@ 0x58
 800905a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800905e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e3      	bne.n	8009034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009070:	4618      	mov	r0, r3
 8009072:	f7fb ff83 	bl	8004f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2202      	movs	r2, #2
 800907a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009084:	b29b      	uxth	r3, r3
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	b29b      	uxth	r3, r3
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f8ed 	bl	800926c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009092:	e0b3      	b.n	80091fc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009098:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800909c:	429a      	cmp	r2, r3
 800909e:	f040 80ad 	bne.w	80091fc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a6:	69db      	ldr	r3, [r3, #28]
 80090a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ac:	f040 80a6 	bne.w	80091fc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f8d5 	bl	800926c <HAL_UARTEx_RxEventCallback>
      return;
 80090c2:	e09b      	b.n	80091fc <HAL_UART_IRQHandler+0x548>
 80090c4:	0800979b 	.word	0x0800979b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090dc:	b29b      	uxth	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 808e 	beq.w	8009200 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80090e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 8089 	beq.w	8009200 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	330c      	adds	r3, #12
 80090f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009104:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	330c      	adds	r3, #12
 800910e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009112:	647a      	str	r2, [r7, #68]	@ 0x44
 8009114:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009116:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009118:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800911a:	e841 2300 	strex	r3, r2, [r1]
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1e3      	bne.n	80090ee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	623b      	str	r3, [r7, #32]
   return(result);
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3314      	adds	r3, #20
 8009146:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800914a:	633a      	str	r2, [r7, #48]	@ 0x30
 800914c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e3      	bne.n	8009126 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	e853 3f00 	ldrex	r3, [r3]
 800917a:	60fb      	str	r3, [r7, #12]
   return(result);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0310 	bic.w	r3, r3, #16
 8009182:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009190:	61fa      	str	r2, [r7, #28]
 8009192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	69b9      	ldr	r1, [r7, #24]
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	617b      	str	r3, [r7, #20]
   return(result);
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e3      	bne.n	800916c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f85b 	bl	800926c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091b6:	e023      	b.n	8009200 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <HAL_UART_IRQHandler+0x524>
 80091c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d003      	beq.n	80091d8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 faf3 	bl	80097bc <UART_Transmit_IT>
    return;
 80091d6:	e014      	b.n	8009202 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80091d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00e      	beq.n	8009202 <HAL_UART_IRQHandler+0x54e>
 80091e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d008      	beq.n	8009202 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fb33 	bl	800985c <UART_EndTransmit_IT>
    return;
 80091f6:	e004      	b.n	8009202 <HAL_UART_IRQHandler+0x54e>
    return;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <HAL_UART_IRQHandler+0x54e>
      return;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <HAL_UART_IRQHandler+0x54e>
      return;
 8009200:	bf00      	nop
  }
}
 8009202:	37e8      	adds	r7, #232	@ 0xe8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b090      	sub	sp, #64	@ 0x40
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800929c:	2b00      	cmp	r3, #0
 800929e:	d137      	bne.n	8009310 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80092a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a2:	2200      	movs	r2, #0
 80092a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3314      	adds	r3, #20
 80092ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	623b      	str	r3, [r7, #32]
   return(result);
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	3314      	adds	r3, #20
 80092c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80092c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e5      	bne.n	80092a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092fa:	61fa      	str	r2, [r7, #28]
 80092fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	69b9      	ldr	r1, [r7, #24]
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	617b      	str	r3, [r7, #20]
   return(result);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e5      	bne.n	80092da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800930e:	e002      	b.n	8009316 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009310:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009312:	f7ff ff79 	bl	8009208 <HAL_UART_TxCpltCallback>
}
 8009316:	bf00      	nop
 8009318:	3740      	adds	r7, #64	@ 0x40
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff ff75 	bl	800921c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009332:	bf00      	nop
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b09c      	sub	sp, #112	@ 0x70
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009346:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009352:	2b00      	cmp	r3, #0
 8009354:	d172      	bne.n	800943c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009358:	2200      	movs	r2, #0
 800935a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800935c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	330c      	adds	r3, #12
 8009362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800936c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800936e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009372:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	330c      	adds	r3, #12
 800937a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800937c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800937e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800938a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e5      	bne.n	800935c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3314      	adds	r3, #20
 8009396:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a2:	f023 0301 	bic.w	r3, r3, #1
 80093a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80093a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3314      	adds	r3, #20
 80093ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80093b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e5      	bne.n	8009390 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3314      	adds	r3, #20
 80093ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	623b      	str	r3, [r7, #32]
   return(result);
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093da:	663b      	str	r3, [r7, #96]	@ 0x60
 80093dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3314      	adds	r3, #20
 80093e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80093e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80093e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e5      	bne.n	80093c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80093f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093fa:	2220      	movs	r2, #32
 80093fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009404:	2b01      	cmp	r3, #1
 8009406:	d119      	bne.n	800943c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	330c      	adds	r3, #12
 800940e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	60fb      	str	r3, [r7, #12]
   return(result);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 0310 	bic.w	r3, r3, #16
 800941e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	330c      	adds	r3, #12
 8009426:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009428:	61fa      	str	r2, [r7, #28]
 800942a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	69b9      	ldr	r1, [r7, #24]
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	617b      	str	r3, [r7, #20]
   return(result);
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e5      	bne.n	8009408 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800943c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800943e:	2200      	movs	r2, #0
 8009440:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009446:	2b01      	cmp	r3, #1
 8009448:	d106      	bne.n	8009458 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800944a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800944c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800944e:	4619      	mov	r1, r3
 8009450:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009452:	f7ff ff0b 	bl	800926c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009456:	e002      	b.n	800945e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009458:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800945a:	f7ff fee9 	bl	8009230 <HAL_UART_RxCpltCallback>
}
 800945e:	bf00      	nop
 8009460:	3770      	adds	r7, #112	@ 0x70
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009472:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947e:	2b01      	cmp	r3, #1
 8009480:	d108      	bne.n	8009494 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	b29b      	uxth	r3, r3
 800948a:	4619      	mov	r1, r3
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff feed 	bl	800926c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009492:	e002      	b.n	800949a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f7ff fed5 	bl	8009244 <HAL_UART_RxHalfCpltCallback>
}
 800949a:	bf00      	nop
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094be:	2b80      	cmp	r3, #128	@ 0x80
 80094c0:	bf0c      	ite	eq
 80094c2:	2301      	moveq	r3, #1
 80094c4:	2300      	movne	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b21      	cmp	r3, #33	@ 0x21
 80094d4:	d108      	bne.n	80094e8 <UART_DMAError+0x46>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80094e2:	68b8      	ldr	r0, [r7, #8]
 80094e4:	f000 f8ce 	bl	8009684 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f2:	2b40      	cmp	r3, #64	@ 0x40
 80094f4:	bf0c      	ite	eq
 80094f6:	2301      	moveq	r3, #1
 80094f8:	2300      	movne	r3, #0
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b22      	cmp	r3, #34	@ 0x22
 8009508:	d108      	bne.n	800951c <UART_DMAError+0x7a>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2200      	movs	r2, #0
 8009514:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009516:	68b8      	ldr	r0, [r7, #8]
 8009518:	f000 f8dc 	bl	80096d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009520:	f043 0210 	orr.w	r2, r3, #16
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009528:	68b8      	ldr	r0, [r7, #8]
 800952a:	f7ff fe95 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
	...

08009538 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b098      	sub	sp, #96	@ 0x60
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	88fa      	ldrh	r2, [r7, #6]
 8009550:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2222      	movs	r2, #34	@ 0x22
 800955c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009564:	4a44      	ldr	r2, [pc, #272]	@ (8009678 <UART_Start_Receive_DMA+0x140>)
 8009566:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956c:	4a43      	ldr	r2, [pc, #268]	@ (800967c <UART_Start_Receive_DMA+0x144>)
 800956e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009574:	4a42      	ldr	r2, [pc, #264]	@ (8009680 <UART_Start_Receive_DMA+0x148>)
 8009576:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800957c:	2200      	movs	r2, #0
 800957e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009580:	f107 0308 	add.w	r3, r7, #8
 8009584:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3304      	adds	r3, #4
 8009590:	4619      	mov	r1, r3
 8009592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	f7fb fc98 	bl	8004ecc <HAL_DMA_Start_IT>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d008      	beq.n	80095b4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2210      	movs	r2, #16
 80095a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e05d      	b.n	8009670 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80095b4:	2300      	movs	r3, #0
 80095b6:	613b      	str	r3, [r7, #16]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	613b      	str	r3, [r7, #16]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d019      	beq.n	8009606 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	330c      	adds	r3, #12
 80095d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095dc:	e853 3f00 	ldrex	r3, [r3]
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	330c      	adds	r3, #12
 80095f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80095f2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80095f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80095f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095fa:	e841 2300 	strex	r3, r2, [r1]
 80095fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009600:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e5      	bne.n	80095d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3314      	adds	r3, #20
 800960c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	f043 0301 	orr.w	r3, r3, #1
 800961c:	657b      	str	r3, [r7, #84]	@ 0x54
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3314      	adds	r3, #20
 8009624:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009626:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800962c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e5      	bne.n	8009606 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3314      	adds	r3, #20
 8009640:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	617b      	str	r3, [r7, #20]
   return(result);
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009650:	653b      	str	r3, [r7, #80]	@ 0x50
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3314      	adds	r3, #20
 8009658:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800965a:	627a      	str	r2, [r7, #36]	@ 0x24
 800965c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6a39      	ldr	r1, [r7, #32]
 8009660:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	61fb      	str	r3, [r7, #28]
   return(result);
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e5      	bne.n	800963a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3760      	adds	r7, #96	@ 0x60
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	0800933b 	.word	0x0800933b
 800967c:	08009467 	.word	0x08009467
 8009680:	080094a3 	.word	0x080094a3

08009684 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b089      	sub	sp, #36	@ 0x24
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	330c      	adds	r3, #12
 8009692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	e853 3f00 	ldrex	r3, [r3]
 800969a:	60bb      	str	r3, [r7, #8]
   return(result);
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	330c      	adds	r3, #12
 80096aa:	69fa      	ldr	r2, [r7, #28]
 80096ac:	61ba      	str	r2, [r7, #24]
 80096ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b0:	6979      	ldr	r1, [r7, #20]
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	e841 2300 	strex	r3, r2, [r1]
 80096b8:	613b      	str	r3, [r7, #16]
   return(result);
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1e5      	bne.n	800968c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2220      	movs	r2, #32
 80096c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80096c8:	bf00      	nop
 80096ca:	3724      	adds	r7, #36	@ 0x24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b095      	sub	sp, #84	@ 0x54
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	330c      	adds	r3, #12
 80096e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	330c      	adds	r3, #12
 80096fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009702:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e5      	bne.n	80096dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	3314      	adds	r3, #20
 8009716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	e853 3f00 	ldrex	r3, [r3]
 800971e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	f023 0301 	bic.w	r3, r3, #1
 8009726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3314      	adds	r3, #20
 800972e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009730:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009732:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009734:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009738:	e841 2300 	strex	r3, r2, [r1]
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1e5      	bne.n	8009710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009748:	2b01      	cmp	r3, #1
 800974a:	d119      	bne.n	8009780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	330c      	adds	r3, #12
 8009752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	e853 3f00 	ldrex	r3, [r3]
 800975a:	60bb      	str	r3, [r7, #8]
   return(result);
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f023 0310 	bic.w	r3, r3, #16
 8009762:	647b      	str	r3, [r7, #68]	@ 0x44
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800976c:	61ba      	str	r2, [r7, #24]
 800976e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009770:	6979      	ldr	r1, [r7, #20]
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	e841 2300 	strex	r3, r2, [r1]
 8009778:	613b      	str	r3, [r7, #16]
   return(result);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d1e5      	bne.n	800974c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2220      	movs	r2, #32
 8009784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800978e:	bf00      	nop
 8009790:	3754      	adds	r7, #84	@ 0x54
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7ff fd52 	bl	8009258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b4:	bf00      	nop
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b21      	cmp	r3, #33	@ 0x21
 80097ce:	d13e      	bne.n	800984e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097d8:	d114      	bne.n	8009804 <UART_Transmit_IT+0x48>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d110      	bne.n	8009804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	1c9a      	adds	r2, r3, #2
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	621a      	str	r2, [r3, #32]
 8009802:	e008      	b.n	8009816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	1c59      	adds	r1, r3, #1
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	6211      	str	r1, [r2, #32]
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800981a:	b29b      	uxth	r3, r3
 800981c:	3b01      	subs	r3, #1
 800981e:	b29b      	uxth	r3, r3
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	4619      	mov	r1, r3
 8009824:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10f      	bne.n	800984a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68da      	ldr	r2, [r3, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f7ff fcc3 	bl	8009208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b08c      	sub	sp, #48	@ 0x30
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009898:	2300      	movs	r3, #0
 800989a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b22      	cmp	r3, #34	@ 0x22
 80098a6:	f040 80aa 	bne.w	80099fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098b2:	d115      	bne.n	80098e0 <UART_Receive_IT+0x54>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d111      	bne.n	80098e0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d8:	1c9a      	adds	r2, r3, #2
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80098de:	e024      	b.n	800992a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ee:	d007      	beq.n	8009900 <UART_Receive_IT+0x74>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <UART_Receive_IT+0x82>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d106      	bne.n	800990e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990a:	701a      	strb	r2, [r3, #0]
 800990c:	e008      	b.n	8009920 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800991a:	b2da      	uxtb	r2, r3
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29b      	uxth	r3, r3
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	4619      	mov	r1, r3
 8009938:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800993a:	2b00      	cmp	r3, #0
 800993c:	d15d      	bne.n	80099fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68da      	ldr	r2, [r3, #12]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0220 	bic.w	r2, r2, #32
 800994c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68da      	ldr	r2, [r3, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800995c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	695a      	ldr	r2, [r3, #20]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 0201 	bic.w	r2, r2, #1
 800996c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2220      	movs	r2, #32
 8009972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009980:	2b01      	cmp	r3, #1
 8009982:	d135      	bne.n	80099f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	330c      	adds	r3, #12
 8009990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	613b      	str	r3, [r7, #16]
   return(result);
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f023 0310 	bic.w	r3, r3, #16
 80099a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	330c      	adds	r3, #12
 80099a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099aa:	623a      	str	r2, [r7, #32]
 80099ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	69f9      	ldr	r1, [r7, #28]
 80099b0:	6a3a      	ldr	r2, [r7, #32]
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e5      	bne.n	800998a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d10a      	bne.n	80099e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099cc:	2300      	movs	r3, #0
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	60fb      	str	r3, [r7, #12]
 80099e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff fc3f 	bl	800926c <HAL_UARTEx_RxEventCallback>
 80099ee:	e002      	b.n	80099f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff fc1d 	bl	8009230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	e002      	b.n	8009a00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	e000      	b.n	8009a00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80099fe:	2302      	movs	r3, #2
  }
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3730      	adds	r7, #48	@ 0x30
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a0c:	b0c0      	sub	sp, #256	@ 0x100
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a24:	68d9      	ldr	r1, [r3, #12]
 8009a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	ea40 0301 	orr.w	r3, r0, r1
 8009a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a36:	689a      	ldr	r2, [r3, #8]
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	431a      	orrs	r2, r3
 8009a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a60:	f021 010c 	bic.w	r1, r1, #12
 8009a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a82:	6999      	ldr	r1, [r3, #24]
 8009a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	ea40 0301 	orr.w	r3, r0, r1
 8009a8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b8f      	ldr	r3, [pc, #572]	@ (8009cd4 <UART_SetConfig+0x2cc>)
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d005      	beq.n	8009aa8 <UART_SetConfig+0xa0>
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8009cd8 <UART_SetConfig+0x2d0>)
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d104      	bne.n	8009ab2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009aa8:	f7fd f960 	bl	8006d6c <HAL_RCC_GetPCLK2Freq>
 8009aac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ab0:	e003      	b.n	8009aba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ab2:	f7fd f947 	bl	8006d44 <HAL_RCC_GetPCLK1Freq>
 8009ab6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ac4:	f040 810c 	bne.w	8009ce0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009acc:	2200      	movs	r2, #0
 8009ace:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009ad6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009ada:	4622      	mov	r2, r4
 8009adc:	462b      	mov	r3, r5
 8009ade:	1891      	adds	r1, r2, r2
 8009ae0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009ae2:	415b      	adcs	r3, r3
 8009ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009aea:	4621      	mov	r1, r4
 8009aec:	eb12 0801 	adds.w	r8, r2, r1
 8009af0:	4629      	mov	r1, r5
 8009af2:	eb43 0901 	adc.w	r9, r3, r1
 8009af6:	f04f 0200 	mov.w	r2, #0
 8009afa:	f04f 0300 	mov.w	r3, #0
 8009afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b0a:	4690      	mov	r8, r2
 8009b0c:	4699      	mov	r9, r3
 8009b0e:	4623      	mov	r3, r4
 8009b10:	eb18 0303 	adds.w	r3, r8, r3
 8009b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b18:	462b      	mov	r3, r5
 8009b1a:	eb49 0303 	adc.w	r3, r9, r3
 8009b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b36:	460b      	mov	r3, r1
 8009b38:	18db      	adds	r3, r3, r3
 8009b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	eb42 0303 	adc.w	r3, r2, r3
 8009b42:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009b4c:	f7f7 f836 	bl	8000bbc <__aeabi_uldivmod>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4b61      	ldr	r3, [pc, #388]	@ (8009cdc <UART_SetConfig+0x2d4>)
 8009b56:	fba3 2302 	umull	r2, r3, r3, r2
 8009b5a:	095b      	lsrs	r3, r3, #5
 8009b5c:	011c      	lsls	r4, r3, #4
 8009b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b70:	4642      	mov	r2, r8
 8009b72:	464b      	mov	r3, r9
 8009b74:	1891      	adds	r1, r2, r2
 8009b76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b78:	415b      	adcs	r3, r3
 8009b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b80:	4641      	mov	r1, r8
 8009b82:	eb12 0a01 	adds.w	sl, r2, r1
 8009b86:	4649      	mov	r1, r9
 8009b88:	eb43 0b01 	adc.w	fp, r3, r1
 8009b8c:	f04f 0200 	mov.w	r2, #0
 8009b90:	f04f 0300 	mov.w	r3, #0
 8009b94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ba0:	4692      	mov	sl, r2
 8009ba2:	469b      	mov	fp, r3
 8009ba4:	4643      	mov	r3, r8
 8009ba6:	eb1a 0303 	adds.w	r3, sl, r3
 8009baa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8009bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	18db      	adds	r3, r3, r3
 8009bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	eb42 0303 	adc.w	r3, r2, r3
 8009bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009be2:	f7f6 ffeb 	bl	8000bbc <__aeabi_uldivmod>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4611      	mov	r1, r2
 8009bec:	4b3b      	ldr	r3, [pc, #236]	@ (8009cdc <UART_SetConfig+0x2d4>)
 8009bee:	fba3 2301 	umull	r2, r3, r3, r1
 8009bf2:	095b      	lsrs	r3, r3, #5
 8009bf4:	2264      	movs	r2, #100	@ 0x64
 8009bf6:	fb02 f303 	mul.w	r3, r2, r3
 8009bfa:	1acb      	subs	r3, r1, r3
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009c02:	4b36      	ldr	r3, [pc, #216]	@ (8009cdc <UART_SetConfig+0x2d4>)
 8009c04:	fba3 2302 	umull	r2, r3, r3, r2
 8009c08:	095b      	lsrs	r3, r3, #5
 8009c0a:	005b      	lsls	r3, r3, #1
 8009c0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c10:	441c      	add	r4, r3
 8009c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009c20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009c24:	4642      	mov	r2, r8
 8009c26:	464b      	mov	r3, r9
 8009c28:	1891      	adds	r1, r2, r2
 8009c2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c2c:	415b      	adcs	r3, r3
 8009c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009c34:	4641      	mov	r1, r8
 8009c36:	1851      	adds	r1, r2, r1
 8009c38:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	414b      	adcs	r3, r1
 8009c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c40:	f04f 0200 	mov.w	r2, #0
 8009c44:	f04f 0300 	mov.w	r3, #0
 8009c48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009c4c:	4659      	mov	r1, fp
 8009c4e:	00cb      	lsls	r3, r1, #3
 8009c50:	4651      	mov	r1, sl
 8009c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c56:	4651      	mov	r1, sl
 8009c58:	00ca      	lsls	r2, r1, #3
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4642      	mov	r2, r8
 8009c62:	189b      	adds	r3, r3, r2
 8009c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c68:	464b      	mov	r3, r9
 8009c6a:	460a      	mov	r2, r1
 8009c6c:	eb42 0303 	adc.w	r3, r2, r3
 8009c70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c88:	460b      	mov	r3, r1
 8009c8a:	18db      	adds	r3, r3, r3
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c8e:	4613      	mov	r3, r2
 8009c90:	eb42 0303 	adc.w	r3, r2, r3
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c9e:	f7f6 ff8d 	bl	8000bbc <__aeabi_uldivmod>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cdc <UART_SetConfig+0x2d4>)
 8009ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	2164      	movs	r1, #100	@ 0x64
 8009cb0:	fb01 f303 	mul.w	r3, r1, r3
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	3332      	adds	r3, #50	@ 0x32
 8009cba:	4a08      	ldr	r2, [pc, #32]	@ (8009cdc <UART_SetConfig+0x2d4>)
 8009cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc0:	095b      	lsrs	r3, r3, #5
 8009cc2:	f003 0207 	and.w	r2, r3, #7
 8009cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4422      	add	r2, r4
 8009cce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009cd0:	e106      	b.n	8009ee0 <UART_SetConfig+0x4d8>
 8009cd2:	bf00      	nop
 8009cd4:	40011000 	.word	0x40011000
 8009cd8:	40011400 	.word	0x40011400
 8009cdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009cea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009cee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009cf2:	4642      	mov	r2, r8
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	1891      	adds	r1, r2, r2
 8009cf8:	6239      	str	r1, [r7, #32]
 8009cfa:	415b      	adcs	r3, r3
 8009cfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d02:	4641      	mov	r1, r8
 8009d04:	1854      	adds	r4, r2, r1
 8009d06:	4649      	mov	r1, r9
 8009d08:	eb43 0501 	adc.w	r5, r3, r1
 8009d0c:	f04f 0200 	mov.w	r2, #0
 8009d10:	f04f 0300 	mov.w	r3, #0
 8009d14:	00eb      	lsls	r3, r5, #3
 8009d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d1a:	00e2      	lsls	r2, r4, #3
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	461d      	mov	r5, r3
 8009d20:	4643      	mov	r3, r8
 8009d22:	18e3      	adds	r3, r4, r3
 8009d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d28:	464b      	mov	r3, r9
 8009d2a:	eb45 0303 	adc.w	r3, r5, r3
 8009d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d42:	f04f 0200 	mov.w	r2, #0
 8009d46:	f04f 0300 	mov.w	r3, #0
 8009d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009d4e:	4629      	mov	r1, r5
 8009d50:	008b      	lsls	r3, r1, #2
 8009d52:	4621      	mov	r1, r4
 8009d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d58:	4621      	mov	r1, r4
 8009d5a:	008a      	lsls	r2, r1, #2
 8009d5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d60:	f7f6 ff2c 	bl	8000bbc <__aeabi_uldivmod>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4b60      	ldr	r3, [pc, #384]	@ (8009eec <UART_SetConfig+0x4e4>)
 8009d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	011c      	lsls	r4, r3, #4
 8009d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d84:	4642      	mov	r2, r8
 8009d86:	464b      	mov	r3, r9
 8009d88:	1891      	adds	r1, r2, r2
 8009d8a:	61b9      	str	r1, [r7, #24]
 8009d8c:	415b      	adcs	r3, r3
 8009d8e:	61fb      	str	r3, [r7, #28]
 8009d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d94:	4641      	mov	r1, r8
 8009d96:	1851      	adds	r1, r2, r1
 8009d98:	6139      	str	r1, [r7, #16]
 8009d9a:	4649      	mov	r1, r9
 8009d9c:	414b      	adcs	r3, r1
 8009d9e:	617b      	str	r3, [r7, #20]
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009dac:	4659      	mov	r1, fp
 8009dae:	00cb      	lsls	r3, r1, #3
 8009db0:	4651      	mov	r1, sl
 8009db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009db6:	4651      	mov	r1, sl
 8009db8:	00ca      	lsls	r2, r1, #3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	189b      	adds	r3, r3, r2
 8009dc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009dc8:	464b      	mov	r3, r9
 8009dca:	460a      	mov	r2, r1
 8009dcc:	eb42 0303 	adc.w	r3, r2, r3
 8009dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009de0:	f04f 0200 	mov.w	r2, #0
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009dec:	4649      	mov	r1, r9
 8009dee:	008b      	lsls	r3, r1, #2
 8009df0:	4641      	mov	r1, r8
 8009df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009df6:	4641      	mov	r1, r8
 8009df8:	008a      	lsls	r2, r1, #2
 8009dfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009dfe:	f7f6 fedd 	bl	8000bbc <__aeabi_uldivmod>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	4b38      	ldr	r3, [pc, #224]	@ (8009eec <UART_SetConfig+0x4e4>)
 8009e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8009e0e:	095b      	lsrs	r3, r3, #5
 8009e10:	2264      	movs	r2, #100	@ 0x64
 8009e12:	fb02 f303 	mul.w	r3, r2, r3
 8009e16:	1acb      	subs	r3, r1, r3
 8009e18:	011b      	lsls	r3, r3, #4
 8009e1a:	3332      	adds	r3, #50	@ 0x32
 8009e1c:	4a33      	ldr	r2, [pc, #204]	@ (8009eec <UART_SetConfig+0x4e4>)
 8009e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e22:	095b      	lsrs	r3, r3, #5
 8009e24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e28:	441c      	add	r4, r3
 8009e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e2e:	2200      	movs	r2, #0
 8009e30:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e32:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	1891      	adds	r1, r2, r2
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	415b      	adcs	r3, r3
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e48:	4641      	mov	r1, r8
 8009e4a:	1851      	adds	r1, r2, r1
 8009e4c:	6039      	str	r1, [r7, #0]
 8009e4e:	4649      	mov	r1, r9
 8009e50:	414b      	adcs	r3, r1
 8009e52:	607b      	str	r3, [r7, #4]
 8009e54:	f04f 0200 	mov.w	r2, #0
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e60:	4659      	mov	r1, fp
 8009e62:	00cb      	lsls	r3, r1, #3
 8009e64:	4651      	mov	r1, sl
 8009e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e6a:	4651      	mov	r1, sl
 8009e6c:	00ca      	lsls	r2, r1, #3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	4619      	mov	r1, r3
 8009e72:	4603      	mov	r3, r0
 8009e74:	4642      	mov	r2, r8
 8009e76:	189b      	adds	r3, r3, r2
 8009e78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e7a:	464b      	mov	r3, r9
 8009e7c:	460a      	mov	r2, r1
 8009e7e:	eb42 0303 	adc.w	r3, r2, r3
 8009e82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	f04f 0300 	mov.w	r3, #0
 8009e98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	008b      	lsls	r3, r1, #2
 8009ea0:	4641      	mov	r1, r8
 8009ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ea6:	4641      	mov	r1, r8
 8009ea8:	008a      	lsls	r2, r1, #2
 8009eaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009eae:	f7f6 fe85 	bl	8000bbc <__aeabi_uldivmod>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009eec <UART_SetConfig+0x4e4>)
 8009eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009ebc:	095b      	lsrs	r3, r3, #5
 8009ebe:	2164      	movs	r1, #100	@ 0x64
 8009ec0:	fb01 f303 	mul.w	r3, r1, r3
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	3332      	adds	r3, #50	@ 0x32
 8009eca:	4a08      	ldr	r2, [pc, #32]	@ (8009eec <UART_SetConfig+0x4e4>)
 8009ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed0:	095b      	lsrs	r3, r3, #5
 8009ed2:	f003 020f 	and.w	r2, r3, #15
 8009ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4422      	add	r2, r4
 8009ede:	609a      	str	r2, [r3, #8]
}
 8009ee0:	bf00      	nop
 8009ee2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eec:	51eb851f 	.word	0x51eb851f

08009ef0 <__NVIC_SetPriority>:
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	6039      	str	r1, [r7, #0]
 8009efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	db0a      	blt.n	8009f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	490c      	ldr	r1, [pc, #48]	@ (8009f3c <__NVIC_SetPriority+0x4c>)
 8009f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f0e:	0112      	lsls	r2, r2, #4
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	440b      	add	r3, r1
 8009f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009f18:	e00a      	b.n	8009f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	4908      	ldr	r1, [pc, #32]	@ (8009f40 <__NVIC_SetPriority+0x50>)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	f003 030f 	and.w	r3, r3, #15
 8009f26:	3b04      	subs	r3, #4
 8009f28:	0112      	lsls	r2, r2, #4
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	761a      	strb	r2, [r3, #24]
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr
 8009f3c:	e000e100 	.word	0xe000e100
 8009f40:	e000ed00 	.word	0xe000ed00

08009f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f44:	b580      	push	{r7, lr}
 8009f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f48:	4b05      	ldr	r3, [pc, #20]	@ (8009f60 <SysTick_Handler+0x1c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f4c:	f001 fd40 	bl	800b9d0 <xTaskGetSchedulerState>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d001      	beq.n	8009f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f56:	f002 fb37 	bl	800c5c8 <xPortSysTickHandler>
  }
}
 8009f5a:	bf00      	nop
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010

08009f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f68:	2100      	movs	r1, #0
 8009f6a:	f06f 0004 	mvn.w	r0, #4
 8009f6e:	f7ff ffbf 	bl	8009ef0 <__NVIC_SetPriority>
#endif
}
 8009f72:	bf00      	nop
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f7e:	f3ef 8305 	mrs	r3, IPSR
 8009f82:	603b      	str	r3, [r7, #0]
  return(result);
 8009f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f8a:	f06f 0305 	mvn.w	r3, #5
 8009f8e:	607b      	str	r3, [r7, #4]
 8009f90:	e00c      	b.n	8009fac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f92:	4b0a      	ldr	r3, [pc, #40]	@ (8009fbc <osKernelInitialize+0x44>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d105      	bne.n	8009fa6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f9a:	4b08      	ldr	r3, [pc, #32]	@ (8009fbc <osKernelInitialize+0x44>)
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	607b      	str	r3, [r7, #4]
 8009fa4:	e002      	b.n	8009fac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009faa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fac:	687b      	ldr	r3, [r7, #4]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	20008724 	.word	0x20008724

08009fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fc6:	f3ef 8305 	mrs	r3, IPSR
 8009fca:	603b      	str	r3, [r7, #0]
  return(result);
 8009fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8009fd2:	f06f 0305 	mvn.w	r3, #5
 8009fd6:	607b      	str	r3, [r7, #4]
 8009fd8:	e010      	b.n	8009ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009fda:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <osKernelStart+0x48>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d109      	bne.n	8009ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fe2:	f7ff ffbf 	bl	8009f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fe6:	4b08      	ldr	r3, [pc, #32]	@ (800a008 <osKernelStart+0x48>)
 8009fe8:	2202      	movs	r2, #2
 8009fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009fec:	f001 f87a 	bl	800b0e4 <vTaskStartScheduler>
      stat = osOK;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	607b      	str	r3, [r7, #4]
 8009ff4:	e002      	b.n	8009ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ffc:	687b      	ldr	r3, [r7, #4]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	20008724 	.word	0x20008724

0800a00c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08e      	sub	sp, #56	@ 0x38
 800a010:	af04      	add	r7, sp, #16
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a018:	2300      	movs	r3, #0
 800a01a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a01c:	f3ef 8305 	mrs	r3, IPSR
 800a020:	617b      	str	r3, [r7, #20]
  return(result);
 800a022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a024:	2b00      	cmp	r3, #0
 800a026:	d17e      	bne.n	800a126 <osThreadNew+0x11a>
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d07b      	beq.n	800a126 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a02e:	2380      	movs	r3, #128	@ 0x80
 800a030:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a032:	2318      	movs	r3, #24
 800a034:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a036:	2300      	movs	r3, #0
 800a038:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a03e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d045      	beq.n	800a0d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <osThreadNew+0x48>
        name = attr->name;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	699b      	ldr	r3, [r3, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d008      	beq.n	800a07a <osThreadNew+0x6e>
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2b38      	cmp	r3, #56	@ 0x38
 800a06c:	d805      	bhi.n	800a07a <osThreadNew+0x6e>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <osThreadNew+0x72>
        return (NULL);
 800a07a:	2300      	movs	r3, #0
 800a07c:	e054      	b.n	800a128 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	089b      	lsrs	r3, r3, #2
 800a08c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00e      	beq.n	800a0b4 <osThreadNew+0xa8>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	2b5b      	cmp	r3, #91	@ 0x5b
 800a09c:	d90a      	bls.n	800a0b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d006      	beq.n	800a0b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <osThreadNew+0xa8>
        mem = 1;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	61bb      	str	r3, [r7, #24]
 800a0b2:	e010      	b.n	800a0d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10c      	bne.n	800a0d6 <osThreadNew+0xca>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d108      	bne.n	800a0d6 <osThreadNew+0xca>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <osThreadNew+0xca>
          mem = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
 800a0d0:	e001      	b.n	800a0d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d110      	bne.n	800a0fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0e4:	9202      	str	r2, [sp, #8]
 800a0e6:	9301      	str	r3, [sp, #4]
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	6a3a      	ldr	r2, [r7, #32]
 800a0f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fe1a 	bl	800ad2c <xTaskCreateStatic>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	e013      	b.n	800a126 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d110      	bne.n	800a126 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	b29a      	uxth	r2, r3
 800a108:	f107 0310 	add.w	r3, r7, #16
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a116:	68f8      	ldr	r0, [r7, #12]
 800a118:	f000 fe68 	bl	800adec <xTaskCreate>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d001      	beq.n	800a126 <osThreadNew+0x11a>
            hTask = NULL;
 800a122:	2300      	movs	r3, #0
 800a124:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a126:	693b      	ldr	r3, [r7, #16]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3728      	adds	r7, #40	@ 0x28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a138:	f3ef 8305 	mrs	r3, IPSR
 800a13c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a13e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a140:	2b00      	cmp	r3, #0
 800a142:	d003      	beq.n	800a14c <osDelay+0x1c>
    stat = osErrorISR;
 800a144:	f06f 0305 	mvn.w	r3, #5
 800a148:	60fb      	str	r3, [r7, #12]
 800a14a:	e007      	b.n	800a15c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 ff8e 	bl	800b078 <vTaskDelay>
    }
  }

  return (stat);
 800a15c:	68fb      	ldr	r3, [r7, #12]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4a07      	ldr	r2, [pc, #28]	@ (800a194 <vApplicationGetIdleTaskMemory+0x2c>)
 800a178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	4a06      	ldr	r2, [pc, #24]	@ (800a198 <vApplicationGetIdleTaskMemory+0x30>)
 800a17e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2280      	movs	r2, #128	@ 0x80
 800a184:	601a      	str	r2, [r3, #0]
}
 800a186:	bf00      	nop
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20008728 	.word	0x20008728
 800a198:	20008784 	.word	0x20008784

0800a19c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4a07      	ldr	r2, [pc, #28]	@ (800a1c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a1ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	4a06      	ldr	r2, [pc, #24]	@ (800a1cc <vApplicationGetTimerTaskMemory+0x30>)
 800a1b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1ba:	601a      	str	r2, [r3, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	20008984 	.word	0x20008984
 800a1cc:	200089e0 	.word	0x200089e0

0800a1d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f103 0208 	add.w	r2, r3, #8
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f103 0208 	add.w	r2, r3, #8
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f103 0208 	add.w	r2, r3, #8
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	689a      	ldr	r2, [r3, #8]
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	3714      	adds	r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a272:	b480      	push	{r7}
 800a274:	b085      	sub	sp, #20
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a288:	d103      	bne.n	800a292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	e00c      	b.n	800a2ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3308      	adds	r3, #8
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	e002      	b.n	800a2a0 <vListInsert+0x2e>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d2f6      	bcs.n	800a29a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	601a      	str	r2, [r3, #0]
}
 800a2d8:	bf00      	nop
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6892      	ldr	r2, [r2, #8]
 800a2fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	6852      	ldr	r2, [r2, #4]
 800a304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d103      	bne.n	800a318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	1e5a      	subs	r2, r3, #1
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <xQueueGenericReset+0x2c>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	60bb      	str	r3, [r7, #8]
}
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	e7fd      	b.n	800a360 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a364:	f002 f8a0 	bl	800c4a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a370:	68f9      	ldr	r1, [r7, #12]
 800a372:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a374:	fb01 f303 	mul.w	r3, r1, r3
 800a378:	441a      	add	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a394:	3b01      	subs	r3, #1
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a39a:	fb01 f303 	mul.w	r3, r1, r3
 800a39e:	441a      	add	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	22ff      	movs	r2, #255	@ 0xff
 800a3a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	22ff      	movs	r2, #255	@ 0xff
 800a3b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d114      	bne.n	800a3e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01a      	beq.n	800a3f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3310      	adds	r3, #16
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f001 f91a 	bl	800b600 <xTaskRemoveFromEventList>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d012      	beq.n	800a3f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a408 <xQueueGenericReset+0xd0>)
 800a3d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	f3bf 8f6f 	isb	sy
 800a3e2:	e009      	b.n	800a3f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3310      	adds	r3, #16
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fef1 	bl	800a1d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3324      	adds	r3, #36	@ 0x24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff feec 	bl	800a1d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3f8:	f002 f888 	bl	800c50c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3fc:	2301      	movs	r3, #1
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	e000ed04 	.word	0xe000ed04

0800a40c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b08e      	sub	sp, #56	@ 0x38
 800a410:	af02      	add	r7, sp, #8
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10b      	bne.n	800a438 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d10b      	bne.n	800a456 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a450:	bf00      	nop
 800a452:	bf00      	nop
 800a454:	e7fd      	b.n	800a452 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <xQueueGenericCreateStatic+0x56>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <xQueueGenericCreateStatic+0x5a>
 800a462:	2301      	movs	r3, #1
 800a464:	e000      	b.n	800a468 <xQueueGenericCreateStatic+0x5c>
 800a466:	2300      	movs	r3, #0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10b      	bne.n	800a484 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	623b      	str	r3, [r7, #32]
}
 800a47e:	bf00      	nop
 800a480:	bf00      	nop
 800a482:	e7fd      	b.n	800a480 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d102      	bne.n	800a490 <xQueueGenericCreateStatic+0x84>
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d101      	bne.n	800a494 <xQueueGenericCreateStatic+0x88>
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <xQueueGenericCreateStatic+0x8a>
 800a494:	2300      	movs	r3, #0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10b      	bne.n	800a4b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	61fb      	str	r3, [r7, #28]
}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	e7fd      	b.n	800a4ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4b2:	2350      	movs	r3, #80	@ 0x50
 800a4b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b50      	cmp	r3, #80	@ 0x50
 800a4ba:	d00b      	beq.n	800a4d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	61bb      	str	r3, [r7, #24]
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	e7fd      	b.n	800a4d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00d      	beq.n	800a4fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	68b9      	ldr	r1, [r7, #8]
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 f805 	bl	800a506 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3730      	adds	r7, #48	@ 0x30
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	e002      	b.n	800a528 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a534:	2101      	movs	r1, #1
 800a536:	69b8      	ldr	r0, [r7, #24]
 800a538:	f7ff fefe 	bl	800a338 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	78fa      	ldrb	r2, [r7, #3]
 800a540:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b08e      	sub	sp, #56	@ 0x38
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
 800a558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <xQueueGenericSend+0x34>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	e7fd      	b.n	800a57c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <xQueueGenericSend+0x42>
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <xQueueGenericSend+0x46>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <xQueueGenericSend+0x48>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10b      	bne.n	800a5b0 <xQueueGenericSend+0x64>
	__asm volatile
 800a598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59c:	f383 8811 	msr	BASEPRI, r3
 800a5a0:	f3bf 8f6f 	isb	sy
 800a5a4:	f3bf 8f4f 	dsb	sy
 800a5a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
 800a5ae:	e7fd      	b.n	800a5ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d103      	bne.n	800a5be <xQueueGenericSend+0x72>
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <xQueueGenericSend+0x76>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <xQueueGenericSend+0x78>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10b      	bne.n	800a5e0 <xQueueGenericSend+0x94>
	__asm volatile
 800a5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	623b      	str	r3, [r7, #32]
}
 800a5da:	bf00      	nop
 800a5dc:	bf00      	nop
 800a5de:	e7fd      	b.n	800a5dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5e0:	f001 f9f6 	bl	800b9d0 <xTaskGetSchedulerState>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <xQueueGenericSend+0xa4>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <xQueueGenericSend+0xa8>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <xQueueGenericSend+0xaa>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xQueueGenericSend+0xc6>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61fb      	str	r3, [r7, #28]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a612:	f001 ff49 	bl	800c4a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61e:	429a      	cmp	r2, r3
 800a620:	d302      	bcc.n	800a628 <xQueueGenericSend+0xdc>
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b02      	cmp	r3, #2
 800a626:	d129      	bne.n	800a67c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	68b9      	ldr	r1, [r7, #8]
 800a62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a62e:	f000 fa0f 	bl	800aa50 <prvCopyDataToQueue>
 800a632:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d010      	beq.n	800a65e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63e:	3324      	adds	r3, #36	@ 0x24
 800a640:	4618      	mov	r0, r3
 800a642:	f000 ffdd 	bl	800b600 <xTaskRemoveFromEventList>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d013      	beq.n	800a674 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a64c:	4b3f      	ldr	r3, [pc, #252]	@ (800a74c <xQueueGenericSend+0x200>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	e00a      	b.n	800a674 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a664:	4b39      	ldr	r3, [pc, #228]	@ (800a74c <xQueueGenericSend+0x200>)
 800a666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a674:	f001 ff4a 	bl	800c50c <vPortExitCritical>
				return pdPASS;
 800a678:	2301      	movs	r3, #1
 800a67a:	e063      	b.n	800a744 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d103      	bne.n	800a68a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a682:	f001 ff43 	bl	800c50c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a686:	2300      	movs	r3, #0
 800a688:	e05c      	b.n	800a744 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d106      	bne.n	800a69e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a690:	f107 0314 	add.w	r3, r7, #20
 800a694:	4618      	mov	r0, r3
 800a696:	f001 f83f 	bl	800b718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a69a:	2301      	movs	r3, #1
 800a69c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a69e:	f001 ff35 	bl	800c50c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6a2:	f000 fd87 	bl	800b1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6a6:	f001 feff 	bl	800c4a8 <vPortEnterCritical>
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6b6:	d103      	bne.n	800a6c0 <xQueueGenericSend+0x174>
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6c6:	b25b      	sxtb	r3, r3
 800a6c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6cc:	d103      	bne.n	800a6d6 <xQueueGenericSend+0x18a>
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6d6:	f001 ff19 	bl	800c50c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6da:	1d3a      	adds	r2, r7, #4
 800a6dc:	f107 0314 	add.w	r3, r7, #20
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 f82e 	bl	800b744 <xTaskCheckForTimeOut>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d124      	bne.n	800a738 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6f0:	f000 faa6 	bl	800ac40 <prvIsQueueFull>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	3310      	adds	r3, #16
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	4611      	mov	r1, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f000 ff2a 	bl	800b55c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a70a:	f000 fa31 	bl	800ab70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a70e:	f000 fd5f 	bl	800b1d0 <xTaskResumeAll>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	f47f af7c 	bne.w	800a612 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a71a:	4b0c      	ldr	r3, [pc, #48]	@ (800a74c <xQueueGenericSend+0x200>)
 800a71c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	f3bf 8f4f 	dsb	sy
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	e772      	b.n	800a612 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a72c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a72e:	f000 fa1f 	bl	800ab70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a732:	f000 fd4d 	bl	800b1d0 <xTaskResumeAll>
 800a736:	e76c      	b.n	800a612 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a738:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a73a:	f000 fa19 	bl	800ab70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a73e:	f000 fd47 	bl	800b1d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a744:	4618      	mov	r0, r3
 800a746:	3738      	adds	r7, #56	@ 0x38
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	e000ed04 	.word	0xe000ed04

0800a750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b090      	sub	sp, #64	@ 0x40
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a764:	2b00      	cmp	r3, #0
 800a766:	d10b      	bne.n	800a780 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a77a:	bf00      	nop
 800a77c:	bf00      	nop
 800a77e:	e7fd      	b.n	800a77c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d103      	bne.n	800a78e <xQueueGenericSendFromISR+0x3e>
 800a786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <xQueueGenericSendFromISR+0x42>
 800a78e:	2301      	movs	r3, #1
 800a790:	e000      	b.n	800a794 <xQueueGenericSendFromISR+0x44>
 800a792:	2300      	movs	r3, #0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10b      	bne.n	800a7b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a7aa:	bf00      	nop
 800a7ac:	bf00      	nop
 800a7ae:	e7fd      	b.n	800a7ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d103      	bne.n	800a7be <xQueueGenericSendFromISR+0x6e>
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <xQueueGenericSendFromISR+0x72>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e000      	b.n	800a7c4 <xQueueGenericSendFromISR+0x74>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10b      	bne.n	800a7e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	623b      	str	r3, [r7, #32]
}
 800a7da:	bf00      	nop
 800a7dc:	bf00      	nop
 800a7de:	e7fd      	b.n	800a7dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7e0:	f001 ff42 	bl	800c668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7e4:	f3ef 8211 	mrs	r2, BASEPRI
 800a7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ec:	f383 8811 	msr	BASEPRI, r3
 800a7f0:	f3bf 8f6f 	isb	sy
 800a7f4:	f3bf 8f4f 	dsb	sy
 800a7f8:	61fa      	str	r2, [r7, #28]
 800a7fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a808:	429a      	cmp	r2, r3
 800a80a:	d302      	bcc.n	800a812 <xQueueGenericSendFromISR+0xc2>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d12f      	bne.n	800a872 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a814:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a818:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a820:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	68b9      	ldr	r1, [r7, #8]
 800a826:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a828:	f000 f912 	bl	800aa50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a82c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a834:	d112      	bne.n	800a85c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d016      	beq.n	800a86c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	3324      	adds	r3, #36	@ 0x24
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fedc 	bl	800b600 <xTaskRemoveFromEventList>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00e      	beq.n	800a86c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00b      	beq.n	800a86c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	e007      	b.n	800a86c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a85c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a860:	3301      	adds	r3, #1
 800a862:	b2db      	uxtb	r3, r3
 800a864:	b25a      	sxtb	r2, r3
 800a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a86c:	2301      	movs	r3, #1
 800a86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a870:	e001      	b.n	800a876 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a872:	2300      	movs	r3, #0
 800a874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a878:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a880:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a884:	4618      	mov	r0, r3
 800a886:	3740      	adds	r7, #64	@ 0x40
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	@ 0x30
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a898:	2300      	movs	r3, #0
 800a89a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10b      	bne.n	800a8be <xQueueReceive+0x32>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	623b      	str	r3, [r7, #32]
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	e7fd      	b.n	800a8ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d103      	bne.n	800a8cc <xQueueReceive+0x40>
 800a8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <xQueueReceive+0x44>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e000      	b.n	800a8d2 <xQueueReceive+0x46>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d10b      	bne.n	800a8ee <xQueueReceive+0x62>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	61fb      	str	r3, [r7, #28]
}
 800a8e8:	bf00      	nop
 800a8ea:	bf00      	nop
 800a8ec:	e7fd      	b.n	800a8ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ee:	f001 f86f 	bl	800b9d0 <xTaskGetSchedulerState>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d102      	bne.n	800a8fe <xQueueReceive+0x72>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <xQueueReceive+0x76>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueReceive+0x78>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10b      	bne.n	800a920 <xQueueReceive+0x94>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	61bb      	str	r3, [r7, #24]
}
 800a91a:	bf00      	nop
 800a91c:	bf00      	nop
 800a91e:	e7fd      	b.n	800a91c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a920:	f001 fdc2 	bl	800c4a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a928:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01f      	beq.n	800a970 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a930:	68b9      	ldr	r1, [r7, #8]
 800a932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a934:	f000 f8f6 	bl	800ab24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a93a:	1e5a      	subs	r2, r3, #1
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00f      	beq.n	800a968 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94a:	3310      	adds	r3, #16
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 fe57 	bl	800b600 <xTaskRemoveFromEventList>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d007      	beq.n	800a968 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a958:	4b3c      	ldr	r3, [pc, #240]	@ (800aa4c <xQueueReceive+0x1c0>)
 800a95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	f3bf 8f4f 	dsb	sy
 800a964:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a968:	f001 fdd0 	bl	800c50c <vPortExitCritical>
				return pdPASS;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e069      	b.n	800aa44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d103      	bne.n	800a97e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a976:	f001 fdc9 	bl	800c50c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a97a:	2300      	movs	r3, #0
 800a97c:	e062      	b.n	800aa44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d106      	bne.n	800a992 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a984:	f107 0310 	add.w	r3, r7, #16
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fec5 	bl	800b718 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a98e:	2301      	movs	r3, #1
 800a990:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a992:	f001 fdbb 	bl	800c50c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a996:	f000 fc0d 	bl	800b1b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a99a:	f001 fd85 	bl	800c4a8 <vPortEnterCritical>
 800a99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9a4:	b25b      	sxtb	r3, r3
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9aa:	d103      	bne.n	800a9b4 <xQueueReceive+0x128>
 800a9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9c0:	d103      	bne.n	800a9ca <xQueueReceive+0x13e>
 800a9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9ca:	f001 fd9f 	bl	800c50c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9ce:	1d3a      	adds	r2, r7, #4
 800a9d0:	f107 0310 	add.w	r3, r7, #16
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 feb4 	bl	800b744 <xTaskCheckForTimeOut>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d123      	bne.n	800aa2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9e4:	f000 f916 	bl	800ac14 <prvIsQueueEmpty>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d017      	beq.n	800aa1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	3324      	adds	r3, #36	@ 0x24
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fdb0 	bl	800b55c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9fe:	f000 f8b7 	bl	800ab70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa02:	f000 fbe5 	bl	800b1d0 <xTaskResumeAll>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d189      	bne.n	800a920 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aa0c:	4b0f      	ldr	r3, [pc, #60]	@ (800aa4c <xQueueReceive+0x1c0>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	e780      	b.n	800a920 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa20:	f000 f8a6 	bl	800ab70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa24:	f000 fbd4 	bl	800b1d0 <xTaskResumeAll>
 800aa28:	e77a      	b.n	800a920 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa2c:	f000 f8a0 	bl	800ab70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa30:	f000 fbce 	bl	800b1d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa36:	f000 f8ed 	bl	800ac14 <prvIsQueueEmpty>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f43f af6f 	beq.w	800a920 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3730      	adds	r7, #48	@ 0x30
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	e000ed04 	.word	0xe000ed04

0800aa50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10d      	bne.n	800aa8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d14d      	bne.n	800ab12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 ffc6 	bl	800ba0c <xTaskPriorityDisinherit>
 800aa80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	609a      	str	r2, [r3, #8]
 800aa88:	e043      	b.n	800ab12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d119      	bne.n	800aac4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6858      	ldr	r0, [r3, #4]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa98:	461a      	mov	r2, r3
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	f012 f817 	bl	801cace <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	685a      	ldr	r2, [r3, #4]
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa8:	441a      	add	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	685a      	ldr	r2, [r3, #4]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d32b      	bcc.n	800ab12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	605a      	str	r2, [r3, #4]
 800aac2:	e026      	b.n	800ab12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68d8      	ldr	r0, [r3, #12]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aacc:	461a      	mov	r2, r3
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	f011 fffd 	bl	801cace <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	68da      	ldr	r2, [r3, #12]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aadc:	425b      	negs	r3, r3
 800aade:	441a      	add	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d207      	bcs.n	800ab00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf8:	425b      	negs	r3, r3
 800aafa:	441a      	add	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d105      	bne.n	800ab12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	1c5a      	adds	r2, r3, #1
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ab1a:	697b      	ldr	r3, [r7, #20]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3718      	adds	r7, #24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d018      	beq.n	800ab68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab3e:	441a      	add	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68da      	ldr	r2, [r3, #12]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d303      	bcc.n	800ab58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68d9      	ldr	r1, [r3, #12]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab60:	461a      	mov	r2, r3
 800ab62:	6838      	ldr	r0, [r7, #0]
 800ab64:	f011 ffb3 	bl	801cace <memcpy>
	}
}
 800ab68:	bf00      	nop
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab78:	f001 fc96 	bl	800c4a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab84:	e011      	b.n	800abaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d012      	beq.n	800abb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3324      	adds	r3, #36	@ 0x24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fd34 	bl	800b600 <xTaskRemoveFromEventList>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab9e:	f000 fe35 	bl	800b80c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	dce9      	bgt.n	800ab86 <prvUnlockQueue+0x16>
 800abb2:	e000      	b.n	800abb6 <prvUnlockQueue+0x46>
					break;
 800abb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	22ff      	movs	r2, #255	@ 0xff
 800abba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800abbe:	f001 fca5 	bl	800c50c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800abc2:	f001 fc71 	bl	800c4a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abcc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abce:	e011      	b.n	800abf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d012      	beq.n	800abfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3310      	adds	r3, #16
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fd0f 	bl	800b600 <xTaskRemoveFromEventList>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800abe8:	f000 fe10 	bl	800b80c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abec:	7bbb      	ldrb	r3, [r7, #14]
 800abee:	3b01      	subs	r3, #1
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dce9      	bgt.n	800abd0 <prvUnlockQueue+0x60>
 800abfc:	e000      	b.n	800ac00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	22ff      	movs	r2, #255	@ 0xff
 800ac04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac08:	f001 fc80 	bl	800c50c <vPortExitCritical>
}
 800ac0c:	bf00      	nop
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac1c:	f001 fc44 	bl	800c4a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	60fb      	str	r3, [r7, #12]
 800ac2c:	e001      	b.n	800ac32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac32:	f001 fc6b 	bl	800c50c <vPortExitCritical>

	return xReturn;
 800ac36:	68fb      	ldr	r3, [r7, #12]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac48:	f001 fc2e 	bl	800c4a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d102      	bne.n	800ac5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	60fb      	str	r3, [r7, #12]
 800ac5c:	e001      	b.n	800ac62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac62:	f001 fc53 	bl	800c50c <vPortExitCritical>

	return xReturn;
 800ac66:	68fb      	ldr	r3, [r7, #12]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	e014      	b.n	800acaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac80:	4a0f      	ldr	r2, [pc, #60]	@ (800acc0 <vQueueAddToRegistry+0x50>)
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10b      	bne.n	800aca4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac8c:	490c      	ldr	r1, [pc, #48]	@ (800acc0 <vQueueAddToRegistry+0x50>)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac96:	4a0a      	ldr	r2, [pc, #40]	@ (800acc0 <vQueueAddToRegistry+0x50>)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	4413      	add	r3, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aca2:	e006      	b.n	800acb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3301      	adds	r3, #1
 800aca8:	60fb      	str	r3, [r7, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b07      	cmp	r3, #7
 800acae:	d9e7      	bls.n	800ac80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800acb0:	bf00      	nop
 800acb2:	bf00      	nop
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
 800acbe:	bf00      	nop
 800acc0:	20008de0 	.word	0x20008de0

0800acc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800acd4:	f001 fbe8 	bl	800c4a8 <vPortEnterCritical>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acde:	b25b      	sxtb	r3, r3
 800ace0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ace4:	d103      	bne.n	800acee <vQueueWaitForMessageRestricted+0x2a>
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acf4:	b25b      	sxtb	r3, r3
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acfa:	d103      	bne.n	800ad04 <vQueueWaitForMessageRestricted+0x40>
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad04:	f001 fc02 	bl	800c50c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	3324      	adds	r3, #36	@ 0x24
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 fc45 	bl	800b5a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad1e:	6978      	ldr	r0, [r7, #20]
 800ad20:	f7ff ff26 	bl	800ab70 <prvUnlockQueue>
	}
 800ad24:	bf00      	nop
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b08e      	sub	sp, #56	@ 0x38
 800ad30:	af04      	add	r7, sp, #16
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10b      	bne.n	800ad58 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	623b      	str	r3, [r7, #32]
}
 800ad52:	bf00      	nop
 800ad54:	bf00      	nop
 800ad56:	e7fd      	b.n	800ad54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10b      	bne.n	800ad76 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	61fb      	str	r3, [r7, #28]
}
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
 800ad74:	e7fd      	b.n	800ad72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad76:	235c      	movs	r3, #92	@ 0x5c
 800ad78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad7e:	d00b      	beq.n	800ad98 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	61bb      	str	r3, [r7, #24]
}
 800ad92:	bf00      	nop
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d01e      	beq.n	800adde <xTaskCreateStatic+0xb2>
 800ada0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d01b      	beq.n	800adde <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ada6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ada8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb2:	2202      	movs	r2, #2
 800adb4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adb8:	2300      	movs	r3, #0
 800adba:	9303      	str	r3, [sp, #12]
 800adbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adbe:	9302      	str	r3, [sp, #8]
 800adc0:	f107 0314 	add.w	r3, r7, #20
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	68b9      	ldr	r1, [r7, #8]
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f000 f850 	bl	800ae76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800add6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800add8:	f000 f8de 	bl	800af98 <prvAddNewTaskToReadyList>
 800addc:	e001      	b.n	800ade2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800adde:	2300      	movs	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ade2:	697b      	ldr	r3, [r7, #20]
	}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3728      	adds	r7, #40	@ 0x28
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adec:	b580      	push	{r7, lr}
 800adee:	b08c      	sub	sp, #48	@ 0x30
 800adf0:	af04      	add	r7, sp, #16
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	4613      	mov	r3, r2
 800adfa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adfc:	88fb      	ldrh	r3, [r7, #6]
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 fc73 	bl	800c6ec <pvPortMalloc>
 800ae06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00e      	beq.n	800ae2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae0e:	205c      	movs	r0, #92	@ 0x5c
 800ae10:	f001 fc6c 	bl	800c6ec <pvPortMalloc>
 800ae14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae22:	e005      	b.n	800ae30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae24:	6978      	ldr	r0, [r7, #20]
 800ae26:	f001 fd2f 	bl	800c888 <vPortFree>
 800ae2a:	e001      	b.n	800ae30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d017      	beq.n	800ae66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae3e:	88fa      	ldrh	r2, [r7, #6]
 800ae40:	2300      	movs	r3, #0
 800ae42:	9303      	str	r3, [sp, #12]
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	9302      	str	r3, [sp, #8]
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	68b9      	ldr	r1, [r7, #8]
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f80e 	bl	800ae76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae5a:	69f8      	ldr	r0, [r7, #28]
 800ae5c:	f000 f89c 	bl	800af98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae60:	2301      	movs	r3, #1
 800ae62:	61bb      	str	r3, [r7, #24]
 800ae64:	e002      	b.n	800ae6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae6c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3720      	adds	r7, #32
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b088      	sub	sp, #32
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	607a      	str	r2, [r7, #4]
 800ae82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	21a5      	movs	r1, #165	@ 0xa5
 800ae90:	f011 fd54 	bl	801c93c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	f023 0307 	bic.w	r3, r3, #7
 800aeac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	617b      	str	r3, [r7, #20]
}
 800aeca:	bf00      	nop
 800aecc:	bf00      	nop
 800aece:	e7fd      	b.n	800aecc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d01f      	beq.n	800af16 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
 800aeda:	e012      	b.n	800af02 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	4413      	add	r3, r2
 800aee2:	7819      	ldrb	r1, [r3, #0]
 800aee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	4413      	add	r3, r2
 800aeea:	3334      	adds	r3, #52	@ 0x34
 800aeec:	460a      	mov	r2, r1
 800aeee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d006      	beq.n	800af0a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	3301      	adds	r3, #1
 800af00:	61fb      	str	r3, [r7, #28]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	2b0f      	cmp	r3, #15
 800af06:	d9e9      	bls.n	800aedc <prvInitialiseNewTask+0x66>
 800af08:	e000      	b.n	800af0c <prvInitialiseNewTask+0x96>
			{
				break;
 800af0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af14:	e003      	b.n	800af1e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af20:	2b37      	cmp	r3, #55	@ 0x37
 800af22:	d901      	bls.n	800af28 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af24:	2337      	movs	r3, #55	@ 0x37
 800af26:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af32:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af36:	2200      	movs	r2, #0
 800af38:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3c:	3304      	adds	r3, #4
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff f966 	bl	800a210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	3318      	adds	r3, #24
 800af48:	4618      	mov	r0, r3
 800af4a:	f7ff f961 	bl	800a210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af62:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	2200      	movs	r2, #0
 800af68:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	68f9      	ldr	r1, [r7, #12]
 800af76:	69b8      	ldr	r0, [r7, #24]
 800af78:	f001 f966 	bl	800c248 <pxPortInitialiseStack>
 800af7c:	4602      	mov	r2, r0
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d002      	beq.n	800af8e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af8e:	bf00      	nop
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afa0:	f001 fa82 	bl	800c4a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afa4:	4b2d      	ldr	r3, [pc, #180]	@ (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	4a2c      	ldr	r2, [pc, #176]	@ (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afae:	4b2c      	ldr	r3, [pc, #176]	@ (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afb6:	4a2a      	ldr	r2, [pc, #168]	@ (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afbc:	4b27      	ldr	r3, [pc, #156]	@ (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d110      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afc4:	f000 fc46 	bl	800b854 <prvInitialiseTaskLists>
 800afc8:	e00d      	b.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afca:	4b26      	ldr	r3, [pc, #152]	@ (800b064 <prvAddNewTaskToReadyList+0xcc>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afd2:	4b23      	ldr	r3, [pc, #140]	@ (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d802      	bhi.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afe0:	4a1f      	ldr	r2, [pc, #124]	@ (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afe6:	4b20      	ldr	r3, [pc, #128]	@ (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a1e      	ldr	r2, [pc, #120]	@ (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800afee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aff0:	4b1d      	ldr	r3, [pc, #116]	@ (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affc:	4b1b      	ldr	r3, [pc, #108]	@ (800b06c <prvAddNewTaskToReadyList+0xd4>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d903      	bls.n	800b00c <prvAddNewTaskToReadyList+0x74>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b008:	4a18      	ldr	r2, [pc, #96]	@ (800b06c <prvAddNewTaskToReadyList+0xd4>)
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4a15      	ldr	r2, [pc, #84]	@ (800b070 <prvAddNewTaskToReadyList+0xd8>)
 800b01a:	441a      	add	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	3304      	adds	r3, #4
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f7ff f901 	bl	800a22a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b028:	f001 fa70 	bl	800c50c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b02c:	4b0d      	ldr	r3, [pc, #52]	@ (800b064 <prvAddNewTaskToReadyList+0xcc>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00e      	beq.n	800b052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b034:	4b0a      	ldr	r3, [pc, #40]	@ (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b03e:	429a      	cmp	r2, r3
 800b040:	d207      	bcs.n	800b052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b042:	4b0c      	ldr	r3, [pc, #48]	@ (800b074 <prvAddNewTaskToReadyList+0xdc>)
 800b044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	200092f4 	.word	0x200092f4
 800b060:	20008e20 	.word	0x20008e20
 800b064:	20009300 	.word	0x20009300
 800b068:	20009310 	.word	0x20009310
 800b06c:	200092fc 	.word	0x200092fc
 800b070:	20008e24 	.word	0x20008e24
 800b074:	e000ed04 	.word	0xe000ed04

0800b078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d018      	beq.n	800b0bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b08a:	4b14      	ldr	r3, [pc, #80]	@ (800b0dc <vTaskDelay+0x64>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00b      	beq.n	800b0aa <vTaskDelay+0x32>
	__asm volatile
 800b092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b096:	f383 8811 	msr	BASEPRI, r3
 800b09a:	f3bf 8f6f 	isb	sy
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	60bb      	str	r3, [r7, #8]
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	e7fd      	b.n	800b0a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0aa:	f000 f883 	bl	800b1b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0ae:	2100      	movs	r1, #0
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fd1b 	bl	800baec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0b6:	f000 f88b 	bl	800b1d0 <xTaskResumeAll>
 800b0ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d107      	bne.n	800b0d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b0c2:	4b07      	ldr	r3, [pc, #28]	@ (800b0e0 <vTaskDelay+0x68>)
 800b0c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0d2:	bf00      	nop
 800b0d4:	3710      	adds	r7, #16
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	2000931c 	.word	0x2000931c
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08a      	sub	sp, #40	@ 0x28
 800b0e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0f2:	463a      	mov	r2, r7
 800b0f4:	1d39      	adds	r1, r7, #4
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7ff f834 	bl	800a168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	68ba      	ldr	r2, [r7, #8]
 800b106:	9202      	str	r2, [sp, #8]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	2300      	movs	r3, #0
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	2300      	movs	r3, #0
 800b110:	460a      	mov	r2, r1
 800b112:	4922      	ldr	r1, [pc, #136]	@ (800b19c <vTaskStartScheduler+0xb8>)
 800b114:	4822      	ldr	r0, [pc, #136]	@ (800b1a0 <vTaskStartScheduler+0xbc>)
 800b116:	f7ff fe09 	bl	800ad2c <xTaskCreateStatic>
 800b11a:	4603      	mov	r3, r0
 800b11c:	4a21      	ldr	r2, [pc, #132]	@ (800b1a4 <vTaskStartScheduler+0xc0>)
 800b11e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b120:	4b20      	ldr	r3, [pc, #128]	@ (800b1a4 <vTaskStartScheduler+0xc0>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b128:	2301      	movs	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e001      	b.n	800b132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d102      	bne.n	800b13e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b138:	f000 fd2c 	bl	800bb94 <xTimerCreateTimerTask>
 800b13c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d116      	bne.n	800b172 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b148:	f383 8811 	msr	BASEPRI, r3
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f3bf 8f4f 	dsb	sy
 800b154:	613b      	str	r3, [r7, #16]
}
 800b156:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b158:	4b13      	ldr	r3, [pc, #76]	@ (800b1a8 <vTaskStartScheduler+0xc4>)
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b15e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b160:	4b12      	ldr	r3, [pc, #72]	@ (800b1ac <vTaskStartScheduler+0xc8>)
 800b162:	2201      	movs	r2, #1
 800b164:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b166:	4b12      	ldr	r3, [pc, #72]	@ (800b1b0 <vTaskStartScheduler+0xcc>)
 800b168:	2200      	movs	r2, #0
 800b16a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b16c:	f001 f8f8 	bl	800c360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b170:	e00f      	b.n	800b192 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b178:	d10b      	bne.n	800b192 <vTaskStartScheduler+0xae>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	60fb      	str	r3, [r7, #12]
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	e7fd      	b.n	800b18e <vTaskStartScheduler+0xaa>
}
 800b192:	bf00      	nop
 800b194:	3718      	adds	r7, #24
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	0801d7ec 	.word	0x0801d7ec
 800b1a0:	0800b825 	.word	0x0800b825
 800b1a4:	20009318 	.word	0x20009318
 800b1a8:	20009314 	.word	0x20009314
 800b1ac:	20009300 	.word	0x20009300
 800b1b0:	200092f8 	.word	0x200092f8

0800b1b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1b8:	4b04      	ldr	r3, [pc, #16]	@ (800b1cc <vTaskSuspendAll+0x18>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	4a03      	ldr	r2, [pc, #12]	@ (800b1cc <vTaskSuspendAll+0x18>)
 800b1c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1c2:	bf00      	nop
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	2000931c 	.word	0x2000931c

0800b1d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1de:	4b42      	ldr	r3, [pc, #264]	@ (800b2e8 <xTaskResumeAll+0x118>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10b      	bne.n	800b1fe <xTaskResumeAll+0x2e>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	603b      	str	r3, [r7, #0]
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	e7fd      	b.n	800b1fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1fe:	f001 f953 	bl	800c4a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b202:	4b39      	ldr	r3, [pc, #228]	@ (800b2e8 <xTaskResumeAll+0x118>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3b01      	subs	r3, #1
 800b208:	4a37      	ldr	r2, [pc, #220]	@ (800b2e8 <xTaskResumeAll+0x118>)
 800b20a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b20c:	4b36      	ldr	r3, [pc, #216]	@ (800b2e8 <xTaskResumeAll+0x118>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d162      	bne.n	800b2da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b214:	4b35      	ldr	r3, [pc, #212]	@ (800b2ec <xTaskResumeAll+0x11c>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d05e      	beq.n	800b2da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b21c:	e02f      	b.n	800b27e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b21e:	4b34      	ldr	r3, [pc, #208]	@ (800b2f0 <xTaskResumeAll+0x120>)
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3318      	adds	r3, #24
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff f85a 	bl	800a2e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7ff f855 	bl	800a2e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b23e:	4b2d      	ldr	r3, [pc, #180]	@ (800b2f4 <xTaskResumeAll+0x124>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d903      	bls.n	800b24e <xTaskResumeAll+0x7e>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24a:	4a2a      	ldr	r2, [pc, #168]	@ (800b2f4 <xTaskResumeAll+0x124>)
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b252:	4613      	mov	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4a27      	ldr	r2, [pc, #156]	@ (800b2f8 <xTaskResumeAll+0x128>)
 800b25c:	441a      	add	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3304      	adds	r3, #4
 800b262:	4619      	mov	r1, r3
 800b264:	4610      	mov	r0, r2
 800b266:	f7fe ffe0 	bl	800a22a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b26e:	4b23      	ldr	r3, [pc, #140]	@ (800b2fc <xTaskResumeAll+0x12c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b274:	429a      	cmp	r2, r3
 800b276:	d302      	bcc.n	800b27e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b278:	4b21      	ldr	r3, [pc, #132]	@ (800b300 <xTaskResumeAll+0x130>)
 800b27a:	2201      	movs	r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b27e:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f0 <xTaskResumeAll+0x120>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1cb      	bne.n	800b21e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b28c:	f000 fb80 	bl	800b990 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b290:	4b1c      	ldr	r3, [pc, #112]	@ (800b304 <xTaskResumeAll+0x134>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d010      	beq.n	800b2be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b29c:	f000 f846 	bl	800b32c <xTaskIncrementTick>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b2a6:	4b16      	ldr	r3, [pc, #88]	@ (800b300 <xTaskResumeAll+0x130>)
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1f1      	bne.n	800b29c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b2b8:	4b12      	ldr	r3, [pc, #72]	@ (800b304 <xTaskResumeAll+0x134>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2be:	4b10      	ldr	r3, [pc, #64]	@ (800b300 <xTaskResumeAll+0x130>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d009      	beq.n	800b2da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b308 <xTaskResumeAll+0x138>)
 800b2cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2d0:	601a      	str	r2, [r3, #0]
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2da:	f001 f917 	bl	800c50c <vPortExitCritical>

	return xAlreadyYielded;
 800b2de:	68bb      	ldr	r3, [r7, #8]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	2000931c 	.word	0x2000931c
 800b2ec:	200092f4 	.word	0x200092f4
 800b2f0:	200092b4 	.word	0x200092b4
 800b2f4:	200092fc 	.word	0x200092fc
 800b2f8:	20008e24 	.word	0x20008e24
 800b2fc:	20008e20 	.word	0x20008e20
 800b300:	20009308 	.word	0x20009308
 800b304:	20009304 	.word	0x20009304
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b312:	4b05      	ldr	r3, [pc, #20]	@ (800b328 <xTaskGetTickCount+0x1c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b318:	687b      	ldr	r3, [r7, #4]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	200092f8 	.word	0x200092f8

0800b32c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b332:	2300      	movs	r3, #0
 800b334:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b336:	4b4f      	ldr	r3, [pc, #316]	@ (800b474 <xTaskIncrementTick+0x148>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 8090 	bne.w	800b460 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b340:	4b4d      	ldr	r3, [pc, #308]	@ (800b478 <xTaskIncrementTick+0x14c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3301      	adds	r3, #1
 800b346:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b348:	4a4b      	ldr	r2, [pc, #300]	@ (800b478 <xTaskIncrementTick+0x14c>)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d121      	bne.n	800b398 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b354:	4b49      	ldr	r3, [pc, #292]	@ (800b47c <xTaskIncrementTick+0x150>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	603b      	str	r3, [r7, #0]
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	e7fd      	b.n	800b372 <xTaskIncrementTick+0x46>
 800b376:	4b41      	ldr	r3, [pc, #260]	@ (800b47c <xTaskIncrementTick+0x150>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	4b40      	ldr	r3, [pc, #256]	@ (800b480 <xTaskIncrementTick+0x154>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a3e      	ldr	r2, [pc, #248]	@ (800b47c <xTaskIncrementTick+0x150>)
 800b382:	6013      	str	r3, [r2, #0]
 800b384:	4a3e      	ldr	r2, [pc, #248]	@ (800b480 <xTaskIncrementTick+0x154>)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	4b3e      	ldr	r3, [pc, #248]	@ (800b484 <xTaskIncrementTick+0x158>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3301      	adds	r3, #1
 800b390:	4a3c      	ldr	r2, [pc, #240]	@ (800b484 <xTaskIncrementTick+0x158>)
 800b392:	6013      	str	r3, [r2, #0]
 800b394:	f000 fafc 	bl	800b990 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b398:	4b3b      	ldr	r3, [pc, #236]	@ (800b488 <xTaskIncrementTick+0x15c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d349      	bcc.n	800b436 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a2:	4b36      	ldr	r3, [pc, #216]	@ (800b47c <xTaskIncrementTick+0x150>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d104      	bne.n	800b3b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ac:	4b36      	ldr	r3, [pc, #216]	@ (800b488 <xTaskIncrementTick+0x15c>)
 800b3ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3b2:	601a      	str	r2, [r3, #0]
					break;
 800b3b4:	e03f      	b.n	800b436 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b6:	4b31      	ldr	r3, [pc, #196]	@ (800b47c <xTaskIncrementTick+0x150>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d203      	bcs.n	800b3d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3ce:	4a2e      	ldr	r2, [pc, #184]	@ (800b488 <xTaskIncrementTick+0x15c>)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3d4:	e02f      	b.n	800b436 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe ff82 	bl	800a2e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d004      	beq.n	800b3f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	3318      	adds	r3, #24
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fe ff79 	bl	800a2e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3f6:	4b25      	ldr	r3, [pc, #148]	@ (800b48c <xTaskIncrementTick+0x160>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d903      	bls.n	800b406 <xTaskIncrementTick+0xda>
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b402:	4a22      	ldr	r2, [pc, #136]	@ (800b48c <xTaskIncrementTick+0x160>)
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	4a1f      	ldr	r2, [pc, #124]	@ (800b490 <xTaskIncrementTick+0x164>)
 800b414:	441a      	add	r2, r3
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	3304      	adds	r3, #4
 800b41a:	4619      	mov	r1, r3
 800b41c:	4610      	mov	r0, r2
 800b41e:	f7fe ff04 	bl	800a22a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b426:	4b1b      	ldr	r3, [pc, #108]	@ (800b494 <xTaskIncrementTick+0x168>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d3b8      	bcc.n	800b3a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b430:	2301      	movs	r3, #1
 800b432:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b434:	e7b5      	b.n	800b3a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b436:	4b17      	ldr	r3, [pc, #92]	@ (800b494 <xTaskIncrementTick+0x168>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43c:	4914      	ldr	r1, [pc, #80]	@ (800b490 <xTaskIncrementTick+0x164>)
 800b43e:	4613      	mov	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	440b      	add	r3, r1
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d901      	bls.n	800b452 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b44e:	2301      	movs	r3, #1
 800b450:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b452:	4b11      	ldr	r3, [pc, #68]	@ (800b498 <xTaskIncrementTick+0x16c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b45a:	2301      	movs	r3, #1
 800b45c:	617b      	str	r3, [r7, #20]
 800b45e:	e004      	b.n	800b46a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b460:	4b0e      	ldr	r3, [pc, #56]	@ (800b49c <xTaskIncrementTick+0x170>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	4a0d      	ldr	r2, [pc, #52]	@ (800b49c <xTaskIncrementTick+0x170>)
 800b468:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b46a:	697b      	ldr	r3, [r7, #20]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3718      	adds	r7, #24
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	2000931c 	.word	0x2000931c
 800b478:	200092f8 	.word	0x200092f8
 800b47c:	200092ac 	.word	0x200092ac
 800b480:	200092b0 	.word	0x200092b0
 800b484:	2000930c 	.word	0x2000930c
 800b488:	20009314 	.word	0x20009314
 800b48c:	200092fc 	.word	0x200092fc
 800b490:	20008e24 	.word	0x20008e24
 800b494:	20008e20 	.word	0x20008e20
 800b498:	20009308 	.word	0x20009308
 800b49c:	20009304 	.word	0x20009304

0800b4a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4a6:	4b28      	ldr	r3, [pc, #160]	@ (800b548 <vTaskSwitchContext+0xa8>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4ae:	4b27      	ldr	r3, [pc, #156]	@ (800b54c <vTaskSwitchContext+0xac>)
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4b4:	e042      	b.n	800b53c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b4b6:	4b25      	ldr	r3, [pc, #148]	@ (800b54c <vTaskSwitchContext+0xac>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4bc:	4b24      	ldr	r3, [pc, #144]	@ (800b550 <vTaskSwitchContext+0xb0>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	e011      	b.n	800b4e8 <vTaskSwitchContext+0x48>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10b      	bne.n	800b4e2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	607b      	str	r3, [r7, #4]
}
 800b4dc:	bf00      	nop
 800b4de:	bf00      	nop
 800b4e0:	e7fd      	b.n	800b4de <vTaskSwitchContext+0x3e>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	60fb      	str	r3, [r7, #12]
 800b4e8:	491a      	ldr	r1, [pc, #104]	@ (800b554 <vTaskSwitchContext+0xb4>)
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d0e3      	beq.n	800b4c4 <vTaskSwitchContext+0x24>
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4a13      	ldr	r2, [pc, #76]	@ (800b554 <vTaskSwitchContext+0xb4>)
 800b508:	4413      	add	r3, r2
 800b50a:	60bb      	str	r3, [r7, #8]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	605a      	str	r2, [r3, #4]
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	685a      	ldr	r2, [r3, #4]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	3308      	adds	r3, #8
 800b51e:	429a      	cmp	r2, r3
 800b520:	d104      	bne.n	800b52c <vTaskSwitchContext+0x8c>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	605a      	str	r2, [r3, #4]
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	4a09      	ldr	r2, [pc, #36]	@ (800b558 <vTaskSwitchContext+0xb8>)
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	4a06      	ldr	r2, [pc, #24]	@ (800b550 <vTaskSwitchContext+0xb0>)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6013      	str	r3, [r2, #0]
}
 800b53c:	bf00      	nop
 800b53e:	3714      	adds	r7, #20
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr
 800b548:	2000931c 	.word	0x2000931c
 800b54c:	20009308 	.word	0x20009308
 800b550:	200092fc 	.word	0x200092fc
 800b554:	20008e24 	.word	0x20008e24
 800b558:	20008e20 	.word	0x20008e20

0800b55c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10b      	bne.n	800b584 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	60fb      	str	r3, [r7, #12]
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	e7fd      	b.n	800b580 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b584:	4b07      	ldr	r3, [pc, #28]	@ (800b5a4 <vTaskPlaceOnEventList+0x48>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3318      	adds	r3, #24
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7fe fe70 	bl	800a272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b592:	2101      	movs	r1, #1
 800b594:	6838      	ldr	r0, [r7, #0]
 800b596:	f000 faa9 	bl	800baec <prvAddCurrentTaskToDelayedList>
}
 800b59a:	bf00      	nop
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20008e20 	.word	0x20008e20

0800b5a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	617b      	str	r3, [r7, #20]
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	e7fd      	b.n	800b5ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b5fc <vTaskPlaceOnEventListRestricted+0x54>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3318      	adds	r3, #24
 800b5d8:	4619      	mov	r1, r3
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7fe fe25 	bl	800a22a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b5e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5ec:	6879      	ldr	r1, [r7, #4]
 800b5ee:	68b8      	ldr	r0, [r7, #8]
 800b5f0:	f000 fa7c 	bl	800baec <prvAddCurrentTaskToDelayedList>
	}
 800b5f4:	bf00      	nop
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	20008e20 	.word	0x20008e20

0800b600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d10b      	bne.n	800b62e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60fb      	str	r3, [r7, #12]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3318      	adds	r3, #24
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fe56 	bl	800a2e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b638:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b0 <xTaskRemoveFromEventList+0xb0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d11d      	bne.n	800b67c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	3304      	adds	r3, #4
 800b644:	4618      	mov	r0, r3
 800b646:	f7fe fe4d 	bl	800a2e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b64e:	4b19      	ldr	r3, [pc, #100]	@ (800b6b4 <xTaskRemoveFromEventList+0xb4>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	429a      	cmp	r2, r3
 800b654:	d903      	bls.n	800b65e <xTaskRemoveFromEventList+0x5e>
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b65a:	4a16      	ldr	r2, [pc, #88]	@ (800b6b4 <xTaskRemoveFromEventList+0xb4>)
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b662:	4613      	mov	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4a13      	ldr	r2, [pc, #76]	@ (800b6b8 <xTaskRemoveFromEventList+0xb8>)
 800b66c:	441a      	add	r2, r3
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	3304      	adds	r3, #4
 800b672:	4619      	mov	r1, r3
 800b674:	4610      	mov	r0, r2
 800b676:	f7fe fdd8 	bl	800a22a <vListInsertEnd>
 800b67a:	e005      	b.n	800b688 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	3318      	adds	r3, #24
 800b680:	4619      	mov	r1, r3
 800b682:	480e      	ldr	r0, [pc, #56]	@ (800b6bc <xTaskRemoveFromEventList+0xbc>)
 800b684:	f7fe fdd1 	bl	800a22a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b68c:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c0 <xTaskRemoveFromEventList+0xc0>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b692:	429a      	cmp	r2, r3
 800b694:	d905      	bls.n	800b6a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b696:	2301      	movs	r3, #1
 800b698:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b69a:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c4 <xTaskRemoveFromEventList+0xc4>)
 800b69c:	2201      	movs	r2, #1
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	e001      	b.n	800b6a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6a6:	697b      	ldr	r3, [r7, #20]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	2000931c 	.word	0x2000931c
 800b6b4:	200092fc 	.word	0x200092fc
 800b6b8:	20008e24 	.word	0x20008e24
 800b6bc:	200092b4 	.word	0x200092b4
 800b6c0:	20008e20 	.word	0x20008e20
 800b6c4:	20009308 	.word	0x20009308

0800b6c8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d10b      	bne.n	800b6ee <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	60fb      	str	r3, [r7, #12]
}
 800b6e8:	bf00      	nop
 800b6ea:	bf00      	nop
 800b6ec:	e7fd      	b.n	800b6ea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b6ee:	f000 fedb 	bl	800c4a8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6f2:	4b07      	ldr	r3, [pc, #28]	@ (800b710 <vTaskSetTimeOutState+0x48>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b6fa:	4b06      	ldr	r3, [pc, #24]	@ (800b714 <vTaskSetTimeOutState+0x4c>)
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b702:	f000 ff03 	bl	800c50c <vPortExitCritical>
}
 800b706:	bf00      	nop
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	2000930c 	.word	0x2000930c
 800b714:	200092f8 	.word	0x200092f8

0800b718 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b720:	4b06      	ldr	r3, [pc, #24]	@ (800b73c <vTaskInternalSetTimeOutState+0x24>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b728:	4b05      	ldr	r3, [pc, #20]	@ (800b740 <vTaskInternalSetTimeOutState+0x28>)
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	605a      	str	r2, [r3, #4]
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	2000930c 	.word	0x2000930c
 800b740:	200092f8 	.word	0x200092f8

0800b744 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b088      	sub	sp, #32
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10b      	bne.n	800b76c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	613b      	str	r3, [r7, #16]
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	e7fd      	b.n	800b768 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10b      	bne.n	800b78a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	60fb      	str	r3, [r7, #12]
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop
 800b788:	e7fd      	b.n	800b786 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b78a:	f000 fe8d 	bl	800c4a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b78e:	4b1d      	ldr	r3, [pc, #116]	@ (800b804 <xTaskCheckForTimeOut+0xc0>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	69ba      	ldr	r2, [r7, #24]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7a6:	d102      	bne.n	800b7ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	61fb      	str	r3, [r7, #28]
 800b7ac:	e023      	b.n	800b7f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	4b15      	ldr	r3, [pc, #84]	@ (800b808 <xTaskCheckForTimeOut+0xc4>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d007      	beq.n	800b7ca <xTaskCheckForTimeOut+0x86>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	69ba      	ldr	r2, [r7, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d302      	bcc.n	800b7ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	61fb      	str	r3, [r7, #28]
 800b7c8:	e015      	b.n	800b7f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	697a      	ldr	r2, [r7, #20]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d20b      	bcs.n	800b7ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	1ad2      	subs	r2, r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ff99 	bl	800b718 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	61fb      	str	r3, [r7, #28]
 800b7ea:	e004      	b.n	800b7f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7f6:	f000 fe89 	bl	800c50c <vPortExitCritical>

	return xReturn;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3720      	adds	r7, #32
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}
 800b804:	200092f8 	.word	0x200092f8
 800b808:	2000930c 	.word	0x2000930c

0800b80c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b810:	4b03      	ldr	r3, [pc, #12]	@ (800b820 <vTaskMissedYield+0x14>)
 800b812:	2201      	movs	r2, #1
 800b814:	601a      	str	r2, [r3, #0]
}
 800b816:	bf00      	nop
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr
 800b820:	20009308 	.word	0x20009308

0800b824 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b82c:	f000 f852 	bl	800b8d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b830:	4b06      	ldr	r3, [pc, #24]	@ (800b84c <prvIdleTask+0x28>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d9f9      	bls.n	800b82c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b838:	4b05      	ldr	r3, [pc, #20]	@ (800b850 <prvIdleTask+0x2c>)
 800b83a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b848:	e7f0      	b.n	800b82c <prvIdleTask+0x8>
 800b84a:	bf00      	nop
 800b84c:	20008e24 	.word	0x20008e24
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
 800b85e:	e00c      	b.n	800b87a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4a12      	ldr	r2, [pc, #72]	@ (800b8b4 <prvInitialiseTaskLists+0x60>)
 800b86c:	4413      	add	r3, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f7fe fcae 	bl	800a1d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3301      	adds	r3, #1
 800b878:	607b      	str	r3, [r7, #4]
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b37      	cmp	r3, #55	@ 0x37
 800b87e:	d9ef      	bls.n	800b860 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b880:	480d      	ldr	r0, [pc, #52]	@ (800b8b8 <prvInitialiseTaskLists+0x64>)
 800b882:	f7fe fca5 	bl	800a1d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b886:	480d      	ldr	r0, [pc, #52]	@ (800b8bc <prvInitialiseTaskLists+0x68>)
 800b888:	f7fe fca2 	bl	800a1d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b88c:	480c      	ldr	r0, [pc, #48]	@ (800b8c0 <prvInitialiseTaskLists+0x6c>)
 800b88e:	f7fe fc9f 	bl	800a1d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b892:	480c      	ldr	r0, [pc, #48]	@ (800b8c4 <prvInitialiseTaskLists+0x70>)
 800b894:	f7fe fc9c 	bl	800a1d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b898:	480b      	ldr	r0, [pc, #44]	@ (800b8c8 <prvInitialiseTaskLists+0x74>)
 800b89a:	f7fe fc99 	bl	800a1d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b89e:	4b0b      	ldr	r3, [pc, #44]	@ (800b8cc <prvInitialiseTaskLists+0x78>)
 800b8a0:	4a05      	ldr	r2, [pc, #20]	@ (800b8b8 <prvInitialiseTaskLists+0x64>)
 800b8a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b8d0 <prvInitialiseTaskLists+0x7c>)
 800b8a6:	4a05      	ldr	r2, [pc, #20]	@ (800b8bc <prvInitialiseTaskLists+0x68>)
 800b8a8:	601a      	str	r2, [r3, #0]
}
 800b8aa:	bf00      	nop
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20008e24 	.word	0x20008e24
 800b8b8:	20009284 	.word	0x20009284
 800b8bc:	20009298 	.word	0x20009298
 800b8c0:	200092b4 	.word	0x200092b4
 800b8c4:	200092c8 	.word	0x200092c8
 800b8c8:	200092e0 	.word	0x200092e0
 800b8cc:	200092ac 	.word	0x200092ac
 800b8d0:	200092b0 	.word	0x200092b0

0800b8d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8da:	e019      	b.n	800b910 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8dc:	f000 fde4 	bl	800c4a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e0:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <prvCheckTasksWaitingTermination+0x50>)
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe fcf9 	bl	800a2e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b928 <prvCheckTasksWaitingTermination+0x54>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b928 <prvCheckTasksWaitingTermination+0x54>)
 800b8fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b92c <prvCheckTasksWaitingTermination+0x58>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3b01      	subs	r3, #1
 800b902:	4a0a      	ldr	r2, [pc, #40]	@ (800b92c <prvCheckTasksWaitingTermination+0x58>)
 800b904:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b906:	f000 fe01 	bl	800c50c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f810 	bl	800b930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b910:	4b06      	ldr	r3, [pc, #24]	@ (800b92c <prvCheckTasksWaitingTermination+0x58>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1e1      	bne.n	800b8dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b918:	bf00      	nop
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	200092c8 	.word	0x200092c8
 800b928:	200092f4 	.word	0x200092f4
 800b92c:	200092dc 	.word	0x200092dc

0800b930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d108      	bne.n	800b954 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b946:	4618      	mov	r0, r3
 800b948:	f000 ff9e 	bl	800c888 <vPortFree>
				vPortFree( pxTCB );
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 ff9b 	bl	800c888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b952:	e019      	b.n	800b988 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d103      	bne.n	800b966 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 ff92 	bl	800c888 <vPortFree>
	}
 800b964:	e010      	b.n	800b988 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d00b      	beq.n	800b988 <prvDeleteTCB+0x58>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b974:	f383 8811 	msr	BASEPRI, r3
 800b978:	f3bf 8f6f 	isb	sy
 800b97c:	f3bf 8f4f 	dsb	sy
 800b980:	60fb      	str	r3, [r7, #12]
}
 800b982:	bf00      	nop
 800b984:	bf00      	nop
 800b986:	e7fd      	b.n	800b984 <prvDeleteTCB+0x54>
	}
 800b988:	bf00      	nop
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b996:	4b0c      	ldr	r3, [pc, #48]	@ (800b9c8 <prvResetNextTaskUnblockTime+0x38>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d104      	bne.n	800b9aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <prvResetNextTaskUnblockTime+0x3c>)
 800b9a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9a8:	e008      	b.n	800b9bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9aa:	4b07      	ldr	r3, [pc, #28]	@ (800b9c8 <prvResetNextTaskUnblockTime+0x38>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	4a04      	ldr	r2, [pc, #16]	@ (800b9cc <prvResetNextTaskUnblockTime+0x3c>)
 800b9ba:	6013      	str	r3, [r2, #0]
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	200092ac 	.word	0x200092ac
 800b9cc:	20009314 	.word	0x20009314

0800b9d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba04 <xTaskGetSchedulerState+0x34>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d102      	bne.n	800b9e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	607b      	str	r3, [r7, #4]
 800b9e2:	e008      	b.n	800b9f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9e4:	4b08      	ldr	r3, [pc, #32]	@ (800ba08 <xTaskGetSchedulerState+0x38>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	607b      	str	r3, [r7, #4]
 800b9f0:	e001      	b.n	800b9f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9f6:	687b      	ldr	r3, [r7, #4]
	}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20009300 	.word	0x20009300
 800ba08:	2000931c 	.word	0x2000931c

0800ba0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d058      	beq.n	800bad4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba22:	4b2f      	ldr	r3, [pc, #188]	@ (800bae0 <xTaskPriorityDisinherit+0xd4>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d00b      	beq.n	800ba44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	60fb      	str	r3, [r7, #12]
}
 800ba3e:	bf00      	nop
 800ba40:	bf00      	nop
 800ba42:	e7fd      	b.n	800ba40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d10b      	bne.n	800ba64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60bb      	str	r3, [r7, #8]
}
 800ba5e:	bf00      	nop
 800ba60:	bf00      	nop
 800ba62:	e7fd      	b.n	800ba60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba68:	1e5a      	subs	r2, r3, #1
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d02c      	beq.n	800bad4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d128      	bne.n	800bad4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe fc2c 	bl	800a2e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa4:	4b0f      	ldr	r3, [pc, #60]	@ (800bae4 <xTaskPriorityDisinherit+0xd8>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d903      	bls.n	800bab4 <xTaskPriorityDisinherit+0xa8>
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab0:	4a0c      	ldr	r2, [pc, #48]	@ (800bae4 <xTaskPriorityDisinherit+0xd8>)
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bab8:	4613      	mov	r3, r2
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4a09      	ldr	r2, [pc, #36]	@ (800bae8 <xTaskPriorityDisinherit+0xdc>)
 800bac2:	441a      	add	r2, r3
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	3304      	adds	r3, #4
 800bac8:	4619      	mov	r1, r3
 800baca:	4610      	mov	r0, r2
 800bacc:	f7fe fbad 	bl	800a22a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bad0:	2301      	movs	r3, #1
 800bad2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bad4:	697b      	ldr	r3, [r7, #20]
	}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	20008e20 	.word	0x20008e20
 800bae4:	200092fc 	.word	0x200092fc
 800bae8:	20008e24 	.word	0x20008e24

0800baec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800baf6:	4b21      	ldr	r3, [pc, #132]	@ (800bb7c <prvAddCurrentTaskToDelayedList+0x90>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bafc:	4b20      	ldr	r3, [pc, #128]	@ (800bb80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fbee 	bl	800a2e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb0e:	d10a      	bne.n	800bb26 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d007      	beq.n	800bb26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb16:	4b1a      	ldr	r3, [pc, #104]	@ (800bb80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	4819      	ldr	r0, [pc, #100]	@ (800bb84 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb20:	f7fe fb83 	bl	800a22a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb24:	e026      	b.n	800bb74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb2e:	4b14      	ldr	r3, [pc, #80]	@ (800bb80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d209      	bcs.n	800bb52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb3e:	4b12      	ldr	r3, [pc, #72]	@ (800bb88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	4b0f      	ldr	r3, [pc, #60]	@ (800bb80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	f7fe fb91 	bl	800a272 <vListInsert>
}
 800bb50:	e010      	b.n	800bb74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb52:	4b0e      	ldr	r3, [pc, #56]	@ (800bb8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	4b0a      	ldr	r3, [pc, #40]	@ (800bb80 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f7fe fb87 	bl	800a272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb64:	4b0a      	ldr	r3, [pc, #40]	@ (800bb90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d202      	bcs.n	800bb74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb6e:	4a08      	ldr	r2, [pc, #32]	@ (800bb90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	6013      	str	r3, [r2, #0]
}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	200092f8 	.word	0x200092f8
 800bb80:	20008e20 	.word	0x20008e20
 800bb84:	200092e0 	.word	0x200092e0
 800bb88:	200092b0 	.word	0x200092b0
 800bb8c:	200092ac 	.word	0x200092ac
 800bb90:	20009314 	.word	0x20009314

0800bb94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b08a      	sub	sp, #40	@ 0x28
 800bb98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb9e:	f000 fb13 	bl	800c1c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bba2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc18 <xTimerCreateTimerTask+0x84>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d021      	beq.n	800bbee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bbb2:	1d3a      	adds	r2, r7, #4
 800bbb4:	f107 0108 	add.w	r1, r7, #8
 800bbb8:	f107 030c 	add.w	r3, r7, #12
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe faed 	bl	800a19c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bbc2:	6879      	ldr	r1, [r7, #4]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	9202      	str	r2, [sp, #8]
 800bbca:	9301      	str	r3, [sp, #4]
 800bbcc:	2302      	movs	r3, #2
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	460a      	mov	r2, r1
 800bbd4:	4911      	ldr	r1, [pc, #68]	@ (800bc1c <xTimerCreateTimerTask+0x88>)
 800bbd6:	4812      	ldr	r0, [pc, #72]	@ (800bc20 <xTimerCreateTimerTask+0x8c>)
 800bbd8:	f7ff f8a8 	bl	800ad2c <xTaskCreateStatic>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	4a11      	ldr	r2, [pc, #68]	@ (800bc24 <xTimerCreateTimerTask+0x90>)
 800bbe0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbe2:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <xTimerCreateTimerTask+0x90>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbea:	2301      	movs	r3, #1
 800bbec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10b      	bne.n	800bc0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	613b      	str	r3, [r7, #16]
}
 800bc06:	bf00      	nop
 800bc08:	bf00      	nop
 800bc0a:	e7fd      	b.n	800bc08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc0c:	697b      	ldr	r3, [r7, #20]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20009350 	.word	0x20009350
 800bc1c:	0801d7f4 	.word	0x0801d7f4
 800bc20:	0800bd61 	.word	0x0800bd61
 800bc24:	20009354 	.word	0x20009354

0800bc28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08a      	sub	sp, #40	@ 0x28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10b      	bne.n	800bc58 <xTimerGenericCommand+0x30>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	623b      	str	r3, [r7, #32]
}
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
 800bc56:	e7fd      	b.n	800bc54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc58:	4b19      	ldr	r3, [pc, #100]	@ (800bcc0 <xTimerGenericCommand+0x98>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d02a      	beq.n	800bcb6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2b05      	cmp	r3, #5
 800bc70:	dc18      	bgt.n	800bca4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc72:	f7ff fead 	bl	800b9d0 <xTaskGetSchedulerState>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d109      	bne.n	800bc90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc7c:	4b10      	ldr	r3, [pc, #64]	@ (800bcc0 <xTimerGenericCommand+0x98>)
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	f107 0110 	add.w	r1, r7, #16
 800bc84:	2300      	movs	r3, #0
 800bc86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc88:	f7fe fc60 	bl	800a54c <xQueueGenericSend>
 800bc8c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc8e:	e012      	b.n	800bcb6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc90:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc0 <xTimerGenericCommand+0x98>)
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	f107 0110 	add.w	r1, r7, #16
 800bc98:	2300      	movs	r3, #0
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f7fe fc56 	bl	800a54c <xQueueGenericSend>
 800bca0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bca2:	e008      	b.n	800bcb6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bca4:	4b06      	ldr	r3, [pc, #24]	@ (800bcc0 <xTimerGenericCommand+0x98>)
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	f107 0110 	add.w	r1, r7, #16
 800bcac:	2300      	movs	r3, #0
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	f7fe fd4e 	bl	800a750 <xQueueGenericSendFromISR>
 800bcb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3728      	adds	r7, #40	@ 0x28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}
 800bcc0:	20009350 	.word	0x20009350

0800bcc4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcce:	4b23      	ldr	r3, [pc, #140]	@ (800bd5c <prvProcessExpiredTimer+0x98>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7fe fb01 	bl	800a2e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d023      	beq.n	800bd38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	699a      	ldr	r2, [r3, #24]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	18d1      	adds	r1, r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	6978      	ldr	r0, [r7, #20]
 800bcfe:	f000 f8d5 	bl	800beac <prvInsertTimerInActiveList>
 800bd02:	4603      	mov	r3, r0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d020      	beq.n	800bd4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd08:	2300      	movs	r3, #0
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	2100      	movs	r1, #0
 800bd12:	6978      	ldr	r0, [r7, #20]
 800bd14:	f7ff ff88 	bl	800bc28 <xTimerGenericCommand>
 800bd18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d114      	bne.n	800bd4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bd20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	60fb      	str	r3, [r7, #12]
}
 800bd32:	bf00      	nop
 800bd34:	bf00      	nop
 800bd36:	e7fd      	b.n	800bd34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd3e:	f023 0301 	bic.w	r3, r3, #1
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	6978      	ldr	r0, [r7, #20]
 800bd50:	4798      	blx	r3
}
 800bd52:	bf00      	nop
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	20009348 	.word	0x20009348

0800bd60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd68:	f107 0308 	add.w	r3, r7, #8
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 f859 	bl	800be24 <prvGetNextExpireTime>
 800bd72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	4619      	mov	r1, r3
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f000 f805 	bl	800bd88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd7e:	f000 f8d7 	bl	800bf30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd82:	bf00      	nop
 800bd84:	e7f0      	b.n	800bd68 <prvTimerTask+0x8>
	...

0800bd88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd92:	f7ff fa0f 	bl	800b1b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd96:	f107 0308 	add.w	r3, r7, #8
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f000 f866 	bl	800be6c <prvSampleTimeNow>
 800bda0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d130      	bne.n	800be0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10a      	bne.n	800bdc4 <prvProcessTimerOrBlockTask+0x3c>
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d806      	bhi.n	800bdc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bdb6:	f7ff fa0b 	bl	800b1d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bdba:	68f9      	ldr	r1, [r7, #12]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f7ff ff81 	bl	800bcc4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bdc2:	e024      	b.n	800be0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d008      	beq.n	800bddc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bdca:	4b13      	ldr	r3, [pc, #76]	@ (800be18 <prvProcessTimerOrBlockTask+0x90>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <prvProcessTimerOrBlockTask+0x50>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e000      	b.n	800bdda <prvProcessTimerOrBlockTask+0x52>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bddc:	4b0f      	ldr	r3, [pc, #60]	@ (800be1c <prvProcessTimerOrBlockTask+0x94>)
 800bdde:	6818      	ldr	r0, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4619      	mov	r1, r3
 800bdea:	f7fe ff6b 	bl	800acc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdee:	f7ff f9ef 	bl	800b1d0 <xTaskResumeAll>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10a      	bne.n	800be0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdf8:	4b09      	ldr	r3, [pc, #36]	@ (800be20 <prvProcessTimerOrBlockTask+0x98>)
 800bdfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	f3bf 8f6f 	isb	sy
}
 800be08:	e001      	b.n	800be0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be0a:	f7ff f9e1 	bl	800b1d0 <xTaskResumeAll>
}
 800be0e:	bf00      	nop
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	2000934c 	.word	0x2000934c
 800be1c:	20009350 	.word	0x20009350
 800be20:	e000ed04 	.word	0xe000ed04

0800be24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800be2c:	4b0e      	ldr	r3, [pc, #56]	@ (800be68 <prvGetNextExpireTime+0x44>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d101      	bne.n	800be3a <prvGetNextExpireTime+0x16>
 800be36:	2201      	movs	r2, #1
 800be38:	e000      	b.n	800be3c <prvGetNextExpireTime+0x18>
 800be3a:	2200      	movs	r2, #0
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d105      	bne.n	800be54 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be48:	4b07      	ldr	r3, [pc, #28]	@ (800be68 <prvGetNextExpireTime+0x44>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	e001      	b.n	800be58 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be54:	2300      	movs	r3, #0
 800be56:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be58:	68fb      	ldr	r3, [r7, #12]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
 800be66:	bf00      	nop
 800be68:	20009348 	.word	0x20009348

0800be6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be74:	f7ff fa4a 	bl	800b30c <xTaskGetTickCount>
 800be78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bea8 <prvSampleTimeNow+0x3c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	429a      	cmp	r2, r3
 800be82:	d205      	bcs.n	800be90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be84:	f000 f93a 	bl	800c0fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	e002      	b.n	800be96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be96:	4a04      	ldr	r2, [pc, #16]	@ (800bea8 <prvSampleTimeNow+0x3c>)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be9c:	68fb      	ldr	r3, [r7, #12]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20009358 	.word	0x20009358

0800beac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b086      	sub	sp, #24
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	607a      	str	r2, [r7, #4]
 800beb8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800beba:	2300      	movs	r3, #0
 800bebc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d812      	bhi.n	800bef8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	1ad2      	subs	r2, r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d302      	bcc.n	800bee6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bee0:	2301      	movs	r3, #1
 800bee2:	617b      	str	r3, [r7, #20]
 800bee4:	e01b      	b.n	800bf1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bee6:	4b10      	ldr	r3, [pc, #64]	@ (800bf28 <prvInsertTimerInActiveList+0x7c>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3304      	adds	r3, #4
 800beee:	4619      	mov	r1, r3
 800bef0:	4610      	mov	r0, r2
 800bef2:	f7fe f9be 	bl	800a272 <vListInsert>
 800bef6:	e012      	b.n	800bf1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d206      	bcs.n	800bf0e <prvInsertTimerInActiveList+0x62>
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d302      	bcc.n	800bf0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	617b      	str	r3, [r7, #20]
 800bf0c:	e007      	b.n	800bf1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf0e:	4b07      	ldr	r3, [pc, #28]	@ (800bf2c <prvInsertTimerInActiveList+0x80>)
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7fe f9aa 	bl	800a272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf1e:	697b      	ldr	r3, [r7, #20]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	2000934c 	.word	0x2000934c
 800bf2c:	20009348 	.word	0x20009348

0800bf30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08e      	sub	sp, #56	@ 0x38
 800bf34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf36:	e0ce      	b.n	800c0d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	da19      	bge.n	800bf72 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf3e:	1d3b      	adds	r3, r7, #4
 800bf40:	3304      	adds	r3, #4
 800bf42:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10b      	bne.n	800bf62 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	61fb      	str	r3, [r7, #28]
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	e7fd      	b.n	800bf5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf68:	6850      	ldr	r0, [r2, #4]
 800bf6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf6c:	6892      	ldr	r2, [r2, #8]
 800bf6e:	4611      	mov	r1, r2
 800bf70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f2c0 80ae 	blt.w	800c0d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d004      	beq.n	800bf90 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe f9aa 	bl	800a2e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf90:	463b      	mov	r3, r7
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff ff6a 	bl	800be6c <prvSampleTimeNow>
 800bf98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	f200 8097 	bhi.w	800c0d0 <prvProcessReceivedCommands+0x1a0>
 800bfa2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa8 <prvProcessReceivedCommands+0x78>)
 800bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa8:	0800bfd1 	.word	0x0800bfd1
 800bfac:	0800bfd1 	.word	0x0800bfd1
 800bfb0:	0800bfd1 	.word	0x0800bfd1
 800bfb4:	0800c047 	.word	0x0800c047
 800bfb8:	0800c05b 	.word	0x0800c05b
 800bfbc:	0800c0a7 	.word	0x0800c0a7
 800bfc0:	0800bfd1 	.word	0x0800bfd1
 800bfc4:	0800bfd1 	.word	0x0800bfd1
 800bfc8:	0800c047 	.word	0x0800c047
 800bfcc:	0800c05b 	.word	0x0800c05b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd6:	f043 0301 	orr.w	r3, r3, #1
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	18d1      	adds	r1, r2, r3
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bff0:	f7ff ff5c 	bl	800beac <prvInsertTimerInActiveList>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d06c      	beq.n	800c0d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c000:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c008:	f003 0304 	and.w	r3, r3, #4
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d061      	beq.n	800c0d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	441a      	add	r2, r3
 800c018:	2300      	movs	r3, #0
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	2300      	movs	r3, #0
 800c01e:	2100      	movs	r1, #0
 800c020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c022:	f7ff fe01 	bl	800bc28 <xTimerGenericCommand>
 800c026:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d152      	bne.n	800c0d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	61bb      	str	r3, [r7, #24]
}
 800c040:	bf00      	nop
 800c042:	bf00      	nop
 800c044:	e7fd      	b.n	800c042 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c04c:	f023 0301 	bic.w	r3, r3, #1
 800c050:	b2da      	uxtb	r2, r3
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c058:	e03d      	b.n	800c0d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c05a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c060:	f043 0301 	orr.w	r3, r3, #1
 800c064:	b2da      	uxtb	r2, r3
 800c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c068:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10b      	bne.n	800c092 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	617b      	str	r3, [r7, #20]
}
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	e7fd      	b.n	800c08e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c094:	699a      	ldr	r2, [r3, #24]
 800c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c098:	18d1      	adds	r1, r2, r3
 800c09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a0:	f7ff ff04 	bl	800beac <prvInsertTimerInActiveList>
					break;
 800c0a4:	e017      	b.n	800c0d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ac:	f003 0302 	and.w	r3, r3, #2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d103      	bne.n	800c0bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c0b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b6:	f000 fbe7 	bl	800c888 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0ba:	e00c      	b.n	800c0d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0c2:	f023 0301 	bic.w	r3, r3, #1
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c0ce:	e002      	b.n	800c0d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c0d0:	bf00      	nop
 800c0d2:	e000      	b.n	800c0d6 <prvProcessReceivedCommands+0x1a6>
					break;
 800c0d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0d6:	4b08      	ldr	r3, [pc, #32]	@ (800c0f8 <prvProcessReceivedCommands+0x1c8>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	1d39      	adds	r1, r7, #4
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe fbd4 	bl	800a88c <xQueueReceive>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f47f af26 	bne.w	800bf38 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c0ec:	bf00      	nop
 800c0ee:	bf00      	nop
 800c0f0:	3730      	adds	r7, #48	@ 0x30
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	20009350 	.word	0x20009350

0800c0fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b088      	sub	sp, #32
 800c100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c102:	e049      	b.n	800c198 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c104:	4b2e      	ldr	r3, [pc, #184]	@ (800c1c0 <prvSwitchTimerLists+0xc4>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10e:	4b2c      	ldr	r3, [pc, #176]	@ (800c1c0 <prvSwitchTimerLists+0xc4>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3304      	adds	r3, #4
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe f8e1 	bl	800a2e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	68f8      	ldr	r0, [r7, #12]
 800c128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c130:	f003 0304 	and.w	r3, r3, #4
 800c134:	2b00      	cmp	r3, #0
 800c136:	d02f      	beq.n	800c198 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	4413      	add	r3, r2
 800c140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	429a      	cmp	r2, r3
 800c148:	d90e      	bls.n	800c168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68ba      	ldr	r2, [r7, #8]
 800c14e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c156:	4b1a      	ldr	r3, [pc, #104]	@ (800c1c0 <prvSwitchTimerLists+0xc4>)
 800c158:	681a      	ldr	r2, [r3, #0]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3304      	adds	r3, #4
 800c15e:	4619      	mov	r1, r3
 800c160:	4610      	mov	r0, r2
 800c162:	f7fe f886 	bl	800a272 <vListInsert>
 800c166:	e017      	b.n	800c198 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c168:	2300      	movs	r3, #0
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	2300      	movs	r3, #0
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	2100      	movs	r1, #0
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f7ff fd58 	bl	800bc28 <xTimerGenericCommand>
 800c178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d10b      	bne.n	800c198 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c184:	f383 8811 	msr	BASEPRI, r3
 800c188:	f3bf 8f6f 	isb	sy
 800c18c:	f3bf 8f4f 	dsb	sy
 800c190:	603b      	str	r3, [r7, #0]
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c198:	4b09      	ldr	r3, [pc, #36]	@ (800c1c0 <prvSwitchTimerLists+0xc4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1b0      	bne.n	800c104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c1a2:	4b07      	ldr	r3, [pc, #28]	@ (800c1c0 <prvSwitchTimerLists+0xc4>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c1a8:	4b06      	ldr	r3, [pc, #24]	@ (800c1c4 <prvSwitchTimerLists+0xc8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a04      	ldr	r2, [pc, #16]	@ (800c1c0 <prvSwitchTimerLists+0xc4>)
 800c1ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c1b0:	4a04      	ldr	r2, [pc, #16]	@ (800c1c4 <prvSwitchTimerLists+0xc8>)
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	6013      	str	r3, [r2, #0]
}
 800c1b6:	bf00      	nop
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20009348 	.word	0x20009348
 800c1c4:	2000934c 	.word	0x2000934c

0800c1c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1ce:	f000 f96b 	bl	800c4a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1d2:	4b15      	ldr	r3, [pc, #84]	@ (800c228 <prvCheckForValidListAndQueue+0x60>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d120      	bne.n	800c21c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1da:	4814      	ldr	r0, [pc, #80]	@ (800c22c <prvCheckForValidListAndQueue+0x64>)
 800c1dc:	f7fd fff8 	bl	800a1d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1e0:	4813      	ldr	r0, [pc, #76]	@ (800c230 <prvCheckForValidListAndQueue+0x68>)
 800c1e2:	f7fd fff5 	bl	800a1d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1e6:	4b13      	ldr	r3, [pc, #76]	@ (800c234 <prvCheckForValidListAndQueue+0x6c>)
 800c1e8:	4a10      	ldr	r2, [pc, #64]	@ (800c22c <prvCheckForValidListAndQueue+0x64>)
 800c1ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1ec:	4b12      	ldr	r3, [pc, #72]	@ (800c238 <prvCheckForValidListAndQueue+0x70>)
 800c1ee:	4a10      	ldr	r2, [pc, #64]	@ (800c230 <prvCheckForValidListAndQueue+0x68>)
 800c1f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	4b11      	ldr	r3, [pc, #68]	@ (800c23c <prvCheckForValidListAndQueue+0x74>)
 800c1f8:	4a11      	ldr	r2, [pc, #68]	@ (800c240 <prvCheckForValidListAndQueue+0x78>)
 800c1fa:	2110      	movs	r1, #16
 800c1fc:	200a      	movs	r0, #10
 800c1fe:	f7fe f905 	bl	800a40c <xQueueGenericCreateStatic>
 800c202:	4603      	mov	r3, r0
 800c204:	4a08      	ldr	r2, [pc, #32]	@ (800c228 <prvCheckForValidListAndQueue+0x60>)
 800c206:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c208:	4b07      	ldr	r3, [pc, #28]	@ (800c228 <prvCheckForValidListAndQueue+0x60>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d005      	beq.n	800c21c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c210:	4b05      	ldr	r3, [pc, #20]	@ (800c228 <prvCheckForValidListAndQueue+0x60>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	490b      	ldr	r1, [pc, #44]	@ (800c244 <prvCheckForValidListAndQueue+0x7c>)
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fd2a 	bl	800ac70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c21c:	f000 f976 	bl	800c50c <vPortExitCritical>
}
 800c220:	bf00      	nop
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20009350 	.word	0x20009350
 800c22c:	20009320 	.word	0x20009320
 800c230:	20009334 	.word	0x20009334
 800c234:	20009348 	.word	0x20009348
 800c238:	2000934c 	.word	0x2000934c
 800c23c:	200093fc 	.word	0x200093fc
 800c240:	2000935c 	.word	0x2000935c
 800c244:	0801d7fc 	.word	0x0801d7fc

0800c248 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3b04      	subs	r3, #4
 800c258:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c260:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3b04      	subs	r3, #4
 800c266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f023 0201 	bic.w	r2, r3, #1
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	3b04      	subs	r3, #4
 800c276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c278:	4a0c      	ldr	r2, [pc, #48]	@ (800c2ac <pxPortInitialiseStack+0x64>)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3b14      	subs	r3, #20
 800c282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3b04      	subs	r3, #4
 800c28e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f06f 0202 	mvn.w	r2, #2
 800c296:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	3b20      	subs	r3, #32
 800c29c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c29e:	68fb      	ldr	r3, [r7, #12]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3714      	adds	r7, #20
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	0800c2b1 	.word	0x0800c2b1

0800c2b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c2ba:	4b13      	ldr	r3, [pc, #76]	@ (800c308 <prvTaskExitError+0x58>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2c2:	d00b      	beq.n	800c2dc <prvTaskExitError+0x2c>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	60fb      	str	r3, [r7, #12]
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <prvTaskExitError+0x28>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	60bb      	str	r3, [r7, #8]
}
 800c2ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2f0:	bf00      	nop
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0fc      	beq.n	800c2f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	20000014 	.word	0x20000014
 800c30c:	00000000 	.word	0x00000000

0800c310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c310:	4b07      	ldr	r3, [pc, #28]	@ (800c330 <pxCurrentTCBConst2>)
 800c312:	6819      	ldr	r1, [r3, #0]
 800c314:	6808      	ldr	r0, [r1, #0]
 800c316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31a:	f380 8809 	msr	PSP, r0
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f380 8811 	msr	BASEPRI, r0
 800c32a:	4770      	bx	lr
 800c32c:	f3af 8000 	nop.w

0800c330 <pxCurrentTCBConst2>:
 800c330:	20008e20 	.word	0x20008e20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c334:	bf00      	nop
 800c336:	bf00      	nop

0800c338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c338:	4808      	ldr	r0, [pc, #32]	@ (800c35c <prvPortStartFirstTask+0x24>)
 800c33a:	6800      	ldr	r0, [r0, #0]
 800c33c:	6800      	ldr	r0, [r0, #0]
 800c33e:	f380 8808 	msr	MSP, r0
 800c342:	f04f 0000 	mov.w	r0, #0
 800c346:	f380 8814 	msr	CONTROL, r0
 800c34a:	b662      	cpsie	i
 800c34c:	b661      	cpsie	f
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	df00      	svc	0
 800c358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c35a:	bf00      	nop
 800c35c:	e000ed08 	.word	0xe000ed08

0800c360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b086      	sub	sp, #24
 800c364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c366:	4b47      	ldr	r3, [pc, #284]	@ (800c484 <xPortStartScheduler+0x124>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a47      	ldr	r2, [pc, #284]	@ (800c488 <xPortStartScheduler+0x128>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d10b      	bne.n	800c388 <xPortStartScheduler+0x28>
	__asm volatile
 800c370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c374:	f383 8811 	msr	BASEPRI, r3
 800c378:	f3bf 8f6f 	isb	sy
 800c37c:	f3bf 8f4f 	dsb	sy
 800c380:	60fb      	str	r3, [r7, #12]
}
 800c382:	bf00      	nop
 800c384:	bf00      	nop
 800c386:	e7fd      	b.n	800c384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c388:	4b3e      	ldr	r3, [pc, #248]	@ (800c484 <xPortStartScheduler+0x124>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a3f      	ldr	r2, [pc, #252]	@ (800c48c <xPortStartScheduler+0x12c>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d10b      	bne.n	800c3aa <xPortStartScheduler+0x4a>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	613b      	str	r3, [r7, #16]
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	e7fd      	b.n	800c3a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c3aa:	4b39      	ldr	r3, [pc, #228]	@ (800c490 <xPortStartScheduler+0x130>)
 800c3ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	22ff      	movs	r2, #255	@ 0xff
 800c3ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	4b31      	ldr	r3, [pc, #196]	@ (800c494 <xPortStartScheduler+0x134>)
 800c3d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c3d2:	4b31      	ldr	r3, [pc, #196]	@ (800c498 <xPortStartScheduler+0x138>)
 800c3d4:	2207      	movs	r2, #7
 800c3d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3d8:	e009      	b.n	800c3ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c3da:	4b2f      	ldr	r3, [pc, #188]	@ (800c498 <xPortStartScheduler+0x138>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c498 <xPortStartScheduler+0x138>)
 800c3e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c3ee:	78fb      	ldrb	r3, [r7, #3]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3f6:	2b80      	cmp	r3, #128	@ 0x80
 800c3f8:	d0ef      	beq.n	800c3da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c3fa:	4b27      	ldr	r3, [pc, #156]	@ (800c498 <xPortStartScheduler+0x138>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f1c3 0307 	rsb	r3, r3, #7
 800c402:	2b04      	cmp	r3, #4
 800c404:	d00b      	beq.n	800c41e <xPortStartScheduler+0xbe>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60bb      	str	r3, [r7, #8]
}
 800c418:	bf00      	nop
 800c41a:	bf00      	nop
 800c41c:	e7fd      	b.n	800c41a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c41e:	4b1e      	ldr	r3, [pc, #120]	@ (800c498 <xPortStartScheduler+0x138>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	021b      	lsls	r3, r3, #8
 800c424:	4a1c      	ldr	r2, [pc, #112]	@ (800c498 <xPortStartScheduler+0x138>)
 800c426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c428:	4b1b      	ldr	r3, [pc, #108]	@ (800c498 <xPortStartScheduler+0x138>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c430:	4a19      	ldr	r2, [pc, #100]	@ (800c498 <xPortStartScheduler+0x138>)
 800c432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	b2da      	uxtb	r2, r3
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c43c:	4b17      	ldr	r3, [pc, #92]	@ (800c49c <xPortStartScheduler+0x13c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a16      	ldr	r2, [pc, #88]	@ (800c49c <xPortStartScheduler+0x13c>)
 800c442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c448:	4b14      	ldr	r3, [pc, #80]	@ (800c49c <xPortStartScheduler+0x13c>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a13      	ldr	r2, [pc, #76]	@ (800c49c <xPortStartScheduler+0x13c>)
 800c44e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c454:	f000 f8da 	bl	800c60c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c458:	4b11      	ldr	r3, [pc, #68]	@ (800c4a0 <xPortStartScheduler+0x140>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c45e:	f000 f8f9 	bl	800c654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c462:	4b10      	ldr	r3, [pc, #64]	@ (800c4a4 <xPortStartScheduler+0x144>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a0f      	ldr	r2, [pc, #60]	@ (800c4a4 <xPortStartScheduler+0x144>)
 800c468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c46c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c46e:	f7ff ff63 	bl	800c338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c472:	f7ff f815 	bl	800b4a0 <vTaskSwitchContext>
	prvTaskExitError();
 800c476:	f7ff ff1b 	bl	800c2b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	e000ed00 	.word	0xe000ed00
 800c488:	410fc271 	.word	0x410fc271
 800c48c:	410fc270 	.word	0x410fc270
 800c490:	e000e400 	.word	0xe000e400
 800c494:	2000944c 	.word	0x2000944c
 800c498:	20009450 	.word	0x20009450
 800c49c:	e000ed20 	.word	0xe000ed20
 800c4a0:	20000014 	.word	0x20000014
 800c4a4:	e000ef34 	.word	0xe000ef34

0800c4a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b2:	f383 8811 	msr	BASEPRI, r3
 800c4b6:	f3bf 8f6f 	isb	sy
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	607b      	str	r3, [r7, #4]
}
 800c4c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c4c2:	4b10      	ldr	r3, [pc, #64]	@ (800c504 <vPortEnterCritical+0x5c>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	4a0e      	ldr	r2, [pc, #56]	@ (800c504 <vPortEnterCritical+0x5c>)
 800c4ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c4cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c504 <vPortEnterCritical+0x5c>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d110      	bne.n	800c4f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c508 <vPortEnterCritical+0x60>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00b      	beq.n	800c4f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	603b      	str	r3, [r7, #0]
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	e7fd      	b.n	800c4f2 <vPortEnterCritical+0x4a>
	}
}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr
 800c502:	bf00      	nop
 800c504:	20000014 	.word	0x20000014
 800c508:	e000ed04 	.word	0xe000ed04

0800c50c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c512:	4b12      	ldr	r3, [pc, #72]	@ (800c55c <vPortExitCritical+0x50>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d10b      	bne.n	800c532 <vPortExitCritical+0x26>
	__asm volatile
 800c51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	607b      	str	r3, [r7, #4]
}
 800c52c:	bf00      	nop
 800c52e:	bf00      	nop
 800c530:	e7fd      	b.n	800c52e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c532:	4b0a      	ldr	r3, [pc, #40]	@ (800c55c <vPortExitCritical+0x50>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3b01      	subs	r3, #1
 800c538:	4a08      	ldr	r2, [pc, #32]	@ (800c55c <vPortExitCritical+0x50>)
 800c53a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c53c:	4b07      	ldr	r3, [pc, #28]	@ (800c55c <vPortExitCritical+0x50>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d105      	bne.n	800c550 <vPortExitCritical+0x44>
 800c544:	2300      	movs	r3, #0
 800c546:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	f383 8811 	msr	BASEPRI, r3
}
 800c54e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c550:	bf00      	nop
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	20000014 	.word	0x20000014

0800c560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c560:	f3ef 8009 	mrs	r0, PSP
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	4b15      	ldr	r3, [pc, #84]	@ (800c5c0 <pxCurrentTCBConst>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	f01e 0f10 	tst.w	lr, #16
 800c570:	bf08      	it	eq
 800c572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57a:	6010      	str	r0, [r2, #0]
 800c57c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c584:	f380 8811 	msr	BASEPRI, r0
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f7fe ff86 	bl	800b4a0 <vTaskSwitchContext>
 800c594:	f04f 0000 	mov.w	r0, #0
 800c598:	f380 8811 	msr	BASEPRI, r0
 800c59c:	bc09      	pop	{r0, r3}
 800c59e:	6819      	ldr	r1, [r3, #0]
 800c5a0:	6808      	ldr	r0, [r1, #0]
 800c5a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a6:	f01e 0f10 	tst.w	lr, #16
 800c5aa:	bf08      	it	eq
 800c5ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c5b0:	f380 8809 	msr	PSP, r0
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	f3af 8000 	nop.w

0800c5c0 <pxCurrentTCBConst>:
 800c5c0:	20008e20 	.word	0x20008e20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop

0800c5c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d2:	f383 8811 	msr	BASEPRI, r3
 800c5d6:	f3bf 8f6f 	isb	sy
 800c5da:	f3bf 8f4f 	dsb	sy
 800c5de:	607b      	str	r3, [r7, #4]
}
 800c5e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c5e2:	f7fe fea3 	bl	800b32c <xTaskIncrementTick>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d003      	beq.n	800c5f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c5ec:	4b06      	ldr	r3, [pc, #24]	@ (800c608 <xPortSysTickHandler+0x40>)
 800c5ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5f2:	601a      	str	r2, [r3, #0]
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f383 8811 	msr	BASEPRI, r3
}
 800c5fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c60c:	b480      	push	{r7}
 800c60e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c610:	4b0b      	ldr	r3, [pc, #44]	@ (800c640 <vPortSetupTimerInterrupt+0x34>)
 800c612:	2200      	movs	r2, #0
 800c614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c616:	4b0b      	ldr	r3, [pc, #44]	@ (800c644 <vPortSetupTimerInterrupt+0x38>)
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c61c:	4b0a      	ldr	r3, [pc, #40]	@ (800c648 <vPortSetupTimerInterrupt+0x3c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a0a      	ldr	r2, [pc, #40]	@ (800c64c <vPortSetupTimerInterrupt+0x40>)
 800c622:	fba2 2303 	umull	r2, r3, r2, r3
 800c626:	099b      	lsrs	r3, r3, #6
 800c628:	4a09      	ldr	r2, [pc, #36]	@ (800c650 <vPortSetupTimerInterrupt+0x44>)
 800c62a:	3b01      	subs	r3, #1
 800c62c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c62e:	4b04      	ldr	r3, [pc, #16]	@ (800c640 <vPortSetupTimerInterrupt+0x34>)
 800c630:	2207      	movs	r2, #7
 800c632:	601a      	str	r2, [r3, #0]
}
 800c634:	bf00      	nop
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	e000e010 	.word	0xe000e010
 800c644:	e000e018 	.word	0xe000e018
 800c648:	20000008 	.word	0x20000008
 800c64c:	10624dd3 	.word	0x10624dd3
 800c650:	e000e014 	.word	0xe000e014

0800c654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c664 <vPortEnableVFP+0x10>
 800c658:	6801      	ldr	r1, [r0, #0]
 800c65a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c65e:	6001      	str	r1, [r0, #0]
 800c660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c662:	bf00      	nop
 800c664:	e000ed88 	.word	0xe000ed88

0800c668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c66e:	f3ef 8305 	mrs	r3, IPSR
 800c672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2b0f      	cmp	r3, #15
 800c678:	d915      	bls.n	800c6a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c67a:	4a18      	ldr	r2, [pc, #96]	@ (800c6dc <vPortValidateInterruptPriority+0x74>)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4413      	add	r3, r2
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c684:	4b16      	ldr	r3, [pc, #88]	@ (800c6e0 <vPortValidateInterruptPriority+0x78>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	7afa      	ldrb	r2, [r7, #11]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d20b      	bcs.n	800c6a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	607b      	str	r3, [r7, #4]
}
 800c6a0:	bf00      	nop
 800c6a2:	bf00      	nop
 800c6a4:	e7fd      	b.n	800c6a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c6e4 <vPortValidateInterruptPriority+0x7c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c6ae:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e8 <vPortValidateInterruptPriority+0x80>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d90b      	bls.n	800c6ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	603b      	str	r3, [r7, #0]
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	e7fd      	b.n	800c6ca <vPortValidateInterruptPriority+0x62>
	}
 800c6ce:	bf00      	nop
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	e000e3f0 	.word	0xe000e3f0
 800c6e0:	2000944c 	.word	0x2000944c
 800c6e4:	e000ed0c 	.word	0xe000ed0c
 800c6e8:	20009450 	.word	0x20009450

0800c6ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08a      	sub	sp, #40	@ 0x28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6f8:	f7fe fd5c 	bl	800b1b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c870 <pvPortMalloc+0x184>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c704:	f000 f924 	bl	800c950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c708:	4b5a      	ldr	r3, [pc, #360]	@ (800c874 <pvPortMalloc+0x188>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4013      	ands	r3, r2
 800c710:	2b00      	cmp	r3, #0
 800c712:	f040 8095 	bne.w	800c840 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d01e      	beq.n	800c75a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c71c:	2208      	movs	r2, #8
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4413      	add	r3, r2
 800c722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d015      	beq.n	800c75a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f023 0307 	bic.w	r3, r3, #7
 800c734:	3308      	adds	r3, #8
 800c736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00b      	beq.n	800c75a <pvPortMalloc+0x6e>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	617b      	str	r3, [r7, #20]
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop
 800c758:	e7fd      	b.n	800c756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d06f      	beq.n	800c840 <pvPortMalloc+0x154>
 800c760:	4b45      	ldr	r3, [pc, #276]	@ (800c878 <pvPortMalloc+0x18c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	429a      	cmp	r2, r3
 800c768:	d86a      	bhi.n	800c840 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c76a:	4b44      	ldr	r3, [pc, #272]	@ (800c87c <pvPortMalloc+0x190>)
 800c76c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c76e:	4b43      	ldr	r3, [pc, #268]	@ (800c87c <pvPortMalloc+0x190>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c774:	e004      	b.n	800c780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	429a      	cmp	r2, r3
 800c788:	d903      	bls.n	800c792 <pvPortMalloc+0xa6>
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d1f1      	bne.n	800c776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c792:	4b37      	ldr	r3, [pc, #220]	@ (800c870 <pvPortMalloc+0x184>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c798:	429a      	cmp	r2, r3
 800c79a:	d051      	beq.n	800c840 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2208      	movs	r2, #8
 800c7a2:	4413      	add	r3, r2
 800c7a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b0:	685a      	ldr	r2, [r3, #4]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	1ad2      	subs	r2, r2, r3
 800c7b6:	2308      	movs	r3, #8
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d920      	bls.n	800c800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	f003 0307 	and.w	r3, r3, #7
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <pvPortMalloc+0xfc>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	613b      	str	r3, [r7, #16]
}
 800c7e2:	bf00      	nop
 800c7e4:	bf00      	nop
 800c7e6:	e7fd      	b.n	800c7e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	1ad2      	subs	r2, r2, r3
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7fa:	69b8      	ldr	r0, [r7, #24]
 800c7fc:	f000 f90a 	bl	800ca14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c800:	4b1d      	ldr	r3, [pc, #116]	@ (800c878 <pvPortMalloc+0x18c>)
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	1ad3      	subs	r3, r2, r3
 800c80a:	4a1b      	ldr	r2, [pc, #108]	@ (800c878 <pvPortMalloc+0x18c>)
 800c80c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c80e:	4b1a      	ldr	r3, [pc, #104]	@ (800c878 <pvPortMalloc+0x18c>)
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <pvPortMalloc+0x194>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	429a      	cmp	r2, r3
 800c818:	d203      	bcs.n	800c822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c81a:	4b17      	ldr	r3, [pc, #92]	@ (800c878 <pvPortMalloc+0x18c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a18      	ldr	r2, [pc, #96]	@ (800c880 <pvPortMalloc+0x194>)
 800c820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	4b13      	ldr	r3, [pc, #76]	@ (800c874 <pvPortMalloc+0x188>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	431a      	orrs	r2, r3
 800c82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c832:	2200      	movs	r2, #0
 800c834:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c836:	4b13      	ldr	r3, [pc, #76]	@ (800c884 <pvPortMalloc+0x198>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	3301      	adds	r3, #1
 800c83c:	4a11      	ldr	r2, [pc, #68]	@ (800c884 <pvPortMalloc+0x198>)
 800c83e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c840:	f7fe fcc6 	bl	800b1d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00b      	beq.n	800c866 <pvPortMalloc+0x17a>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	60fb      	str	r3, [r7, #12]
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	e7fd      	b.n	800c862 <pvPortMalloc+0x176>
	return pvReturn;
 800c866:	69fb      	ldr	r3, [r7, #28]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3728      	adds	r7, #40	@ 0x28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	2000d05c 	.word	0x2000d05c
 800c874:	2000d070 	.word	0x2000d070
 800c878:	2000d060 	.word	0x2000d060
 800c87c:	2000d054 	.word	0x2000d054
 800c880:	2000d064 	.word	0x2000d064
 800c884:	2000d068 	.word	0x2000d068

0800c888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b086      	sub	sp, #24
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d04f      	beq.n	800c93a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c89a:	2308      	movs	r3, #8
 800c89c:	425b      	negs	r3, r3
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	4b25      	ldr	r3, [pc, #148]	@ (800c944 <vPortFree+0xbc>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4013      	ands	r3, r2
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d10b      	bne.n	800c8ce <vPortFree+0x46>
	__asm volatile
 800c8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ba:	f383 8811 	msr	BASEPRI, r3
 800c8be:	f3bf 8f6f 	isb	sy
 800c8c2:	f3bf 8f4f 	dsb	sy
 800c8c6:	60fb      	str	r3, [r7, #12]
}
 800c8c8:	bf00      	nop
 800c8ca:	bf00      	nop
 800c8cc:	e7fd      	b.n	800c8ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00b      	beq.n	800c8ee <vPortFree+0x66>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	60bb      	str	r3, [r7, #8]
}
 800c8e8:	bf00      	nop
 800c8ea:	bf00      	nop
 800c8ec:	e7fd      	b.n	800c8ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	685a      	ldr	r2, [r3, #4]
 800c8f2:	4b14      	ldr	r3, [pc, #80]	@ (800c944 <vPortFree+0xbc>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4013      	ands	r3, r2
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01e      	beq.n	800c93a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d11a      	bne.n	800c93a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	685a      	ldr	r2, [r3, #4]
 800c908:	4b0e      	ldr	r3, [pc, #56]	@ (800c944 <vPortFree+0xbc>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	43db      	mvns	r3, r3
 800c90e:	401a      	ands	r2, r3
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c914:	f7fe fc4e 	bl	800b1b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	4b0a      	ldr	r3, [pc, #40]	@ (800c948 <vPortFree+0xc0>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4413      	add	r3, r2
 800c922:	4a09      	ldr	r2, [pc, #36]	@ (800c948 <vPortFree+0xc0>)
 800c924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c926:	6938      	ldr	r0, [r7, #16]
 800c928:	f000 f874 	bl	800ca14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c92c:	4b07      	ldr	r3, [pc, #28]	@ (800c94c <vPortFree+0xc4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	4a06      	ldr	r2, [pc, #24]	@ (800c94c <vPortFree+0xc4>)
 800c934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c936:	f7fe fc4b 	bl	800b1d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c93a:	bf00      	nop
 800c93c:	3718      	adds	r7, #24
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	2000d070 	.word	0x2000d070
 800c948:	2000d060 	.word	0x2000d060
 800c94c:	2000d06c 	.word	0x2000d06c

0800c950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c956:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c95a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c95c:	4b27      	ldr	r3, [pc, #156]	@ (800c9fc <prvHeapInit+0xac>)
 800c95e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f003 0307 	and.w	r3, r3, #7
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00c      	beq.n	800c984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3307      	adds	r3, #7
 800c96e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f023 0307 	bic.w	r3, r3, #7
 800c976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	4a1f      	ldr	r2, [pc, #124]	@ (800c9fc <prvHeapInit+0xac>)
 800c980:	4413      	add	r3, r2
 800c982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c988:	4a1d      	ldr	r2, [pc, #116]	@ (800ca00 <prvHeapInit+0xb0>)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c98e:	4b1c      	ldr	r3, [pc, #112]	@ (800ca00 <prvHeapInit+0xb0>)
 800c990:	2200      	movs	r2, #0
 800c992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68ba      	ldr	r2, [r7, #8]
 800c998:	4413      	add	r3, r2
 800c99a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c99c:	2208      	movs	r2, #8
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	1a9b      	subs	r3, r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f023 0307 	bic.w	r3, r3, #7
 800c9aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4a15      	ldr	r2, [pc, #84]	@ (800ca04 <prvHeapInit+0xb4>)
 800c9b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9b2:	4b14      	ldr	r3, [pc, #80]	@ (800ca04 <prvHeapInit+0xb4>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9ba:	4b12      	ldr	r3, [pc, #72]	@ (800ca04 <prvHeapInit+0xb4>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	1ad2      	subs	r2, r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9d0:	4b0c      	ldr	r3, [pc, #48]	@ (800ca04 <prvHeapInit+0xb4>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	4a0a      	ldr	r2, [pc, #40]	@ (800ca08 <prvHeapInit+0xb8>)
 800c9de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	4a09      	ldr	r2, [pc, #36]	@ (800ca0c <prvHeapInit+0xbc>)
 800c9e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c9e8:	4b09      	ldr	r3, [pc, #36]	@ (800ca10 <prvHeapInit+0xc0>)
 800c9ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c9ee:	601a      	str	r2, [r3, #0]
}
 800c9f0:	bf00      	nop
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr
 800c9fc:	20009454 	.word	0x20009454
 800ca00:	2000d054 	.word	0x2000d054
 800ca04:	2000d05c 	.word	0x2000d05c
 800ca08:	2000d064 	.word	0x2000d064
 800ca0c:	2000d060 	.word	0x2000d060
 800ca10:	2000d070 	.word	0x2000d070

0800ca14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca1c:	4b28      	ldr	r3, [pc, #160]	@ (800cac0 <prvInsertBlockIntoFreeList+0xac>)
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	e002      	b.n	800ca28 <prvInsertBlockIntoFreeList+0x14>
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60fb      	str	r3, [r7, #12]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d8f7      	bhi.n	800ca22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d108      	bne.n	800ca56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	441a      	add	r2, r3
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	441a      	add	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d118      	bne.n	800ca9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	4b15      	ldr	r3, [pc, #84]	@ (800cac4 <prvInsertBlockIntoFreeList+0xb0>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d00d      	beq.n	800ca92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	441a      	add	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	e008      	b.n	800caa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca92:	4b0c      	ldr	r3, [pc, #48]	@ (800cac4 <prvInsertBlockIntoFreeList+0xb0>)
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	601a      	str	r2, [r3, #0]
 800ca9a:	e003      	b.n	800caa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d002      	beq.n	800cab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cab2:	bf00      	nop
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	2000d054 	.word	0x2000d054
 800cac4:	2000d05c 	.word	0x2000d05c

0800cac8 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cac8:	4b04      	ldr	r3, [pc, #16]	@ (800cadc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800caca:	681a      	ldr	r2, [r3, #0]
 800cacc:	b10a      	cbz	r2, 800cad2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800cace:	4803      	ldr	r0, [pc, #12]	@ (800cadc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800cad0:	4770      	bx	lr
 800cad2:	4a03      	ldr	r2, [pc, #12]	@ (800cae0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800cad4:	4801      	ldr	r0, [pc, #4]	@ (800cadc <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800cad6:	6812      	ldr	r2, [r2, #0]
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	4770      	bx	lr
 800cadc:	20000020 	.word	0x20000020
 800cae0:	2000030c 	.word	0x2000030c

0800cae4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cae4:	4a02      	ldr	r2, [pc, #8]	@ (800caf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800cae6:	4b03      	ldr	r3, [pc, #12]	@ (800caf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800cae8:	6812      	ldr	r2, [r2, #0]
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	2000030c 	.word	0x2000030c
 800caf4:	20000020 	.word	0x20000020

0800caf8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800caf8:	f005 bf3c 	b.w	8012974 <geometry_msgs__msg__Twist__init>

0800cafc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800cafc:	f005 bf5e 	b.w	80129bc <geometry_msgs__msg__Twist__fini>

0800cb00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cb00:	b510      	push	{r4, lr}
 800cb02:	f000 f819 	bl	800cb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cb06:	4c07      	ldr	r4, [pc, #28]	@ (800cb24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800cb08:	60e0      	str	r0, [r4, #12]
 800cb0a:	f000 f815 	bl	800cb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cb0e:	4b06      	ldr	r3, [pc, #24]	@ (800cb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800cb10:	64a0      	str	r0, [r4, #72]	@ 0x48
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	b10a      	cbz	r2, 800cb1a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800cb16:	4804      	ldr	r0, [pc, #16]	@ (800cb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	4a04      	ldr	r2, [pc, #16]	@ (800cb2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800cb1c:	4802      	ldr	r0, [pc, #8]	@ (800cb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800cb1e:	6812      	ldr	r2, [r2, #0]
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	bd10      	pop	{r4, pc}
 800cb24:	2000002c 	.word	0x2000002c
 800cb28:	200000a4 	.word	0x200000a4
 800cb2c:	20000310 	.word	0x20000310

0800cb30 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800cb30:	f005 bf50 	b.w	80129d4 <geometry_msgs__msg__Vector3__init>

0800cb34 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800cb34:	f005 bf52 	b.w	80129dc <geometry_msgs__msg__Vector3__fini>

0800cb38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cb38:	4b04      	ldr	r3, [pc, #16]	@ (800cb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	b10a      	cbz	r2, 800cb42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800cb3e:	4803      	ldr	r0, [pc, #12]	@ (800cb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cb40:	4770      	bx	lr
 800cb42:	4a03      	ldr	r2, [pc, #12]	@ (800cb50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800cb44:	4801      	ldr	r0, [pc, #4]	@ (800cb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800cb46:	6812      	ldr	r2, [r2, #0]
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	4770      	bx	lr
 800cb4c:	20000164 	.word	0x20000164
 800cb50:	20000310 	.word	0x20000310

0800cb54 <get_serialized_size_geometry_msgs__msg__Twist>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	4604      	mov	r4, r0
 800cb58:	b148      	cbz	r0, 800cb6e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	f000 f86e 	bl	800cc3c <get_serialized_size_geometry_msgs__msg__Vector3>
 800cb60:	4606      	mov	r6, r0
 800cb62:	1829      	adds	r1, r5, r0
 800cb64:	f104 0018 	add.w	r0, r4, #24
 800cb68:	f000 f868 	bl	800cc3c <get_serialized_size_geometry_msgs__msg__Vector3>
 800cb6c:	4430      	add	r0, r6
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}

0800cb70 <_Twist__cdr_deserialize>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	460c      	mov	r4, r1
 800cb74:	b189      	cbz	r1, 800cb9a <_Twist__cdr_deserialize+0x2a>
 800cb76:	4605      	mov	r5, r0
 800cb78:	f000 f8ec 	bl	800cd54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cb7c:	6843      	ldr	r3, [r0, #4]
 800cb7e:	4621      	mov	r1, r4
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	4628      	mov	r0, r5
 800cb84:	4798      	blx	r3
 800cb86:	f000 f8e5 	bl	800cd54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cb8a:	6843      	ldr	r3, [r0, #4]
 800cb8c:	f104 0118 	add.w	r1, r4, #24
 800cb90:	4628      	mov	r0, r5
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb98:	4718      	bx	r3
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	bd70      	pop	{r4, r5, r6, pc}
 800cb9e:	bf00      	nop

0800cba0 <_Twist__cdr_serialize>:
 800cba0:	b510      	push	{r4, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	9101      	str	r1, [sp, #4]
 800cba6:	b190      	cbz	r0, 800cbce <_Twist__cdr_serialize+0x2e>
 800cba8:	4604      	mov	r4, r0
 800cbaa:	f000 f8d3 	bl	800cd54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cbae:	6843      	ldr	r3, [r0, #4]
 800cbb0:	9901      	ldr	r1, [sp, #4]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	4620      	mov	r0, r4
 800cbb6:	4798      	blx	r3
 800cbb8:	f000 f8cc 	bl	800cd54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800cbbc:	6843      	ldr	r3, [r0, #4]
 800cbbe:	9901      	ldr	r1, [sp, #4]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f104 0018 	add.w	r0, r4, #24
 800cbc6:	b002      	add	sp, #8
 800cbc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbcc:	4718      	bx	r3
 800cbce:	b002      	add	sp, #8
 800cbd0:	bd10      	pop	{r4, pc}
 800cbd2:	bf00      	nop

0800cbd4 <_Twist__get_serialized_size>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	b148      	cbz	r0, 800cbee <_Twist__get_serialized_size+0x1a>
 800cbda:	2100      	movs	r1, #0
 800cbdc:	f000 f82e 	bl	800cc3c <get_serialized_size_geometry_msgs__msg__Vector3>
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	4601      	mov	r1, r0
 800cbe4:	f104 0018 	add.w	r0, r4, #24
 800cbe8:	f000 f828 	bl	800cc3c <get_serialized_size_geometry_msgs__msg__Vector3>
 800cbec:	4428      	add	r0, r5
 800cbee:	bd38      	pop	{r3, r4, r5, pc}

0800cbf0 <_Twist__max_serialized_size>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	f10d 0007 	add.w	r0, sp, #7
 800cbfc:	f88d 3007 	strb.w	r3, [sp, #7]
 800cc00:	f000 f88c 	bl	800cd1c <max_serialized_size_geometry_msgs__msg__Vector3>
 800cc04:	4604      	mov	r4, r0
 800cc06:	4601      	mov	r1, r0
 800cc08:	f10d 0007 	add.w	r0, sp, #7
 800cc0c:	f000 f886 	bl	800cd1c <max_serialized_size_geometry_msgs__msg__Vector3>
 800cc10:	4420      	add	r0, r4
 800cc12:	b002      	add	sp, #8
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	bf00      	nop

0800cc18 <max_serialized_size_geometry_msgs__msg__Twist>:
 800cc18:	2301      	movs	r3, #1
 800cc1a:	b570      	push	{r4, r5, r6, lr}
 800cc1c:	7003      	strb	r3, [r0, #0]
 800cc1e:	4605      	mov	r5, r0
 800cc20:	460e      	mov	r6, r1
 800cc22:	f000 f87b 	bl	800cd1c <max_serialized_size_geometry_msgs__msg__Vector3>
 800cc26:	4604      	mov	r4, r0
 800cc28:	1831      	adds	r1, r6, r0
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f000 f876 	bl	800cd1c <max_serialized_size_geometry_msgs__msg__Vector3>
 800cc30:	4420      	add	r0, r4
 800cc32:	bd70      	pop	{r4, r5, r6, pc}

0800cc34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800cc34:	4800      	ldr	r0, [pc, #0]	@ (800cc38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800cc36:	4770      	bx	lr
 800cc38:	20000170 	.word	0x20000170

0800cc3c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800cc3c:	b1b8      	cbz	r0, 800cc6e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800cc3e:	b538      	push	{r3, r4, r5, lr}
 800cc40:	460d      	mov	r5, r1
 800cc42:	4628      	mov	r0, r5
 800cc44:	2108      	movs	r1, #8
 800cc46:	f001 fb9d 	bl	800e384 <ucdr_alignment>
 800cc4a:	f105 0308 	add.w	r3, r5, #8
 800cc4e:	181c      	adds	r4, r3, r0
 800cc50:	2108      	movs	r1, #8
 800cc52:	4620      	mov	r0, r4
 800cc54:	f001 fb96 	bl	800e384 <ucdr_alignment>
 800cc58:	3008      	adds	r0, #8
 800cc5a:	4404      	add	r4, r0
 800cc5c:	2108      	movs	r1, #8
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f001 fb90 	bl	800e384 <ucdr_alignment>
 800cc64:	f1c5 0508 	rsb	r5, r5, #8
 800cc68:	4428      	add	r0, r5
 800cc6a:	4420      	add	r0, r4
 800cc6c:	bd38      	pop	{r3, r4, r5, pc}
 800cc6e:	4770      	bx	lr

0800cc70 <_Vector3__cdr_deserialize>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	460c      	mov	r4, r1
 800cc74:	b171      	cbz	r1, 800cc94 <_Vector3__cdr_deserialize+0x24>
 800cc76:	4605      	mov	r5, r0
 800cc78:	f001 f998 	bl	800dfac <ucdr_deserialize_double>
 800cc7c:	f104 0108 	add.w	r1, r4, #8
 800cc80:	4628      	mov	r0, r5
 800cc82:	f001 f993 	bl	800dfac <ucdr_deserialize_double>
 800cc86:	f104 0110 	add.w	r1, r4, #16
 800cc8a:	4628      	mov	r0, r5
 800cc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc90:	f001 b98c 	b.w	800dfac <ucdr_deserialize_double>
 800cc94:	4608      	mov	r0, r1
 800cc96:	bd38      	pop	{r3, r4, r5, pc}

0800cc98 <_Vector3__cdr_serialize>:
 800cc98:	b198      	cbz	r0, 800ccc2 <_Vector3__cdr_serialize+0x2a>
 800cc9a:	b538      	push	{r3, r4, r5, lr}
 800cc9c:	ed90 0b00 	vldr	d0, [r0]
 800cca0:	460d      	mov	r5, r1
 800cca2:	4604      	mov	r4, r0
 800cca4:	4608      	mov	r0, r1
 800cca6:	f000 ffdf 	bl	800dc68 <ucdr_serialize_double>
 800ccaa:	ed94 0b02 	vldr	d0, [r4, #8]
 800ccae:	4628      	mov	r0, r5
 800ccb0:	f000 ffda 	bl	800dc68 <ucdr_serialize_double>
 800ccb4:	ed94 0b04 	vldr	d0, [r4, #16]
 800ccb8:	4628      	mov	r0, r5
 800ccba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccbe:	f000 bfd3 	b.w	800dc68 <ucdr_serialize_double>
 800ccc2:	4770      	bx	lr

0800ccc4 <_Vector3__get_serialized_size>:
 800ccc4:	b198      	cbz	r0, 800ccee <_Vector3__get_serialized_size+0x2a>
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	2108      	movs	r1, #8
 800ccca:	2000      	movs	r0, #0
 800cccc:	f001 fb5a 	bl	800e384 <ucdr_alignment>
 800ccd0:	f100 0408 	add.w	r4, r0, #8
 800ccd4:	2108      	movs	r1, #8
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f001 fb54 	bl	800e384 <ucdr_alignment>
 800ccdc:	3008      	adds	r0, #8
 800ccde:	4404      	add	r4, r0
 800cce0:	2108      	movs	r1, #8
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 fb4e 	bl	800e384 <ucdr_alignment>
 800cce8:	3008      	adds	r0, #8
 800ccea:	4420      	add	r0, r4
 800ccec:	bd10      	pop	{r4, pc}
 800ccee:	4770      	bx	lr

0800ccf0 <_Vector3__max_serialized_size>:
 800ccf0:	b538      	push	{r3, r4, r5, lr}
 800ccf2:	2108      	movs	r1, #8
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	f001 fb45 	bl	800e384 <ucdr_alignment>
 800ccfa:	f100 0508 	add.w	r5, r0, #8
 800ccfe:	2108      	movs	r1, #8
 800cd00:	4628      	mov	r0, r5
 800cd02:	f001 fb3f 	bl	800e384 <ucdr_alignment>
 800cd06:	f100 0408 	add.w	r4, r0, #8
 800cd0a:	442c      	add	r4, r5
 800cd0c:	2108      	movs	r1, #8
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f001 fb38 	bl	800e384 <ucdr_alignment>
 800cd14:	3008      	adds	r0, #8
 800cd16:	4420      	add	r0, r4
 800cd18:	bd38      	pop	{r3, r4, r5, pc}
 800cd1a:	bf00      	nop

0800cd1c <max_serialized_size_geometry_msgs__msg__Vector3>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	2301      	movs	r3, #1
 800cd20:	460c      	mov	r4, r1
 800cd22:	7003      	strb	r3, [r0, #0]
 800cd24:	2108      	movs	r1, #8
 800cd26:	4620      	mov	r0, r4
 800cd28:	f001 fb2c 	bl	800e384 <ucdr_alignment>
 800cd2c:	f104 0508 	add.w	r5, r4, #8
 800cd30:	1946      	adds	r6, r0, r5
 800cd32:	2108      	movs	r1, #8
 800cd34:	4630      	mov	r0, r6
 800cd36:	f001 fb25 	bl	800e384 <ucdr_alignment>
 800cd3a:	f100 0508 	add.w	r5, r0, #8
 800cd3e:	4435      	add	r5, r6
 800cd40:	2108      	movs	r1, #8
 800cd42:	4628      	mov	r0, r5
 800cd44:	f001 fb1e 	bl	800e384 <ucdr_alignment>
 800cd48:	f1c4 0408 	rsb	r4, r4, #8
 800cd4c:	4420      	add	r0, r4
 800cd4e:	4428      	add	r0, r5
 800cd50:	bd70      	pop	{r4, r5, r6, pc}
 800cd52:	bf00      	nop

0800cd54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800cd54:	4800      	ldr	r0, [pc, #0]	@ (800cd58 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800cd56:	4770      	bx	lr
 800cd58:	20000198 	.word	0x20000198

0800cd5c <ucdr_serialize_bool>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	460d      	mov	r5, r1
 800cd60:	2101      	movs	r1, #1
 800cd62:	4604      	mov	r4, r0
 800cd64:	f001 fac2 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800cd68:	b148      	cbz	r0, 800cd7e <ucdr_serialize_bool+0x22>
 800cd6a:	68a3      	ldr	r3, [r4, #8]
 800cd6c:	701d      	strb	r5, [r3, #0]
 800cd6e:	68a2      	ldr	r2, [r4, #8]
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	2101      	movs	r1, #1
 800cd74:	440a      	add	r2, r1
 800cd76:	440b      	add	r3, r1
 800cd78:	60a2      	str	r2, [r4, #8]
 800cd7a:	6123      	str	r3, [r4, #16]
 800cd7c:	7561      	strb	r1, [r4, #21]
 800cd7e:	7da0      	ldrb	r0, [r4, #22]
 800cd80:	f080 0001 	eor.w	r0, r0, #1
 800cd84:	bd38      	pop	{r3, r4, r5, pc}
 800cd86:	bf00      	nop

0800cd88 <ucdr_deserialize_bool>:
 800cd88:	b538      	push	{r3, r4, r5, lr}
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	4604      	mov	r4, r0
 800cd90:	f001 faac 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800cd94:	b160      	cbz	r0, 800cdb0 <ucdr_deserialize_bool+0x28>
 800cd96:	68a2      	ldr	r2, [r4, #8]
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cd9e:	3900      	subs	r1, #0
 800cda0:	bf18      	it	ne
 800cda2:	2101      	movne	r1, #1
 800cda4:	7029      	strb	r1, [r5, #0]
 800cda6:	3301      	adds	r3, #1
 800cda8:	2101      	movs	r1, #1
 800cdaa:	60a2      	str	r2, [r4, #8]
 800cdac:	6123      	str	r3, [r4, #16]
 800cdae:	7561      	strb	r1, [r4, #21]
 800cdb0:	7da0      	ldrb	r0, [r4, #22]
 800cdb2:	f080 0001 	eor.w	r0, r0, #1
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}

0800cdb8 <ucdr_serialize_uint8_t>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	460d      	mov	r5, r1
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	f001 fa94 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800cdc4:	b148      	cbz	r0, 800cdda <ucdr_serialize_uint8_t+0x22>
 800cdc6:	68a3      	ldr	r3, [r4, #8]
 800cdc8:	701d      	strb	r5, [r3, #0]
 800cdca:	68a2      	ldr	r2, [r4, #8]
 800cdcc:	6923      	ldr	r3, [r4, #16]
 800cdce:	2101      	movs	r1, #1
 800cdd0:	440a      	add	r2, r1
 800cdd2:	440b      	add	r3, r1
 800cdd4:	60a2      	str	r2, [r4, #8]
 800cdd6:	6123      	str	r3, [r4, #16]
 800cdd8:	7561      	strb	r1, [r4, #21]
 800cdda:	7da0      	ldrb	r0, [r4, #22]
 800cddc:	f080 0001 	eor.w	r0, r0, #1
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop

0800cde4 <ucdr_deserialize_uint8_t>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	460d      	mov	r5, r1
 800cde8:	2101      	movs	r1, #1
 800cdea:	4604      	mov	r4, r0
 800cdec:	f001 fa7e 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800cdf0:	b150      	cbz	r0, 800ce08 <ucdr_deserialize_uint8_t+0x24>
 800cdf2:	68a3      	ldr	r3, [r4, #8]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	702b      	strb	r3, [r5, #0]
 800cdf8:	68a2      	ldr	r2, [r4, #8]
 800cdfa:	6923      	ldr	r3, [r4, #16]
 800cdfc:	2101      	movs	r1, #1
 800cdfe:	440a      	add	r2, r1
 800ce00:	440b      	add	r3, r1
 800ce02:	60a2      	str	r2, [r4, #8]
 800ce04:	6123      	str	r3, [r4, #16]
 800ce06:	7561      	strb	r1, [r4, #21]
 800ce08:	7da0      	ldrb	r0, [r4, #22]
 800ce0a:	f080 0001 	eor.w	r0, r0, #1
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}

0800ce10 <ucdr_serialize_uint16_t>:
 800ce10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce14:	b082      	sub	sp, #8
 800ce16:	460b      	mov	r3, r1
 800ce18:	2102      	movs	r1, #2
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce20:	f001 fab8 	bl	800e394 <ucdr_buffer_alignment>
 800ce24:	4601      	mov	r1, r0
 800ce26:	4620      	mov	r0, r4
 800ce28:	7d67      	ldrb	r7, [r4, #21]
 800ce2a:	f001 faf7 	bl	800e41c <ucdr_advance_buffer>
 800ce2e:	2102      	movs	r1, #2
 800ce30:	4620      	mov	r0, r4
 800ce32:	f001 fa4f 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800ce36:	bb78      	cbnz	r0, 800ce98 <ucdr_serialize_uint16_t+0x88>
 800ce38:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ce3c:	42ab      	cmp	r3, r5
 800ce3e:	d926      	bls.n	800ce8e <ucdr_serialize_uint16_t+0x7e>
 800ce40:	1b5e      	subs	r6, r3, r5
 800ce42:	60a3      	str	r3, [r4, #8]
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	f1c6 0802 	rsb	r8, r6, #2
 800ce4a:	4433      	add	r3, r6
 800ce4c:	6123      	str	r3, [r4, #16]
 800ce4e:	4641      	mov	r1, r8
 800ce50:	4620      	mov	r0, r4
 800ce52:	f001 fa4b 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d03b      	beq.n	800ced2 <ucdr_serialize_uint16_t+0xc2>
 800ce5a:	7d23      	ldrb	r3, [r4, #20]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d04a      	beq.n	800cef6 <ucdr_serialize_uint16_t+0xe6>
 800ce60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce64:	702b      	strb	r3, [r5, #0]
 800ce66:	2e00      	cmp	r6, #0
 800ce68:	d040      	beq.n	800ceec <ucdr_serialize_uint16_t+0xdc>
 800ce6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce6e:	706b      	strb	r3, [r5, #1]
 800ce70:	6923      	ldr	r3, [r4, #16]
 800ce72:	68a2      	ldr	r2, [r4, #8]
 800ce74:	7da0      	ldrb	r0, [r4, #22]
 800ce76:	3302      	adds	r3, #2
 800ce78:	1b9e      	subs	r6, r3, r6
 800ce7a:	4442      	add	r2, r8
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	f080 0001 	eor.w	r0, r0, #1
 800ce82:	60a2      	str	r2, [r4, #8]
 800ce84:	6126      	str	r6, [r4, #16]
 800ce86:	7563      	strb	r3, [r4, #21]
 800ce88:	b002      	add	sp, #8
 800ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8e:	2102      	movs	r1, #2
 800ce90:	4620      	mov	r0, r4
 800ce92:	f001 fa2b 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800ce96:	b190      	cbz	r0, 800cebe <ucdr_serialize_uint16_t+0xae>
 800ce98:	7d23      	ldrb	r3, [r4, #20]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	d014      	beq.n	800ceca <ucdr_serialize_uint16_t+0xba>
 800cea0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cea4:	701a      	strb	r2, [r3, #0]
 800cea6:	68a3      	ldr	r3, [r4, #8]
 800cea8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ceac:	705a      	strb	r2, [r3, #1]
 800ceae:	68a2      	ldr	r2, [r4, #8]
 800ceb0:	6923      	ldr	r3, [r4, #16]
 800ceb2:	3202      	adds	r2, #2
 800ceb4:	3302      	adds	r3, #2
 800ceb6:	2102      	movs	r1, #2
 800ceb8:	60a2      	str	r2, [r4, #8]
 800ceba:	6123      	str	r3, [r4, #16]
 800cebc:	7561      	strb	r1, [r4, #21]
 800cebe:	7da0      	ldrb	r0, [r4, #22]
 800cec0:	f080 0001 	eor.w	r0, r0, #1
 800cec4:	b002      	add	sp, #8
 800cec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cece:	801a      	strh	r2, [r3, #0]
 800ced0:	e7ed      	b.n	800ceae <ucdr_serialize_uint16_t+0x9e>
 800ced2:	68a2      	ldr	r2, [r4, #8]
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	7da0      	ldrb	r0, [r4, #22]
 800ced8:	7567      	strb	r7, [r4, #21]
 800ceda:	1b92      	subs	r2, r2, r6
 800cedc:	1b9b      	subs	r3, r3, r6
 800cede:	f080 0001 	eor.w	r0, r0, #1
 800cee2:	60a2      	str	r2, [r4, #8]
 800cee4:	6123      	str	r3, [r4, #16]
 800cee6:	b002      	add	sp, #8
 800cee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceec:	68a3      	ldr	r3, [r4, #8]
 800ceee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cef2:	701a      	strb	r2, [r3, #0]
 800cef4:	e7bc      	b.n	800ce70 <ucdr_serialize_uint16_t+0x60>
 800cef6:	4628      	mov	r0, r5
 800cef8:	f10d 0506 	add.w	r5, sp, #6
 800cefc:	4629      	mov	r1, r5
 800cefe:	4632      	mov	r2, r6
 800cf00:	f00f fde5 	bl	801cace <memcpy>
 800cf04:	68a0      	ldr	r0, [r4, #8]
 800cf06:	4642      	mov	r2, r8
 800cf08:	19a9      	adds	r1, r5, r6
 800cf0a:	f00f fde0 	bl	801cace <memcpy>
 800cf0e:	e7af      	b.n	800ce70 <ucdr_serialize_uint16_t+0x60>

0800cf10 <ucdr_serialize_endian_uint16_t>:
 800cf10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf14:	b083      	sub	sp, #12
 800cf16:	460d      	mov	r5, r1
 800cf18:	2102      	movs	r1, #2
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cf20:	f001 fa38 	bl	800e394 <ucdr_buffer_alignment>
 800cf24:	4601      	mov	r1, r0
 800cf26:	4620      	mov	r0, r4
 800cf28:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cf2c:	f001 fa76 	bl	800e41c <ucdr_advance_buffer>
 800cf30:	2102      	movs	r1, #2
 800cf32:	4620      	mov	r0, r4
 800cf34:	f001 f9ce 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800cf38:	bb70      	cbnz	r0, 800cf98 <ucdr_serialize_endian_uint16_t+0x88>
 800cf3a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cf3e:	42be      	cmp	r6, r7
 800cf40:	d925      	bls.n	800cf8e <ucdr_serialize_endian_uint16_t+0x7e>
 800cf42:	6923      	ldr	r3, [r4, #16]
 800cf44:	60a6      	str	r6, [r4, #8]
 800cf46:	1bf6      	subs	r6, r6, r7
 800cf48:	4433      	add	r3, r6
 800cf4a:	f1c6 0902 	rsb	r9, r6, #2
 800cf4e:	6123      	str	r3, [r4, #16]
 800cf50:	4649      	mov	r1, r9
 800cf52:	4620      	mov	r0, r4
 800cf54:	f001 f9ca 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d039      	beq.n	800cfd0 <ucdr_serialize_endian_uint16_t+0xc0>
 800cf5c:	2d01      	cmp	r5, #1
 800cf5e:	d04a      	beq.n	800cff6 <ucdr_serialize_endian_uint16_t+0xe6>
 800cf60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf64:	703b      	strb	r3, [r7, #0]
 800cf66:	2e00      	cmp	r6, #0
 800cf68:	d040      	beq.n	800cfec <ucdr_serialize_endian_uint16_t+0xdc>
 800cf6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf6e:	707b      	strb	r3, [r7, #1]
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	68a2      	ldr	r2, [r4, #8]
 800cf74:	7da0      	ldrb	r0, [r4, #22]
 800cf76:	3302      	adds	r3, #2
 800cf78:	444a      	add	r2, r9
 800cf7a:	1b9b      	subs	r3, r3, r6
 800cf7c:	2102      	movs	r1, #2
 800cf7e:	f080 0001 	eor.w	r0, r0, #1
 800cf82:	60a2      	str	r2, [r4, #8]
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	7561      	strb	r1, [r4, #21]
 800cf88:	b003      	add	sp, #12
 800cf8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf8e:	2102      	movs	r1, #2
 800cf90:	4620      	mov	r0, r4
 800cf92:	f001 f9ab 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800cf96:	b188      	cbz	r0, 800cfbc <ucdr_serialize_endian_uint16_t+0xac>
 800cf98:	2d01      	cmp	r5, #1
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	d014      	beq.n	800cfc8 <ucdr_serialize_endian_uint16_t+0xb8>
 800cf9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cfa2:	701a      	strb	r2, [r3, #0]
 800cfa4:	68a3      	ldr	r3, [r4, #8]
 800cfa6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfaa:	705a      	strb	r2, [r3, #1]
 800cfac:	68a2      	ldr	r2, [r4, #8]
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	3202      	adds	r2, #2
 800cfb2:	3302      	adds	r3, #2
 800cfb4:	2102      	movs	r1, #2
 800cfb6:	60a2      	str	r2, [r4, #8]
 800cfb8:	6123      	str	r3, [r4, #16]
 800cfba:	7561      	strb	r1, [r4, #21]
 800cfbc:	7da0      	ldrb	r0, [r4, #22]
 800cfbe:	f080 0001 	eor.w	r0, r0, #1
 800cfc2:	b003      	add	sp, #12
 800cfc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cfcc:	801a      	strh	r2, [r3, #0]
 800cfce:	e7ed      	b.n	800cfac <ucdr_serialize_endian_uint16_t+0x9c>
 800cfd0:	68a2      	ldr	r2, [r4, #8]
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	7da0      	ldrb	r0, [r4, #22]
 800cfd6:	f884 8015 	strb.w	r8, [r4, #21]
 800cfda:	1b92      	subs	r2, r2, r6
 800cfdc:	1b9b      	subs	r3, r3, r6
 800cfde:	f080 0001 	eor.w	r0, r0, #1
 800cfe2:	60a2      	str	r2, [r4, #8]
 800cfe4:	6123      	str	r3, [r4, #16]
 800cfe6:	b003      	add	sp, #12
 800cfe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfec:	68a3      	ldr	r3, [r4, #8]
 800cfee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cff2:	701a      	strb	r2, [r3, #0]
 800cff4:	e7bc      	b.n	800cf70 <ucdr_serialize_endian_uint16_t+0x60>
 800cff6:	f10d 0506 	add.w	r5, sp, #6
 800cffa:	4629      	mov	r1, r5
 800cffc:	4632      	mov	r2, r6
 800cffe:	4638      	mov	r0, r7
 800d000:	f00f fd65 	bl	801cace <memcpy>
 800d004:	68a0      	ldr	r0, [r4, #8]
 800d006:	464a      	mov	r2, r9
 800d008:	19a9      	adds	r1, r5, r6
 800d00a:	f00f fd60 	bl	801cace <memcpy>
 800d00e:	e7af      	b.n	800cf70 <ucdr_serialize_endian_uint16_t+0x60>

0800d010 <ucdr_deserialize_uint16_t>:
 800d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d014:	460d      	mov	r5, r1
 800d016:	2102      	movs	r1, #2
 800d018:	4604      	mov	r4, r0
 800d01a:	f001 f9bb 	bl	800e394 <ucdr_buffer_alignment>
 800d01e:	4601      	mov	r1, r0
 800d020:	4620      	mov	r0, r4
 800d022:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d026:	f001 f9f9 	bl	800e41c <ucdr_advance_buffer>
 800d02a:	2102      	movs	r1, #2
 800d02c:	4620      	mov	r0, r4
 800d02e:	f001 f951 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d032:	bb60      	cbnz	r0, 800d08e <ucdr_deserialize_uint16_t+0x7e>
 800d034:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d038:	42be      	cmp	r6, r7
 800d03a:	d923      	bls.n	800d084 <ucdr_deserialize_uint16_t+0x74>
 800d03c:	6923      	ldr	r3, [r4, #16]
 800d03e:	60a6      	str	r6, [r4, #8]
 800d040:	1bf6      	subs	r6, r6, r7
 800d042:	4433      	add	r3, r6
 800d044:	f1c6 0902 	rsb	r9, r6, #2
 800d048:	6123      	str	r3, [r4, #16]
 800d04a:	4649      	mov	r1, r9
 800d04c:	4620      	mov	r0, r4
 800d04e:	f001 f94d 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d052:	2800      	cmp	r0, #0
 800d054:	d034      	beq.n	800d0c0 <ucdr_deserialize_uint16_t+0xb0>
 800d056:	7d23      	ldrb	r3, [r4, #20]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d042      	beq.n	800d0e2 <ucdr_deserialize_uint16_t+0xd2>
 800d05c:	787b      	ldrb	r3, [r7, #1]
 800d05e:	702b      	strb	r3, [r5, #0]
 800d060:	2e00      	cmp	r6, #0
 800d062:	d03a      	beq.n	800d0da <ucdr_deserialize_uint16_t+0xca>
 800d064:	783b      	ldrb	r3, [r7, #0]
 800d066:	706b      	strb	r3, [r5, #1]
 800d068:	6923      	ldr	r3, [r4, #16]
 800d06a:	68a2      	ldr	r2, [r4, #8]
 800d06c:	7da0      	ldrb	r0, [r4, #22]
 800d06e:	2102      	movs	r1, #2
 800d070:	3302      	adds	r3, #2
 800d072:	444a      	add	r2, r9
 800d074:	1b9b      	subs	r3, r3, r6
 800d076:	7561      	strb	r1, [r4, #21]
 800d078:	60a2      	str	r2, [r4, #8]
 800d07a:	6123      	str	r3, [r4, #16]
 800d07c:	f080 0001 	eor.w	r0, r0, #1
 800d080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d084:	2102      	movs	r1, #2
 800d086:	4620      	mov	r0, r4
 800d088:	f001 f930 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d08c:	b180      	cbz	r0, 800d0b0 <ucdr_deserialize_uint16_t+0xa0>
 800d08e:	7d23      	ldrb	r3, [r4, #20]
 800d090:	2b01      	cmp	r3, #1
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	d011      	beq.n	800d0ba <ucdr_deserialize_uint16_t+0xaa>
 800d096:	785b      	ldrb	r3, [r3, #1]
 800d098:	702b      	strb	r3, [r5, #0]
 800d09a:	68a3      	ldr	r3, [r4, #8]
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	706b      	strb	r3, [r5, #1]
 800d0a0:	68a2      	ldr	r2, [r4, #8]
 800d0a2:	6923      	ldr	r3, [r4, #16]
 800d0a4:	3202      	adds	r2, #2
 800d0a6:	3302      	adds	r3, #2
 800d0a8:	2102      	movs	r1, #2
 800d0aa:	60a2      	str	r2, [r4, #8]
 800d0ac:	6123      	str	r3, [r4, #16]
 800d0ae:	7561      	strb	r1, [r4, #21]
 800d0b0:	7da0      	ldrb	r0, [r4, #22]
 800d0b2:	f080 0001 	eor.w	r0, r0, #1
 800d0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	802b      	strh	r3, [r5, #0]
 800d0be:	e7ef      	b.n	800d0a0 <ucdr_deserialize_uint16_t+0x90>
 800d0c0:	68a2      	ldr	r2, [r4, #8]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	7da0      	ldrb	r0, [r4, #22]
 800d0c6:	f884 8015 	strb.w	r8, [r4, #21]
 800d0ca:	1b92      	subs	r2, r2, r6
 800d0cc:	1b9b      	subs	r3, r3, r6
 800d0ce:	60a2      	str	r2, [r4, #8]
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	f080 0001 	eor.w	r0, r0, #1
 800d0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0da:	68a3      	ldr	r3, [r4, #8]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	706b      	strb	r3, [r5, #1]
 800d0e0:	e7c2      	b.n	800d068 <ucdr_deserialize_uint16_t+0x58>
 800d0e2:	4639      	mov	r1, r7
 800d0e4:	4632      	mov	r2, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f00f fcf1 	bl	801cace <memcpy>
 800d0ec:	68a1      	ldr	r1, [r4, #8]
 800d0ee:	464a      	mov	r2, r9
 800d0f0:	19a8      	adds	r0, r5, r6
 800d0f2:	f00f fcec 	bl	801cace <memcpy>
 800d0f6:	e7b7      	b.n	800d068 <ucdr_deserialize_uint16_t+0x58>

0800d0f8 <ucdr_deserialize_endian_uint16_t>:
 800d0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0fc:	460e      	mov	r6, r1
 800d0fe:	2102      	movs	r1, #2
 800d100:	4604      	mov	r4, r0
 800d102:	4615      	mov	r5, r2
 800d104:	f001 f946 	bl	800e394 <ucdr_buffer_alignment>
 800d108:	4601      	mov	r1, r0
 800d10a:	4620      	mov	r0, r4
 800d10c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d110:	f001 f984 	bl	800e41c <ucdr_advance_buffer>
 800d114:	2102      	movs	r1, #2
 800d116:	4620      	mov	r0, r4
 800d118:	f001 f8dc 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d11c:	bb70      	cbnz	r0, 800d17c <ucdr_deserialize_endian_uint16_t+0x84>
 800d11e:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d122:	4547      	cmp	r7, r8
 800d124:	d925      	bls.n	800d172 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d126:	6923      	ldr	r3, [r4, #16]
 800d128:	60a7      	str	r7, [r4, #8]
 800d12a:	eba7 0708 	sub.w	r7, r7, r8
 800d12e:	443b      	add	r3, r7
 800d130:	f1c7 0a02 	rsb	sl, r7, #2
 800d134:	6123      	str	r3, [r4, #16]
 800d136:	4651      	mov	r1, sl
 800d138:	4620      	mov	r0, r4
 800d13a:	f001 f8d7 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d034      	beq.n	800d1ac <ucdr_deserialize_endian_uint16_t+0xb4>
 800d142:	2e01      	cmp	r6, #1
 800d144:	d043      	beq.n	800d1ce <ucdr_deserialize_endian_uint16_t+0xd6>
 800d146:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d14a:	702b      	strb	r3, [r5, #0]
 800d14c:	2f00      	cmp	r7, #0
 800d14e:	d03a      	beq.n	800d1c6 <ucdr_deserialize_endian_uint16_t+0xce>
 800d150:	f898 3000 	ldrb.w	r3, [r8]
 800d154:	706b      	strb	r3, [r5, #1]
 800d156:	6923      	ldr	r3, [r4, #16]
 800d158:	68a2      	ldr	r2, [r4, #8]
 800d15a:	7da0      	ldrb	r0, [r4, #22]
 800d15c:	2102      	movs	r1, #2
 800d15e:	3302      	adds	r3, #2
 800d160:	4452      	add	r2, sl
 800d162:	1bdb      	subs	r3, r3, r7
 800d164:	7561      	strb	r1, [r4, #21]
 800d166:	60a2      	str	r2, [r4, #8]
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	f080 0001 	eor.w	r0, r0, #1
 800d16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d172:	2102      	movs	r1, #2
 800d174:	4620      	mov	r0, r4
 800d176:	f001 f8b9 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d17a:	b178      	cbz	r0, 800d19c <ucdr_deserialize_endian_uint16_t+0xa4>
 800d17c:	2e01      	cmp	r6, #1
 800d17e:	68a3      	ldr	r3, [r4, #8]
 800d180:	d011      	beq.n	800d1a6 <ucdr_deserialize_endian_uint16_t+0xae>
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	702b      	strb	r3, [r5, #0]
 800d186:	68a3      	ldr	r3, [r4, #8]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	706b      	strb	r3, [r5, #1]
 800d18c:	68a2      	ldr	r2, [r4, #8]
 800d18e:	6923      	ldr	r3, [r4, #16]
 800d190:	3202      	adds	r2, #2
 800d192:	3302      	adds	r3, #2
 800d194:	2102      	movs	r1, #2
 800d196:	60a2      	str	r2, [r4, #8]
 800d198:	6123      	str	r3, [r4, #16]
 800d19a:	7561      	strb	r1, [r4, #21]
 800d19c:	7da0      	ldrb	r0, [r4, #22]
 800d19e:	f080 0001 	eor.w	r0, r0, #1
 800d1a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1a6:	881b      	ldrh	r3, [r3, #0]
 800d1a8:	802b      	strh	r3, [r5, #0]
 800d1aa:	e7ef      	b.n	800d18c <ucdr_deserialize_endian_uint16_t+0x94>
 800d1ac:	68a2      	ldr	r2, [r4, #8]
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	7da0      	ldrb	r0, [r4, #22]
 800d1b2:	f884 9015 	strb.w	r9, [r4, #21]
 800d1b6:	1bd2      	subs	r2, r2, r7
 800d1b8:	1bdb      	subs	r3, r3, r7
 800d1ba:	60a2      	str	r2, [r4, #8]
 800d1bc:	6123      	str	r3, [r4, #16]
 800d1be:	f080 0001 	eor.w	r0, r0, #1
 800d1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c6:	68a3      	ldr	r3, [r4, #8]
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	706b      	strb	r3, [r5, #1]
 800d1cc:	e7c3      	b.n	800d156 <ucdr_deserialize_endian_uint16_t+0x5e>
 800d1ce:	4641      	mov	r1, r8
 800d1d0:	463a      	mov	r2, r7
 800d1d2:	4628      	mov	r0, r5
 800d1d4:	f00f fc7b 	bl	801cace <memcpy>
 800d1d8:	68a1      	ldr	r1, [r4, #8]
 800d1da:	4652      	mov	r2, sl
 800d1dc:	19e8      	adds	r0, r5, r7
 800d1de:	f00f fc76 	bl	801cace <memcpy>
 800d1e2:	e7b8      	b.n	800d156 <ucdr_deserialize_endian_uint16_t+0x5e>

0800d1e4 <ucdr_serialize_uint32_t>:
 800d1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e8:	b082      	sub	sp, #8
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	9101      	str	r1, [sp, #4]
 800d1ee:	2104      	movs	r1, #4
 800d1f0:	f001 f8d0 	bl	800e394 <ucdr_buffer_alignment>
 800d1f4:	4601      	mov	r1, r0
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	7d67      	ldrb	r7, [r4, #21]
 800d1fa:	f001 f90f 	bl	800e41c <ucdr_advance_buffer>
 800d1fe:	2104      	movs	r1, #4
 800d200:	4620      	mov	r0, r4
 800d202:	f001 f867 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d206:	2800      	cmp	r0, #0
 800d208:	d139      	bne.n	800d27e <ucdr_serialize_uint32_t+0x9a>
 800d20a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d20e:	42ab      	cmp	r3, r5
 800d210:	d930      	bls.n	800d274 <ucdr_serialize_uint32_t+0x90>
 800d212:	1b5e      	subs	r6, r3, r5
 800d214:	60a3      	str	r3, [r4, #8]
 800d216:	6923      	ldr	r3, [r4, #16]
 800d218:	f1c6 0804 	rsb	r8, r6, #4
 800d21c:	4433      	add	r3, r6
 800d21e:	6123      	str	r3, [r4, #16]
 800d220:	4641      	mov	r1, r8
 800d222:	4620      	mov	r0, r4
 800d224:	f001 f862 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d228:	2800      	cmp	r0, #0
 800d22a:	d04c      	beq.n	800d2c6 <ucdr_serialize_uint32_t+0xe2>
 800d22c:	7d23      	ldrb	r3, [r4, #20]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d063      	beq.n	800d2fa <ucdr_serialize_uint32_t+0x116>
 800d232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d236:	702b      	strb	r3, [r5, #0]
 800d238:	2e00      	cmp	r6, #0
 800d23a:	d051      	beq.n	800d2e0 <ucdr_serialize_uint32_t+0xfc>
 800d23c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d240:	706b      	strb	r3, [r5, #1]
 800d242:	2e01      	cmp	r6, #1
 800d244:	d050      	beq.n	800d2e8 <ucdr_serialize_uint32_t+0x104>
 800d246:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d24a:	70ab      	strb	r3, [r5, #2]
 800d24c:	2e02      	cmp	r6, #2
 800d24e:	d04f      	beq.n	800d2f0 <ucdr_serialize_uint32_t+0x10c>
 800d250:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d254:	70eb      	strb	r3, [r5, #3]
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	68a2      	ldr	r2, [r4, #8]
 800d25a:	7da0      	ldrb	r0, [r4, #22]
 800d25c:	3304      	adds	r3, #4
 800d25e:	1b9e      	subs	r6, r3, r6
 800d260:	4442      	add	r2, r8
 800d262:	2304      	movs	r3, #4
 800d264:	f080 0001 	eor.w	r0, r0, #1
 800d268:	60a2      	str	r2, [r4, #8]
 800d26a:	6126      	str	r6, [r4, #16]
 800d26c:	7563      	strb	r3, [r4, #21]
 800d26e:	b002      	add	sp, #8
 800d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d274:	2104      	movs	r1, #4
 800d276:	4620      	mov	r0, r4
 800d278:	f001 f838 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d27c:	b1d0      	cbz	r0, 800d2b4 <ucdr_serialize_uint32_t+0xd0>
 800d27e:	7d23      	ldrb	r3, [r4, #20]
 800d280:	2b01      	cmp	r3, #1
 800d282:	68a3      	ldr	r3, [r4, #8]
 800d284:	d01c      	beq.n	800d2c0 <ucdr_serialize_uint32_t+0xdc>
 800d286:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d28a:	701a      	strb	r2, [r3, #0]
 800d28c:	68a3      	ldr	r3, [r4, #8]
 800d28e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d292:	705a      	strb	r2, [r3, #1]
 800d294:	68a3      	ldr	r3, [r4, #8]
 800d296:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d29a:	709a      	strb	r2, [r3, #2]
 800d29c:	68a3      	ldr	r3, [r4, #8]
 800d29e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d2a2:	70da      	strb	r2, [r3, #3]
 800d2a4:	68a2      	ldr	r2, [r4, #8]
 800d2a6:	6923      	ldr	r3, [r4, #16]
 800d2a8:	3204      	adds	r2, #4
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	2104      	movs	r1, #4
 800d2ae:	60a2      	str	r2, [r4, #8]
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	7561      	strb	r1, [r4, #21]
 800d2b4:	7da0      	ldrb	r0, [r4, #22]
 800d2b6:	f080 0001 	eor.w	r0, r0, #1
 800d2ba:	b002      	add	sp, #8
 800d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c0:	9a01      	ldr	r2, [sp, #4]
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	e7ee      	b.n	800d2a4 <ucdr_serialize_uint32_t+0xc0>
 800d2c6:	68a2      	ldr	r2, [r4, #8]
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	7da0      	ldrb	r0, [r4, #22]
 800d2cc:	7567      	strb	r7, [r4, #21]
 800d2ce:	1b92      	subs	r2, r2, r6
 800d2d0:	1b9b      	subs	r3, r3, r6
 800d2d2:	f080 0001 	eor.w	r0, r0, #1
 800d2d6:	60a2      	str	r2, [r4, #8]
 800d2d8:	6123      	str	r3, [r4, #16]
 800d2da:	b002      	add	sp, #8
 800d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e0:	68a3      	ldr	r3, [r4, #8]
 800d2e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	68a3      	ldr	r3, [r4, #8]
 800d2ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d2ee:	701a      	strb	r2, [r3, #0]
 800d2f0:	68a3      	ldr	r3, [r4, #8]
 800d2f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d2f6:	701a      	strb	r2, [r3, #0]
 800d2f8:	e7ad      	b.n	800d256 <ucdr_serialize_uint32_t+0x72>
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	ad01      	add	r5, sp, #4
 800d2fe:	4629      	mov	r1, r5
 800d300:	4632      	mov	r2, r6
 800d302:	f00f fbe4 	bl	801cace <memcpy>
 800d306:	68a0      	ldr	r0, [r4, #8]
 800d308:	4642      	mov	r2, r8
 800d30a:	19a9      	adds	r1, r5, r6
 800d30c:	f00f fbdf 	bl	801cace <memcpy>
 800d310:	e7a1      	b.n	800d256 <ucdr_serialize_uint32_t+0x72>
 800d312:	bf00      	nop

0800d314 <ucdr_serialize_endian_uint32_t>:
 800d314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d318:	b083      	sub	sp, #12
 800d31a:	460d      	mov	r5, r1
 800d31c:	2104      	movs	r1, #4
 800d31e:	4604      	mov	r4, r0
 800d320:	9201      	str	r2, [sp, #4]
 800d322:	f001 f837 	bl	800e394 <ucdr_buffer_alignment>
 800d326:	4601      	mov	r1, r0
 800d328:	4620      	mov	r0, r4
 800d32a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d32e:	f001 f875 	bl	800e41c <ucdr_advance_buffer>
 800d332:	2104      	movs	r1, #4
 800d334:	4620      	mov	r0, r4
 800d336:	f000 ffcd 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d138      	bne.n	800d3b0 <ucdr_serialize_endian_uint32_t+0x9c>
 800d33e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d342:	42b7      	cmp	r7, r6
 800d344:	d92f      	bls.n	800d3a6 <ucdr_serialize_endian_uint32_t+0x92>
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	60a7      	str	r7, [r4, #8]
 800d34a:	1bbf      	subs	r7, r7, r6
 800d34c:	443b      	add	r3, r7
 800d34e:	f1c7 0904 	rsb	r9, r7, #4
 800d352:	6123      	str	r3, [r4, #16]
 800d354:	4649      	mov	r1, r9
 800d356:	4620      	mov	r0, r4
 800d358:	f000 ffc8 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d04a      	beq.n	800d3f6 <ucdr_serialize_endian_uint32_t+0xe2>
 800d360:	2d01      	cmp	r5, #1
 800d362:	d063      	beq.n	800d42c <ucdr_serialize_endian_uint32_t+0x118>
 800d364:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d368:	7033      	strb	r3, [r6, #0]
 800d36a:	2f00      	cmp	r7, #0
 800d36c:	d051      	beq.n	800d412 <ucdr_serialize_endian_uint32_t+0xfe>
 800d36e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d372:	7073      	strb	r3, [r6, #1]
 800d374:	2f01      	cmp	r7, #1
 800d376:	d050      	beq.n	800d41a <ucdr_serialize_endian_uint32_t+0x106>
 800d378:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d37c:	70b3      	strb	r3, [r6, #2]
 800d37e:	2f02      	cmp	r7, #2
 800d380:	d04f      	beq.n	800d422 <ucdr_serialize_endian_uint32_t+0x10e>
 800d382:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d386:	70f3      	strb	r3, [r6, #3]
 800d388:	6923      	ldr	r3, [r4, #16]
 800d38a:	68a2      	ldr	r2, [r4, #8]
 800d38c:	7da0      	ldrb	r0, [r4, #22]
 800d38e:	3304      	adds	r3, #4
 800d390:	444a      	add	r2, r9
 800d392:	1bdb      	subs	r3, r3, r7
 800d394:	2104      	movs	r1, #4
 800d396:	f080 0001 	eor.w	r0, r0, #1
 800d39a:	60a2      	str	r2, [r4, #8]
 800d39c:	6123      	str	r3, [r4, #16]
 800d39e:	7561      	strb	r1, [r4, #21]
 800d3a0:	b003      	add	sp, #12
 800d3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3a6:	2104      	movs	r1, #4
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f000 ff9f 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d3ae:	b1c8      	cbz	r0, 800d3e4 <ucdr_serialize_endian_uint32_t+0xd0>
 800d3b0:	2d01      	cmp	r5, #1
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	d01c      	beq.n	800d3f0 <ucdr_serialize_endian_uint32_t+0xdc>
 800d3b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d3ba:	701a      	strb	r2, [r3, #0]
 800d3bc:	68a3      	ldr	r3, [r4, #8]
 800d3be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3c2:	705a      	strb	r2, [r3, #1]
 800d3c4:	68a3      	ldr	r3, [r4, #8]
 800d3c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d3ca:	709a      	strb	r2, [r3, #2]
 800d3cc:	68a3      	ldr	r3, [r4, #8]
 800d3ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3d2:	70da      	strb	r2, [r3, #3]
 800d3d4:	68a2      	ldr	r2, [r4, #8]
 800d3d6:	6923      	ldr	r3, [r4, #16]
 800d3d8:	3204      	adds	r2, #4
 800d3da:	3304      	adds	r3, #4
 800d3dc:	2104      	movs	r1, #4
 800d3de:	60a2      	str	r2, [r4, #8]
 800d3e0:	6123      	str	r3, [r4, #16]
 800d3e2:	7561      	strb	r1, [r4, #21]
 800d3e4:	7da0      	ldrb	r0, [r4, #22]
 800d3e6:	f080 0001 	eor.w	r0, r0, #1
 800d3ea:	b003      	add	sp, #12
 800d3ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3f0:	9a01      	ldr	r2, [sp, #4]
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	e7ee      	b.n	800d3d4 <ucdr_serialize_endian_uint32_t+0xc0>
 800d3f6:	68a2      	ldr	r2, [r4, #8]
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	7da0      	ldrb	r0, [r4, #22]
 800d3fc:	f884 8015 	strb.w	r8, [r4, #21]
 800d400:	1bd2      	subs	r2, r2, r7
 800d402:	1bdb      	subs	r3, r3, r7
 800d404:	f080 0001 	eor.w	r0, r0, #1
 800d408:	60a2      	str	r2, [r4, #8]
 800d40a:	6123      	str	r3, [r4, #16]
 800d40c:	b003      	add	sp, #12
 800d40e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d418:	701a      	strb	r2, [r3, #0]
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d420:	701a      	strb	r2, [r3, #0]
 800d422:	68a3      	ldr	r3, [r4, #8]
 800d424:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	e7ad      	b.n	800d388 <ucdr_serialize_endian_uint32_t+0x74>
 800d42c:	ad01      	add	r5, sp, #4
 800d42e:	4629      	mov	r1, r5
 800d430:	463a      	mov	r2, r7
 800d432:	4630      	mov	r0, r6
 800d434:	f00f fb4b 	bl	801cace <memcpy>
 800d438:	68a0      	ldr	r0, [r4, #8]
 800d43a:	464a      	mov	r2, r9
 800d43c:	19e9      	adds	r1, r5, r7
 800d43e:	f00f fb46 	bl	801cace <memcpy>
 800d442:	e7a1      	b.n	800d388 <ucdr_serialize_endian_uint32_t+0x74>

0800d444 <ucdr_deserialize_uint32_t>:
 800d444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d448:	460d      	mov	r5, r1
 800d44a:	2104      	movs	r1, #4
 800d44c:	4604      	mov	r4, r0
 800d44e:	f000 ffa1 	bl	800e394 <ucdr_buffer_alignment>
 800d452:	4601      	mov	r1, r0
 800d454:	4620      	mov	r0, r4
 800d456:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d45a:	f000 ffdf 	bl	800e41c <ucdr_advance_buffer>
 800d45e:	2104      	movs	r1, #4
 800d460:	4620      	mov	r0, r4
 800d462:	f000 ff37 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d466:	2800      	cmp	r0, #0
 800d468:	d138      	bne.n	800d4dc <ucdr_deserialize_uint32_t+0x98>
 800d46a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d46e:	42b7      	cmp	r7, r6
 800d470:	d92f      	bls.n	800d4d2 <ucdr_deserialize_uint32_t+0x8e>
 800d472:	6923      	ldr	r3, [r4, #16]
 800d474:	60a7      	str	r7, [r4, #8]
 800d476:	1bbf      	subs	r7, r7, r6
 800d478:	443b      	add	r3, r7
 800d47a:	f1c7 0904 	rsb	r9, r7, #4
 800d47e:	6123      	str	r3, [r4, #16]
 800d480:	4649      	mov	r1, r9
 800d482:	4620      	mov	r0, r4
 800d484:	f000 ff32 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d488:	2800      	cmp	r0, #0
 800d48a:	d046      	beq.n	800d51a <ucdr_deserialize_uint32_t+0xd6>
 800d48c:	7d23      	ldrb	r3, [r4, #20]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d05c      	beq.n	800d54c <ucdr_deserialize_uint32_t+0x108>
 800d492:	78f3      	ldrb	r3, [r6, #3]
 800d494:	702b      	strb	r3, [r5, #0]
 800d496:	2f00      	cmp	r7, #0
 800d498:	d04c      	beq.n	800d534 <ucdr_deserialize_uint32_t+0xf0>
 800d49a:	78b3      	ldrb	r3, [r6, #2]
 800d49c:	706b      	strb	r3, [r5, #1]
 800d49e:	2f01      	cmp	r7, #1
 800d4a0:	f105 0302 	add.w	r3, r5, #2
 800d4a4:	d04a      	beq.n	800d53c <ucdr_deserialize_uint32_t+0xf8>
 800d4a6:	7873      	ldrb	r3, [r6, #1]
 800d4a8:	70ab      	strb	r3, [r5, #2]
 800d4aa:	2f02      	cmp	r7, #2
 800d4ac:	f105 0303 	add.w	r3, r5, #3
 800d4b0:	d048      	beq.n	800d544 <ucdr_deserialize_uint32_t+0x100>
 800d4b2:	7833      	ldrb	r3, [r6, #0]
 800d4b4:	70eb      	strb	r3, [r5, #3]
 800d4b6:	6923      	ldr	r3, [r4, #16]
 800d4b8:	68a2      	ldr	r2, [r4, #8]
 800d4ba:	7da0      	ldrb	r0, [r4, #22]
 800d4bc:	2104      	movs	r1, #4
 800d4be:	3304      	adds	r3, #4
 800d4c0:	444a      	add	r2, r9
 800d4c2:	1bdb      	subs	r3, r3, r7
 800d4c4:	7561      	strb	r1, [r4, #21]
 800d4c6:	60a2      	str	r2, [r4, #8]
 800d4c8:	6123      	str	r3, [r4, #16]
 800d4ca:	f080 0001 	eor.w	r0, r0, #1
 800d4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4d2:	2104      	movs	r1, #4
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f000 ff09 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d4da:	b1b0      	cbz	r0, 800d50a <ucdr_deserialize_uint32_t+0xc6>
 800d4dc:	7d23      	ldrb	r3, [r4, #20]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	68a3      	ldr	r3, [r4, #8]
 800d4e2:	d017      	beq.n	800d514 <ucdr_deserialize_uint32_t+0xd0>
 800d4e4:	78db      	ldrb	r3, [r3, #3]
 800d4e6:	702b      	strb	r3, [r5, #0]
 800d4e8:	68a3      	ldr	r3, [r4, #8]
 800d4ea:	789b      	ldrb	r3, [r3, #2]
 800d4ec:	706b      	strb	r3, [r5, #1]
 800d4ee:	68a3      	ldr	r3, [r4, #8]
 800d4f0:	785b      	ldrb	r3, [r3, #1]
 800d4f2:	70ab      	strb	r3, [r5, #2]
 800d4f4:	68a3      	ldr	r3, [r4, #8]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	70eb      	strb	r3, [r5, #3]
 800d4fa:	68a2      	ldr	r2, [r4, #8]
 800d4fc:	6923      	ldr	r3, [r4, #16]
 800d4fe:	3204      	adds	r2, #4
 800d500:	3304      	adds	r3, #4
 800d502:	2104      	movs	r1, #4
 800d504:	60a2      	str	r2, [r4, #8]
 800d506:	6123      	str	r3, [r4, #16]
 800d508:	7561      	strb	r1, [r4, #21]
 800d50a:	7da0      	ldrb	r0, [r4, #22]
 800d50c:	f080 0001 	eor.w	r0, r0, #1
 800d510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	602b      	str	r3, [r5, #0]
 800d518:	e7ef      	b.n	800d4fa <ucdr_deserialize_uint32_t+0xb6>
 800d51a:	68a2      	ldr	r2, [r4, #8]
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	7da0      	ldrb	r0, [r4, #22]
 800d520:	f884 8015 	strb.w	r8, [r4, #21]
 800d524:	1bd2      	subs	r2, r2, r7
 800d526:	1bdb      	subs	r3, r3, r7
 800d528:	60a2      	str	r2, [r4, #8]
 800d52a:	6123      	str	r3, [r4, #16]
 800d52c:	f080 0001 	eor.w	r0, r0, #1
 800d530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d534:	68a3      	ldr	r3, [r4, #8]
 800d536:	789b      	ldrb	r3, [r3, #2]
 800d538:	706b      	strb	r3, [r5, #1]
 800d53a:	1cab      	adds	r3, r5, #2
 800d53c:	68a2      	ldr	r2, [r4, #8]
 800d53e:	7852      	ldrb	r2, [r2, #1]
 800d540:	f803 2b01 	strb.w	r2, [r3], #1
 800d544:	68a2      	ldr	r2, [r4, #8]
 800d546:	7812      	ldrb	r2, [r2, #0]
 800d548:	701a      	strb	r2, [r3, #0]
 800d54a:	e7b4      	b.n	800d4b6 <ucdr_deserialize_uint32_t+0x72>
 800d54c:	4631      	mov	r1, r6
 800d54e:	463a      	mov	r2, r7
 800d550:	4628      	mov	r0, r5
 800d552:	f00f fabc 	bl	801cace <memcpy>
 800d556:	68a1      	ldr	r1, [r4, #8]
 800d558:	464a      	mov	r2, r9
 800d55a:	19e8      	adds	r0, r5, r7
 800d55c:	f00f fab7 	bl	801cace <memcpy>
 800d560:	e7a9      	b.n	800d4b6 <ucdr_deserialize_uint32_t+0x72>
 800d562:	bf00      	nop

0800d564 <ucdr_deserialize_endian_uint32_t>:
 800d564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d568:	460e      	mov	r6, r1
 800d56a:	2104      	movs	r1, #4
 800d56c:	4604      	mov	r4, r0
 800d56e:	4615      	mov	r5, r2
 800d570:	f000 ff10 	bl	800e394 <ucdr_buffer_alignment>
 800d574:	4601      	mov	r1, r0
 800d576:	4620      	mov	r0, r4
 800d578:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d57c:	f000 ff4e 	bl	800e41c <ucdr_advance_buffer>
 800d580:	2104      	movs	r1, #4
 800d582:	4620      	mov	r0, r4
 800d584:	f000 fea6 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d588:	2800      	cmp	r0, #0
 800d58a:	d13c      	bne.n	800d606 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d58c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d590:	42bb      	cmp	r3, r7
 800d592:	d933      	bls.n	800d5fc <ucdr_deserialize_endian_uint32_t+0x98>
 800d594:	eba3 0807 	sub.w	r8, r3, r7
 800d598:	60a3      	str	r3, [r4, #8]
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	f1c8 0a04 	rsb	sl, r8, #4
 800d5a0:	4443      	add	r3, r8
 800d5a2:	6123      	str	r3, [r4, #16]
 800d5a4:	4651      	mov	r1, sl
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f000 fea0 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d048      	beq.n	800d642 <ucdr_deserialize_endian_uint32_t+0xde>
 800d5b0:	2e01      	cmp	r6, #1
 800d5b2:	d061      	beq.n	800d678 <ucdr_deserialize_endian_uint32_t+0x114>
 800d5b4:	78fb      	ldrb	r3, [r7, #3]
 800d5b6:	702b      	strb	r3, [r5, #0]
 800d5b8:	f1b8 0f00 	cmp.w	r8, #0
 800d5bc:	d050      	beq.n	800d660 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d5be:	78bb      	ldrb	r3, [r7, #2]
 800d5c0:	706b      	strb	r3, [r5, #1]
 800d5c2:	f1b8 0f01 	cmp.w	r8, #1
 800d5c6:	f105 0302 	add.w	r3, r5, #2
 800d5ca:	d04d      	beq.n	800d668 <ucdr_deserialize_endian_uint32_t+0x104>
 800d5cc:	787b      	ldrb	r3, [r7, #1]
 800d5ce:	70ab      	strb	r3, [r5, #2]
 800d5d0:	f1b8 0f02 	cmp.w	r8, #2
 800d5d4:	f105 0303 	add.w	r3, r5, #3
 800d5d8:	d04a      	beq.n	800d670 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d5da:	783b      	ldrb	r3, [r7, #0]
 800d5dc:	70eb      	strb	r3, [r5, #3]
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	68a2      	ldr	r2, [r4, #8]
 800d5e2:	7da0      	ldrb	r0, [r4, #22]
 800d5e4:	2104      	movs	r1, #4
 800d5e6:	3304      	adds	r3, #4
 800d5e8:	4452      	add	r2, sl
 800d5ea:	eba3 0308 	sub.w	r3, r3, r8
 800d5ee:	7561      	strb	r1, [r4, #21]
 800d5f0:	60a2      	str	r2, [r4, #8]
 800d5f2:	6123      	str	r3, [r4, #16]
 800d5f4:	f080 0001 	eor.w	r0, r0, #1
 800d5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fc:	2104      	movs	r1, #4
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 fe74 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d604:	b1a8      	cbz	r0, 800d632 <ucdr_deserialize_endian_uint32_t+0xce>
 800d606:	2e01      	cmp	r6, #1
 800d608:	68a3      	ldr	r3, [r4, #8]
 800d60a:	d017      	beq.n	800d63c <ucdr_deserialize_endian_uint32_t+0xd8>
 800d60c:	78db      	ldrb	r3, [r3, #3]
 800d60e:	702b      	strb	r3, [r5, #0]
 800d610:	68a3      	ldr	r3, [r4, #8]
 800d612:	789b      	ldrb	r3, [r3, #2]
 800d614:	706b      	strb	r3, [r5, #1]
 800d616:	68a3      	ldr	r3, [r4, #8]
 800d618:	785b      	ldrb	r3, [r3, #1]
 800d61a:	70ab      	strb	r3, [r5, #2]
 800d61c:	68a3      	ldr	r3, [r4, #8]
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	70eb      	strb	r3, [r5, #3]
 800d622:	68a2      	ldr	r2, [r4, #8]
 800d624:	6923      	ldr	r3, [r4, #16]
 800d626:	3204      	adds	r2, #4
 800d628:	3304      	adds	r3, #4
 800d62a:	2104      	movs	r1, #4
 800d62c:	60a2      	str	r2, [r4, #8]
 800d62e:	6123      	str	r3, [r4, #16]
 800d630:	7561      	strb	r1, [r4, #21]
 800d632:	7da0      	ldrb	r0, [r4, #22]
 800d634:	f080 0001 	eor.w	r0, r0, #1
 800d638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	602b      	str	r3, [r5, #0]
 800d640:	e7ef      	b.n	800d622 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d642:	68a2      	ldr	r2, [r4, #8]
 800d644:	6923      	ldr	r3, [r4, #16]
 800d646:	7da0      	ldrb	r0, [r4, #22]
 800d648:	f884 9015 	strb.w	r9, [r4, #21]
 800d64c:	eba2 0208 	sub.w	r2, r2, r8
 800d650:	eba3 0308 	sub.w	r3, r3, r8
 800d654:	60a2      	str	r2, [r4, #8]
 800d656:	6123      	str	r3, [r4, #16]
 800d658:	f080 0001 	eor.w	r0, r0, #1
 800d65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d660:	68a3      	ldr	r3, [r4, #8]
 800d662:	789b      	ldrb	r3, [r3, #2]
 800d664:	706b      	strb	r3, [r5, #1]
 800d666:	1cab      	adds	r3, r5, #2
 800d668:	68a2      	ldr	r2, [r4, #8]
 800d66a:	7852      	ldrb	r2, [r2, #1]
 800d66c:	f803 2b01 	strb.w	r2, [r3], #1
 800d670:	68a2      	ldr	r2, [r4, #8]
 800d672:	7812      	ldrb	r2, [r2, #0]
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	e7b2      	b.n	800d5de <ucdr_deserialize_endian_uint32_t+0x7a>
 800d678:	4639      	mov	r1, r7
 800d67a:	4642      	mov	r2, r8
 800d67c:	4628      	mov	r0, r5
 800d67e:	f00f fa26 	bl	801cace <memcpy>
 800d682:	68a1      	ldr	r1, [r4, #8]
 800d684:	4652      	mov	r2, sl
 800d686:	eb05 0008 	add.w	r0, r5, r8
 800d68a:	f00f fa20 	bl	801cace <memcpy>
 800d68e:	e7a6      	b.n	800d5de <ucdr_deserialize_endian_uint32_t+0x7a>

0800d690 <ucdr_serialize_uint64_t>:
 800d690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d694:	2108      	movs	r1, #8
 800d696:	b082      	sub	sp, #8
 800d698:	4604      	mov	r4, r0
 800d69a:	e9cd 2300 	strd	r2, r3, [sp]
 800d69e:	f000 fe79 	bl	800e394 <ucdr_buffer_alignment>
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	7d67      	ldrb	r7, [r4, #21]
 800d6a8:	f000 feb8 	bl	800e41c <ucdr_advance_buffer>
 800d6ac:	2108      	movs	r1, #8
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f000 fe10 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d14e      	bne.n	800d756 <ucdr_serialize_uint64_t+0xc6>
 800d6b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d6bc:	42ab      	cmp	r3, r5
 800d6be:	d945      	bls.n	800d74c <ucdr_serialize_uint64_t+0xbc>
 800d6c0:	1b5e      	subs	r6, r3, r5
 800d6c2:	60a3      	str	r3, [r4, #8]
 800d6c4:	6923      	ldr	r3, [r4, #16]
 800d6c6:	f1c6 0808 	rsb	r8, r6, #8
 800d6ca:	4433      	add	r3, r6
 800d6cc:	6123      	str	r3, [r4, #16]
 800d6ce:	4641      	mov	r1, r8
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fe0b 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d074      	beq.n	800d7c4 <ucdr_serialize_uint64_t+0x134>
 800d6da:	7d23      	ldrb	r3, [r4, #20]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	f000 809b 	beq.w	800d818 <ucdr_serialize_uint64_t+0x188>
 800d6e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d6e6:	702b      	strb	r3, [r5, #0]
 800d6e8:	2e00      	cmp	r6, #0
 800d6ea:	d078      	beq.n	800d7de <ucdr_serialize_uint64_t+0x14e>
 800d6ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6f0:	706b      	strb	r3, [r5, #1]
 800d6f2:	2e01      	cmp	r6, #1
 800d6f4:	d077      	beq.n	800d7e6 <ucdr_serialize_uint64_t+0x156>
 800d6f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d6fa:	70ab      	strb	r3, [r5, #2]
 800d6fc:	2e02      	cmp	r6, #2
 800d6fe:	d076      	beq.n	800d7ee <ucdr_serialize_uint64_t+0x15e>
 800d700:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d704:	70eb      	strb	r3, [r5, #3]
 800d706:	2e03      	cmp	r6, #3
 800d708:	d075      	beq.n	800d7f6 <ucdr_serialize_uint64_t+0x166>
 800d70a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d70e:	712b      	strb	r3, [r5, #4]
 800d710:	2e04      	cmp	r6, #4
 800d712:	d074      	beq.n	800d7fe <ucdr_serialize_uint64_t+0x16e>
 800d714:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d718:	716b      	strb	r3, [r5, #5]
 800d71a:	2e05      	cmp	r6, #5
 800d71c:	d073      	beq.n	800d806 <ucdr_serialize_uint64_t+0x176>
 800d71e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d722:	71ab      	strb	r3, [r5, #6]
 800d724:	2e06      	cmp	r6, #6
 800d726:	d072      	beq.n	800d80e <ucdr_serialize_uint64_t+0x17e>
 800d728:	f89d 3000 	ldrb.w	r3, [sp]
 800d72c:	71eb      	strb	r3, [r5, #7]
 800d72e:	6923      	ldr	r3, [r4, #16]
 800d730:	68a2      	ldr	r2, [r4, #8]
 800d732:	7da0      	ldrb	r0, [r4, #22]
 800d734:	3308      	adds	r3, #8
 800d736:	1b9e      	subs	r6, r3, r6
 800d738:	4442      	add	r2, r8
 800d73a:	2308      	movs	r3, #8
 800d73c:	f080 0001 	eor.w	r0, r0, #1
 800d740:	60a2      	str	r2, [r4, #8]
 800d742:	6126      	str	r6, [r4, #16]
 800d744:	7563      	strb	r3, [r4, #21]
 800d746:	b002      	add	sp, #8
 800d748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74c:	2108      	movs	r1, #8
 800d74e:	4620      	mov	r0, r4
 800d750:	f000 fdcc 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d754:	b350      	cbz	r0, 800d7ac <ucdr_serialize_uint64_t+0x11c>
 800d756:	7d23      	ldrb	r3, [r4, #20]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d02d      	beq.n	800d7b8 <ucdr_serialize_uint64_t+0x128>
 800d75c:	68a3      	ldr	r3, [r4, #8]
 800d75e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	68a3      	ldr	r3, [r4, #8]
 800d766:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d76a:	705a      	strb	r2, [r3, #1]
 800d76c:	68a3      	ldr	r3, [r4, #8]
 800d76e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d772:	709a      	strb	r2, [r3, #2]
 800d774:	68a3      	ldr	r3, [r4, #8]
 800d776:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d77a:	70da      	strb	r2, [r3, #3]
 800d77c:	68a3      	ldr	r3, [r4, #8]
 800d77e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d782:	711a      	strb	r2, [r3, #4]
 800d784:	68a3      	ldr	r3, [r4, #8]
 800d786:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d78a:	715a      	strb	r2, [r3, #5]
 800d78c:	68a3      	ldr	r3, [r4, #8]
 800d78e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d792:	719a      	strb	r2, [r3, #6]
 800d794:	68a3      	ldr	r3, [r4, #8]
 800d796:	f89d 2000 	ldrb.w	r2, [sp]
 800d79a:	71da      	strb	r2, [r3, #7]
 800d79c:	68a2      	ldr	r2, [r4, #8]
 800d79e:	6923      	ldr	r3, [r4, #16]
 800d7a0:	3208      	adds	r2, #8
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	2108      	movs	r1, #8
 800d7a6:	60a2      	str	r2, [r4, #8]
 800d7a8:	6123      	str	r3, [r4, #16]
 800d7aa:	7561      	strb	r1, [r4, #21]
 800d7ac:	7da0      	ldrb	r0, [r4, #22]
 800d7ae:	f080 0001 	eor.w	r0, r0, #1
 800d7b2:	b002      	add	sp, #8
 800d7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b8:	466b      	mov	r3, sp
 800d7ba:	cb03      	ldmia	r3!, {r0, r1}
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	6018      	str	r0, [r3, #0]
 800d7c0:	6059      	str	r1, [r3, #4]
 800d7c2:	e7eb      	b.n	800d79c <ucdr_serialize_uint64_t+0x10c>
 800d7c4:	68a2      	ldr	r2, [r4, #8]
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	7da0      	ldrb	r0, [r4, #22]
 800d7ca:	7567      	strb	r7, [r4, #21]
 800d7cc:	1b92      	subs	r2, r2, r6
 800d7ce:	1b9b      	subs	r3, r3, r6
 800d7d0:	f080 0001 	eor.w	r0, r0, #1
 800d7d4:	60a2      	str	r2, [r4, #8]
 800d7d6:	6123      	str	r3, [r4, #16]
 800d7d8:	b002      	add	sp, #8
 800d7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7de:	68a3      	ldr	r3, [r4, #8]
 800d7e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d7e4:	701a      	strb	r2, [r3, #0]
 800d7e6:	68a3      	ldr	r3, [r4, #8]
 800d7e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d7ec:	701a      	strb	r2, [r3, #0]
 800d7ee:	68a3      	ldr	r3, [r4, #8]
 800d7f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d7f4:	701a      	strb	r2, [r3, #0]
 800d7f6:	68a3      	ldr	r3, [r4, #8]
 800d7f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d7fc:	701a      	strb	r2, [r3, #0]
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d804:	701a      	strb	r2, [r3, #0]
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	f89d 2000 	ldrb.w	r2, [sp]
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	e78a      	b.n	800d72e <ucdr_serialize_uint64_t+0x9e>
 800d818:	4628      	mov	r0, r5
 800d81a:	466d      	mov	r5, sp
 800d81c:	4629      	mov	r1, r5
 800d81e:	4632      	mov	r2, r6
 800d820:	f00f f955 	bl	801cace <memcpy>
 800d824:	68a0      	ldr	r0, [r4, #8]
 800d826:	4642      	mov	r2, r8
 800d828:	19a9      	adds	r1, r5, r6
 800d82a:	f00f f950 	bl	801cace <memcpy>
 800d82e:	e77e      	b.n	800d72e <ucdr_serialize_uint64_t+0x9e>

0800d830 <ucdr_serialize_int16_t>:
 800d830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d834:	b082      	sub	sp, #8
 800d836:	460b      	mov	r3, r1
 800d838:	2102      	movs	r1, #2
 800d83a:	4604      	mov	r4, r0
 800d83c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d840:	f000 fda8 	bl	800e394 <ucdr_buffer_alignment>
 800d844:	4601      	mov	r1, r0
 800d846:	4620      	mov	r0, r4
 800d848:	7d67      	ldrb	r7, [r4, #21]
 800d84a:	f000 fde7 	bl	800e41c <ucdr_advance_buffer>
 800d84e:	2102      	movs	r1, #2
 800d850:	4620      	mov	r0, r4
 800d852:	f000 fd3f 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d856:	bb78      	cbnz	r0, 800d8b8 <ucdr_serialize_int16_t+0x88>
 800d858:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d85c:	42ab      	cmp	r3, r5
 800d85e:	d926      	bls.n	800d8ae <ucdr_serialize_int16_t+0x7e>
 800d860:	1b5e      	subs	r6, r3, r5
 800d862:	60a3      	str	r3, [r4, #8]
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	f1c6 0802 	rsb	r8, r6, #2
 800d86a:	4433      	add	r3, r6
 800d86c:	6123      	str	r3, [r4, #16]
 800d86e:	4641      	mov	r1, r8
 800d870:	4620      	mov	r0, r4
 800d872:	f000 fd3b 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d876:	2800      	cmp	r0, #0
 800d878:	d03b      	beq.n	800d8f2 <ucdr_serialize_int16_t+0xc2>
 800d87a:	7d23      	ldrb	r3, [r4, #20]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d04a      	beq.n	800d916 <ucdr_serialize_int16_t+0xe6>
 800d880:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d884:	702b      	strb	r3, [r5, #0]
 800d886:	2e00      	cmp	r6, #0
 800d888:	d040      	beq.n	800d90c <ucdr_serialize_int16_t+0xdc>
 800d88a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d88e:	706b      	strb	r3, [r5, #1]
 800d890:	6923      	ldr	r3, [r4, #16]
 800d892:	68a2      	ldr	r2, [r4, #8]
 800d894:	7da0      	ldrb	r0, [r4, #22]
 800d896:	3302      	adds	r3, #2
 800d898:	1b9e      	subs	r6, r3, r6
 800d89a:	4442      	add	r2, r8
 800d89c:	2302      	movs	r3, #2
 800d89e:	f080 0001 	eor.w	r0, r0, #1
 800d8a2:	60a2      	str	r2, [r4, #8]
 800d8a4:	6126      	str	r6, [r4, #16]
 800d8a6:	7563      	strb	r3, [r4, #21]
 800d8a8:	b002      	add	sp, #8
 800d8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ae:	2102      	movs	r1, #2
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f000 fd1b 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d8b6:	b190      	cbz	r0, 800d8de <ucdr_serialize_int16_t+0xae>
 800d8b8:	7d23      	ldrb	r3, [r4, #20]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	68a3      	ldr	r3, [r4, #8]
 800d8be:	d014      	beq.n	800d8ea <ucdr_serialize_int16_t+0xba>
 800d8c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d8c4:	701a      	strb	r2, [r3, #0]
 800d8c6:	68a3      	ldr	r3, [r4, #8]
 800d8c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8cc:	705a      	strb	r2, [r3, #1]
 800d8ce:	68a2      	ldr	r2, [r4, #8]
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	3202      	adds	r2, #2
 800d8d4:	3302      	adds	r3, #2
 800d8d6:	2102      	movs	r1, #2
 800d8d8:	60a2      	str	r2, [r4, #8]
 800d8da:	6123      	str	r3, [r4, #16]
 800d8dc:	7561      	strb	r1, [r4, #21]
 800d8de:	7da0      	ldrb	r0, [r4, #22]
 800d8e0:	f080 0001 	eor.w	r0, r0, #1
 800d8e4:	b002      	add	sp, #8
 800d8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d8ee:	801a      	strh	r2, [r3, #0]
 800d8f0:	e7ed      	b.n	800d8ce <ucdr_serialize_int16_t+0x9e>
 800d8f2:	68a2      	ldr	r2, [r4, #8]
 800d8f4:	6923      	ldr	r3, [r4, #16]
 800d8f6:	7da0      	ldrb	r0, [r4, #22]
 800d8f8:	7567      	strb	r7, [r4, #21]
 800d8fa:	1b92      	subs	r2, r2, r6
 800d8fc:	1b9b      	subs	r3, r3, r6
 800d8fe:	f080 0001 	eor.w	r0, r0, #1
 800d902:	60a2      	str	r2, [r4, #8]
 800d904:	6123      	str	r3, [r4, #16]
 800d906:	b002      	add	sp, #8
 800d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d912:	701a      	strb	r2, [r3, #0]
 800d914:	e7bc      	b.n	800d890 <ucdr_serialize_int16_t+0x60>
 800d916:	4628      	mov	r0, r5
 800d918:	f10d 0506 	add.w	r5, sp, #6
 800d91c:	4629      	mov	r1, r5
 800d91e:	4632      	mov	r2, r6
 800d920:	f00f f8d5 	bl	801cace <memcpy>
 800d924:	68a0      	ldr	r0, [r4, #8]
 800d926:	4642      	mov	r2, r8
 800d928:	19a9      	adds	r1, r5, r6
 800d92a:	f00f f8d0 	bl	801cace <memcpy>
 800d92e:	e7af      	b.n	800d890 <ucdr_serialize_int16_t+0x60>

0800d930 <ucdr_deserialize_int16_t>:
 800d930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d934:	460d      	mov	r5, r1
 800d936:	2102      	movs	r1, #2
 800d938:	4604      	mov	r4, r0
 800d93a:	f000 fd2b 	bl	800e394 <ucdr_buffer_alignment>
 800d93e:	4601      	mov	r1, r0
 800d940:	4620      	mov	r0, r4
 800d942:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d946:	f000 fd69 	bl	800e41c <ucdr_advance_buffer>
 800d94a:	2102      	movs	r1, #2
 800d94c:	4620      	mov	r0, r4
 800d94e:	f000 fcc1 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800d952:	bb60      	cbnz	r0, 800d9ae <ucdr_deserialize_int16_t+0x7e>
 800d954:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d958:	42be      	cmp	r6, r7
 800d95a:	d923      	bls.n	800d9a4 <ucdr_deserialize_int16_t+0x74>
 800d95c:	6923      	ldr	r3, [r4, #16]
 800d95e:	60a6      	str	r6, [r4, #8]
 800d960:	1bf6      	subs	r6, r6, r7
 800d962:	4433      	add	r3, r6
 800d964:	f1c6 0902 	rsb	r9, r6, #2
 800d968:	6123      	str	r3, [r4, #16]
 800d96a:	4649      	mov	r1, r9
 800d96c:	4620      	mov	r0, r4
 800d96e:	f000 fcbd 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d972:	2800      	cmp	r0, #0
 800d974:	d034      	beq.n	800d9e0 <ucdr_deserialize_int16_t+0xb0>
 800d976:	7d23      	ldrb	r3, [r4, #20]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d042      	beq.n	800da02 <ucdr_deserialize_int16_t+0xd2>
 800d97c:	787b      	ldrb	r3, [r7, #1]
 800d97e:	702b      	strb	r3, [r5, #0]
 800d980:	2e00      	cmp	r6, #0
 800d982:	d03a      	beq.n	800d9fa <ucdr_deserialize_int16_t+0xca>
 800d984:	783b      	ldrb	r3, [r7, #0]
 800d986:	706b      	strb	r3, [r5, #1]
 800d988:	6923      	ldr	r3, [r4, #16]
 800d98a:	68a2      	ldr	r2, [r4, #8]
 800d98c:	7da0      	ldrb	r0, [r4, #22]
 800d98e:	2102      	movs	r1, #2
 800d990:	3302      	adds	r3, #2
 800d992:	444a      	add	r2, r9
 800d994:	1b9b      	subs	r3, r3, r6
 800d996:	7561      	strb	r1, [r4, #21]
 800d998:	60a2      	str	r2, [r4, #8]
 800d99a:	6123      	str	r3, [r4, #16]
 800d99c:	f080 0001 	eor.w	r0, r0, #1
 800d9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9a4:	2102      	movs	r1, #2
 800d9a6:	4620      	mov	r0, r4
 800d9a8:	f000 fca0 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800d9ac:	b180      	cbz	r0, 800d9d0 <ucdr_deserialize_int16_t+0xa0>
 800d9ae:	7d23      	ldrb	r3, [r4, #20]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	d011      	beq.n	800d9da <ucdr_deserialize_int16_t+0xaa>
 800d9b6:	785b      	ldrb	r3, [r3, #1]
 800d9b8:	702b      	strb	r3, [r5, #0]
 800d9ba:	68a3      	ldr	r3, [r4, #8]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	706b      	strb	r3, [r5, #1]
 800d9c0:	68a2      	ldr	r2, [r4, #8]
 800d9c2:	6923      	ldr	r3, [r4, #16]
 800d9c4:	3202      	adds	r2, #2
 800d9c6:	3302      	adds	r3, #2
 800d9c8:	2102      	movs	r1, #2
 800d9ca:	60a2      	str	r2, [r4, #8]
 800d9cc:	6123      	str	r3, [r4, #16]
 800d9ce:	7561      	strb	r1, [r4, #21]
 800d9d0:	7da0      	ldrb	r0, [r4, #22]
 800d9d2:	f080 0001 	eor.w	r0, r0, #1
 800d9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	802b      	strh	r3, [r5, #0]
 800d9de:	e7ef      	b.n	800d9c0 <ucdr_deserialize_int16_t+0x90>
 800d9e0:	68a2      	ldr	r2, [r4, #8]
 800d9e2:	6923      	ldr	r3, [r4, #16]
 800d9e4:	7da0      	ldrb	r0, [r4, #22]
 800d9e6:	f884 8015 	strb.w	r8, [r4, #21]
 800d9ea:	1b92      	subs	r2, r2, r6
 800d9ec:	1b9b      	subs	r3, r3, r6
 800d9ee:	60a2      	str	r2, [r4, #8]
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	f080 0001 	eor.w	r0, r0, #1
 800d9f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9fa:	68a3      	ldr	r3, [r4, #8]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	706b      	strb	r3, [r5, #1]
 800da00:	e7c2      	b.n	800d988 <ucdr_deserialize_int16_t+0x58>
 800da02:	4639      	mov	r1, r7
 800da04:	4632      	mov	r2, r6
 800da06:	4628      	mov	r0, r5
 800da08:	f00f f861 	bl	801cace <memcpy>
 800da0c:	68a1      	ldr	r1, [r4, #8]
 800da0e:	464a      	mov	r2, r9
 800da10:	19a8      	adds	r0, r5, r6
 800da12:	f00f f85c 	bl	801cace <memcpy>
 800da16:	e7b7      	b.n	800d988 <ucdr_deserialize_int16_t+0x58>

0800da18 <ucdr_serialize_int32_t>:
 800da18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da1c:	b082      	sub	sp, #8
 800da1e:	4604      	mov	r4, r0
 800da20:	9101      	str	r1, [sp, #4]
 800da22:	2104      	movs	r1, #4
 800da24:	f000 fcb6 	bl	800e394 <ucdr_buffer_alignment>
 800da28:	4601      	mov	r1, r0
 800da2a:	4620      	mov	r0, r4
 800da2c:	7d67      	ldrb	r7, [r4, #21]
 800da2e:	f000 fcf5 	bl	800e41c <ucdr_advance_buffer>
 800da32:	2104      	movs	r1, #4
 800da34:	4620      	mov	r0, r4
 800da36:	f000 fc4d 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800da3a:	2800      	cmp	r0, #0
 800da3c:	d139      	bne.n	800dab2 <ucdr_serialize_int32_t+0x9a>
 800da3e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800da42:	42ab      	cmp	r3, r5
 800da44:	d930      	bls.n	800daa8 <ucdr_serialize_int32_t+0x90>
 800da46:	1b5e      	subs	r6, r3, r5
 800da48:	60a3      	str	r3, [r4, #8]
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	f1c6 0804 	rsb	r8, r6, #4
 800da50:	4433      	add	r3, r6
 800da52:	6123      	str	r3, [r4, #16]
 800da54:	4641      	mov	r1, r8
 800da56:	4620      	mov	r0, r4
 800da58:	f000 fc48 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	d04c      	beq.n	800dafa <ucdr_serialize_int32_t+0xe2>
 800da60:	7d23      	ldrb	r3, [r4, #20]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d063      	beq.n	800db2e <ucdr_serialize_int32_t+0x116>
 800da66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da6a:	702b      	strb	r3, [r5, #0]
 800da6c:	2e00      	cmp	r6, #0
 800da6e:	d051      	beq.n	800db14 <ucdr_serialize_int32_t+0xfc>
 800da70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da74:	706b      	strb	r3, [r5, #1]
 800da76:	2e01      	cmp	r6, #1
 800da78:	d050      	beq.n	800db1c <ucdr_serialize_int32_t+0x104>
 800da7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da7e:	70ab      	strb	r3, [r5, #2]
 800da80:	2e02      	cmp	r6, #2
 800da82:	d04f      	beq.n	800db24 <ucdr_serialize_int32_t+0x10c>
 800da84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da88:	70eb      	strb	r3, [r5, #3]
 800da8a:	6923      	ldr	r3, [r4, #16]
 800da8c:	68a2      	ldr	r2, [r4, #8]
 800da8e:	7da0      	ldrb	r0, [r4, #22]
 800da90:	3304      	adds	r3, #4
 800da92:	1b9e      	subs	r6, r3, r6
 800da94:	4442      	add	r2, r8
 800da96:	2304      	movs	r3, #4
 800da98:	f080 0001 	eor.w	r0, r0, #1
 800da9c:	60a2      	str	r2, [r4, #8]
 800da9e:	6126      	str	r6, [r4, #16]
 800daa0:	7563      	strb	r3, [r4, #21]
 800daa2:	b002      	add	sp, #8
 800daa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa8:	2104      	movs	r1, #4
 800daaa:	4620      	mov	r0, r4
 800daac:	f000 fc1e 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800dab0:	b1d0      	cbz	r0, 800dae8 <ucdr_serialize_int32_t+0xd0>
 800dab2:	7d23      	ldrb	r3, [r4, #20]
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	d01c      	beq.n	800daf4 <ucdr_serialize_int32_t+0xdc>
 800daba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dabe:	701a      	strb	r2, [r3, #0]
 800dac0:	68a3      	ldr	r3, [r4, #8]
 800dac2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dac6:	705a      	strb	r2, [r3, #1]
 800dac8:	68a3      	ldr	r3, [r4, #8]
 800daca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dace:	709a      	strb	r2, [r3, #2]
 800dad0:	68a3      	ldr	r3, [r4, #8]
 800dad2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dad6:	70da      	strb	r2, [r3, #3]
 800dad8:	68a2      	ldr	r2, [r4, #8]
 800dada:	6923      	ldr	r3, [r4, #16]
 800dadc:	3204      	adds	r2, #4
 800dade:	3304      	adds	r3, #4
 800dae0:	2104      	movs	r1, #4
 800dae2:	60a2      	str	r2, [r4, #8]
 800dae4:	6123      	str	r3, [r4, #16]
 800dae6:	7561      	strb	r1, [r4, #21]
 800dae8:	7da0      	ldrb	r0, [r4, #22]
 800daea:	f080 0001 	eor.w	r0, r0, #1
 800daee:	b002      	add	sp, #8
 800daf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf4:	9a01      	ldr	r2, [sp, #4]
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	e7ee      	b.n	800dad8 <ucdr_serialize_int32_t+0xc0>
 800dafa:	68a2      	ldr	r2, [r4, #8]
 800dafc:	6923      	ldr	r3, [r4, #16]
 800dafe:	7da0      	ldrb	r0, [r4, #22]
 800db00:	7567      	strb	r7, [r4, #21]
 800db02:	1b92      	subs	r2, r2, r6
 800db04:	1b9b      	subs	r3, r3, r6
 800db06:	f080 0001 	eor.w	r0, r0, #1
 800db0a:	60a2      	str	r2, [r4, #8]
 800db0c:	6123      	str	r3, [r4, #16]
 800db0e:	b002      	add	sp, #8
 800db10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db14:	68a3      	ldr	r3, [r4, #8]
 800db16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db1a:	701a      	strb	r2, [r3, #0]
 800db1c:	68a3      	ldr	r3, [r4, #8]
 800db1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	68a3      	ldr	r3, [r4, #8]
 800db26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db2a:	701a      	strb	r2, [r3, #0]
 800db2c:	e7ad      	b.n	800da8a <ucdr_serialize_int32_t+0x72>
 800db2e:	4628      	mov	r0, r5
 800db30:	ad01      	add	r5, sp, #4
 800db32:	4629      	mov	r1, r5
 800db34:	4632      	mov	r2, r6
 800db36:	f00e ffca 	bl	801cace <memcpy>
 800db3a:	68a0      	ldr	r0, [r4, #8]
 800db3c:	4642      	mov	r2, r8
 800db3e:	19a9      	adds	r1, r5, r6
 800db40:	f00e ffc5 	bl	801cace <memcpy>
 800db44:	e7a1      	b.n	800da8a <ucdr_serialize_int32_t+0x72>
 800db46:	bf00      	nop

0800db48 <ucdr_deserialize_int32_t>:
 800db48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db4c:	460d      	mov	r5, r1
 800db4e:	2104      	movs	r1, #4
 800db50:	4604      	mov	r4, r0
 800db52:	f000 fc1f 	bl	800e394 <ucdr_buffer_alignment>
 800db56:	4601      	mov	r1, r0
 800db58:	4620      	mov	r0, r4
 800db5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db5e:	f000 fc5d 	bl	800e41c <ucdr_advance_buffer>
 800db62:	2104      	movs	r1, #4
 800db64:	4620      	mov	r0, r4
 800db66:	f000 fbb5 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800db6a:	2800      	cmp	r0, #0
 800db6c:	d138      	bne.n	800dbe0 <ucdr_deserialize_int32_t+0x98>
 800db6e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800db72:	42b7      	cmp	r7, r6
 800db74:	d92f      	bls.n	800dbd6 <ucdr_deserialize_int32_t+0x8e>
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	60a7      	str	r7, [r4, #8]
 800db7a:	1bbf      	subs	r7, r7, r6
 800db7c:	443b      	add	r3, r7
 800db7e:	f1c7 0904 	rsb	r9, r7, #4
 800db82:	6123      	str	r3, [r4, #16]
 800db84:	4649      	mov	r1, r9
 800db86:	4620      	mov	r0, r4
 800db88:	f000 fbb0 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d046      	beq.n	800dc1e <ucdr_deserialize_int32_t+0xd6>
 800db90:	7d23      	ldrb	r3, [r4, #20]
 800db92:	2b01      	cmp	r3, #1
 800db94:	d05c      	beq.n	800dc50 <ucdr_deserialize_int32_t+0x108>
 800db96:	78f3      	ldrb	r3, [r6, #3]
 800db98:	702b      	strb	r3, [r5, #0]
 800db9a:	2f00      	cmp	r7, #0
 800db9c:	d04c      	beq.n	800dc38 <ucdr_deserialize_int32_t+0xf0>
 800db9e:	78b3      	ldrb	r3, [r6, #2]
 800dba0:	706b      	strb	r3, [r5, #1]
 800dba2:	2f01      	cmp	r7, #1
 800dba4:	f105 0302 	add.w	r3, r5, #2
 800dba8:	d04a      	beq.n	800dc40 <ucdr_deserialize_int32_t+0xf8>
 800dbaa:	7873      	ldrb	r3, [r6, #1]
 800dbac:	70ab      	strb	r3, [r5, #2]
 800dbae:	2f02      	cmp	r7, #2
 800dbb0:	f105 0303 	add.w	r3, r5, #3
 800dbb4:	d048      	beq.n	800dc48 <ucdr_deserialize_int32_t+0x100>
 800dbb6:	7833      	ldrb	r3, [r6, #0]
 800dbb8:	70eb      	strb	r3, [r5, #3]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	68a2      	ldr	r2, [r4, #8]
 800dbbe:	7da0      	ldrb	r0, [r4, #22]
 800dbc0:	2104      	movs	r1, #4
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	444a      	add	r2, r9
 800dbc6:	1bdb      	subs	r3, r3, r7
 800dbc8:	7561      	strb	r1, [r4, #21]
 800dbca:	60a2      	str	r2, [r4, #8]
 800dbcc:	6123      	str	r3, [r4, #16]
 800dbce:	f080 0001 	eor.w	r0, r0, #1
 800dbd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbd6:	2104      	movs	r1, #4
 800dbd8:	4620      	mov	r0, r4
 800dbda:	f000 fb87 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800dbde:	b1b0      	cbz	r0, 800dc0e <ucdr_deserialize_int32_t+0xc6>
 800dbe0:	7d23      	ldrb	r3, [r4, #20]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	68a3      	ldr	r3, [r4, #8]
 800dbe6:	d017      	beq.n	800dc18 <ucdr_deserialize_int32_t+0xd0>
 800dbe8:	78db      	ldrb	r3, [r3, #3]
 800dbea:	702b      	strb	r3, [r5, #0]
 800dbec:	68a3      	ldr	r3, [r4, #8]
 800dbee:	789b      	ldrb	r3, [r3, #2]
 800dbf0:	706b      	strb	r3, [r5, #1]
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	785b      	ldrb	r3, [r3, #1]
 800dbf6:	70ab      	strb	r3, [r5, #2]
 800dbf8:	68a3      	ldr	r3, [r4, #8]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	70eb      	strb	r3, [r5, #3]
 800dbfe:	68a2      	ldr	r2, [r4, #8]
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	3204      	adds	r2, #4
 800dc04:	3304      	adds	r3, #4
 800dc06:	2104      	movs	r1, #4
 800dc08:	60a2      	str	r2, [r4, #8]
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	7561      	strb	r1, [r4, #21]
 800dc0e:	7da0      	ldrb	r0, [r4, #22]
 800dc10:	f080 0001 	eor.w	r0, r0, #1
 800dc14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	602b      	str	r3, [r5, #0]
 800dc1c:	e7ef      	b.n	800dbfe <ucdr_deserialize_int32_t+0xb6>
 800dc1e:	68a2      	ldr	r2, [r4, #8]
 800dc20:	6923      	ldr	r3, [r4, #16]
 800dc22:	7da0      	ldrb	r0, [r4, #22]
 800dc24:	f884 8015 	strb.w	r8, [r4, #21]
 800dc28:	1bd2      	subs	r2, r2, r7
 800dc2a:	1bdb      	subs	r3, r3, r7
 800dc2c:	60a2      	str	r2, [r4, #8]
 800dc2e:	6123      	str	r3, [r4, #16]
 800dc30:	f080 0001 	eor.w	r0, r0, #1
 800dc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc38:	68a3      	ldr	r3, [r4, #8]
 800dc3a:	789b      	ldrb	r3, [r3, #2]
 800dc3c:	706b      	strb	r3, [r5, #1]
 800dc3e:	1cab      	adds	r3, r5, #2
 800dc40:	68a2      	ldr	r2, [r4, #8]
 800dc42:	7852      	ldrb	r2, [r2, #1]
 800dc44:	f803 2b01 	strb.w	r2, [r3], #1
 800dc48:	68a2      	ldr	r2, [r4, #8]
 800dc4a:	7812      	ldrb	r2, [r2, #0]
 800dc4c:	701a      	strb	r2, [r3, #0]
 800dc4e:	e7b4      	b.n	800dbba <ucdr_deserialize_int32_t+0x72>
 800dc50:	4631      	mov	r1, r6
 800dc52:	463a      	mov	r2, r7
 800dc54:	4628      	mov	r0, r5
 800dc56:	f00e ff3a 	bl	801cace <memcpy>
 800dc5a:	68a1      	ldr	r1, [r4, #8]
 800dc5c:	464a      	mov	r2, r9
 800dc5e:	19e8      	adds	r0, r5, r7
 800dc60:	f00e ff35 	bl	801cace <memcpy>
 800dc64:	e7a9      	b.n	800dbba <ucdr_deserialize_int32_t+0x72>
 800dc66:	bf00      	nop

0800dc68 <ucdr_serialize_double>:
 800dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6c:	2108      	movs	r1, #8
 800dc6e:	b082      	sub	sp, #8
 800dc70:	4604      	mov	r4, r0
 800dc72:	ed8d 0b00 	vstr	d0, [sp]
 800dc76:	f000 fb8d 	bl	800e394 <ucdr_buffer_alignment>
 800dc7a:	4601      	mov	r1, r0
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	7d67      	ldrb	r7, [r4, #21]
 800dc80:	f000 fbcc 	bl	800e41c <ucdr_advance_buffer>
 800dc84:	2108      	movs	r1, #8
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 fb24 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d14e      	bne.n	800dd2e <ucdr_serialize_double+0xc6>
 800dc90:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc94:	42ab      	cmp	r3, r5
 800dc96:	d945      	bls.n	800dd24 <ucdr_serialize_double+0xbc>
 800dc98:	1b5e      	subs	r6, r3, r5
 800dc9a:	60a3      	str	r3, [r4, #8]
 800dc9c:	6923      	ldr	r3, [r4, #16]
 800dc9e:	f1c6 0808 	rsb	r8, r6, #8
 800dca2:	4433      	add	r3, r6
 800dca4:	6123      	str	r3, [r4, #16]
 800dca6:	4641      	mov	r1, r8
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f000 fb1f 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d074      	beq.n	800dd9c <ucdr_serialize_double+0x134>
 800dcb2:	7d23      	ldrb	r3, [r4, #20]
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	f000 809b 	beq.w	800ddf0 <ucdr_serialize_double+0x188>
 800dcba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcbe:	702b      	strb	r3, [r5, #0]
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	d078      	beq.n	800ddb6 <ucdr_serialize_double+0x14e>
 800dcc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcc8:	706b      	strb	r3, [r5, #1]
 800dcca:	2e01      	cmp	r6, #1
 800dccc:	d077      	beq.n	800ddbe <ucdr_serialize_double+0x156>
 800dcce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcd2:	70ab      	strb	r3, [r5, #2]
 800dcd4:	2e02      	cmp	r6, #2
 800dcd6:	d076      	beq.n	800ddc6 <ucdr_serialize_double+0x15e>
 800dcd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcdc:	70eb      	strb	r3, [r5, #3]
 800dcde:	2e03      	cmp	r6, #3
 800dce0:	d075      	beq.n	800ddce <ucdr_serialize_double+0x166>
 800dce2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800dce6:	712b      	strb	r3, [r5, #4]
 800dce8:	2e04      	cmp	r6, #4
 800dcea:	d074      	beq.n	800ddd6 <ucdr_serialize_double+0x16e>
 800dcec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800dcf0:	716b      	strb	r3, [r5, #5]
 800dcf2:	2e05      	cmp	r6, #5
 800dcf4:	d073      	beq.n	800ddde <ucdr_serialize_double+0x176>
 800dcf6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800dcfa:	71ab      	strb	r3, [r5, #6]
 800dcfc:	2e06      	cmp	r6, #6
 800dcfe:	d072      	beq.n	800dde6 <ucdr_serialize_double+0x17e>
 800dd00:	f89d 3000 	ldrb.w	r3, [sp]
 800dd04:	71eb      	strb	r3, [r5, #7]
 800dd06:	6923      	ldr	r3, [r4, #16]
 800dd08:	68a2      	ldr	r2, [r4, #8]
 800dd0a:	7da0      	ldrb	r0, [r4, #22]
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	1b9e      	subs	r6, r3, r6
 800dd10:	4442      	add	r2, r8
 800dd12:	2308      	movs	r3, #8
 800dd14:	f080 0001 	eor.w	r0, r0, #1
 800dd18:	60a2      	str	r2, [r4, #8]
 800dd1a:	6126      	str	r6, [r4, #16]
 800dd1c:	7563      	strb	r3, [r4, #21]
 800dd1e:	b002      	add	sp, #8
 800dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd24:	2108      	movs	r1, #8
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fae0 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800dd2c:	b350      	cbz	r0, 800dd84 <ucdr_serialize_double+0x11c>
 800dd2e:	7d23      	ldrb	r3, [r4, #20]
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d02d      	beq.n	800dd90 <ucdr_serialize_double+0x128>
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd3a:	701a      	strb	r2, [r3, #0]
 800dd3c:	68a3      	ldr	r3, [r4, #8]
 800dd3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd42:	705a      	strb	r2, [r3, #1]
 800dd44:	68a3      	ldr	r3, [r4, #8]
 800dd46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd4a:	709a      	strb	r2, [r3, #2]
 800dd4c:	68a3      	ldr	r3, [r4, #8]
 800dd4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd52:	70da      	strb	r2, [r3, #3]
 800dd54:	68a3      	ldr	r3, [r4, #8]
 800dd56:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dd5a:	711a      	strb	r2, [r3, #4]
 800dd5c:	68a3      	ldr	r3, [r4, #8]
 800dd5e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dd62:	715a      	strb	r2, [r3, #5]
 800dd64:	68a3      	ldr	r3, [r4, #8]
 800dd66:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dd6a:	719a      	strb	r2, [r3, #6]
 800dd6c:	68a3      	ldr	r3, [r4, #8]
 800dd6e:	f89d 2000 	ldrb.w	r2, [sp]
 800dd72:	71da      	strb	r2, [r3, #7]
 800dd74:	68a2      	ldr	r2, [r4, #8]
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	3208      	adds	r2, #8
 800dd7a:	3308      	adds	r3, #8
 800dd7c:	2108      	movs	r1, #8
 800dd7e:	60a2      	str	r2, [r4, #8]
 800dd80:	6123      	str	r3, [r4, #16]
 800dd82:	7561      	strb	r1, [r4, #21]
 800dd84:	7da0      	ldrb	r0, [r4, #22]
 800dd86:	f080 0001 	eor.w	r0, r0, #1
 800dd8a:	b002      	add	sp, #8
 800dd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd90:	466b      	mov	r3, sp
 800dd92:	cb03      	ldmia	r3!, {r0, r1}
 800dd94:	68a3      	ldr	r3, [r4, #8]
 800dd96:	6018      	str	r0, [r3, #0]
 800dd98:	6059      	str	r1, [r3, #4]
 800dd9a:	e7eb      	b.n	800dd74 <ucdr_serialize_double+0x10c>
 800dd9c:	68a2      	ldr	r2, [r4, #8]
 800dd9e:	6923      	ldr	r3, [r4, #16]
 800dda0:	7da0      	ldrb	r0, [r4, #22]
 800dda2:	7567      	strb	r7, [r4, #21]
 800dda4:	1b92      	subs	r2, r2, r6
 800dda6:	1b9b      	subs	r3, r3, r6
 800dda8:	f080 0001 	eor.w	r0, r0, #1
 800ddac:	60a2      	str	r2, [r4, #8]
 800ddae:	6123      	str	r3, [r4, #16]
 800ddb0:	b002      	add	sp, #8
 800ddb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb6:	68a3      	ldr	r3, [r4, #8]
 800ddb8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ddbc:	701a      	strb	r2, [r3, #0]
 800ddbe:	68a3      	ldr	r3, [r4, #8]
 800ddc0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ddc4:	701a      	strb	r2, [r3, #0]
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ddcc:	701a      	strb	r2, [r3, #0]
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ddd4:	701a      	strb	r2, [r3, #0]
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	68a3      	ldr	r3, [r4, #8]
 800dde0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	f89d 2000 	ldrb.w	r2, [sp]
 800ddec:	701a      	strb	r2, [r3, #0]
 800ddee:	e78a      	b.n	800dd06 <ucdr_serialize_double+0x9e>
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	466d      	mov	r5, sp
 800ddf4:	4629      	mov	r1, r5
 800ddf6:	4632      	mov	r2, r6
 800ddf8:	f00e fe69 	bl	801cace <memcpy>
 800ddfc:	68a0      	ldr	r0, [r4, #8]
 800ddfe:	4642      	mov	r2, r8
 800de00:	19a9      	adds	r1, r5, r6
 800de02:	f00e fe64 	bl	801cace <memcpy>
 800de06:	e77e      	b.n	800dd06 <ucdr_serialize_double+0x9e>

0800de08 <ucdr_serialize_endian_double>:
 800de08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de0c:	460e      	mov	r6, r1
 800de0e:	b083      	sub	sp, #12
 800de10:	2108      	movs	r1, #8
 800de12:	4604      	mov	r4, r0
 800de14:	ed8d 0b00 	vstr	d0, [sp]
 800de18:	f000 fabc 	bl	800e394 <ucdr_buffer_alignment>
 800de1c:	4601      	mov	r1, r0
 800de1e:	4620      	mov	r0, r4
 800de20:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de24:	f000 fafa 	bl	800e41c <ucdr_advance_buffer>
 800de28:	2108      	movs	r1, #8
 800de2a:	4620      	mov	r0, r4
 800de2c:	f000 fa52 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800de30:	2800      	cmp	r0, #0
 800de32:	d14d      	bne.n	800ded0 <ucdr_serialize_endian_double+0xc8>
 800de34:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800de38:	42bd      	cmp	r5, r7
 800de3a:	d944      	bls.n	800dec6 <ucdr_serialize_endian_double+0xbe>
 800de3c:	6923      	ldr	r3, [r4, #16]
 800de3e:	60a5      	str	r5, [r4, #8]
 800de40:	1bed      	subs	r5, r5, r7
 800de42:	442b      	add	r3, r5
 800de44:	f1c5 0908 	rsb	r9, r5, #8
 800de48:	6123      	str	r3, [r4, #16]
 800de4a:	4649      	mov	r1, r9
 800de4c:	4620      	mov	r0, r4
 800de4e:	f000 fa4d 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800de52:	2800      	cmp	r0, #0
 800de54:	d072      	beq.n	800df3c <ucdr_serialize_endian_double+0x134>
 800de56:	2e01      	cmp	r6, #1
 800de58:	f000 809b 	beq.w	800df92 <ucdr_serialize_endian_double+0x18a>
 800de5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de60:	703b      	strb	r3, [r7, #0]
 800de62:	2d00      	cmp	r5, #0
 800de64:	d078      	beq.n	800df58 <ucdr_serialize_endian_double+0x150>
 800de66:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de6a:	707b      	strb	r3, [r7, #1]
 800de6c:	2d01      	cmp	r5, #1
 800de6e:	d077      	beq.n	800df60 <ucdr_serialize_endian_double+0x158>
 800de70:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de74:	70bb      	strb	r3, [r7, #2]
 800de76:	2d02      	cmp	r5, #2
 800de78:	d076      	beq.n	800df68 <ucdr_serialize_endian_double+0x160>
 800de7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800de7e:	70fb      	strb	r3, [r7, #3]
 800de80:	2d03      	cmp	r5, #3
 800de82:	d075      	beq.n	800df70 <ucdr_serialize_endian_double+0x168>
 800de84:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800de88:	713b      	strb	r3, [r7, #4]
 800de8a:	2d04      	cmp	r5, #4
 800de8c:	d074      	beq.n	800df78 <ucdr_serialize_endian_double+0x170>
 800de8e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800de92:	717b      	strb	r3, [r7, #5]
 800de94:	2d05      	cmp	r5, #5
 800de96:	d073      	beq.n	800df80 <ucdr_serialize_endian_double+0x178>
 800de98:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800de9c:	71bb      	strb	r3, [r7, #6]
 800de9e:	2d06      	cmp	r5, #6
 800dea0:	d072      	beq.n	800df88 <ucdr_serialize_endian_double+0x180>
 800dea2:	f89d 3000 	ldrb.w	r3, [sp]
 800dea6:	71fb      	strb	r3, [r7, #7]
 800dea8:	6923      	ldr	r3, [r4, #16]
 800deaa:	68a2      	ldr	r2, [r4, #8]
 800deac:	7da0      	ldrb	r0, [r4, #22]
 800deae:	3308      	adds	r3, #8
 800deb0:	1b5d      	subs	r5, r3, r5
 800deb2:	444a      	add	r2, r9
 800deb4:	2308      	movs	r3, #8
 800deb6:	f080 0001 	eor.w	r0, r0, #1
 800deba:	60a2      	str	r2, [r4, #8]
 800debc:	6125      	str	r5, [r4, #16]
 800debe:	7563      	strb	r3, [r4, #21]
 800dec0:	b003      	add	sp, #12
 800dec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dec6:	2108      	movs	r1, #8
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 fa0f 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800dece:	b348      	cbz	r0, 800df24 <ucdr_serialize_endian_double+0x11c>
 800ded0:	2e01      	cmp	r6, #1
 800ded2:	d02d      	beq.n	800df30 <ucdr_serialize_endian_double+0x128>
 800ded4:	68a3      	ldr	r3, [r4, #8]
 800ded6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800deda:	701a      	strb	r2, [r3, #0]
 800dedc:	68a3      	ldr	r3, [r4, #8]
 800dede:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dee2:	705a      	strb	r2, [r3, #1]
 800dee4:	68a3      	ldr	r3, [r4, #8]
 800dee6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800deea:	709a      	strb	r2, [r3, #2]
 800deec:	68a3      	ldr	r3, [r4, #8]
 800deee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800def2:	70da      	strb	r2, [r3, #3]
 800def4:	68a3      	ldr	r3, [r4, #8]
 800def6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800defa:	711a      	strb	r2, [r3, #4]
 800defc:	68a3      	ldr	r3, [r4, #8]
 800defe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df02:	715a      	strb	r2, [r3, #5]
 800df04:	68a3      	ldr	r3, [r4, #8]
 800df06:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df0a:	719a      	strb	r2, [r3, #6]
 800df0c:	68a3      	ldr	r3, [r4, #8]
 800df0e:	f89d 2000 	ldrb.w	r2, [sp]
 800df12:	71da      	strb	r2, [r3, #7]
 800df14:	68a2      	ldr	r2, [r4, #8]
 800df16:	6923      	ldr	r3, [r4, #16]
 800df18:	3208      	adds	r2, #8
 800df1a:	3308      	adds	r3, #8
 800df1c:	2108      	movs	r1, #8
 800df1e:	60a2      	str	r2, [r4, #8]
 800df20:	6123      	str	r3, [r4, #16]
 800df22:	7561      	strb	r1, [r4, #21]
 800df24:	7da0      	ldrb	r0, [r4, #22]
 800df26:	f080 0001 	eor.w	r0, r0, #1
 800df2a:	b003      	add	sp, #12
 800df2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df30:	466b      	mov	r3, sp
 800df32:	cb03      	ldmia	r3!, {r0, r1}
 800df34:	68a3      	ldr	r3, [r4, #8]
 800df36:	6018      	str	r0, [r3, #0]
 800df38:	6059      	str	r1, [r3, #4]
 800df3a:	e7eb      	b.n	800df14 <ucdr_serialize_endian_double+0x10c>
 800df3c:	68a2      	ldr	r2, [r4, #8]
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	7da0      	ldrb	r0, [r4, #22]
 800df42:	f884 8015 	strb.w	r8, [r4, #21]
 800df46:	1b52      	subs	r2, r2, r5
 800df48:	1b5b      	subs	r3, r3, r5
 800df4a:	f080 0001 	eor.w	r0, r0, #1
 800df4e:	60a2      	str	r2, [r4, #8]
 800df50:	6123      	str	r3, [r4, #16]
 800df52:	b003      	add	sp, #12
 800df54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df58:	68a3      	ldr	r3, [r4, #8]
 800df5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	68a3      	ldr	r3, [r4, #8]
 800df62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df66:	701a      	strb	r2, [r3, #0]
 800df68:	68a3      	ldr	r3, [r4, #8]
 800df6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df6e:	701a      	strb	r2, [r3, #0]
 800df70:	68a3      	ldr	r3, [r4, #8]
 800df72:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df76:	701a      	strb	r2, [r3, #0]
 800df78:	68a3      	ldr	r3, [r4, #8]
 800df7a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df7e:	701a      	strb	r2, [r3, #0]
 800df80:	68a3      	ldr	r3, [r4, #8]
 800df82:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	68a3      	ldr	r3, [r4, #8]
 800df8a:	f89d 2000 	ldrb.w	r2, [sp]
 800df8e:	701a      	strb	r2, [r3, #0]
 800df90:	e78a      	b.n	800dea8 <ucdr_serialize_endian_double+0xa0>
 800df92:	466e      	mov	r6, sp
 800df94:	4631      	mov	r1, r6
 800df96:	462a      	mov	r2, r5
 800df98:	4638      	mov	r0, r7
 800df9a:	f00e fd98 	bl	801cace <memcpy>
 800df9e:	68a0      	ldr	r0, [r4, #8]
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	1971      	adds	r1, r6, r5
 800dfa4:	f00e fd93 	bl	801cace <memcpy>
 800dfa8:	e77e      	b.n	800dea8 <ucdr_serialize_endian_double+0xa0>
 800dfaa:	bf00      	nop

0800dfac <ucdr_deserialize_double>:
 800dfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	2108      	movs	r1, #8
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	f000 f9ed 	bl	800e394 <ucdr_buffer_alignment>
 800dfba:	4601      	mov	r1, r0
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dfc2:	f000 fa2b 	bl	800e41c <ucdr_advance_buffer>
 800dfc6:	2108      	movs	r1, #8
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f000 f983 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d151      	bne.n	800e076 <ucdr_deserialize_double+0xca>
 800dfd2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dfd6:	42be      	cmp	r6, r7
 800dfd8:	d948      	bls.n	800e06c <ucdr_deserialize_double+0xc0>
 800dfda:	6923      	ldr	r3, [r4, #16]
 800dfdc:	60a6      	str	r6, [r4, #8]
 800dfde:	1bf6      	subs	r6, r6, r7
 800dfe0:	4433      	add	r3, r6
 800dfe2:	f1c6 0808 	rsb	r8, r6, #8
 800dfe6:	6123      	str	r3, [r4, #16]
 800dfe8:	4641      	mov	r1, r8
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 f97e 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d06d      	beq.n	800e0d0 <ucdr_deserialize_double+0x124>
 800dff4:	7d23      	ldrb	r3, [r4, #20]
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	f000 8093 	beq.w	800e122 <ucdr_deserialize_double+0x176>
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	702b      	strb	r3, [r5, #0]
 800e000:	2e00      	cmp	r6, #0
 800e002:	d072      	beq.n	800e0ea <ucdr_deserialize_double+0x13e>
 800e004:	79bb      	ldrb	r3, [r7, #6]
 800e006:	706b      	strb	r3, [r5, #1]
 800e008:	2e01      	cmp	r6, #1
 800e00a:	f105 0302 	add.w	r3, r5, #2
 800e00e:	d070      	beq.n	800e0f2 <ucdr_deserialize_double+0x146>
 800e010:	797b      	ldrb	r3, [r7, #5]
 800e012:	70ab      	strb	r3, [r5, #2]
 800e014:	2e02      	cmp	r6, #2
 800e016:	f105 0303 	add.w	r3, r5, #3
 800e01a:	d06e      	beq.n	800e0fa <ucdr_deserialize_double+0x14e>
 800e01c:	793b      	ldrb	r3, [r7, #4]
 800e01e:	70eb      	strb	r3, [r5, #3]
 800e020:	2e03      	cmp	r6, #3
 800e022:	f105 0304 	add.w	r3, r5, #4
 800e026:	d06c      	beq.n	800e102 <ucdr_deserialize_double+0x156>
 800e028:	78fb      	ldrb	r3, [r7, #3]
 800e02a:	712b      	strb	r3, [r5, #4]
 800e02c:	2e04      	cmp	r6, #4
 800e02e:	f105 0305 	add.w	r3, r5, #5
 800e032:	d06a      	beq.n	800e10a <ucdr_deserialize_double+0x15e>
 800e034:	78bb      	ldrb	r3, [r7, #2]
 800e036:	716b      	strb	r3, [r5, #5]
 800e038:	2e05      	cmp	r6, #5
 800e03a:	f105 0306 	add.w	r3, r5, #6
 800e03e:	d068      	beq.n	800e112 <ucdr_deserialize_double+0x166>
 800e040:	787b      	ldrb	r3, [r7, #1]
 800e042:	71ab      	strb	r3, [r5, #6]
 800e044:	2e06      	cmp	r6, #6
 800e046:	f105 0307 	add.w	r3, r5, #7
 800e04a:	d066      	beq.n	800e11a <ucdr_deserialize_double+0x16e>
 800e04c:	783b      	ldrb	r3, [r7, #0]
 800e04e:	71eb      	strb	r3, [r5, #7]
 800e050:	6923      	ldr	r3, [r4, #16]
 800e052:	68a2      	ldr	r2, [r4, #8]
 800e054:	7da0      	ldrb	r0, [r4, #22]
 800e056:	3308      	adds	r3, #8
 800e058:	1b9e      	subs	r6, r3, r6
 800e05a:	2308      	movs	r3, #8
 800e05c:	4442      	add	r2, r8
 800e05e:	7563      	strb	r3, [r4, #21]
 800e060:	60a2      	str	r2, [r4, #8]
 800e062:	6126      	str	r6, [r4, #16]
 800e064:	f080 0001 	eor.w	r0, r0, #1
 800e068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e06c:	2108      	movs	r1, #8
 800e06e:	4620      	mov	r0, r4
 800e070:	f000 f93c 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800e074:	b310      	cbz	r0, 800e0bc <ucdr_deserialize_double+0x110>
 800e076:	7d23      	ldrb	r3, [r4, #20]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	68a3      	ldr	r3, [r4, #8]
 800e07c:	d023      	beq.n	800e0c6 <ucdr_deserialize_double+0x11a>
 800e07e:	79db      	ldrb	r3, [r3, #7]
 800e080:	702b      	strb	r3, [r5, #0]
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	799b      	ldrb	r3, [r3, #6]
 800e086:	706b      	strb	r3, [r5, #1]
 800e088:	68a3      	ldr	r3, [r4, #8]
 800e08a:	795b      	ldrb	r3, [r3, #5]
 800e08c:	70ab      	strb	r3, [r5, #2]
 800e08e:	68a3      	ldr	r3, [r4, #8]
 800e090:	791b      	ldrb	r3, [r3, #4]
 800e092:	70eb      	strb	r3, [r5, #3]
 800e094:	68a3      	ldr	r3, [r4, #8]
 800e096:	78db      	ldrb	r3, [r3, #3]
 800e098:	712b      	strb	r3, [r5, #4]
 800e09a:	68a3      	ldr	r3, [r4, #8]
 800e09c:	789b      	ldrb	r3, [r3, #2]
 800e09e:	716b      	strb	r3, [r5, #5]
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	785b      	ldrb	r3, [r3, #1]
 800e0a4:	71ab      	strb	r3, [r5, #6]
 800e0a6:	68a3      	ldr	r3, [r4, #8]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	71eb      	strb	r3, [r5, #7]
 800e0ac:	68a2      	ldr	r2, [r4, #8]
 800e0ae:	6923      	ldr	r3, [r4, #16]
 800e0b0:	3208      	adds	r2, #8
 800e0b2:	3308      	adds	r3, #8
 800e0b4:	2108      	movs	r1, #8
 800e0b6:	60a2      	str	r2, [r4, #8]
 800e0b8:	6123      	str	r3, [r4, #16]
 800e0ba:	7561      	strb	r1, [r4, #21]
 800e0bc:	7da0      	ldrb	r0, [r4, #22]
 800e0be:	f080 0001 	eor.w	r0, r0, #1
 800e0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	606b      	str	r3, [r5, #4]
 800e0cc:	602a      	str	r2, [r5, #0]
 800e0ce:	e7ed      	b.n	800e0ac <ucdr_deserialize_double+0x100>
 800e0d0:	68a2      	ldr	r2, [r4, #8]
 800e0d2:	6923      	ldr	r3, [r4, #16]
 800e0d4:	7da0      	ldrb	r0, [r4, #22]
 800e0d6:	f884 9015 	strb.w	r9, [r4, #21]
 800e0da:	1b92      	subs	r2, r2, r6
 800e0dc:	1b9b      	subs	r3, r3, r6
 800e0de:	60a2      	str	r2, [r4, #8]
 800e0e0:	6123      	str	r3, [r4, #16]
 800e0e2:	f080 0001 	eor.w	r0, r0, #1
 800e0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	799b      	ldrb	r3, [r3, #6]
 800e0ee:	706b      	strb	r3, [r5, #1]
 800e0f0:	1cab      	adds	r3, r5, #2
 800e0f2:	68a2      	ldr	r2, [r4, #8]
 800e0f4:	7952      	ldrb	r2, [r2, #5]
 800e0f6:	f803 2b01 	strb.w	r2, [r3], #1
 800e0fa:	68a2      	ldr	r2, [r4, #8]
 800e0fc:	7912      	ldrb	r2, [r2, #4]
 800e0fe:	f803 2b01 	strb.w	r2, [r3], #1
 800e102:	68a2      	ldr	r2, [r4, #8]
 800e104:	78d2      	ldrb	r2, [r2, #3]
 800e106:	f803 2b01 	strb.w	r2, [r3], #1
 800e10a:	68a2      	ldr	r2, [r4, #8]
 800e10c:	7892      	ldrb	r2, [r2, #2]
 800e10e:	f803 2b01 	strb.w	r2, [r3], #1
 800e112:	68a2      	ldr	r2, [r4, #8]
 800e114:	7852      	ldrb	r2, [r2, #1]
 800e116:	f803 2b01 	strb.w	r2, [r3], #1
 800e11a:	68a2      	ldr	r2, [r4, #8]
 800e11c:	7812      	ldrb	r2, [r2, #0]
 800e11e:	701a      	strb	r2, [r3, #0]
 800e120:	e796      	b.n	800e050 <ucdr_deserialize_double+0xa4>
 800e122:	4639      	mov	r1, r7
 800e124:	4632      	mov	r2, r6
 800e126:	4628      	mov	r0, r5
 800e128:	f00e fcd1 	bl	801cace <memcpy>
 800e12c:	68a1      	ldr	r1, [r4, #8]
 800e12e:	4642      	mov	r2, r8
 800e130:	19a8      	adds	r0, r5, r6
 800e132:	f00e fccc 	bl	801cace <memcpy>
 800e136:	e78b      	b.n	800e050 <ucdr_deserialize_double+0xa4>

0800e138 <ucdr_deserialize_endian_double>:
 800e138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e13c:	460f      	mov	r7, r1
 800e13e:	2108      	movs	r1, #8
 800e140:	4604      	mov	r4, r0
 800e142:	4615      	mov	r5, r2
 800e144:	f000 f926 	bl	800e394 <ucdr_buffer_alignment>
 800e148:	4601      	mov	r1, r0
 800e14a:	4620      	mov	r0, r4
 800e14c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800e150:	f000 f964 	bl	800e41c <ucdr_advance_buffer>
 800e154:	2108      	movs	r1, #8
 800e156:	4620      	mov	r0, r4
 800e158:	f000 f8bc 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d159      	bne.n	800e214 <ucdr_deserialize_endian_double+0xdc>
 800e160:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800e164:	4546      	cmp	r6, r8
 800e166:	d950      	bls.n	800e20a <ucdr_deserialize_endian_double+0xd2>
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	60a6      	str	r6, [r4, #8]
 800e16c:	eba6 0608 	sub.w	r6, r6, r8
 800e170:	4433      	add	r3, r6
 800e172:	f1c6 0a08 	rsb	sl, r6, #8
 800e176:	6123      	str	r3, [r4, #16]
 800e178:	4651      	mov	r1, sl
 800e17a:	4620      	mov	r0, r4
 800e17c:	f000 f8b6 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800e180:	2800      	cmp	r0, #0
 800e182:	d073      	beq.n	800e26c <ucdr_deserialize_endian_double+0x134>
 800e184:	2f01      	cmp	r7, #1
 800e186:	f000 809a 	beq.w	800e2be <ucdr_deserialize_endian_double+0x186>
 800e18a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800e18e:	702b      	strb	r3, [r5, #0]
 800e190:	2e00      	cmp	r6, #0
 800e192:	d078      	beq.n	800e286 <ucdr_deserialize_endian_double+0x14e>
 800e194:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e198:	706b      	strb	r3, [r5, #1]
 800e19a:	2e01      	cmp	r6, #1
 800e19c:	f105 0302 	add.w	r3, r5, #2
 800e1a0:	d075      	beq.n	800e28e <ucdr_deserialize_endian_double+0x156>
 800e1a2:	f898 3005 	ldrb.w	r3, [r8, #5]
 800e1a6:	70ab      	strb	r3, [r5, #2]
 800e1a8:	2e02      	cmp	r6, #2
 800e1aa:	f105 0303 	add.w	r3, r5, #3
 800e1ae:	d072      	beq.n	800e296 <ucdr_deserialize_endian_double+0x15e>
 800e1b0:	f898 3004 	ldrb.w	r3, [r8, #4]
 800e1b4:	70eb      	strb	r3, [r5, #3]
 800e1b6:	2e03      	cmp	r6, #3
 800e1b8:	f105 0304 	add.w	r3, r5, #4
 800e1bc:	d06f      	beq.n	800e29e <ucdr_deserialize_endian_double+0x166>
 800e1be:	f898 3003 	ldrb.w	r3, [r8, #3]
 800e1c2:	712b      	strb	r3, [r5, #4]
 800e1c4:	2e04      	cmp	r6, #4
 800e1c6:	f105 0305 	add.w	r3, r5, #5
 800e1ca:	d06c      	beq.n	800e2a6 <ucdr_deserialize_endian_double+0x16e>
 800e1cc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e1d0:	716b      	strb	r3, [r5, #5]
 800e1d2:	2e05      	cmp	r6, #5
 800e1d4:	f105 0306 	add.w	r3, r5, #6
 800e1d8:	d069      	beq.n	800e2ae <ucdr_deserialize_endian_double+0x176>
 800e1da:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e1de:	71ab      	strb	r3, [r5, #6]
 800e1e0:	2e06      	cmp	r6, #6
 800e1e2:	f105 0307 	add.w	r3, r5, #7
 800e1e6:	d066      	beq.n	800e2b6 <ucdr_deserialize_endian_double+0x17e>
 800e1e8:	f898 3000 	ldrb.w	r3, [r8]
 800e1ec:	71eb      	strb	r3, [r5, #7]
 800e1ee:	6923      	ldr	r3, [r4, #16]
 800e1f0:	68a2      	ldr	r2, [r4, #8]
 800e1f2:	7da0      	ldrb	r0, [r4, #22]
 800e1f4:	3308      	adds	r3, #8
 800e1f6:	1b9e      	subs	r6, r3, r6
 800e1f8:	2308      	movs	r3, #8
 800e1fa:	4452      	add	r2, sl
 800e1fc:	7563      	strb	r3, [r4, #21]
 800e1fe:	60a2      	str	r2, [r4, #8]
 800e200:	6126      	str	r6, [r4, #16]
 800e202:	f080 0001 	eor.w	r0, r0, #1
 800e206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e20a:	2108      	movs	r1, #8
 800e20c:	4620      	mov	r0, r4
 800e20e:	f000 f86d 	bl	800e2ec <ucdr_check_final_buffer_behavior>
 800e212:	b308      	cbz	r0, 800e258 <ucdr_deserialize_endian_double+0x120>
 800e214:	2f01      	cmp	r7, #1
 800e216:	68a3      	ldr	r3, [r4, #8]
 800e218:	d023      	beq.n	800e262 <ucdr_deserialize_endian_double+0x12a>
 800e21a:	79db      	ldrb	r3, [r3, #7]
 800e21c:	702b      	strb	r3, [r5, #0]
 800e21e:	68a3      	ldr	r3, [r4, #8]
 800e220:	799b      	ldrb	r3, [r3, #6]
 800e222:	706b      	strb	r3, [r5, #1]
 800e224:	68a3      	ldr	r3, [r4, #8]
 800e226:	795b      	ldrb	r3, [r3, #5]
 800e228:	70ab      	strb	r3, [r5, #2]
 800e22a:	68a3      	ldr	r3, [r4, #8]
 800e22c:	791b      	ldrb	r3, [r3, #4]
 800e22e:	70eb      	strb	r3, [r5, #3]
 800e230:	68a3      	ldr	r3, [r4, #8]
 800e232:	78db      	ldrb	r3, [r3, #3]
 800e234:	712b      	strb	r3, [r5, #4]
 800e236:	68a3      	ldr	r3, [r4, #8]
 800e238:	789b      	ldrb	r3, [r3, #2]
 800e23a:	716b      	strb	r3, [r5, #5]
 800e23c:	68a3      	ldr	r3, [r4, #8]
 800e23e:	785b      	ldrb	r3, [r3, #1]
 800e240:	71ab      	strb	r3, [r5, #6]
 800e242:	68a3      	ldr	r3, [r4, #8]
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	71eb      	strb	r3, [r5, #7]
 800e248:	68a2      	ldr	r2, [r4, #8]
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	3208      	adds	r2, #8
 800e24e:	3308      	adds	r3, #8
 800e250:	2108      	movs	r1, #8
 800e252:	60a2      	str	r2, [r4, #8]
 800e254:	6123      	str	r3, [r4, #16]
 800e256:	7561      	strb	r1, [r4, #21]
 800e258:	7da0      	ldrb	r0, [r4, #22]
 800e25a:	f080 0001 	eor.w	r0, r0, #1
 800e25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	606b      	str	r3, [r5, #4]
 800e268:	602a      	str	r2, [r5, #0]
 800e26a:	e7ed      	b.n	800e248 <ucdr_deserialize_endian_double+0x110>
 800e26c:	68a2      	ldr	r2, [r4, #8]
 800e26e:	6923      	ldr	r3, [r4, #16]
 800e270:	7da0      	ldrb	r0, [r4, #22]
 800e272:	f884 9015 	strb.w	r9, [r4, #21]
 800e276:	1b92      	subs	r2, r2, r6
 800e278:	1b9b      	subs	r3, r3, r6
 800e27a:	60a2      	str	r2, [r4, #8]
 800e27c:	6123      	str	r3, [r4, #16]
 800e27e:	f080 0001 	eor.w	r0, r0, #1
 800e282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e286:	68a3      	ldr	r3, [r4, #8]
 800e288:	799b      	ldrb	r3, [r3, #6]
 800e28a:	706b      	strb	r3, [r5, #1]
 800e28c:	1cab      	adds	r3, r5, #2
 800e28e:	68a2      	ldr	r2, [r4, #8]
 800e290:	7952      	ldrb	r2, [r2, #5]
 800e292:	f803 2b01 	strb.w	r2, [r3], #1
 800e296:	68a2      	ldr	r2, [r4, #8]
 800e298:	7912      	ldrb	r2, [r2, #4]
 800e29a:	f803 2b01 	strb.w	r2, [r3], #1
 800e29e:	68a2      	ldr	r2, [r4, #8]
 800e2a0:	78d2      	ldrb	r2, [r2, #3]
 800e2a2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2a6:	68a2      	ldr	r2, [r4, #8]
 800e2a8:	7892      	ldrb	r2, [r2, #2]
 800e2aa:	f803 2b01 	strb.w	r2, [r3], #1
 800e2ae:	68a2      	ldr	r2, [r4, #8]
 800e2b0:	7852      	ldrb	r2, [r2, #1]
 800e2b2:	f803 2b01 	strb.w	r2, [r3], #1
 800e2b6:	68a2      	ldr	r2, [r4, #8]
 800e2b8:	7812      	ldrb	r2, [r2, #0]
 800e2ba:	701a      	strb	r2, [r3, #0]
 800e2bc:	e797      	b.n	800e1ee <ucdr_deserialize_endian_double+0xb6>
 800e2be:	4641      	mov	r1, r8
 800e2c0:	4632      	mov	r2, r6
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f00e fc03 	bl	801cace <memcpy>
 800e2c8:	68a1      	ldr	r1, [r4, #8]
 800e2ca:	4652      	mov	r2, sl
 800e2cc:	19a8      	adds	r0, r5, r6
 800e2ce:	f00e fbfe 	bl	801cace <memcpy>
 800e2d2:	e78c      	b.n	800e1ee <ucdr_deserialize_endian_double+0xb6>

0800e2d4 <ucdr_check_buffer_available_for>:
 800e2d4:	7d83      	ldrb	r3, [r0, #22]
 800e2d6:	b93b      	cbnz	r3, 800e2e8 <ucdr_check_buffer_available_for+0x14>
 800e2d8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e2dc:	4419      	add	r1, r3
 800e2de:	4288      	cmp	r0, r1
 800e2e0:	bf34      	ite	cc
 800e2e2:	2000      	movcc	r0, #0
 800e2e4:	2001      	movcs	r0, #1
 800e2e6:	4770      	bx	lr
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	4770      	bx	lr

0800e2ec <ucdr_check_final_buffer_behavior>:
 800e2ec:	7d83      	ldrb	r3, [r0, #22]
 800e2ee:	b943      	cbnz	r3, 800e302 <ucdr_check_final_buffer_behavior+0x16>
 800e2f0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e2f4:	4291      	cmp	r1, r2
 800e2f6:	b510      	push	{r4, lr}
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	d205      	bcs.n	800e308 <ucdr_check_final_buffer_behavior+0x1c>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4618      	mov	r0, r3
 800e300:	bd10      	pop	{r4, pc}
 800e302:	2300      	movs	r3, #0
 800e304:	4618      	mov	r0, r3
 800e306:	4770      	bx	lr
 800e308:	6982      	ldr	r2, [r0, #24]
 800e30a:	b13a      	cbz	r2, 800e31c <ucdr_check_final_buffer_behavior+0x30>
 800e30c:	69c1      	ldr	r1, [r0, #28]
 800e30e:	4790      	blx	r2
 800e310:	f080 0301 	eor.w	r3, r0, #1
 800e314:	b2db      	uxtb	r3, r3
 800e316:	75a0      	strb	r0, [r4, #22]
 800e318:	4618      	mov	r0, r3
 800e31a:	bd10      	pop	{r4, pc}
 800e31c:	2001      	movs	r0, #1
 800e31e:	75a0      	strb	r0, [r4, #22]
 800e320:	e7fa      	b.n	800e318 <ucdr_check_final_buffer_behavior+0x2c>
 800e322:	bf00      	nop

0800e324 <ucdr_set_on_full_buffer_callback>:
 800e324:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop

0800e32c <ucdr_init_buffer_origin_offset_endian>:
 800e32c:	b410      	push	{r4}
 800e32e:	9c01      	ldr	r4, [sp, #4]
 800e330:	6001      	str	r1, [r0, #0]
 800e332:	440a      	add	r2, r1
 800e334:	6042      	str	r2, [r0, #4]
 800e336:	190a      	adds	r2, r1, r4
 800e338:	441c      	add	r4, r3
 800e33a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e33e:	6082      	str	r2, [r0, #8]
 800e340:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e344:	7503      	strb	r3, [r0, #20]
 800e346:	2200      	movs	r2, #0
 800e348:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e350:	7542      	strb	r2, [r0, #21]
 800e352:	7582      	strb	r2, [r0, #22]
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop

0800e358 <ucdr_init_buffer_origin_offset>:
 800e358:	b510      	push	{r4, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	9c04      	ldr	r4, [sp, #16]
 800e35e:	9400      	str	r4, [sp, #0]
 800e360:	2401      	movs	r4, #1
 800e362:	9401      	str	r4, [sp, #4]
 800e364:	f7ff ffe2 	bl	800e32c <ucdr_init_buffer_origin_offset_endian>
 800e368:	b002      	add	sp, #8
 800e36a:	bd10      	pop	{r4, pc}

0800e36c <ucdr_init_buffer_origin>:
 800e36c:	b510      	push	{r4, lr}
 800e36e:	b082      	sub	sp, #8
 800e370:	2400      	movs	r4, #0
 800e372:	9400      	str	r4, [sp, #0]
 800e374:	f7ff fff0 	bl	800e358 <ucdr_init_buffer_origin_offset>
 800e378:	b002      	add	sp, #8
 800e37a:	bd10      	pop	{r4, pc}

0800e37c <ucdr_init_buffer>:
 800e37c:	2300      	movs	r3, #0
 800e37e:	f7ff bff5 	b.w	800e36c <ucdr_init_buffer_origin>
 800e382:	bf00      	nop

0800e384 <ucdr_alignment>:
 800e384:	fbb0 f3f1 	udiv	r3, r0, r1
 800e388:	fb03 0011 	mls	r0, r3, r1, r0
 800e38c:	1a08      	subs	r0, r1, r0
 800e38e:	3901      	subs	r1, #1
 800e390:	4008      	ands	r0, r1
 800e392:	4770      	bx	lr

0800e394 <ucdr_buffer_alignment>:
 800e394:	7d43      	ldrb	r3, [r0, #21]
 800e396:	428b      	cmp	r3, r1
 800e398:	d208      	bcs.n	800e3ac <ucdr_buffer_alignment+0x18>
 800e39a:	6900      	ldr	r0, [r0, #16]
 800e39c:	fbb0 f3f1 	udiv	r3, r0, r1
 800e3a0:	fb01 0013 	mls	r0, r1, r3, r0
 800e3a4:	1a08      	subs	r0, r1, r0
 800e3a6:	3901      	subs	r1, #1
 800e3a8:	4008      	ands	r0, r1
 800e3aa:	4770      	bx	lr
 800e3ac:	2000      	movs	r0, #0
 800e3ae:	4770      	bx	lr

0800e3b0 <ucdr_align_to>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	4604      	mov	r4, r0
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	f7ff ffed 	bl	800e394 <ucdr_buffer_alignment>
 800e3ba:	68a3      	ldr	r3, [r4, #8]
 800e3bc:	6921      	ldr	r1, [r4, #16]
 800e3be:	7565      	strb	r5, [r4, #21]
 800e3c0:	181a      	adds	r2, r3, r0
 800e3c2:	6863      	ldr	r3, [r4, #4]
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	4408      	add	r0, r1
 800e3c8:	bf28      	it	cs
 800e3ca:	4613      	movcs	r3, r2
 800e3cc:	6120      	str	r0, [r4, #16]
 800e3ce:	60a3      	str	r3, [r4, #8]
 800e3d0:	bd38      	pop	{r3, r4, r5, pc}
 800e3d2:	bf00      	nop

0800e3d4 <ucdr_buffer_length>:
 800e3d4:	6882      	ldr	r2, [r0, #8]
 800e3d6:	6800      	ldr	r0, [r0, #0]
 800e3d8:	1a10      	subs	r0, r2, r0
 800e3da:	4770      	bx	lr

0800e3dc <ucdr_buffer_remaining>:
 800e3dc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e3e0:	1a10      	subs	r0, r2, r0
 800e3e2:	4770      	bx	lr

0800e3e4 <ucdr_check_final_buffer_behavior_array>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	7d83      	ldrb	r3, [r0, #22]
 800e3e8:	b963      	cbnz	r3, 800e404 <ucdr_check_final_buffer_behavior_array+0x20>
 800e3ea:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	4604      	mov	r4, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	d308      	bcc.n	800e408 <ucdr_check_final_buffer_behavior_array+0x24>
 800e3f6:	b139      	cbz	r1, 800e408 <ucdr_check_final_buffer_behavior_array+0x24>
 800e3f8:	6983      	ldr	r3, [r0, #24]
 800e3fa:	b163      	cbz	r3, 800e416 <ucdr_check_final_buffer_behavior_array+0x32>
 800e3fc:	69c1      	ldr	r1, [r0, #28]
 800e3fe:	4798      	blx	r3
 800e400:	75a0      	strb	r0, [r4, #22]
 800e402:	b108      	cbz	r0, 800e408 <ucdr_check_final_buffer_behavior_array+0x24>
 800e404:	2000      	movs	r0, #0
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	4620      	mov	r0, r4
 800e40a:	f7ff ffe7 	bl	800e3dc <ucdr_buffer_remaining>
 800e40e:	42a8      	cmp	r0, r5
 800e410:	bf28      	it	cs
 800e412:	4628      	movcs	r0, r5
 800e414:	bd38      	pop	{r3, r4, r5, pc}
 800e416:	2301      	movs	r3, #1
 800e418:	7583      	strb	r3, [r0, #22]
 800e41a:	e7f3      	b.n	800e404 <ucdr_check_final_buffer_behavior_array+0x20>

0800e41c <ucdr_advance_buffer>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4604      	mov	r4, r0
 800e420:	460d      	mov	r5, r1
 800e422:	f7ff ff57 	bl	800e2d4 <ucdr_check_buffer_available_for>
 800e426:	b178      	cbz	r0, 800e448 <ucdr_advance_buffer+0x2c>
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	68a2      	ldr	r2, [r4, #8]
 800e42c:	442b      	add	r3, r5
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	2301      	movs	r3, #1
 800e432:	442a      	add	r2, r5
 800e434:	7563      	strb	r3, [r4, #21]
 800e436:	60a2      	str	r2, [r4, #8]
 800e438:	bd38      	pop	{r3, r4, r5, pc}
 800e43a:	68a2      	ldr	r2, [r4, #8]
 800e43c:	6923      	ldr	r3, [r4, #16]
 800e43e:	4402      	add	r2, r0
 800e440:	4403      	add	r3, r0
 800e442:	1a2d      	subs	r5, r5, r0
 800e444:	60a2      	str	r2, [r4, #8]
 800e446:	6123      	str	r3, [r4, #16]
 800e448:	4629      	mov	r1, r5
 800e44a:	2201      	movs	r2, #1
 800e44c:	4620      	mov	r0, r4
 800e44e:	f7ff ffc9 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 800e452:	2800      	cmp	r0, #0
 800e454:	d1f1      	bne.n	800e43a <ucdr_advance_buffer+0x1e>
 800e456:	2301      	movs	r3, #1
 800e458:	7563      	strb	r3, [r4, #21]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}

0800e45c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e45c:	4b04      	ldr	r3, [pc, #16]	@ (800e470 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	b10a      	cbz	r2, 800e466 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800e462:	4803      	ldr	r0, [pc, #12]	@ (800e470 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e464:	4770      	bx	lr
 800e466:	4a03      	ldr	r2, [pc, #12]	@ (800e474 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800e468:	4801      	ldr	r0, [pc, #4]	@ (800e470 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e46a:	6812      	ldr	r2, [r2, #0]
 800e46c:	601a      	str	r2, [r3, #0]
 800e46e:	4770      	bx	lr
 800e470:	200001c8 	.word	0x200001c8
 800e474:	2000030c 	.word	0x2000030c

0800e478 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e478:	4a02      	ldr	r2, [pc, #8]	@ (800e484 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800e47a:	4b03      	ldr	r3, [pc, #12]	@ (800e488 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop
 800e484:	2000030c 	.word	0x2000030c
 800e488:	200001c8 	.word	0x200001c8

0800e48c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800e48c:	f008 bc68 	b.w	8016d60 <nav_msgs__msg__Odometry__init>

0800e490 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800e490:	f008 bcbc 	b.w	8016e0c <nav_msgs__msg__Odometry__fini>

0800e494 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e494:	b510      	push	{r4, lr}
 800e496:	f004 f909 	bl	80126ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e49a:	4c0a      	ldr	r4, [pc, #40]	@ (800e4c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800e49c:	60e0      	str	r0, [r4, #12]
 800e49e:	f004 fabd 	bl	8012a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e4a2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e4a6:	f004 faed 	bl	8012a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e4aa:	4b07      	ldr	r3, [pc, #28]	@ (800e4c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e4ac:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e4b0:	681a      	ldr	r2, [r3, #0]
 800e4b2:	b10a      	cbz	r2, 800e4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800e4b4:	4804      	ldr	r0, [pc, #16]	@ (800e4c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e4b6:	bd10      	pop	{r4, pc}
 800e4b8:	4a04      	ldr	r2, [pc, #16]	@ (800e4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800e4ba:	4803      	ldr	r0, [pc, #12]	@ (800e4c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e4bc:	6812      	ldr	r2, [r2, #0]
 800e4be:	601a      	str	r2, [r3, #0]
 800e4c0:	bd10      	pop	{r4, pc}
 800e4c2:	bf00      	nop
 800e4c4:	200001d4 	.word	0x200001d4
 800e4c8:	200002c4 	.word	0x200002c4
 800e4cc:	20000310 	.word	0x20000310

0800e4d0 <get_serialized_size_nav_msgs__msg__Odometry>:
 800e4d0:	b5d0      	push	{r4, r6, r7, lr}
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	b1c0      	cbz	r0, 800e508 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800e4d6:	460f      	mov	r7, r1
 800e4d8:	f004 f91e 	bl	8012718 <get_serialized_size_std_msgs__msg__Header>
 800e4dc:	183e      	adds	r6, r7, r0
 800e4de:	2104      	movs	r1, #4
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff ff4f 	bl	800e384 <ucdr_alignment>
 800e4e6:	69a3      	ldr	r3, [r4, #24]
 800e4e8:	3305      	adds	r3, #5
 800e4ea:	4403      	add	r3, r0
 800e4ec:	441e      	add	r6, r3
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	f104 0020 	add.w	r0, r4, #32
 800e4f4:	f004 fadc 	bl	8012ab0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e4f8:	4406      	add	r6, r0
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e500:	f004 fb46 	bl	8012b90 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e504:	1bc0      	subs	r0, r0, r7
 800e506:	4430      	add	r0, r6
 800e508:	bdd0      	pop	{r4, r6, r7, pc}
 800e50a:	bf00      	nop

0800e50c <_Odometry__cdr_deserialize>:
 800e50c:	b570      	push	{r4, r5, r6, lr}
 800e50e:	460c      	mov	r4, r1
 800e510:	b082      	sub	sp, #8
 800e512:	b351      	cbz	r1, 800e56a <_Odometry__cdr_deserialize+0x5e>
 800e514:	4605      	mov	r5, r0
 800e516:	f004 f981 	bl	801281c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e51a:	6843      	ldr	r3, [r0, #4]
 800e51c:	4621      	mov	r1, r4
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	4628      	mov	r0, r5
 800e522:	4798      	blx	r3
 800e524:	69e6      	ldr	r6, [r4, #28]
 800e526:	6961      	ldr	r1, [r4, #20]
 800e528:	ab01      	add	r3, sp, #4
 800e52a:	4632      	mov	r2, r6
 800e52c:	4628      	mov	r0, r5
 800e52e:	f004 fd87 	bl	8013040 <ucdr_deserialize_sequence_char>
 800e532:	b9a8      	cbnz	r0, 800e560 <_Odometry__cdr_deserialize+0x54>
 800e534:	9a01      	ldr	r2, [sp, #4]
 800e536:	4296      	cmp	r6, r2
 800e538:	d31a      	bcc.n	800e570 <_Odometry__cdr_deserialize+0x64>
 800e53a:	f004 fb25 	bl	8012b88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e53e:	6843      	ldr	r3, [r0, #4]
 800e540:	f104 0120 	add.w	r1, r4, #32
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	4628      	mov	r0, r5
 800e548:	4798      	blx	r3
 800e54a:	f004 fb8d 	bl	8012c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e54e:	6843      	ldr	r3, [r0, #4]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800e556:	4628      	mov	r0, r5
 800e558:	b002      	add	sp, #8
 800e55a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e55e:	4718      	bx	r3
 800e560:	9b01      	ldr	r3, [sp, #4]
 800e562:	b103      	cbz	r3, 800e566 <_Odometry__cdr_deserialize+0x5a>
 800e564:	3b01      	subs	r3, #1
 800e566:	61a3      	str	r3, [r4, #24]
 800e568:	e7e7      	b.n	800e53a <_Odometry__cdr_deserialize+0x2e>
 800e56a:	4608      	mov	r0, r1
 800e56c:	b002      	add	sp, #8
 800e56e:	bd70      	pop	{r4, r5, r6, pc}
 800e570:	2101      	movs	r1, #1
 800e572:	75a8      	strb	r0, [r5, #22]
 800e574:	7569      	strb	r1, [r5, #21]
 800e576:	61a0      	str	r0, [r4, #24]
 800e578:	4628      	mov	r0, r5
 800e57a:	f7ff ff19 	bl	800e3b0 <ucdr_align_to>
 800e57e:	9901      	ldr	r1, [sp, #4]
 800e580:	4628      	mov	r0, r5
 800e582:	f7ff ff4b 	bl	800e41c <ucdr_advance_buffer>
 800e586:	e7d8      	b.n	800e53a <_Odometry__cdr_deserialize+0x2e>

0800e588 <_Odometry__cdr_serialize>:
 800e588:	b348      	cbz	r0, 800e5de <_Odometry__cdr_serialize+0x56>
 800e58a:	b570      	push	{r4, r5, r6, lr}
 800e58c:	4604      	mov	r4, r0
 800e58e:	460e      	mov	r6, r1
 800e590:	f004 f944 	bl	801281c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e594:	6843      	ldr	r3, [r0, #4]
 800e596:	4631      	mov	r1, r6
 800e598:	689b      	ldr	r3, [r3, #8]
 800e59a:	4620      	mov	r0, r4
 800e59c:	4798      	blx	r3
 800e59e:	6965      	ldr	r5, [r4, #20]
 800e5a0:	b1d5      	cbz	r5, 800e5d8 <_Odometry__cdr_serialize+0x50>
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f7f1 fe3e 	bl	8000224 <strlen>
 800e5a8:	1c42      	adds	r2, r0, #1
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	61a0      	str	r0, [r4, #24]
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f004 fd34 	bl	801301c <ucdr_serialize_sequence_char>
 800e5b4:	f004 fae8 	bl	8012b88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e5b8:	6843      	ldr	r3, [r0, #4]
 800e5ba:	4631      	mov	r1, r6
 800e5bc:	689b      	ldr	r3, [r3, #8]
 800e5be:	f104 0020 	add.w	r0, r4, #32
 800e5c2:	4798      	blx	r3
 800e5c4:	f004 fb50 	bl	8012c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e5c8:	6843      	ldr	r3, [r0, #4]
 800e5ca:	4631      	mov	r1, r6
 800e5cc:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e5d6:	4718      	bx	r3
 800e5d8:	462a      	mov	r2, r5
 800e5da:	4628      	mov	r0, r5
 800e5dc:	e7e5      	b.n	800e5aa <_Odometry__cdr_serialize+0x22>
 800e5de:	4770      	bx	lr

0800e5e0 <_Odometry__max_serialized_size>:
 800e5e0:	b510      	push	{r4, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	f10d 0007 	add.w	r0, sp, #7
 800e5ec:	f88d 3007 	strb.w	r3, [sp, #7]
 800e5f0:	f004 f90a 	bl	8012808 <max_serialized_size_std_msgs__msg__Header>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	4604      	mov	r4, r0
 800e5fa:	f10d 0007 	add.w	r0, sp, #7
 800e5fe:	f88d 3007 	strb.w	r3, [sp, #7]
 800e602:	f004 fab1 	bl	8012b68 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e606:	4404      	add	r4, r0
 800e608:	4621      	mov	r1, r4
 800e60a:	f10d 0007 	add.w	r0, sp, #7
 800e60e:	f004 fb1b 	bl	8012c48 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e612:	4420      	add	r0, r4
 800e614:	b002      	add	sp, #8
 800e616:	bd10      	pop	{r4, pc}

0800e618 <_Odometry__get_serialized_size>:
 800e618:	b5d0      	push	{r4, r6, r7, lr}
 800e61a:	4604      	mov	r4, r0
 800e61c:	b1b8      	cbz	r0, 800e64e <_Odometry__get_serialized_size+0x36>
 800e61e:	2100      	movs	r1, #0
 800e620:	f004 f87a 	bl	8012718 <get_serialized_size_std_msgs__msg__Header>
 800e624:	2104      	movs	r1, #4
 800e626:	4607      	mov	r7, r0
 800e628:	f7ff feac 	bl	800e384 <ucdr_alignment>
 800e62c:	69a3      	ldr	r3, [r4, #24]
 800e62e:	1d5a      	adds	r2, r3, #5
 800e630:	19d3      	adds	r3, r2, r7
 800e632:	4606      	mov	r6, r0
 800e634:	441e      	add	r6, r3
 800e636:	4631      	mov	r1, r6
 800e638:	f104 0020 	add.w	r0, r4, #32
 800e63c:	f004 fa38 	bl	8012ab0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e640:	4406      	add	r6, r0
 800e642:	4631      	mov	r1, r6
 800e644:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e648:	f004 faa2 	bl	8012b90 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e64c:	4430      	add	r0, r6
 800e64e:	bdd0      	pop	{r4, r6, r7, pc}

0800e650 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e650:	4800      	ldr	r0, [pc, #0]	@ (800e654 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800e652:	4770      	bx	lr
 800e654:	200002d0 	.word	0x200002d0

0800e658 <rcl_get_zero_initialized_context>:
 800e658:	4a03      	ldr	r2, [pc, #12]	@ (800e668 <rcl_get_zero_initialized_context+0x10>)
 800e65a:	4603      	mov	r3, r0
 800e65c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e660:	e883 0003 	stmia.w	r3, {r0, r1}
 800e664:	4618      	mov	r0, r3
 800e666:	4770      	bx	lr
 800e668:	0801e1f4 	.word	0x0801e1f4

0800e66c <rcl_context_is_valid>:
 800e66c:	b118      	cbz	r0, 800e676 <rcl_context_is_valid+0xa>
 800e66e:	6840      	ldr	r0, [r0, #4]
 800e670:	3800      	subs	r0, #0
 800e672:	bf18      	it	ne
 800e674:	2001      	movne	r0, #1
 800e676:	4770      	bx	lr

0800e678 <rcl_context_get_rmw_context>:
 800e678:	b110      	cbz	r0, 800e680 <rcl_context_get_rmw_context+0x8>
 800e67a:	6800      	ldr	r0, [r0, #0]
 800e67c:	b100      	cbz	r0, 800e680 <rcl_context_get_rmw_context+0x8>
 800e67e:	3028      	adds	r0, #40	@ 0x28
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop

0800e684 <__cleanup_context>:
 800e684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e688:	4606      	mov	r6, r0
 800e68a:	6800      	ldr	r0, [r0, #0]
 800e68c:	2300      	movs	r3, #0
 800e68e:	6073      	str	r3, [r6, #4]
 800e690:	2800      	cmp	r0, #0
 800e692:	d049      	beq.n	800e728 <__cleanup_context+0xa4>
 800e694:	6947      	ldr	r7, [r0, #20]
 800e696:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e69a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e69e:	b137      	cbz	r7, 800e6ae <__cleanup_context+0x2a>
 800e6a0:	3014      	adds	r0, #20
 800e6a2:	f000 f8cb 	bl	800e83c <rcl_init_options_fini>
 800e6a6:	4607      	mov	r7, r0
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d144      	bne.n	800e736 <__cleanup_context+0xb2>
 800e6ac:	6830      	ldr	r0, [r6, #0]
 800e6ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e6b0:	b143      	cbz	r3, 800e6c4 <__cleanup_context+0x40>
 800e6b2:	3028      	adds	r0, #40	@ 0x28
 800e6b4:	f002 ff3a 	bl	801152c <rmw_context_fini>
 800e6b8:	b118      	cbz	r0, 800e6c2 <__cleanup_context+0x3e>
 800e6ba:	2f00      	cmp	r7, #0
 800e6bc:	d03e      	beq.n	800e73c <__cleanup_context+0xb8>
 800e6be:	f002 f94b 	bl	8010958 <rcutils_reset_error>
 800e6c2:	6830      	ldr	r0, [r6, #0]
 800e6c4:	6a03      	ldr	r3, [r0, #32]
 800e6c6:	b1db      	cbz	r3, 800e700 <__cleanup_context+0x7c>
 800e6c8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e6cc:	2a01      	cmp	r2, #1
 800e6ce:	f17c 0100 	sbcs.w	r1, ip, #0
 800e6d2:	db11      	blt.n	800e6f8 <__cleanup_context+0x74>
 800e6d4:	2400      	movs	r4, #0
 800e6d6:	4625      	mov	r5, r4
 800e6d8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e6dc:	4649      	mov	r1, r9
 800e6de:	b1b8      	cbz	r0, 800e710 <__cleanup_context+0x8c>
 800e6e0:	47c0      	blx	r8
 800e6e2:	6833      	ldr	r3, [r6, #0]
 800e6e4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e6e8:	3401      	adds	r4, #1
 800e6ea:	f145 0500 	adc.w	r5, r5, #0
 800e6ee:	4294      	cmp	r4, r2
 800e6f0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	dbef      	blt.n	800e6d8 <__cleanup_context+0x54>
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	4649      	mov	r1, r9
 800e6fc:	47c0      	blx	r8
 800e6fe:	6830      	ldr	r0, [r6, #0]
 800e700:	4649      	mov	r1, r9
 800e702:	47c0      	blx	r8
 800e704:	2300      	movs	r3, #0
 800e706:	e9c6 3300 	strd	r3, r3, [r6]
 800e70a:	4638      	mov	r0, r7
 800e70c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e710:	3401      	adds	r4, #1
 800e712:	f145 0500 	adc.w	r5, r5, #0
 800e716:	4294      	cmp	r4, r2
 800e718:	eb75 010c 	sbcs.w	r1, r5, ip
 800e71c:	dbdc      	blt.n	800e6d8 <__cleanup_context+0x54>
 800e71e:	4618      	mov	r0, r3
 800e720:	4649      	mov	r1, r9
 800e722:	47c0      	blx	r8
 800e724:	6830      	ldr	r0, [r6, #0]
 800e726:	e7eb      	b.n	800e700 <__cleanup_context+0x7c>
 800e728:	4607      	mov	r7, r0
 800e72a:	2300      	movs	r3, #0
 800e72c:	e9c6 3300 	strd	r3, r3, [r6]
 800e730:	4638      	mov	r0, r7
 800e732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e736:	f002 f90f 	bl	8010958 <rcutils_reset_error>
 800e73a:	e7b7      	b.n	800e6ac <__cleanup_context+0x28>
 800e73c:	f008 fc0a 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800e740:	4607      	mov	r7, r0
 800e742:	e7bc      	b.n	800e6be <__cleanup_context+0x3a>

0800e744 <rcl_context_fini>:
 800e744:	b178      	cbz	r0, 800e766 <rcl_context_fini+0x22>
 800e746:	b510      	push	{r4, lr}
 800e748:	4604      	mov	r4, r0
 800e74a:	6800      	ldr	r0, [r0, #0]
 800e74c:	b150      	cbz	r0, 800e764 <rcl_context_fini+0x20>
 800e74e:	6863      	ldr	r3, [r4, #4]
 800e750:	b93b      	cbnz	r3, 800e762 <rcl_context_fini+0x1e>
 800e752:	f002 f821 	bl	8010798 <rcutils_allocator_is_valid>
 800e756:	b120      	cbz	r0, 800e762 <rcl_context_fini+0x1e>
 800e758:	4620      	mov	r0, r4
 800e75a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e75e:	f7ff bf91 	b.w	800e684 <__cleanup_context>
 800e762:	200b      	movs	r0, #11
 800e764:	bd10      	pop	{r4, pc}
 800e766:	200b      	movs	r0, #11
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop

0800e76c <rcl_get_zero_initialized_init_options>:
 800e76c:	2000      	movs	r0, #0
 800e76e:	4770      	bx	lr

0800e770 <rcl_init_options_init>:
 800e770:	b084      	sub	sp, #16
 800e772:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e774:	b097      	sub	sp, #92	@ 0x5c
 800e776:	ae1d      	add	r6, sp, #116	@ 0x74
 800e778:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e77c:	2800      	cmp	r0, #0
 800e77e:	d058      	beq.n	800e832 <rcl_init_options_init+0xc2>
 800e780:	6803      	ldr	r3, [r0, #0]
 800e782:	4605      	mov	r5, r0
 800e784:	b133      	cbz	r3, 800e794 <rcl_init_options_init+0x24>
 800e786:	2464      	movs	r4, #100	@ 0x64
 800e788:	4620      	mov	r0, r4
 800e78a:	b017      	add	sp, #92	@ 0x5c
 800e78c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e790:	b004      	add	sp, #16
 800e792:	4770      	bx	lr
 800e794:	4630      	mov	r0, r6
 800e796:	f001 ffff 	bl	8010798 <rcutils_allocator_is_valid>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	d049      	beq.n	800e832 <rcl_init_options_init+0xc2>
 800e79e:	46b4      	mov	ip, r6
 800e7a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e7a4:	ac11      	add	r4, sp, #68	@ 0x44
 800e7a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7a8:	f8dc 3000 	ldr.w	r3, [ip]
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e7b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e7b2:	2050      	movs	r0, #80	@ 0x50
 800e7b4:	4798      	blx	r3
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	6028      	str	r0, [r5, #0]
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d03b      	beq.n	800e836 <rcl_init_options_init+0xc6>
 800e7be:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e7c2:	4686      	mov	lr, r0
 800e7c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e7c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e7cc:	f8dc 3000 	ldr.w	r3, [ip]
 800e7d0:	f8ce 3000 	str.w	r3, [lr]
 800e7d4:	a802      	add	r0, sp, #8
 800e7d6:	f002 fa83 	bl	8010ce0 <rmw_get_zero_initialized_init_options>
 800e7da:	f10d 0e08 	add.w	lr, sp, #8
 800e7de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7e2:	f104 0c18 	add.w	ip, r4, #24
 800e7e6:	682f      	ldr	r7, [r5, #0]
 800e7e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e7f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e7fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e800:	ac20      	add	r4, sp, #128	@ 0x80
 800e802:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e80a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e80e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e812:	f107 0018 	add.w	r0, r7, #24
 800e816:	f002 fbcd 	bl	8010fb4 <rmw_init_options_init>
 800e81a:	4604      	mov	r4, r0
 800e81c:	2800      	cmp	r0, #0
 800e81e:	d0b3      	beq.n	800e788 <rcl_init_options_init+0x18>
 800e820:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e822:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e824:	6828      	ldr	r0, [r5, #0]
 800e826:	4798      	blx	r3
 800e828:	4620      	mov	r0, r4
 800e82a:	f008 fb93 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800e82e:	4604      	mov	r4, r0
 800e830:	e7aa      	b.n	800e788 <rcl_init_options_init+0x18>
 800e832:	240b      	movs	r4, #11
 800e834:	e7a8      	b.n	800e788 <rcl_init_options_init+0x18>
 800e836:	240a      	movs	r4, #10
 800e838:	e7a6      	b.n	800e788 <rcl_init_options_init+0x18>
 800e83a:	bf00      	nop

0800e83c <rcl_init_options_fini>:
 800e83c:	b530      	push	{r4, r5, lr}
 800e83e:	b087      	sub	sp, #28
 800e840:	b1f0      	cbz	r0, 800e880 <rcl_init_options_fini+0x44>
 800e842:	6803      	ldr	r3, [r0, #0]
 800e844:	4604      	mov	r4, r0
 800e846:	b1db      	cbz	r3, 800e880 <rcl_init_options_fini+0x44>
 800e848:	469c      	mov	ip, r3
 800e84a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e84e:	f10d 0e04 	add.w	lr, sp, #4
 800e852:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e856:	f8dc 3000 	ldr.w	r3, [ip]
 800e85a:	f8ce 3000 	str.w	r3, [lr]
 800e85e:	a801      	add	r0, sp, #4
 800e860:	f001 ff9a 	bl	8010798 <rcutils_allocator_is_valid>
 800e864:	b160      	cbz	r0, 800e880 <rcl_init_options_fini+0x44>
 800e866:	6820      	ldr	r0, [r4, #0]
 800e868:	3018      	adds	r0, #24
 800e86a:	f002 fc79 	bl	8011160 <rmw_init_options_fini>
 800e86e:	4605      	mov	r5, r0
 800e870:	b950      	cbnz	r0, 800e888 <rcl_init_options_fini+0x4c>
 800e872:	6820      	ldr	r0, [r4, #0]
 800e874:	9b02      	ldr	r3, [sp, #8]
 800e876:	9905      	ldr	r1, [sp, #20]
 800e878:	4798      	blx	r3
 800e87a:	4628      	mov	r0, r5
 800e87c:	b007      	add	sp, #28
 800e87e:	bd30      	pop	{r4, r5, pc}
 800e880:	250b      	movs	r5, #11
 800e882:	4628      	mov	r0, r5
 800e884:	b007      	add	sp, #28
 800e886:	bd30      	pop	{r4, r5, pc}
 800e888:	f008 fb64 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800e88c:	4605      	mov	r5, r0
 800e88e:	e7f8      	b.n	800e882 <rcl_init_options_fini+0x46>

0800e890 <rcl_init_options_copy>:
 800e890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e894:	b094      	sub	sp, #80	@ 0x50
 800e896:	2800      	cmp	r0, #0
 800e898:	d058      	beq.n	800e94c <rcl_init_options_copy+0xbc>
 800e89a:	4604      	mov	r4, r0
 800e89c:	6800      	ldr	r0, [r0, #0]
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d054      	beq.n	800e94c <rcl_init_options_copy+0xbc>
 800e8a2:	460e      	mov	r6, r1
 800e8a4:	f001 ff78 	bl	8010798 <rcutils_allocator_is_valid>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d04f      	beq.n	800e94c <rcl_init_options_copy+0xbc>
 800e8ac:	2e00      	cmp	r6, #0
 800e8ae:	d04d      	beq.n	800e94c <rcl_init_options_copy+0xbc>
 800e8b0:	6833      	ldr	r3, [r6, #0]
 800e8b2:	b123      	cbz	r3, 800e8be <rcl_init_options_copy+0x2e>
 800e8b4:	2464      	movs	r4, #100	@ 0x64
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	b014      	add	sp, #80	@ 0x50
 800e8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8be:	6827      	ldr	r7, [r4, #0]
 800e8c0:	46bc      	mov	ip, r7
 800e8c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8c6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e8c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e8ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e8ce:	f8d7 8000 	ldr.w	r8, [r7]
 800e8d2:	602b      	str	r3, [r5, #0]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	2050      	movs	r0, #80	@ 0x50
 800e8d8:	47c0      	blx	r8
 800e8da:	4605      	mov	r5, r0
 800e8dc:	6030      	str	r0, [r6, #0]
 800e8de:	b3d0      	cbz	r0, 800e956 <rcl_init_options_copy+0xc6>
 800e8e0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e8e4:	4686      	mov	lr, r0
 800e8e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8ee:	f8dc 3000 	ldr.w	r3, [ip]
 800e8f2:	f8ce 3000 	str.w	r3, [lr]
 800e8f6:	4668      	mov	r0, sp
 800e8f8:	f002 f9f2 	bl	8010ce0 <rmw_get_zero_initialized_init_options>
 800e8fc:	46ee      	mov	lr, sp
 800e8fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e902:	f105 0c18 	add.w	ip, r5, #24
 800e906:	6824      	ldr	r4, [r4, #0]
 800e908:	6835      	ldr	r5, [r6, #0]
 800e90a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e90e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e916:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e91a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e91e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e922:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e926:	f104 0018 	add.w	r0, r4, #24
 800e92a:	f105 0118 	add.w	r1, r5, #24
 800e92e:	f002 fba3 	bl	8011078 <rmw_init_options_copy>
 800e932:	4604      	mov	r4, r0
 800e934:	2800      	cmp	r0, #0
 800e936:	d0be      	beq.n	800e8b6 <rcl_init_options_copy+0x26>
 800e938:	f001 fff8 	bl	801092c <rcutils_get_error_string>
 800e93c:	f002 f80c 	bl	8010958 <rcutils_reset_error>
 800e940:	4630      	mov	r0, r6
 800e942:	f7ff ff7b 	bl	800e83c <rcl_init_options_fini>
 800e946:	b140      	cbz	r0, 800e95a <rcl_init_options_copy+0xca>
 800e948:	4604      	mov	r4, r0
 800e94a:	e7b4      	b.n	800e8b6 <rcl_init_options_copy+0x26>
 800e94c:	240b      	movs	r4, #11
 800e94e:	4620      	mov	r0, r4
 800e950:	b014      	add	sp, #80	@ 0x50
 800e952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e956:	240a      	movs	r4, #10
 800e958:	e7ad      	b.n	800e8b6 <rcl_init_options_copy+0x26>
 800e95a:	4620      	mov	r0, r4
 800e95c:	b014      	add	sp, #80	@ 0x50
 800e95e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e962:	f008 baf7 	b.w	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800e966:	bf00      	nop

0800e968 <rcl_init_options_set_domain_id>:
 800e968:	b120      	cbz	r0, 800e974 <rcl_init_options_set_domain_id+0xc>
 800e96a:	6803      	ldr	r3, [r0, #0]
 800e96c:	b113      	cbz	r3, 800e974 <rcl_init_options_set_domain_id+0xc>
 800e96e:	6259      	str	r1, [r3, #36]	@ 0x24
 800e970:	2000      	movs	r0, #0
 800e972:	4770      	bx	lr
 800e974:	200b      	movs	r0, #11
 800e976:	4770      	bx	lr

0800e978 <rcl_get_zero_initialized_node>:
 800e978:	4a03      	ldr	r2, [pc, #12]	@ (800e988 <rcl_get_zero_initialized_node+0x10>)
 800e97a:	4603      	mov	r3, r0
 800e97c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e980:	e883 0003 	stmia.w	r3, {r0, r1}
 800e984:	4618      	mov	r0, r3
 800e986:	4770      	bx	lr
 800e988:	0801e1fc 	.word	0x0801e1fc

0800e98c <rcl_node_init>:
 800e98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e990:	b0a9      	sub	sp, #164	@ 0xa4
 800e992:	4604      	mov	r4, r0
 800e994:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800e998:	a823      	add	r0, sp, #140	@ 0x8c
 800e99a:	460e      	mov	r6, r1
 800e99c:	4615      	mov	r5, r2
 800e99e:	461f      	mov	r7, r3
 800e9a0:	f008 fbc8 	bl	8017134 <rcl_guard_condition_get_default_options>
 800e9a4:	f1b8 0f00 	cmp.w	r8, #0
 800e9a8:	f000 80e6 	beq.w	800eb78 <rcl_node_init+0x1ec>
 800e9ac:	4640      	mov	r0, r8
 800e9ae:	f001 fef3 	bl	8010798 <rcutils_allocator_is_valid>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	f000 80e0 	beq.w	800eb78 <rcl_node_init+0x1ec>
 800e9b8:	2e00      	cmp	r6, #0
 800e9ba:	f000 80dd 	beq.w	800eb78 <rcl_node_init+0x1ec>
 800e9be:	2d00      	cmp	r5, #0
 800e9c0:	f000 80da 	beq.w	800eb78 <rcl_node_init+0x1ec>
 800e9c4:	2c00      	cmp	r4, #0
 800e9c6:	f000 80d7 	beq.w	800eb78 <rcl_node_init+0x1ec>
 800e9ca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9ce:	f1b9 0f00 	cmp.w	r9, #0
 800e9d2:	f040 80fd 	bne.w	800ebd0 <rcl_node_init+0x244>
 800e9d6:	2f00      	cmp	r7, #0
 800e9d8:	f000 80ce 	beq.w	800eb78 <rcl_node_init+0x1ec>
 800e9dc:	4638      	mov	r0, r7
 800e9de:	f7ff fe45 	bl	800e66c <rcl_context_is_valid>
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	f000 80cd 	beq.w	800eb84 <rcl_node_init+0x1f8>
 800e9ea:	464a      	mov	r2, r9
 800e9ec:	a922      	add	r1, sp, #136	@ 0x88
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800e9f4:	f002 fa20 	bl	8010e38 <rmw_validate_node_name>
 800e9f8:	4681      	mov	r9, r0
 800e9fa:	2800      	cmp	r0, #0
 800e9fc:	f040 80be 	bne.w	800eb7c <rcl_node_init+0x1f0>
 800ea00:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ea02:	2800      	cmp	r0, #0
 800ea04:	f040 80f0 	bne.w	800ebe8 <rcl_node_init+0x25c>
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f7f1 fc0b 	bl	8000224 <strlen>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	f040 80bb 	bne.w	800eb8a <rcl_node_init+0x1fe>
 800ea14:	4d7c      	ldr	r5, [pc, #496]	@ (800ec08 <rcl_node_init+0x27c>)
 800ea16:	a922      	add	r1, sp, #136	@ 0x88
 800ea18:	2200      	movs	r2, #0
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	f002 f9ee 	bl	8010dfc <rmw_validate_namespace>
 800ea20:	4681      	mov	r9, r0
 800ea22:	2800      	cmp	r0, #0
 800ea24:	f040 80aa 	bne.w	800eb7c <rcl_node_init+0x1f0>
 800ea28:	4682      	mov	sl, r0
 800ea2a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800ea2c:	2800      	cmp	r0, #0
 800ea2e:	f040 80e0 	bne.w	800ebf2 <rcl_node_init+0x266>
 800ea32:	f8d8 3000 	ldr.w	r3, [r8]
 800ea36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ea3a:	2078      	movs	r0, #120	@ 0x78
 800ea3c:	4798      	blx	r3
 800ea3e:	4681      	mov	r9, r0
 800ea40:	6060      	str	r0, [r4, #4]
 800ea42:	2800      	cmp	r0, #0
 800ea44:	f000 80ca 	beq.w	800ebdc <rcl_node_init+0x250>
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800ea50:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800ea54:	a808      	add	r0, sp, #32
 800ea56:	f000 f939 	bl	800eccc <rcl_node_get_default_options>
 800ea5a:	a908      	add	r1, sp, #32
 800ea5c:	4648      	mov	r0, r9
 800ea5e:	2268      	movs	r2, #104	@ 0x68
 800ea60:	f00e f835 	bl	801cace <memcpy>
 800ea64:	6861      	ldr	r1, [r4, #4]
 800ea66:	6027      	str	r7, [r4, #0]
 800ea68:	4640      	mov	r0, r8
 800ea6a:	f000 f93d 	bl	800ece8 <rcl_node_options_copy>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d158      	bne.n	800eb24 <rcl_node_init+0x198>
 800ea72:	4628      	mov	r0, r5
 800ea74:	f7f1 fbd6 	bl	8000224 <strlen>
 800ea78:	4428      	add	r0, r5
 800ea7a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ea7e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ea82:	2b2f      	cmp	r3, #47	@ 0x2f
 800ea84:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ea88:	9300      	str	r3, [sp, #0]
 800ea8a:	bf0c      	ite	eq
 800ea8c:	4b5f      	ldreq	r3, [pc, #380]	@ (800ec0c <rcl_node_init+0x280>)
 800ea8e:	4b60      	ldrne	r3, [pc, #384]	@ (800ec10 <rcl_node_init+0x284>)
 800ea90:	9302      	str	r3, [sp, #8]
 800ea92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ea96:	9301      	str	r3, [sp, #4]
 800ea98:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ea9c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eaa0:	f001 ff76 	bl	8010990 <rcutils_format_string_limit>
 800eaa4:	6823      	ldr	r3, [r4, #0]
 800eaa6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800eaaa:	6818      	ldr	r0, [r3, #0]
 800eaac:	4631      	mov	r1, r6
 800eaae:	3028      	adds	r0, #40	@ 0x28
 800eab0:	462a      	mov	r2, r5
 800eab2:	6866      	ldr	r6, [r4, #4]
 800eab4:	f002 fde6 	bl	8011684 <rmw_create_node>
 800eab8:	6863      	ldr	r3, [r4, #4]
 800eaba:	66b0      	str	r0, [r6, #104]	@ 0x68
 800eabc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d032      	beq.n	800eb28 <rcl_node_init+0x19c>
 800eac2:	f002 fe73 	bl	80117ac <rmw_node_get_graph_guard_condition>
 800eac6:	4681      	mov	r9, r0
 800eac8:	b360      	cbz	r0, 800eb24 <rcl_node_init+0x198>
 800eaca:	f8d8 3000 	ldr.w	r3, [r8]
 800eace:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ead2:	6866      	ldr	r6, [r4, #4]
 800ead4:	2008      	movs	r0, #8
 800ead6:	4798      	blx	r3
 800ead8:	6863      	ldr	r3, [r4, #4]
 800eada:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800eadc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800eae0:	f1bb 0f00 	cmp.w	fp, #0
 800eae4:	d020      	beq.n	800eb28 <rcl_node_init+0x19c>
 800eae6:	a806      	add	r0, sp, #24
 800eae8:	f008 fa48 	bl	8016f7c <rcl_get_zero_initialized_guard_condition>
 800eaec:	a806      	add	r0, sp, #24
 800eaee:	c803      	ldmia	r0, {r0, r1}
 800eaf0:	6863      	ldr	r3, [r4, #4]
 800eaf2:	46c4      	mov	ip, r8
 800eaf4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800eaf8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800eafc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb00:	ae23      	add	r6, sp, #140	@ 0x8c
 800eb02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eb04:	f8dc 3000 	ldr.w	r3, [ip]
 800eb08:	6033      	str	r3, [r6, #0]
 800eb0a:	ab28      	add	r3, sp, #160	@ 0xa0
 800eb0c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800eb10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800eb14:	4649      	mov	r1, r9
 800eb16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb18:	463a      	mov	r2, r7
 800eb1a:	4670      	mov	r0, lr
 800eb1c:	f008 fa84 	bl	8017028 <rcl_guard_condition_init_from_rmw>
 800eb20:	4681      	mov	r9, r0
 800eb22:	b328      	cbz	r0, 800eb70 <rcl_node_init+0x1e4>
 800eb24:	6863      	ldr	r3, [r4, #4]
 800eb26:	b1f3      	cbz	r3, 800eb66 <rcl_node_init+0x1da>
 800eb28:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800eb2a:	b128      	cbz	r0, 800eb38 <rcl_node_init+0x1ac>
 800eb2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb30:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eb34:	4798      	blx	r3
 800eb36:	6863      	ldr	r3, [r4, #4]
 800eb38:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800eb3a:	b110      	cbz	r0, 800eb42 <rcl_node_init+0x1b6>
 800eb3c:	f002 fdba 	bl	80116b4 <rmw_destroy_node>
 800eb40:	6863      	ldr	r3, [r4, #4]
 800eb42:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eb44:	b148      	cbz	r0, 800eb5a <rcl_node_init+0x1ce>
 800eb46:	f008 facf 	bl	80170e8 <rcl_guard_condition_fini>
 800eb4a:	6863      	ldr	r3, [r4, #4]
 800eb4c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eb50:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800eb52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb56:	4798      	blx	r3
 800eb58:	6863      	ldr	r3, [r4, #4]
 800eb5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb64:	4798      	blx	r3
 800eb66:	2300      	movs	r3, #0
 800eb68:	e9c4 3300 	strd	r3, r3, [r4]
 800eb6c:	f04f 0901 	mov.w	r9, #1
 800eb70:	f1ba 0f00 	cmp.w	sl, #0
 800eb74:	d125      	bne.n	800ebc2 <rcl_node_init+0x236>
 800eb76:	e001      	b.n	800eb7c <rcl_node_init+0x1f0>
 800eb78:	f04f 090b 	mov.w	r9, #11
 800eb7c:	4648      	mov	r0, r9
 800eb7e:	b029      	add	sp, #164	@ 0xa4
 800eb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb84:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800eb88:	e7f8      	b.n	800eb7c <rcl_node_init+0x1f0>
 800eb8a:	782b      	ldrb	r3, [r5, #0]
 800eb8c:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb8e:	f43f af42 	beq.w	800ea16 <rcl_node_init+0x8a>
 800eb92:	9503      	str	r5, [sp, #12]
 800eb94:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ec14 <rcl_node_init+0x288>)
 800eb9c:	9302      	str	r3, [sp, #8]
 800eb9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800eba8:	f001 fef2 	bl	8010990 <rcutils_format_string_limit>
 800ebac:	4605      	mov	r5, r0
 800ebae:	b340      	cbz	r0, 800ec02 <rcl_node_init+0x276>
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	a922      	add	r1, sp, #136	@ 0x88
 800ebb4:	9222      	str	r2, [sp, #136]	@ 0x88
 800ebb6:	f002 f921 	bl	8010dfc <rmw_validate_namespace>
 800ebba:	4681      	mov	r9, r0
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	f43f af34 	beq.w	800ea2a <rcl_node_init+0x9e>
 800ebc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ebc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ebca:	4628      	mov	r0, r5
 800ebcc:	4798      	blx	r3
 800ebce:	e7d5      	b.n	800eb7c <rcl_node_init+0x1f0>
 800ebd0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800ebd4:	4648      	mov	r0, r9
 800ebd6:	b029      	add	sp, #164	@ 0xa4
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebdc:	f04f 090a 	mov.w	r9, #10
 800ebe0:	f1ba 0f00 	cmp.w	sl, #0
 800ebe4:	d1ed      	bne.n	800ebc2 <rcl_node_init+0x236>
 800ebe6:	e7c9      	b.n	800eb7c <rcl_node_init+0x1f0>
 800ebe8:	f002 f978 	bl	8010edc <rmw_node_name_validation_result_string>
 800ebec:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800ebf0:	e7c4      	b.n	800eb7c <rcl_node_init+0x1f0>
 800ebf2:	f002 f915 	bl	8010e20 <rmw_namespace_validation_result_string>
 800ebf6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800ebfa:	f1ba 0f00 	cmp.w	sl, #0
 800ebfe:	d1e0      	bne.n	800ebc2 <rcl_node_init+0x236>
 800ec00:	e7bc      	b.n	800eb7c <rcl_node_init+0x1f0>
 800ec02:	f04f 090a 	mov.w	r9, #10
 800ec06:	e7b9      	b.n	800eb7c <rcl_node_init+0x1f0>
 800ec08:	0801dae4 	.word	0x0801dae4
 800ec0c:	0801daec 	.word	0x0801daec
 800ec10:	0801daf4 	.word	0x0801daf4
 800ec14:	0801dae8 	.word	0x0801dae8

0800ec18 <rcl_node_fini>:
 800ec18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1a:	b320      	cbz	r0, 800ec66 <rcl_node_fini+0x4e>
 800ec1c:	6845      	ldr	r5, [r0, #4]
 800ec1e:	4604      	mov	r4, r0
 800ec20:	b1fd      	cbz	r5, 800ec62 <rcl_node_fini+0x4a>
 800ec22:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800ec24:	686f      	ldr	r7, [r5, #4]
 800ec26:	692e      	ldr	r6, [r5, #16]
 800ec28:	f002 fd44 	bl	80116b4 <rmw_destroy_node>
 800ec2c:	6863      	ldr	r3, [r4, #4]
 800ec2e:	4605      	mov	r5, r0
 800ec30:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec32:	f008 fa59 	bl	80170e8 <rcl_guard_condition_fini>
 800ec36:	ea55 0300 	orrs.w	r3, r5, r0
 800ec3a:	6863      	ldr	r3, [r4, #4]
 800ec3c:	4631      	mov	r1, r6
 800ec3e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800ec40:	bf14      	ite	ne
 800ec42:	2501      	movne	r5, #1
 800ec44:	2500      	moveq	r5, #0
 800ec46:	47b8      	blx	r7
 800ec48:	6863      	ldr	r3, [r4, #4]
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ec4e:	47b8      	blx	r7
 800ec50:	6863      	ldr	r3, [r4, #4]
 800ec52:	4631      	mov	r1, r6
 800ec54:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ec56:	47b8      	blx	r7
 800ec58:	6860      	ldr	r0, [r4, #4]
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	47b8      	blx	r7
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6063      	str	r3, [r4, #4]
 800ec62:	4628      	mov	r0, r5
 800ec64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec66:	25c8      	movs	r5, #200	@ 0xc8
 800ec68:	4628      	mov	r0, r5
 800ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec6c <rcl_node_is_valid_except_context>:
 800ec6c:	b128      	cbz	r0, 800ec7a <rcl_node_is_valid_except_context+0xe>
 800ec6e:	6840      	ldr	r0, [r0, #4]
 800ec70:	b118      	cbz	r0, 800ec7a <rcl_node_is_valid_except_context+0xe>
 800ec72:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ec74:	3800      	subs	r0, #0
 800ec76:	bf18      	it	ne
 800ec78:	2001      	movne	r0, #1
 800ec7a:	4770      	bx	lr

0800ec7c <rcl_node_is_valid>:
 800ec7c:	b130      	cbz	r0, 800ec8c <rcl_node_is_valid+0x10>
 800ec7e:	6843      	ldr	r3, [r0, #4]
 800ec80:	b123      	cbz	r3, 800ec8c <rcl_node_is_valid+0x10>
 800ec82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ec84:	b113      	cbz	r3, 800ec8c <rcl_node_is_valid+0x10>
 800ec86:	6800      	ldr	r0, [r0, #0]
 800ec88:	f7ff bcf0 	b.w	800e66c <rcl_context_is_valid>
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	4770      	bx	lr

0800ec90 <rcl_node_get_name>:
 800ec90:	b120      	cbz	r0, 800ec9c <rcl_node_get_name+0xc>
 800ec92:	6840      	ldr	r0, [r0, #4]
 800ec94:	b110      	cbz	r0, 800ec9c <rcl_node_get_name+0xc>
 800ec96:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ec98:	b100      	cbz	r0, 800ec9c <rcl_node_get_name+0xc>
 800ec9a:	6880      	ldr	r0, [r0, #8]
 800ec9c:	4770      	bx	lr
 800ec9e:	bf00      	nop

0800eca0 <rcl_node_get_namespace>:
 800eca0:	b120      	cbz	r0, 800ecac <rcl_node_get_namespace+0xc>
 800eca2:	6840      	ldr	r0, [r0, #4]
 800eca4:	b110      	cbz	r0, 800ecac <rcl_node_get_namespace+0xc>
 800eca6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800eca8:	b100      	cbz	r0, 800ecac <rcl_node_get_namespace+0xc>
 800ecaa:	68c0      	ldr	r0, [r0, #12]
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop

0800ecb0 <rcl_node_get_options>:
 800ecb0:	b128      	cbz	r0, 800ecbe <rcl_node_get_options+0xe>
 800ecb2:	6840      	ldr	r0, [r0, #4]
 800ecb4:	b118      	cbz	r0, 800ecbe <rcl_node_get_options+0xe>
 800ecb6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	bf08      	it	eq
 800ecbc:	2000      	moveq	r0, #0
 800ecbe:	4770      	bx	lr

0800ecc0 <rcl_node_get_rmw_handle>:
 800ecc0:	b110      	cbz	r0, 800ecc8 <rcl_node_get_rmw_handle+0x8>
 800ecc2:	6840      	ldr	r0, [r0, #4]
 800ecc4:	b100      	cbz	r0, 800ecc8 <rcl_node_get_rmw_handle+0x8>
 800ecc6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ecc8:	4770      	bx	lr
 800ecca:	bf00      	nop

0800eccc <rcl_node_get_default_options>:
 800eccc:	b510      	push	{r4, lr}
 800ecce:	2268      	movs	r2, #104	@ 0x68
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	2100      	movs	r1, #0
 800ecd4:	f00d fe32 	bl	801c93c <memset>
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f001 fd4f 	bl	801077c <rcutils_get_default_allocator>
 800ecde:	2301      	movs	r3, #1
 800ece0:	7523      	strb	r3, [r4, #20]
 800ece2:	4620      	mov	r0, r4
 800ece4:	bd10      	pop	{r4, pc}
 800ece6:	bf00      	nop

0800ece8 <rcl_node_options_copy>:
 800ece8:	b1d0      	cbz	r0, 800ed20 <rcl_node_options_copy+0x38>
 800ecea:	b570      	push	{r4, r5, r6, lr}
 800ecec:	460c      	mov	r4, r1
 800ecee:	b1a9      	cbz	r1, 800ed1c <rcl_node_options_copy+0x34>
 800ecf0:	4288      	cmp	r0, r1
 800ecf2:	4684      	mov	ip, r0
 800ecf4:	d012      	beq.n	800ed1c <rcl_node_options_copy+0x34>
 800ecf6:	4605      	mov	r5, r0
 800ecf8:	8a86      	ldrh	r6, [r0, #20]
 800ecfa:	468e      	mov	lr, r1
 800ecfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ecfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed02:	682b      	ldr	r3, [r5, #0]
 800ed04:	f8ce 3000 	str.w	r3, [lr]
 800ed08:	f10c 0118 	add.w	r1, ip, #24
 800ed0c:	2250      	movs	r2, #80	@ 0x50
 800ed0e:	82a6      	strh	r6, [r4, #20]
 800ed10:	f104 0018 	add.w	r0, r4, #24
 800ed14:	f00d fedb 	bl	801cace <memcpy>
 800ed18:	2000      	movs	r0, #0
 800ed1a:	bd70      	pop	{r4, r5, r6, pc}
 800ed1c:	200b      	movs	r0, #11
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	200b      	movs	r0, #11
 800ed22:	4770      	bx	lr

0800ed24 <rcl_get_zero_initialized_publisher>:
 800ed24:	4b01      	ldr	r3, [pc, #4]	@ (800ed2c <rcl_get_zero_initialized_publisher+0x8>)
 800ed26:	6818      	ldr	r0, [r3, #0]
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	0801e204 	.word	0x0801e204

0800ed30 <rcl_publisher_init>:
 800ed30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed34:	b088      	sub	sp, #32
 800ed36:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	d069      	beq.n	800ee10 <rcl_publisher_init+0xe0>
 800ed3c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800ed40:	4604      	mov	r4, r0
 800ed42:	4648      	mov	r0, r9
 800ed44:	460e      	mov	r6, r1
 800ed46:	4690      	mov	r8, r2
 800ed48:	461f      	mov	r7, r3
 800ed4a:	f001 fd25 	bl	8010798 <rcutils_allocator_is_valid>
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d05e      	beq.n	800ee10 <rcl_publisher_init+0xe0>
 800ed52:	2c00      	cmp	r4, #0
 800ed54:	d05c      	beq.n	800ee10 <rcl_publisher_init+0xe0>
 800ed56:	f8d4 a000 	ldr.w	sl, [r4]
 800ed5a:	f1ba 0f00 	cmp.w	sl, #0
 800ed5e:	d004      	beq.n	800ed6a <rcl_publisher_init+0x3a>
 800ed60:	2764      	movs	r7, #100	@ 0x64
 800ed62:	4638      	mov	r0, r7
 800ed64:	b008      	add	sp, #32
 800ed66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed6a:	4630      	mov	r0, r6
 800ed6c:	f7ff ff86 	bl	800ec7c <rcl_node_is_valid>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d052      	beq.n	800ee1a <rcl_publisher_init+0xea>
 800ed74:	f1b8 0f00 	cmp.w	r8, #0
 800ed78:	d04a      	beq.n	800ee10 <rcl_publisher_init+0xe0>
 800ed7a:	2f00      	cmp	r7, #0
 800ed7c:	d048      	beq.n	800ee10 <rcl_publisher_init+0xe0>
 800ed7e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ed82:	aa07      	add	r2, sp, #28
 800ed84:	9205      	str	r2, [sp, #20]
 800ed86:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ed8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ed92:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed96:	4639      	mov	r1, r7
 800ed98:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ed9c:	4630      	mov	r0, r6
 800ed9e:	f008 fb29 	bl	80173f4 <rcl_node_resolve_name>
 800eda2:	4607      	mov	r7, r0
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d14f      	bne.n	800ee48 <rcl_publisher_init+0x118>
 800eda8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800edaa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800edac:	20c8      	movs	r0, #200	@ 0xc8
 800edae:	4798      	blx	r3
 800edb0:	6020      	str	r0, [r4, #0]
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d04e      	beq.n	800ee54 <rcl_publisher_init+0x124>
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7ff ff82 	bl	800ecc0 <rcl_node_get_rmw_handle>
 800edbc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800edc0:	9300      	str	r3, [sp, #0]
 800edc2:	9a07      	ldr	r2, [sp, #28]
 800edc4:	6827      	ldr	r7, [r4, #0]
 800edc6:	462b      	mov	r3, r5
 800edc8:	4641      	mov	r1, r8
 800edca:	f002 fd59 	bl	8011880 <rmw_create_publisher>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800edd4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800edd8:	b370      	cbz	r0, 800ee38 <rcl_publisher_init+0x108>
 800edda:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800edde:	f002 fe2d 	bl	8011a3c <rmw_publisher_get_actual_qos>
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	4607      	mov	r7, r0
 800ede6:	b9d0      	cbnz	r0, 800ee1e <rcl_publisher_init+0xee>
 800ede8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800edec:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800edf0:	4629      	mov	r1, r5
 800edf2:	2270      	movs	r2, #112	@ 0x70
 800edf4:	4618      	mov	r0, r3
 800edf6:	f00d fe6a 	bl	801cace <memcpy>
 800edfa:	6832      	ldr	r2, [r6, #0]
 800edfc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ee00:	9807      	ldr	r0, [sp, #28]
 800ee02:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ee04:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ee06:	4798      	blx	r3
 800ee08:	4638      	mov	r0, r7
 800ee0a:	b008      	add	sp, #32
 800ee0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee10:	270b      	movs	r7, #11
 800ee12:	4638      	mov	r0, r7
 800ee14:	b008      	add	sp, #32
 800ee16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee1a:	27c8      	movs	r7, #200	@ 0xc8
 800ee1c:	e7a1      	b.n	800ed62 <rcl_publisher_init+0x32>
 800ee1e:	b18b      	cbz	r3, 800ee44 <rcl_publisher_init+0x114>
 800ee20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ee24:	b142      	cbz	r2, 800ee38 <rcl_publisher_init+0x108>
 800ee26:	4630      	mov	r0, r6
 800ee28:	f7ff ff4a 	bl	800ecc0 <rcl_node_get_rmw_handle>
 800ee2c:	6823      	ldr	r3, [r4, #0]
 800ee2e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ee32:	f002 fe13 	bl	8011a5c <rmw_destroy_publisher>
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ee3a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	4790      	blx	r2
 800ee40:	2300      	movs	r3, #0
 800ee42:	6023      	str	r3, [r4, #0]
 800ee44:	2701      	movs	r7, #1
 800ee46:	e7db      	b.n	800ee00 <rcl_publisher_init+0xd0>
 800ee48:	2867      	cmp	r0, #103	@ 0x67
 800ee4a:	d0d9      	beq.n	800ee00 <rcl_publisher_init+0xd0>
 800ee4c:	2869      	cmp	r0, #105	@ 0x69
 800ee4e:	d003      	beq.n	800ee58 <rcl_publisher_init+0x128>
 800ee50:	280a      	cmp	r0, #10
 800ee52:	d1f7      	bne.n	800ee44 <rcl_publisher_init+0x114>
 800ee54:	270a      	movs	r7, #10
 800ee56:	e7d3      	b.n	800ee00 <rcl_publisher_init+0xd0>
 800ee58:	2767      	movs	r7, #103	@ 0x67
 800ee5a:	e7d1      	b.n	800ee00 <rcl_publisher_init+0xd0>

0800ee5c <rcl_publisher_fini>:
 800ee5c:	b570      	push	{r4, r5, r6, lr}
 800ee5e:	b300      	cbz	r0, 800eea2 <rcl_publisher_fini+0x46>
 800ee60:	4604      	mov	r4, r0
 800ee62:	4608      	mov	r0, r1
 800ee64:	460d      	mov	r5, r1
 800ee66:	f7ff ff01 	bl	800ec6c <rcl_node_is_valid_except_context>
 800ee6a:	b1f0      	cbz	r0, 800eeaa <rcl_publisher_fini+0x4e>
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	b1ab      	cbz	r3, 800ee9c <rcl_publisher_fini+0x40>
 800ee70:	4628      	mov	r0, r5
 800ee72:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800ee74:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800ee76:	f7ff ff23 	bl	800ecc0 <rcl_node_get_rmw_handle>
 800ee7a:	b1c8      	cbz	r0, 800eeb0 <rcl_publisher_fini+0x54>
 800ee7c:	6823      	ldr	r3, [r4, #0]
 800ee7e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ee82:	f002 fdeb 	bl	8011a5c <rmw_destroy_publisher>
 800ee86:	4603      	mov	r3, r0
 800ee88:	4629      	mov	r1, r5
 800ee8a:	6820      	ldr	r0, [r4, #0]
 800ee8c:	1e1d      	subs	r5, r3, #0
 800ee8e:	bf18      	it	ne
 800ee90:	2501      	movne	r5, #1
 800ee92:	47b0      	blx	r6
 800ee94:	2300      	movs	r3, #0
 800ee96:	6023      	str	r3, [r4, #0]
 800ee98:	4628      	mov	r0, r5
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}
 800ee9c:	461d      	mov	r5, r3
 800ee9e:	4628      	mov	r0, r5
 800eea0:	bd70      	pop	{r4, r5, r6, pc}
 800eea2:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800eea6:	4628      	mov	r0, r5
 800eea8:	bd70      	pop	{r4, r5, r6, pc}
 800eeaa:	25c8      	movs	r5, #200	@ 0xc8
 800eeac:	4628      	mov	r0, r5
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	250b      	movs	r5, #11
 800eeb2:	e7f1      	b.n	800ee98 <rcl_publisher_fini+0x3c>

0800eeb4 <rcl_publisher_get_default_options>:
 800eeb4:	b570      	push	{r4, r5, r6, lr}
 800eeb6:	4d14      	ldr	r5, [pc, #80]	@ (800ef08 <rcl_publisher_get_default_options+0x54>)
 800eeb8:	4914      	ldr	r1, [pc, #80]	@ (800ef0c <rcl_publisher_get_default_options+0x58>)
 800eeba:	b088      	sub	sp, #32
 800eebc:	4604      	mov	r4, r0
 800eebe:	2250      	movs	r2, #80	@ 0x50
 800eec0:	4628      	mov	r0, r5
 800eec2:	f00d fe04 	bl	801cace <memcpy>
 800eec6:	a802      	add	r0, sp, #8
 800eec8:	f001 fc58 	bl	801077c <rcutils_get_default_allocator>
 800eecc:	f10d 0c08 	add.w	ip, sp, #8
 800eed0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eed4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800eed8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eedc:	466e      	mov	r6, sp
 800eede:	f8dc 3000 	ldr.w	r3, [ip]
 800eee2:	f8ce 3000 	str.w	r3, [lr]
 800eee6:	4630      	mov	r0, r6
 800eee8:	f001 ff0a 	bl	8010d00 <rmw_get_default_publisher_options>
 800eeec:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eef0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800eef4:	e883 0003 	stmia.w	r3, {r0, r1}
 800eef8:	2270      	movs	r2, #112	@ 0x70
 800eefa:	4629      	mov	r1, r5
 800eefc:	4620      	mov	r0, r4
 800eefe:	f00d fde6 	bl	801cace <memcpy>
 800ef02:	4620      	mov	r0, r4
 800ef04:	b008      	add	sp, #32
 800ef06:	bd70      	pop	{r4, r5, r6, pc}
 800ef08:	2000d078 	.word	0x2000d078
 800ef0c:	0801e208 	.word	0x0801e208

0800ef10 <rcl_publish>:
 800ef10:	b1f8      	cbz	r0, 800ef52 <rcl_publish+0x42>
 800ef12:	6803      	ldr	r3, [r0, #0]
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	4604      	mov	r4, r0
 800ef18:	b1b3      	cbz	r3, 800ef48 <rcl_publish+0x38>
 800ef1a:	4616      	mov	r6, r2
 800ef1c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ef20:	b192      	cbz	r2, 800ef48 <rcl_publish+0x38>
 800ef22:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ef26:	460d      	mov	r5, r1
 800ef28:	f7ff fba0 	bl	800e66c <rcl_context_is_valid>
 800ef2c:	b160      	cbz	r0, 800ef48 <rcl_publish+0x38>
 800ef2e:	6823      	ldr	r3, [r4, #0]
 800ef30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ef34:	b140      	cbz	r0, 800ef48 <rcl_publish+0x38>
 800ef36:	b155      	cbz	r5, 800ef4e <rcl_publish+0x3e>
 800ef38:	4632      	mov	r2, r6
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	f002 fc40 	bl	80117c0 <rmw_publish>
 800ef40:	3800      	subs	r0, #0
 800ef42:	bf18      	it	ne
 800ef44:	2001      	movne	r0, #1
 800ef46:	bd70      	pop	{r4, r5, r6, pc}
 800ef48:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef4c:	bd70      	pop	{r4, r5, r6, pc}
 800ef4e:	200b      	movs	r0, #11
 800ef50:	bd70      	pop	{r4, r5, r6, pc}
 800ef52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ef56:	4770      	bx	lr

0800ef58 <rcl_publisher_get_rmw_handle>:
 800ef58:	b118      	cbz	r0, 800ef62 <rcl_publisher_get_rmw_handle+0xa>
 800ef5a:	6800      	ldr	r0, [r0, #0]
 800ef5c:	b108      	cbz	r0, 800ef62 <rcl_publisher_get_rmw_handle+0xa>
 800ef5e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ef62:	4770      	bx	lr

0800ef64 <rcl_publisher_is_valid>:
 800ef64:	b1a0      	cbz	r0, 800ef90 <rcl_publisher_is_valid+0x2c>
 800ef66:	6803      	ldr	r3, [r0, #0]
 800ef68:	b510      	push	{r4, lr}
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	b173      	cbz	r3, 800ef8c <rcl_publisher_is_valid+0x28>
 800ef6e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ef72:	b15a      	cbz	r2, 800ef8c <rcl_publisher_is_valid+0x28>
 800ef74:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ef78:	f7ff fb78 	bl	800e66c <rcl_context_is_valid>
 800ef7c:	b130      	cbz	r0, 800ef8c <rcl_publisher_is_valid+0x28>
 800ef7e:	6823      	ldr	r3, [r4, #0]
 800ef80:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ef84:	3800      	subs	r0, #0
 800ef86:	bf18      	it	ne
 800ef88:	2001      	movne	r0, #1
 800ef8a:	bd10      	pop	{r4, pc}
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	bd10      	pop	{r4, pc}
 800ef90:	2000      	movs	r0, #0
 800ef92:	4770      	bx	lr

0800ef94 <rcl_publisher_is_valid_except_context>:
 800ef94:	b130      	cbz	r0, 800efa4 <rcl_publisher_is_valid_except_context+0x10>
 800ef96:	6800      	ldr	r0, [r0, #0]
 800ef98:	b120      	cbz	r0, 800efa4 <rcl_publisher_is_valid_except_context+0x10>
 800ef9a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ef9e:	3800      	subs	r0, #0
 800efa0:	bf18      	it	ne
 800efa2:	2001      	movne	r0, #1
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop

0800efa8 <rcl_get_zero_initialized_subscription>:
 800efa8:	4b01      	ldr	r3, [pc, #4]	@ (800efb0 <rcl_get_zero_initialized_subscription+0x8>)
 800efaa:	6818      	ldr	r0, [r3, #0]
 800efac:	4770      	bx	lr
 800efae:	bf00      	nop
 800efb0:	0801e258 	.word	0x0801e258

0800efb4 <rcl_subscription_init>:
 800efb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efb8:	b089      	sub	sp, #36	@ 0x24
 800efba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800efbc:	b1d6      	cbz	r6, 800eff4 <rcl_subscription_init+0x40>
 800efbe:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800efc2:	4604      	mov	r4, r0
 800efc4:	4648      	mov	r0, r9
 800efc6:	460d      	mov	r5, r1
 800efc8:	4690      	mov	r8, r2
 800efca:	461f      	mov	r7, r3
 800efcc:	f001 fbe4 	bl	8010798 <rcutils_allocator_is_valid>
 800efd0:	b180      	cbz	r0, 800eff4 <rcl_subscription_init+0x40>
 800efd2:	b17c      	cbz	r4, 800eff4 <rcl_subscription_init+0x40>
 800efd4:	4628      	mov	r0, r5
 800efd6:	f7ff fe51 	bl	800ec7c <rcl_node_is_valid>
 800efda:	2800      	cmp	r0, #0
 800efdc:	d054      	beq.n	800f088 <rcl_subscription_init+0xd4>
 800efde:	f1b8 0f00 	cmp.w	r8, #0
 800efe2:	d007      	beq.n	800eff4 <rcl_subscription_init+0x40>
 800efe4:	b137      	cbz	r7, 800eff4 <rcl_subscription_init+0x40>
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	b14b      	cbz	r3, 800effe <rcl_subscription_init+0x4a>
 800efea:	2764      	movs	r7, #100	@ 0x64
 800efec:	4638      	mov	r0, r7
 800efee:	b009      	add	sp, #36	@ 0x24
 800eff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eff4:	270b      	movs	r7, #11
 800eff6:	4638      	mov	r0, r7
 800eff8:	b009      	add	sp, #36	@ 0x24
 800effa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800effe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f002:	aa07      	add	r2, sp, #28
 800f004:	9205      	str	r2, [sp, #20]
 800f006:	9307      	str	r3, [sp, #28]
 800f008:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800f00c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f010:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f014:	4639      	mov	r1, r7
 800f016:	e899 000c 	ldmia.w	r9, {r2, r3}
 800f01a:	4628      	mov	r0, r5
 800f01c:	f008 f9ea 	bl	80173f4 <rcl_node_resolve_name>
 800f020:	4607      	mov	r7, r0
 800f022:	2800      	cmp	r0, #0
 800f024:	d15f      	bne.n	800f0e6 <rcl_subscription_init+0x132>
 800f026:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800f02a:	21c8      	movs	r1, #200	@ 0xc8
 800f02c:	2001      	movs	r0, #1
 800f02e:	4798      	blx	r3
 800f030:	6020      	str	r0, [r4, #0]
 800f032:	2800      	cmp	r0, #0
 800f034:	d05d      	beq.n	800f0f2 <rcl_subscription_init+0x13e>
 800f036:	4628      	mov	r0, r5
 800f038:	f7ff fe42 	bl	800ecc0 <rcl_node_get_rmw_handle>
 800f03c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	9a07      	ldr	r2, [sp, #28]
 800f044:	6827      	ldr	r7, [r4, #0]
 800f046:	4641      	mov	r1, r8
 800f048:	4633      	mov	r3, r6
 800f04a:	f002 fd9d 	bl	8011b88 <rmw_create_subscription>
 800f04e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800f052:	6827      	ldr	r7, [r4, #0]
 800f054:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800f058:	b348      	cbz	r0, 800f0ae <rcl_subscription_init+0xfa>
 800f05a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800f05e:	f002 fe75 	bl	8011d4c <rmw_subscription_get_actual_qos>
 800f062:	4607      	mov	r7, r0
 800f064:	b9a8      	cbnz	r0, 800f092 <rcl_subscription_init+0xde>
 800f066:	6820      	ldr	r0, [r4, #0]
 800f068:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f06c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800f070:	2270      	movs	r2, #112	@ 0x70
 800f072:	4631      	mov	r1, r6
 800f074:	f00d fd2b 	bl	801cace <memcpy>
 800f078:	9807      	ldr	r0, [sp, #28]
 800f07a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f07c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f07e:	4798      	blx	r3
 800f080:	4638      	mov	r0, r7
 800f082:	b009      	add	sp, #36	@ 0x24
 800f084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f088:	27c8      	movs	r7, #200	@ 0xc8
 800f08a:	4638      	mov	r0, r7
 800f08c:	b009      	add	sp, #36	@ 0x24
 800f08e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f092:	6827      	ldr	r7, [r4, #0]
 800f094:	b32f      	cbz	r7, 800f0e2 <rcl_subscription_init+0x12e>
 800f096:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f09a:	b14b      	cbz	r3, 800f0b0 <rcl_subscription_init+0xfc>
 800f09c:	4628      	mov	r0, r5
 800f09e:	f7ff fe0f 	bl	800ecc0 <rcl_node_get_rmw_handle>
 800f0a2:	6823      	ldr	r3, [r4, #0]
 800f0a4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800f0a8:	f002 fe60 	bl	8011d6c <rmw_destroy_subscription>
 800f0ac:	6827      	ldr	r7, [r4, #0]
 800f0ae:	b197      	cbz	r7, 800f0d6 <rcl_subscription_init+0x122>
 800f0b0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	f001 fb6f 	bl	8010798 <rcutils_allocator_is_valid>
 800f0ba:	b158      	cbz	r0, 800f0d4 <rcl_subscription_init+0x120>
 800f0bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f0be:	b148      	cbz	r0, 800f0d4 <rcl_subscription_init+0x120>
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f001 fe25 	bl	8010d10 <rmw_subscription_content_filter_options_fini>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	b9b8      	cbnz	r0, 800f0fa <rcl_subscription_init+0x146>
 800f0ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f0ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f0d0:	4798      	blx	r3
 800f0d2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800f0d4:	6827      	ldr	r7, [r4, #0]
 800f0d6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f0d8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f0da:	4638      	mov	r0, r7
 800f0dc:	4798      	blx	r3
 800f0de:	2300      	movs	r3, #0
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	2701      	movs	r7, #1
 800f0e4:	e7c8      	b.n	800f078 <rcl_subscription_init+0xc4>
 800f0e6:	2867      	cmp	r0, #103	@ 0x67
 800f0e8:	d0c6      	beq.n	800f078 <rcl_subscription_init+0xc4>
 800f0ea:	2869      	cmp	r0, #105	@ 0x69
 800f0ec:	d003      	beq.n	800f0f6 <rcl_subscription_init+0x142>
 800f0ee:	280a      	cmp	r0, #10
 800f0f0:	d1f7      	bne.n	800f0e2 <rcl_subscription_init+0x12e>
 800f0f2:	270a      	movs	r7, #10
 800f0f4:	e7c0      	b.n	800f078 <rcl_subscription_init+0xc4>
 800f0f6:	2767      	movs	r7, #103	@ 0x67
 800f0f8:	e7be      	b.n	800f078 <rcl_subscription_init+0xc4>
 800f0fa:	f007 ff2b 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800f0fe:	6827      	ldr	r7, [r4, #0]
 800f100:	e7e9      	b.n	800f0d6 <rcl_subscription_init+0x122>
 800f102:	bf00      	nop

0800f104 <rcl_subscription_fini>:
 800f104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f108:	2800      	cmp	r0, #0
 800f10a:	d039      	beq.n	800f180 <rcl_subscription_fini+0x7c>
 800f10c:	4604      	mov	r4, r0
 800f10e:	4608      	mov	r0, r1
 800f110:	460d      	mov	r5, r1
 800f112:	f7ff fdab 	bl	800ec6c <rcl_node_is_valid_except_context>
 800f116:	2800      	cmp	r0, #0
 800f118:	d037      	beq.n	800f18a <rcl_subscription_fini+0x86>
 800f11a:	6823      	ldr	r3, [r4, #0]
 800f11c:	b363      	cbz	r3, 800f178 <rcl_subscription_fini+0x74>
 800f11e:	4628      	mov	r0, r5
 800f120:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800f122:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800f126:	f7ff fdcb 	bl	800ecc0 <rcl_node_get_rmw_handle>
 800f12a:	b390      	cbz	r0, 800f192 <rcl_subscription_fini+0x8e>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800f132:	f002 fe1b 	bl	8011d6c <rmw_destroy_subscription>
 800f136:	6826      	ldr	r6, [r4, #0]
 800f138:	1e05      	subs	r5, r0, #0
 800f13a:	bf18      	it	ne
 800f13c:	2501      	movne	r5, #1
 800f13e:	b37e      	cbz	r6, 800f1a0 <rcl_subscription_fini+0x9c>
 800f140:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800f144:	4648      	mov	r0, r9
 800f146:	f001 fb27 	bl	8010798 <rcutils_allocator_is_valid>
 800f14a:	b358      	cbz	r0, 800f1a4 <rcl_subscription_fini+0xa0>
 800f14c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f14e:	b150      	cbz	r0, 800f166 <rcl_subscription_fini+0x62>
 800f150:	4649      	mov	r1, r9
 800f152:	f001 fddd 	bl	8010d10 <rmw_subscription_content_filter_options_fini>
 800f156:	4681      	mov	r9, r0
 800f158:	b9e8      	cbnz	r0, 800f196 <rcl_subscription_fini+0x92>
 800f15a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800f15c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800f15e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800f160:	4798      	blx	r3
 800f162:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800f166:	6826      	ldr	r6, [r4, #0]
 800f168:	4630      	mov	r0, r6
 800f16a:	4641      	mov	r1, r8
 800f16c:	47b8      	blx	r7
 800f16e:	2300      	movs	r3, #0
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	4628      	mov	r0, r5
 800f174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f178:	461d      	mov	r5, r3
 800f17a:	4628      	mov	r0, r5
 800f17c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f180:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800f184:	4628      	mov	r0, r5
 800f186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f18a:	25c8      	movs	r5, #200	@ 0xc8
 800f18c:	4628      	mov	r0, r5
 800f18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f192:	250b      	movs	r5, #11
 800f194:	e7f1      	b.n	800f17a <rcl_subscription_fini+0x76>
 800f196:	f007 fedd 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800f19a:	6826      	ldr	r6, [r4, #0]
 800f19c:	2800      	cmp	r0, #0
 800f19e:	d0e3      	beq.n	800f168 <rcl_subscription_fini+0x64>
 800f1a0:	2501      	movs	r5, #1
 800f1a2:	e7e1      	b.n	800f168 <rcl_subscription_fini+0x64>
 800f1a4:	6826      	ldr	r6, [r4, #0]
 800f1a6:	2501      	movs	r5, #1
 800f1a8:	e7de      	b.n	800f168 <rcl_subscription_fini+0x64>
 800f1aa:	bf00      	nop

0800f1ac <rcl_subscription_get_default_options>:
 800f1ac:	b570      	push	{r4, r5, r6, lr}
 800f1ae:	4d14      	ldr	r5, [pc, #80]	@ (800f200 <rcl_subscription_get_default_options+0x54>)
 800f1b0:	4914      	ldr	r1, [pc, #80]	@ (800f204 <rcl_subscription_get_default_options+0x58>)
 800f1b2:	b08a      	sub	sp, #40	@ 0x28
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	2250      	movs	r2, #80	@ 0x50
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f00d fc88 	bl	801cace <memcpy>
 800f1be:	a804      	add	r0, sp, #16
 800f1c0:	f001 fadc 	bl	801077c <rcutils_get_default_allocator>
 800f1c4:	f10d 0c10 	add.w	ip, sp, #16
 800f1c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1cc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800f1d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f1d4:	466e      	mov	r6, sp
 800f1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800f1da:	f8ce 3000 	str.w	r3, [lr]
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f001 fdb0 	bl	8010d44 <rmw_get_default_subscription_options>
 800f1e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f1e8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800f1ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f1f0:	2270      	movs	r2, #112	@ 0x70
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f00d fc6a 	bl	801cace <memcpy>
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	b00a      	add	sp, #40	@ 0x28
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
 800f200:	2000d0e8 	.word	0x2000d0e8
 800f204:	0801e260 	.word	0x0801e260

0800f208 <rcl_take>:
 800f208:	2800      	cmp	r0, #0
 800f20a:	d04a      	beq.n	800f2a2 <rcl_take+0x9a>
 800f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f210:	4604      	mov	r4, r0
 800f212:	6800      	ldr	r0, [r0, #0]
 800f214:	b0a4      	sub	sp, #144	@ 0x90
 800f216:	2800      	cmp	r0, #0
 800f218:	d03b      	beq.n	800f292 <rcl_take+0x8a>
 800f21a:	461f      	mov	r7, r3
 800f21c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d036      	beq.n	800f292 <rcl_take+0x8a>
 800f224:	460e      	mov	r6, r1
 800f226:	2900      	cmp	r1, #0
 800f228:	d039      	beq.n	800f29e <rcl_take+0x96>
 800f22a:	4615      	mov	r5, r2
 800f22c:	2a00      	cmp	r2, #0
 800f22e:	d03c      	beq.n	800f2aa <rcl_take+0xa2>
 800f230:	a802      	add	r0, sp, #8
 800f232:	f001 fd8d 	bl	8010d50 <rmw_get_zero_initialized_message_info>
 800f236:	f10d 0c08 	add.w	ip, sp, #8
 800f23a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f23e:	46ae      	mov	lr, r5
 800f240:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f244:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f248:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f24c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f250:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f254:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f258:	f04f 0800 	mov.w	r8, #0
 800f25c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f260:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800f264:	6822      	ldr	r2, [r4, #0]
 800f266:	462b      	mov	r3, r5
 800f268:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800f26c:	9700      	str	r7, [sp, #0]
 800f26e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800f272:	4631      	mov	r1, r6
 800f274:	f002 fdda 	bl	8011e2c <rmw_take_with_info>
 800f278:	4603      	mov	r3, r0
 800f27a:	b9c0      	cbnz	r0, 800f2ae <rcl_take+0xa6>
 800f27c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800f280:	f240 1291 	movw	r2, #401	@ 0x191
 800f284:	2900      	cmp	r1, #0
 800f286:	bf08      	it	eq
 800f288:	4613      	moveq	r3, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	b024      	add	sp, #144	@ 0x90
 800f28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f292:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f296:	4618      	mov	r0, r3
 800f298:	b024      	add	sp, #144	@ 0x90
 800f29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f29e:	230b      	movs	r3, #11
 800f2a0:	e7f3      	b.n	800f28a <rcl_take+0x82>
 800f2a2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	4770      	bx	lr
 800f2aa:	ad14      	add	r5, sp, #80	@ 0x50
 800f2ac:	e7c0      	b.n	800f230 <rcl_take+0x28>
 800f2ae:	f007 fe51 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	e7e9      	b.n	800f28a <rcl_take+0x82>
 800f2b6:	bf00      	nop

0800f2b8 <rcl_subscription_get_rmw_handle>:
 800f2b8:	b118      	cbz	r0, 800f2c2 <rcl_subscription_get_rmw_handle+0xa>
 800f2ba:	6800      	ldr	r0, [r0, #0]
 800f2bc:	b108      	cbz	r0, 800f2c2 <rcl_subscription_get_rmw_handle+0xa>
 800f2be:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f2c2:	4770      	bx	lr

0800f2c4 <rcl_subscription_is_valid>:
 800f2c4:	b130      	cbz	r0, 800f2d4 <rcl_subscription_is_valid+0x10>
 800f2c6:	6800      	ldr	r0, [r0, #0]
 800f2c8:	b120      	cbz	r0, 800f2d4 <rcl_subscription_is_valid+0x10>
 800f2ca:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800f2ce:	3800      	subs	r0, #0
 800f2d0:	bf18      	it	ne
 800f2d2:	2001      	movne	r0, #1
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop

0800f2d8 <_rcl_timer_time_jump>:
 800f2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2dc:	4605      	mov	r5, r0
 800f2de:	b084      	sub	sp, #16
 800f2e0:	4614      	mov	r4, r2
 800f2e2:	b131      	cbz	r1, 800f2f2 <_rcl_timer_time_jump+0x1a>
 800f2e4:	7803      	ldrb	r3, [r0, #0]
 800f2e6:	3b02      	subs	r3, #2
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d93f      	bls.n	800f36c <_rcl_timer_time_jump+0x94>
 800f2ec:	b004      	add	sp, #16
 800f2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f2:	6813      	ldr	r3, [r2, #0]
 800f2f4:	a902      	add	r1, sp, #8
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	f008 fa4e 	bl	8017798 <rcl_clock_get_now>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d1f5      	bne.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f300:	6820      	ldr	r0, [r4, #0]
 800f302:	2105      	movs	r1, #5
 800f304:	3020      	adds	r0, #32
 800f306:	f001 fa55 	bl	80107b4 <__atomic_load_8>
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	4681      	mov	r9, r0
 800f30e:	4688      	mov	r8, r1
 800f310:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800f314:	2105      	movs	r1, #5
 800f316:	f001 fa4d 	bl	80107b4 <__atomic_load_8>
 800f31a:	4607      	mov	r7, r0
 800f31c:	6820      	ldr	r0, [r4, #0]
 800f31e:	460e      	mov	r6, r1
 800f320:	3018      	adds	r0, #24
 800f322:	2105      	movs	r1, #5
 800f324:	f001 fa46 	bl	80107b4 <__atomic_load_8>
 800f328:	782b      	ldrb	r3, [r5, #0]
 800f32a:	9a02      	ldr	r2, [sp, #8]
 800f32c:	3b02      	subs	r3, #2
 800f32e:	2b01      	cmp	r3, #1
 800f330:	460d      	mov	r5, r1
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	4682      	mov	sl, r0
 800f336:	d937      	bls.n	800f3a8 <_rcl_timer_time_jump+0xd0>
 800f338:	42ba      	cmp	r2, r7
 800f33a:	eb73 0106 	sbcs.w	r1, r3, r6
 800f33e:	da5f      	bge.n	800f400 <_rcl_timer_time_jump+0x128>
 800f340:	454a      	cmp	r2, r9
 800f342:	eb73 0108 	sbcs.w	r1, r3, r8
 800f346:	dad1      	bge.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f348:	6820      	ldr	r0, [r4, #0]
 800f34a:	eb1a 0202 	adds.w	r2, sl, r2
 800f34e:	eb43 0305 	adc.w	r3, r3, r5
 800f352:	2505      	movs	r5, #5
 800f354:	3028      	adds	r0, #40	@ 0x28
 800f356:	9500      	str	r5, [sp, #0]
 800f358:	f001 fa62 	bl	8010820 <__atomic_store_8>
 800f35c:	6820      	ldr	r0, [r4, #0]
 800f35e:	9500      	str	r5, [sp, #0]
 800f360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f364:	3020      	adds	r0, #32
 800f366:	f001 fa5b 	bl	8010820 <__atomic_store_8>
 800f36a:	e7bf      	b.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f36c:	6813      	ldr	r3, [r2, #0]
 800f36e:	a902      	add	r1, sp, #8
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	f008 fa11 	bl	8017798 <rcl_clock_get_now>
 800f376:	2800      	cmp	r0, #0
 800f378:	d1b8      	bne.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f37a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f37e:	4313      	orrs	r3, r2
 800f380:	d0b4      	beq.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f382:	6820      	ldr	r0, [r4, #0]
 800f384:	2105      	movs	r1, #5
 800f386:	3028      	adds	r0, #40	@ 0x28
 800f388:	f001 fa14 	bl	80107b4 <__atomic_load_8>
 800f38c:	9d02      	ldr	r5, [sp, #8]
 800f38e:	9b03      	ldr	r3, [sp, #12]
 800f390:	4602      	mov	r2, r0
 800f392:	6820      	ldr	r0, [r4, #0]
 800f394:	1b52      	subs	r2, r2, r5
 800f396:	f04f 0405 	mov.w	r4, #5
 800f39a:	9400      	str	r4, [sp, #0]
 800f39c:	eb61 0303 	sbc.w	r3, r1, r3
 800f3a0:	3030      	adds	r0, #48	@ 0x30
 800f3a2:	f001 fa3d 	bl	8010820 <__atomic_store_8>
 800f3a6:	e7a1      	b.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	d09f      	beq.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f3ac:	6820      	ldr	r0, [r4, #0]
 800f3ae:	f04f 0805 	mov.w	r8, #5
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f8cd 8000 	str.w	r8, [sp]
 800f3b8:	3030      	adds	r0, #48	@ 0x30
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f001 fa66 	bl	801088c <__atomic_exchange_8>
 800f3c0:	ea51 0300 	orrs.w	r3, r1, r0
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	460f      	mov	r7, r1
 800f3c8:	d090      	beq.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f3ca:	9a02      	ldr	r2, [sp, #8]
 800f3cc:	9b03      	ldr	r3, [sp, #12]
 800f3ce:	f8cd 8000 	str.w	r8, [sp]
 800f3d2:	1a12      	subs	r2, r2, r0
 800f3d4:	6820      	ldr	r0, [r4, #0]
 800f3d6:	eb63 0301 	sbc.w	r3, r3, r1
 800f3da:	eb12 020a 	adds.w	r2, r2, sl
 800f3de:	eb43 0305 	adc.w	r3, r3, r5
 800f3e2:	3028      	adds	r0, #40	@ 0x28
 800f3e4:	f001 fa1c 	bl	8010820 <__atomic_store_8>
 800f3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3ec:	f8cd 8000 	str.w	r8, [sp]
 800f3f0:	6820      	ldr	r0, [r4, #0]
 800f3f2:	1b92      	subs	r2, r2, r6
 800f3f4:	eb63 0307 	sbc.w	r3, r3, r7
 800f3f8:	3020      	adds	r0, #32
 800f3fa:	f001 fa11 	bl	8010820 <__atomic_store_8>
 800f3fe:	e775      	b.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f400:	6820      	ldr	r0, [r4, #0]
 800f402:	3008      	adds	r0, #8
 800f404:	f007 feb2 	bl	801716c <rcl_trigger_guard_condition>
 800f408:	e770      	b.n	800f2ec <_rcl_timer_time_jump+0x14>
 800f40a:	bf00      	nop

0800f40c <rcl_get_zero_initialized_timer>:
 800f40c:	4b01      	ldr	r3, [pc, #4]	@ (800f414 <rcl_get_zero_initialized_timer+0x8>)
 800f40e:	6818      	ldr	r0, [r3, #0]
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	0801e2b0 	.word	0x0801e2b0

0800f418 <rcl_timer_init>:
 800f418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f41c:	b0aa      	sub	sp, #168	@ 0xa8
 800f41e:	4604      	mov	r4, r0
 800f420:	a835      	add	r0, sp, #212	@ 0xd4
 800f422:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800f426:	460d      	mov	r5, r1
 800f428:	4692      	mov	sl, r2
 800f42a:	f001 f9b5 	bl	8010798 <rcutils_allocator_is_valid>
 800f42e:	2800      	cmp	r0, #0
 800f430:	d064      	beq.n	800f4fc <rcl_timer_init+0xe4>
 800f432:	2c00      	cmp	r4, #0
 800f434:	d062      	beq.n	800f4fc <rcl_timer_init+0xe4>
 800f436:	2d00      	cmp	r5, #0
 800f438:	d060      	beq.n	800f4fc <rcl_timer_init+0xe4>
 800f43a:	2f00      	cmp	r7, #0
 800f43c:	db5e      	blt.n	800f4fc <rcl_timer_init+0xe4>
 800f43e:	6823      	ldr	r3, [r4, #0]
 800f440:	b123      	cbz	r3, 800f44c <rcl_timer_init+0x34>
 800f442:	2664      	movs	r6, #100	@ 0x64
 800f444:	4630      	mov	r0, r6
 800f446:	b02a      	add	sp, #168	@ 0xa8
 800f448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44c:	a908      	add	r1, sp, #32
 800f44e:	4628      	mov	r0, r5
 800f450:	f008 f9a2 	bl	8017798 <rcl_clock_get_now>
 800f454:	4606      	mov	r6, r0
 800f456:	2800      	cmp	r0, #0
 800f458:	d1f4      	bne.n	800f444 <rcl_timer_init+0x2c>
 800f45a:	ae06      	add	r6, sp, #24
 800f45c:	4630      	mov	r0, r6
 800f45e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800f462:	f007 fd8b 	bl	8016f7c <rcl_get_zero_initialized_guard_condition>
 800f466:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f46a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800f46e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f470:	e889 0003 	stmia.w	r9, {r0, r1}
 800f474:	4630      	mov	r0, r6
 800f476:	f007 fe5d 	bl	8017134 <rcl_guard_condition_get_default_options>
 800f47a:	ab0d      	add	r3, sp, #52	@ 0x34
 800f47c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f480:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f484:	4651      	mov	r1, sl
 800f486:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f48a:	4648      	mov	r0, r9
 800f48c:	f007 fd80 	bl	8016f90 <rcl_guard_condition_init>
 800f490:	4606      	mov	r6, r0
 800f492:	2800      	cmp	r0, #0
 800f494:	d1d6      	bne.n	800f444 <rcl_timer_init+0x2c>
 800f496:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d033      	beq.n	800f506 <rcl_timer_init+0xee>
 800f49e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800f4a0:	911a      	str	r1, [sp, #104]	@ 0x68
 800f4a2:	4642      	mov	r2, r8
 800f4a4:	463b      	mov	r3, r7
 800f4a6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800f4aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4ae:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f560 <rcl_timer_init+0x148>
 800f4b2:	eb12 0008 	adds.w	r0, r2, r8
 800f4b6:	eb47 0103 	adc.w	r1, r7, r3
 800f4ba:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800f4be:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800f4c2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800f4c6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800f4ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f4ce:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800f4d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4d6:	f8de 3000 	ldr.w	r3, [lr]
 800f4da:	f8cc 3000 	str.w	r3, [ip]
 800f4de:	f04f 0a00 	mov.w	sl, #0
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800f4e8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800f4ea:	2050      	movs	r0, #80	@ 0x50
 800f4ec:	4798      	blx	r3
 800f4ee:	6020      	str	r0, [r4, #0]
 800f4f0:	b358      	cbz	r0, 800f54a <rcl_timer_init+0x132>
 800f4f2:	2250      	movs	r2, #80	@ 0x50
 800f4f4:	a916      	add	r1, sp, #88	@ 0x58
 800f4f6:	f00d faea 	bl	801cace <memcpy>
 800f4fa:	e7a3      	b.n	800f444 <rcl_timer_init+0x2c>
 800f4fc:	260b      	movs	r6, #11
 800f4fe:	4630      	mov	r0, r6
 800f500:	b02a      	add	sp, #168	@ 0xa8
 800f502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f506:	2001      	movs	r0, #1
 800f508:	2100      	movs	r1, #0
 800f50a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800f50e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f512:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f516:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800f51a:	4a13      	ldr	r2, [pc, #76]	@ (800f568 <rcl_timer_init+0x150>)
 800f51c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f520:	9405      	str	r4, [sp, #20]
 800f522:	9204      	str	r2, [sp, #16]
 800f524:	ab12      	add	r3, sp, #72	@ 0x48
 800f526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f528:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f52c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f530:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800f534:	4628      	mov	r0, r5
 800f536:	f008 f93b 	bl	80177b0 <rcl_clock_add_jump_callback>
 800f53a:	4682      	mov	sl, r0
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d0ae      	beq.n	800f49e <rcl_timer_init+0x86>
 800f540:	4648      	mov	r0, r9
 800f542:	f007 fdd1 	bl	80170e8 <rcl_guard_condition_fini>
 800f546:	4656      	mov	r6, sl
 800f548:	e77c      	b.n	800f444 <rcl_timer_init+0x2c>
 800f54a:	4648      	mov	r0, r9
 800f54c:	f007 fdcc 	bl	80170e8 <rcl_guard_condition_fini>
 800f550:	4905      	ldr	r1, [pc, #20]	@ (800f568 <rcl_timer_init+0x150>)
 800f552:	4622      	mov	r2, r4
 800f554:	4628      	mov	r0, r5
 800f556:	f008 f98d 	bl	8017874 <rcl_clock_remove_jump_callback>
 800f55a:	260a      	movs	r6, #10
 800f55c:	e772      	b.n	800f444 <rcl_timer_init+0x2c>
 800f55e:	bf00      	nop
	...
 800f568:	0800f2d9 	.word	0x0800f2d9

0800f56c <rcl_timer_fini>:
 800f56c:	b310      	cbz	r0, 800f5b4 <rcl_timer_fini+0x48>
 800f56e:	6803      	ldr	r3, [r0, #0]
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	4604      	mov	r4, r0
 800f574:	b1b3      	cbz	r3, 800f5a4 <rcl_timer_fini+0x38>
 800f576:	f3bf 8f5b 	dmb	ish
 800f57a:	2201      	movs	r2, #1
 800f57c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f580:	f3bf 8f5b 	dmb	ish
 800f584:	6803      	ldr	r3, [r0, #0]
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f58a:	7802      	ldrb	r2, [r0, #0]
 800f58c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800f58e:	2a01      	cmp	r2, #1
 800f590:	d00a      	beq.n	800f5a8 <rcl_timer_fini+0x3c>
 800f592:	f103 0008 	add.w	r0, r3, #8
 800f596:	f007 fda7 	bl	80170e8 <rcl_guard_condition_fini>
 800f59a:	6820      	ldr	r0, [r4, #0]
 800f59c:	4631      	mov	r1, r6
 800f59e:	47a8      	blx	r5
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	6023      	str	r3, [r4, #0]
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	bd70      	pop	{r4, r5, r6, pc}
 800f5a8:	4903      	ldr	r1, [pc, #12]	@ (800f5b8 <rcl_timer_fini+0x4c>)
 800f5aa:	4622      	mov	r2, r4
 800f5ac:	f008 f962 	bl	8017874 <rcl_clock_remove_jump_callback>
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	e7ee      	b.n	800f592 <rcl_timer_fini+0x26>
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	4770      	bx	lr
 800f5b8:	0800f2d9 	.word	0x0800f2d9

0800f5bc <rcl_timer_call>:
 800f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	2800      	cmp	r0, #0
 800f5c4:	d06d      	beq.n	800f6a2 <rcl_timer_call+0xe6>
 800f5c6:	6803      	ldr	r3, [r0, #0]
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d063      	beq.n	800f696 <rcl_timer_call+0xda>
 800f5ce:	f3bf 8f5b 	dmb	ish
 800f5d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f5d6:	f3bf 8f5b 	dmb	ish
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d150      	bne.n	800f680 <rcl_timer_call+0xc4>
 800f5de:	6803      	ldr	r3, [r0, #0]
 800f5e0:	a904      	add	r1, sp, #16
 800f5e2:	6818      	ldr	r0, [r3, #0]
 800f5e4:	f008 f8d8 	bl	8017798 <rcl_clock_get_now>
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d14a      	bne.n	800f684 <rcl_timer_call+0xc8>
 800f5ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	db4a      	blt.n	800f68c <rcl_timer_call+0xd0>
 800f5f6:	6820      	ldr	r0, [r4, #0]
 800f5f8:	f04f 0a05 	mov.w	sl, #5
 800f5fc:	f8cd a000 	str.w	sl, [sp]
 800f600:	3020      	adds	r0, #32
 800f602:	f001 f943 	bl	801088c <__atomic_exchange_8>
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	f3bf 8f5b 	dmb	ish
 800f60c:	4680      	mov	r8, r0
 800f60e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f612:	f3bf 8f5b 	dmb	ish
 800f616:	6820      	ldr	r0, [r4, #0]
 800f618:	4689      	mov	r9, r1
 800f61a:	3028      	adds	r0, #40	@ 0x28
 800f61c:	4651      	mov	r1, sl
 800f61e:	f001 f8c9 	bl	80107b4 <__atomic_load_8>
 800f622:	4606      	mov	r6, r0
 800f624:	6820      	ldr	r0, [r4, #0]
 800f626:	460f      	mov	r7, r1
 800f628:	3018      	adds	r0, #24
 800f62a:	4651      	mov	r1, sl
 800f62c:	f001 f8c2 	bl	80107b4 <__atomic_load_8>
 800f630:	1836      	adds	r6, r6, r0
 800f632:	4602      	mov	r2, r0
 800f634:	4682      	mov	sl, r0
 800f636:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800f63a:	eb47 0701 	adc.w	r7, r7, r1
 800f63e:	4286      	cmp	r6, r0
 800f640:	460b      	mov	r3, r1
 800f642:	eb77 010c 	sbcs.w	r1, r7, ip
 800f646:	da04      	bge.n	800f652 <rcl_timer_call+0x96>
 800f648:	ea53 0102 	orrs.w	r1, r3, r2
 800f64c:	d12e      	bne.n	800f6ac <rcl_timer_call+0xf0>
 800f64e:	4606      	mov	r6, r0
 800f650:	4667      	mov	r7, ip
 800f652:	6820      	ldr	r0, [r4, #0]
 800f654:	2105      	movs	r1, #5
 800f656:	4632      	mov	r2, r6
 800f658:	463b      	mov	r3, r7
 800f65a:	3028      	adds	r0, #40	@ 0x28
 800f65c:	9100      	str	r1, [sp, #0]
 800f65e:	f001 f8df 	bl	8010820 <__atomic_store_8>
 800f662:	f1bb 0f00 	cmp.w	fp, #0
 800f666:	d00d      	beq.n	800f684 <rcl_timer_call+0xc8>
 800f668:	9a04      	ldr	r2, [sp, #16]
 800f66a:	9b05      	ldr	r3, [sp, #20]
 800f66c:	ebb2 0208 	subs.w	r2, r2, r8
 800f670:	4620      	mov	r0, r4
 800f672:	eb63 0309 	sbc.w	r3, r3, r9
 800f676:	47d8      	blx	fp
 800f678:	4628      	mov	r0, r5
 800f67a:	b007      	add	sp, #28
 800f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	f240 3521 	movw	r5, #801	@ 0x321
 800f684:	4628      	mov	r0, r5
 800f686:	b007      	add	sp, #28
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f68c:	2501      	movs	r5, #1
 800f68e:	4628      	mov	r0, r5
 800f690:	b007      	add	sp, #28
 800f692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f696:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f69a:	4628      	mov	r0, r5
 800f69c:	b007      	add	sp, #28
 800f69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6a2:	250b      	movs	r5, #11
 800f6a4:	4628      	mov	r0, r5
 800f6a6:	b007      	add	sp, #28
 800f6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ac:	1b80      	subs	r0, r0, r6
 800f6ae:	eb6c 0107 	sbc.w	r1, ip, r7
 800f6b2:	3801      	subs	r0, #1
 800f6b4:	f161 0100 	sbc.w	r1, r1, #0
 800f6b8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f6bc:	f7f1 fa2e 	bl	8000b1c <__aeabi_ldivmod>
 800f6c0:	9b02      	ldr	r3, [sp, #8]
 800f6c2:	3001      	adds	r0, #1
 800f6c4:	f141 0100 	adc.w	r1, r1, #0
 800f6c8:	fb00 f303 	mul.w	r3, r0, r3
 800f6cc:	fb01 330a 	mla	r3, r1, sl, r3
 800f6d0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f6d4:	1986      	adds	r6, r0, r6
 800f6d6:	4453      	add	r3, sl
 800f6d8:	eb43 0707 	adc.w	r7, r3, r7
 800f6dc:	e7b9      	b.n	800f652 <rcl_timer_call+0x96>
 800f6de:	bf00      	nop

0800f6e0 <rcl_timer_is_ready>:
 800f6e0:	b570      	push	{r4, r5, r6, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	b378      	cbz	r0, 800f746 <rcl_timer_is_ready+0x66>
 800f6e6:	6803      	ldr	r3, [r0, #0]
 800f6e8:	4604      	mov	r4, r0
 800f6ea:	b383      	cbz	r3, 800f74e <rcl_timer_is_ready+0x6e>
 800f6ec:	460d      	mov	r5, r1
 800f6ee:	b351      	cbz	r1, 800f746 <rcl_timer_is_ready+0x66>
 800f6f0:	f3bf 8f5b 	dmb	ish
 800f6f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f6f8:	f3bf 8f5b 	dmb	ish
 800f6fc:	b953      	cbnz	r3, 800f714 <rcl_timer_is_ready+0x34>
 800f6fe:	6803      	ldr	r3, [r0, #0]
 800f700:	4669      	mov	r1, sp
 800f702:	6818      	ldr	r0, [r3, #0]
 800f704:	f008 f848 	bl	8017798 <rcl_clock_get_now>
 800f708:	4606      	mov	r6, r0
 800f70a:	b140      	cbz	r0, 800f71e <rcl_timer_is_ready+0x3e>
 800f70c:	f240 3321 	movw	r3, #801	@ 0x321
 800f710:	4298      	cmp	r0, r3
 800f712:	d101      	bne.n	800f718 <rcl_timer_is_ready+0x38>
 800f714:	2600      	movs	r6, #0
 800f716:	702e      	strb	r6, [r5, #0]
 800f718:	4630      	mov	r0, r6
 800f71a:	b002      	add	sp, #8
 800f71c:	bd70      	pop	{r4, r5, r6, pc}
 800f71e:	6820      	ldr	r0, [r4, #0]
 800f720:	2105      	movs	r1, #5
 800f722:	3028      	adds	r0, #40	@ 0x28
 800f724:	f001 f846 	bl	80107b4 <__atomic_load_8>
 800f728:	9b00      	ldr	r3, [sp, #0]
 800f72a:	1ac0      	subs	r0, r0, r3
 800f72c:	9b01      	ldr	r3, [sp, #4]
 800f72e:	eb61 0103 	sbc.w	r1, r1, r3
 800f732:	2801      	cmp	r0, #1
 800f734:	f171 0300 	sbcs.w	r3, r1, #0
 800f738:	bfb4      	ite	lt
 800f73a:	2301      	movlt	r3, #1
 800f73c:	2300      	movge	r3, #0
 800f73e:	4630      	mov	r0, r6
 800f740:	702b      	strb	r3, [r5, #0]
 800f742:	b002      	add	sp, #8
 800f744:	bd70      	pop	{r4, r5, r6, pc}
 800f746:	260b      	movs	r6, #11
 800f748:	4630      	mov	r0, r6
 800f74a:	b002      	add	sp, #8
 800f74c:	bd70      	pop	{r4, r5, r6, pc}
 800f74e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f752:	e7e1      	b.n	800f718 <rcl_timer_is_ready+0x38>

0800f754 <rcl_timer_get_time_until_next_call>:
 800f754:	b570      	push	{r4, r5, r6, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	b330      	cbz	r0, 800f7a8 <rcl_timer_get_time_until_next_call+0x54>
 800f75a:	6803      	ldr	r3, [r0, #0]
 800f75c:	4604      	mov	r4, r0
 800f75e:	b33b      	cbz	r3, 800f7b0 <rcl_timer_get_time_until_next_call+0x5c>
 800f760:	460d      	mov	r5, r1
 800f762:	b309      	cbz	r1, 800f7a8 <rcl_timer_get_time_until_next_call+0x54>
 800f764:	f3bf 8f5b 	dmb	ish
 800f768:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f76c:	f3bf 8f5b 	dmb	ish
 800f770:	b9ab      	cbnz	r3, 800f79e <rcl_timer_get_time_until_next_call+0x4a>
 800f772:	6803      	ldr	r3, [r0, #0]
 800f774:	4669      	mov	r1, sp
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	f008 f80e 	bl	8017798 <rcl_clock_get_now>
 800f77c:	4606      	mov	r6, r0
 800f77e:	b958      	cbnz	r0, 800f798 <rcl_timer_get_time_until_next_call+0x44>
 800f780:	6820      	ldr	r0, [r4, #0]
 800f782:	2105      	movs	r1, #5
 800f784:	3028      	adds	r0, #40	@ 0x28
 800f786:	f001 f815 	bl	80107b4 <__atomic_load_8>
 800f78a:	9b00      	ldr	r3, [sp, #0]
 800f78c:	1ac0      	subs	r0, r0, r3
 800f78e:	9b01      	ldr	r3, [sp, #4]
 800f790:	6028      	str	r0, [r5, #0]
 800f792:	eb61 0103 	sbc.w	r1, r1, r3
 800f796:	6069      	str	r1, [r5, #4]
 800f798:	4630      	mov	r0, r6
 800f79a:	b002      	add	sp, #8
 800f79c:	bd70      	pop	{r4, r5, r6, pc}
 800f79e:	f240 3621 	movw	r6, #801	@ 0x321
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	b002      	add	sp, #8
 800f7a6:	bd70      	pop	{r4, r5, r6, pc}
 800f7a8:	260b      	movs	r6, #11
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	b002      	add	sp, #8
 800f7ae:	bd70      	pop	{r4, r5, r6, pc}
 800f7b0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f7b4:	e7f0      	b.n	800f798 <rcl_timer_get_time_until_next_call+0x44>
 800f7b6:	bf00      	nop

0800f7b8 <rcl_timer_get_guard_condition>:
 800f7b8:	b130      	cbz	r0, 800f7c8 <rcl_timer_get_guard_condition+0x10>
 800f7ba:	6800      	ldr	r0, [r0, #0]
 800f7bc:	b120      	cbz	r0, 800f7c8 <rcl_timer_get_guard_condition+0x10>
 800f7be:	68c3      	ldr	r3, [r0, #12]
 800f7c0:	b10b      	cbz	r3, 800f7c6 <rcl_timer_get_guard_condition+0xe>
 800f7c2:	3008      	adds	r0, #8
 800f7c4:	4770      	bx	lr
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop

0800f7cc <_rclc_check_for_new_data>:
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d046      	beq.n	800f85e <_rclc_check_for_new_data+0x92>
 800f7d0:	b510      	push	{r4, lr}
 800f7d2:	7802      	ldrb	r2, [r0, #0]
 800f7d4:	b084      	sub	sp, #16
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2a0a      	cmp	r2, #10
 800f7da:	d842      	bhi.n	800f862 <_rclc_check_for_new_data+0x96>
 800f7dc:	e8df f002 	tbb	[pc, r2]
 800f7e0:	14181212 	.word	0x14181212
 800f7e4:	06060614 	.word	0x06060614
 800f7e8:	2e1a      	.short	0x2e1a
 800f7ea:	16          	.byte	0x16
 800f7eb:	00          	.byte	0x00
 800f7ec:	6a0a      	ldr	r2, [r1, #32]
 800f7ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f7f0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	1a12      	subs	r2, r2, r0
 800f7f8:	bf18      	it	ne
 800f7fa:	2201      	movne	r2, #1
 800f7fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f800:	b004      	add	sp, #16
 800f802:	bd10      	pop	{r4, pc}
 800f804:	680a      	ldr	r2, [r1, #0]
 800f806:	e7f2      	b.n	800f7ee <_rclc_check_for_new_data+0x22>
 800f808:	698a      	ldr	r2, [r1, #24]
 800f80a:	e7f0      	b.n	800f7ee <_rclc_check_for_new_data+0x22>
 800f80c:	688a      	ldr	r2, [r1, #8]
 800f80e:	e7ee      	b.n	800f7ee <_rclc_check_for_new_data+0x22>
 800f810:	690a      	ldr	r2, [r1, #16]
 800f812:	e7ec      	b.n	800f7ee <_rclc_check_for_new_data+0x22>
 800f814:	685c      	ldr	r4, [r3, #4]
 800f816:	4608      	mov	r0, r1
 800f818:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f81c:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f820:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f824:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f82e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f832:	f104 0110 	add.w	r1, r4, #16
 800f836:	f008 ffeb 	bl	8018810 <rcl_action_client_wait_set_get_entities_ready>
 800f83a:	e7e1      	b.n	800f800 <_rclc_check_for_new_data+0x34>
 800f83c:	685c      	ldr	r4, [r3, #4]
 800f83e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f842:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f846:	e9cd 3200 	strd	r3, r2, [sp]
 800f84a:	4608      	mov	r0, r1
 800f84c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f850:	f104 0220 	add.w	r2, r4, #32
 800f854:	f104 0110 	add.w	r1, r4, #16
 800f858:	f009 f9f2 	bl	8018c40 <rcl_action_server_wait_set_get_entities_ready>
 800f85c:	e7d0      	b.n	800f800 <_rclc_check_for_new_data+0x34>
 800f85e:	200b      	movs	r0, #11
 800f860:	4770      	bx	lr
 800f862:	2001      	movs	r0, #1
 800f864:	e7cc      	b.n	800f800 <_rclc_check_for_new_data+0x34>
 800f866:	bf00      	nop

0800f868 <_rclc_take_new_data>:
 800f868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f86a:	b09b      	sub	sp, #108	@ 0x6c
 800f86c:	2800      	cmp	r0, #0
 800f86e:	f000 8088 	beq.w	800f982 <_rclc_take_new_data+0x11a>
 800f872:	7803      	ldrb	r3, [r0, #0]
 800f874:	4604      	mov	r4, r0
 800f876:	2b0a      	cmp	r3, #10
 800f878:	f200 8167 	bhi.w	800fb4a <_rclc_take_new_data+0x2e2>
 800f87c:	e8df f003 	tbb	[pc, r3]
 800f880:	44152d2d 	.word	0x44152d2d
 800f884:	19191944 	.word	0x19191944
 800f888:	065a      	.short	0x065a
 800f88a:	15          	.byte	0x15
 800f88b:	00          	.byte	0x00
 800f88c:	6840      	ldr	r0, [r0, #4]
 800f88e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f892:	2b00      	cmp	r3, #0
 800f894:	f040 80b2 	bne.w	800f9fc <_rclc_take_new_data+0x194>
 800f898:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	f040 80e4 	bne.w	800fa6a <_rclc_take_new_data+0x202>
 800f8a2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d16f      	bne.n	800f98a <_rclc_take_new_data+0x122>
 800f8aa:	2500      	movs	r5, #0
 800f8ac:	4628      	mov	r0, r5
 800f8ae:	b01b      	add	sp, #108	@ 0x6c
 800f8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8b2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f8b4:	6a0b      	ldr	r3, [r1, #32]
 800f8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d0f5      	beq.n	800f8aa <_rclc_take_new_data+0x42>
 800f8be:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f8c2:	f104 0110 	add.w	r1, r4, #16
 800f8c6:	f007 fe43 	bl	8017550 <rcl_take_request>
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d0ec      	beq.n	800f8aa <_rclc_take_new_data+0x42>
 800f8d0:	f240 2359 	movw	r3, #601	@ 0x259
 800f8d4:	4298      	cmp	r0, r3
 800f8d6:	d013      	beq.n	800f900 <_rclc_take_new_data+0x98>
 800f8d8:	e029      	b.n	800f92e <_rclc_take_new_data+0xc6>
 800f8da:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f8dc:	680b      	ldr	r3, [r1, #0]
 800f8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d0e1      	beq.n	800f8aa <_rclc_take_new_data+0x42>
 800f8e6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	aa0a      	add	r2, sp, #40	@ 0x28
 800f8ee:	f7ff fc8b 	bl	800f208 <rcl_take>
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d0d9      	beq.n	800f8ac <_rclc_take_new_data+0x44>
 800f8f8:	f240 1391 	movw	r3, #401	@ 0x191
 800f8fc:	4298      	cmp	r0, r3
 800f8fe:	d116      	bne.n	800f92e <_rclc_take_new_data+0xc6>
 800f900:	2300      	movs	r3, #0
 800f902:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f906:	e7d1      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800f908:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f90a:	698b      	ldr	r3, [r1, #24]
 800f90c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d0ca      	beq.n	800f8aa <_rclc_take_new_data+0x42>
 800f914:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f918:	f104 0110 	add.w	r1, r4, #16
 800f91c:	f007 fac8 	bl	8016eb0 <rcl_take_response>
 800f920:	4605      	mov	r5, r0
 800f922:	2800      	cmp	r0, #0
 800f924:	d0c1      	beq.n	800f8aa <_rclc_take_new_data+0x42>
 800f926:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f92a:	4298      	cmp	r0, r3
 800f92c:	d0be      	beq.n	800f8ac <_rclc_take_new_data+0x44>
 800f92e:	f001 f813 	bl	8010958 <rcutils_reset_error>
 800f932:	e7bb      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800f934:	6840      	ldr	r0, [r0, #4]
 800f936:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d17d      	bne.n	800fa3a <_rclc_take_new_data+0x1d2>
 800f93e:	69c3      	ldr	r3, [r0, #28]
 800f940:	b11b      	cbz	r3, 800f94a <_rclc_take_new_data+0xe2>
 800f942:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f946:	2b00      	cmp	r3, #0
 800f948:	d144      	bne.n	800f9d4 <_rclc_take_new_data+0x16c>
 800f94a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f040 80ac 	bne.w	800faac <_rclc_take_new_data+0x244>
 800f954:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d0a6      	beq.n	800f8aa <_rclc_take_new_data+0x42>
 800f95c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f95e:	a90a      	add	r1, sp, #40	@ 0x28
 800f960:	3010      	adds	r0, #16
 800f962:	f008 fe2d 	bl	80185c0 <rcl_action_take_result_response>
 800f966:	4605      	mov	r5, r0
 800f968:	2800      	cmp	r0, #0
 800f96a:	d1e0      	bne.n	800f92e <_rclc_take_new_data+0xc6>
 800f96c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f970:	6860      	ldr	r0, [r4, #4]
 800f972:	f009 fa89 	bl	8018e88 <rclc_action_find_handle_by_result_request_sequence_number>
 800f976:	2800      	cmp	r0, #0
 800f978:	d098      	beq.n	800f8ac <_rclc_take_new_data+0x44>
 800f97a:	2301      	movs	r3, #1
 800f97c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f980:	e794      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800f982:	250b      	movs	r5, #11
 800f984:	4628      	mov	r0, r5
 800f986:	b01b      	add	sp, #108	@ 0x6c
 800f988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f98a:	ae04      	add	r6, sp, #16
 800f98c:	aa0a      	add	r2, sp, #40	@ 0x28
 800f98e:	3010      	adds	r0, #16
 800f990:	4631      	mov	r1, r6
 800f992:	f009 f889 	bl	8018aa8 <rcl_action_take_cancel_request>
 800f996:	4605      	mov	r5, r0
 800f998:	2800      	cmp	r0, #0
 800f99a:	d1c8      	bne.n	800f92e <_rclc_take_new_data+0xc6>
 800f99c:	6860      	ldr	r0, [r4, #4]
 800f99e:	a90a      	add	r1, sp, #40	@ 0x28
 800f9a0:	f009 fa30 	bl	8018e04 <rclc_action_find_goal_handle_by_uuid>
 800f9a4:	4607      	mov	r7, r0
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	f000 80bb 	beq.w	800fb22 <_rclc_take_new_data+0x2ba>
 800f9ac:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f9b0:	2101      	movs	r1, #1
 800f9b2:	f009 f9b1 	bl	8018d18 <rcl_action_transition_goal_state>
 800f9b6:	2803      	cmp	r0, #3
 800f9b8:	4684      	mov	ip, r0
 800f9ba:	f040 80a7 	bne.w	800fb0c <_rclc_take_new_data+0x2a4>
 800f9be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f9c0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f9c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f9ca:	e884 0003 	stmia.w	r4, {r0, r1}
 800f9ce:	f887 c008 	strb.w	ip, [r7, #8]
 800f9d2:	e76b      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800f9d4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f9d6:	3010      	adds	r0, #16
 800f9d8:	f008 fe72 	bl	80186c0 <rcl_action_take_feedback>
 800f9dc:	4605      	mov	r5, r0
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d1a5      	bne.n	800f92e <_rclc_take_new_data+0xc6>
 800f9e2:	6860      	ldr	r0, [r4, #4]
 800f9e4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f9e6:	f009 fa0d 	bl	8018e04 <rclc_action_find_goal_handle_by_uuid>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	f000 80a3 	beq.w	800fb38 <_rclc_take_new_data+0x2d0>
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	6860      	ldr	r0, [r4, #4]
 800f9f6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f9fa:	e7a6      	b.n	800f94a <_rclc_take_new_data+0xe2>
 800f9fc:	f009 f9dc 	bl	8018db8 <rclc_action_take_goal_handle>
 800fa00:	4606      	mov	r6, r0
 800fa02:	6860      	ldr	r0, [r4, #4]
 800fa04:	2e00      	cmp	r6, #0
 800fa06:	f43f af47 	beq.w	800f898 <_rclc_take_new_data+0x30>
 800fa0a:	6070      	str	r0, [r6, #4]
 800fa0c:	69f2      	ldr	r2, [r6, #28]
 800fa0e:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800fa12:	3010      	adds	r0, #16
 800fa14:	f008 ff90 	bl	8018938 <rcl_action_take_goal_request>
 800fa18:	4605      	mov	r5, r0
 800fa1a:	2800      	cmp	r0, #0
 800fa1c:	f040 808e 	bne.w	800fb3c <_rclc_take_new_data+0x2d4>
 800fa20:	69f7      	ldr	r7, [r6, #28]
 800fa22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fa24:	7235      	strb	r5, [r6, #8]
 800fa26:	f8c6 0009 	str.w	r0, [r6, #9]
 800fa2a:	f8c6 100d 	str.w	r1, [r6, #13]
 800fa2e:	6860      	ldr	r0, [r4, #4]
 800fa30:	f8c6 2011 	str.w	r2, [r6, #17]
 800fa34:	f8c6 3015 	str.w	r3, [r6, #21]
 800fa38:	e72e      	b.n	800f898 <_rclc_take_new_data+0x30>
 800fa3a:	aa04      	add	r2, sp, #16
 800fa3c:	a90a      	add	r1, sp, #40	@ 0x28
 800fa3e:	3010      	adds	r0, #16
 800fa40:	f008 fd46 	bl	80184d0 <rcl_action_take_goal_response>
 800fa44:	4605      	mov	r5, r0
 800fa46:	2800      	cmp	r0, #0
 800fa48:	f47f af71 	bne.w	800f92e <_rclc_take_new_data+0xc6>
 800fa4c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa50:	6860      	ldr	r0, [r4, #4]
 800fa52:	f009 fa07 	bl	8018e64 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fa56:	b130      	cbz	r0, 800fa66 <_rclc_take_new_data+0x1fe>
 800fa58:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fa5c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fa60:	2201      	movs	r2, #1
 800fa62:	f880 2020 	strb.w	r2, [r0, #32]
 800fa66:	6860      	ldr	r0, [r4, #4]
 800fa68:	e769      	b.n	800f93e <_rclc_take_new_data+0xd6>
 800fa6a:	aa04      	add	r2, sp, #16
 800fa6c:	3010      	adds	r0, #16
 800fa6e:	a90a      	add	r1, sp, #40	@ 0x28
 800fa70:	f008 ffda 	bl	8018a28 <rcl_action_take_result_request>
 800fa74:	4605      	mov	r5, r0
 800fa76:	2800      	cmp	r0, #0
 800fa78:	f47f af59 	bne.w	800f92e <_rclc_take_new_data+0xc6>
 800fa7c:	6860      	ldr	r0, [r4, #4]
 800fa7e:	a904      	add	r1, sp, #16
 800fa80:	f009 f9c0 	bl	8018e04 <rclc_action_find_goal_handle_by_uuid>
 800fa84:	4607      	mov	r7, r0
 800fa86:	b160      	cbz	r0, 800faa2 <_rclc_take_new_data+0x23a>
 800fa88:	ad0a      	add	r5, sp, #40	@ 0x28
 800fa8a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800fa8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fa92:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fa96:	f04f 0c02 	mov.w	ip, #2
 800fa9a:	e886 0003 	stmia.w	r6, {r0, r1}
 800fa9e:	f887 c008 	strb.w	ip, [r7, #8]
 800faa2:	6860      	ldr	r0, [r4, #4]
 800faa4:	2300      	movs	r3, #0
 800faa6:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800faaa:	e6fa      	b.n	800f8a2 <_rclc_take_new_data+0x3a>
 800faac:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800fab0:	a90a      	add	r1, sp, #40	@ 0x28
 800fab2:	3010      	adds	r0, #16
 800fab4:	f008 fdc4 	bl	8018640 <rcl_action_take_cancel_response>
 800fab8:	4605      	mov	r5, r0
 800faba:	2800      	cmp	r0, #0
 800fabc:	f47f af37 	bne.w	800f92e <_rclc_take_new_data+0xc6>
 800fac0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fac4:	6860      	ldr	r0, [r4, #4]
 800fac6:	f009 f9f1 	bl	8018eac <rclc_action_find_handle_by_cancel_request_sequence_number>
 800faca:	4606      	mov	r6, r0
 800facc:	6860      	ldr	r0, [r4, #4]
 800face:	2e00      	cmp	r6, #0
 800fad0:	f43f af40 	beq.w	800f954 <_rclc_take_new_data+0xec>
 800fad4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fad6:	2701      	movs	r7, #1
 800fad8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800fada:	2b00      	cmp	r3, #0
 800fadc:	f43f af3a 	beq.w	800f954 <_rclc_take_new_data+0xec>
 800fae0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800fae2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fae6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800faea:	f009 f98b 	bl	8018e04 <rclc_action_find_goal_handle_by_uuid>
 800faee:	b138      	cbz	r0, 800fb00 <_rclc_take_new_data+0x298>
 800faf0:	6860      	ldr	r0, [r4, #4]
 800faf2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800faf4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800faf8:	3501      	adds	r5, #1
 800fafa:	42ab      	cmp	r3, r5
 800fafc:	d8f0      	bhi.n	800fae0 <_rclc_take_new_data+0x278>
 800fafe:	e729      	b.n	800f954 <_rclc_take_new_data+0xec>
 800fb00:	6860      	ldr	r0, [r4, #4]
 800fb02:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800fb04:	3501      	adds	r5, #1
 800fb06:	42ab      	cmp	r3, r5
 800fb08:	d8ea      	bhi.n	800fae0 <_rclc_take_new_data+0x278>
 800fb0a:	e723      	b.n	800f954 <_rclc_take_new_data+0xec>
 800fb0c:	ab06      	add	r3, sp, #24
 800fb0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb14:	2103      	movs	r1, #3
 800fb16:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fb1a:	6860      	ldr	r0, [r4, #4]
 800fb1c:	f009 fa3c 	bl	8018f98 <rclc_action_server_goal_cancel_reject>
 800fb20:	e6c4      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800fb22:	ab06      	add	r3, sp, #24
 800fb24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fb2a:	2102      	movs	r1, #2
 800fb2c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fb30:	6860      	ldr	r0, [r4, #4]
 800fb32:	f009 fa31 	bl	8018f98 <rclc_action_server_goal_cancel_reject>
 800fb36:	e6b9      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800fb38:	6860      	ldr	r0, [r4, #4]
 800fb3a:	e706      	b.n	800f94a <_rclc_take_new_data+0xe2>
 800fb3c:	6860      	ldr	r0, [r4, #4]
 800fb3e:	4631      	mov	r1, r6
 800fb40:	f009 f94a 	bl	8018dd8 <rclc_action_remove_used_goal_handle>
 800fb44:	f000 ff08 	bl	8010958 <rcutils_reset_error>
 800fb48:	e6b0      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800fb4a:	2501      	movs	r5, #1
 800fb4c:	e6ae      	b.n	800f8ac <_rclc_take_new_data+0x44>
 800fb4e:	bf00      	nop

0800fb50 <_rclc_execute.part.0>:
 800fb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb52:	7803      	ldrb	r3, [r0, #0]
 800fb54:	b087      	sub	sp, #28
 800fb56:	4604      	mov	r4, r0
 800fb58:	2b0a      	cmp	r3, #10
 800fb5a:	f200 8136 	bhi.w	800fdca <_rclc_execute.part.0+0x27a>
 800fb5e:	e8df f003 	tbb	[pc, r3]
 800fb62:	435e      	.short	0x435e
 800fb64:	06a1664f 	.word	0x06a1664f
 800fb68:	6c1e0606 	.word	0x6c1e0606
 800fb6c:	59          	.byte	0x59
 800fb6d:	00          	.byte	0x00
 800fb6e:	2b06      	cmp	r3, #6
 800fb70:	f000 8122 	beq.w	800fdb8 <_rclc_execute.part.0+0x268>
 800fb74:	2b07      	cmp	r3, #7
 800fb76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fb78:	f040 8118 	bne.w	800fdac <_rclc_execute.part.0+0x25c>
 800fb7c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800fb80:	6880      	ldr	r0, [r0, #8]
 800fb82:	4798      	blx	r3
 800fb84:	f104 0110 	add.w	r1, r4, #16
 800fb88:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800fb8a:	6860      	ldr	r0, [r4, #4]
 800fb8c:	f007 fd20 	bl	80175d0 <rcl_send_response>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d033      	beq.n	800fbfc <_rclc_execute.part.0+0xac>
 800fb94:	9005      	str	r0, [sp, #20]
 800fb96:	f000 fedf 	bl	8010958 <rcutils_reset_error>
 800fb9a:	9805      	ldr	r0, [sp, #20]
 800fb9c:	e02e      	b.n	800fbfc <_rclc_execute.part.0+0xac>
 800fb9e:	6840      	ldr	r0, [r0, #4]
 800fba0:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 8086 	beq.w	800fcb6 <_rclc_execute.part.0+0x166>
 800fbaa:	2600      	movs	r6, #0
 800fbac:	2701      	movs	r7, #1
 800fbae:	e004      	b.n	800fbba <_rclc_execute.part.0+0x6a>
 800fbb0:	f009 f8dc 	bl	8018d6c <rclc_action_send_result_request>
 800fbb4:	b998      	cbnz	r0, 800fbde <_rclc_execute.part.0+0x8e>
 800fbb6:	722f      	strb	r7, [r5, #8]
 800fbb8:	6860      	ldr	r0, [r4, #4]
 800fbba:	f009 f989 	bl	8018ed0 <rclc_action_find_first_handle_with_goal_response>
 800fbbe:	4605      	mov	r5, r0
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	d077      	beq.n	800fcb4 <_rclc_execute.part.0+0x164>
 800fbc4:	6863      	ldr	r3, [r4, #4]
 800fbc6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fbc8:	699b      	ldr	r3, [r3, #24]
 800fbca:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800fbce:	f885 6020 	strb.w	r6, [r5, #32]
 800fbd2:	4798      	blx	r3
 800fbd4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800fbd8:	4628      	mov	r0, r5
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1e8      	bne.n	800fbb0 <_rclc_execute.part.0+0x60>
 800fbde:	6860      	ldr	r0, [r4, #4]
 800fbe0:	4629      	mov	r1, r5
 800fbe2:	f009 f8f9 	bl	8018dd8 <rclc_action_remove_used_goal_handle>
 800fbe6:	e7e7      	b.n	800fbb8 <_rclc_execute.part.0+0x68>
 800fbe8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800fbec:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800fbf0:	2d00      	cmp	r5, #0
 800fbf2:	f000 80c9 	beq.w	800fd88 <_rclc_execute.part.0+0x238>
 800fbf6:	6880      	ldr	r0, [r0, #8]
 800fbf8:	4798      	blx	r3
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	b007      	add	sp, #28
 800fbfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc00:	6840      	ldr	r0, [r0, #4]
 800fc02:	f7ff fcdb 	bl	800f5bc <rcl_timer_call>
 800fc06:	f240 3321 	movw	r3, #801	@ 0x321
 800fc0a:	4298      	cmp	r0, r3
 800fc0c:	d004      	beq.n	800fc18 <_rclc_execute.part.0+0xc8>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d0f4      	beq.n	800fbfc <_rclc_execute.part.0+0xac>
 800fc12:	e7bf      	b.n	800fb94 <_rclc_execute.part.0+0x44>
 800fc14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc16:	4798      	blx	r3
 800fc18:	2000      	movs	r0, #0
 800fc1a:	b007      	add	sp, #28
 800fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc1e:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800fc22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc24:	b925      	cbnz	r5, 800fc30 <_rclc_execute.part.0+0xe0>
 800fc26:	4628      	mov	r0, r5
 800fc28:	4798      	blx	r3
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	e7e6      	b.n	800fbfc <_rclc_execute.part.0+0xac>
 800fc2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fc30:	68a0      	ldr	r0, [r4, #8]
 800fc32:	4798      	blx	r3
 800fc34:	2000      	movs	r0, #0
 800fc36:	b007      	add	sp, #28
 800fc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc3a:	6840      	ldr	r0, [r0, #4]
 800fc3c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fc40:	bb3b      	cbnz	r3, 800fc92 <_rclc_execute.part.0+0x142>
 800fc42:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d07b      	beq.n	800fd42 <_rclc_execute.part.0+0x1f2>
 800fc4a:	f640 0634 	movw	r6, #2100	@ 0x834
 800fc4e:	2701      	movs	r7, #1
 800fc50:	e007      	b.n	800fc62 <_rclc_execute.part.0+0x112>
 800fc52:	4628      	mov	r0, r5
 800fc54:	f009 f954 	bl	8018f00 <rclc_action_server_response_goal_request>
 800fc58:	6860      	ldr	r0, [r4, #4]
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	f009 f8bc 	bl	8018dd8 <rclc_action_remove_used_goal_handle>
 800fc60:	6860      	ldr	r0, [r4, #4]
 800fc62:	2100      	movs	r1, #0
 800fc64:	f009 f8e6 	bl	8018e34 <rclc_action_find_first_handle_by_status>
 800fc68:	4605      	mov	r5, r0
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d066      	beq.n	800fd3c <_rclc_execute.part.0+0x1ec>
 800fc6e:	6863      	ldr	r3, [r4, #4]
 800fc70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	4798      	blx	r3
 800fc76:	42b0      	cmp	r0, r6
 800fc78:	f04f 0100 	mov.w	r1, #0
 800fc7c:	d1e9      	bne.n	800fc52 <_rclc_execute.part.0+0x102>
 800fc7e:	2101      	movs	r1, #1
 800fc80:	4628      	mov	r0, r5
 800fc82:	f009 f93d 	bl	8018f00 <rclc_action_server_response_goal_request>
 800fc86:	722f      	strb	r7, [r5, #8]
 800fc88:	e7ea      	b.n	800fc60 <_rclc_execute.part.0+0x110>
 800fc8a:	6848      	ldr	r0, [r1, #4]
 800fc8c:	f009 f8a4 	bl	8018dd8 <rclc_action_remove_used_goal_handle>
 800fc90:	6860      	ldr	r0, [r4, #4]
 800fc92:	f009 f8db 	bl	8018e4c <rclc_action_find_first_terminated_handle>
 800fc96:	4601      	mov	r1, r0
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d1f6      	bne.n	800fc8a <_rclc_execute.part.0+0x13a>
 800fc9c:	6860      	ldr	r0, [r4, #4]
 800fc9e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800fca2:	e7ce      	b.n	800fc42 <_rclc_execute.part.0+0xf2>
 800fca4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fca6:	6880      	ldr	r0, [r0, #8]
 800fca8:	f104 0110 	add.w	r1, r4, #16
 800fcac:	4798      	blx	r3
 800fcae:	2000      	movs	r0, #0
 800fcb0:	b007      	add	sp, #28
 800fcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcb4:	6860      	ldr	r0, [r4, #4]
 800fcb6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800fcba:	b18b      	cbz	r3, 800fce0 <_rclc_execute.part.0+0x190>
 800fcbc:	68c5      	ldr	r5, [r0, #12]
 800fcbe:	b32d      	cbz	r5, 800fd0c <_rclc_execute.part.0+0x1bc>
 800fcc0:	2600      	movs	r6, #0
 800fcc2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800fcc6:	b143      	cbz	r3, 800fcda <_rclc_execute.part.0+0x18a>
 800fcc8:	69c3      	ldr	r3, [r0, #28]
 800fcca:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800fcce:	b123      	cbz	r3, 800fcda <_rclc_execute.part.0+0x18a>
 800fcd0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fcd2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	4798      	blx	r3
 800fcd8:	6860      	ldr	r0, [r4, #4]
 800fcda:	682d      	ldr	r5, [r5, #0]
 800fcdc:	2d00      	cmp	r5, #0
 800fcde:	d1f0      	bne.n	800fcc2 <_rclc_execute.part.0+0x172>
 800fce0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800fce4:	b193      	cbz	r3, 800fd0c <_rclc_execute.part.0+0x1bc>
 800fce6:	68c5      	ldr	r5, [r0, #12]
 800fce8:	b185      	cbz	r5, 800fd0c <_rclc_execute.part.0+0x1bc>
 800fcea:	2600      	movs	r6, #0
 800fcec:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800fcf0:	b14b      	cbz	r3, 800fd06 <_rclc_execute.part.0+0x1b6>
 800fcf2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800fcf4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800fcf8:	b12b      	cbz	r3, 800fd06 <_rclc_execute.part.0+0x1b6>
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800fd00:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd02:	4798      	blx	r3
 800fd04:	6860      	ldr	r0, [r4, #4]
 800fd06:	682d      	ldr	r5, [r5, #0]
 800fd08:	2d00      	cmp	r5, #0
 800fd0a:	d1ef      	bne.n	800fcec <_rclc_execute.part.0+0x19c>
 800fd0c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d081      	beq.n	800fc18 <_rclc_execute.part.0+0xc8>
 800fd14:	2700      	movs	r7, #0
 800fd16:	e00b      	b.n	800fd30 <_rclc_execute.part.0+0x1e0>
 800fd18:	6863      	ldr	r3, [r4, #4]
 800fd1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800fd1e:	6a1e      	ldr	r6, [r3, #32]
 800fd20:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800fd24:	47b0      	blx	r6
 800fd26:	6860      	ldr	r0, [r4, #4]
 800fd28:	4629      	mov	r1, r5
 800fd2a:	f009 f855 	bl	8018dd8 <rclc_action_remove_used_goal_handle>
 800fd2e:	6860      	ldr	r0, [r4, #4]
 800fd30:	f009 f8da 	bl	8018ee8 <rclc_action_find_first_handle_with_result_response>
 800fd34:	4605      	mov	r5, r0
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d1ee      	bne.n	800fd18 <_rclc_execute.part.0+0x1c8>
 800fd3a:	e76d      	b.n	800fc18 <_rclc_execute.part.0+0xc8>
 800fd3c:	6860      	ldr	r0, [r4, #4]
 800fd3e:	f880 5020 	strb.w	r5, [r0, #32]
 800fd42:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f43f af66 	beq.w	800fc18 <_rclc_execute.part.0+0xc8>
 800fd4c:	68c5      	ldr	r5, [r0, #12]
 800fd4e:	b1b5      	cbz	r5, 800fd7e <_rclc_execute.part.0+0x22e>
 800fd50:	2602      	movs	r6, #2
 800fd52:	e001      	b.n	800fd58 <_rclc_execute.part.0+0x208>
 800fd54:	682d      	ldr	r5, [r5, #0]
 800fd56:	b195      	cbz	r5, 800fd7e <_rclc_execute.part.0+0x22e>
 800fd58:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d1f9      	bne.n	800fd54 <_rclc_execute.part.0+0x204>
 800fd60:	69c3      	ldr	r3, [r0, #28]
 800fd62:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fd64:	4628      	mov	r0, r5
 800fd66:	4798      	blx	r3
 800fd68:	4603      	mov	r3, r0
 800fd6a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800fd6e:	4628      	mov	r0, r5
 800fd70:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800fd74:	b163      	cbz	r3, 800fd90 <_rclc_execute.part.0+0x240>
 800fd76:	f009 f8e3 	bl	8018f40 <rclc_action_server_goal_cancel_accept>
 800fd7a:	6860      	ldr	r0, [r4, #4]
 800fd7c:	e7ea      	b.n	800fd54 <_rclc_execute.part.0+0x204>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800fd84:	4618      	mov	r0, r3
 800fd86:	e739      	b.n	800fbfc <_rclc_execute.part.0+0xac>
 800fd88:	4628      	mov	r0, r5
 800fd8a:	4798      	blx	r3
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	e735      	b.n	800fbfc <_rclc_execute.part.0+0xac>
 800fd90:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800fd92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fd96:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800fd9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd9e:	6860      	ldr	r0, [r4, #4]
 800fda0:	2101      	movs	r1, #1
 800fda2:	f009 f8f9 	bl	8018f98 <rclc_action_server_goal_cancel_reject>
 800fda6:	722e      	strb	r6, [r5, #8]
 800fda8:	6860      	ldr	r0, [r4, #4]
 800fdaa:	e7d3      	b.n	800fd54 <_rclc_execute.part.0+0x204>
 800fdac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800fdae:	6880      	ldr	r0, [r0, #8]
 800fdb0:	4798      	blx	r3
 800fdb2:	f104 0110 	add.w	r1, r4, #16
 800fdb6:	e6e7      	b.n	800fb88 <_rclc_execute.part.0+0x38>
 800fdb8:	f100 0110 	add.w	r1, r0, #16
 800fdbc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800fdbe:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800fdc0:	6880      	ldr	r0, [r0, #8]
 800fdc2:	9105      	str	r1, [sp, #20]
 800fdc4:	4798      	blx	r3
 800fdc6:	9905      	ldr	r1, [sp, #20]
 800fdc8:	e6de      	b.n	800fb88 <_rclc_execute.part.0+0x38>
 800fdca:	2001      	movs	r0, #1
 800fdcc:	e716      	b.n	800fbfc <_rclc_execute.part.0+0xac>
 800fdce:	bf00      	nop

0800fdd0 <rclc_executor_trigger_any>:
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d03f      	beq.n	800fe54 <rclc_executor_trigger_any+0x84>
 800fdd4:	2900      	cmp	r1, #0
 800fdd6:	d03e      	beq.n	800fe56 <rclc_executor_trigger_any+0x86>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800fdde:	2200      	movs	r2, #0
 800fde0:	2800      	cmp	r0, #0
 800fde2:	d037      	beq.n	800fe54 <rclc_executor_trigger_any+0x84>
 800fde4:	b430      	push	{r4, r5}
 800fde6:	f893 c000 	ldrb.w	ip, [r3]
 800fdea:	f1bc 0f08 	cmp.w	ip, #8
 800fdee:	d11e      	bne.n	800fe2e <rclc_executor_trigger_any+0x5e>
 800fdf0:	685c      	ldr	r4, [r3, #4]
 800fdf2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800fdf4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800fdf8:	d105      	bne.n	800fe06 <rclc_executor_trigger_any+0x36>
 800fdfa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800fdfe:	b910      	cbnz	r0, 800fe06 <rclc_executor_trigger_any+0x36>
 800fe00:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800fe04:	b128      	cbz	r0, 800fe12 <rclc_executor_trigger_any+0x42>
 800fe06:	bc30      	pop	{r4, r5}
 800fe08:	4770      	bx	lr
 800fe0a:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d1f9      	bne.n	800fe06 <rclc_executor_trigger_any+0x36>
 800fe12:	3201      	adds	r2, #1
 800fe14:	4291      	cmp	r1, r2
 800fe16:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fe1a:	d018      	beq.n	800fe4e <rclc_executor_trigger_any+0x7e>
 800fe1c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800fe20:	2800      	cmp	r0, #0
 800fe22:	d0f0      	beq.n	800fe06 <rclc_executor_trigger_any+0x36>
 800fe24:	f893 c000 	ldrb.w	ip, [r3]
 800fe28:	f1bc 0f08 	cmp.w	ip, #8
 800fe2c:	d0e0      	beq.n	800fdf0 <rclc_executor_trigger_any+0x20>
 800fe2e:	f1bc 0f09 	cmp.w	ip, #9
 800fe32:	d1ea      	bne.n	800fe0a <rclc_executor_trigger_any+0x3a>
 800fe34:	685c      	ldr	r4, [r3, #4]
 800fe36:	6a25      	ldr	r5, [r4, #32]
 800fe38:	2d00      	cmp	r5, #0
 800fe3a:	d1e4      	bne.n	800fe06 <rclc_executor_trigger_any+0x36>
 800fe3c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800fe40:	2800      	cmp	r0, #0
 800fe42:	d1e0      	bne.n	800fe06 <rclc_executor_trigger_any+0x36>
 800fe44:	3201      	adds	r2, #1
 800fe46:	4291      	cmp	r1, r2
 800fe48:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fe4c:	d1e6      	bne.n	800fe1c <rclc_executor_trigger_any+0x4c>
 800fe4e:	2000      	movs	r0, #0
 800fe50:	bc30      	pop	{r4, r5}
 800fe52:	4770      	bx	lr
 800fe54:	4770      	bx	lr
 800fe56:	4608      	mov	r0, r1
 800fe58:	4770      	bx	lr
 800fe5a:	bf00      	nop
 800fe5c:	0000      	movs	r0, r0
	...

0800fe60 <rclc_executor_init>:
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d05f      	beq.n	800ff24 <rclc_executor_init+0xc4>
 800fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe68:	460c      	mov	r4, r1
 800fe6a:	b0b0      	sub	sp, #192	@ 0xc0
 800fe6c:	2900      	cmp	r1, #0
 800fe6e:	d051      	beq.n	800ff14 <rclc_executor_init+0xb4>
 800fe70:	4605      	mov	r5, r0
 800fe72:	4618      	mov	r0, r3
 800fe74:	4616      	mov	r6, r2
 800fe76:	461f      	mov	r7, r3
 800fe78:	f000 fc8e 	bl	8010798 <rcutils_allocator_is_valid>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	d049      	beq.n	800ff14 <rclc_executor_init+0xb4>
 800fe80:	2e00      	cmp	r6, #0
 800fe82:	d047      	beq.n	800ff14 <rclc_executor_init+0xb4>
 800fe84:	492c      	ldr	r1, [pc, #176]	@ (800ff38 <rclc_executor_init+0xd8>)
 800fe86:	2288      	movs	r2, #136	@ 0x88
 800fe88:	a80e      	add	r0, sp, #56	@ 0x38
 800fe8a:	f00c fe20 	bl	801cace <memcpy>
 800fe8e:	a90e      	add	r1, sp, #56	@ 0x38
 800fe90:	2288      	movs	r2, #136	@ 0x88
 800fe92:	4628      	mov	r0, r5
 800fe94:	f00c fe1b 	bl	801cace <memcpy>
 800fe98:	602c      	str	r4, [r5, #0]
 800fe9a:	4668      	mov	r0, sp
 800fe9c:	60ae      	str	r6, [r5, #8]
 800fe9e:	466c      	mov	r4, sp
 800fea0:	f007 fd46 	bl	8017930 <rcl_get_zero_initialized_wait_set>
 800fea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fea6:	f105 0c14 	add.w	ip, r5, #20
 800feaa:	f8d7 8000 	ldr.w	r8, [r7]
 800feae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800feb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800feb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800feb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800feba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800febe:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800ff30 <rclc_executor_init+0xd0>
 800fec2:	6823      	ldr	r3, [r4, #0]
 800fec4:	f8cc 3000 	str.w	r3, [ip]
 800fec8:	6939      	ldr	r1, [r7, #16]
 800feca:	612f      	str	r7, [r5, #16]
 800fecc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800fed0:	01b0      	lsls	r0, r6, #6
 800fed2:	47c0      	blx	r8
 800fed4:	6068      	str	r0, [r5, #4]
 800fed6:	b338      	cbz	r0, 800ff28 <rclc_executor_init+0xc8>
 800fed8:	2400      	movs	r4, #0
 800feda:	e000      	b.n	800fede <rclc_executor_init+0x7e>
 800fedc:	6868      	ldr	r0, [r5, #4]
 800fede:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800fee2:	4631      	mov	r1, r6
 800fee4:	3401      	adds	r4, #1
 800fee6:	f000 facb 	bl	8010480 <rclc_executor_handle_init>
 800feea:	42a6      	cmp	r6, r4
 800feec:	d1f6      	bne.n	800fedc <rclc_executor_init+0x7c>
 800feee:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800fef2:	f000 fab9 	bl	8010468 <rclc_executor_handle_counters_zero_init>
 800fef6:	4a11      	ldr	r2, [pc, #68]	@ (800ff3c <rclc_executor_init+0xdc>)
 800fef8:	686b      	ldr	r3, [r5, #4]
 800fefa:	2000      	movs	r0, #0
 800fefc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800ff00:	b163      	cbz	r3, 800ff1c <rclc_executor_init+0xbc>
 800ff02:	692b      	ldr	r3, [r5, #16]
 800ff04:	b153      	cbz	r3, 800ff1c <rclc_executor_init+0xbc>
 800ff06:	68ab      	ldr	r3, [r5, #8]
 800ff08:	b143      	cbz	r3, 800ff1c <rclc_executor_init+0xbc>
 800ff0a:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800ff0e:	b030      	add	sp, #192	@ 0xc0
 800ff10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff14:	200b      	movs	r0, #11
 800ff16:	b030      	add	sp, #192	@ 0xc0
 800ff18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	b030      	add	sp, #192	@ 0xc0
 800ff20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff24:	200b      	movs	r0, #11
 800ff26:	4770      	bx	lr
 800ff28:	200a      	movs	r0, #10
 800ff2a:	e7f4      	b.n	800ff16 <rclc_executor_init+0xb6>
 800ff2c:	f3af 8000 	nop.w
 800ff30:	3b9aca00 	.word	0x3b9aca00
 800ff34:	00000000 	.word	0x00000000
 800ff38:	0801e2b8 	.word	0x0801e2b8
 800ff3c:	0800fdd1 	.word	0x0800fdd1

0800ff40 <rclc_executor_fini>:
 800ff40:	b308      	cbz	r0, 800ff86 <rclc_executor_fini+0x46>
 800ff42:	b538      	push	{r3, r4, r5, lr}
 800ff44:	4604      	mov	r4, r0
 800ff46:	6840      	ldr	r0, [r0, #4]
 800ff48:	b1d8      	cbz	r0, 800ff82 <rclc_executor_fini+0x42>
 800ff4a:	6923      	ldr	r3, [r4, #16]
 800ff4c:	b1cb      	cbz	r3, 800ff82 <rclc_executor_fini+0x42>
 800ff4e:	68a2      	ldr	r2, [r4, #8]
 800ff50:	b1ba      	cbz	r2, 800ff82 <rclc_executor_fini+0x42>
 800ff52:	6919      	ldr	r1, [r3, #16]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	4798      	blx	r3
 800ff58:	2300      	movs	r3, #0
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ff62:	6063      	str	r3, [r4, #4]
 800ff64:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800ff68:	f104 0514 	add.w	r5, r4, #20
 800ff6c:	f000 fa7c 	bl	8010468 <rclc_executor_handle_counters_zero_init>
 800ff70:	4628      	mov	r0, r5
 800ff72:	f007 fcf1 	bl	8017958 <rcl_wait_set_is_valid>
 800ff76:	b940      	cbnz	r0, 800ff8a <rclc_executor_fini+0x4a>
 800ff78:	a309      	add	r3, pc, #36	@ (adr r3, 800ffa0 <rclc_executor_fini+0x60>)
 800ff7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800ff82:	2000      	movs	r0, #0
 800ff84:	bd38      	pop	{r3, r4, r5, pc}
 800ff86:	2000      	movs	r0, #0
 800ff88:	4770      	bx	lr
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	f007 fcea 	bl	8017964 <rcl_wait_set_fini>
 800ff90:	2800      	cmp	r0, #0
 800ff92:	d0f1      	beq.n	800ff78 <rclc_executor_fini+0x38>
 800ff94:	f000 fce0 	bl	8010958 <rcutils_reset_error>
 800ff98:	e7ee      	b.n	800ff78 <rclc_executor_fini+0x38>
 800ff9a:	bf00      	nop
 800ff9c:	f3af 8000 	nop.w
 800ffa0:	3b9aca00 	.word	0x3b9aca00
 800ffa4:	00000000 	.word	0x00000000

0800ffa8 <rclc_executor_add_subscription>:
 800ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffaa:	f89d e018 	ldrb.w	lr, [sp, #24]
 800ffae:	b338      	cbz	r0, 8010000 <rclc_executor_add_subscription+0x58>
 800ffb0:	b331      	cbz	r1, 8010000 <rclc_executor_add_subscription+0x58>
 800ffb2:	b32a      	cbz	r2, 8010000 <rclc_executor_add_subscription+0x58>
 800ffb4:	b323      	cbz	r3, 8010000 <rclc_executor_add_subscription+0x58>
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800ffbc:	42a8      	cmp	r0, r5
 800ffbe:	d301      	bcc.n	800ffc4 <rclc_executor_add_subscription+0x1c>
 800ffc0:	2001      	movs	r0, #1
 800ffc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffc4:	6866      	ldr	r6, [r4, #4]
 800ffc6:	0187      	lsls	r7, r0, #6
 800ffc8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800ffcc:	2500      	movs	r5, #0
 800ffce:	55f5      	strb	r5, [r6, r7]
 800ffd0:	3001      	adds	r0, #1
 800ffd2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800ffd6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800ffda:	2301      	movs	r3, #1
 800ffdc:	f104 0514 	add.w	r5, r4, #20
 800ffe0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800ffe4:	f88c e001 	strb.w	lr, [ip, #1]
 800ffe8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800ffec:	60e0      	str	r0, [r4, #12]
 800ffee:	4628      	mov	r0, r5
 800fff0:	f007 fcb2 	bl	8017958 <rcl_wait_set_is_valid>
 800fff4:	b930      	cbnz	r0, 8010004 <rclc_executor_add_subscription+0x5c>
 800fff6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800fff8:	3301      	adds	r3, #1
 800fffa:	2000      	movs	r0, #0
 800fffc:	64a3      	str	r3, [r4, #72]	@ 0x48
 800fffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010000:	200b      	movs	r0, #11
 8010002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010004:	4628      	mov	r0, r5
 8010006:	f007 fcad 	bl	8017964 <rcl_wait_set_fini>
 801000a:	2800      	cmp	r0, #0
 801000c:	d0f3      	beq.n	800fff6 <rclc_executor_add_subscription+0x4e>
 801000e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010010 <rclc_executor_add_timer>:
 8010010:	b300      	cbz	r0, 8010054 <rclc_executor_add_timer+0x44>
 8010012:	b1f9      	cbz	r1, 8010054 <rclc_executor_add_timer+0x44>
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 801001a:	4293      	cmp	r3, r2
 801001c:	4604      	mov	r4, r0
 801001e:	d301      	bcc.n	8010024 <rclc_executor_add_timer+0x14>
 8010020:	2001      	movs	r0, #1
 8010022:	bd38      	pop	{r3, r4, r5, pc}
 8010024:	6840      	ldr	r0, [r0, #4]
 8010026:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 801002a:	019d      	lsls	r5, r3, #6
 801002c:	6051      	str	r1, [r2, #4]
 801002e:	2102      	movs	r1, #2
 8010030:	5341      	strh	r1, [r0, r5]
 8010032:	3301      	adds	r3, #1
 8010034:	2000      	movs	r0, #0
 8010036:	2101      	movs	r1, #1
 8010038:	f104 0514 	add.w	r5, r4, #20
 801003c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 801003e:	8711      	strh	r1, [r2, #56]	@ 0x38
 8010040:	4628      	mov	r0, r5
 8010042:	60e3      	str	r3, [r4, #12]
 8010044:	f007 fc88 	bl	8017958 <rcl_wait_set_is_valid>
 8010048:	b930      	cbnz	r0, 8010058 <rclc_executor_add_timer+0x48>
 801004a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801004c:	3301      	adds	r3, #1
 801004e:	2000      	movs	r0, #0
 8010050:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	200b      	movs	r0, #11
 8010056:	4770      	bx	lr
 8010058:	4628      	mov	r0, r5
 801005a:	f007 fc83 	bl	8017964 <rcl_wait_set_fini>
 801005e:	2800      	cmp	r0, #0
 8010060:	d0f3      	beq.n	801004a <rclc_executor_add_timer+0x3a>
 8010062:	bd38      	pop	{r3, r4, r5, pc}

08010064 <rclc_executor_prepare>:
 8010064:	2800      	cmp	r0, #0
 8010066:	d044      	beq.n	80100f2 <rclc_executor_prepare+0x8e>
 8010068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006a:	f100 0514 	add.w	r5, r0, #20
 801006e:	b09b      	sub	sp, #108	@ 0x6c
 8010070:	4604      	mov	r4, r0
 8010072:	4628      	mov	r0, r5
 8010074:	f007 fc70 	bl	8017958 <rcl_wait_set_is_valid>
 8010078:	b110      	cbz	r0, 8010080 <rclc_executor_prepare+0x1c>
 801007a:	2000      	movs	r0, #0
 801007c:	b01b      	add	sp, #108	@ 0x6c
 801007e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010080:	4628      	mov	r0, r5
 8010082:	f007 fc6f 	bl	8017964 <rcl_wait_set_fini>
 8010086:	2800      	cmp	r0, #0
 8010088:	d130      	bne.n	80100ec <rclc_executor_prepare+0x88>
 801008a:	a80c      	add	r0, sp, #48	@ 0x30
 801008c:	f007 fc50 	bl	8017930 <rcl_get_zero_initialized_wait_set>
 8010090:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8010094:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010098:	46ae      	mov	lr, r5
 801009a:	6927      	ldr	r7, [r4, #16]
 801009c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80100b0:	f8dc 3000 	ldr.w	r3, [ip]
 80100b4:	f8ce 3000 	str.w	r3, [lr]
 80100b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80100ba:	ae04      	add	r6, sp, #16
 80100bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	6822      	ldr	r2, [r4, #0]
 80100c2:	6033      	str	r3, [r6, #0]
 80100c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80100c6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80100c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80100cc:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 80100d0:	e9cd 2100 	strd	r2, r1, [sp]
 80100d4:	4628      	mov	r0, r5
 80100d6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80100d8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80100da:	f007 ff41 	bl	8017f60 <rcl_wait_set_init>
 80100de:	2800      	cmp	r0, #0
 80100e0:	d0cc      	beq.n	801007c <rclc_executor_prepare+0x18>
 80100e2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80100e4:	f000 fc38 	bl	8010958 <rcutils_reset_error>
 80100e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80100ea:	e7c7      	b.n	801007c <rclc_executor_prepare+0x18>
 80100ec:	f000 fc34 	bl	8010958 <rcutils_reset_error>
 80100f0:	e7cb      	b.n	801008a <rclc_executor_prepare+0x26>
 80100f2:	200b      	movs	r0, #11
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop

080100f8 <rclc_executor_spin_some.part.0>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	f100 0614 	add.w	r6, r0, #20
 8010100:	b083      	sub	sp, #12
 8010102:	4691      	mov	r9, r2
 8010104:	4698      	mov	r8, r3
 8010106:	4605      	mov	r5, r0
 8010108:	f7ff ffac 	bl	8010064 <rclc_executor_prepare>
 801010c:	4630      	mov	r0, r6
 801010e:	f007 fcf5 	bl	8017afc <rcl_wait_set_clear>
 8010112:	4607      	mov	r7, r0
 8010114:	2800      	cmp	r0, #0
 8010116:	f040 80ed 	bne.w	80102f4 <rclc_executor_spin_some.part.0+0x1fc>
 801011a:	68ab      	ldr	r3, [r5, #8]
 801011c:	4604      	mov	r4, r0
 801011e:	b303      	cbz	r3, 8010162 <rclc_executor_spin_some.part.0+0x6a>
 8010120:	6869      	ldr	r1, [r5, #4]
 8010122:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8010126:	01a2      	lsls	r2, r4, #6
 8010128:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 801012c:	b1cb      	cbz	r3, 8010162 <rclc_executor_spin_some.part.0+0x6a>
 801012e:	5c8b      	ldrb	r3, [r1, r2]
 8010130:	2b0a      	cmp	r3, #10
 8010132:	f200 80d8 	bhi.w	80102e6 <rclc_executor_spin_some.part.0+0x1ee>
 8010136:	e8df f003 	tbb	[pc, r3]
 801013a:	9c9c      	.short	0x9c9c
 801013c:	068c8ca7 	.word	0x068c8ca7
 8010140:	bdc90606 	.word	0xbdc90606
 8010144:	b2          	.byte	0xb2
 8010145:	00          	.byte	0x00
 8010146:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801014a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801014e:	4630      	mov	r0, r6
 8010150:	f008 f81c 	bl	801818c <rcl_wait_set_add_service>
 8010154:	2800      	cmp	r0, #0
 8010156:	f040 8086 	bne.w	8010266 <rclc_executor_spin_some.part.0+0x16e>
 801015a:	68ab      	ldr	r3, [r5, #8]
 801015c:	3401      	adds	r4, #1
 801015e:	429c      	cmp	r4, r3
 8010160:	d3de      	bcc.n	8010120 <rclc_executor_spin_some.part.0+0x28>
 8010162:	4643      	mov	r3, r8
 8010164:	464a      	mov	r2, r9
 8010166:	4630      	mov	r0, r6
 8010168:	f008 f83e 	bl	80181e8 <rcl_wait>
 801016c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 80c7 	beq.w	8010304 <rclc_executor_spin_some.part.0+0x20c>
 8010176:	2b01      	cmp	r3, #1
 8010178:	f040 80b5 	bne.w	80102e6 <rclc_executor_spin_some.part.0+0x1ee>
 801017c:	68ab      	ldr	r3, [r5, #8]
 801017e:	2b00      	cmp	r3, #0
 8010180:	f000 8159 	beq.w	8010436 <rclc_executor_spin_some.part.0+0x33e>
 8010184:	2400      	movs	r4, #0
 8010186:	46a0      	mov	r8, r4
 8010188:	f240 1991 	movw	r9, #401	@ 0x191
 801018c:	e00a      	b.n	80101a4 <rclc_executor_spin_some.part.0+0xac>
 801018e:	f7ff fb1d 	bl	800f7cc <_rclc_check_for_new_data>
 8010192:	4604      	mov	r4, r0
 8010194:	b110      	cbz	r0, 801019c <rclc_executor_spin_some.part.0+0xa4>
 8010196:	4548      	cmp	r0, r9
 8010198:	f040 80b2 	bne.w	8010300 <rclc_executor_spin_some.part.0+0x208>
 801019c:	68ab      	ldr	r3, [r5, #8]
 801019e:	4598      	cmp	r8, r3
 80101a0:	f080 8126 	bcs.w	80103f0 <rclc_executor_spin_some.part.0+0x2f8>
 80101a4:	686a      	ldr	r2, [r5, #4]
 80101a6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80101aa:	4631      	mov	r1, r6
 80101ac:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 80101b0:	f108 0801 	add.w	r8, r8, #1
 80101b4:	f1bc 0f00 	cmp.w	ip, #0
 80101b8:	d1e9      	bne.n	801018e <rclc_executor_spin_some.part.0+0x96>
 80101ba:	4619      	mov	r1, r3
 80101bc:	4610      	mov	r0, r2
 80101be:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 80101c2:	4798      	blx	r3
 80101c4:	2800      	cmp	r0, #0
 80101c6:	f000 809b 	beq.w	8010300 <rclc_executor_spin_some.part.0+0x208>
 80101ca:	68ab      	ldr	r3, [r5, #8]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f000 8097 	beq.w	8010300 <rclc_executor_spin_some.part.0+0x208>
 80101d2:	f04f 0800 	mov.w	r8, #0
 80101d6:	f240 1991 	movw	r9, #401	@ 0x191
 80101da:	e009      	b.n	80101f0 <rclc_executor_spin_some.part.0+0xf8>
 80101dc:	f7ff fb44 	bl	800f868 <_rclc_take_new_data>
 80101e0:	4604      	mov	r4, r0
 80101e2:	b110      	cbz	r0, 80101ea <rclc_executor_spin_some.part.0+0xf2>
 80101e4:	4548      	cmp	r0, r9
 80101e6:	f040 808b 	bne.w	8010300 <rclc_executor_spin_some.part.0+0x208>
 80101ea:	68ab      	ldr	r3, [r5, #8]
 80101ec:	4598      	cmp	r8, r3
 80101ee:	d209      	bcs.n	8010204 <rclc_executor_spin_some.part.0+0x10c>
 80101f0:	6868      	ldr	r0, [r5, #4]
 80101f2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80101f6:	4631      	mov	r1, r6
 80101f8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 80101fc:	f108 0801 	add.w	r8, r8, #1
 8010200:	2a00      	cmp	r2, #0
 8010202:	d1eb      	bne.n	80101dc <rclc_executor_spin_some.part.0+0xe4>
 8010204:	2600      	movs	r6, #0
 8010206:	b97b      	cbnz	r3, 8010228 <rclc_executor_spin_some.part.0+0x130>
 8010208:	e07a      	b.n	8010300 <rclc_executor_spin_some.part.0+0x208>
 801020a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801020e:	2a08      	cmp	r2, #8
 8010210:	f000 80fd 	beq.w	801040e <rclc_executor_spin_some.part.0+0x316>
 8010214:	2a09      	cmp	r2, #9
 8010216:	f000 80ef 	beq.w	80103f8 <rclc_executor_spin_some.part.0+0x300>
 801021a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801021e:	b98a      	cbnz	r2, 8010244 <rclc_executor_spin_some.part.0+0x14c>
 8010220:	3601      	adds	r6, #1
 8010222:	429e      	cmp	r6, r3
 8010224:	d262      	bcs.n	80102ec <rclc_executor_spin_some.part.0+0x1f4>
 8010226:	2400      	movs	r4, #0
 8010228:	686a      	ldr	r2, [r5, #4]
 801022a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801022e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8010232:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8010236:	2900      	cmp	r1, #0
 8010238:	d062      	beq.n	8010300 <rclc_executor_spin_some.part.0+0x208>
 801023a:	7841      	ldrb	r1, [r0, #1]
 801023c:	2900      	cmp	r1, #0
 801023e:	d0e4      	beq.n	801020a <rclc_executor_spin_some.part.0+0x112>
 8010240:	2901      	cmp	r1, #1
 8010242:	d1ed      	bne.n	8010220 <rclc_executor_spin_some.part.0+0x128>
 8010244:	f7ff fc84 	bl	800fb50 <_rclc_execute.part.0>
 8010248:	2800      	cmp	r0, #0
 801024a:	f040 80b6 	bne.w	80103ba <rclc_executor_spin_some.part.0+0x2c2>
 801024e:	68ab      	ldr	r3, [r5, #8]
 8010250:	e7e6      	b.n	8010220 <rclc_executor_spin_some.part.0+0x128>
 8010252:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010256:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801025a:	4630      	mov	r0, r6
 801025c:	f007 ff6a 	bl	8018134 <rcl_wait_set_add_client>
 8010260:	2800      	cmp	r0, #0
 8010262:	f43f af7a 	beq.w	801015a <rclc_executor_spin_some.part.0+0x62>
 8010266:	9001      	str	r0, [sp, #4]
 8010268:	f000 fb76 	bl	8010958 <rcutils_reset_error>
 801026c:	9801      	ldr	r0, [sp, #4]
 801026e:	4607      	mov	r7, r0
 8010270:	e03c      	b.n	80102ec <rclc_executor_spin_some.part.0+0x1f4>
 8010272:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010276:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801027a:	4630      	mov	r0, r6
 801027c:	f007 fc12 	bl	8017aa4 <rcl_wait_set_add_subscription>
 8010280:	2800      	cmp	r0, #0
 8010282:	f43f af6a 	beq.w	801015a <rclc_executor_spin_some.part.0+0x62>
 8010286:	e7ee      	b.n	8010266 <rclc_executor_spin_some.part.0+0x16e>
 8010288:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801028c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8010290:	4630      	mov	r0, r6
 8010292:	f007 ff1f 	bl	80180d4 <rcl_wait_set_add_timer>
 8010296:	2800      	cmp	r0, #0
 8010298:	f43f af5f 	beq.w	801015a <rclc_executor_spin_some.part.0+0x62>
 801029c:	e7e3      	b.n	8010266 <rclc_executor_spin_some.part.0+0x16e>
 801029e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102a2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102a6:	4630      	mov	r0, r6
 80102a8:	f007 fee8 	bl	801807c <rcl_wait_set_add_guard_condition>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	f43f af54 	beq.w	801015a <rclc_executor_spin_some.part.0+0x62>
 80102b2:	e7d8      	b.n	8010266 <rclc_executor_spin_some.part.0+0x16e>
 80102b4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102b8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102bc:	3110      	adds	r1, #16
 80102be:	4630      	mov	r0, r6
 80102c0:	f008 fc6a 	bl	8018b98 <rcl_action_wait_set_add_action_server>
 80102c4:	2800      	cmp	r0, #0
 80102c6:	f43f af48 	beq.w	801015a <rclc_executor_spin_some.part.0+0x62>
 80102ca:	e7cc      	b.n	8010266 <rclc_executor_spin_some.part.0+0x16e>
 80102cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80102d0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80102d4:	3110      	adds	r1, #16
 80102d6:	2300      	movs	r3, #0
 80102d8:	4630      	mov	r0, r6
 80102da:	f008 fa35 	bl	8018748 <rcl_action_wait_set_add_action_client>
 80102de:	2800      	cmp	r0, #0
 80102e0:	f43f af3b 	beq.w	801015a <rclc_executor_spin_some.part.0+0x62>
 80102e4:	e7bf      	b.n	8010266 <rclc_executor_spin_some.part.0+0x16e>
 80102e6:	f000 fb37 	bl	8010958 <rcutils_reset_error>
 80102ea:	2701      	movs	r7, #1
 80102ec:	4638      	mov	r0, r7
 80102ee:	b003      	add	sp, #12
 80102f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f4:	f000 fb30 	bl	8010958 <rcutils_reset_error>
 80102f8:	4638      	mov	r0, r7
 80102fa:	b003      	add	sp, #12
 80102fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010300:	4627      	mov	r7, r4
 8010302:	e7f3      	b.n	80102ec <rclc_executor_spin_some.part.0+0x1f4>
 8010304:	68ab      	ldr	r3, [r5, #8]
 8010306:	2b00      	cmp	r3, #0
 8010308:	f000 8092 	beq.w	8010430 <rclc_executor_spin_some.part.0+0x338>
 801030c:	2400      	movs	r4, #0
 801030e:	46a0      	mov	r8, r4
 8010310:	f240 1991 	movw	r9, #401	@ 0x191
 8010314:	e008      	b.n	8010328 <rclc_executor_spin_some.part.0+0x230>
 8010316:	f7ff fa59 	bl	800f7cc <_rclc_check_for_new_data>
 801031a:	4604      	mov	r4, r0
 801031c:	b108      	cbz	r0, 8010322 <rclc_executor_spin_some.part.0+0x22a>
 801031e:	4548      	cmp	r0, r9
 8010320:	d1ee      	bne.n	8010300 <rclc_executor_spin_some.part.0+0x208>
 8010322:	68ab      	ldr	r3, [r5, #8]
 8010324:	4598      	cmp	r8, r3
 8010326:	d265      	bcs.n	80103f4 <rclc_executor_spin_some.part.0+0x2fc>
 8010328:	686a      	ldr	r2, [r5, #4]
 801032a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801032e:	4631      	mov	r1, r6
 8010330:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8010334:	f108 0801 	add.w	r8, r8, #1
 8010338:	f1bc 0f00 	cmp.w	ip, #0
 801033c:	d1eb      	bne.n	8010316 <rclc_executor_spin_some.part.0+0x21e>
 801033e:	4619      	mov	r1, r3
 8010340:	4610      	mov	r0, r2
 8010342:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8010346:	4798      	blx	r3
 8010348:	2800      	cmp	r0, #0
 801034a:	d0d9      	beq.n	8010300 <rclc_executor_spin_some.part.0+0x208>
 801034c:	68ab      	ldr	r3, [r5, #8]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d0d6      	beq.n	8010300 <rclc_executor_spin_some.part.0+0x208>
 8010352:	f04f 0800 	mov.w	r8, #0
 8010356:	f240 1991 	movw	r9, #401	@ 0x191
 801035a:	f240 2a59 	movw	sl, #601	@ 0x259
 801035e:	e00e      	b.n	801037e <rclc_executor_spin_some.part.0+0x286>
 8010360:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010364:	2b08      	cmp	r3, #8
 8010366:	d033      	beq.n	80103d0 <rclc_executor_spin_some.part.0+0x2d8>
 8010368:	2b09      	cmp	r3, #9
 801036a:	d028      	beq.n	80103be <rclc_executor_spin_some.part.0+0x2c6>
 801036c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8010370:	b9fb      	cbnz	r3, 80103b2 <rclc_executor_spin_some.part.0+0x2ba>
 8010372:	68ab      	ldr	r3, [r5, #8]
 8010374:	f108 0801 	add.w	r8, r8, #1
 8010378:	4598      	cmp	r8, r3
 801037a:	d2b7      	bcs.n	80102ec <rclc_executor_spin_some.part.0+0x1f4>
 801037c:	2400      	movs	r4, #0
 801037e:	6868      	ldr	r0, [r5, #4]
 8010380:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010384:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8010388:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 801038c:	2b00      	cmp	r3, #0
 801038e:	d0b7      	beq.n	8010300 <rclc_executor_spin_some.part.0+0x208>
 8010390:	4631      	mov	r1, r6
 8010392:	f7ff fa69 	bl	800f868 <_rclc_take_new_data>
 8010396:	b118      	cbz	r0, 80103a0 <rclc_executor_spin_some.part.0+0x2a8>
 8010398:	4548      	cmp	r0, r9
 801039a:	d001      	beq.n	80103a0 <rclc_executor_spin_some.part.0+0x2a8>
 801039c:	4550      	cmp	r0, sl
 801039e:	d10c      	bne.n	80103ba <rclc_executor_spin_some.part.0+0x2c2>
 80103a0:	686b      	ldr	r3, [r5, #4]
 80103a2:	eb13 000b 	adds.w	r0, r3, fp
 80103a6:	d021      	beq.n	80103ec <rclc_executor_spin_some.part.0+0x2f4>
 80103a8:	7842      	ldrb	r2, [r0, #1]
 80103aa:	2a00      	cmp	r2, #0
 80103ac:	d0d8      	beq.n	8010360 <rclc_executor_spin_some.part.0+0x268>
 80103ae:	2a01      	cmp	r2, #1
 80103b0:	d1df      	bne.n	8010372 <rclc_executor_spin_some.part.0+0x27a>
 80103b2:	f7ff fbcd 	bl	800fb50 <_rclc_execute.part.0>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d0db      	beq.n	8010372 <rclc_executor_spin_some.part.0+0x27a>
 80103ba:	4607      	mov	r7, r0
 80103bc:	e796      	b.n	80102ec <rclc_executor_spin_some.part.0+0x1f4>
 80103be:	6843      	ldr	r3, [r0, #4]
 80103c0:	6a1a      	ldr	r2, [r3, #32]
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	d1f5      	bne.n	80103b2 <rclc_executor_spin_some.part.0+0x2ba>
 80103c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d0d1      	beq.n	8010372 <rclc_executor_spin_some.part.0+0x27a>
 80103ce:	e7f0      	b.n	80103b2 <rclc_executor_spin_some.part.0+0x2ba>
 80103d0:	6843      	ldr	r3, [r0, #4]
 80103d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80103d4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80103d8:	d1eb      	bne.n	80103b2 <rclc_executor_spin_some.part.0+0x2ba>
 80103da:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80103de:	2a00      	cmp	r2, #0
 80103e0:	d1e7      	bne.n	80103b2 <rclc_executor_spin_some.part.0+0x2ba>
 80103e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d0c3      	beq.n	8010372 <rclc_executor_spin_some.part.0+0x27a>
 80103ea:	e7e2      	b.n	80103b2 <rclc_executor_spin_some.part.0+0x2ba>
 80103ec:	270b      	movs	r7, #11
 80103ee:	e77d      	b.n	80102ec <rclc_executor_spin_some.part.0+0x1f4>
 80103f0:	686a      	ldr	r2, [r5, #4]
 80103f2:	e6e2      	b.n	80101ba <rclc_executor_spin_some.part.0+0xc2>
 80103f4:	686a      	ldr	r2, [r5, #4]
 80103f6:	e7a2      	b.n	801033e <rclc_executor_spin_some.part.0+0x246>
 80103f8:	6842      	ldr	r2, [r0, #4]
 80103fa:	6a11      	ldr	r1, [r2, #32]
 80103fc:	2900      	cmp	r1, #0
 80103fe:	f47f af21 	bne.w	8010244 <rclc_executor_spin_some.part.0+0x14c>
 8010402:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8010406:	2a00      	cmp	r2, #0
 8010408:	f43f af0a 	beq.w	8010220 <rclc_executor_spin_some.part.0+0x128>
 801040c:	e71a      	b.n	8010244 <rclc_executor_spin_some.part.0+0x14c>
 801040e:	6842      	ldr	r2, [r0, #4]
 8010410:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8010412:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8010416:	f47f af15 	bne.w	8010244 <rclc_executor_spin_some.part.0+0x14c>
 801041a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801041e:	2900      	cmp	r1, #0
 8010420:	f47f af10 	bne.w	8010244 <rclc_executor_spin_some.part.0+0x14c>
 8010424:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8010428:	2a00      	cmp	r2, #0
 801042a:	f43f aef9 	beq.w	8010220 <rclc_executor_spin_some.part.0+0x128>
 801042e:	e709      	b.n	8010244 <rclc_executor_spin_some.part.0+0x14c>
 8010430:	686a      	ldr	r2, [r5, #4]
 8010432:	461c      	mov	r4, r3
 8010434:	e783      	b.n	801033e <rclc_executor_spin_some.part.0+0x246>
 8010436:	686a      	ldr	r2, [r5, #4]
 8010438:	461c      	mov	r4, r3
 801043a:	e6be      	b.n	80101ba <rclc_executor_spin_some.part.0+0xc2>

0801043c <rclc_executor_spin_some>:
 801043c:	b190      	cbz	r0, 8010464 <rclc_executor_spin_some+0x28>
 801043e:	b570      	push	{r4, r5, r6, lr}
 8010440:	4604      	mov	r4, r0
 8010442:	6800      	ldr	r0, [r0, #0]
 8010444:	4616      	mov	r6, r2
 8010446:	461d      	mov	r5, r3
 8010448:	f7fe f910 	bl	800e66c <rcl_context_is_valid>
 801044c:	b130      	cbz	r0, 801045c <rclc_executor_spin_some+0x20>
 801044e:	4632      	mov	r2, r6
 8010450:	462b      	mov	r3, r5
 8010452:	4620      	mov	r0, r4
 8010454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010458:	f7ff be4e 	b.w	80100f8 <rclc_executor_spin_some.part.0>
 801045c:	f000 fa7c 	bl	8010958 <rcutils_reset_error>
 8010460:	2001      	movs	r0, #1
 8010462:	bd70      	pop	{r4, r5, r6, pc}
 8010464:	200b      	movs	r0, #11
 8010466:	4770      	bx	lr

08010468 <rclc_executor_handle_counters_zero_init>:
 8010468:	b130      	cbz	r0, 8010478 <rclc_executor_handle_counters_zero_init+0x10>
 801046a:	b508      	push	{r3, lr}
 801046c:	2220      	movs	r2, #32
 801046e:	2100      	movs	r1, #0
 8010470:	f00c fa64 	bl	801c93c <memset>
 8010474:	2000      	movs	r0, #0
 8010476:	bd08      	pop	{r3, pc}
 8010478:	200b      	movs	r0, #11
 801047a:	4770      	bx	lr
 801047c:	0000      	movs	r0, r0
	...

08010480 <rclc_executor_handle_init>:
 8010480:	b168      	cbz	r0, 801049e <rclc_executor_handle_init+0x1e>
 8010482:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80104a8 <rclc_executor_handle_init+0x28>
 8010486:	2300      	movs	r3, #0
 8010488:	220b      	movs	r2, #11
 801048a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 801048e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010492:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8010496:	8002      	strh	r2, [r0, #0]
 8010498:	8703      	strh	r3, [r0, #56]	@ 0x38
 801049a:	4618      	mov	r0, r3
 801049c:	4770      	bx	lr
 801049e:	200b      	movs	r0, #11
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop
 80104a4:	f3af 8000 	nop.w
	...

080104b0 <rclc_support_init_with_options>:
 80104b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104b4:	b083      	sub	sp, #12
 80104b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80104b8:	b340      	cbz	r0, 801050c <rclc_support_init_with_options+0x5c>
 80104ba:	461d      	mov	r5, r3
 80104bc:	b333      	cbz	r3, 801050c <rclc_support_init_with_options+0x5c>
 80104be:	b32e      	cbz	r6, 801050c <rclc_support_init_with_options+0x5c>
 80104c0:	46e9      	mov	r9, sp
 80104c2:	4604      	mov	r4, r0
 80104c4:	4648      	mov	r0, r9
 80104c6:	460f      	mov	r7, r1
 80104c8:	4690      	mov	r8, r2
 80104ca:	f7fe f8c5 	bl	800e658 <rcl_get_zero_initialized_context>
 80104ce:	e899 0003 	ldmia.w	r9, {r0, r1}
 80104d2:	462a      	mov	r2, r5
 80104d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80104d8:	4623      	mov	r3, r4
 80104da:	4641      	mov	r1, r8
 80104dc:	4638      	mov	r0, r7
 80104de:	f006 fe5b 	bl	8017198 <rcl_init>
 80104e2:	4605      	mov	r5, r0
 80104e4:	b960      	cbnz	r0, 8010500 <rclc_support_init_with_options+0x50>
 80104e6:	60a6      	str	r6, [r4, #8]
 80104e8:	4632      	mov	r2, r6
 80104ea:	f104 010c 	add.w	r1, r4, #12
 80104ee:	2003      	movs	r0, #3
 80104f0:	f007 f8a8 	bl	8017644 <rcl_clock_init>
 80104f4:	4605      	mov	r5, r0
 80104f6:	b918      	cbnz	r0, 8010500 <rclc_support_init_with_options+0x50>
 80104f8:	4628      	mov	r0, r5
 80104fa:	b003      	add	sp, #12
 80104fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010500:	f000 fa2a 	bl	8010958 <rcutils_reset_error>
 8010504:	4628      	mov	r0, r5
 8010506:	b003      	add	sp, #12
 8010508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801050c:	250b      	movs	r5, #11
 801050e:	4628      	mov	r0, r5
 8010510:	b003      	add	sp, #12
 8010512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010516:	bf00      	nop

08010518 <rclc_support_fini>:
 8010518:	b538      	push	{r3, r4, r5, lr}
 801051a:	b320      	cbz	r0, 8010566 <rclc_support_fini+0x4e>
 801051c:	4604      	mov	r4, r0
 801051e:	300c      	adds	r0, #12
 8010520:	f007 f908 	bl	8017734 <rcl_clock_fini>
 8010524:	4605      	mov	r5, r0
 8010526:	b948      	cbnz	r0, 801053c <rclc_support_fini+0x24>
 8010528:	4620      	mov	r0, r4
 801052a:	f006 ff23 	bl	8017374 <rcl_shutdown>
 801052e:	b968      	cbnz	r0, 801054c <rclc_support_fini+0x34>
 8010530:	4620      	mov	r0, r4
 8010532:	f7fe f907 	bl	800e744 <rcl_context_fini>
 8010536:	b988      	cbnz	r0, 801055c <rclc_support_fini+0x44>
 8010538:	4628      	mov	r0, r5
 801053a:	bd38      	pop	{r3, r4, r5, pc}
 801053c:	f000 fa0c 	bl	8010958 <rcutils_reset_error>
 8010540:	4620      	mov	r0, r4
 8010542:	2501      	movs	r5, #1
 8010544:	f006 ff16 	bl	8017374 <rcl_shutdown>
 8010548:	2800      	cmp	r0, #0
 801054a:	d0f1      	beq.n	8010530 <rclc_support_fini+0x18>
 801054c:	f000 fa04 	bl	8010958 <rcutils_reset_error>
 8010550:	4620      	mov	r0, r4
 8010552:	2501      	movs	r5, #1
 8010554:	f7fe f8f6 	bl	800e744 <rcl_context_fini>
 8010558:	2800      	cmp	r0, #0
 801055a:	d0ed      	beq.n	8010538 <rclc_support_fini+0x20>
 801055c:	2501      	movs	r5, #1
 801055e:	f000 f9fb 	bl	8010958 <rcutils_reset_error>
 8010562:	4628      	mov	r0, r5
 8010564:	bd38      	pop	{r3, r4, r5, pc}
 8010566:	250b      	movs	r5, #11
 8010568:	4628      	mov	r0, r5
 801056a:	bd38      	pop	{r3, r4, r5, pc}

0801056c <rclc_node_init_default>:
 801056c:	b3b8      	cbz	r0, 80105de <rclc_node_init_default+0x72>
 801056e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010572:	460d      	mov	r5, r1
 8010574:	b0a1      	sub	sp, #132	@ 0x84
 8010576:	b329      	cbz	r1, 80105c4 <rclc_node_init_default+0x58>
 8010578:	4616      	mov	r6, r2
 801057a:	b31a      	cbz	r2, 80105c4 <rclc_node_init_default+0x58>
 801057c:	461f      	mov	r7, r3
 801057e:	b30b      	cbz	r3, 80105c4 <rclc_node_init_default+0x58>
 8010580:	f10d 0810 	add.w	r8, sp, #16
 8010584:	4604      	mov	r4, r0
 8010586:	4640      	mov	r0, r8
 8010588:	f7fe f9f6 	bl	800e978 <rcl_get_zero_initialized_node>
 801058c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010590:	f10d 0918 	add.w	r9, sp, #24
 8010594:	e884 0003 	stmia.w	r4, {r0, r1}
 8010598:	4648      	mov	r0, r9
 801059a:	f7fe fb97 	bl	800eccc <rcl_node_get_default_options>
 801059e:	4640      	mov	r0, r8
 80105a0:	f7fe f9ea 	bl	800e978 <rcl_get_zero_initialized_node>
 80105a4:	f8cd 9000 	str.w	r9, [sp]
 80105a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 80105ac:	463b      	mov	r3, r7
 80105ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80105b2:	4632      	mov	r2, r6
 80105b4:	4629      	mov	r1, r5
 80105b6:	4620      	mov	r0, r4
 80105b8:	f7fe f9e8 	bl	800e98c <rcl_node_init>
 80105bc:	b930      	cbnz	r0, 80105cc <rclc_node_init_default+0x60>
 80105be:	b021      	add	sp, #132	@ 0x84
 80105c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105c4:	200b      	movs	r0, #11
 80105c6:	b021      	add	sp, #132	@ 0x84
 80105c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105cc:	9003      	str	r0, [sp, #12]
 80105ce:	f000 f9c3 	bl	8010958 <rcutils_reset_error>
 80105d2:	f000 f9c1 	bl	8010958 <rcutils_reset_error>
 80105d6:	9803      	ldr	r0, [sp, #12]
 80105d8:	b021      	add	sp, #132	@ 0x84
 80105da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105de:	200b      	movs	r0, #11
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop

080105e4 <rclc_publisher_init_default>:
 80105e4:	b368      	cbz	r0, 8010642 <rclc_publisher_init_default+0x5e>
 80105e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ea:	460d      	mov	r5, r1
 80105ec:	b0a0      	sub	sp, #128	@ 0x80
 80105ee:	b321      	cbz	r1, 801063a <rclc_publisher_init_default+0x56>
 80105f0:	4616      	mov	r6, r2
 80105f2:	b312      	cbz	r2, 801063a <rclc_publisher_init_default+0x56>
 80105f4:	461f      	mov	r7, r3
 80105f6:	b303      	cbz	r3, 801063a <rclc_publisher_init_default+0x56>
 80105f8:	4604      	mov	r4, r0
 80105fa:	f7fe fb93 	bl	800ed24 <rcl_get_zero_initialized_publisher>
 80105fe:	f10d 0810 	add.w	r8, sp, #16
 8010602:	6020      	str	r0, [r4, #0]
 8010604:	4640      	mov	r0, r8
 8010606:	f7fe fc55 	bl	800eeb4 <rcl_publisher_get_default_options>
 801060a:	490f      	ldr	r1, [pc, #60]	@ (8010648 <rclc_publisher_init_default+0x64>)
 801060c:	2250      	movs	r2, #80	@ 0x50
 801060e:	4640      	mov	r0, r8
 8010610:	f00c fa5d 	bl	801cace <memcpy>
 8010614:	f8cd 8000 	str.w	r8, [sp]
 8010618:	463b      	mov	r3, r7
 801061a:	4632      	mov	r2, r6
 801061c:	4629      	mov	r1, r5
 801061e:	4620      	mov	r0, r4
 8010620:	f7fe fb86 	bl	800ed30 <rcl_publisher_init>
 8010624:	b910      	cbnz	r0, 801062c <rclc_publisher_init_default+0x48>
 8010626:	b020      	add	sp, #128	@ 0x80
 8010628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801062c:	9003      	str	r0, [sp, #12]
 801062e:	f000 f993 	bl	8010958 <rcutils_reset_error>
 8010632:	9803      	ldr	r0, [sp, #12]
 8010634:	b020      	add	sp, #128	@ 0x80
 8010636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801063a:	200b      	movs	r0, #11
 801063c:	b020      	add	sp, #128	@ 0x80
 801063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010642:	200b      	movs	r0, #11
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	0801e340 	.word	0x0801e340

0801064c <rclc_subscription_init_default>:
 801064c:	b368      	cbz	r0, 80106aa <rclc_subscription_init_default+0x5e>
 801064e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010652:	460d      	mov	r5, r1
 8010654:	b0a0      	sub	sp, #128	@ 0x80
 8010656:	b321      	cbz	r1, 80106a2 <rclc_subscription_init_default+0x56>
 8010658:	4616      	mov	r6, r2
 801065a:	b312      	cbz	r2, 80106a2 <rclc_subscription_init_default+0x56>
 801065c:	461f      	mov	r7, r3
 801065e:	b303      	cbz	r3, 80106a2 <rclc_subscription_init_default+0x56>
 8010660:	4604      	mov	r4, r0
 8010662:	f7fe fca1 	bl	800efa8 <rcl_get_zero_initialized_subscription>
 8010666:	f10d 0810 	add.w	r8, sp, #16
 801066a:	6020      	str	r0, [r4, #0]
 801066c:	4640      	mov	r0, r8
 801066e:	f7fe fd9d 	bl	800f1ac <rcl_subscription_get_default_options>
 8010672:	490f      	ldr	r1, [pc, #60]	@ (80106b0 <rclc_subscription_init_default+0x64>)
 8010674:	2250      	movs	r2, #80	@ 0x50
 8010676:	4640      	mov	r0, r8
 8010678:	f00c fa29 	bl	801cace <memcpy>
 801067c:	f8cd 8000 	str.w	r8, [sp]
 8010680:	463b      	mov	r3, r7
 8010682:	4632      	mov	r2, r6
 8010684:	4629      	mov	r1, r5
 8010686:	4620      	mov	r0, r4
 8010688:	f7fe fc94 	bl	800efb4 <rcl_subscription_init>
 801068c:	b910      	cbnz	r0, 8010694 <rclc_subscription_init_default+0x48>
 801068e:	b020      	add	sp, #128	@ 0x80
 8010690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010694:	9003      	str	r0, [sp, #12]
 8010696:	f000 f95f 	bl	8010958 <rcutils_reset_error>
 801069a:	9803      	ldr	r0, [sp, #12]
 801069c:	b020      	add	sp, #128	@ 0x80
 801069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106a2:	200b      	movs	r0, #11
 80106a4:	b020      	add	sp, #128	@ 0x80
 80106a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106aa:	200b      	movs	r0, #11
 80106ac:	4770      	bx	lr
 80106ae:	bf00      	nop
 80106b0:	0801e390 	.word	0x0801e390

080106b4 <rclc_timer_init_default>:
 80106b4:	b360      	cbz	r0, 8010710 <rclc_timer_init_default+0x5c>
 80106b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ba:	460e      	mov	r6, r1
 80106bc:	b08a      	sub	sp, #40	@ 0x28
 80106be:	b319      	cbz	r1, 8010708 <rclc_timer_init_default+0x54>
 80106c0:	4690      	mov	r8, r2
 80106c2:	461f      	mov	r7, r3
 80106c4:	4605      	mov	r5, r0
 80106c6:	f7fe fea1 	bl	800f40c <rcl_get_zero_initialized_timer>
 80106ca:	68b4      	ldr	r4, [r6, #8]
 80106cc:	6028      	str	r0, [r5, #0]
 80106ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106d0:	f10d 0c0c 	add.w	ip, sp, #12
 80106d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80106d8:	6823      	ldr	r3, [r4, #0]
 80106da:	f8cc 3000 	str.w	r3, [ip]
 80106de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106e0:	9302      	str	r3, [sp, #8]
 80106e2:	e9cd 8700 	strd	r8, r7, [sp]
 80106e6:	4628      	mov	r0, r5
 80106e8:	4632      	mov	r2, r6
 80106ea:	f106 010c 	add.w	r1, r6, #12
 80106ee:	f7fe fe93 	bl	800f418 <rcl_timer_init>
 80106f2:	b910      	cbnz	r0, 80106fa <rclc_timer_init_default+0x46>
 80106f4:	b00a      	add	sp, #40	@ 0x28
 80106f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106fa:	9009      	str	r0, [sp, #36]	@ 0x24
 80106fc:	f000 f92c 	bl	8010958 <rcutils_reset_error>
 8010700:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010702:	b00a      	add	sp, #40	@ 0x28
 8010704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010708:	200b      	movs	r0, #11
 801070a:	b00a      	add	sp, #40	@ 0x28
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	200b      	movs	r0, #11
 8010712:	4770      	bx	lr

08010714 <__default_zero_allocate>:
 8010714:	f00b bc22 	b.w	801bf5c <calloc>

08010718 <__default_reallocate>:
 8010718:	f00b bdc0 	b.w	801c29c <realloc>

0801071c <__default_deallocate>:
 801071c:	f00b bc9c 	b.w	801c058 <free>

08010720 <__default_allocate>:
 8010720:	f00b bc92 	b.w	801c048 <malloc>

08010724 <rcutils_get_zero_initialized_allocator>:
 8010724:	b510      	push	{r4, lr}
 8010726:	4c05      	ldr	r4, [pc, #20]	@ (801073c <rcutils_get_zero_initialized_allocator+0x18>)
 8010728:	4686      	mov	lr, r0
 801072a:	4684      	mov	ip, r0
 801072c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801072e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010732:	6823      	ldr	r3, [r4, #0]
 8010734:	f8cc 3000 	str.w	r3, [ip]
 8010738:	4670      	mov	r0, lr
 801073a:	bd10      	pop	{r4, pc}
 801073c:	0801e3e0 	.word	0x0801e3e0

08010740 <rcutils_set_default_allocator>:
 8010740:	b1a8      	cbz	r0, 801076e <rcutils_set_default_allocator+0x2e>
 8010742:	6802      	ldr	r2, [r0, #0]
 8010744:	b1a2      	cbz	r2, 8010770 <rcutils_set_default_allocator+0x30>
 8010746:	6841      	ldr	r1, [r0, #4]
 8010748:	b1a1      	cbz	r1, 8010774 <rcutils_set_default_allocator+0x34>
 801074a:	b410      	push	{r4}
 801074c:	68c4      	ldr	r4, [r0, #12]
 801074e:	b164      	cbz	r4, 801076a <rcutils_set_default_allocator+0x2a>
 8010750:	6880      	ldr	r0, [r0, #8]
 8010752:	b138      	cbz	r0, 8010764 <rcutils_set_default_allocator+0x24>
 8010754:	4b08      	ldr	r3, [pc, #32]	@ (8010778 <rcutils_set_default_allocator+0x38>)
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	2200      	movs	r2, #0
 801075a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801075e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010762:	2001      	movs	r0, #1
 8010764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010768:	4770      	bx	lr
 801076a:	4620      	mov	r0, r4
 801076c:	e7fa      	b.n	8010764 <rcutils_set_default_allocator+0x24>
 801076e:	4770      	bx	lr
 8010770:	4610      	mov	r0, r2
 8010772:	4770      	bx	lr
 8010774:	4608      	mov	r0, r1
 8010776:	4770      	bx	lr
 8010778:	200002f8 	.word	0x200002f8

0801077c <rcutils_get_default_allocator>:
 801077c:	b510      	push	{r4, lr}
 801077e:	4c05      	ldr	r4, [pc, #20]	@ (8010794 <rcutils_get_default_allocator+0x18>)
 8010780:	4686      	mov	lr, r0
 8010782:	4684      	mov	ip, r0
 8010784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010786:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801078a:	6823      	ldr	r3, [r4, #0]
 801078c:	f8cc 3000 	str.w	r3, [ip]
 8010790:	4670      	mov	r0, lr
 8010792:	bd10      	pop	{r4, pc}
 8010794:	200002f8 	.word	0x200002f8

08010798 <rcutils_allocator_is_valid>:
 8010798:	b158      	cbz	r0, 80107b2 <rcutils_allocator_is_valid+0x1a>
 801079a:	6803      	ldr	r3, [r0, #0]
 801079c:	b143      	cbz	r3, 80107b0 <rcutils_allocator_is_valid+0x18>
 801079e:	6843      	ldr	r3, [r0, #4]
 80107a0:	b133      	cbz	r3, 80107b0 <rcutils_allocator_is_valid+0x18>
 80107a2:	68c3      	ldr	r3, [r0, #12]
 80107a4:	b123      	cbz	r3, 80107b0 <rcutils_allocator_is_valid+0x18>
 80107a6:	6880      	ldr	r0, [r0, #8]
 80107a8:	3800      	subs	r0, #0
 80107aa:	bf18      	it	ne
 80107ac:	2001      	movne	r0, #1
 80107ae:	4770      	bx	lr
 80107b0:	4618      	mov	r0, r3
 80107b2:	4770      	bx	lr

080107b4 <__atomic_load_8>:
 80107b4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80107b8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80107bc:	4a15      	ldr	r2, [pc, #84]	@ (8010814 <__atomic_load_8+0x60>)
 80107be:	4b16      	ldr	r3, [pc, #88]	@ (8010818 <__atomic_load_8+0x64>)
 80107c0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80107c4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80107c8:	fb02 f101 	mul.w	r1, r2, r1
 80107cc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80107d0:	fba3 2301 	umull	r2, r3, r3, r1
 80107d4:	091b      	lsrs	r3, r3, #4
 80107d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80107da:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80107de:	b4d0      	push	{r4, r6, r7}
 80107e0:	4c0e      	ldr	r4, [pc, #56]	@ (801081c <__atomic_load_8+0x68>)
 80107e2:	1ac9      	subs	r1, r1, r3
 80107e4:	1862      	adds	r2, r4, r1
 80107e6:	f04f 0c01 	mov.w	ip, #1
 80107ea:	e8d2 3f4f 	ldrexb	r3, [r2]
 80107ee:	e8c2 cf46 	strexb	r6, ip, [r2]
 80107f2:	2e00      	cmp	r6, #0
 80107f4:	d1f9      	bne.n	80107ea <__atomic_load_8+0x36>
 80107f6:	f3bf 8f5b 	dmb	ish
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d1f4      	bne.n	80107ea <__atomic_load_8+0x36>
 8010800:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010804:	f3bf 8f5b 	dmb	ish
 8010808:	5463      	strb	r3, [r4, r1]
 801080a:	4630      	mov	r0, r6
 801080c:	4639      	mov	r1, r7
 801080e:	bcd0      	pop	{r4, r6, r7}
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	27d4eb2d 	.word	0x27d4eb2d
 8010818:	b21642c9 	.word	0xb21642c9
 801081c:	2000d158 	.word	0x2000d158

08010820 <__atomic_store_8>:
 8010820:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010824:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8010828:	b570      	push	{r4, r5, r6, lr}
 801082a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801082e:	4c14      	ldr	r4, [pc, #80]	@ (8010880 <__atomic_store_8+0x60>)
 8010830:	4d14      	ldr	r5, [pc, #80]	@ (8010884 <__atomic_store_8+0x64>)
 8010832:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010836:	fb04 f101 	mul.w	r1, r4, r1
 801083a:	4c13      	ldr	r4, [pc, #76]	@ (8010888 <__atomic_store_8+0x68>)
 801083c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010840:	fba4 4e01 	umull	r4, lr, r4, r1
 8010844:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010848:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801084c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8010850:	eba1 0e0e 	sub.w	lr, r1, lr
 8010854:	eb05 0c0e 	add.w	ip, r5, lr
 8010858:	f04f 0401 	mov.w	r4, #1
 801085c:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010860:	e8cc 4f46 	strexb	r6, r4, [ip]
 8010864:	2e00      	cmp	r6, #0
 8010866:	d1f9      	bne.n	801085c <__atomic_store_8+0x3c>
 8010868:	f3bf 8f5b 	dmb	ish
 801086c:	b2c9      	uxtb	r1, r1
 801086e:	2900      	cmp	r1, #0
 8010870:	d1f4      	bne.n	801085c <__atomic_store_8+0x3c>
 8010872:	e9c0 2300 	strd	r2, r3, [r0]
 8010876:	f3bf 8f5b 	dmb	ish
 801087a:	f805 100e 	strb.w	r1, [r5, lr]
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	27d4eb2d 	.word	0x27d4eb2d
 8010884:	2000d158 	.word	0x2000d158
 8010888:	b21642c9 	.word	0xb21642c9

0801088c <__atomic_exchange_8>:
 801088c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8010890:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8010894:	4916      	ldr	r1, [pc, #88]	@ (80108f0 <__atomic_exchange_8+0x64>)
 8010896:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801089a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801089e:	fb01 fc0c 	mul.w	ip, r1, ip
 80108a2:	4914      	ldr	r1, [pc, #80]	@ (80108f4 <__atomic_exchange_8+0x68>)
 80108a4:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80108a8:	b570      	push	{r4, r5, r6, lr}
 80108aa:	4605      	mov	r5, r0
 80108ac:	fba1 010c 	umull	r0, r1, r1, ip
 80108b0:	0909      	lsrs	r1, r1, #4
 80108b2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80108b6:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 80108ba:	4e0f      	ldr	r6, [pc, #60]	@ (80108f8 <__atomic_exchange_8+0x6c>)
 80108bc:	ebac 0c01 	sub.w	ip, ip, r1
 80108c0:	eb06 010c 	add.w	r1, r6, ip
 80108c4:	f04f 0e01 	mov.w	lr, #1
 80108c8:	e8d1 4f4f 	ldrexb	r4, [r1]
 80108cc:	e8c1 ef40 	strexb	r0, lr, [r1]
 80108d0:	2800      	cmp	r0, #0
 80108d2:	d1f9      	bne.n	80108c8 <__atomic_exchange_8+0x3c>
 80108d4:	f3bf 8f5b 	dmb	ish
 80108d8:	b2e4      	uxtb	r4, r4
 80108da:	2c00      	cmp	r4, #0
 80108dc:	d1f4      	bne.n	80108c8 <__atomic_exchange_8+0x3c>
 80108de:	e9d5 0100 	ldrd	r0, r1, [r5]
 80108e2:	e9c5 2300 	strd	r2, r3, [r5]
 80108e6:	f3bf 8f5b 	dmb	ish
 80108ea:	f806 400c 	strb.w	r4, [r6, ip]
 80108ee:	bd70      	pop	{r4, r5, r6, pc}
 80108f0:	27d4eb2d 	.word	0x27d4eb2d
 80108f4:	b21642c9 	.word	0xb21642c9
 80108f8:	2000d158 	.word	0x2000d158

080108fc <rcutils_get_env>:
 80108fc:	b168      	cbz	r0, 801091a <rcutils_get_env+0x1e>
 80108fe:	b510      	push	{r4, lr}
 8010900:	460c      	mov	r4, r1
 8010902:	b129      	cbz	r1, 8010910 <rcutils_get_env+0x14>
 8010904:	f00b fb58 	bl	801bfb8 <getenv>
 8010908:	b120      	cbz	r0, 8010914 <rcutils_get_env+0x18>
 801090a:	6020      	str	r0, [r4, #0]
 801090c:	2000      	movs	r0, #0
 801090e:	bd10      	pop	{r4, pc}
 8010910:	4803      	ldr	r0, [pc, #12]	@ (8010920 <rcutils_get_env+0x24>)
 8010912:	bd10      	pop	{r4, pc}
 8010914:	4b03      	ldr	r3, [pc, #12]	@ (8010924 <rcutils_get_env+0x28>)
 8010916:	6023      	str	r3, [r4, #0]
 8010918:	bd10      	pop	{r4, pc}
 801091a:	4803      	ldr	r0, [pc, #12]	@ (8010928 <rcutils_get_env+0x2c>)
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	0801db18 	.word	0x0801db18
 8010924:	0801e044 	.word	0x0801e044
 8010928:	0801dafc 	.word	0x0801dafc

0801092c <rcutils_get_error_string>:
 801092c:	4b06      	ldr	r3, [pc, #24]	@ (8010948 <rcutils_get_error_string+0x1c>)
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	b13b      	cbz	r3, 8010942 <rcutils_get_error_string+0x16>
 8010932:	4b06      	ldr	r3, [pc, #24]	@ (801094c <rcutils_get_error_string+0x20>)
 8010934:	781a      	ldrb	r2, [r3, #0]
 8010936:	b90a      	cbnz	r2, 801093c <rcutils_get_error_string+0x10>
 8010938:	2201      	movs	r2, #1
 801093a:	701a      	strb	r2, [r3, #0]
 801093c:	4b04      	ldr	r3, [pc, #16]	@ (8010950 <rcutils_get_error_string+0x24>)
 801093e:	7818      	ldrb	r0, [r3, #0]
 8010940:	4770      	bx	lr
 8010942:	4b04      	ldr	r3, [pc, #16]	@ (8010954 <rcutils_get_error_string+0x28>)
 8010944:	7818      	ldrb	r0, [r3, #0]
 8010946:	4770      	bx	lr
 8010948:	2000d16f 	.word	0x2000d16f
 801094c:	2000d181 	.word	0x2000d181
 8010950:	2000d180 	.word	0x2000d180
 8010954:	0801db34 	.word	0x0801db34

08010958 <rcutils_reset_error>:
 8010958:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010978 <rcutils_reset_error+0x20>
 801095c:	4a08      	ldr	r2, [pc, #32]	@ (8010980 <rcutils_reset_error+0x28>)
 801095e:	4809      	ldr	r0, [pc, #36]	@ (8010984 <rcutils_reset_error+0x2c>)
 8010960:	4909      	ldr	r1, [pc, #36]	@ (8010988 <rcutils_reset_error+0x30>)
 8010962:	2300      	movs	r3, #0
 8010964:	8013      	strh	r3, [r2, #0]
 8010966:	ed82 7b02 	vstr	d7, [r2, #8]
 801096a:	4a08      	ldr	r2, [pc, #32]	@ (801098c <rcutils_reset_error+0x34>)
 801096c:	7003      	strb	r3, [r0, #0]
 801096e:	700b      	strb	r3, [r1, #0]
 8010970:	7013      	strb	r3, [r2, #0]
 8010972:	4770      	bx	lr
 8010974:	f3af 8000 	nop.w
	...
 8010980:	2000d170 	.word	0x2000d170
 8010984:	2000d181 	.word	0x2000d181
 8010988:	2000d180 	.word	0x2000d180
 801098c:	2000d16f 	.word	0x2000d16f

08010990 <rcutils_format_string_limit>:
 8010990:	b40f      	push	{r0, r1, r2, r3}
 8010992:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010994:	b083      	sub	sp, #12
 8010996:	ac08      	add	r4, sp, #32
 8010998:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801099a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801099e:	b34e      	cbz	r6, 80109f4 <rcutils_format_string_limit+0x64>
 80109a0:	a808      	add	r0, sp, #32
 80109a2:	f7ff fef9 	bl	8010798 <rcutils_allocator_is_valid>
 80109a6:	b328      	cbz	r0, 80109f4 <rcutils_format_string_limit+0x64>
 80109a8:	2100      	movs	r1, #0
 80109aa:	ab0f      	add	r3, sp, #60	@ 0x3c
 80109ac:	4632      	mov	r2, r6
 80109ae:	4608      	mov	r0, r1
 80109b0:	e9cd 3300 	strd	r3, r3, [sp]
 80109b4:	f000 f8f4 	bl	8010ba0 <rcutils_vsnprintf>
 80109b8:	1c43      	adds	r3, r0, #1
 80109ba:	4605      	mov	r5, r0
 80109bc:	d01a      	beq.n	80109f4 <rcutils_format_string_limit+0x64>
 80109be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109c0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80109c2:	1c47      	adds	r7, r0, #1
 80109c4:	429f      	cmp	r7, r3
 80109c6:	bf84      	itt	hi
 80109c8:	461f      	movhi	r7, r3
 80109ca:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80109ce:	4638      	mov	r0, r7
 80109d0:	9b08      	ldr	r3, [sp, #32]
 80109d2:	4798      	blx	r3
 80109d4:	4604      	mov	r4, r0
 80109d6:	b168      	cbz	r0, 80109f4 <rcutils_format_string_limit+0x64>
 80109d8:	9b01      	ldr	r3, [sp, #4]
 80109da:	4632      	mov	r2, r6
 80109dc:	4639      	mov	r1, r7
 80109de:	f000 f8df 	bl	8010ba0 <rcutils_vsnprintf>
 80109e2:	2800      	cmp	r0, #0
 80109e4:	db02      	blt.n	80109ec <rcutils_format_string_limit+0x5c>
 80109e6:	2300      	movs	r3, #0
 80109e8:	5563      	strb	r3, [r4, r5]
 80109ea:	e004      	b.n	80109f6 <rcutils_format_string_limit+0x66>
 80109ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80109f0:	4620      	mov	r0, r4
 80109f2:	4798      	blx	r3
 80109f4:	2400      	movs	r4, #0
 80109f6:	4620      	mov	r0, r4
 80109f8:	b003      	add	sp, #12
 80109fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80109fe:	b004      	add	sp, #16
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop

08010a04 <rcutils_repl_str>:
 8010a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a08:	ed2d 8b02 	vpush	{d8}
 8010a0c:	b087      	sub	sp, #28
 8010a0e:	4680      	mov	r8, r0
 8010a10:	4608      	mov	r0, r1
 8010a12:	f8cd 8004 	str.w	r8, [sp, #4]
 8010a16:	ee08 2a10 	vmov	s16, r2
 8010a1a:	468a      	mov	sl, r1
 8010a1c:	4699      	mov	r9, r3
 8010a1e:	f7ef fc01 	bl	8000224 <strlen>
 8010a22:	2600      	movs	r6, #0
 8010a24:	4647      	mov	r7, r8
 8010a26:	9002      	str	r0, [sp, #8]
 8010a28:	46b3      	mov	fp, r6
 8010a2a:	2510      	movs	r5, #16
 8010a2c:	46b0      	mov	r8, r6
 8010a2e:	e01d      	b.n	8010a6c <rcutils_repl_str+0x68>
 8010a30:	f10b 0b01 	add.w	fp, fp, #1
 8010a34:	455e      	cmp	r6, fp
 8010a36:	d211      	bcs.n	8010a5c <rcutils_repl_str+0x58>
 8010a38:	442e      	add	r6, r5
 8010a3a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010a3e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010a42:	00b1      	lsls	r1, r6, #2
 8010a44:	4798      	blx	r3
 8010a46:	2800      	cmp	r0, #0
 8010a48:	f000 8088 	beq.w	8010b5c <rcutils_repl_str+0x158>
 8010a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a50:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010a54:	4680      	mov	r8, r0
 8010a56:	bf28      	it	cs
 8010a58:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8010a5c:	9a01      	ldr	r2, [sp, #4]
 8010a5e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010a62:	1aa2      	subs	r2, r4, r2
 8010a64:	f843 2c04 	str.w	r2, [r3, #-4]
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	18e7      	adds	r7, r4, r3
 8010a6c:	4651      	mov	r1, sl
 8010a6e:	4638      	mov	r0, r7
 8010a70:	f00b ff8b 	bl	801c98a <strstr>
 8010a74:	4604      	mov	r4, r0
 8010a76:	4640      	mov	r0, r8
 8010a78:	2c00      	cmp	r4, #0
 8010a7a:	d1d9      	bne.n	8010a30 <rcutils_repl_str+0x2c>
 8010a7c:	46b8      	mov	r8, r7
 8010a7e:	4607      	mov	r7, r0
 8010a80:	4640      	mov	r0, r8
 8010a82:	f7ef fbcf 	bl	8000224 <strlen>
 8010a86:	9b01      	ldr	r3, [sp, #4]
 8010a88:	eba8 0303 	sub.w	r3, r8, r3
 8010a8c:	181c      	adds	r4, r3, r0
 8010a8e:	9404      	str	r4, [sp, #16]
 8010a90:	f1bb 0f00 	cmp.w	fp, #0
 8010a94:	d04a      	beq.n	8010b2c <rcutils_repl_str+0x128>
 8010a96:	ee18 0a10 	vmov	r0, s16
 8010a9a:	f7ef fbc3 	bl	8000224 <strlen>
 8010a9e:	9b02      	ldr	r3, [sp, #8]
 8010aa0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010aa4:	1ac3      	subs	r3, r0, r3
 8010aa6:	fb0b 4303 	mla	r3, fp, r3, r4
 8010aaa:	461a      	mov	r2, r3
 8010aac:	9305      	str	r3, [sp, #20]
 8010aae:	4606      	mov	r6, r0
 8010ab0:	f8d9 3000 	ldr.w	r3, [r9]
 8010ab4:	1c50      	adds	r0, r2, #1
 8010ab6:	4798      	blx	r3
 8010ab8:	9003      	str	r0, [sp, #12]
 8010aba:	2800      	cmp	r0, #0
 8010abc:	d04f      	beq.n	8010b5e <rcutils_repl_str+0x15a>
 8010abe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ac2:	683a      	ldr	r2, [r7, #0]
 8010ac4:	4641      	mov	r1, r8
 8010ac6:	f00c f802 	bl	801cace <memcpy>
 8010aca:	683d      	ldr	r5, [r7, #0]
 8010acc:	9b03      	ldr	r3, [sp, #12]
 8010ace:	9701      	str	r7, [sp, #4]
 8010ad0:	46ba      	mov	sl, r7
 8010ad2:	441d      	add	r5, r3
 8010ad4:	9f02      	ldr	r7, [sp, #8]
 8010ad6:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ada:	2401      	movs	r4, #1
 8010adc:	46d1      	mov	r9, sl
 8010ade:	ee18 aa10 	vmov	sl, s16
 8010ae2:	e00a      	b.n	8010afa <rcutils_repl_str+0xf6>
 8010ae4:	f8d9 5000 	ldr.w	r5, [r9]
 8010ae8:	1aaa      	subs	r2, r5, r2
 8010aea:	1885      	adds	r5, r0, r2
 8010aec:	f00b ffef 	bl	801cace <memcpy>
 8010af0:	45a3      	cmp	fp, r4
 8010af2:	f104 0201 	add.w	r2, r4, #1
 8010af6:	d935      	bls.n	8010b64 <rcutils_repl_str+0x160>
 8010af8:	4614      	mov	r4, r2
 8010afa:	4632      	mov	r2, r6
 8010afc:	4651      	mov	r1, sl
 8010afe:	4628      	mov	r0, r5
 8010b00:	f00b ffe5 	bl	801cace <memcpy>
 8010b04:	f859 2b04 	ldr.w	r2, [r9], #4
 8010b08:	45a3      	cmp	fp, r4
 8010b0a:	443a      	add	r2, r7
 8010b0c:	eb05 0006 	add.w	r0, r5, r6
 8010b10:	eb08 0102 	add.w	r1, r8, r2
 8010b14:	d1e6      	bne.n	8010ae4 <rcutils_repl_str+0xe0>
 8010b16:	9b04      	ldr	r3, [sp, #16]
 8010b18:	1a9a      	subs	r2, r3, r2
 8010b1a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010b1e:	f00b ffd6 	bl	801cace <memcpy>
 8010b22:	9a03      	ldr	r2, [sp, #12]
 8010b24:	9905      	ldr	r1, [sp, #20]
 8010b26:	2300      	movs	r3, #0
 8010b28:	5453      	strb	r3, [r2, r1]
 8010b2a:	e00b      	b.n	8010b44 <rcutils_repl_str+0x140>
 8010b2c:	4620      	mov	r0, r4
 8010b2e:	f8d9 3000 	ldr.w	r3, [r9]
 8010b32:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010b36:	3001      	adds	r0, #1
 8010b38:	4798      	blx	r3
 8010b3a:	9003      	str	r0, [sp, #12]
 8010b3c:	b110      	cbz	r0, 8010b44 <rcutils_repl_str+0x140>
 8010b3e:	9901      	ldr	r1, [sp, #4]
 8010b40:	f00b ffbd 	bl	801cabe <strcpy>
 8010b44:	4638      	mov	r0, r7
 8010b46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010b4a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010b4e:	4798      	blx	r3
 8010b50:	9803      	ldr	r0, [sp, #12]
 8010b52:	b007      	add	sp, #28
 8010b54:	ecbd 8b02 	vpop	{d8}
 8010b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b5c:	4647      	mov	r7, r8
 8010b5e:	2300      	movs	r3, #0
 8010b60:	9303      	str	r3, [sp, #12]
 8010b62:	e7ef      	b.n	8010b44 <rcutils_repl_str+0x140>
 8010b64:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010b68:	e7db      	b.n	8010b22 <rcutils_repl_str+0x11e>
 8010b6a:	bf00      	nop

08010b6c <rcutils_snprintf>:
 8010b6c:	b40c      	push	{r2, r3}
 8010b6e:	b530      	push	{r4, r5, lr}
 8010b70:	b083      	sub	sp, #12
 8010b72:	ab06      	add	r3, sp, #24
 8010b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b78:	9301      	str	r3, [sp, #4]
 8010b7a:	b152      	cbz	r2, 8010b92 <rcutils_snprintf+0x26>
 8010b7c:	b138      	cbz	r0, 8010b8e <rcutils_snprintf+0x22>
 8010b7e:	b141      	cbz	r1, 8010b92 <rcutils_snprintf+0x26>
 8010b80:	f00b fe10 	bl	801c7a4 <vsniprintf>
 8010b84:	b003      	add	sp, #12
 8010b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b8a:	b002      	add	sp, #8
 8010b8c:	4770      	bx	lr
 8010b8e:	2900      	cmp	r1, #0
 8010b90:	d0f6      	beq.n	8010b80 <rcutils_snprintf+0x14>
 8010b92:	f00b ff67 	bl	801ca64 <__errno>
 8010b96:	2316      	movs	r3, #22
 8010b98:	6003      	str	r3, [r0, #0]
 8010b9a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b9e:	e7f1      	b.n	8010b84 <rcutils_snprintf+0x18>

08010ba0 <rcutils_vsnprintf>:
 8010ba0:	b570      	push	{r4, r5, r6, lr}
 8010ba2:	b13a      	cbz	r2, 8010bb4 <rcutils_vsnprintf+0x14>
 8010ba4:	b120      	cbz	r0, 8010bb0 <rcutils_vsnprintf+0x10>
 8010ba6:	b129      	cbz	r1, 8010bb4 <rcutils_vsnprintf+0x14>
 8010ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bac:	f00b bdfa 	b.w	801c7a4 <vsniprintf>
 8010bb0:	2900      	cmp	r1, #0
 8010bb2:	d0f9      	beq.n	8010ba8 <rcutils_vsnprintf+0x8>
 8010bb4:	f00b ff56 	bl	801ca64 <__errno>
 8010bb8:	2316      	movs	r3, #22
 8010bba:	6003      	str	r3, [r0, #0]
 8010bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010bc0:	bd70      	pop	{r4, r5, r6, pc}
 8010bc2:	bf00      	nop

08010bc4 <rcutils_strdup>:
 8010bc4:	b084      	sub	sp, #16
 8010bc6:	b570      	push	{r4, r5, r6, lr}
 8010bc8:	b082      	sub	sp, #8
 8010bca:	ac07      	add	r4, sp, #28
 8010bcc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010bd0:	4605      	mov	r5, r0
 8010bd2:	b1b0      	cbz	r0, 8010c02 <rcutils_strdup+0x3e>
 8010bd4:	f7ef fb26 	bl	8000224 <strlen>
 8010bd8:	1c42      	adds	r2, r0, #1
 8010bda:	9b07      	ldr	r3, [sp, #28]
 8010bdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bde:	9201      	str	r2, [sp, #4]
 8010be0:	4606      	mov	r6, r0
 8010be2:	4610      	mov	r0, r2
 8010be4:	4798      	blx	r3
 8010be6:	4604      	mov	r4, r0
 8010be8:	b128      	cbz	r0, 8010bf6 <rcutils_strdup+0x32>
 8010bea:	9a01      	ldr	r2, [sp, #4]
 8010bec:	4629      	mov	r1, r5
 8010bee:	f00b ff6e 	bl	801cace <memcpy>
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	55a3      	strb	r3, [r4, r6]
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	b002      	add	sp, #8
 8010bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bfe:	b004      	add	sp, #16
 8010c00:	4770      	bx	lr
 8010c02:	4604      	mov	r4, r0
 8010c04:	e7f7      	b.n	8010bf6 <rcutils_strdup+0x32>
 8010c06:	bf00      	nop

08010c08 <rcutils_strndup>:
 8010c08:	b082      	sub	sp, #8
 8010c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0c:	ac06      	add	r4, sp, #24
 8010c0e:	e884 000c 	stmia.w	r4, {r2, r3}
 8010c12:	4605      	mov	r5, r0
 8010c14:	b188      	cbz	r0, 8010c3a <rcutils_strndup+0x32>
 8010c16:	1c4f      	adds	r7, r1, #1
 8010c18:	460e      	mov	r6, r1
 8010c1a:	4638      	mov	r0, r7
 8010c1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010c1e:	4790      	blx	r2
 8010c20:	4604      	mov	r4, r0
 8010c22:	b128      	cbz	r0, 8010c30 <rcutils_strndup+0x28>
 8010c24:	463a      	mov	r2, r7
 8010c26:	4629      	mov	r1, r5
 8010c28:	f00b ff51 	bl	801cace <memcpy>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	55a3      	strb	r3, [r4, r6]
 8010c30:	4620      	mov	r0, r4
 8010c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c36:	b002      	add	sp, #8
 8010c38:	4770      	bx	lr
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	e7f8      	b.n	8010c30 <rcutils_strndup+0x28>
 8010c3e:	bf00      	nop

08010c40 <rcutils_system_time_now>:
 8010c40:	b308      	cbz	r0, 8010c86 <rcutils_system_time_now+0x46>
 8010c42:	b570      	push	{r4, r5, r6, lr}
 8010c44:	b084      	sub	sp, #16
 8010c46:	4604      	mov	r4, r0
 8010c48:	4669      	mov	r1, sp
 8010c4a:	2001      	movs	r0, #1
 8010c4c:	f7f2 fd54 	bl	80036f8 <clock_gettime>
 8010c50:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010c54:	2d00      	cmp	r5, #0
 8010c56:	db13      	blt.n	8010c80 <rcutils_system_time_now+0x40>
 8010c58:	9902      	ldr	r1, [sp, #8]
 8010c5a:	2900      	cmp	r1, #0
 8010c5c:	db0d      	blt.n	8010c7a <rcutils_system_time_now+0x3a>
 8010c5e:	4e0b      	ldr	r6, [pc, #44]	@ (8010c8c <rcutils_system_time_now+0x4c>)
 8010c60:	fba3 3206 	umull	r3, r2, r3, r6
 8010c64:	185b      	adds	r3, r3, r1
 8010c66:	fb06 2205 	mla	r2, r6, r5, r2
 8010c6a:	f04f 0000 	mov.w	r0, #0
 8010c6e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010c72:	e9c4 3200 	strd	r3, r2, [r4]
 8010c76:	b004      	add	sp, #16
 8010c78:	bd70      	pop	{r4, r5, r6, pc}
 8010c7a:	ea53 0205 	orrs.w	r2, r3, r5
 8010c7e:	d1ee      	bne.n	8010c5e <rcutils_system_time_now+0x1e>
 8010c80:	2002      	movs	r0, #2
 8010c82:	b004      	add	sp, #16
 8010c84:	bd70      	pop	{r4, r5, r6, pc}
 8010c86:	200b      	movs	r0, #11
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	3b9aca00 	.word	0x3b9aca00

08010c90 <rcutils_steady_time_now>:
 8010c90:	b308      	cbz	r0, 8010cd6 <rcutils_steady_time_now+0x46>
 8010c92:	b570      	push	{r4, r5, r6, lr}
 8010c94:	b084      	sub	sp, #16
 8010c96:	4604      	mov	r4, r0
 8010c98:	4669      	mov	r1, sp
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	f7f2 fd2c 	bl	80036f8 <clock_gettime>
 8010ca0:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010ca4:	2d00      	cmp	r5, #0
 8010ca6:	db13      	blt.n	8010cd0 <rcutils_steady_time_now+0x40>
 8010ca8:	9902      	ldr	r1, [sp, #8]
 8010caa:	2900      	cmp	r1, #0
 8010cac:	db0d      	blt.n	8010cca <rcutils_steady_time_now+0x3a>
 8010cae:	4e0b      	ldr	r6, [pc, #44]	@ (8010cdc <rcutils_steady_time_now+0x4c>)
 8010cb0:	fba3 3206 	umull	r3, r2, r3, r6
 8010cb4:	185b      	adds	r3, r3, r1
 8010cb6:	fb06 2205 	mla	r2, r6, r5, r2
 8010cba:	f04f 0000 	mov.w	r0, #0
 8010cbe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010cc2:	e9c4 3200 	strd	r3, r2, [r4]
 8010cc6:	b004      	add	sp, #16
 8010cc8:	bd70      	pop	{r4, r5, r6, pc}
 8010cca:	ea53 0205 	orrs.w	r2, r3, r5
 8010cce:	d1ee      	bne.n	8010cae <rcutils_steady_time_now+0x1e>
 8010cd0:	2002      	movs	r0, #2
 8010cd2:	b004      	add	sp, #16
 8010cd4:	bd70      	pop	{r4, r5, r6, pc}
 8010cd6:	200b      	movs	r0, #11
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	3b9aca00 	.word	0x3b9aca00

08010ce0 <rmw_get_zero_initialized_init_options>:
 8010ce0:	b510      	push	{r4, lr}
 8010ce2:	2238      	movs	r2, #56	@ 0x38
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	2100      	movs	r1, #0
 8010ce8:	f00b fe28 	bl	801c93c <memset>
 8010cec:	f104 0010 	add.w	r0, r4, #16
 8010cf0:	f000 f80a 	bl	8010d08 <rmw_get_default_security_options>
 8010cf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010cf8:	60e3      	str	r3, [r4, #12]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	bd10      	pop	{r4, pc}
 8010cfe:	bf00      	nop

08010d00 <rmw_get_default_publisher_options>:
 8010d00:	2200      	movs	r2, #0
 8010d02:	6002      	str	r2, [r0, #0]
 8010d04:	7102      	strb	r2, [r0, #4]
 8010d06:	4770      	bx	lr

08010d08 <rmw_get_default_security_options>:
 8010d08:	2200      	movs	r2, #0
 8010d0a:	7002      	strb	r2, [r0, #0]
 8010d0c:	6042      	str	r2, [r0, #4]
 8010d0e:	4770      	bx	lr

08010d10 <rmw_subscription_content_filter_options_fini>:
 8010d10:	b1b0      	cbz	r0, 8010d40 <rmw_subscription_content_filter_options_fini+0x30>
 8010d12:	b538      	push	{r3, r4, r5, lr}
 8010d14:	4604      	mov	r4, r0
 8010d16:	4608      	mov	r0, r1
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fd3d 	bl	8010798 <rcutils_allocator_is_valid>
 8010d1e:	b168      	cbz	r0, 8010d3c <rmw_subscription_content_filter_options_fini+0x2c>
 8010d20:	6820      	ldr	r0, [r4, #0]
 8010d22:	b120      	cbz	r0, 8010d2e <rmw_subscription_content_filter_options_fini+0x1e>
 8010d24:	686b      	ldr	r3, [r5, #4]
 8010d26:	6929      	ldr	r1, [r5, #16]
 8010d28:	4798      	blx	r3
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	1d20      	adds	r0, r4, #4
 8010d30:	f008 f952 	bl	8018fd8 <rcutils_string_array_fini>
 8010d34:	3800      	subs	r0, #0
 8010d36:	bf18      	it	ne
 8010d38:	2001      	movne	r0, #1
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	200b      	movs	r0, #11
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
 8010d40:	200b      	movs	r0, #11
 8010d42:	4770      	bx	lr

08010d44 <rmw_get_default_subscription_options>:
 8010d44:	2200      	movs	r2, #0
 8010d46:	e9c0 2200 	strd	r2, r2, [r0]
 8010d4a:	6082      	str	r2, [r0, #8]
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop

08010d50 <rmw_get_zero_initialized_message_info>:
 8010d50:	b510      	push	{r4, lr}
 8010d52:	2240      	movs	r2, #64	@ 0x40
 8010d54:	4604      	mov	r4, r0
 8010d56:	2100      	movs	r1, #0
 8010d58:	f00b fdf0 	bl	801c93c <memset>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	bd10      	pop	{r4, pc}

08010d60 <rmw_validate_namespace_with_size>:
 8010d60:	b340      	cbz	r0, 8010db4 <rmw_validate_namespace_with_size+0x54>
 8010d62:	b570      	push	{r4, r5, r6, lr}
 8010d64:	4614      	mov	r4, r2
 8010d66:	b0c2      	sub	sp, #264	@ 0x108
 8010d68:	b332      	cbz	r2, 8010db8 <rmw_validate_namespace_with_size+0x58>
 8010d6a:	2901      	cmp	r1, #1
 8010d6c:	460d      	mov	r5, r1
 8010d6e:	461e      	mov	r6, r3
 8010d70:	d102      	bne.n	8010d78 <rmw_validate_namespace_with_size+0x18>
 8010d72:	7803      	ldrb	r3, [r0, #0]
 8010d74:	2b2f      	cmp	r3, #47	@ 0x2f
 8010d76:	d012      	beq.n	8010d9e <rmw_validate_namespace_with_size+0x3e>
 8010d78:	aa01      	add	r2, sp, #4
 8010d7a:	4669      	mov	r1, sp
 8010d7c:	f008 fb14 	bl	80193a8 <rmw_validate_full_topic_name>
 8010d80:	b978      	cbnz	r0, 8010da2 <rmw_validate_namespace_with_size+0x42>
 8010d82:	9b00      	ldr	r3, [sp, #0]
 8010d84:	b14b      	cbz	r3, 8010d9a <rmw_validate_namespace_with_size+0x3a>
 8010d86:	2b07      	cmp	r3, #7
 8010d88:	d007      	beq.n	8010d9a <rmw_validate_namespace_with_size+0x3a>
 8010d8a:	1e5a      	subs	r2, r3, #1
 8010d8c:	2a05      	cmp	r2, #5
 8010d8e:	d82b      	bhi.n	8010de8 <rmw_validate_namespace_with_size+0x88>
 8010d90:	e8df f002 	tbb	[pc, r2]
 8010d94:	1e212427 	.word	0x1e212427
 8010d98:	141b      	.short	0x141b
 8010d9a:	2df5      	cmp	r5, #245	@ 0xf5
 8010d9c:	d803      	bhi.n	8010da6 <rmw_validate_namespace_with_size+0x46>
 8010d9e:	2000      	movs	r0, #0
 8010da0:	6020      	str	r0, [r4, #0]
 8010da2:	b042      	add	sp, #264	@ 0x108
 8010da4:	bd70      	pop	{r4, r5, r6, pc}
 8010da6:	2307      	movs	r3, #7
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	2e00      	cmp	r6, #0
 8010dac:	d0f9      	beq.n	8010da2 <rmw_validate_namespace_with_size+0x42>
 8010dae:	23f4      	movs	r3, #244	@ 0xf4
 8010db0:	6033      	str	r3, [r6, #0]
 8010db2:	e7f6      	b.n	8010da2 <rmw_validate_namespace_with_size+0x42>
 8010db4:	200b      	movs	r0, #11
 8010db6:	4770      	bx	lr
 8010db8:	200b      	movs	r0, #11
 8010dba:	e7f2      	b.n	8010da2 <rmw_validate_namespace_with_size+0x42>
 8010dbc:	2306      	movs	r3, #6
 8010dbe:	6023      	str	r3, [r4, #0]
 8010dc0:	2e00      	cmp	r6, #0
 8010dc2:	d0ee      	beq.n	8010da2 <rmw_validate_namespace_with_size+0x42>
 8010dc4:	9b01      	ldr	r3, [sp, #4]
 8010dc6:	6033      	str	r3, [r6, #0]
 8010dc8:	e7eb      	b.n	8010da2 <rmw_validate_namespace_with_size+0x42>
 8010dca:	2305      	movs	r3, #5
 8010dcc:	6023      	str	r3, [r4, #0]
 8010dce:	e7f7      	b.n	8010dc0 <rmw_validate_namespace_with_size+0x60>
 8010dd0:	2304      	movs	r3, #4
 8010dd2:	6023      	str	r3, [r4, #0]
 8010dd4:	e7f4      	b.n	8010dc0 <rmw_validate_namespace_with_size+0x60>
 8010dd6:	2303      	movs	r3, #3
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	e7f1      	b.n	8010dc0 <rmw_validate_namespace_with_size+0x60>
 8010ddc:	2302      	movs	r3, #2
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	e7ee      	b.n	8010dc0 <rmw_validate_namespace_with_size+0x60>
 8010de2:	2301      	movs	r3, #1
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	e7eb      	b.n	8010dc0 <rmw_validate_namespace_with_size+0x60>
 8010de8:	4a03      	ldr	r2, [pc, #12]	@ (8010df8 <rmw_validate_namespace_with_size+0x98>)
 8010dea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010dee:	a802      	add	r0, sp, #8
 8010df0:	f7ff febc 	bl	8010b6c <rcutils_snprintf>
 8010df4:	2001      	movs	r0, #1
 8010df6:	e7d4      	b.n	8010da2 <rmw_validate_namespace_with_size+0x42>
 8010df8:	0801db38 	.word	0x0801db38

08010dfc <rmw_validate_namespace>:
 8010dfc:	b168      	cbz	r0, 8010e1a <rmw_validate_namespace+0x1e>
 8010dfe:	b570      	push	{r4, r5, r6, lr}
 8010e00:	460d      	mov	r5, r1
 8010e02:	4616      	mov	r6, r2
 8010e04:	4604      	mov	r4, r0
 8010e06:	f7ef fa0d 	bl	8000224 <strlen>
 8010e0a:	4633      	mov	r3, r6
 8010e0c:	4601      	mov	r1, r0
 8010e0e:	462a      	mov	r2, r5
 8010e10:	4620      	mov	r0, r4
 8010e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e16:	f7ff bfa3 	b.w	8010d60 <rmw_validate_namespace_with_size>
 8010e1a:	200b      	movs	r0, #11
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop

08010e20 <rmw_namespace_validation_result_string>:
 8010e20:	2807      	cmp	r0, #7
 8010e22:	bf9a      	itte	ls
 8010e24:	4b02      	ldrls	r3, [pc, #8]	@ (8010e30 <rmw_namespace_validation_result_string+0x10>)
 8010e26:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010e2a:	4802      	ldrhi	r0, [pc, #8]	@ (8010e34 <rmw_namespace_validation_result_string+0x14>)
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	0801e3f4 	.word	0x0801e3f4
 8010e34:	0801db88 	.word	0x0801db88

08010e38 <rmw_validate_node_name>:
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d03b      	beq.n	8010eb4 <rmw_validate_node_name+0x7c>
 8010e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e40:	460d      	mov	r5, r1
 8010e42:	2900      	cmp	r1, #0
 8010e44:	d038      	beq.n	8010eb8 <rmw_validate_node_name+0x80>
 8010e46:	4616      	mov	r6, r2
 8010e48:	4604      	mov	r4, r0
 8010e4a:	f7ef f9eb 	bl	8000224 <strlen>
 8010e4e:	b1e0      	cbz	r0, 8010e8a <rmw_validate_node_name+0x52>
 8010e50:	1e63      	subs	r3, r4, #1
 8010e52:	eb03 0800 	add.w	r8, r3, r0
 8010e56:	f1c4 0101 	rsb	r1, r4, #1
 8010e5a:	18cf      	adds	r7, r1, r3
 8010e5c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010e60:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8010e64:	f02e 0c20 	bic.w	ip, lr, #32
 8010e68:	2a09      	cmp	r2, #9
 8010e6a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010e6e:	d914      	bls.n	8010e9a <rmw_validate_node_name+0x62>
 8010e70:	f1bc 0f19 	cmp.w	ip, #25
 8010e74:	d911      	bls.n	8010e9a <rmw_validate_node_name+0x62>
 8010e76:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010e7a:	d00e      	beq.n	8010e9a <rmw_validate_node_name+0x62>
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	602b      	str	r3, [r5, #0]
 8010e80:	b106      	cbz	r6, 8010e84 <rmw_validate_node_name+0x4c>
 8010e82:	6037      	str	r7, [r6, #0]
 8010e84:	2000      	movs	r0, #0
 8010e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	602b      	str	r3, [r5, #0]
 8010e8e:	2e00      	cmp	r6, #0
 8010e90:	d0f8      	beq.n	8010e84 <rmw_validate_node_name+0x4c>
 8010e92:	2000      	movs	r0, #0
 8010e94:	6030      	str	r0, [r6, #0]
 8010e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e9a:	4543      	cmp	r3, r8
 8010e9c:	d1dd      	bne.n	8010e5a <rmw_validate_node_name+0x22>
 8010e9e:	7822      	ldrb	r2, [r4, #0]
 8010ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8010ed8 <rmw_validate_node_name+0xa0>)
 8010ea2:	5cd3      	ldrb	r3, [r2, r3]
 8010ea4:	f013 0304 	ands.w	r3, r3, #4
 8010ea8:	d110      	bne.n	8010ecc <rmw_validate_node_name+0x94>
 8010eaa:	28ff      	cmp	r0, #255	@ 0xff
 8010eac:	d806      	bhi.n	8010ebc <rmw_validate_node_name+0x84>
 8010eae:	602b      	str	r3, [r5, #0]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	e7e8      	b.n	8010e86 <rmw_validate_node_name+0x4e>
 8010eb4:	200b      	movs	r0, #11
 8010eb6:	4770      	bx	lr
 8010eb8:	200b      	movs	r0, #11
 8010eba:	e7e4      	b.n	8010e86 <rmw_validate_node_name+0x4e>
 8010ebc:	2204      	movs	r2, #4
 8010ebe:	602a      	str	r2, [r5, #0]
 8010ec0:	2e00      	cmp	r6, #0
 8010ec2:	d0df      	beq.n	8010e84 <rmw_validate_node_name+0x4c>
 8010ec4:	22fe      	movs	r2, #254	@ 0xfe
 8010ec6:	6032      	str	r2, [r6, #0]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	e7dc      	b.n	8010e86 <rmw_validate_node_name+0x4e>
 8010ecc:	2303      	movs	r3, #3
 8010ece:	602b      	str	r3, [r5, #0]
 8010ed0:	2e00      	cmp	r6, #0
 8010ed2:	d1de      	bne.n	8010e92 <rmw_validate_node_name+0x5a>
 8010ed4:	e7d6      	b.n	8010e84 <rmw_validate_node_name+0x4c>
 8010ed6:	bf00      	nop
 8010ed8:	0801eccf 	.word	0x0801eccf

08010edc <rmw_node_name_validation_result_string>:
 8010edc:	2804      	cmp	r0, #4
 8010ede:	bf9a      	itte	ls
 8010ee0:	4b02      	ldrls	r3, [pc, #8]	@ (8010eec <rmw_node_name_validation_result_string+0x10>)
 8010ee2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010ee6:	4802      	ldrhi	r0, [pc, #8]	@ (8010ef0 <rmw_node_name_validation_result_string+0x14>)
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	0801e414 	.word	0x0801e414
 8010ef0:	0801dd30 	.word	0x0801dd30

08010ef4 <rmw_uros_set_custom_transport>:
 8010ef4:	b470      	push	{r4, r5, r6}
 8010ef6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010efa:	b162      	cbz	r2, 8010f16 <rmw_uros_set_custom_transport+0x22>
 8010efc:	b15b      	cbz	r3, 8010f16 <rmw_uros_set_custom_transport+0x22>
 8010efe:	b155      	cbz	r5, 8010f16 <rmw_uros_set_custom_transport+0x22>
 8010f00:	b14e      	cbz	r6, 8010f16 <rmw_uros_set_custom_transport+0x22>
 8010f02:	4c06      	ldr	r4, [pc, #24]	@ (8010f1c <rmw_uros_set_custom_transport+0x28>)
 8010f04:	7020      	strb	r0, [r4, #0]
 8010f06:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010f0a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010f0e:	6166      	str	r6, [r4, #20]
 8010f10:	2000      	movs	r0, #0
 8010f12:	bc70      	pop	{r4, r5, r6}
 8010f14:	4770      	bx	lr
 8010f16:	200b      	movs	r0, #11
 8010f18:	bc70      	pop	{r4, r5, r6}
 8010f1a:	4770      	bx	lr
 8010f1c:	2000d184 	.word	0x2000d184

08010f20 <rmw_uros_ping_agent>:
 8010f20:	b570      	push	{r4, r5, r6, lr}
 8010f22:	4b22      	ldr	r3, [pc, #136]	@ (8010fac <rmw_uros_ping_agent+0x8c>)
 8010f24:	7b1a      	ldrb	r2, [r3, #12]
 8010f26:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010f2a:	4605      	mov	r5, r0
 8010f2c:	460e      	mov	r6, r1
 8010f2e:	b10a      	cbz	r2, 8010f34 <rmw_uros_ping_agent+0x14>
 8010f30:	681c      	ldr	r4, [r3, #0]
 8010f32:	b9bc      	cbnz	r4, 8010f64 <rmw_uros_ping_agent+0x44>
 8010f34:	4b1e      	ldr	r3, [pc, #120]	@ (8010fb0 <rmw_uros_ping_agent+0x90>)
 8010f36:	781a      	ldrb	r2, [r3, #0]
 8010f38:	6918      	ldr	r0, [r3, #16]
 8010f3a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8010f3e:	685a      	ldr	r2, [r3, #4]
 8010f40:	92a3      	str	r2, [sp, #652]	@ 0x28c
 8010f42:	2100      	movs	r1, #0
 8010f44:	68da      	ldr	r2, [r3, #12]
 8010f46:	909c      	str	r0, [sp, #624]	@ 0x270
 8010f48:	6958      	ldr	r0, [r3, #20]
 8010f4a:	929b      	str	r2, [sp, #620]	@ 0x26c
 8010f4c:	689b      	ldr	r3, [r3, #8]
 8010f4e:	909d      	str	r0, [sp, #628]	@ 0x274
 8010f50:	466a      	mov	r2, sp
 8010f52:	4608      	mov	r0, r1
 8010f54:	939a      	str	r3, [sp, #616]	@ 0x268
 8010f56:	f000 ffbd 	bl	8011ed4 <rmw_uxrce_transport_init>
 8010f5a:	b198      	cbz	r0, 8010f84 <rmw_uros_ping_agent+0x64>
 8010f5c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010f60:	bd70      	pop	{r4, r5, r6, pc}
 8010f62:	b9f0      	cbnz	r0, 8010fa2 <rmw_uros_ping_agent+0x82>
 8010f64:	68a0      	ldr	r0, [r4, #8]
 8010f66:	4632      	mov	r2, r6
 8010f68:	4629      	mov	r1, r5
 8010f6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010f6e:	f002 fba1 	bl	80136b4 <uxr_ping_agent_session>
 8010f72:	6864      	ldr	r4, [r4, #4]
 8010f74:	2c00      	cmp	r4, #0
 8010f76:	d1f4      	bne.n	8010f62 <rmw_uros_ping_agent+0x42>
 8010f78:	f080 0001 	eor.w	r0, r0, #1
 8010f7c:	b2c0      	uxtb	r0, r0
 8010f7e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010f82:	bd70      	pop	{r4, r5, r6, pc}
 8010f84:	4632      	mov	r2, r6
 8010f86:	4629      	mov	r1, r5
 8010f88:	a89e      	add	r0, sp, #632	@ 0x278
 8010f8a:	f002 fbdf 	bl	801374c <uxr_ping_agent_attempts>
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4668      	mov	r0, sp
 8010f92:	f002 fb5b 	bl	801364c <uxr_close_custom_transport>
 8010f96:	f084 0001 	eor.w	r0, r4, #1
 8010f9a:	b2c0      	uxtb	r0, r0
 8010f9c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010fa0:	bd70      	pop	{r4, r5, r6, pc}
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010fa8:	bd70      	pop	{r4, r5, r6, pc}
 8010faa:	bf00      	nop
 8010fac:	20011adc 	.word	0x20011adc
 8010fb0:	2000d184 	.word	0x2000d184

08010fb4 <rmw_init_options_init>:
 8010fb4:	b084      	sub	sp, #16
 8010fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fb8:	b083      	sub	sp, #12
 8010fba:	ad09      	add	r5, sp, #36	@ 0x24
 8010fbc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010fc0:	b130      	cbz	r0, 8010fd0 <rmw_init_options_init+0x1c>
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	4628      	mov	r0, r5
 8010fc6:	f7ff fbe7 	bl	8010798 <rcutils_allocator_is_valid>
 8010fca:	b108      	cbz	r0, 8010fd0 <rmw_init_options_init+0x1c>
 8010fcc:	68a6      	ldr	r6, [r4, #8]
 8010fce:	b12e      	cbz	r6, 8010fdc <rmw_init_options_init+0x28>
 8010fd0:	200b      	movs	r0, #11
 8010fd2:	b003      	add	sp, #12
 8010fd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fd8:	b004      	add	sp, #16
 8010fda:	4770      	bx	lr
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2300      	movs	r3, #0
 8010fe0:	e9c4 2300 	strd	r2, r3, [r4]
 8010fe4:	4b20      	ldr	r3, [pc, #128]	@ (8011068 <rmw_init_options_init+0xb4>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	60a3      	str	r3, [r4, #8]
 8010fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fec:	f104 0c20 	add.w	ip, r4, #32
 8010ff0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ff4:	466f      	mov	r7, sp
 8010ff6:	682b      	ldr	r3, [r5, #0]
 8010ff8:	f8cc 3000 	str.w	r3, [ip]
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	61e6      	str	r6, [r4, #28]
 8011000:	60e6      	str	r6, [r4, #12]
 8011002:	f7ff fe81 	bl	8010d08 <rmw_get_default_security_options>
 8011006:	e897 0003 	ldmia.w	r7, {r0, r1}
 801100a:	f104 0310 	add.w	r3, r4, #16
 801100e:	e883 0003 	stmia.w	r3, {r0, r1}
 8011012:	2203      	movs	r2, #3
 8011014:	4815      	ldr	r0, [pc, #84]	@ (801106c <rmw_init_options_init+0xb8>)
 8011016:	4916      	ldr	r1, [pc, #88]	@ (8011070 <rmw_init_options_init+0xbc>)
 8011018:	7626      	strb	r6, [r4, #24]
 801101a:	f001 f88b 	bl	8012134 <rmw_uxrce_init_init_options_impl_memory>
 801101e:	4813      	ldr	r0, [pc, #76]	@ (801106c <rmw_init_options_init+0xb8>)
 8011020:	f008 fb20 	bl	8019664 <get_memory>
 8011024:	b1f0      	cbz	r0, 8011064 <rmw_init_options_init+0xb0>
 8011026:	4a13      	ldr	r2, [pc, #76]	@ (8011074 <rmw_init_options_init+0xc0>)
 8011028:	6883      	ldr	r3, [r0, #8]
 801102a:	6851      	ldr	r1, [r2, #4]
 801102c:	7810      	ldrb	r0, [r2, #0]
 801102e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011030:	7418      	strb	r0, [r3, #16]
 8011032:	6159      	str	r1, [r3, #20]
 8011034:	68d1      	ldr	r1, [r2, #12]
 8011036:	61d9      	str	r1, [r3, #28]
 8011038:	6911      	ldr	r1, [r2, #16]
 801103a:	6219      	str	r1, [r3, #32]
 801103c:	6951      	ldr	r1, [r2, #20]
 801103e:	6892      	ldr	r2, [r2, #8]
 8011040:	619a      	str	r2, [r3, #24]
 8011042:	6259      	str	r1, [r3, #36]	@ 0x24
 8011044:	f004 fc50 	bl	80158e8 <uxr_nanos>
 8011048:	f00b f8bc 	bl	801c1c4 <srand>
 801104c:	f00b f8e8 	bl	801c220 <rand>
 8011050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011052:	6298      	str	r0, [r3, #40]	@ 0x28
 8011054:	2800      	cmp	r0, #0
 8011056:	d0f9      	beq.n	801104c <rmw_init_options_init+0x98>
 8011058:	2000      	movs	r0, #0
 801105a:	b003      	add	sp, #12
 801105c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011060:	b004      	add	sp, #16
 8011062:	4770      	bx	lr
 8011064:	2001      	movs	r0, #1
 8011066:	e7b4      	b.n	8010fd2 <rmw_init_options_init+0x1e>
 8011068:	0801e7c8 	.word	0x0801e7c8
 801106c:	20011a9c 	.word	0x20011a9c
 8011070:	2000d338 	.word	0x2000d338
 8011074:	2000d184 	.word	0x2000d184

08011078 <rmw_init_options_copy>:
 8011078:	b570      	push	{r4, r5, r6, lr}
 801107a:	b088      	sub	sp, #32
 801107c:	b160      	cbz	r0, 8011098 <rmw_init_options_copy+0x20>
 801107e:	460d      	mov	r5, r1
 8011080:	b151      	cbz	r1, 8011098 <rmw_init_options_copy+0x20>
 8011082:	4604      	mov	r4, r0
 8011084:	6880      	ldr	r0, [r0, #8]
 8011086:	b128      	cbz	r0, 8011094 <rmw_init_options_copy+0x1c>
 8011088:	4b33      	ldr	r3, [pc, #204]	@ (8011158 <rmw_init_options_copy+0xe0>)
 801108a:	6819      	ldr	r1, [r3, #0]
 801108c:	f7ef f8c0 	bl	8000210 <strcmp>
 8011090:	2800      	cmp	r0, #0
 8011092:	d154      	bne.n	801113e <rmw_init_options_copy+0xc6>
 8011094:	68ab      	ldr	r3, [r5, #8]
 8011096:	b11b      	cbz	r3, 80110a0 <rmw_init_options_copy+0x28>
 8011098:	240b      	movs	r4, #11
 801109a:	4620      	mov	r0, r4
 801109c:	b008      	add	sp, #32
 801109e:	bd70      	pop	{r4, r5, r6, pc}
 80110a0:	4623      	mov	r3, r4
 80110a2:	462a      	mov	r2, r5
 80110a4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80110a8:	f8d3 c000 	ldr.w	ip, [r3]
 80110ac:	6858      	ldr	r0, [r3, #4]
 80110ae:	6899      	ldr	r1, [r3, #8]
 80110b0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80110b4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80110b8:	3310      	adds	r3, #16
 80110ba:	42b3      	cmp	r3, r6
 80110bc:	f8c2 c000 	str.w	ip, [r2]
 80110c0:	6050      	str	r0, [r2, #4]
 80110c2:	6091      	str	r1, [r2, #8]
 80110c4:	f102 0210 	add.w	r2, r2, #16
 80110c8:	d1ee      	bne.n	80110a8 <rmw_init_options_copy+0x30>
 80110ca:	6819      	ldr	r1, [r3, #0]
 80110cc:	685b      	ldr	r3, [r3, #4]
 80110ce:	6053      	str	r3, [r2, #4]
 80110d0:	6011      	str	r1, [r2, #0]
 80110d2:	f104 0e20 	add.w	lr, r4, #32
 80110d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110da:	f10d 0c0c 	add.w	ip, sp, #12
 80110de:	4666      	mov	r6, ip
 80110e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110e4:	f8de 3000 	ldr.w	r3, [lr]
 80110e8:	f8cc 3000 	str.w	r3, [ip]
 80110ec:	4630      	mov	r0, r6
 80110ee:	f7ff fb53 	bl	8010798 <rcutils_allocator_is_valid>
 80110f2:	2800      	cmp	r0, #0
 80110f4:	d0d0      	beq.n	8011098 <rmw_init_options_copy+0x20>
 80110f6:	ab08      	add	r3, sp, #32
 80110f8:	e913 0003 	ldmdb	r3, {r0, r1}
 80110fc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011100:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8011104:	69e0      	ldr	r0, [r4, #28]
 8011106:	f7ff fd5d 	bl	8010bc4 <rcutils_strdup>
 801110a:	61e8      	str	r0, [r5, #28]
 801110c:	69e3      	ldr	r3, [r4, #28]
 801110e:	b103      	cbz	r3, 8011112 <rmw_init_options_copy+0x9a>
 8011110:	b1f8      	cbz	r0, 8011152 <rmw_init_options_copy+0xda>
 8011112:	4812      	ldr	r0, [pc, #72]	@ (801115c <rmw_init_options_copy+0xe4>)
 8011114:	f008 faa6 	bl	8019664 <get_memory>
 8011118:	b1a8      	cbz	r0, 8011146 <rmw_init_options_copy+0xce>
 801111a:	6883      	ldr	r3, [r0, #8]
 801111c:	636b      	str	r3, [r5, #52]	@ 0x34
 801111e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8011120:	f102 0c10 	add.w	ip, r2, #16
 8011124:	f103 0510 	add.w	r5, r3, #16
 8011128:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801112c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801112e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011132:	2400      	movs	r4, #0
 8011134:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011138:	4620      	mov	r0, r4
 801113a:	b008      	add	sp, #32
 801113c:	bd70      	pop	{r4, r5, r6, pc}
 801113e:	240c      	movs	r4, #12
 8011140:	4620      	mov	r0, r4
 8011142:	b008      	add	sp, #32
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	9b04      	ldr	r3, [sp, #16]
 8011148:	9907      	ldr	r1, [sp, #28]
 801114a:	69e8      	ldr	r0, [r5, #28]
 801114c:	4798      	blx	r3
 801114e:	2401      	movs	r4, #1
 8011150:	e7a3      	b.n	801109a <rmw_init_options_copy+0x22>
 8011152:	240a      	movs	r4, #10
 8011154:	e7a1      	b.n	801109a <rmw_init_options_copy+0x22>
 8011156:	bf00      	nop
 8011158:	0801e7c8 	.word	0x0801e7c8
 801115c:	20011a9c 	.word	0x20011a9c

08011160 <rmw_init_options_fini>:
 8011160:	2800      	cmp	r0, #0
 8011162:	d041      	beq.n	80111e8 <rmw_init_options_fini+0x88>
 8011164:	b510      	push	{r4, lr}
 8011166:	4604      	mov	r4, r0
 8011168:	b08e      	sub	sp, #56	@ 0x38
 801116a:	3020      	adds	r0, #32
 801116c:	f7ff fb14 	bl	8010798 <rcutils_allocator_is_valid>
 8011170:	b380      	cbz	r0, 80111d4 <rmw_init_options_fini+0x74>
 8011172:	68a0      	ldr	r0, [r4, #8]
 8011174:	b120      	cbz	r0, 8011180 <rmw_init_options_fini+0x20>
 8011176:	4b1e      	ldr	r3, [pc, #120]	@ (80111f0 <rmw_init_options_fini+0x90>)
 8011178:	6819      	ldr	r1, [r3, #0]
 801117a:	f7ef f849 	bl	8000210 <strcmp>
 801117e:	bb88      	cbnz	r0, 80111e4 <rmw_init_options_fini+0x84>
 8011180:	4b1c      	ldr	r3, [pc, #112]	@ (80111f4 <rmw_init_options_fini+0x94>)
 8011182:	6819      	ldr	r1, [r3, #0]
 8011184:	b351      	cbz	r1, 80111dc <rmw_init_options_fini+0x7c>
 8011186:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8011188:	e001      	b.n	801118e <rmw_init_options_fini+0x2e>
 801118a:	6849      	ldr	r1, [r1, #4]
 801118c:	b331      	cbz	r1, 80111dc <rmw_init_options_fini+0x7c>
 801118e:	688b      	ldr	r3, [r1, #8]
 8011190:	429a      	cmp	r2, r3
 8011192:	d1fa      	bne.n	801118a <rmw_init_options_fini+0x2a>
 8011194:	4817      	ldr	r0, [pc, #92]	@ (80111f4 <rmw_init_options_fini+0x94>)
 8011196:	f008 fa75 	bl	8019684 <put_memory>
 801119a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801119c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801119e:	69e0      	ldr	r0, [r4, #28]
 80111a0:	4798      	blx	r3
 80111a2:	4668      	mov	r0, sp
 80111a4:	f7ff fd9c 	bl	8010ce0 <rmw_get_zero_initialized_init_options>
 80111a8:	46ee      	mov	lr, sp
 80111aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111ae:	46a4      	mov	ip, r4
 80111b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111c4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80111c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80111cc:	2300      	movs	r3, #0
 80111ce:	4618      	mov	r0, r3
 80111d0:	b00e      	add	sp, #56	@ 0x38
 80111d2:	bd10      	pop	{r4, pc}
 80111d4:	230b      	movs	r3, #11
 80111d6:	4618      	mov	r0, r3
 80111d8:	b00e      	add	sp, #56	@ 0x38
 80111da:	bd10      	pop	{r4, pc}
 80111dc:	2301      	movs	r3, #1
 80111de:	4618      	mov	r0, r3
 80111e0:	b00e      	add	sp, #56	@ 0x38
 80111e2:	bd10      	pop	{r4, pc}
 80111e4:	230c      	movs	r3, #12
 80111e6:	e7f2      	b.n	80111ce <rmw_init_options_fini+0x6e>
 80111e8:	230b      	movs	r3, #11
 80111ea:	4618      	mov	r0, r3
 80111ec:	4770      	bx	lr
 80111ee:	bf00      	nop
 80111f0:	0801e7c8 	.word	0x0801e7c8
 80111f4:	20011a9c 	.word	0x20011a9c

080111f8 <rmw_init>:
 80111f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111fc:	b083      	sub	sp, #12
 80111fe:	2800      	cmp	r0, #0
 8011200:	f000 80d3 	beq.w	80113aa <rmw_init+0x1b2>
 8011204:	460e      	mov	r6, r1
 8011206:	2900      	cmp	r1, #0
 8011208:	f000 80cf 	beq.w	80113aa <rmw_init+0x1b2>
 801120c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801120e:	4605      	mov	r5, r0
 8011210:	2b00      	cmp	r3, #0
 8011212:	f000 80ca 	beq.w	80113aa <rmw_init+0x1b2>
 8011216:	4b78      	ldr	r3, [pc, #480]	@ (80113f8 <rmw_init+0x200>)
 8011218:	6880      	ldr	r0, [r0, #8]
 801121a:	681f      	ldr	r7, [r3, #0]
 801121c:	b128      	cbz	r0, 801122a <rmw_init+0x32>
 801121e:	4639      	mov	r1, r7
 8011220:	f7ee fff6 	bl	8000210 <strcmp>
 8011224:	2800      	cmp	r0, #0
 8011226:	f040 80ca 	bne.w	80113be <rmw_init+0x1c6>
 801122a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801122e:	4c73      	ldr	r4, [pc, #460]	@ (80113fc <rmw_init+0x204>)
 8011230:	4973      	ldr	r1, [pc, #460]	@ (8011400 <rmw_init+0x208>)
 8011232:	4874      	ldr	r0, [pc, #464]	@ (8011404 <rmw_init+0x20c>)
 8011234:	60b7      	str	r7, [r6, #8]
 8011236:	e9c6 2300 	strd	r2, r3, [r6]
 801123a:	68eb      	ldr	r3, [r5, #12]
 801123c:	64b3      	str	r3, [r6, #72]	@ 0x48
 801123e:	2201      	movs	r2, #1
 8011240:	f000 ff18 	bl	8012074 <rmw_uxrce_init_session_memory>
 8011244:	4620      	mov	r0, r4
 8011246:	4970      	ldr	r1, [pc, #448]	@ (8011408 <rmw_init+0x210>)
 8011248:	2204      	movs	r2, #4
 801124a:	f000 ff53 	bl	80120f4 <rmw_uxrce_init_static_input_buffer_memory>
 801124e:	f04f 0800 	mov.w	r8, #0
 8011252:	486c      	ldr	r0, [pc, #432]	@ (8011404 <rmw_init+0x20c>)
 8011254:	f884 800d 	strb.w	r8, [r4, #13]
 8011258:	f008 fa04 	bl	8019664 <get_memory>
 801125c:	2800      	cmp	r0, #0
 801125e:	f000 80a9 	beq.w	80113b4 <rmw_init+0x1bc>
 8011262:	6884      	ldr	r4, [r0, #8]
 8011264:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8011266:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8011268:	f890 c010 	ldrb.w	ip, [r0, #16]
 801126c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011270:	9101      	str	r1, [sp, #4]
 8011272:	6a00      	ldr	r0, [r0, #32]
 8011274:	9000      	str	r0, [sp, #0]
 8011276:	f104 0910 	add.w	r9, r4, #16
 801127a:	4661      	mov	r1, ip
 801127c:	4648      	mov	r0, r9
 801127e:	f002 f9a3 	bl	80135c8 <uxr_set_custom_transport_callbacks>
 8011282:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8011286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801128a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801128e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8011292:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8011296:	495d      	ldr	r1, [pc, #372]	@ (801140c <rmw_init+0x214>)
 8011298:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801129c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80112a0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80112a4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80112a8:	4859      	ldr	r0, [pc, #356]	@ (8011410 <rmw_init+0x218>)
 80112aa:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80112ae:	2201      	movs	r2, #1
 80112b0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80112b2:	f000 febf 	bl	8012034 <rmw_uxrce_init_node_memory>
 80112b6:	4957      	ldr	r1, [pc, #348]	@ (8011414 <rmw_init+0x21c>)
 80112b8:	4857      	ldr	r0, [pc, #348]	@ (8011418 <rmw_init+0x220>)
 80112ba:	2205      	movs	r2, #5
 80112bc:	f000 fe9a 	bl	8011ff4 <rmw_uxrce_init_subscription_memory>
 80112c0:	4956      	ldr	r1, [pc, #344]	@ (801141c <rmw_init+0x224>)
 80112c2:	4857      	ldr	r0, [pc, #348]	@ (8011420 <rmw_init+0x228>)
 80112c4:	220a      	movs	r2, #10
 80112c6:	f000 fe75 	bl	8011fb4 <rmw_uxrce_init_publisher_memory>
 80112ca:	4956      	ldr	r1, [pc, #344]	@ (8011424 <rmw_init+0x22c>)
 80112cc:	4856      	ldr	r0, [pc, #344]	@ (8011428 <rmw_init+0x230>)
 80112ce:	2201      	movs	r2, #1
 80112d0:	f000 fe30 	bl	8011f34 <rmw_uxrce_init_service_memory>
 80112d4:	4955      	ldr	r1, [pc, #340]	@ (801142c <rmw_init+0x234>)
 80112d6:	4856      	ldr	r0, [pc, #344]	@ (8011430 <rmw_init+0x238>)
 80112d8:	2201      	movs	r2, #1
 80112da:	f000 fe4b 	bl	8011f74 <rmw_uxrce_init_client_memory>
 80112de:	4955      	ldr	r1, [pc, #340]	@ (8011434 <rmw_init+0x23c>)
 80112e0:	4855      	ldr	r0, [pc, #340]	@ (8011438 <rmw_init+0x240>)
 80112e2:	220f      	movs	r2, #15
 80112e4:	f000 fee6 	bl	80120b4 <rmw_uxrce_init_topic_memory>
 80112e8:	4954      	ldr	r1, [pc, #336]	@ (801143c <rmw_init+0x244>)
 80112ea:	4855      	ldr	r0, [pc, #340]	@ (8011440 <rmw_init+0x248>)
 80112ec:	2203      	movs	r2, #3
 80112ee:	f000 ff21 	bl	8012134 <rmw_uxrce_init_init_options_impl_memory>
 80112f2:	4954      	ldr	r1, [pc, #336]	@ (8011444 <rmw_init+0x24c>)
 80112f4:	4854      	ldr	r0, [pc, #336]	@ (8011448 <rmw_init+0x250>)
 80112f6:	2204      	movs	r2, #4
 80112f8:	f000 ff3c 	bl	8012174 <rmw_uxrce_init_wait_set_memory>
 80112fc:	4953      	ldr	r1, [pc, #332]	@ (801144c <rmw_init+0x254>)
 80112fe:	4854      	ldr	r0, [pc, #336]	@ (8011450 <rmw_init+0x258>)
 8011300:	2204      	movs	r2, #4
 8011302:	f000 ff57 	bl	80121b4 <rmw_uxrce_init_guard_condition_memory>
 8011306:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8011308:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801130a:	4642      	mov	r2, r8
 801130c:	f000 fde2 	bl	8011ed4 <rmw_uxrce_transport_init>
 8011310:	4607      	mov	r7, r0
 8011312:	2800      	cmp	r0, #0
 8011314:	d158      	bne.n	80113c8 <rmw_init+0x1d0>
 8011316:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8011318:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801131c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801131e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8011322:	4628      	mov	r0, r5
 8011324:	f002 fc88 	bl	8013c38 <uxr_init_session>
 8011328:	494a      	ldr	r1, [pc, #296]	@ (8011454 <rmw_init+0x25c>)
 801132a:	4622      	mov	r2, r4
 801132c:	4628      	mov	r0, r5
 801132e:	f002 fca7 	bl	8013c80 <uxr_set_topic_callback>
 8011332:	4949      	ldr	r1, [pc, #292]	@ (8011458 <rmw_init+0x260>)
 8011334:	463a      	mov	r2, r7
 8011336:	4628      	mov	r0, r5
 8011338:	f002 fc9e 	bl	8013c78 <uxr_set_status_callback>
 801133c:	4947      	ldr	r1, [pc, #284]	@ (801145c <rmw_init+0x264>)
 801133e:	463a      	mov	r2, r7
 8011340:	4628      	mov	r0, r5
 8011342:	f002 fca1 	bl	8013c88 <uxr_set_request_callback>
 8011346:	4946      	ldr	r1, [pc, #280]	@ (8011460 <rmw_init+0x268>)
 8011348:	463a      	mov	r2, r7
 801134a:	4628      	mov	r0, r5
 801134c:	f002 fca0 	bl	8013c90 <uxr_set_reply_callback>
 8011350:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011354:	2304      	movs	r3, #4
 8011356:	0092      	lsls	r2, r2, #2
 8011358:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801135c:	4628      	mov	r0, r5
 801135e:	f002 fcd5 	bl	8013d0c <uxr_create_input_reliable_stream>
 8011362:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8011366:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801136a:	0092      	lsls	r2, r2, #2
 801136c:	2304      	movs	r3, #4
 801136e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8011372:	4628      	mov	r0, r5
 8011374:	f002 fca2 	bl	8013cbc <uxr_create_output_reliable_stream>
 8011378:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801137c:	4628      	mov	r0, r5
 801137e:	f002 fcbf 	bl	8013d00 <uxr_create_input_best_effort_stream>
 8011382:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8011386:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801138a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801138e:	3114      	adds	r1, #20
 8011390:	4628      	mov	r0, r5
 8011392:	f002 fc81 	bl	8013c98 <uxr_create_output_best_effort_stream>
 8011396:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801139a:	4628      	mov	r0, r5
 801139c:	f003 fa36 	bl	801480c <uxr_create_session>
 80113a0:	b1f8      	cbz	r0, 80113e2 <rmw_init+0x1ea>
 80113a2:	4638      	mov	r0, r7
 80113a4:	b003      	add	sp, #12
 80113a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113aa:	270b      	movs	r7, #11
 80113ac:	4638      	mov	r0, r7
 80113ae:	b003      	add	sp, #12
 80113b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113b4:	2701      	movs	r7, #1
 80113b6:	4638      	mov	r0, r7
 80113b8:	b003      	add	sp, #12
 80113ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113be:	270c      	movs	r7, #12
 80113c0:	4638      	mov	r0, r7
 80113c2:	b003      	add	sp, #12
 80113c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113c8:	4648      	mov	r0, r9
 80113ca:	f002 f93f 	bl	801364c <uxr_close_custom_transport>
 80113ce:	480d      	ldr	r0, [pc, #52]	@ (8011404 <rmw_init+0x20c>)
 80113d0:	4621      	mov	r1, r4
 80113d2:	f008 f957 	bl	8019684 <put_memory>
 80113d6:	4638      	mov	r0, r7
 80113d8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80113dc:	b003      	add	sp, #12
 80113de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113e2:	4648      	mov	r0, r9
 80113e4:	f002 f932 	bl	801364c <uxr_close_custom_transport>
 80113e8:	4806      	ldr	r0, [pc, #24]	@ (8011404 <rmw_init+0x20c>)
 80113ea:	4621      	mov	r1, r4
 80113ec:	f008 f94a 	bl	8019684 <put_memory>
 80113f0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 80113f2:	2701      	movs	r7, #1
 80113f4:	e7d5      	b.n	80113a2 <rmw_init+0x1aa>
 80113f6:	bf00      	nop
 80113f8:	0801e7c8 	.word	0x0801e7c8
 80113fc:	20011aec 	.word	0x20011aec
 8011400:	2000dd98 	.word	0x2000dd98
 8011404:	20011adc 	.word	0x20011adc
 8011408:	2000f340 	.word	0x2000f340
 801140c:	2000d3bc 	.word	0x2000d3bc
 8011410:	20011aac 	.word	0x20011aac
 8011414:	20011440 	.word	0x20011440
 8011418:	20011afc 	.word	0x20011afc
 801141c:	2000d460 	.word	0x2000d460
 8011420:	20011abc 	.word	0x20011abc
 8011424:	2000dcd0 	.word	0x2000dcd0
 8011428:	20011acc 	.word	0x20011acc
 801142c:	2000d1f0 	.word	0x2000d1f0
 8011430:	2000d1dc 	.word	0x2000d1dc
 8011434:	20011878 	.word	0x20011878
 8011438:	20011b0c 	.word	0x20011b0c
 801143c:	2000d338 	.word	0x2000d338
 8011440:	20011a9c 	.word	0x20011a9c
 8011444:	20011a1c 	.word	0x20011a1c
 8011448:	20011b1c 	.word	0x20011b1c
 801144c:	2000d2b8 	.word	0x2000d2b8
 8011450:	20011a8c 	.word	0x20011a8c
 8011454:	0801949d 	.word	0x0801949d
 8011458:	08019495 	.word	0x08019495
 801145c:	08019535 	.word	0x08019535
 8011460:	080195d1 	.word	0x080195d1

08011464 <rmw_shutdown>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	b094      	sub	sp, #80	@ 0x50
 8011468:	2800      	cmp	r0, #0
 801146a:	d050      	beq.n	801150e <rmw_shutdown+0xaa>
 801146c:	4605      	mov	r5, r0
 801146e:	6880      	ldr	r0, [r0, #8]
 8011470:	b128      	cbz	r0, 801147e <rmw_shutdown+0x1a>
 8011472:	4b2b      	ldr	r3, [pc, #172]	@ (8011520 <rmw_shutdown+0xbc>)
 8011474:	6819      	ldr	r1, [r3, #0]
 8011476:	f7ee fecb 	bl	8000210 <strcmp>
 801147a:	2800      	cmp	r0, #0
 801147c:	d143      	bne.n	8011506 <rmw_shutdown+0xa2>
 801147e:	4b29      	ldr	r3, [pc, #164]	@ (8011524 <rmw_shutdown+0xc0>)
 8011480:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011482:	681c      	ldr	r4, [r3, #0]
 8011484:	2c00      	cmp	r4, #0
 8011486:	d046      	beq.n	8011516 <rmw_shutdown+0xb2>
 8011488:	2600      	movs	r6, #0
 801148a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801148e:	6902      	ldr	r2, [r0, #16]
 8011490:	428a      	cmp	r2, r1
 8011492:	d024      	beq.n	80114de <rmw_shutdown+0x7a>
 8011494:	2c00      	cmp	r4, #0
 8011496:	d1f8      	bne.n	801148a <rmw_shutdown+0x26>
 8011498:	b189      	cbz	r1, 80114be <rmw_shutdown+0x5a>
 801149a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801149e:	789b      	ldrb	r3, [r3, #2]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80114a6:	bf14      	ite	ne
 80114a8:	210a      	movne	r1, #10
 80114aa:	2100      	moveq	r1, #0
 80114ac:	f003 f986 	bl	80147bc <uxr_delete_session_retries>
 80114b0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80114b2:	f000 fe9f 	bl	80121f4 <rmw_uxrce_fini_session_memory>
 80114b6:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80114b8:	3010      	adds	r0, #16
 80114ba:	f002 f8c7 	bl	801364c <uxr_close_custom_transport>
 80114be:	2300      	movs	r3, #0
 80114c0:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80114c2:	b1b6      	cbz	r6, 80114f2 <rmw_shutdown+0x8e>
 80114c4:	4d18      	ldr	r5, [pc, #96]	@ (8011528 <rmw_shutdown+0xc4>)
 80114c6:	682c      	ldr	r4, [r5, #0]
 80114c8:	b134      	cbz	r4, 80114d8 <rmw_shutdown+0x74>
 80114ca:	4621      	mov	r1, r4
 80114cc:	6864      	ldr	r4, [r4, #4]
 80114ce:	4628      	mov	r0, r5
 80114d0:	f008 f8d8 	bl	8019684 <put_memory>
 80114d4:	2c00      	cmp	r4, #0
 80114d6:	d1f8      	bne.n	80114ca <rmw_shutdown+0x66>
 80114d8:	4630      	mov	r0, r6
 80114da:	b014      	add	sp, #80	@ 0x50
 80114dc:	bd70      	pop	{r4, r5, r6, pc}
 80114de:	3018      	adds	r0, #24
 80114e0:	f000 f8e8 	bl	80116b4 <rmw_destroy_node>
 80114e4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80114e6:	4606      	mov	r6, r0
 80114e8:	2c00      	cmp	r4, #0
 80114ea:	d1ce      	bne.n	801148a <rmw_shutdown+0x26>
 80114ec:	2900      	cmp	r1, #0
 80114ee:	d1d4      	bne.n	801149a <rmw_shutdown+0x36>
 80114f0:	e7e5      	b.n	80114be <rmw_shutdown+0x5a>
 80114f2:	4668      	mov	r0, sp
 80114f4:	f007 fec4 	bl	8019280 <rmw_get_zero_initialized_context>
 80114f8:	2250      	movs	r2, #80	@ 0x50
 80114fa:	4669      	mov	r1, sp
 80114fc:	4628      	mov	r0, r5
 80114fe:	f00b fae6 	bl	801cace <memcpy>
 8011502:	2600      	movs	r6, #0
 8011504:	e7de      	b.n	80114c4 <rmw_shutdown+0x60>
 8011506:	260c      	movs	r6, #12
 8011508:	4630      	mov	r0, r6
 801150a:	b014      	add	sp, #80	@ 0x50
 801150c:	bd70      	pop	{r4, r5, r6, pc}
 801150e:	260b      	movs	r6, #11
 8011510:	4630      	mov	r0, r6
 8011512:	b014      	add	sp, #80	@ 0x50
 8011514:	bd70      	pop	{r4, r5, r6, pc}
 8011516:	2900      	cmp	r1, #0
 8011518:	d0eb      	beq.n	80114f2 <rmw_shutdown+0x8e>
 801151a:	4626      	mov	r6, r4
 801151c:	e7bd      	b.n	801149a <rmw_shutdown+0x36>
 801151e:	bf00      	nop
 8011520:	0801e7c8 	.word	0x0801e7c8
 8011524:	20011aac 	.word	0x20011aac
 8011528:	20011aec 	.word	0x20011aec

0801152c <rmw_context_fini>:
 801152c:	4b17      	ldr	r3, [pc, #92]	@ (801158c <rmw_context_fini+0x60>)
 801152e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8011530:	b570      	push	{r4, r5, r6, lr}
 8011532:	681c      	ldr	r4, [r3, #0]
 8011534:	4605      	mov	r5, r0
 8011536:	b334      	cbz	r4, 8011586 <rmw_context_fini+0x5a>
 8011538:	2600      	movs	r6, #0
 801153a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801153e:	6902      	ldr	r2, [r0, #16]
 8011540:	428a      	cmp	r2, r1
 8011542:	d018      	beq.n	8011576 <rmw_context_fini+0x4a>
 8011544:	2c00      	cmp	r4, #0
 8011546:	d1f8      	bne.n	801153a <rmw_context_fini+0xe>
 8011548:	b189      	cbz	r1, 801156e <rmw_context_fini+0x42>
 801154a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801154e:	789b      	ldrb	r3, [r3, #2]
 8011550:	2b01      	cmp	r3, #1
 8011552:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011556:	bf14      	ite	ne
 8011558:	210a      	movne	r1, #10
 801155a:	2100      	moveq	r1, #0
 801155c:	f003 f92e 	bl	80147bc <uxr_delete_session_retries>
 8011560:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011562:	f000 fe47 	bl	80121f4 <rmw_uxrce_fini_session_memory>
 8011566:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011568:	3010      	adds	r0, #16
 801156a:	f002 f86f 	bl	801364c <uxr_close_custom_transport>
 801156e:	2300      	movs	r3, #0
 8011570:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011572:	4630      	mov	r0, r6
 8011574:	bd70      	pop	{r4, r5, r6, pc}
 8011576:	3018      	adds	r0, #24
 8011578:	f000 f89c 	bl	80116b4 <rmw_destroy_node>
 801157c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801157e:	4606      	mov	r6, r0
 8011580:	2c00      	cmp	r4, #0
 8011582:	d1da      	bne.n	801153a <rmw_context_fini+0xe>
 8011584:	e7e0      	b.n	8011548 <rmw_context_fini+0x1c>
 8011586:	4626      	mov	r6, r4
 8011588:	e7de      	b.n	8011548 <rmw_context_fini+0x1c>
 801158a:	bf00      	nop
 801158c:	20011aac 	.word	0x20011aac

08011590 <create_node>:
 8011590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011594:	b083      	sub	sp, #12
 8011596:	2b00      	cmp	r3, #0
 8011598:	d05f      	beq.n	801165a <create_node+0xca>
 801159a:	4606      	mov	r6, r0
 801159c:	4835      	ldr	r0, [pc, #212]	@ (8011674 <create_node+0xe4>)
 801159e:	460f      	mov	r7, r1
 80115a0:	4690      	mov	r8, r2
 80115a2:	461d      	mov	r5, r3
 80115a4:	f008 f85e 	bl	8019664 <get_memory>
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d056      	beq.n	801165a <create_node+0xca>
 80115ac:	6884      	ldr	r4, [r0, #8]
 80115ae:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80115b0:	6123      	str	r3, [r4, #16]
 80115b2:	f008 f8bf 	bl	8019734 <rmw_get_implementation_identifier>
 80115b6:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80115ba:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80115be:	f8c4 9020 	str.w	r9, [r4, #32]
 80115c2:	4630      	mov	r0, r6
 80115c4:	f7ee fe2e 	bl	8000224 <strlen>
 80115c8:	1c42      	adds	r2, r0, #1
 80115ca:	2a3c      	cmp	r2, #60	@ 0x3c
 80115cc:	f104 0518 	add.w	r5, r4, #24
 80115d0:	d840      	bhi.n	8011654 <create_node+0xc4>
 80115d2:	4648      	mov	r0, r9
 80115d4:	4631      	mov	r1, r6
 80115d6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80115da:	f00b fa78 	bl	801cace <memcpy>
 80115de:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80115e2:	4638      	mov	r0, r7
 80115e4:	f7ee fe1e 	bl	8000224 <strlen>
 80115e8:	1c42      	adds	r2, r0, #1
 80115ea:	2a3c      	cmp	r2, #60	@ 0x3c
 80115ec:	d832      	bhi.n	8011654 <create_node+0xc4>
 80115ee:	4639      	mov	r1, r7
 80115f0:	4648      	mov	r0, r9
 80115f2:	f00b fa6c 	bl	801cace <memcpy>
 80115f6:	6923      	ldr	r3, [r4, #16]
 80115f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80115fc:	2101      	movs	r1, #1
 80115fe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8011602:	1842      	adds	r2, r0, r1
 8011604:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8011608:	f002 f824 	bl	8013654 <uxr_object_id>
 801160c:	6160      	str	r0, [r4, #20]
 801160e:	783b      	ldrb	r3, [r7, #0]
 8011610:	2b2f      	cmp	r3, #47	@ 0x2f
 8011612:	d127      	bne.n	8011664 <create_node+0xd4>
 8011614:	787b      	ldrb	r3, [r7, #1]
 8011616:	bb2b      	cbnz	r3, 8011664 <create_node+0xd4>
 8011618:	4a17      	ldr	r2, [pc, #92]	@ (8011678 <create_node+0xe8>)
 801161a:	4818      	ldr	r0, [pc, #96]	@ (801167c <create_node+0xec>)
 801161c:	4633      	mov	r3, r6
 801161e:	213c      	movs	r1, #60	@ 0x3c
 8011620:	f00b f818 	bl	801c654 <sniprintf>
 8011624:	6920      	ldr	r0, [r4, #16]
 8011626:	4915      	ldr	r1, [pc, #84]	@ (801167c <create_node+0xec>)
 8011628:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801162c:	9100      	str	r1, [sp, #0]
 801162e:	2106      	movs	r1, #6
 8011630:	9101      	str	r1, [sp, #4]
 8011632:	6811      	ldr	r1, [r2, #0]
 8011634:	6962      	ldr	r2, [r4, #20]
 8011636:	fa1f f388 	uxth.w	r3, r8
 801163a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801163e:	f001 fd91 	bl	8013164 <uxr_buffer_create_participant_bin>
 8011642:	4602      	mov	r2, r0
 8011644:	6920      	ldr	r0, [r4, #16]
 8011646:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801164a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801164e:	f000 ff49 	bl	80124e4 <run_xrce_session>
 8011652:	b918      	cbnz	r0, 801165c <create_node+0xcc>
 8011654:	4628      	mov	r0, r5
 8011656:	f000 fdd3 	bl	8012200 <rmw_uxrce_fini_node_memory>
 801165a:	2500      	movs	r5, #0
 801165c:	4628      	mov	r0, r5
 801165e:	b003      	add	sp, #12
 8011660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011664:	4a06      	ldr	r2, [pc, #24]	@ (8011680 <create_node+0xf0>)
 8011666:	9600      	str	r6, [sp, #0]
 8011668:	463b      	mov	r3, r7
 801166a:	213c      	movs	r1, #60	@ 0x3c
 801166c:	4803      	ldr	r0, [pc, #12]	@ (801167c <create_node+0xec>)
 801166e:	f00a fff1 	bl	801c654 <sniprintf>
 8011672:	e7d7      	b.n	8011624 <create_node+0x94>
 8011674:	20011aac 	.word	0x20011aac
 8011678:	0801de2c 	.word	0x0801de2c
 801167c:	2000d1a0 	.word	0x2000d1a0
 8011680:	0801daf4 	.word	0x0801daf4

08011684 <rmw_create_node>:
 8011684:	b199      	cbz	r1, 80116ae <rmw_create_node+0x2a>
 8011686:	780b      	ldrb	r3, [r1, #0]
 8011688:	468c      	mov	ip, r1
 801168a:	b183      	cbz	r3, 80116ae <rmw_create_node+0x2a>
 801168c:	b410      	push	{r4}
 801168e:	4614      	mov	r4, r2
 8011690:	b14a      	cbz	r2, 80116a6 <rmw_create_node+0x22>
 8011692:	7813      	ldrb	r3, [r2, #0]
 8011694:	b13b      	cbz	r3, 80116a6 <rmw_create_node+0x22>
 8011696:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011698:	4603      	mov	r3, r0
 801169a:	4621      	mov	r1, r4
 801169c:	4660      	mov	r0, ip
 801169e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116a2:	f7ff bf75 	b.w	8011590 <create_node>
 80116a6:	2000      	movs	r0, #0
 80116a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116ac:	4770      	bx	lr
 80116ae:	2000      	movs	r0, #0
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop

080116b4 <rmw_destroy_node>:
 80116b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116b6:	b328      	cbz	r0, 8011704 <rmw_destroy_node+0x50>
 80116b8:	4607      	mov	r7, r0
 80116ba:	6800      	ldr	r0, [r0, #0]
 80116bc:	b120      	cbz	r0, 80116c8 <rmw_destroy_node+0x14>
 80116be:	4b36      	ldr	r3, [pc, #216]	@ (8011798 <rmw_destroy_node+0xe4>)
 80116c0:	6819      	ldr	r1, [r3, #0]
 80116c2:	f7ee fda5 	bl	8000210 <strcmp>
 80116c6:	b9e8      	cbnz	r0, 8011704 <rmw_destroy_node+0x50>
 80116c8:	687d      	ldr	r5, [r7, #4]
 80116ca:	b1dd      	cbz	r5, 8011704 <rmw_destroy_node+0x50>
 80116cc:	4b33      	ldr	r3, [pc, #204]	@ (801179c <rmw_destroy_node+0xe8>)
 80116ce:	681c      	ldr	r4, [r3, #0]
 80116d0:	2c00      	cmp	r4, #0
 80116d2:	d05f      	beq.n	8011794 <rmw_destroy_node+0xe0>
 80116d4:	2600      	movs	r6, #0
 80116d6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80116da:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80116de:	429d      	cmp	r5, r3
 80116e0:	d013      	beq.n	801170a <rmw_destroy_node+0x56>
 80116e2:	2c00      	cmp	r4, #0
 80116e4:	d1f7      	bne.n	80116d6 <rmw_destroy_node+0x22>
 80116e6:	4b2e      	ldr	r3, [pc, #184]	@ (80117a0 <rmw_destroy_node+0xec>)
 80116e8:	681c      	ldr	r4, [r3, #0]
 80116ea:	b1c4      	cbz	r4, 801171e <rmw_destroy_node+0x6a>
 80116ec:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80116f0:	6a0b      	ldr	r3, [r1, #32]
 80116f2:	429d      	cmp	r5, r3
 80116f4:	d1f9      	bne.n	80116ea <rmw_destroy_node+0x36>
 80116f6:	317c      	adds	r1, #124	@ 0x7c
 80116f8:	4638      	mov	r0, r7
 80116fa:	f000 fb37 	bl	8011d6c <rmw_destroy_subscription>
 80116fe:	2801      	cmp	r0, #1
 8011700:	4606      	mov	r6, r0
 8011702:	d1f2      	bne.n	80116ea <rmw_destroy_node+0x36>
 8011704:	2601      	movs	r6, #1
 8011706:	4630      	mov	r0, r6
 8011708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801170a:	3184      	adds	r1, #132	@ 0x84
 801170c:	4638      	mov	r0, r7
 801170e:	f000 f9a5 	bl	8011a5c <rmw_destroy_publisher>
 8011712:	2801      	cmp	r0, #1
 8011714:	4606      	mov	r6, r0
 8011716:	d0f5      	beq.n	8011704 <rmw_destroy_node+0x50>
 8011718:	2c00      	cmp	r4, #0
 801171a:	d1dc      	bne.n	80116d6 <rmw_destroy_node+0x22>
 801171c:	e7e3      	b.n	80116e6 <rmw_destroy_node+0x32>
 801171e:	4b21      	ldr	r3, [pc, #132]	@ (80117a4 <rmw_destroy_node+0xf0>)
 8011720:	681c      	ldr	r4, [r3, #0]
 8011722:	b16c      	cbz	r4, 8011740 <rmw_destroy_node+0x8c>
 8011724:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011728:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801172a:	429d      	cmp	r5, r3
 801172c:	d1f9      	bne.n	8011722 <rmw_destroy_node+0x6e>
 801172e:	317c      	adds	r1, #124	@ 0x7c
 8011730:	4638      	mov	r0, r7
 8011732:	f000 f9e5 	bl	8011b00 <rmw_destroy_service>
 8011736:	2801      	cmp	r0, #1
 8011738:	4606      	mov	r6, r0
 801173a:	d0e3      	beq.n	8011704 <rmw_destroy_node+0x50>
 801173c:	2c00      	cmp	r4, #0
 801173e:	d1f1      	bne.n	8011724 <rmw_destroy_node+0x70>
 8011740:	4b19      	ldr	r3, [pc, #100]	@ (80117a8 <rmw_destroy_node+0xf4>)
 8011742:	681c      	ldr	r4, [r3, #0]
 8011744:	b16c      	cbz	r4, 8011762 <rmw_destroy_node+0xae>
 8011746:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801174a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801174c:	429d      	cmp	r5, r3
 801174e:	d1f9      	bne.n	8011744 <rmw_destroy_node+0x90>
 8011750:	317c      	adds	r1, #124	@ 0x7c
 8011752:	4638      	mov	r0, r7
 8011754:	f007 ffaa 	bl	80196ac <rmw_destroy_client>
 8011758:	2801      	cmp	r0, #1
 801175a:	4606      	mov	r6, r0
 801175c:	d0d2      	beq.n	8011704 <rmw_destroy_node+0x50>
 801175e:	2c00      	cmp	r4, #0
 8011760:	d1f1      	bne.n	8011746 <rmw_destroy_node+0x92>
 8011762:	6928      	ldr	r0, [r5, #16]
 8011764:	696a      	ldr	r2, [r5, #20]
 8011766:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801176a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801176e:	6819      	ldr	r1, [r3, #0]
 8011770:	f001 fcac 	bl	80130cc <uxr_buffer_delete_entity>
 8011774:	4602      	mov	r2, r0
 8011776:	6928      	ldr	r0, [r5, #16]
 8011778:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801177c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011780:	f000 feb0 	bl	80124e4 <run_xrce_session>
 8011784:	2800      	cmp	r0, #0
 8011786:	bf08      	it	eq
 8011788:	2602      	moveq	r6, #2
 801178a:	4638      	mov	r0, r7
 801178c:	f000 fd38 	bl	8012200 <rmw_uxrce_fini_node_memory>
 8011790:	4630      	mov	r0, r6
 8011792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011794:	4626      	mov	r6, r4
 8011796:	e7a6      	b.n	80116e6 <rmw_destroy_node+0x32>
 8011798:	0801e7c8 	.word	0x0801e7c8
 801179c:	20011abc 	.word	0x20011abc
 80117a0:	20011afc 	.word	0x20011afc
 80117a4:	20011acc 	.word	0x20011acc
 80117a8:	2000d1dc 	.word	0x2000d1dc

080117ac <rmw_node_get_graph_guard_condition>:
 80117ac:	6843      	ldr	r3, [r0, #4]
 80117ae:	6918      	ldr	r0, [r3, #16]
 80117b0:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop

080117b8 <flush_session>:
 80117b8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 80117ba:	f002 be8d 	b.w	80144d8 <uxr_run_session_until_confirm_delivery>
 80117be:	bf00      	nop

080117c0 <rmw_publish>:
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d053      	beq.n	801186c <rmw_publish+0xac>
 80117c4:	b570      	push	{r4, r5, r6, lr}
 80117c6:	460d      	mov	r5, r1
 80117c8:	b08e      	sub	sp, #56	@ 0x38
 80117ca:	2900      	cmp	r1, #0
 80117cc:	d04b      	beq.n	8011866 <rmw_publish+0xa6>
 80117ce:	4604      	mov	r4, r0
 80117d0:	6800      	ldr	r0, [r0, #0]
 80117d2:	f000 ff07 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 80117d6:	2800      	cmp	r0, #0
 80117d8:	d045      	beq.n	8011866 <rmw_publish+0xa6>
 80117da:	6866      	ldr	r6, [r4, #4]
 80117dc:	2e00      	cmp	r6, #0
 80117de:	d042      	beq.n	8011866 <rmw_publish+0xa6>
 80117e0:	69b4      	ldr	r4, [r6, #24]
 80117e2:	4628      	mov	r0, r5
 80117e4:	6923      	ldr	r3, [r4, #16]
 80117e6:	4798      	blx	r3
 80117e8:	69f3      	ldr	r3, [r6, #28]
 80117ea:	9005      	str	r0, [sp, #20]
 80117ec:	b113      	cbz	r3, 80117f4 <rmw_publish+0x34>
 80117ee:	a805      	add	r0, sp, #20
 80117f0:	4798      	blx	r3
 80117f2:	9805      	ldr	r0, [sp, #20]
 80117f4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80117f8:	691b      	ldr	r3, [r3, #16]
 80117fa:	9000      	str	r0, [sp, #0]
 80117fc:	6972      	ldr	r2, [r6, #20]
 80117fe:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011800:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011804:	ab06      	add	r3, sp, #24
 8011806:	f004 f90f 	bl	8015a28 <uxr_prepare_output_stream>
 801180a:	b1d8      	cbz	r0, 8011844 <rmw_publish+0x84>
 801180c:	68a3      	ldr	r3, [r4, #8]
 801180e:	a906      	add	r1, sp, #24
 8011810:	4628      	mov	r0, r5
 8011812:	4798      	blx	r3
 8011814:	6a33      	ldr	r3, [r6, #32]
 8011816:	4604      	mov	r4, r0
 8011818:	b10b      	cbz	r3, 801181e <rmw_publish+0x5e>
 801181a:	a806      	add	r0, sp, #24
 801181c:	4798      	blx	r3
 801181e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8011822:	2b01      	cmp	r3, #1
 8011824:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011828:	d022      	beq.n	8011870 <rmw_publish+0xb0>
 801182a:	6918      	ldr	r0, [r3, #16]
 801182c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 801182e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011832:	f002 fe51 	bl	80144d8 <uxr_run_session_until_confirm_delivery>
 8011836:	4020      	ands	r0, r4
 8011838:	b2c4      	uxtb	r4, r0
 801183a:	f084 0001 	eor.w	r0, r4, #1
 801183e:	b2c0      	uxtb	r0, r0
 8011840:	b00e      	add	sp, #56	@ 0x38
 8011842:	bd70      	pop	{r4, r5, r6, pc}
 8011844:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011848:	6918      	ldr	r0, [r3, #16]
 801184a:	9b05      	ldr	r3, [sp, #20]
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	4b0b      	ldr	r3, [pc, #44]	@ (801187c <rmw_publish+0xbc>)
 8011850:	9301      	str	r3, [sp, #4]
 8011852:	9602      	str	r6, [sp, #8]
 8011854:	6972      	ldr	r2, [r6, #20]
 8011856:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011858:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801185c:	ab06      	add	r3, sp, #24
 801185e:	f004 f913 	bl	8015a88 <uxr_prepare_output_stream_fragmented>
 8011862:	2800      	cmp	r0, #0
 8011864:	d1d2      	bne.n	801180c <rmw_publish+0x4c>
 8011866:	2001      	movs	r0, #1
 8011868:	b00e      	add	sp, #56	@ 0x38
 801186a:	bd70      	pop	{r4, r5, r6, pc}
 801186c:	2001      	movs	r0, #1
 801186e:	4770      	bx	lr
 8011870:	6918      	ldr	r0, [r3, #16]
 8011872:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011876:	f002 fa6f 	bl	8013d58 <uxr_flash_output_streams>
 801187a:	e7de      	b.n	801183a <rmw_publish+0x7a>
 801187c:	080117b9 	.word	0x080117b9

08011880 <rmw_create_publisher>:
 8011880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011884:	b087      	sub	sp, #28
 8011886:	2800      	cmp	r0, #0
 8011888:	f000 80cc 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 801188c:	460e      	mov	r6, r1
 801188e:	2900      	cmp	r1, #0
 8011890:	f000 80c8 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 8011894:	4604      	mov	r4, r0
 8011896:	6800      	ldr	r0, [r0, #0]
 8011898:	4615      	mov	r5, r2
 801189a:	4698      	mov	r8, r3
 801189c:	f000 fea2 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	f000 80bf 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 80118a6:	2d00      	cmp	r5, #0
 80118a8:	f000 80bc 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 80118ac:	782b      	ldrb	r3, [r5, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	f000 80b8 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 80118b4:	f1b8 0f00 	cmp.w	r8, #0
 80118b8:	f000 80b4 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 80118bc:	485c      	ldr	r0, [pc, #368]	@ (8011a30 <rmw_create_publisher+0x1b0>)
 80118be:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80118c2:	f007 fecf 	bl	8019664 <get_memory>
 80118c6:	2800      	cmp	r0, #0
 80118c8:	f000 80ac 	beq.w	8011a24 <rmw_create_publisher+0x1a4>
 80118cc:	6884      	ldr	r4, [r0, #8]
 80118ce:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80118d2:	f007 ff2f 	bl	8019734 <rmw_get_implementation_identifier>
 80118d6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80118da:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80118de:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80118e2:	4628      	mov	r0, r5
 80118e4:	f7ee fc9e 	bl	8000224 <strlen>
 80118e8:	3001      	adds	r0, #1
 80118ea:	283c      	cmp	r0, #60	@ 0x3c
 80118ec:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80118f0:	f200 8091 	bhi.w	8011a16 <rmw_create_publisher+0x196>
 80118f4:	4a4f      	ldr	r2, [pc, #316]	@ (8011a34 <rmw_create_publisher+0x1b4>)
 80118f6:	462b      	mov	r3, r5
 80118f8:	213c      	movs	r1, #60	@ 0x3c
 80118fa:	4650      	mov	r0, sl
 80118fc:	f00a feaa 	bl	801c654 <sniprintf>
 8011900:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011904:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8011906:	4641      	mov	r1, r8
 8011908:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 801190c:	2250      	movs	r2, #80	@ 0x50
 801190e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011912:	f00b f8dc 	bl	801cace <memcpy>
 8011916:	f898 3008 	ldrb.w	r3, [r8, #8]
 801191a:	4947      	ldr	r1, [pc, #284]	@ (8011a38 <rmw_create_publisher+0x1b8>)
 801191c:	2b02      	cmp	r3, #2
 801191e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011922:	bf0c      	ite	eq
 8011924:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8011928:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 801192c:	67a3      	str	r3, [r4, #120]	@ 0x78
 801192e:	2300      	movs	r3, #0
 8011930:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011934:	4630      	mov	r0, r6
 8011936:	f000 fe63 	bl	8012600 <get_message_typesupport_handle>
 801193a:	2800      	cmp	r0, #0
 801193c:	d06b      	beq.n	8011a16 <rmw_create_publisher+0x196>
 801193e:	6842      	ldr	r2, [r0, #4]
 8011940:	61a2      	str	r2, [r4, #24]
 8011942:	2a00      	cmp	r2, #0
 8011944:	d067      	beq.n	8011a16 <rmw_create_publisher+0x196>
 8011946:	4629      	mov	r1, r5
 8011948:	4643      	mov	r3, r8
 801194a:	4648      	mov	r0, r9
 801194c:	f007 ff20 	bl	8019790 <create_topic>
 8011950:	6260      	str	r0, [r4, #36]	@ 0x24
 8011952:	2800      	cmp	r0, #0
 8011954:	d063      	beq.n	8011a1e <rmw_create_publisher+0x19e>
 8011956:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801195a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801195e:	2103      	movs	r1, #3
 8011960:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011964:	1c42      	adds	r2, r0, #1
 8011966:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801196a:	f001 fe73 	bl	8013654 <uxr_object_id>
 801196e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011976:	6120      	str	r0, [r4, #16]
 8011978:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801197c:	6910      	ldr	r0, [r2, #16]
 801197e:	2506      	movs	r5, #6
 8011980:	9500      	str	r5, [sp, #0]
 8011982:	6819      	ldr	r1, [r3, #0]
 8011984:	6922      	ldr	r2, [r4, #16]
 8011986:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801198a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801198e:	f001 fc51 	bl	8013234 <uxr_buffer_create_publisher_bin>
 8011992:	4602      	mov	r2, r0
 8011994:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011998:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801199c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80119a0:	f000 fda0 	bl	80124e4 <run_xrce_session>
 80119a4:	b3b8      	cbz	r0, 8011a16 <rmw_create_publisher+0x196>
 80119a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80119ae:	2105      	movs	r1, #5
 80119b0:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 80119b4:	1c42      	adds	r2, r0, #1
 80119b6:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 80119ba:	f001 fe4b 	bl	8013654 <uxr_object_id>
 80119be:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80119c2:	6160      	str	r0, [r4, #20]
 80119c4:	691e      	ldr	r6, [r3, #16]
 80119c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119ca:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80119ce:	f10d 0a10 	add.w	sl, sp, #16
 80119d2:	4641      	mov	r1, r8
 80119d4:	4650      	mov	r0, sl
 80119d6:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 80119da:	f000 fd9f 	bl	801251c <convert_qos_profile>
 80119de:	9503      	str	r5, [sp, #12]
 80119e0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80119e4:	9001      	str	r0, [sp, #4]
 80119e6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80119ea:	f8db 3010 	ldr.w	r3, [fp, #16]
 80119ee:	9300      	str	r3, [sp, #0]
 80119f0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80119f4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80119f8:	f8d8 1000 	ldr.w	r1, [r8]
 80119fc:	4630      	mov	r0, r6
 80119fe:	f001 fc79 	bl	80132f4 <uxr_buffer_create_datawriter_bin>
 8011a02:	4602      	mov	r2, r0
 8011a04:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011a08:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011a0c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011a10:	f000 fd68 	bl	80124e4 <run_xrce_session>
 8011a14:	b938      	cbnz	r0, 8011a26 <rmw_create_publisher+0x1a6>
 8011a16:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011a18:	b108      	cbz	r0, 8011a1e <rmw_create_publisher+0x19e>
 8011a1a:	f000 fc61 	bl	80122e0 <rmw_uxrce_fini_topic_memory>
 8011a1e:	4638      	mov	r0, r7
 8011a20:	f000 fc06 	bl	8012230 <rmw_uxrce_fini_publisher_memory>
 8011a24:	2700      	movs	r7, #0
 8011a26:	4638      	mov	r0, r7
 8011a28:	b007      	add	sp, #28
 8011a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a2e:	bf00      	nop
 8011a30:	20011abc 	.word	0x20011abc
 8011a34:	0801de2c 	.word	0x0801de2c
 8011a38:	0801d960 	.word	0x0801d960

08011a3c <rmw_publisher_get_actual_qos>:
 8011a3c:	b150      	cbz	r0, 8011a54 <rmw_publisher_get_actual_qos+0x18>
 8011a3e:	b508      	push	{r3, lr}
 8011a40:	460b      	mov	r3, r1
 8011a42:	b149      	cbz	r1, 8011a58 <rmw_publisher_get_actual_qos+0x1c>
 8011a44:	6841      	ldr	r1, [r0, #4]
 8011a46:	2250      	movs	r2, #80	@ 0x50
 8011a48:	3128      	adds	r1, #40	@ 0x28
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f00b f83f 	bl	801cace <memcpy>
 8011a50:	2000      	movs	r0, #0
 8011a52:	bd08      	pop	{r3, pc}
 8011a54:	200b      	movs	r0, #11
 8011a56:	4770      	bx	lr
 8011a58:	200b      	movs	r0, #11
 8011a5a:	bd08      	pop	{r3, pc}

08011a5c <rmw_destroy_publisher>:
 8011a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a5e:	b128      	cbz	r0, 8011a6c <rmw_destroy_publisher+0x10>
 8011a60:	4604      	mov	r4, r0
 8011a62:	6800      	ldr	r0, [r0, #0]
 8011a64:	460d      	mov	r5, r1
 8011a66:	f000 fdbd 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011a6a:	b910      	cbnz	r0, 8011a72 <rmw_destroy_publisher+0x16>
 8011a6c:	2401      	movs	r4, #1
 8011a6e:	4620      	mov	r0, r4
 8011a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a72:	6863      	ldr	r3, [r4, #4]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d0f9      	beq.n	8011a6c <rmw_destroy_publisher+0x10>
 8011a78:	2d00      	cmp	r5, #0
 8011a7a:	d0f7      	beq.n	8011a6c <rmw_destroy_publisher+0x10>
 8011a7c:	6828      	ldr	r0, [r5, #0]
 8011a7e:	f000 fdb1 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011a82:	2800      	cmp	r0, #0
 8011a84:	d0f2      	beq.n	8011a6c <rmw_destroy_publisher+0x10>
 8011a86:	686c      	ldr	r4, [r5, #4]
 8011a88:	2c00      	cmp	r4, #0
 8011a8a:	d0ef      	beq.n	8011a6c <rmw_destroy_publisher+0x10>
 8011a8c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8011a8e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8011a92:	f007 fecd 	bl	8019830 <destroy_topic>
 8011a96:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011a9a:	6962      	ldr	r2, [r4, #20]
 8011a9c:	6918      	ldr	r0, [r3, #16]
 8011a9e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011aa2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011aa6:	6819      	ldr	r1, [r3, #0]
 8011aa8:	f001 fb10 	bl	80130cc <uxr_buffer_delete_entity>
 8011aac:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011ab0:	6922      	ldr	r2, [r4, #16]
 8011ab2:	691b      	ldr	r3, [r3, #16]
 8011ab4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011ab8:	4604      	mov	r4, r0
 8011aba:	6809      	ldr	r1, [r1, #0]
 8011abc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011ac0:	f001 fb04 	bl	80130cc <uxr_buffer_delete_entity>
 8011ac4:	693e      	ldr	r6, [r7, #16]
 8011ac6:	4622      	mov	r2, r4
 8011ac8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011acc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	4630      	mov	r0, r6
 8011ad4:	f000 fd06 	bl	80124e4 <run_xrce_session>
 8011ad8:	693e      	ldr	r6, [r7, #16]
 8011ada:	4622      	mov	r2, r4
 8011adc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011ae0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f000 fcfc 	bl	80124e4 <run_xrce_session>
 8011aec:	b12c      	cbz	r4, 8011afa <rmw_destroy_publisher+0x9e>
 8011aee:	b120      	cbz	r0, 8011afa <rmw_destroy_publisher+0x9e>
 8011af0:	2400      	movs	r4, #0
 8011af2:	4628      	mov	r0, r5
 8011af4:	f000 fb9c 	bl	8012230 <rmw_uxrce_fini_publisher_memory>
 8011af8:	e7b9      	b.n	8011a6e <rmw_destroy_publisher+0x12>
 8011afa:	2402      	movs	r4, #2
 8011afc:	e7f9      	b.n	8011af2 <rmw_destroy_publisher+0x96>
 8011afe:	bf00      	nop

08011b00 <rmw_destroy_service>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	b128      	cbz	r0, 8011b10 <rmw_destroy_service+0x10>
 8011b04:	4604      	mov	r4, r0
 8011b06:	6800      	ldr	r0, [r0, #0]
 8011b08:	460d      	mov	r5, r1
 8011b0a:	f000 fd6b 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011b0e:	b910      	cbnz	r0, 8011b16 <rmw_destroy_service+0x16>
 8011b10:	2401      	movs	r4, #1
 8011b12:	4620      	mov	r0, r4
 8011b14:	bd70      	pop	{r4, r5, r6, pc}
 8011b16:	6863      	ldr	r3, [r4, #4]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d0f9      	beq.n	8011b10 <rmw_destroy_service+0x10>
 8011b1c:	2d00      	cmp	r5, #0
 8011b1e:	d0f7      	beq.n	8011b10 <rmw_destroy_service+0x10>
 8011b20:	6828      	ldr	r0, [r5, #0]
 8011b22:	f000 fd5f 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d0f2      	beq.n	8011b10 <rmw_destroy_service+0x10>
 8011b2a:	686e      	ldr	r6, [r5, #4]
 8011b2c:	2e00      	cmp	r6, #0
 8011b2e:	d0ef      	beq.n	8011b10 <rmw_destroy_service+0x10>
 8011b30:	6864      	ldr	r4, [r4, #4]
 8011b32:	6932      	ldr	r2, [r6, #16]
 8011b34:	6920      	ldr	r0, [r4, #16]
 8011b36:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011b3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011b3e:	6819      	ldr	r1, [r3, #0]
 8011b40:	f001 fef6 	bl	8013930 <uxr_buffer_cancel_data>
 8011b44:	4602      	mov	r2, r0
 8011b46:	6920      	ldr	r0, [r4, #16]
 8011b48:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011b4c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011b50:	f000 fcc8 	bl	80124e4 <run_xrce_session>
 8011b54:	6920      	ldr	r0, [r4, #16]
 8011b56:	6932      	ldr	r2, [r6, #16]
 8011b58:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011b5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011b60:	6819      	ldr	r1, [r3, #0]
 8011b62:	f001 fab3 	bl	80130cc <uxr_buffer_delete_entity>
 8011b66:	4602      	mov	r2, r0
 8011b68:	6920      	ldr	r0, [r4, #16]
 8011b6a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011b6e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011b72:	f000 fcb7 	bl	80124e4 <run_xrce_session>
 8011b76:	2800      	cmp	r0, #0
 8011b78:	4628      	mov	r0, r5
 8011b7a:	bf14      	ite	ne
 8011b7c:	2400      	movne	r4, #0
 8011b7e:	2402      	moveq	r4, #2
 8011b80:	f000 fb82 	bl	8012288 <rmw_uxrce_fini_service_memory>
 8011b84:	e7c5      	b.n	8011b12 <rmw_destroy_service+0x12>
 8011b86:	bf00      	nop

08011b88 <rmw_create_subscription>:
 8011b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b8c:	b08d      	sub	sp, #52	@ 0x34
 8011b8e:	2800      	cmp	r0, #0
 8011b90:	f000 80d1 	beq.w	8011d36 <rmw_create_subscription+0x1ae>
 8011b94:	460e      	mov	r6, r1
 8011b96:	2900      	cmp	r1, #0
 8011b98:	f000 80cd 	beq.w	8011d36 <rmw_create_subscription+0x1ae>
 8011b9c:	4604      	mov	r4, r0
 8011b9e:	6800      	ldr	r0, [r0, #0]
 8011ba0:	4615      	mov	r5, r2
 8011ba2:	4698      	mov	r8, r3
 8011ba4:	f000 fd1e 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011ba8:	2800      	cmp	r0, #0
 8011baa:	f000 80c4 	beq.w	8011d36 <rmw_create_subscription+0x1ae>
 8011bae:	2d00      	cmp	r5, #0
 8011bb0:	f000 80c1 	beq.w	8011d36 <rmw_create_subscription+0x1ae>
 8011bb4:	782b      	ldrb	r3, [r5, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f000 80bd 	beq.w	8011d36 <rmw_create_subscription+0x1ae>
 8011bbc:	f1b8 0f00 	cmp.w	r8, #0
 8011bc0:	f000 80b9 	beq.w	8011d36 <rmw_create_subscription+0x1ae>
 8011bc4:	485e      	ldr	r0, [pc, #376]	@ (8011d40 <rmw_create_subscription+0x1b8>)
 8011bc6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011bca:	f007 fd4b 	bl	8019664 <get_memory>
 8011bce:	4604      	mov	r4, r0
 8011bd0:	2800      	cmp	r0, #0
 8011bd2:	f000 80b1 	beq.w	8011d38 <rmw_create_subscription+0x1b0>
 8011bd6:	6887      	ldr	r7, [r0, #8]
 8011bd8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 8011bdc:	f007 fdaa 	bl	8019734 <rmw_get_implementation_identifier>
 8011be0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8011be4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011be6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 8011bea:	4628      	mov	r0, r5
 8011bec:	f7ee fb1a 	bl	8000224 <strlen>
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	283c      	cmp	r0, #60	@ 0x3c
 8011bf4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8011bf8:	f200 8096 	bhi.w	8011d28 <rmw_create_subscription+0x1a0>
 8011bfc:	4a51      	ldr	r2, [pc, #324]	@ (8011d44 <rmw_create_subscription+0x1bc>)
 8011bfe:	462b      	mov	r3, r5
 8011c00:	213c      	movs	r1, #60	@ 0x3c
 8011c02:	4650      	mov	r0, sl
 8011c04:	f00a fd26 	bl	801c654 <sniprintf>
 8011c08:	4641      	mov	r1, r8
 8011c0a:	f8c7 9020 	str.w	r9, [r7, #32]
 8011c0e:	2250      	movs	r2, #80	@ 0x50
 8011c10:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8011c14:	f00a ff5b 	bl	801cace <memcpy>
 8011c18:	494b      	ldr	r1, [pc, #300]	@ (8011d48 <rmw_create_subscription+0x1c0>)
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f000 fcf0 	bl	8012600 <get_message_typesupport_handle>
 8011c20:	2800      	cmp	r0, #0
 8011c22:	f000 8081 	beq.w	8011d28 <rmw_create_subscription+0x1a0>
 8011c26:	6842      	ldr	r2, [r0, #4]
 8011c28:	61ba      	str	r2, [r7, #24]
 8011c2a:	2a00      	cmp	r2, #0
 8011c2c:	d07c      	beq.n	8011d28 <rmw_create_subscription+0x1a0>
 8011c2e:	4629      	mov	r1, r5
 8011c30:	4643      	mov	r3, r8
 8011c32:	4648      	mov	r0, r9
 8011c34:	f007 fdac 	bl	8019790 <create_topic>
 8011c38:	61f8      	str	r0, [r7, #28]
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	d078      	beq.n	8011d30 <rmw_create_subscription+0x1a8>
 8011c3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c46:	2104      	movs	r1, #4
 8011c48:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8011c4c:	1c42      	adds	r2, r0, #1
 8011c4e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011c52:	f001 fcff 	bl	8013654 <uxr_object_id>
 8011c56:	6138      	str	r0, [r7, #16]
 8011c58:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011c5c:	2506      	movs	r5, #6
 8011c5e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011c62:	9500      	str	r5, [sp, #0]
 8011c64:	6819      	ldr	r1, [r3, #0]
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011c6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011c70:	f001 fb10 	bl	8013294 <uxr_buffer_create_subscriber_bin>
 8011c74:	4602      	mov	r2, r0
 8011c76:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011c7a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011c7e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011c82:	f000 fc2f 	bl	80124e4 <run_xrce_session>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	d04e      	beq.n	8011d28 <rmw_create_subscription+0x1a0>
 8011c8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011c8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011c92:	4629      	mov	r1, r5
 8011c94:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011c98:	1c42      	adds	r2, r0, #1
 8011c9a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8011c9e:	f001 fcd9 	bl	8013654 <uxr_object_id>
 8011ca2:	ae08      	add	r6, sp, #32
 8011ca4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	6178      	str	r0, [r7, #20]
 8011cac:	4641      	mov	r1, r8
 8011cae:	4630      	mov	r0, r6
 8011cb0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011cb4:	9305      	str	r3, [sp, #20]
 8011cb6:	f000 fc31 	bl	801251c <convert_qos_profile>
 8011cba:	9503      	str	r5, [sp, #12]
 8011cbc:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011cc0:	9b05      	ldr	r3, [sp, #20]
 8011cc2:	9001      	str	r0, [sp, #4]
 8011cc4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011cc8:	691b      	ldr	r3, [r3, #16]
 8011cca:	9300      	str	r3, [sp, #0]
 8011ccc:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8011cd0:	f8db 1000 	ldr.w	r1, [fp]
 8011cd4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8011cd8:	f001 fb82 	bl	80133e0 <uxr_buffer_create_datareader_bin>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011ce2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011ce6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011cea:	f000 fbfb 	bl	80124e4 <run_xrce_session>
 8011cee:	b1d8      	cbz	r0, 8011d28 <rmw_create_subscription+0x1a0>
 8011cf0:	f898 3008 	ldrb.w	r3, [r8, #8]
 8011cf4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	bf0c      	ite	eq
 8011cfc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8011d00:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8011d04:	9307      	str	r3, [sp, #28]
 8011d06:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8011d10:	ab0a      	add	r3, sp, #40	@ 0x28
 8011d12:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	697a      	ldr	r2, [r7, #20]
 8011d1a:	9b07      	ldr	r3, [sp, #28]
 8011d1c:	6809      	ldr	r1, [r1, #0]
 8011d1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011d22:	f001 fdcb 	bl	80138bc <uxr_buffer_request_data>
 8011d26:	e007      	b.n	8011d38 <rmw_create_subscription+0x1b0>
 8011d28:	69f8      	ldr	r0, [r7, #28]
 8011d2a:	b108      	cbz	r0, 8011d30 <rmw_create_subscription+0x1a8>
 8011d2c:	f000 fad8 	bl	80122e0 <rmw_uxrce_fini_topic_memory>
 8011d30:	4620      	mov	r0, r4
 8011d32:	f000 fa93 	bl	801225c <rmw_uxrce_fini_subscription_memory>
 8011d36:	2400      	movs	r4, #0
 8011d38:	4620      	mov	r0, r4
 8011d3a:	b00d      	add	sp, #52	@ 0x34
 8011d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d40:	20011afc 	.word	0x20011afc
 8011d44:	0801de2c 	.word	0x0801de2c
 8011d48:	0801d960 	.word	0x0801d960

08011d4c <rmw_subscription_get_actual_qos>:
 8011d4c:	b150      	cbz	r0, 8011d64 <rmw_subscription_get_actual_qos+0x18>
 8011d4e:	b508      	push	{r3, lr}
 8011d50:	460b      	mov	r3, r1
 8011d52:	b149      	cbz	r1, 8011d68 <rmw_subscription_get_actual_qos+0x1c>
 8011d54:	6841      	ldr	r1, [r0, #4]
 8011d56:	2250      	movs	r2, #80	@ 0x50
 8011d58:	3128      	adds	r1, #40	@ 0x28
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f00a feb7 	bl	801cace <memcpy>
 8011d60:	2000      	movs	r0, #0
 8011d62:	bd08      	pop	{r3, pc}
 8011d64:	200b      	movs	r0, #11
 8011d66:	4770      	bx	lr
 8011d68:	200b      	movs	r0, #11
 8011d6a:	bd08      	pop	{r3, pc}

08011d6c <rmw_destroy_subscription>:
 8011d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6e:	b128      	cbz	r0, 8011d7c <rmw_destroy_subscription+0x10>
 8011d70:	4604      	mov	r4, r0
 8011d72:	6800      	ldr	r0, [r0, #0]
 8011d74:	460d      	mov	r5, r1
 8011d76:	f000 fc35 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011d7a:	b910      	cbnz	r0, 8011d82 <rmw_destroy_subscription+0x16>
 8011d7c:	2401      	movs	r4, #1
 8011d7e:	4620      	mov	r0, r4
 8011d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d82:	6863      	ldr	r3, [r4, #4]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d0f9      	beq.n	8011d7c <rmw_destroy_subscription+0x10>
 8011d88:	2d00      	cmp	r5, #0
 8011d8a:	d0f7      	beq.n	8011d7c <rmw_destroy_subscription+0x10>
 8011d8c:	6828      	ldr	r0, [r5, #0]
 8011d8e:	f000 fc29 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d0f2      	beq.n	8011d7c <rmw_destroy_subscription+0x10>
 8011d96:	686c      	ldr	r4, [r5, #4]
 8011d98:	2c00      	cmp	r4, #0
 8011d9a:	d0ef      	beq.n	8011d7c <rmw_destroy_subscription+0x10>
 8011d9c:	6a26      	ldr	r6, [r4, #32]
 8011d9e:	6962      	ldr	r2, [r4, #20]
 8011da0:	6930      	ldr	r0, [r6, #16]
 8011da2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011da6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011daa:	6819      	ldr	r1, [r3, #0]
 8011dac:	f001 fdc0 	bl	8013930 <uxr_buffer_cancel_data>
 8011db0:	4602      	mov	r2, r0
 8011db2:	6930      	ldr	r0, [r6, #16]
 8011db4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011db8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011dbc:	f000 fb92 	bl	80124e4 <run_xrce_session>
 8011dc0:	69e0      	ldr	r0, [r4, #28]
 8011dc2:	f007 fd35 	bl	8019830 <destroy_topic>
 8011dc6:	6a23      	ldr	r3, [r4, #32]
 8011dc8:	6962      	ldr	r2, [r4, #20]
 8011dca:	6918      	ldr	r0, [r3, #16]
 8011dcc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011dd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011dd4:	6819      	ldr	r1, [r3, #0]
 8011dd6:	f001 f979 	bl	80130cc <uxr_buffer_delete_entity>
 8011dda:	6a23      	ldr	r3, [r4, #32]
 8011ddc:	6922      	ldr	r2, [r4, #16]
 8011dde:	691b      	ldr	r3, [r3, #16]
 8011de0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011de4:	4604      	mov	r4, r0
 8011de6:	6809      	ldr	r1, [r1, #0]
 8011de8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011dec:	f001 f96e 	bl	80130cc <uxr_buffer_delete_entity>
 8011df0:	6937      	ldr	r7, [r6, #16]
 8011df2:	4622      	mov	r2, r4
 8011df4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011df8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	4638      	mov	r0, r7
 8011e00:	f000 fb70 	bl	80124e4 <run_xrce_session>
 8011e04:	6936      	ldr	r6, [r6, #16]
 8011e06:	4622      	mov	r2, r4
 8011e08:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011e0c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011e10:	4604      	mov	r4, r0
 8011e12:	4630      	mov	r0, r6
 8011e14:	f000 fb66 	bl	80124e4 <run_xrce_session>
 8011e18:	b12c      	cbz	r4, 8011e26 <rmw_destroy_subscription+0xba>
 8011e1a:	b120      	cbz	r0, 8011e26 <rmw_destroy_subscription+0xba>
 8011e1c:	2400      	movs	r4, #0
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f000 fa1c 	bl	801225c <rmw_uxrce_fini_subscription_memory>
 8011e24:	e7ab      	b.n	8011d7e <rmw_destroy_subscription+0x12>
 8011e26:	2402      	movs	r4, #2
 8011e28:	e7f9      	b.n	8011e1e <rmw_destroy_subscription+0xb2>
 8011e2a:	bf00      	nop

08011e2c <rmw_take_with_info>:
 8011e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e2e:	4604      	mov	r4, r0
 8011e30:	6800      	ldr	r0, [r0, #0]
 8011e32:	b089      	sub	sp, #36	@ 0x24
 8011e34:	460f      	mov	r7, r1
 8011e36:	4615      	mov	r5, r2
 8011e38:	b128      	cbz	r0, 8011e46 <rmw_take_with_info+0x1a>
 8011e3a:	4b24      	ldr	r3, [pc, #144]	@ (8011ecc <rmw_take_with_info+0xa0>)
 8011e3c:	6819      	ldr	r1, [r3, #0]
 8011e3e:	f7ee f9e7 	bl	8000210 <strcmp>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	d13e      	bne.n	8011ec4 <rmw_take_with_info+0x98>
 8011e46:	b305      	cbz	r5, 8011e8a <rmw_take_with_info+0x5e>
 8011e48:	6864      	ldr	r4, [r4, #4]
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	702b      	strb	r3, [r5, #0]
 8011e4e:	f000 facb 	bl	80123e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8011e52:	4620      	mov	r0, r4
 8011e54:	f000 faa0 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011e58:	4606      	mov	r6, r0
 8011e5a:	b1f0      	cbz	r0, 8011e9a <rmw_take_with_info+0x6e>
 8011e5c:	6881      	ldr	r1, [r0, #8]
 8011e5e:	4668      	mov	r0, sp
 8011e60:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011e64:	3110      	adds	r1, #16
 8011e66:	f7fc fa89 	bl	800e37c <ucdr_init_buffer>
 8011e6a:	69a3      	ldr	r3, [r4, #24]
 8011e6c:	4639      	mov	r1, r7
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	4668      	mov	r0, sp
 8011e72:	4798      	blx	r3
 8011e74:	4631      	mov	r1, r6
 8011e76:	4604      	mov	r4, r0
 8011e78:	4815      	ldr	r0, [pc, #84]	@ (8011ed0 <rmw_take_with_info+0xa4>)
 8011e7a:	f007 fc03 	bl	8019684 <put_memory>
 8011e7e:	702c      	strb	r4, [r5, #0]
 8011e80:	f084 0001 	eor.w	r0, r4, #1
 8011e84:	b2c0      	uxtb	r0, r0
 8011e86:	b009      	add	sp, #36	@ 0x24
 8011e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e8a:	6864      	ldr	r4, [r4, #4]
 8011e8c:	f000 faac 	bl	80123e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8011e90:	4620      	mov	r0, r4
 8011e92:	f000 fa81 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011e96:	4605      	mov	r5, r0
 8011e98:	b910      	cbnz	r0, 8011ea0 <rmw_take_with_info+0x74>
 8011e9a:	2001      	movs	r0, #1
 8011e9c:	b009      	add	sp, #36	@ 0x24
 8011e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea0:	68a9      	ldr	r1, [r5, #8]
 8011ea2:	4668      	mov	r0, sp
 8011ea4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011ea8:	3110      	adds	r1, #16
 8011eaa:	f7fc fa67 	bl	800e37c <ucdr_init_buffer>
 8011eae:	69a3      	ldr	r3, [r4, #24]
 8011eb0:	4639      	mov	r1, r7
 8011eb2:	68db      	ldr	r3, [r3, #12]
 8011eb4:	4668      	mov	r0, sp
 8011eb6:	4798      	blx	r3
 8011eb8:	4629      	mov	r1, r5
 8011eba:	4604      	mov	r4, r0
 8011ebc:	4804      	ldr	r0, [pc, #16]	@ (8011ed0 <rmw_take_with_info+0xa4>)
 8011ebe:	f007 fbe1 	bl	8019684 <put_memory>
 8011ec2:	e7dd      	b.n	8011e80 <rmw_take_with_info+0x54>
 8011ec4:	200c      	movs	r0, #12
 8011ec6:	b009      	add	sp, #36	@ 0x24
 8011ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	0801e7c8 	.word	0x0801e7c8
 8011ed0:	20011aec 	.word	0x20011aec

08011ed4 <rmw_uxrce_transport_init>:
 8011ed4:	b508      	push	{r3, lr}
 8011ed6:	b108      	cbz	r0, 8011edc <rmw_uxrce_transport_init+0x8>
 8011ed8:	f100 0210 	add.w	r2, r0, #16
 8011edc:	b139      	cbz	r1, 8011eee <rmw_uxrce_transport_init+0x1a>
 8011ede:	6949      	ldr	r1, [r1, #20]
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	f001 fb7f 	bl	80135e4 <uxr_init_custom_transport>
 8011ee6:	f080 0001 	eor.w	r0, r0, #1
 8011eea:	b2c0      	uxtb	r0, r0
 8011eec:	bd08      	pop	{r3, pc}
 8011eee:	4b04      	ldr	r3, [pc, #16]	@ (8011f00 <rmw_uxrce_transport_init+0x2c>)
 8011ef0:	4610      	mov	r0, r2
 8011ef2:	6859      	ldr	r1, [r3, #4]
 8011ef4:	f001 fb76 	bl	80135e4 <uxr_init_custom_transport>
 8011ef8:	f080 0001 	eor.w	r0, r0, #1
 8011efc:	b2c0      	uxtb	r0, r0
 8011efe:	bd08      	pop	{r3, pc}
 8011f00:	2000d184 	.word	0x2000d184

08011f04 <rmw_uros_set_publisher_session_timeout>:
 8011f04:	b118      	cbz	r0, 8011f0e <rmw_uros_set_publisher_session_timeout+0xa>
 8011f06:	6843      	ldr	r3, [r0, #4]
 8011f08:	2000      	movs	r0, #0
 8011f0a:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8011f0c:	4770      	bx	lr
 8011f0e:	200b      	movs	r0, #11
 8011f10:	4770      	bx	lr
 8011f12:	bf00      	nop

08011f14 <rmw_uros_set_context_entity_destroy_session_timeout>:
 8011f14:	b160      	cbz	r0, 8011f30 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 8011f16:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011f18:	2900      	cmp	r1, #0
 8011f1a:	bfd4      	ite	le
 8011f1c:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 8011f20:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 8011f24:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 8011f28:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	4770      	bx	lr
 8011f30:	200b      	movs	r0, #11
 8011f32:	4770      	bx	lr

08011f34 <rmw_uxrce_init_service_memory>:
 8011f34:	b1e2      	cbz	r2, 8011f70 <rmw_uxrce_init_service_memory+0x3c>
 8011f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f3a:	7b05      	ldrb	r5, [r0, #12]
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	b9ad      	cbnz	r5, 8011f6c <rmw_uxrce_init_service_memory+0x38>
 8011f40:	23c8      	movs	r3, #200	@ 0xc8
 8011f42:	e9c0 5500 	strd	r5, r5, [r0]
 8011f46:	6083      	str	r3, [r0, #8]
 8011f48:	f240 1301 	movw	r3, #257	@ 0x101
 8011f4c:	4617      	mov	r7, r2
 8011f4e:	8183      	strh	r3, [r0, #12]
 8011f50:	460c      	mov	r4, r1
 8011f52:	46a8      	mov	r8, r5
 8011f54:	4621      	mov	r1, r4
 8011f56:	4630      	mov	r0, r6
 8011f58:	3501      	adds	r5, #1
 8011f5a:	f007 fb93 	bl	8019684 <put_memory>
 8011f5e:	42af      	cmp	r7, r5
 8011f60:	60a4      	str	r4, [r4, #8]
 8011f62:	f884 800c 	strb.w	r8, [r4, #12]
 8011f66:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011f6a:	d1f3      	bne.n	8011f54 <rmw_uxrce_init_service_memory+0x20>
 8011f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop

08011f74 <rmw_uxrce_init_client_memory>:
 8011f74:	b1e2      	cbz	r2, 8011fb0 <rmw_uxrce_init_client_memory+0x3c>
 8011f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f7a:	7b05      	ldrb	r5, [r0, #12]
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	b9ad      	cbnz	r5, 8011fac <rmw_uxrce_init_client_memory+0x38>
 8011f80:	23c8      	movs	r3, #200	@ 0xc8
 8011f82:	e9c0 5500 	strd	r5, r5, [r0]
 8011f86:	6083      	str	r3, [r0, #8]
 8011f88:	f240 1301 	movw	r3, #257	@ 0x101
 8011f8c:	4617      	mov	r7, r2
 8011f8e:	8183      	strh	r3, [r0, #12]
 8011f90:	460c      	mov	r4, r1
 8011f92:	46a8      	mov	r8, r5
 8011f94:	4621      	mov	r1, r4
 8011f96:	4630      	mov	r0, r6
 8011f98:	3501      	adds	r5, #1
 8011f9a:	f007 fb73 	bl	8019684 <put_memory>
 8011f9e:	42af      	cmp	r7, r5
 8011fa0:	60a4      	str	r4, [r4, #8]
 8011fa2:	f884 800c 	strb.w	r8, [r4, #12]
 8011fa6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011faa:	d1f3      	bne.n	8011f94 <rmw_uxrce_init_client_memory+0x20>
 8011fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fb0:	4770      	bx	lr
 8011fb2:	bf00      	nop

08011fb4 <rmw_uxrce_init_publisher_memory>:
 8011fb4:	b1e2      	cbz	r2, 8011ff0 <rmw_uxrce_init_publisher_memory+0x3c>
 8011fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fba:	7b05      	ldrb	r5, [r0, #12]
 8011fbc:	4606      	mov	r6, r0
 8011fbe:	b9ad      	cbnz	r5, 8011fec <rmw_uxrce_init_publisher_memory+0x38>
 8011fc0:	23d8      	movs	r3, #216	@ 0xd8
 8011fc2:	e9c0 5500 	strd	r5, r5, [r0]
 8011fc6:	6083      	str	r3, [r0, #8]
 8011fc8:	f240 1301 	movw	r3, #257	@ 0x101
 8011fcc:	4617      	mov	r7, r2
 8011fce:	8183      	strh	r3, [r0, #12]
 8011fd0:	460c      	mov	r4, r1
 8011fd2:	46a8      	mov	r8, r5
 8011fd4:	4621      	mov	r1, r4
 8011fd6:	4630      	mov	r0, r6
 8011fd8:	3501      	adds	r5, #1
 8011fda:	f007 fb53 	bl	8019684 <put_memory>
 8011fde:	42af      	cmp	r7, r5
 8011fe0:	60a4      	str	r4, [r4, #8]
 8011fe2:	f884 800c 	strb.w	r8, [r4, #12]
 8011fe6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011fea:	d1f3      	bne.n	8011fd4 <rmw_uxrce_init_publisher_memory+0x20>
 8011fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff0:	4770      	bx	lr
 8011ff2:	bf00      	nop

08011ff4 <rmw_uxrce_init_subscription_memory>:
 8011ff4:	b1e2      	cbz	r2, 8012030 <rmw_uxrce_init_subscription_memory+0x3c>
 8011ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffa:	7b05      	ldrb	r5, [r0, #12]
 8011ffc:	4606      	mov	r6, r0
 8011ffe:	b9ad      	cbnz	r5, 801202c <rmw_uxrce_init_subscription_memory+0x38>
 8012000:	23d8      	movs	r3, #216	@ 0xd8
 8012002:	e9c0 5500 	strd	r5, r5, [r0]
 8012006:	6083      	str	r3, [r0, #8]
 8012008:	f240 1301 	movw	r3, #257	@ 0x101
 801200c:	4617      	mov	r7, r2
 801200e:	8183      	strh	r3, [r0, #12]
 8012010:	460c      	mov	r4, r1
 8012012:	46a8      	mov	r8, r5
 8012014:	4621      	mov	r1, r4
 8012016:	4630      	mov	r0, r6
 8012018:	3501      	adds	r5, #1
 801201a:	f007 fb33 	bl	8019684 <put_memory>
 801201e:	42af      	cmp	r7, r5
 8012020:	60a4      	str	r4, [r4, #8]
 8012022:	f884 800c 	strb.w	r8, [r4, #12]
 8012026:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801202a:	d1f3      	bne.n	8012014 <rmw_uxrce_init_subscription_memory+0x20>
 801202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012030:	4770      	bx	lr
 8012032:	bf00      	nop

08012034 <rmw_uxrce_init_node_memory>:
 8012034:	b1e2      	cbz	r2, 8012070 <rmw_uxrce_init_node_memory+0x3c>
 8012036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801203a:	7b05      	ldrb	r5, [r0, #12]
 801203c:	4606      	mov	r6, r0
 801203e:	b9ad      	cbnz	r5, 801206c <rmw_uxrce_init_node_memory+0x38>
 8012040:	23a4      	movs	r3, #164	@ 0xa4
 8012042:	e9c0 5500 	strd	r5, r5, [r0]
 8012046:	6083      	str	r3, [r0, #8]
 8012048:	f240 1301 	movw	r3, #257	@ 0x101
 801204c:	4617      	mov	r7, r2
 801204e:	8183      	strh	r3, [r0, #12]
 8012050:	460c      	mov	r4, r1
 8012052:	46a8      	mov	r8, r5
 8012054:	4621      	mov	r1, r4
 8012056:	4630      	mov	r0, r6
 8012058:	3501      	adds	r5, #1
 801205a:	f007 fb13 	bl	8019684 <put_memory>
 801205e:	42af      	cmp	r7, r5
 8012060:	60a4      	str	r4, [r4, #8]
 8012062:	f884 800c 	strb.w	r8, [r4, #12]
 8012066:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 801206a:	d1f3      	bne.n	8012054 <rmw_uxrce_init_node_memory+0x20>
 801206c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012070:	4770      	bx	lr
 8012072:	bf00      	nop

08012074 <rmw_uxrce_init_session_memory>:
 8012074:	b1ea      	cbz	r2, 80120b2 <rmw_uxrce_init_session_memory+0x3e>
 8012076:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801207a:	7b05      	ldrb	r5, [r0, #12]
 801207c:	4606      	mov	r6, r0
 801207e:	b9b5      	cbnz	r5, 80120ae <rmw_uxrce_init_session_memory+0x3a>
 8012080:	e9c0 5500 	strd	r5, r5, [r0]
 8012084:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8012088:	f240 1301 	movw	r3, #257	@ 0x101
 801208c:	4617      	mov	r7, r2
 801208e:	f8c0 8008 	str.w	r8, [r0, #8]
 8012092:	460c      	mov	r4, r1
 8012094:	8183      	strh	r3, [r0, #12]
 8012096:	46a9      	mov	r9, r5
 8012098:	4621      	mov	r1, r4
 801209a:	4630      	mov	r0, r6
 801209c:	3501      	adds	r5, #1
 801209e:	f007 faf1 	bl	8019684 <put_memory>
 80120a2:	42af      	cmp	r7, r5
 80120a4:	60a4      	str	r4, [r4, #8]
 80120a6:	f884 900c 	strb.w	r9, [r4, #12]
 80120aa:	4444      	add	r4, r8
 80120ac:	d1f4      	bne.n	8012098 <rmw_uxrce_init_session_memory+0x24>
 80120ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120b2:	4770      	bx	lr

080120b4 <rmw_uxrce_init_topic_memory>:
 80120b4:	b1e2      	cbz	r2, 80120f0 <rmw_uxrce_init_topic_memory+0x3c>
 80120b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ba:	7b05      	ldrb	r5, [r0, #12]
 80120bc:	4606      	mov	r6, r0
 80120be:	b9ad      	cbnz	r5, 80120ec <rmw_uxrce_init_topic_memory+0x38>
 80120c0:	231c      	movs	r3, #28
 80120c2:	e9c0 5500 	strd	r5, r5, [r0]
 80120c6:	6083      	str	r3, [r0, #8]
 80120c8:	f240 1301 	movw	r3, #257	@ 0x101
 80120cc:	4617      	mov	r7, r2
 80120ce:	8183      	strh	r3, [r0, #12]
 80120d0:	460c      	mov	r4, r1
 80120d2:	46a8      	mov	r8, r5
 80120d4:	4621      	mov	r1, r4
 80120d6:	4630      	mov	r0, r6
 80120d8:	3501      	adds	r5, #1
 80120da:	f007 fad3 	bl	8019684 <put_memory>
 80120de:	42af      	cmp	r7, r5
 80120e0:	60a4      	str	r4, [r4, #8]
 80120e2:	f884 800c 	strb.w	r8, [r4, #12]
 80120e6:	f104 041c 	add.w	r4, r4, #28
 80120ea:	d1f3      	bne.n	80120d4 <rmw_uxrce_init_topic_memory+0x20>
 80120ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120f0:	4770      	bx	lr
 80120f2:	bf00      	nop

080120f4 <rmw_uxrce_init_static_input_buffer_memory>:
 80120f4:	b1ea      	cbz	r2, 8012132 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80120f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120fa:	7b05      	ldrb	r5, [r0, #12]
 80120fc:	4606      	mov	r6, r0
 80120fe:	b9b5      	cbnz	r5, 801212e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8012100:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8012104:	e9c0 5500 	strd	r5, r5, [r0]
 8012108:	6083      	str	r3, [r0, #8]
 801210a:	f240 1301 	movw	r3, #257	@ 0x101
 801210e:	4617      	mov	r7, r2
 8012110:	8183      	strh	r3, [r0, #12]
 8012112:	460c      	mov	r4, r1
 8012114:	46a8      	mov	r8, r5
 8012116:	4621      	mov	r1, r4
 8012118:	4630      	mov	r0, r6
 801211a:	3501      	adds	r5, #1
 801211c:	f007 fab2 	bl	8019684 <put_memory>
 8012120:	42af      	cmp	r7, r5
 8012122:	60a4      	str	r4, [r4, #8]
 8012124:	f884 800c 	strb.w	r8, [r4, #12]
 8012128:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801212c:	d1f3      	bne.n	8012116 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012132:	4770      	bx	lr

08012134 <rmw_uxrce_init_init_options_impl_memory>:
 8012134:	b1e2      	cbz	r2, 8012170 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8012136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801213a:	7b05      	ldrb	r5, [r0, #12]
 801213c:	4606      	mov	r6, r0
 801213e:	b9ad      	cbnz	r5, 801216c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8012140:	232c      	movs	r3, #44	@ 0x2c
 8012142:	e9c0 5500 	strd	r5, r5, [r0]
 8012146:	6083      	str	r3, [r0, #8]
 8012148:	f240 1301 	movw	r3, #257	@ 0x101
 801214c:	4617      	mov	r7, r2
 801214e:	8183      	strh	r3, [r0, #12]
 8012150:	460c      	mov	r4, r1
 8012152:	46a8      	mov	r8, r5
 8012154:	4621      	mov	r1, r4
 8012156:	4630      	mov	r0, r6
 8012158:	3501      	adds	r5, #1
 801215a:	f007 fa93 	bl	8019684 <put_memory>
 801215e:	42af      	cmp	r7, r5
 8012160:	60a4      	str	r4, [r4, #8]
 8012162:	f884 800c 	strb.w	r8, [r4, #12]
 8012166:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 801216a:	d1f3      	bne.n	8012154 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop

08012174 <rmw_uxrce_init_wait_set_memory>:
 8012174:	b1e2      	cbz	r2, 80121b0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8012176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801217a:	7b05      	ldrb	r5, [r0, #12]
 801217c:	4606      	mov	r6, r0
 801217e:	b9ad      	cbnz	r5, 80121ac <rmw_uxrce_init_wait_set_memory+0x38>
 8012180:	231c      	movs	r3, #28
 8012182:	e9c0 5500 	strd	r5, r5, [r0]
 8012186:	6083      	str	r3, [r0, #8]
 8012188:	f240 1301 	movw	r3, #257	@ 0x101
 801218c:	4617      	mov	r7, r2
 801218e:	8183      	strh	r3, [r0, #12]
 8012190:	460c      	mov	r4, r1
 8012192:	46a8      	mov	r8, r5
 8012194:	4621      	mov	r1, r4
 8012196:	4630      	mov	r0, r6
 8012198:	3501      	adds	r5, #1
 801219a:	f007 fa73 	bl	8019684 <put_memory>
 801219e:	42af      	cmp	r7, r5
 80121a0:	60a4      	str	r4, [r4, #8]
 80121a2:	f884 800c 	strb.w	r8, [r4, #12]
 80121a6:	f104 041c 	add.w	r4, r4, #28
 80121aa:	d1f3      	bne.n	8012194 <rmw_uxrce_init_wait_set_memory+0x20>
 80121ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop

080121b4 <rmw_uxrce_init_guard_condition_memory>:
 80121b4:	b1e2      	cbz	r2, 80121f0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80121b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ba:	7b05      	ldrb	r5, [r0, #12]
 80121bc:	4606      	mov	r6, r0
 80121be:	b9ad      	cbnz	r5, 80121ec <rmw_uxrce_init_guard_condition_memory+0x38>
 80121c0:	2320      	movs	r3, #32
 80121c2:	e9c0 5500 	strd	r5, r5, [r0]
 80121c6:	6083      	str	r3, [r0, #8]
 80121c8:	f240 1301 	movw	r3, #257	@ 0x101
 80121cc:	4617      	mov	r7, r2
 80121ce:	8183      	strh	r3, [r0, #12]
 80121d0:	460c      	mov	r4, r1
 80121d2:	46a8      	mov	r8, r5
 80121d4:	4621      	mov	r1, r4
 80121d6:	4630      	mov	r0, r6
 80121d8:	3501      	adds	r5, #1
 80121da:	f007 fa53 	bl	8019684 <put_memory>
 80121de:	42af      	cmp	r7, r5
 80121e0:	60a4      	str	r4, [r4, #8]
 80121e2:	f884 800c 	strb.w	r8, [r4, #12]
 80121e6:	f104 0420 	add.w	r4, r4, #32
 80121ea:	d1f3      	bne.n	80121d4 <rmw_uxrce_init_guard_condition_memory+0x20>
 80121ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop

080121f4 <rmw_uxrce_fini_session_memory>:
 80121f4:	4601      	mov	r1, r0
 80121f6:	4801      	ldr	r0, [pc, #4]	@ (80121fc <rmw_uxrce_fini_session_memory+0x8>)
 80121f8:	f007 ba44 	b.w	8019684 <put_memory>
 80121fc:	20011adc 	.word	0x20011adc

08012200 <rmw_uxrce_fini_node_memory>:
 8012200:	b538      	push	{r3, r4, r5, lr}
 8012202:	4604      	mov	r4, r0
 8012204:	6800      	ldr	r0, [r0, #0]
 8012206:	b128      	cbz	r0, 8012214 <rmw_uxrce_fini_node_memory+0x14>
 8012208:	4b07      	ldr	r3, [pc, #28]	@ (8012228 <rmw_uxrce_fini_node_memory+0x28>)
 801220a:	6819      	ldr	r1, [r3, #0]
 801220c:	f7ee f800 	bl	8000210 <strcmp>
 8012210:	b940      	cbnz	r0, 8012224 <rmw_uxrce_fini_node_memory+0x24>
 8012212:	6020      	str	r0, [r4, #0]
 8012214:	6861      	ldr	r1, [r4, #4]
 8012216:	b129      	cbz	r1, 8012224 <rmw_uxrce_fini_node_memory+0x24>
 8012218:	2500      	movs	r5, #0
 801221a:	4804      	ldr	r0, [pc, #16]	@ (801222c <rmw_uxrce_fini_node_memory+0x2c>)
 801221c:	610d      	str	r5, [r1, #16]
 801221e:	f007 fa31 	bl	8019684 <put_memory>
 8012222:	6065      	str	r5, [r4, #4]
 8012224:	bd38      	pop	{r3, r4, r5, pc}
 8012226:	bf00      	nop
 8012228:	0801e7c8 	.word	0x0801e7c8
 801222c:	20011aac 	.word	0x20011aac

08012230 <rmw_uxrce_fini_publisher_memory>:
 8012230:	b510      	push	{r4, lr}
 8012232:	4604      	mov	r4, r0
 8012234:	6800      	ldr	r0, [r0, #0]
 8012236:	b128      	cbz	r0, 8012244 <rmw_uxrce_fini_publisher_memory+0x14>
 8012238:	4b06      	ldr	r3, [pc, #24]	@ (8012254 <rmw_uxrce_fini_publisher_memory+0x24>)
 801223a:	6819      	ldr	r1, [r3, #0]
 801223c:	f7ed ffe8 	bl	8000210 <strcmp>
 8012240:	b938      	cbnz	r0, 8012252 <rmw_uxrce_fini_publisher_memory+0x22>
 8012242:	6020      	str	r0, [r4, #0]
 8012244:	6861      	ldr	r1, [r4, #4]
 8012246:	b121      	cbz	r1, 8012252 <rmw_uxrce_fini_publisher_memory+0x22>
 8012248:	4803      	ldr	r0, [pc, #12]	@ (8012258 <rmw_uxrce_fini_publisher_memory+0x28>)
 801224a:	f007 fa1b 	bl	8019684 <put_memory>
 801224e:	2300      	movs	r3, #0
 8012250:	6063      	str	r3, [r4, #4]
 8012252:	bd10      	pop	{r4, pc}
 8012254:	0801e7c8 	.word	0x0801e7c8
 8012258:	20011abc 	.word	0x20011abc

0801225c <rmw_uxrce_fini_subscription_memory>:
 801225c:	b510      	push	{r4, lr}
 801225e:	4604      	mov	r4, r0
 8012260:	6800      	ldr	r0, [r0, #0]
 8012262:	b128      	cbz	r0, 8012270 <rmw_uxrce_fini_subscription_memory+0x14>
 8012264:	4b06      	ldr	r3, [pc, #24]	@ (8012280 <rmw_uxrce_fini_subscription_memory+0x24>)
 8012266:	6819      	ldr	r1, [r3, #0]
 8012268:	f7ed ffd2 	bl	8000210 <strcmp>
 801226c:	b938      	cbnz	r0, 801227e <rmw_uxrce_fini_subscription_memory+0x22>
 801226e:	6020      	str	r0, [r4, #0]
 8012270:	6861      	ldr	r1, [r4, #4]
 8012272:	b121      	cbz	r1, 801227e <rmw_uxrce_fini_subscription_memory+0x22>
 8012274:	4803      	ldr	r0, [pc, #12]	@ (8012284 <rmw_uxrce_fini_subscription_memory+0x28>)
 8012276:	f007 fa05 	bl	8019684 <put_memory>
 801227a:	2300      	movs	r3, #0
 801227c:	6063      	str	r3, [r4, #4]
 801227e:	bd10      	pop	{r4, pc}
 8012280:	0801e7c8 	.word	0x0801e7c8
 8012284:	20011afc 	.word	0x20011afc

08012288 <rmw_uxrce_fini_service_memory>:
 8012288:	b510      	push	{r4, lr}
 801228a:	4604      	mov	r4, r0
 801228c:	6800      	ldr	r0, [r0, #0]
 801228e:	b128      	cbz	r0, 801229c <rmw_uxrce_fini_service_memory+0x14>
 8012290:	4b06      	ldr	r3, [pc, #24]	@ (80122ac <rmw_uxrce_fini_service_memory+0x24>)
 8012292:	6819      	ldr	r1, [r3, #0]
 8012294:	f7ed ffbc 	bl	8000210 <strcmp>
 8012298:	b938      	cbnz	r0, 80122aa <rmw_uxrce_fini_service_memory+0x22>
 801229a:	6020      	str	r0, [r4, #0]
 801229c:	6861      	ldr	r1, [r4, #4]
 801229e:	b121      	cbz	r1, 80122aa <rmw_uxrce_fini_service_memory+0x22>
 80122a0:	4803      	ldr	r0, [pc, #12]	@ (80122b0 <rmw_uxrce_fini_service_memory+0x28>)
 80122a2:	f007 f9ef 	bl	8019684 <put_memory>
 80122a6:	2300      	movs	r3, #0
 80122a8:	6063      	str	r3, [r4, #4]
 80122aa:	bd10      	pop	{r4, pc}
 80122ac:	0801e7c8 	.word	0x0801e7c8
 80122b0:	20011acc 	.word	0x20011acc

080122b4 <rmw_uxrce_fini_client_memory>:
 80122b4:	b510      	push	{r4, lr}
 80122b6:	4604      	mov	r4, r0
 80122b8:	6800      	ldr	r0, [r0, #0]
 80122ba:	b128      	cbz	r0, 80122c8 <rmw_uxrce_fini_client_memory+0x14>
 80122bc:	4b06      	ldr	r3, [pc, #24]	@ (80122d8 <rmw_uxrce_fini_client_memory+0x24>)
 80122be:	6819      	ldr	r1, [r3, #0]
 80122c0:	f7ed ffa6 	bl	8000210 <strcmp>
 80122c4:	b938      	cbnz	r0, 80122d6 <rmw_uxrce_fini_client_memory+0x22>
 80122c6:	6020      	str	r0, [r4, #0]
 80122c8:	6861      	ldr	r1, [r4, #4]
 80122ca:	b121      	cbz	r1, 80122d6 <rmw_uxrce_fini_client_memory+0x22>
 80122cc:	4803      	ldr	r0, [pc, #12]	@ (80122dc <rmw_uxrce_fini_client_memory+0x28>)
 80122ce:	f007 f9d9 	bl	8019684 <put_memory>
 80122d2:	2300      	movs	r3, #0
 80122d4:	6063      	str	r3, [r4, #4]
 80122d6:	bd10      	pop	{r4, pc}
 80122d8:	0801e7c8 	.word	0x0801e7c8
 80122dc:	2000d1dc 	.word	0x2000d1dc

080122e0 <rmw_uxrce_fini_topic_memory>:
 80122e0:	b510      	push	{r4, lr}
 80122e2:	4604      	mov	r4, r0
 80122e4:	4621      	mov	r1, r4
 80122e6:	4803      	ldr	r0, [pc, #12]	@ (80122f4 <rmw_uxrce_fini_topic_memory+0x14>)
 80122e8:	f007 f9cc 	bl	8019684 <put_memory>
 80122ec:	2300      	movs	r3, #0
 80122ee:	61a3      	str	r3, [r4, #24]
 80122f0:	bd10      	pop	{r4, pc}
 80122f2:	bf00      	nop
 80122f4:	20011b0c 	.word	0x20011b0c

080122f8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80122f8:	b082      	sub	sp, #8
 80122fa:	b530      	push	{r4, r5, lr}
 80122fc:	4925      	ldr	r1, [pc, #148]	@ (8012394 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80122fe:	680d      	ldr	r5, [r1, #0]
 8012300:	ac03      	add	r4, sp, #12
 8012302:	e884 000c 	stmia.w	r4, {r2, r3}
 8012306:	461c      	mov	r4, r3
 8012308:	2d00      	cmp	r5, #0
 801230a:	d041      	beq.n	8012390 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 801230c:	462b      	mov	r3, r5
 801230e:	2100      	movs	r1, #0
 8012310:	689a      	ldr	r2, [r3, #8]
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8012318:	4290      	cmp	r0, r2
 801231a:	bf08      	it	eq
 801231c:	3101      	addeq	r1, #1
 801231e:	2b00      	cmp	r3, #0
 8012320:	d1f6      	bne.n	8012310 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8012322:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012326:	2b02      	cmp	r3, #2
 8012328:	d029      	beq.n	801237e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801232a:	d907      	bls.n	801233c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 801232c:	2b03      	cmp	r3, #3
 801232e:	d005      	beq.n	801233c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8012330:	2100      	movs	r1, #0
 8012332:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012336:	4608      	mov	r0, r1
 8012338:	b002      	add	sp, #8
 801233a:	4770      	bx	lr
 801233c:	b314      	cbz	r4, 8012384 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801233e:	428c      	cmp	r4, r1
 8012340:	d820      	bhi.n	8012384 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8012342:	2d00      	cmp	r5, #0
 8012344:	d0f4      	beq.n	8012330 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8012346:	2100      	movs	r1, #0
 8012348:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801234c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8012350:	e002      	b.n	8012358 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8012352:	686d      	ldr	r5, [r5, #4]
 8012354:	2d00      	cmp	r5, #0
 8012356:	d0ec      	beq.n	8012332 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8012358:	68ab      	ldr	r3, [r5, #8]
 801235a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 801235e:	4290      	cmp	r0, r2
 8012360:	d1f7      	bne.n	8012352 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8012362:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8012366:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 801236a:	4562      	cmp	r2, ip
 801236c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012370:	eb73 0e04 	sbcs.w	lr, r3, r4
 8012374:	daed      	bge.n	8012352 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8012376:	4694      	mov	ip, r2
 8012378:	461c      	mov	r4, r3
 801237a:	4629      	mov	r1, r5
 801237c:	e7e9      	b.n	8012352 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801237e:	b10c      	cbz	r4, 8012384 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8012380:	428c      	cmp	r4, r1
 8012382:	d9d5      	bls.n	8012330 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8012384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012388:	4802      	ldr	r0, [pc, #8]	@ (8012394 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 801238a:	b002      	add	sp, #8
 801238c:	f007 b96a 	b.w	8019664 <get_memory>
 8012390:	4629      	mov	r1, r5
 8012392:	e7c6      	b.n	8012322 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8012394:	20011aec 	.word	0x20011aec

08012398 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8012398:	4b11      	ldr	r3, [pc, #68]	@ (80123e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	b530      	push	{r4, r5, lr}
 801239e:	b1e3      	cbz	r3, 80123da <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80123a0:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 80123a4:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80123a8:	2400      	movs	r4, #0
 80123aa:	e001      	b.n	80123b0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	b193      	cbz	r3, 80123d6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 80123b0:	689a      	ldr	r2, [r3, #8]
 80123b2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80123b6:	4288      	cmp	r0, r1
 80123b8:	d1f8      	bne.n	80123ac <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80123ba:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 80123be:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 80123c2:	4571      	cmp	r1, lr
 80123c4:	eb72 050c 	sbcs.w	r5, r2, ip
 80123c8:	daf0      	bge.n	80123ac <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80123ca:	461c      	mov	r4, r3
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	468e      	mov	lr, r1
 80123d0:	4694      	mov	ip, r2
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d1ec      	bne.n	80123b0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80123d6:	4620      	mov	r0, r4
 80123d8:	bd30      	pop	{r4, r5, pc}
 80123da:	461c      	mov	r4, r3
 80123dc:	4620      	mov	r0, r4
 80123de:	bd30      	pop	{r4, r5, pc}
 80123e0:	20011aec 	.word	0x20011aec
 80123e4:	00000000 	.word	0x00000000

080123e8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	4b3c      	ldr	r3, [pc, #240]	@ (80124e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80123ee:	ed2d 8b06 	vpush	{d8-d10}
 80123f2:	681f      	ldr	r7, [r3, #0]
 80123f4:	b08d      	sub	sp, #52	@ 0x34
 80123f6:	f007 fd35 	bl	8019e64 <rmw_uros_epoch_nanos>
 80123fa:	2f00      	cmp	r7, #0
 80123fc:	d05d      	beq.n	80124ba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80123fe:	46b8      	mov	r8, r7
 8012400:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80124c8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8012404:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012408:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801240c:	2b04      	cmp	r3, #4
 801240e:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80124d0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8012412:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80124d8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8012416:	4681      	mov	r9, r0
 8012418:	468a      	mov	sl, r1
 801241a:	ac04      	add	r4, sp, #16
 801241c:	d03f      	beq.n	801249e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801241e:	2b05      	cmp	r3, #5
 8012420:	d044      	beq.n	80124ac <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8012422:	2b03      	cmp	r3, #3
 8012424:	d03b      	beq.n	801249e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8012426:	ed8d 8b04 	vstr	d8, [sp, #16]
 801242a:	ed8d ab06 	vstr	d10, [sp, #24]
 801242e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012432:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8012436:	ab08      	add	r3, sp, #32
 8012438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801243a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801243e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012442:	f006 ff2d 	bl	80192a0 <rmw_time_equal>
 8012446:	b118      	cbz	r0, 8012450 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8012448:	ed8d 9b04 	vstr	d9, [sp, #16]
 801244c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012450:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012454:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8012458:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 801245c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8012460:	f006 ff72 	bl	8019348 <rmw_time_total_nsec>
 8012464:	1830      	adds	r0, r6, r0
 8012466:	eb47 0101 	adc.w	r1, r7, r1
 801246a:	4548      	cmp	r0, r9
 801246c:	eb71 030a 	sbcs.w	r3, r1, sl
 8012470:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8012474:	db05      	blt.n	8012482 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8012476:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801247a:	4591      	cmp	r9, r2
 801247c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8012480:	da03      	bge.n	801248a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8012482:	4817      	ldr	r0, [pc, #92]	@ (80124e0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012484:	4641      	mov	r1, r8
 8012486:	f007 f8fd 	bl	8019684 <put_memory>
 801248a:	f1bb 0f00 	cmp.w	fp, #0
 801248e:	d014      	beq.n	80124ba <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8012490:	46d8      	mov	r8, fp
 8012492:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012496:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801249a:	2b04      	cmp	r3, #4
 801249c:	d1bf      	bne.n	801241e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801249e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80124a2:	3340      	adds	r3, #64	@ 0x40
 80124a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80124aa:	e7c0      	b.n	801242e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80124ac:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 80124b0:	3348      	adds	r3, #72	@ 0x48
 80124b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80124b8:	e7b9      	b.n	801242e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80124ba:	b00d      	add	sp, #52	@ 0x34
 80124bc:	ecbd 8b06 	vpop	{d8-d10}
 80124c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c4:	f3af 8000 	nop.w
	...
 80124d0:	00000001 	.word	0x00000001
 80124d4:	00000000 	.word	0x00000000
 80124d8:	0000001e 	.word	0x0000001e
 80124dc:	00000000 	.word	0x00000000
 80124e0:	20011aec 	.word	0x20011aec

080124e4 <run_xrce_session>:
 80124e4:	b510      	push	{r4, lr}
 80124e6:	788c      	ldrb	r4, [r1, #2]
 80124e8:	b086      	sub	sp, #24
 80124ea:	2c01      	cmp	r4, #1
 80124ec:	f8ad 200e 	strh.w	r2, [sp, #14]
 80124f0:	d00c      	beq.n	801250c <run_xrce_session+0x28>
 80124f2:	4619      	mov	r1, r3
 80124f4:	2301      	movs	r3, #1
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	f10d 020e 	add.w	r2, sp, #14
 80124fc:	f10d 0317 	add.w	r3, sp, #23
 8012500:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012504:	f002 f80e 	bl	8014524 <uxr_run_session_until_all_status>
 8012508:	b006      	add	sp, #24
 801250a:	bd10      	pop	{r4, pc}
 801250c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012510:	f001 fc22 	bl	8013d58 <uxr_flash_output_streams>
 8012514:	4620      	mov	r0, r4
 8012516:	b006      	add	sp, #24
 8012518:	bd10      	pop	{r4, pc}
 801251a:	bf00      	nop

0801251c <convert_qos_profile>:
 801251c:	7a4a      	ldrb	r2, [r1, #9]
 801251e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012522:	2a02      	cmp	r2, #2
 8012524:	bf18      	it	ne
 8012526:	2200      	movne	r2, #0
 8012528:	7002      	strb	r2, [r0, #0]
 801252a:	780a      	ldrb	r2, [r1, #0]
 801252c:	8889      	ldrh	r1, [r1, #4]
 801252e:	8081      	strh	r1, [r0, #4]
 8012530:	f1ac 0c02 	sub.w	ip, ip, #2
 8012534:	f1a2 0202 	sub.w	r2, r2, #2
 8012538:	fabc fc8c 	clz	ip, ip
 801253c:	fab2 f282 	clz	r2, r2
 8012540:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8012544:	0952      	lsrs	r2, r2, #5
 8012546:	f880 c001 	strb.w	ip, [r0, #1]
 801254a:	7082      	strb	r2, [r0, #2]
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop

08012550 <generate_type_name>:
 8012550:	b530      	push	{r4, r5, lr}
 8012552:	2300      	movs	r3, #0
 8012554:	700b      	strb	r3, [r1, #0]
 8012556:	6803      	ldr	r3, [r0, #0]
 8012558:	b087      	sub	sp, #28
 801255a:	4614      	mov	r4, r2
 801255c:	b1d3      	cbz	r3, 8012594 <generate_type_name+0x44>
 801255e:	4a0f      	ldr	r2, [pc, #60]	@ (801259c <generate_type_name+0x4c>)
 8012560:	4615      	mov	r5, r2
 8012562:	9203      	str	r2, [sp, #12]
 8012564:	9500      	str	r5, [sp, #0]
 8012566:	6842      	ldr	r2, [r0, #4]
 8012568:	480d      	ldr	r0, [pc, #52]	@ (80125a0 <generate_type_name+0x50>)
 801256a:	9001      	str	r0, [sp, #4]
 801256c:	4608      	mov	r0, r1
 801256e:	490d      	ldr	r1, [pc, #52]	@ (80125a4 <generate_type_name+0x54>)
 8012570:	9204      	str	r2, [sp, #16]
 8012572:	9105      	str	r1, [sp, #20]
 8012574:	9102      	str	r1, [sp, #8]
 8012576:	4a0c      	ldr	r2, [pc, #48]	@ (80125a8 <generate_type_name+0x58>)
 8012578:	4621      	mov	r1, r4
 801257a:	f00a f86b 	bl	801c654 <sniprintf>
 801257e:	2800      	cmp	r0, #0
 8012580:	db05      	blt.n	801258e <generate_type_name+0x3e>
 8012582:	4284      	cmp	r4, r0
 8012584:	bfd4      	ite	le
 8012586:	2000      	movle	r0, #0
 8012588:	2001      	movgt	r0, #1
 801258a:	b007      	add	sp, #28
 801258c:	bd30      	pop	{r4, r5, pc}
 801258e:	2000      	movs	r0, #0
 8012590:	b007      	add	sp, #28
 8012592:	bd30      	pop	{r4, r5, pc}
 8012594:	4b05      	ldr	r3, [pc, #20]	@ (80125ac <generate_type_name+0x5c>)
 8012596:	4a01      	ldr	r2, [pc, #4]	@ (801259c <generate_type_name+0x4c>)
 8012598:	461d      	mov	r5, r3
 801259a:	e7e2      	b.n	8012562 <generate_type_name+0x12>
 801259c:	0801de1c 	.word	0x0801de1c
 80125a0:	0801de34 	.word	0x0801de34
 80125a4:	0801de30 	.word	0x0801de30
 80125a8:	0801de20 	.word	0x0801de20
 80125ac:	0801e044 	.word	0x0801e044

080125b0 <generate_topic_name>:
 80125b0:	b510      	push	{r4, lr}
 80125b2:	b082      	sub	sp, #8
 80125b4:	4614      	mov	r4, r2
 80125b6:	9000      	str	r0, [sp, #0]
 80125b8:	4b08      	ldr	r3, [pc, #32]	@ (80125dc <generate_topic_name+0x2c>)
 80125ba:	4a09      	ldr	r2, [pc, #36]	@ (80125e0 <generate_topic_name+0x30>)
 80125bc:	4608      	mov	r0, r1
 80125be:	4621      	mov	r1, r4
 80125c0:	f00a f848 	bl	801c654 <sniprintf>
 80125c4:	2800      	cmp	r0, #0
 80125c6:	db05      	blt.n	80125d4 <generate_topic_name+0x24>
 80125c8:	4284      	cmp	r4, r0
 80125ca:	bfd4      	ite	le
 80125cc:	2000      	movle	r0, #0
 80125ce:	2001      	movgt	r0, #1
 80125d0:	b002      	add	sp, #8
 80125d2:	bd10      	pop	{r4, pc}
 80125d4:	2000      	movs	r0, #0
 80125d6:	b002      	add	sp, #8
 80125d8:	bd10      	pop	{r4, pc}
 80125da:	bf00      	nop
 80125dc:	0801e428 	.word	0x0801e428
 80125e0:	0801daec 	.word	0x0801daec

080125e4 <is_uxrce_rmw_identifier_valid>:
 80125e4:	b510      	push	{r4, lr}
 80125e6:	4604      	mov	r4, r0
 80125e8:	b140      	cbz	r0, 80125fc <is_uxrce_rmw_identifier_valid+0x18>
 80125ea:	f007 f8a3 	bl	8019734 <rmw_get_implementation_identifier>
 80125ee:	4601      	mov	r1, r0
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7ed fe0d 	bl	8000210 <strcmp>
 80125f6:	fab0 f080 	clz	r0, r0
 80125fa:	0940      	lsrs	r0, r0, #5
 80125fc:	bd10      	pop	{r4, pc}
 80125fe:	bf00      	nop

08012600 <get_message_typesupport_handle>:
 8012600:	6883      	ldr	r3, [r0, #8]
 8012602:	4718      	bx	r3

08012604 <get_message_typesupport_handle_function>:
 8012604:	b510      	push	{r4, lr}
 8012606:	4604      	mov	r4, r0
 8012608:	6800      	ldr	r0, [r0, #0]
 801260a:	f7ed fe01 	bl	8000210 <strcmp>
 801260e:	2800      	cmp	r0, #0
 8012610:	bf0c      	ite	eq
 8012612:	4620      	moveq	r0, r4
 8012614:	2000      	movne	r0, #0
 8012616:	bd10      	pop	{r4, pc}

08012618 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261c:	6805      	ldr	r5, [r0, #0]
 801261e:	4604      	mov	r4, r0
 8012620:	4628      	mov	r0, r5
 8012622:	460e      	mov	r6, r1
 8012624:	f7ed fdf4 	bl	8000210 <strcmp>
 8012628:	b1c8      	cbz	r0, 801265e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801262a:	4b11      	ldr	r3, [pc, #68]	@ (8012670 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	429d      	cmp	r5, r3
 8012630:	d112      	bne.n	8012658 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012632:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012636:	f8d8 4000 	ldr.w	r4, [r8]
 801263a:	b16c      	cbz	r4, 8012658 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801263c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012640:	2700      	movs	r7, #0
 8012642:	3d04      	subs	r5, #4
 8012644:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012648:	4631      	mov	r1, r6
 801264a:	f7ed fde1 	bl	8000210 <strcmp>
 801264e:	00bb      	lsls	r3, r7, #2
 8012650:	b140      	cbz	r0, 8012664 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012652:	3701      	adds	r7, #1
 8012654:	42bc      	cmp	r4, r7
 8012656:	d1f5      	bne.n	8012644 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012658:	2000      	movs	r0, #0
 801265a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801265e:	4620      	mov	r0, r4
 8012660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012664:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801266c:	58d3      	ldr	r3, [r2, r3]
 801266e:	4718      	bx	r3
 8012670:	2000030c 	.word	0x2000030c

08012674 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012674:	4b04      	ldr	r3, [pc, #16]	@ (8012688 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	b10a      	cbz	r2, 801267e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801267a:	4803      	ldr	r0, [pc, #12]	@ (8012688 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801267c:	4770      	bx	lr
 801267e:	4a03      	ldr	r2, [pc, #12]	@ (801268c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8012680:	4801      	ldr	r0, [pc, #4]	@ (8012688 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012682:	6812      	ldr	r2, [r2, #0]
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	4770      	bx	lr
 8012688:	2000031c 	.word	0x2000031c
 801268c:	2000030c 	.word	0x2000030c

08012690 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012690:	4a02      	ldr	r2, [pc, #8]	@ (801269c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8012692:	4b03      	ldr	r3, [pc, #12]	@ (80126a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8012694:	6812      	ldr	r2, [r2, #0]
 8012696:	601a      	str	r2, [r3, #0]
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	2000030c 	.word	0x2000030c
 80126a0:	2000031c 	.word	0x2000031c

080126a4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 80126a4:	f007 bc4a 	b.w	8019f3c <std_msgs__msg__Header__init>

080126a8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 80126a8:	f007 bc6c 	b.w	8019f84 <std_msgs__msg__Header__fini>

080126ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80126ac:	b508      	push	{r3, lr}
 80126ae:	f000 f8eb 	bl	8012888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80126b2:	4b06      	ldr	r3, [pc, #24]	@ (80126cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80126b4:	4906      	ldr	r1, [pc, #24]	@ (80126d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	60c8      	str	r0, [r1, #12]
 80126ba:	b10a      	cbz	r2, 80126c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80126bc:	4803      	ldr	r0, [pc, #12]	@ (80126cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80126be:	bd08      	pop	{r3, pc}
 80126c0:	4a04      	ldr	r2, [pc, #16]	@ (80126d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80126c2:	4802      	ldr	r0, [pc, #8]	@ (80126cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80126c4:	6812      	ldr	r2, [r2, #0]
 80126c6:	601a      	str	r2, [r3, #0]
 80126c8:	bd08      	pop	{r3, pc}
 80126ca:	bf00      	nop
 80126cc:	200003a0 	.word	0x200003a0
 80126d0:	20000328 	.word	0x20000328
 80126d4:	20000310 	.word	0x20000310

080126d8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 80126d8:	f007 bc60 	b.w	8019f9c <std_msgs__msg__Int32__init>

080126dc <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80126dc:	f007 bc62 	b.w	8019fa4 <std_msgs__msg__Int32__fini>

080126e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80126e0:	4b04      	ldr	r3, [pc, #16]	@ (80126f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80126e2:	681a      	ldr	r2, [r3, #0]
 80126e4:	b10a      	cbz	r2, 80126ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80126e6:	4803      	ldr	r0, [pc, #12]	@ (80126f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80126e8:	4770      	bx	lr
 80126ea:	4a03      	ldr	r2, [pc, #12]	@ (80126f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80126ec:	4801      	ldr	r0, [pc, #4]	@ (80126f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80126ee:	6812      	ldr	r2, [r2, #0]
 80126f0:	601a      	str	r2, [r3, #0]
 80126f2:	4770      	bx	lr
 80126f4:	200003e8 	.word	0x200003e8
 80126f8:	20000310 	.word	0x20000310

080126fc <_Header__max_serialized_size>:
 80126fc:	b500      	push	{lr}
 80126fe:	b083      	sub	sp, #12
 8012700:	2301      	movs	r3, #1
 8012702:	2100      	movs	r1, #0
 8012704:	f10d 0007 	add.w	r0, sp, #7
 8012708:	f88d 3007 	strb.w	r3, [sp, #7]
 801270c:	f000 f91a 	bl	8012944 <max_serialized_size_builtin_interfaces__msg__Time>
 8012710:	b003      	add	sp, #12
 8012712:	f85d fb04 	ldr.w	pc, [sp], #4
 8012716:	bf00      	nop

08012718 <get_serialized_size_std_msgs__msg__Header>:
 8012718:	b570      	push	{r4, r5, r6, lr}
 801271a:	4605      	mov	r5, r0
 801271c:	b168      	cbz	r0, 801273a <get_serialized_size_std_msgs__msg__Header+0x22>
 801271e:	460c      	mov	r4, r1
 8012720:	f000 f8c0 	bl	80128a4 <get_serialized_size_builtin_interfaces__msg__Time>
 8012724:	1826      	adds	r6, r4, r0
 8012726:	2104      	movs	r1, #4
 8012728:	4630      	mov	r0, r6
 801272a:	f7fb fe2b 	bl	800e384 <ucdr_alignment>
 801272e:	68e9      	ldr	r1, [r5, #12]
 8012730:	f1c4 0405 	rsb	r4, r4, #5
 8012734:	440c      	add	r4, r1
 8012736:	4404      	add	r4, r0
 8012738:	19a0      	adds	r0, r4, r6
 801273a:	bd70      	pop	{r4, r5, r6, pc}

0801273c <_Header__cdr_deserialize>:
 801273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801273e:	460c      	mov	r4, r1
 8012740:	b083      	sub	sp, #12
 8012742:	b1e1      	cbz	r1, 801277e <_Header__cdr_deserialize+0x42>
 8012744:	4606      	mov	r6, r0
 8012746:	f000 f911 	bl	801296c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801274a:	6843      	ldr	r3, [r0, #4]
 801274c:	4621      	mov	r1, r4
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	4630      	mov	r0, r6
 8012752:	4798      	blx	r3
 8012754:	6927      	ldr	r7, [r4, #16]
 8012756:	68a1      	ldr	r1, [r4, #8]
 8012758:	ab01      	add	r3, sp, #4
 801275a:	463a      	mov	r2, r7
 801275c:	4630      	mov	r0, r6
 801275e:	f000 fc6f 	bl	8013040 <ucdr_deserialize_sequence_char>
 8012762:	9b01      	ldr	r3, [sp, #4]
 8012764:	4605      	mov	r5, r0
 8012766:	b920      	cbnz	r0, 8012772 <_Header__cdr_deserialize+0x36>
 8012768:	429f      	cmp	r7, r3
 801276a:	d30c      	bcc.n	8012786 <_Header__cdr_deserialize+0x4a>
 801276c:	4628      	mov	r0, r5
 801276e:	b003      	add	sp, #12
 8012770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012772:	b103      	cbz	r3, 8012776 <_Header__cdr_deserialize+0x3a>
 8012774:	3b01      	subs	r3, #1
 8012776:	4628      	mov	r0, r5
 8012778:	60e3      	str	r3, [r4, #12]
 801277a:	b003      	add	sp, #12
 801277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801277e:	460d      	mov	r5, r1
 8012780:	4628      	mov	r0, r5
 8012782:	b003      	add	sp, #12
 8012784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012786:	2101      	movs	r1, #1
 8012788:	75b0      	strb	r0, [r6, #22]
 801278a:	7571      	strb	r1, [r6, #21]
 801278c:	4630      	mov	r0, r6
 801278e:	60e5      	str	r5, [r4, #12]
 8012790:	f7fb fe0e 	bl	800e3b0 <ucdr_align_to>
 8012794:	4630      	mov	r0, r6
 8012796:	9901      	ldr	r1, [sp, #4]
 8012798:	f7fb fe40 	bl	800e41c <ucdr_advance_buffer>
 801279c:	4628      	mov	r0, r5
 801279e:	b003      	add	sp, #12
 80127a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127a2:	bf00      	nop

080127a4 <_Header__cdr_serialize>:
 80127a4:	b1f8      	cbz	r0, 80127e6 <_Header__cdr_serialize+0x42>
 80127a6:	b570      	push	{r4, r5, r6, lr}
 80127a8:	4604      	mov	r4, r0
 80127aa:	460d      	mov	r5, r1
 80127ac:	f000 f8de 	bl	801296c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80127b0:	6843      	ldr	r3, [r0, #4]
 80127b2:	4629      	mov	r1, r5
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	4620      	mov	r0, r4
 80127b8:	4798      	blx	r3
 80127ba:	68a6      	ldr	r6, [r4, #8]
 80127bc:	b156      	cbz	r6, 80127d4 <_Header__cdr_serialize+0x30>
 80127be:	4630      	mov	r0, r6
 80127c0:	f7ed fd30 	bl	8000224 <strlen>
 80127c4:	4631      	mov	r1, r6
 80127c6:	60e0      	str	r0, [r4, #12]
 80127c8:	1c42      	adds	r2, r0, #1
 80127ca:	4628      	mov	r0, r5
 80127cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127d0:	f000 bc24 	b.w	801301c <ucdr_serialize_sequence_char>
 80127d4:	4630      	mov	r0, r6
 80127d6:	60e0      	str	r0, [r4, #12]
 80127d8:	4632      	mov	r2, r6
 80127da:	4631      	mov	r1, r6
 80127dc:	4628      	mov	r0, r5
 80127de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127e2:	f000 bc1b 	b.w	801301c <ucdr_serialize_sequence_char>
 80127e6:	4770      	bx	lr

080127e8 <_Header__get_serialized_size>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4604      	mov	r4, r0
 80127ec:	b150      	cbz	r0, 8012804 <_Header__get_serialized_size+0x1c>
 80127ee:	2100      	movs	r1, #0
 80127f0:	f000 f858 	bl	80128a4 <get_serialized_size_builtin_interfaces__msg__Time>
 80127f4:	2104      	movs	r1, #4
 80127f6:	4605      	mov	r5, r0
 80127f8:	f7fb fdc4 	bl	800e384 <ucdr_alignment>
 80127fc:	68e2      	ldr	r2, [r4, #12]
 80127fe:	3205      	adds	r2, #5
 8012800:	1953      	adds	r3, r2, r5
 8012802:	4418      	add	r0, r3
 8012804:	bd38      	pop	{r3, r4, r5, pc}
 8012806:	bf00      	nop

08012808 <max_serialized_size_std_msgs__msg__Header>:
 8012808:	b510      	push	{r4, lr}
 801280a:	2301      	movs	r3, #1
 801280c:	4604      	mov	r4, r0
 801280e:	7003      	strb	r3, [r0, #0]
 8012810:	f000 f898 	bl	8012944 <max_serialized_size_builtin_interfaces__msg__Time>
 8012814:	2300      	movs	r3, #0
 8012816:	7023      	strb	r3, [r4, #0]
 8012818:	bd10      	pop	{r4, pc}
 801281a:	bf00      	nop

0801281c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801281c:	4800      	ldr	r0, [pc, #0]	@ (8012820 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 801281e:	4770      	bx	lr
 8012820:	200003f4 	.word	0x200003f4

08012824 <_Int32__max_serialized_size>:
 8012824:	b508      	push	{r3, lr}
 8012826:	2104      	movs	r1, #4
 8012828:	2000      	movs	r0, #0
 801282a:	f7fb fdab 	bl	800e384 <ucdr_alignment>
 801282e:	3004      	adds	r0, #4
 8012830:	bd08      	pop	{r3, pc}
 8012832:	bf00      	nop

08012834 <_Int32__cdr_deserialize>:
 8012834:	b109      	cbz	r1, 801283a <_Int32__cdr_deserialize+0x6>
 8012836:	f7fb b987 	b.w	800db48 <ucdr_deserialize_int32_t>
 801283a:	4608      	mov	r0, r1
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop

08012840 <get_serialized_size_std_msgs__msg__Int32>:
 8012840:	b138      	cbz	r0, 8012852 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8012842:	b508      	push	{r3, lr}
 8012844:	460b      	mov	r3, r1
 8012846:	4618      	mov	r0, r3
 8012848:	2104      	movs	r1, #4
 801284a:	f7fb fd9b 	bl	800e384 <ucdr_alignment>
 801284e:	3004      	adds	r0, #4
 8012850:	bd08      	pop	{r3, pc}
 8012852:	4770      	bx	lr

08012854 <_Int32__cdr_serialize>:
 8012854:	460a      	mov	r2, r1
 8012856:	b118      	cbz	r0, 8012860 <_Int32__cdr_serialize+0xc>
 8012858:	6801      	ldr	r1, [r0, #0]
 801285a:	4610      	mov	r0, r2
 801285c:	f7fb b8dc 	b.w	800da18 <ucdr_serialize_int32_t>
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop

08012864 <_Int32__get_serialized_size>:
 8012864:	b130      	cbz	r0, 8012874 <_Int32__get_serialized_size+0x10>
 8012866:	b508      	push	{r3, lr}
 8012868:	2104      	movs	r1, #4
 801286a:	2000      	movs	r0, #0
 801286c:	f7fb fd8a 	bl	800e384 <ucdr_alignment>
 8012870:	3004      	adds	r0, #4
 8012872:	bd08      	pop	{r3, pc}
 8012874:	4770      	bx	lr
 8012876:	bf00      	nop

08012878 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012878:	4800      	ldr	r0, [pc, #0]	@ (801287c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801287a:	4770      	bx	lr
 801287c:	2000041c 	.word	0x2000041c

08012880 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012880:	f007 bb92 	b.w	8019fa8 <builtin_interfaces__msg__Time__init>

08012884 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012884:	f007 bb94 	b.w	8019fb0 <builtin_interfaces__msg__Time__fini>

08012888 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012888:	4b04      	ldr	r3, [pc, #16]	@ (801289c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	b10a      	cbz	r2, 8012892 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801288e:	4803      	ldr	r0, [pc, #12]	@ (801289c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012890:	4770      	bx	lr
 8012892:	4a03      	ldr	r2, [pc, #12]	@ (80128a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012894:	4801      	ldr	r0, [pc, #4]	@ (801289c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012896:	6812      	ldr	r2, [r2, #0]
 8012898:	601a      	str	r2, [r3, #0]
 801289a:	4770      	bx	lr
 801289c:	200004bc 	.word	0x200004bc
 80128a0:	20000310 	.word	0x20000310

080128a4 <get_serialized_size_builtin_interfaces__msg__Time>:
 80128a4:	b180      	cbz	r0, 80128c8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 80128a6:	b538      	push	{r3, r4, r5, lr}
 80128a8:	460d      	mov	r5, r1
 80128aa:	4628      	mov	r0, r5
 80128ac:	2104      	movs	r1, #4
 80128ae:	f7fb fd69 	bl	800e384 <ucdr_alignment>
 80128b2:	1d2b      	adds	r3, r5, #4
 80128b4:	181c      	adds	r4, r3, r0
 80128b6:	2104      	movs	r1, #4
 80128b8:	4620      	mov	r0, r4
 80128ba:	f7fb fd63 	bl	800e384 <ucdr_alignment>
 80128be:	f1c5 0504 	rsb	r5, r5, #4
 80128c2:	4428      	add	r0, r5
 80128c4:	4420      	add	r0, r4
 80128c6:	bd38      	pop	{r3, r4, r5, pc}
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop

080128cc <_Time__cdr_deserialize>:
 80128cc:	b538      	push	{r3, r4, r5, lr}
 80128ce:	460c      	mov	r4, r1
 80128d0:	b141      	cbz	r1, 80128e4 <_Time__cdr_deserialize+0x18>
 80128d2:	4605      	mov	r5, r0
 80128d4:	f7fb f938 	bl	800db48 <ucdr_deserialize_int32_t>
 80128d8:	1d21      	adds	r1, r4, #4
 80128da:	4628      	mov	r0, r5
 80128dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128e0:	f7fa bdb0 	b.w	800d444 <ucdr_deserialize_uint32_t>
 80128e4:	4608      	mov	r0, r1
 80128e6:	bd38      	pop	{r3, r4, r5, pc}

080128e8 <_Time__cdr_serialize>:
 80128e8:	b160      	cbz	r0, 8012904 <_Time__cdr_serialize+0x1c>
 80128ea:	b538      	push	{r3, r4, r5, lr}
 80128ec:	460d      	mov	r5, r1
 80128ee:	4604      	mov	r4, r0
 80128f0:	6801      	ldr	r1, [r0, #0]
 80128f2:	4628      	mov	r0, r5
 80128f4:	f7fb f890 	bl	800da18 <ucdr_serialize_int32_t>
 80128f8:	6861      	ldr	r1, [r4, #4]
 80128fa:	4628      	mov	r0, r5
 80128fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012900:	f7fa bc70 	b.w	800d1e4 <ucdr_serialize_uint32_t>
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop

08012908 <_Time__get_serialized_size>:
 8012908:	b160      	cbz	r0, 8012924 <_Time__get_serialized_size+0x1c>
 801290a:	b510      	push	{r4, lr}
 801290c:	2104      	movs	r1, #4
 801290e:	2000      	movs	r0, #0
 8012910:	f7fb fd38 	bl	800e384 <ucdr_alignment>
 8012914:	1d04      	adds	r4, r0, #4
 8012916:	2104      	movs	r1, #4
 8012918:	4620      	mov	r0, r4
 801291a:	f7fb fd33 	bl	800e384 <ucdr_alignment>
 801291e:	3004      	adds	r0, #4
 8012920:	4420      	add	r0, r4
 8012922:	bd10      	pop	{r4, pc}
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop

08012928 <_Time__max_serialized_size>:
 8012928:	b510      	push	{r4, lr}
 801292a:	2104      	movs	r1, #4
 801292c:	2000      	movs	r0, #0
 801292e:	f7fb fd29 	bl	800e384 <ucdr_alignment>
 8012932:	1d04      	adds	r4, r0, #4
 8012934:	2104      	movs	r1, #4
 8012936:	4620      	mov	r0, r4
 8012938:	f7fb fd24 	bl	800e384 <ucdr_alignment>
 801293c:	3004      	adds	r0, #4
 801293e:	4420      	add	r0, r4
 8012940:	bd10      	pop	{r4, pc}
 8012942:	bf00      	nop

08012944 <max_serialized_size_builtin_interfaces__msg__Time>:
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	460c      	mov	r4, r1
 8012948:	2301      	movs	r3, #1
 801294a:	7003      	strb	r3, [r0, #0]
 801294c:	2104      	movs	r1, #4
 801294e:	4620      	mov	r0, r4
 8012950:	f7fb fd18 	bl	800e384 <ucdr_alignment>
 8012954:	1d25      	adds	r5, r4, #4
 8012956:	4405      	add	r5, r0
 8012958:	2104      	movs	r1, #4
 801295a:	4628      	mov	r0, r5
 801295c:	f7fb fd12 	bl	800e384 <ucdr_alignment>
 8012960:	f1c4 0404 	rsb	r4, r4, #4
 8012964:	4420      	add	r0, r4
 8012966:	4428      	add	r0, r5
 8012968:	bd38      	pop	{r3, r4, r5, pc}
 801296a:	bf00      	nop

0801296c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801296c:	4800      	ldr	r0, [pc, #0]	@ (8012970 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801296e:	4770      	bx	lr
 8012970:	200004c8 	.word	0x200004c8

08012974 <geometry_msgs__msg__Twist__init>:
 8012974:	b570      	push	{r4, r5, r6, lr}
 8012976:	4605      	mov	r5, r0
 8012978:	b1a8      	cbz	r0, 80129a6 <geometry_msgs__msg__Twist__init+0x32>
 801297a:	f000 f82b 	bl	80129d4 <geometry_msgs__msg__Vector3__init>
 801297e:	4604      	mov	r4, r0
 8012980:	b140      	cbz	r0, 8012994 <geometry_msgs__msg__Twist__init+0x20>
 8012982:	f105 0618 	add.w	r6, r5, #24
 8012986:	4630      	mov	r0, r6
 8012988:	f000 f824 	bl	80129d4 <geometry_msgs__msg__Vector3__init>
 801298c:	4604      	mov	r4, r0
 801298e:	b168      	cbz	r0, 80129ac <geometry_msgs__msg__Twist__init+0x38>
 8012990:	4620      	mov	r0, r4
 8012992:	bd70      	pop	{r4, r5, r6, pc}
 8012994:	4628      	mov	r0, r5
 8012996:	f000 f821 	bl	80129dc <geometry_msgs__msg__Vector3__fini>
 801299a:	f105 0018 	add.w	r0, r5, #24
 801299e:	f000 f81d 	bl	80129dc <geometry_msgs__msg__Vector3__fini>
 80129a2:	4620      	mov	r0, r4
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	4604      	mov	r4, r0
 80129a8:	4620      	mov	r0, r4
 80129aa:	bd70      	pop	{r4, r5, r6, pc}
 80129ac:	4628      	mov	r0, r5
 80129ae:	f000 f815 	bl	80129dc <geometry_msgs__msg__Vector3__fini>
 80129b2:	4630      	mov	r0, r6
 80129b4:	f000 f812 	bl	80129dc <geometry_msgs__msg__Vector3__fini>
 80129b8:	e7ea      	b.n	8012990 <geometry_msgs__msg__Twist__init+0x1c>
 80129ba:	bf00      	nop

080129bc <geometry_msgs__msg__Twist__fini>:
 80129bc:	b148      	cbz	r0, 80129d2 <geometry_msgs__msg__Twist__fini+0x16>
 80129be:	b510      	push	{r4, lr}
 80129c0:	4604      	mov	r4, r0
 80129c2:	f000 f80b 	bl	80129dc <geometry_msgs__msg__Vector3__fini>
 80129c6:	f104 0018 	add.w	r0, r4, #24
 80129ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ce:	f000 b805 	b.w	80129dc <geometry_msgs__msg__Vector3__fini>
 80129d2:	4770      	bx	lr

080129d4 <geometry_msgs__msg__Vector3__init>:
 80129d4:	3800      	subs	r0, #0
 80129d6:	bf18      	it	ne
 80129d8:	2001      	movne	r0, #1
 80129da:	4770      	bx	lr

080129dc <geometry_msgs__msg__Vector3__fini>:
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop

080129e0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 80129e0:	2024      	movs	r0, #36	@ 0x24
 80129e2:	4770      	bx	lr

080129e4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 80129e4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop

080129ec <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 80129ec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80129f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129f4:	e9c2 0100 	strd	r0, r1, [r2]
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop

080129fc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 80129fc:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012a00:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012a04:	e9c1 2300 	strd	r2, r3, [r1]
 8012a08:	4770      	bx	lr
 8012a0a:	bf00      	nop

08012a0c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 8012a0c:	f007 bad2 	b.w	8019fb4 <geometry_msgs__msg__PoseWithCovariance__init>

08012a10 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 8012a10:	f007 bae2 	b.w	8019fd8 <geometry_msgs__msg__PoseWithCovariance__fini>

08012a14 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 8012a14:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop

08012a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8012a1c:	b508      	push	{r3, lr}
 8012a1e:	f007 faf9 	bl	801a014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8012a22:	4b06      	ldr	r3, [pc, #24]	@ (8012a3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8012a24:	4906      	ldr	r1, [pc, #24]	@ (8012a40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	60c8      	str	r0, [r1, #12]
 8012a2a:	b10a      	cbz	r2, 8012a30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 8012a2c:	4803      	ldr	r0, [pc, #12]	@ (8012a3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8012a2e:	bd08      	pop	{r3, pc}
 8012a30:	4a04      	ldr	r2, [pc, #16]	@ (8012a44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 8012a32:	4802      	ldr	r0, [pc, #8]	@ (8012a3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8012a34:	6812      	ldr	r2, [r2, #0]
 8012a36:	601a      	str	r2, [r3, #0]
 8012a38:	bd08      	pop	{r3, pc}
 8012a3a:	bf00      	nop
 8012a3c:	20000568 	.word	0x20000568
 8012a40:	200004f0 	.word	0x200004f0
 8012a44:	20000310 	.word	0x20000310

08012a48 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 8012a48:	2024      	movs	r0, #36	@ 0x24
 8012a4a:	4770      	bx	lr

08012a4c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 8012a4c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop

08012a54 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 8012a54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a5c:	e9c2 0100 	strd	r0, r1, [r2]
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop

08012a64 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 8012a64:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012a68:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012a6c:	e9c1 2300 	strd	r2, r3, [r1]
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop

08012a74 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 8012a74:	f007 bab4 	b.w	8019fe0 <geometry_msgs__msg__TwistWithCovariance__init>

08012a78 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 8012a78:	f007 bac4 	b.w	801a004 <geometry_msgs__msg__TwistWithCovariance__fini>

08012a7c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 8012a7c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012a80:	4770      	bx	lr
 8012a82:	bf00      	nop

08012a84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8012a84:	b508      	push	{r3, lr}
 8012a86:	f7fa f83b 	bl	800cb00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012a8a:	4b06      	ldr	r3, [pc, #24]	@ (8012aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8012a8c:	4906      	ldr	r1, [pc, #24]	@ (8012aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	60c8      	str	r0, [r1, #12]
 8012a92:	b10a      	cbz	r2, 8012a98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 8012a94:	4803      	ldr	r0, [pc, #12]	@ (8012aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8012a96:	bd08      	pop	{r3, pc}
 8012a98:	4a04      	ldr	r2, [pc, #16]	@ (8012aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 8012a9a:	4802      	ldr	r0, [pc, #8]	@ (8012aa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8012a9c:	6812      	ldr	r2, [r2, #0]
 8012a9e:	601a      	str	r2, [r3, #0]
 8012aa0:	bd08      	pop	{r3, pc}
 8012aa2:	bf00      	nop
 8012aa4:	200005ec 	.word	0x200005ec
 8012aa8:	20000574 	.word	0x20000574
 8012aac:	20000310 	.word	0x20000310

08012ab0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012ab0:	b538      	push	{r3, r4, r5, lr}
 8012ab2:	b158      	cbz	r0, 8012acc <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 8012ab4:	460d      	mov	r5, r1
 8012ab6:	f007 fad7 	bl	801a068 <get_serialized_size_geometry_msgs__msg__Pose>
 8012aba:	182c      	adds	r4, r5, r0
 8012abc:	2108      	movs	r1, #8
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f7fb fc60 	bl	800e384 <ucdr_alignment>
 8012ac4:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8012ac8:	4428      	add	r0, r5
 8012aca:	4420      	add	r0, r4
 8012acc:	bd38      	pop	{r3, r4, r5, pc}
 8012ace:	bf00      	nop

08012ad0 <_PoseWithCovariance__cdr_deserialize>:
 8012ad0:	b538      	push	{r3, r4, r5, lr}
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	b179      	cbz	r1, 8012af6 <_PoseWithCovariance__cdr_deserialize+0x26>
 8012ad6:	4605      	mov	r5, r0
 8012ad8:	f007 fb36 	bl	801a148 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8012adc:	6843      	ldr	r3, [r0, #4]
 8012ade:	4621      	mov	r1, r4
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	4798      	blx	r3
 8012ae6:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012aea:	4628      	mov	r0, r5
 8012aec:	2224      	movs	r2, #36	@ 0x24
 8012aee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012af2:	f000 ba3d 	b.w	8012f70 <ucdr_deserialize_array_double>
 8012af6:	4608      	mov	r0, r1
 8012af8:	bd38      	pop	{r3, r4, r5, pc}
 8012afa:	bf00      	nop

08012afc <_PoseWithCovariance__cdr_serialize>:
 8012afc:	b188      	cbz	r0, 8012b22 <_PoseWithCovariance__cdr_serialize+0x26>
 8012afe:	b538      	push	{r3, r4, r5, lr}
 8012b00:	460d      	mov	r5, r1
 8012b02:	4604      	mov	r4, r0
 8012b04:	f007 fb20 	bl	801a148 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 8012b08:	6843      	ldr	r3, [r0, #4]
 8012b0a:	4629      	mov	r1, r5
 8012b0c:	689b      	ldr	r3, [r3, #8]
 8012b0e:	4620      	mov	r0, r4
 8012b10:	4798      	blx	r3
 8012b12:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 8012b16:	4628      	mov	r0, r5
 8012b18:	2224      	movs	r2, #36	@ 0x24
 8012b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b1e:	f000 b9d3 	b.w	8012ec8 <ucdr_serialize_array_double>
 8012b22:	4770      	bx	lr

08012b24 <_PoseWithCovariance__get_serialized_size>:
 8012b24:	b158      	cbz	r0, 8012b3e <_PoseWithCovariance__get_serialized_size+0x1a>
 8012b26:	b510      	push	{r4, lr}
 8012b28:	2100      	movs	r1, #0
 8012b2a:	f007 fa9d 	bl	801a068 <get_serialized_size_geometry_msgs__msg__Pose>
 8012b2e:	2108      	movs	r1, #8
 8012b30:	4604      	mov	r4, r0
 8012b32:	f7fb fc27 	bl	800e384 <ucdr_alignment>
 8012b36:	4420      	add	r0, r4
 8012b38:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012b3c:	bd10      	pop	{r4, pc}
 8012b3e:	4770      	bx	lr

08012b40 <_PoseWithCovariance__max_serialized_size>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	2301      	movs	r3, #1
 8012b46:	2100      	movs	r1, #0
 8012b48:	f10d 0007 	add.w	r0, sp, #7
 8012b4c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012b50:	f007 faec 	bl	801a12c <max_serialized_size_geometry_msgs__msg__Pose>
 8012b54:	2108      	movs	r1, #8
 8012b56:	4604      	mov	r4, r0
 8012b58:	f7fb fc14 	bl	800e384 <ucdr_alignment>
 8012b5c:	4420      	add	r0, r4
 8012b5e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012b62:	b002      	add	sp, #8
 8012b64:	bd10      	pop	{r4, pc}
 8012b66:	bf00      	nop

08012b68 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012b68:	b538      	push	{r3, r4, r5, lr}
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	7003      	strb	r3, [r0, #0]
 8012b6e:	460c      	mov	r4, r1
 8012b70:	f007 fadc 	bl	801a12c <max_serialized_size_geometry_msgs__msg__Pose>
 8012b74:	1825      	adds	r5, r4, r0
 8012b76:	2108      	movs	r1, #8
 8012b78:	4628      	mov	r0, r5
 8012b7a:	f7fb fc03 	bl	800e384 <ucdr_alignment>
 8012b7e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8012b82:	4420      	add	r0, r4
 8012b84:	4428      	add	r0, r5
 8012b86:	bd38      	pop	{r3, r4, r5, pc}

08012b88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8012b88:	4800      	ldr	r0, [pc, #0]	@ (8012b8c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 8012b8a:	4770      	bx	lr
 8012b8c:	200005f8 	.word	0x200005f8

08012b90 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	b158      	cbz	r0, 8012bac <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 8012b94:	460d      	mov	r5, r1
 8012b96:	f7f9 ffdd 	bl	800cb54 <get_serialized_size_geometry_msgs__msg__Twist>
 8012b9a:	182c      	adds	r4, r5, r0
 8012b9c:	2108      	movs	r1, #8
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f7fb fbf0 	bl	800e384 <ucdr_alignment>
 8012ba4:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8012ba8:	4428      	add	r0, r5
 8012baa:	4420      	add	r0, r4
 8012bac:	bd38      	pop	{r3, r4, r5, pc}
 8012bae:	bf00      	nop

08012bb0 <_TwistWithCovariance__cdr_deserialize>:
 8012bb0:	b538      	push	{r3, r4, r5, lr}
 8012bb2:	460c      	mov	r4, r1
 8012bb4:	b179      	cbz	r1, 8012bd6 <_TwistWithCovariance__cdr_deserialize+0x26>
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	f7fa f83c 	bl	800cc34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012bbc:	6843      	ldr	r3, [r0, #4]
 8012bbe:	4621      	mov	r1, r4
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	4628      	mov	r0, r5
 8012bc4:	4798      	blx	r3
 8012bc6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012bca:	4628      	mov	r0, r5
 8012bcc:	2224      	movs	r2, #36	@ 0x24
 8012bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bd2:	f000 b9cd 	b.w	8012f70 <ucdr_deserialize_array_double>
 8012bd6:	4608      	mov	r0, r1
 8012bd8:	bd38      	pop	{r3, r4, r5, pc}
 8012bda:	bf00      	nop

08012bdc <_TwistWithCovariance__cdr_serialize>:
 8012bdc:	b188      	cbz	r0, 8012c02 <_TwistWithCovariance__cdr_serialize+0x26>
 8012bde:	b538      	push	{r3, r4, r5, lr}
 8012be0:	460d      	mov	r5, r1
 8012be2:	4604      	mov	r4, r0
 8012be4:	f7fa f826 	bl	800cc34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012be8:	6843      	ldr	r3, [r0, #4]
 8012bea:	4629      	mov	r1, r5
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	4620      	mov	r0, r4
 8012bf0:	4798      	blx	r3
 8012bf2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012bf6:	4628      	mov	r0, r5
 8012bf8:	2224      	movs	r2, #36	@ 0x24
 8012bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012bfe:	f000 b963 	b.w	8012ec8 <ucdr_serialize_array_double>
 8012c02:	4770      	bx	lr

08012c04 <_TwistWithCovariance__get_serialized_size>:
 8012c04:	b158      	cbz	r0, 8012c1e <_TwistWithCovariance__get_serialized_size+0x1a>
 8012c06:	b510      	push	{r4, lr}
 8012c08:	2100      	movs	r1, #0
 8012c0a:	f7f9 ffa3 	bl	800cb54 <get_serialized_size_geometry_msgs__msg__Twist>
 8012c0e:	2108      	movs	r1, #8
 8012c10:	4604      	mov	r4, r0
 8012c12:	f7fb fbb7 	bl	800e384 <ucdr_alignment>
 8012c16:	4420      	add	r0, r4
 8012c18:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012c1c:	bd10      	pop	{r4, pc}
 8012c1e:	4770      	bx	lr

08012c20 <_TwistWithCovariance__max_serialized_size>:
 8012c20:	b510      	push	{r4, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	2301      	movs	r3, #1
 8012c26:	2100      	movs	r1, #0
 8012c28:	f10d 0007 	add.w	r0, sp, #7
 8012c2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012c30:	f7f9 fff2 	bl	800cc18 <max_serialized_size_geometry_msgs__msg__Twist>
 8012c34:	2108      	movs	r1, #8
 8012c36:	4604      	mov	r4, r0
 8012c38:	f7fb fba4 	bl	800e384 <ucdr_alignment>
 8012c3c:	4420      	add	r0, r4
 8012c3e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012c42:	b002      	add	sp, #8
 8012c44:	bd10      	pop	{r4, pc}
 8012c46:	bf00      	nop

08012c48 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8012c48:	b538      	push	{r3, r4, r5, lr}
 8012c4a:	2301      	movs	r3, #1
 8012c4c:	7003      	strb	r3, [r0, #0]
 8012c4e:	460c      	mov	r4, r1
 8012c50:	f7f9 ffe2 	bl	800cc18 <max_serialized_size_geometry_msgs__msg__Twist>
 8012c54:	1825      	adds	r5, r4, r0
 8012c56:	2108      	movs	r1, #8
 8012c58:	4628      	mov	r0, r5
 8012c5a:	f7fb fb93 	bl	800e384 <ucdr_alignment>
 8012c5e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8012c62:	4420      	add	r0, r4
 8012c64:	4428      	add	r0, r5
 8012c66:	bd38      	pop	{r3, r4, r5, pc}

08012c68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8012c68:	4800      	ldr	r0, [pc, #0]	@ (8012c6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 8012c6a:	4770      	bx	lr
 8012c6c:	20000620 	.word	0x20000620

08012c70 <ucdr_serialize_endian_array_char>:
 8012c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c74:	4619      	mov	r1, r3
 8012c76:	461f      	mov	r7, r3
 8012c78:	4605      	mov	r5, r0
 8012c7a:	4690      	mov	r8, r2
 8012c7c:	f7fb fb2a 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012c80:	b9e0      	cbnz	r0, 8012cbc <ucdr_serialize_endian_array_char+0x4c>
 8012c82:	463e      	mov	r6, r7
 8012c84:	e009      	b.n	8012c9a <ucdr_serialize_endian_array_char+0x2a>
 8012c86:	68a8      	ldr	r0, [r5, #8]
 8012c88:	f009 ff21 	bl	801cace <memcpy>
 8012c8c:	68ab      	ldr	r3, [r5, #8]
 8012c8e:	6928      	ldr	r0, [r5, #16]
 8012c90:	4423      	add	r3, r4
 8012c92:	4420      	add	r0, r4
 8012c94:	1b36      	subs	r6, r6, r4
 8012c96:	60ab      	str	r3, [r5, #8]
 8012c98:	6128      	str	r0, [r5, #16]
 8012c9a:	4631      	mov	r1, r6
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	f7fb fba0 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012ca4:	1bb9      	subs	r1, r7, r6
 8012ca6:	4441      	add	r1, r8
 8012ca8:	4604      	mov	r4, r0
 8012caa:	4602      	mov	r2, r0
 8012cac:	2800      	cmp	r0, #0
 8012cae:	d1ea      	bne.n	8012c86 <ucdr_serialize_endian_array_char+0x16>
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	7da8      	ldrb	r0, [r5, #22]
 8012cb4:	756b      	strb	r3, [r5, #21]
 8012cb6:	4058      	eors	r0, r3
 8012cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cbc:	463a      	mov	r2, r7
 8012cbe:	68a8      	ldr	r0, [r5, #8]
 8012cc0:	4641      	mov	r1, r8
 8012cc2:	f009 ff04 	bl	801cace <memcpy>
 8012cc6:	68aa      	ldr	r2, [r5, #8]
 8012cc8:	692b      	ldr	r3, [r5, #16]
 8012cca:	443a      	add	r2, r7
 8012ccc:	443b      	add	r3, r7
 8012cce:	60aa      	str	r2, [r5, #8]
 8012cd0:	612b      	str	r3, [r5, #16]
 8012cd2:	e7ed      	b.n	8012cb0 <ucdr_serialize_endian_array_char+0x40>

08012cd4 <ucdr_deserialize_endian_array_char>:
 8012cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd8:	4619      	mov	r1, r3
 8012cda:	461f      	mov	r7, r3
 8012cdc:	4605      	mov	r5, r0
 8012cde:	4690      	mov	r8, r2
 8012ce0:	f7fb faf8 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012ce4:	b9e0      	cbnz	r0, 8012d20 <ucdr_deserialize_endian_array_char+0x4c>
 8012ce6:	463e      	mov	r6, r7
 8012ce8:	e009      	b.n	8012cfe <ucdr_deserialize_endian_array_char+0x2a>
 8012cea:	68a9      	ldr	r1, [r5, #8]
 8012cec:	f009 feef 	bl	801cace <memcpy>
 8012cf0:	68ab      	ldr	r3, [r5, #8]
 8012cf2:	6928      	ldr	r0, [r5, #16]
 8012cf4:	4423      	add	r3, r4
 8012cf6:	4420      	add	r0, r4
 8012cf8:	1b36      	subs	r6, r6, r4
 8012cfa:	60ab      	str	r3, [r5, #8]
 8012cfc:	6128      	str	r0, [r5, #16]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	4631      	mov	r1, r6
 8012d02:	4628      	mov	r0, r5
 8012d04:	f7fb fb6e 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012d08:	4604      	mov	r4, r0
 8012d0a:	1bb8      	subs	r0, r7, r6
 8012d0c:	4440      	add	r0, r8
 8012d0e:	4622      	mov	r2, r4
 8012d10:	2c00      	cmp	r4, #0
 8012d12:	d1ea      	bne.n	8012cea <ucdr_deserialize_endian_array_char+0x16>
 8012d14:	2301      	movs	r3, #1
 8012d16:	7da8      	ldrb	r0, [r5, #22]
 8012d18:	756b      	strb	r3, [r5, #21]
 8012d1a:	4058      	eors	r0, r3
 8012d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d20:	463a      	mov	r2, r7
 8012d22:	68a9      	ldr	r1, [r5, #8]
 8012d24:	4640      	mov	r0, r8
 8012d26:	f009 fed2 	bl	801cace <memcpy>
 8012d2a:	68aa      	ldr	r2, [r5, #8]
 8012d2c:	692b      	ldr	r3, [r5, #16]
 8012d2e:	443a      	add	r2, r7
 8012d30:	443b      	add	r3, r7
 8012d32:	60aa      	str	r2, [r5, #8]
 8012d34:	612b      	str	r3, [r5, #16]
 8012d36:	e7ed      	b.n	8012d14 <ucdr_deserialize_endian_array_char+0x40>

08012d38 <ucdr_serialize_array_uint8_t>:
 8012d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d3c:	4688      	mov	r8, r1
 8012d3e:	4611      	mov	r1, r2
 8012d40:	4617      	mov	r7, r2
 8012d42:	4605      	mov	r5, r0
 8012d44:	f7fb fac6 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012d48:	b9e0      	cbnz	r0, 8012d84 <ucdr_serialize_array_uint8_t+0x4c>
 8012d4a:	463e      	mov	r6, r7
 8012d4c:	e009      	b.n	8012d62 <ucdr_serialize_array_uint8_t+0x2a>
 8012d4e:	68a8      	ldr	r0, [r5, #8]
 8012d50:	f009 febd 	bl	801cace <memcpy>
 8012d54:	68aa      	ldr	r2, [r5, #8]
 8012d56:	692b      	ldr	r3, [r5, #16]
 8012d58:	4422      	add	r2, r4
 8012d5a:	4423      	add	r3, r4
 8012d5c:	1b36      	subs	r6, r6, r4
 8012d5e:	60aa      	str	r2, [r5, #8]
 8012d60:	612b      	str	r3, [r5, #16]
 8012d62:	4631      	mov	r1, r6
 8012d64:	2201      	movs	r2, #1
 8012d66:	4628      	mov	r0, r5
 8012d68:	f7fb fb3c 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012d6c:	1bb9      	subs	r1, r7, r6
 8012d6e:	4441      	add	r1, r8
 8012d70:	4604      	mov	r4, r0
 8012d72:	4602      	mov	r2, r0
 8012d74:	2800      	cmp	r0, #0
 8012d76:	d1ea      	bne.n	8012d4e <ucdr_serialize_array_uint8_t+0x16>
 8012d78:	2301      	movs	r3, #1
 8012d7a:	7da8      	ldrb	r0, [r5, #22]
 8012d7c:	756b      	strb	r3, [r5, #21]
 8012d7e:	4058      	eors	r0, r3
 8012d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d84:	463a      	mov	r2, r7
 8012d86:	68a8      	ldr	r0, [r5, #8]
 8012d88:	4641      	mov	r1, r8
 8012d8a:	f009 fea0 	bl	801cace <memcpy>
 8012d8e:	68aa      	ldr	r2, [r5, #8]
 8012d90:	692b      	ldr	r3, [r5, #16]
 8012d92:	443a      	add	r2, r7
 8012d94:	443b      	add	r3, r7
 8012d96:	60aa      	str	r2, [r5, #8]
 8012d98:	612b      	str	r3, [r5, #16]
 8012d9a:	e7ed      	b.n	8012d78 <ucdr_serialize_array_uint8_t+0x40>

08012d9c <ucdr_serialize_endian_array_uint8_t>:
 8012d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012da0:	4619      	mov	r1, r3
 8012da2:	461f      	mov	r7, r3
 8012da4:	4605      	mov	r5, r0
 8012da6:	4690      	mov	r8, r2
 8012da8:	f7fb fa94 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012dac:	b9e0      	cbnz	r0, 8012de8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012dae:	463e      	mov	r6, r7
 8012db0:	e009      	b.n	8012dc6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012db2:	68a8      	ldr	r0, [r5, #8]
 8012db4:	f009 fe8b 	bl	801cace <memcpy>
 8012db8:	68ab      	ldr	r3, [r5, #8]
 8012dba:	6928      	ldr	r0, [r5, #16]
 8012dbc:	4423      	add	r3, r4
 8012dbe:	4420      	add	r0, r4
 8012dc0:	1b36      	subs	r6, r6, r4
 8012dc2:	60ab      	str	r3, [r5, #8]
 8012dc4:	6128      	str	r0, [r5, #16]
 8012dc6:	4631      	mov	r1, r6
 8012dc8:	2201      	movs	r2, #1
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f7fb fb0a 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012dd0:	1bb9      	subs	r1, r7, r6
 8012dd2:	4441      	add	r1, r8
 8012dd4:	4604      	mov	r4, r0
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	2800      	cmp	r0, #0
 8012dda:	d1ea      	bne.n	8012db2 <ucdr_serialize_endian_array_uint8_t+0x16>
 8012ddc:	2301      	movs	r3, #1
 8012dde:	7da8      	ldrb	r0, [r5, #22]
 8012de0:	756b      	strb	r3, [r5, #21]
 8012de2:	4058      	eors	r0, r3
 8012de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de8:	463a      	mov	r2, r7
 8012dea:	68a8      	ldr	r0, [r5, #8]
 8012dec:	4641      	mov	r1, r8
 8012dee:	f009 fe6e 	bl	801cace <memcpy>
 8012df2:	68aa      	ldr	r2, [r5, #8]
 8012df4:	692b      	ldr	r3, [r5, #16]
 8012df6:	443a      	add	r2, r7
 8012df8:	443b      	add	r3, r7
 8012dfa:	60aa      	str	r2, [r5, #8]
 8012dfc:	612b      	str	r3, [r5, #16]
 8012dfe:	e7ed      	b.n	8012ddc <ucdr_serialize_endian_array_uint8_t+0x40>

08012e00 <ucdr_deserialize_array_uint8_t>:
 8012e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e04:	4688      	mov	r8, r1
 8012e06:	4611      	mov	r1, r2
 8012e08:	4617      	mov	r7, r2
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	f7fb fa62 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012e10:	b9e0      	cbnz	r0, 8012e4c <ucdr_deserialize_array_uint8_t+0x4c>
 8012e12:	463e      	mov	r6, r7
 8012e14:	e009      	b.n	8012e2a <ucdr_deserialize_array_uint8_t+0x2a>
 8012e16:	68a9      	ldr	r1, [r5, #8]
 8012e18:	f009 fe59 	bl	801cace <memcpy>
 8012e1c:	68aa      	ldr	r2, [r5, #8]
 8012e1e:	692b      	ldr	r3, [r5, #16]
 8012e20:	4422      	add	r2, r4
 8012e22:	4423      	add	r3, r4
 8012e24:	1b36      	subs	r6, r6, r4
 8012e26:	60aa      	str	r2, [r5, #8]
 8012e28:	612b      	str	r3, [r5, #16]
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	4631      	mov	r1, r6
 8012e2e:	4628      	mov	r0, r5
 8012e30:	f7fb fad8 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012e34:	4604      	mov	r4, r0
 8012e36:	1bb8      	subs	r0, r7, r6
 8012e38:	4440      	add	r0, r8
 8012e3a:	4622      	mov	r2, r4
 8012e3c:	2c00      	cmp	r4, #0
 8012e3e:	d1ea      	bne.n	8012e16 <ucdr_deserialize_array_uint8_t+0x16>
 8012e40:	2301      	movs	r3, #1
 8012e42:	7da8      	ldrb	r0, [r5, #22]
 8012e44:	756b      	strb	r3, [r5, #21]
 8012e46:	4058      	eors	r0, r3
 8012e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e4c:	463a      	mov	r2, r7
 8012e4e:	68a9      	ldr	r1, [r5, #8]
 8012e50:	4640      	mov	r0, r8
 8012e52:	f009 fe3c 	bl	801cace <memcpy>
 8012e56:	68aa      	ldr	r2, [r5, #8]
 8012e58:	692b      	ldr	r3, [r5, #16]
 8012e5a:	443a      	add	r2, r7
 8012e5c:	443b      	add	r3, r7
 8012e5e:	60aa      	str	r2, [r5, #8]
 8012e60:	612b      	str	r3, [r5, #16]
 8012e62:	e7ed      	b.n	8012e40 <ucdr_deserialize_array_uint8_t+0x40>

08012e64 <ucdr_deserialize_endian_array_uint8_t>:
 8012e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e68:	4619      	mov	r1, r3
 8012e6a:	461f      	mov	r7, r3
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	4690      	mov	r8, r2
 8012e70:	f7fb fa30 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012e74:	b9e0      	cbnz	r0, 8012eb0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012e76:	463e      	mov	r6, r7
 8012e78:	e009      	b.n	8012e8e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012e7a:	68a9      	ldr	r1, [r5, #8]
 8012e7c:	f009 fe27 	bl	801cace <memcpy>
 8012e80:	68ab      	ldr	r3, [r5, #8]
 8012e82:	6928      	ldr	r0, [r5, #16]
 8012e84:	4423      	add	r3, r4
 8012e86:	4420      	add	r0, r4
 8012e88:	1b36      	subs	r6, r6, r4
 8012e8a:	60ab      	str	r3, [r5, #8]
 8012e8c:	6128      	str	r0, [r5, #16]
 8012e8e:	2201      	movs	r2, #1
 8012e90:	4631      	mov	r1, r6
 8012e92:	4628      	mov	r0, r5
 8012e94:	f7fb faa6 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012e98:	4604      	mov	r4, r0
 8012e9a:	1bb8      	subs	r0, r7, r6
 8012e9c:	4440      	add	r0, r8
 8012e9e:	4622      	mov	r2, r4
 8012ea0:	2c00      	cmp	r4, #0
 8012ea2:	d1ea      	bne.n	8012e7a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	7da8      	ldrb	r0, [r5, #22]
 8012ea8:	756b      	strb	r3, [r5, #21]
 8012eaa:	4058      	eors	r0, r3
 8012eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eb0:	463a      	mov	r2, r7
 8012eb2:	68a9      	ldr	r1, [r5, #8]
 8012eb4:	4640      	mov	r0, r8
 8012eb6:	f009 fe0a 	bl	801cace <memcpy>
 8012eba:	68aa      	ldr	r2, [r5, #8]
 8012ebc:	692b      	ldr	r3, [r5, #16]
 8012ebe:	443a      	add	r2, r7
 8012ec0:	443b      	add	r3, r7
 8012ec2:	60aa      	str	r2, [r5, #8]
 8012ec4:	612b      	str	r3, [r5, #16]
 8012ec6:	e7ed      	b.n	8012ea4 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012ec8 <ucdr_serialize_array_double>:
 8012ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ecc:	460e      	mov	r6, r1
 8012ece:	2108      	movs	r1, #8
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	4617      	mov	r7, r2
 8012ed4:	f7fb fa5e 	bl	800e394 <ucdr_buffer_alignment>
 8012ed8:	4601      	mov	r1, r0
 8012eda:	4620      	mov	r0, r4
 8012edc:	7d65      	ldrb	r5, [r4, #21]
 8012ede:	f7fb fa9d 	bl	800e41c <ucdr_advance_buffer>
 8012ee2:	7d21      	ldrb	r1, [r4, #20]
 8012ee4:	7565      	strb	r5, [r4, #21]
 8012ee6:	2901      	cmp	r1, #1
 8012ee8:	d010      	beq.n	8012f0c <ucdr_serialize_array_double+0x44>
 8012eea:	b157      	cbz	r7, 8012f02 <ucdr_serialize_array_double+0x3a>
 8012eec:	2500      	movs	r5, #0
 8012eee:	e000      	b.n	8012ef2 <ucdr_serialize_array_double+0x2a>
 8012ef0:	7d21      	ldrb	r1, [r4, #20]
 8012ef2:	ecb6 0b02 	vldmia	r6!, {d0}
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	3501      	adds	r5, #1
 8012efa:	f7fa ff85 	bl	800de08 <ucdr_serialize_endian_double>
 8012efe:	42af      	cmp	r7, r5
 8012f00:	d1f6      	bne.n	8012ef0 <ucdr_serialize_array_double+0x28>
 8012f02:	7da0      	ldrb	r0, [r4, #22]
 8012f04:	f080 0001 	eor.w	r0, r0, #1
 8012f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f0c:	00ff      	lsls	r7, r7, #3
 8012f0e:	4639      	mov	r1, r7
 8012f10:	4620      	mov	r0, r4
 8012f12:	f7fb f9df 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012f16:	b9f8      	cbnz	r0, 8012f58 <ucdr_serialize_array_double+0x90>
 8012f18:	46b8      	mov	r8, r7
 8012f1a:	e00a      	b.n	8012f32 <ucdr_serialize_array_double+0x6a>
 8012f1c:	68a0      	ldr	r0, [r4, #8]
 8012f1e:	f009 fdd6 	bl	801cace <memcpy>
 8012f22:	68a2      	ldr	r2, [r4, #8]
 8012f24:	6923      	ldr	r3, [r4, #16]
 8012f26:	442a      	add	r2, r5
 8012f28:	442b      	add	r3, r5
 8012f2a:	eba8 0805 	sub.w	r8, r8, r5
 8012f2e:	60a2      	str	r2, [r4, #8]
 8012f30:	6123      	str	r3, [r4, #16]
 8012f32:	4641      	mov	r1, r8
 8012f34:	2208      	movs	r2, #8
 8012f36:	4620      	mov	r0, r4
 8012f38:	f7fb fa54 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012f3c:	eba7 0108 	sub.w	r1, r7, r8
 8012f40:	4431      	add	r1, r6
 8012f42:	4605      	mov	r5, r0
 8012f44:	4602      	mov	r2, r0
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d1e8      	bne.n	8012f1c <ucdr_serialize_array_double+0x54>
 8012f4a:	7da0      	ldrb	r0, [r4, #22]
 8012f4c:	2308      	movs	r3, #8
 8012f4e:	7563      	strb	r3, [r4, #21]
 8012f50:	f080 0001 	eor.w	r0, r0, #1
 8012f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f58:	463a      	mov	r2, r7
 8012f5a:	68a0      	ldr	r0, [r4, #8]
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	f009 fdb6 	bl	801cace <memcpy>
 8012f62:	68a2      	ldr	r2, [r4, #8]
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	443a      	add	r2, r7
 8012f68:	441f      	add	r7, r3
 8012f6a:	60a2      	str	r2, [r4, #8]
 8012f6c:	6127      	str	r7, [r4, #16]
 8012f6e:	e7ec      	b.n	8012f4a <ucdr_serialize_array_double+0x82>

08012f70 <ucdr_deserialize_array_double>:
 8012f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f74:	460e      	mov	r6, r1
 8012f76:	2108      	movs	r1, #8
 8012f78:	4604      	mov	r4, r0
 8012f7a:	4617      	mov	r7, r2
 8012f7c:	f7fb fa0a 	bl	800e394 <ucdr_buffer_alignment>
 8012f80:	4601      	mov	r1, r0
 8012f82:	4620      	mov	r0, r4
 8012f84:	7d65      	ldrb	r5, [r4, #21]
 8012f86:	f7fb fa49 	bl	800e41c <ucdr_advance_buffer>
 8012f8a:	7d21      	ldrb	r1, [r4, #20]
 8012f8c:	7565      	strb	r5, [r4, #21]
 8012f8e:	2901      	cmp	r1, #1
 8012f90:	d011      	beq.n	8012fb6 <ucdr_deserialize_array_double+0x46>
 8012f92:	b15f      	cbz	r7, 8012fac <ucdr_deserialize_array_double+0x3c>
 8012f94:	2500      	movs	r5, #0
 8012f96:	e000      	b.n	8012f9a <ucdr_deserialize_array_double+0x2a>
 8012f98:	7d21      	ldrb	r1, [r4, #20]
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	4620      	mov	r0, r4
 8012f9e:	3501      	adds	r5, #1
 8012fa0:	f7fb f8ca 	bl	800e138 <ucdr_deserialize_endian_double>
 8012fa4:	42af      	cmp	r7, r5
 8012fa6:	f106 0608 	add.w	r6, r6, #8
 8012faa:	d1f5      	bne.n	8012f98 <ucdr_deserialize_array_double+0x28>
 8012fac:	7da0      	ldrb	r0, [r4, #22]
 8012fae:	f080 0001 	eor.w	r0, r0, #1
 8012fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb6:	00ff      	lsls	r7, r7, #3
 8012fb8:	4639      	mov	r1, r7
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f7fb f98a 	bl	800e2d4 <ucdr_check_buffer_available_for>
 8012fc0:	b9f8      	cbnz	r0, 8013002 <ucdr_deserialize_array_double+0x92>
 8012fc2:	46b8      	mov	r8, r7
 8012fc4:	e00a      	b.n	8012fdc <ucdr_deserialize_array_double+0x6c>
 8012fc6:	68a1      	ldr	r1, [r4, #8]
 8012fc8:	f009 fd81 	bl	801cace <memcpy>
 8012fcc:	68a2      	ldr	r2, [r4, #8]
 8012fce:	6923      	ldr	r3, [r4, #16]
 8012fd0:	442a      	add	r2, r5
 8012fd2:	442b      	add	r3, r5
 8012fd4:	eba8 0805 	sub.w	r8, r8, r5
 8012fd8:	60a2      	str	r2, [r4, #8]
 8012fda:	6123      	str	r3, [r4, #16]
 8012fdc:	2208      	movs	r2, #8
 8012fde:	4641      	mov	r1, r8
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7fb f9ff 	bl	800e3e4 <ucdr_check_final_buffer_behavior_array>
 8012fe6:	4605      	mov	r5, r0
 8012fe8:	eba7 0008 	sub.w	r0, r7, r8
 8012fec:	4430      	add	r0, r6
 8012fee:	462a      	mov	r2, r5
 8012ff0:	2d00      	cmp	r5, #0
 8012ff2:	d1e8      	bne.n	8012fc6 <ucdr_deserialize_array_double+0x56>
 8012ff4:	7da0      	ldrb	r0, [r4, #22]
 8012ff6:	2308      	movs	r3, #8
 8012ff8:	7563      	strb	r3, [r4, #21]
 8012ffa:	f080 0001 	eor.w	r0, r0, #1
 8012ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013002:	463a      	mov	r2, r7
 8013004:	68a1      	ldr	r1, [r4, #8]
 8013006:	4630      	mov	r0, r6
 8013008:	f009 fd61 	bl	801cace <memcpy>
 801300c:	68a2      	ldr	r2, [r4, #8]
 801300e:	6923      	ldr	r3, [r4, #16]
 8013010:	443a      	add	r2, r7
 8013012:	441f      	add	r7, r3
 8013014:	60a2      	str	r2, [r4, #8]
 8013016:	6127      	str	r7, [r4, #16]
 8013018:	e7ec      	b.n	8012ff4 <ucdr_deserialize_array_double+0x84>
 801301a:	bf00      	nop

0801301c <ucdr_serialize_sequence_char>:
 801301c:	b570      	push	{r4, r5, r6, lr}
 801301e:	4615      	mov	r5, r2
 8013020:	460e      	mov	r6, r1
 8013022:	7d01      	ldrb	r1, [r0, #20]
 8013024:	4604      	mov	r4, r0
 8013026:	f7fa f975 	bl	800d314 <ucdr_serialize_endian_uint32_t>
 801302a:	b90d      	cbnz	r5, 8013030 <ucdr_serialize_sequence_char+0x14>
 801302c:	2001      	movs	r0, #1
 801302e:	bd70      	pop	{r4, r5, r6, pc}
 8013030:	7d21      	ldrb	r1, [r4, #20]
 8013032:	462b      	mov	r3, r5
 8013034:	4632      	mov	r2, r6
 8013036:	4620      	mov	r0, r4
 8013038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801303c:	f7ff be18 	b.w	8012c70 <ucdr_serialize_endian_array_char>

08013040 <ucdr_deserialize_sequence_char>:
 8013040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013044:	461d      	mov	r5, r3
 8013046:	4616      	mov	r6, r2
 8013048:	460f      	mov	r7, r1
 801304a:	461a      	mov	r2, r3
 801304c:	7d01      	ldrb	r1, [r0, #20]
 801304e:	4604      	mov	r4, r0
 8013050:	f7fa fa88 	bl	800d564 <ucdr_deserialize_endian_uint32_t>
 8013054:	682b      	ldr	r3, [r5, #0]
 8013056:	429e      	cmp	r6, r3
 8013058:	bf3c      	itt	cc
 801305a:	2201      	movcc	r2, #1
 801305c:	75a2      	strbcc	r2, [r4, #22]
 801305e:	b913      	cbnz	r3, 8013066 <ucdr_deserialize_sequence_char+0x26>
 8013060:	2001      	movs	r0, #1
 8013062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013066:	7d21      	ldrb	r1, [r4, #20]
 8013068:	463a      	mov	r2, r7
 801306a:	4620      	mov	r0, r4
 801306c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013070:	f7ff be30 	b.w	8012cd4 <ucdr_deserialize_endian_array_char>

08013074 <ucdr_serialize_sequence_uint8_t>:
 8013074:	b570      	push	{r4, r5, r6, lr}
 8013076:	4615      	mov	r5, r2
 8013078:	460e      	mov	r6, r1
 801307a:	7d01      	ldrb	r1, [r0, #20]
 801307c:	4604      	mov	r4, r0
 801307e:	f7fa f949 	bl	800d314 <ucdr_serialize_endian_uint32_t>
 8013082:	b90d      	cbnz	r5, 8013088 <ucdr_serialize_sequence_uint8_t+0x14>
 8013084:	2001      	movs	r0, #1
 8013086:	bd70      	pop	{r4, r5, r6, pc}
 8013088:	7d21      	ldrb	r1, [r4, #20]
 801308a:	462b      	mov	r3, r5
 801308c:	4632      	mov	r2, r6
 801308e:	4620      	mov	r0, r4
 8013090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013094:	f7ff be82 	b.w	8012d9c <ucdr_serialize_endian_array_uint8_t>

08013098 <ucdr_deserialize_sequence_uint8_t>:
 8013098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801309c:	461d      	mov	r5, r3
 801309e:	4616      	mov	r6, r2
 80130a0:	460f      	mov	r7, r1
 80130a2:	461a      	mov	r2, r3
 80130a4:	7d01      	ldrb	r1, [r0, #20]
 80130a6:	4604      	mov	r4, r0
 80130a8:	f7fa fa5c 	bl	800d564 <ucdr_deserialize_endian_uint32_t>
 80130ac:	682b      	ldr	r3, [r5, #0]
 80130ae:	429e      	cmp	r6, r3
 80130b0:	bf3c      	itt	cc
 80130b2:	2201      	movcc	r2, #1
 80130b4:	75a2      	strbcc	r2, [r4, #22]
 80130b6:	b913      	cbnz	r3, 80130be <ucdr_deserialize_sequence_uint8_t+0x26>
 80130b8:	2001      	movs	r0, #1
 80130ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130be:	7d21      	ldrb	r1, [r4, #20]
 80130c0:	463a      	mov	r2, r7
 80130c2:	4620      	mov	r0, r4
 80130c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130c8:	f7ff becc 	b.w	8012e64 <ucdr_deserialize_endian_array_uint8_t>

080130cc <uxr_buffer_delete_entity>:
 80130cc:	b510      	push	{r4, lr}
 80130ce:	2300      	movs	r3, #0
 80130d0:	b08e      	sub	sp, #56	@ 0x38
 80130d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80130d6:	2303      	movs	r3, #3
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	2204      	movs	r2, #4
 80130dc:	ab06      	add	r3, sp, #24
 80130de:	4604      	mov	r4, r0
 80130e0:	9103      	str	r1, [sp, #12]
 80130e2:	f001 fc71 	bl	80149c8 <uxr_prepare_stream_to_write_submessage>
 80130e6:	b918      	cbnz	r0, 80130f0 <uxr_buffer_delete_entity+0x24>
 80130e8:	4604      	mov	r4, r0
 80130ea:	4620      	mov	r0, r4
 80130ec:	b00e      	add	sp, #56	@ 0x38
 80130ee:	bd10      	pop	{r4, pc}
 80130f0:	9902      	ldr	r1, [sp, #8]
 80130f2:	aa05      	add	r2, sp, #20
 80130f4:	4620      	mov	r0, r4
 80130f6:	f001 fd9d 	bl	8014c34 <uxr_init_base_object_request>
 80130fa:	a905      	add	r1, sp, #20
 80130fc:	4604      	mov	r4, r0
 80130fe:	a806      	add	r0, sp, #24
 8013100:	f003 fc94 	bl	8016a2c <uxr_serialize_DELETE_Payload>
 8013104:	4620      	mov	r0, r4
 8013106:	b00e      	add	sp, #56	@ 0x38
 8013108:	bd10      	pop	{r4, pc}
 801310a:	bf00      	nop

0801310c <uxr_common_create_entity>:
 801310c:	b510      	push	{r4, lr}
 801310e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013112:	b08c      	sub	sp, #48	@ 0x30
 8013114:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013118:	f1bc 0f01 	cmp.w	ip, #1
 801311c:	bf0c      	ite	eq
 801311e:	f003 0201 	andeq.w	r2, r3, #1
 8013122:	2200      	movne	r2, #0
 8013124:	330e      	adds	r3, #14
 8013126:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 801312a:	9101      	str	r1, [sp, #4]
 801312c:	441a      	add	r2, r3
 801312e:	2301      	movs	r3, #1
 8013130:	9300      	str	r3, [sp, #0]
 8013132:	9903      	ldr	r1, [sp, #12]
 8013134:	ab04      	add	r3, sp, #16
 8013136:	b292      	uxth	r2, r2
 8013138:	4604      	mov	r4, r0
 801313a:	f001 fc45 	bl	80149c8 <uxr_prepare_stream_to_write_submessage>
 801313e:	b918      	cbnz	r0, 8013148 <uxr_common_create_entity+0x3c>
 8013140:	4604      	mov	r4, r0
 8013142:	4620      	mov	r0, r4
 8013144:	b00c      	add	sp, #48	@ 0x30
 8013146:	bd10      	pop	{r4, pc}
 8013148:	9902      	ldr	r1, [sp, #8]
 801314a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801314c:	4620      	mov	r0, r4
 801314e:	f001 fd71 	bl	8014c34 <uxr_init_base_object_request>
 8013152:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013154:	4604      	mov	r4, r0
 8013156:	a804      	add	r0, sp, #16
 8013158:	f003 fbb0 	bl	80168bc <uxr_serialize_CREATE_Payload>
 801315c:	4620      	mov	r0, r4
 801315e:	b00c      	add	sp, #48	@ 0x30
 8013160:	bd10      	pop	{r4, pc}
 8013162:	bf00      	nop

08013164 <uxr_buffer_create_participant_bin>:
 8013164:	b570      	push	{r4, r5, r6, lr}
 8013166:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 801316a:	ac11      	add	r4, sp, #68	@ 0x44
 801316c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8013170:	2303      	movs	r3, #3
 8013172:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013176:	7223      	strb	r3, [r4, #8]
 8013178:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 801317a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 801317e:	2201      	movs	r2, #1
 8013180:	2100      	movs	r1, #0
 8013182:	4605      	mov	r5, r0
 8013184:	7122      	strb	r2, [r4, #4]
 8013186:	f88d 1014 	strb.w	r1, [sp, #20]
 801318a:	b1cb      	cbz	r3, 80131c0 <uxr_buffer_create_participant_bin+0x5c>
 801318c:	f88d 201c 	strb.w	r2, [sp, #28]
 8013190:	9308      	str	r3, [sp, #32]
 8013192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013196:	a915      	add	r1, sp, #84	@ 0x54
 8013198:	a809      	add	r0, sp, #36	@ 0x24
 801319a:	f7fb f8ef 	bl	800e37c <ucdr_init_buffer>
 801319e:	a905      	add	r1, sp, #20
 80131a0:	a809      	add	r0, sp, #36	@ 0x24
 80131a2:	f002 ff6d 	bl	8016080 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80131a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80131a8:	9600      	str	r6, [sp, #0]
 80131aa:	9401      	str	r4, [sp, #4]
 80131ac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80131b0:	60e3      	str	r3, [r4, #12]
 80131b2:	4628      	mov	r0, r5
 80131b4:	b29b      	uxth	r3, r3
 80131b6:	f7ff ffa9 	bl	801310c <uxr_common_create_entity>
 80131ba:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80131be:	bd70      	pop	{r4, r5, r6, pc}
 80131c0:	f88d 301c 	strb.w	r3, [sp, #28]
 80131c4:	e7e5      	b.n	8013192 <uxr_buffer_create_participant_bin+0x2e>
 80131c6:	bf00      	nop

080131c8 <uxr_buffer_create_topic_bin>:
 80131c8:	b570      	push	{r4, r5, r6, lr}
 80131ca:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80131ce:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80131d2:	9105      	str	r1, [sp, #20]
 80131d4:	4605      	mov	r5, r0
 80131d6:	a997      	add	r1, sp, #604	@ 0x25c
 80131d8:	4618      	mov	r0, r3
 80131da:	2302      	movs	r3, #2
 80131dc:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80131e0:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80131e4:	f000 fa58 	bl	8013698 <uxr_object_id_to_raw>
 80131e8:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80131ea:	9306      	str	r3, [sp, #24]
 80131ec:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80131ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80131f0:	2303      	movs	r3, #3
 80131f2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80131f6:	2301      	movs	r3, #1
 80131f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80131fc:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8013200:	a917      	add	r1, sp, #92	@ 0x5c
 8013202:	2300      	movs	r3, #0
 8013204:	a80b      	add	r0, sp, #44	@ 0x2c
 8013206:	f88d 301c 	strb.w	r3, [sp, #28]
 801320a:	f7fb f8b7 	bl	800e37c <ucdr_init_buffer>
 801320e:	a906      	add	r1, sp, #24
 8013210:	a80b      	add	r0, sp, #44	@ 0x2c
 8013212:	f002 ff57 	bl	80160c4 <uxr_serialize_OBJK_Topic_Binary>
 8013216:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013218:	9316      	str	r3, [sp, #88]	@ 0x58
 801321a:	ac13      	add	r4, sp, #76	@ 0x4c
 801321c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013220:	9600      	str	r6, [sp, #0]
 8013222:	9401      	str	r4, [sp, #4]
 8013224:	b29b      	uxth	r3, r3
 8013226:	4628      	mov	r0, r5
 8013228:	f7ff ff70 	bl	801310c <uxr_common_create_entity>
 801322c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8013230:	bd70      	pop	{r4, r5, r6, pc}
 8013232:	bf00      	nop

08013234 <uxr_buffer_create_publisher_bin>:
 8013234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013236:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801323a:	4605      	mov	r5, r0
 801323c:	9105      	str	r1, [sp, #20]
 801323e:	4618      	mov	r0, r3
 8013240:	2603      	movs	r6, #3
 8013242:	a992      	add	r1, sp, #584	@ 0x248
 8013244:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013248:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801324c:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8013250:	f000 fa22 	bl	8013698 <uxr_object_id_to_raw>
 8013254:	2300      	movs	r3, #0
 8013256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801325a:	a912      	add	r1, sp, #72	@ 0x48
 801325c:	a806      	add	r0, sp, #24
 801325e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8013262:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8013266:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801326a:	f7fb f887 	bl	800e37c <ucdr_init_buffer>
 801326e:	a993      	add	r1, sp, #588	@ 0x24c
 8013270:	a806      	add	r0, sp, #24
 8013272:	f002 ffdb 	bl	801622c <uxr_serialize_OBJK_Publisher_Binary>
 8013276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013278:	9311      	str	r3, [sp, #68]	@ 0x44
 801327a:	ac0e      	add	r4, sp, #56	@ 0x38
 801327c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013280:	9700      	str	r7, [sp, #0]
 8013282:	9401      	str	r4, [sp, #4]
 8013284:	b29b      	uxth	r3, r3
 8013286:	4628      	mov	r0, r5
 8013288:	f7ff ff40 	bl	801310c <uxr_common_create_entity>
 801328c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8013290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013292:	bf00      	nop

08013294 <uxr_buffer_create_subscriber_bin>:
 8013294:	b570      	push	{r4, r5, r6, lr}
 8013296:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801329a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801329e:	9105      	str	r1, [sp, #20]
 80132a0:	4605      	mov	r5, r0
 80132a2:	a992      	add	r1, sp, #584	@ 0x248
 80132a4:	4618      	mov	r0, r3
 80132a6:	2304      	movs	r3, #4
 80132a8:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80132ac:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80132b0:	f000 f9f2 	bl	8013698 <uxr_object_id_to_raw>
 80132b4:	2300      	movs	r3, #0
 80132b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80132ba:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80132be:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80132c2:	a912      	add	r1, sp, #72	@ 0x48
 80132c4:	2303      	movs	r3, #3
 80132c6:	a806      	add	r0, sp, #24
 80132c8:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80132cc:	f7fb f856 	bl	800e37c <ucdr_init_buffer>
 80132d0:	a993      	add	r1, sp, #588	@ 0x24c
 80132d2:	a806      	add	r0, sp, #24
 80132d4:	f003 f85a 	bl	801638c <uxr_serialize_OBJK_Subscriber_Binary>
 80132d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132da:	9311      	str	r3, [sp, #68]	@ 0x44
 80132dc:	ac0e      	add	r4, sp, #56	@ 0x38
 80132de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80132e2:	9600      	str	r6, [sp, #0]
 80132e4:	9401      	str	r4, [sp, #4]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	4628      	mov	r0, r5
 80132ea:	f7ff ff0f 	bl	801310c <uxr_common_create_entity>
 80132ee:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80132f2:	bd70      	pop	{r4, r5, r6, pc}

080132f4 <uxr_buffer_create_datawriter_bin>:
 80132f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132f8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80132fc:	ac1d      	add	r4, sp, #116	@ 0x74
 80132fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013302:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8013306:	9105      	str	r1, [sp, #20]
 8013308:	4606      	mov	r6, r0
 801330a:	a9a1      	add	r1, sp, #644	@ 0x284
 801330c:	4618      	mov	r0, r3
 801330e:	2305      	movs	r3, #5
 8013310:	7123      	strb	r3, [r4, #4]
 8013312:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8013316:	2703      	movs	r7, #3
 8013318:	f000 f9be 	bl	8013698 <uxr_object_id_to_raw>
 801331c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801331e:	7227      	strb	r7, [r4, #8]
 8013320:	a90e      	add	r1, sp, #56	@ 0x38
 8013322:	f000 f9b9 	bl	8013698 <uxr_object_id_to_raw>
 8013326:	2300      	movs	r3, #0
 8013328:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 801332c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8013330:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8013334:	3d00      	subs	r5, #0
 8013336:	bf18      	it	ne
 8013338:	2501      	movne	r5, #1
 801333a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801333e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8013342:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8013346:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801334a:	2301      	movs	r3, #1
 801334c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8013350:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013354:	bb8a      	cbnz	r2, 80133ba <uxr_buffer_create_datawriter_bin+0xc6>
 8013356:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801335a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801335e:	f04f 0c13 	mov.w	ip, #19
 8013362:	250b      	movs	r5, #11
 8013364:	2221      	movs	r2, #33	@ 0x21
 8013366:	2111      	movs	r1, #17
 8013368:	2009      	movs	r0, #9
 801336a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 801336e:	b923      	cbnz	r3, 801337a <uxr_buffer_create_datawriter_bin+0x86>
 8013370:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8013374:	4672      	mov	r2, lr
 8013376:	4661      	mov	r1, ip
 8013378:	4628      	mov	r0, r5
 801337a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 801337e:	2b01      	cmp	r3, #1
 8013380:	d025      	beq.n	80133ce <uxr_buffer_create_datawriter_bin+0xda>
 8013382:	2b03      	cmp	r3, #3
 8013384:	d029      	beq.n	80133da <uxr_buffer_create_datawriter_bin+0xe6>
 8013386:	b32b      	cbz	r3, 80133d4 <uxr_buffer_create_datawriter_bin+0xe0>
 8013388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801338c:	a921      	add	r1, sp, #132	@ 0x84
 801338e:	a806      	add	r0, sp, #24
 8013390:	f7fa fff4 	bl	800e37c <ucdr_init_buffer>
 8013394:	a90e      	add	r1, sp, #56	@ 0x38
 8013396:	a806      	add	r0, sp, #24
 8013398:	f003 f8aa 	bl	80164f0 <uxr_serialize_OBJK_DataWriter_Binary>
 801339c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801339e:	f8cd 8000 	str.w	r8, [sp]
 80133a2:	9401      	str	r4, [sp, #4]
 80133a4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80133a8:	60e3      	str	r3, [r4, #12]
 80133aa:	4630      	mov	r0, r6
 80133ac:	b29b      	uxth	r3, r3
 80133ae:	f7ff fead 	bl	801310c <uxr_common_create_entity>
 80133b2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80133b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ba:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80133be:	f04f 0c12 	mov.w	ip, #18
 80133c2:	250a      	movs	r5, #10
 80133c4:	2220      	movs	r2, #32
 80133c6:	2110      	movs	r1, #16
 80133c8:	2008      	movs	r0, #8
 80133ca:	2702      	movs	r7, #2
 80133cc:	e7cd      	b.n	801336a <uxr_buffer_create_datawriter_bin+0x76>
 80133ce:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80133d2:	e7d9      	b.n	8013388 <uxr_buffer_create_datawriter_bin+0x94>
 80133d4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80133d8:	e7d6      	b.n	8013388 <uxr_buffer_create_datawriter_bin+0x94>
 80133da:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80133de:	e7d3      	b.n	8013388 <uxr_buffer_create_datawriter_bin+0x94>

080133e0 <uxr_buffer_create_datareader_bin>:
 80133e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e4:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80133e8:	ac1f      	add	r4, sp, #124	@ 0x7c
 80133ea:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80133ee:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80133f2:	9105      	str	r1, [sp, #20]
 80133f4:	4606      	mov	r6, r0
 80133f6:	a9a3      	add	r1, sp, #652	@ 0x28c
 80133f8:	4618      	mov	r0, r3
 80133fa:	2306      	movs	r3, #6
 80133fc:	7123      	strb	r3, [r4, #4]
 80133fe:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8013402:	2703      	movs	r7, #3
 8013404:	f000 f948 	bl	8013698 <uxr_object_id_to_raw>
 8013408:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 801340a:	7227      	strb	r7, [r4, #8]
 801340c:	a90e      	add	r1, sp, #56	@ 0x38
 801340e:	f000 f943 	bl	8013698 <uxr_object_id_to_raw>
 8013412:	2300      	movs	r3, #0
 8013414:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013418:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 801341c:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8013420:	3d00      	subs	r5, #0
 8013422:	bf18      	it	ne
 8013424:	2501      	movne	r5, #1
 8013426:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801342a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 801342e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8013432:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8013436:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801343a:	2301      	movs	r3, #1
 801343c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8013440:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8013444:	bb8a      	cbnz	r2, 80134aa <uxr_buffer_create_datareader_bin+0xca>
 8013446:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801344a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801344e:	f04f 0c13 	mov.w	ip, #19
 8013452:	250b      	movs	r5, #11
 8013454:	2221      	movs	r2, #33	@ 0x21
 8013456:	2111      	movs	r1, #17
 8013458:	2009      	movs	r0, #9
 801345a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801345e:	b923      	cbnz	r3, 801346a <uxr_buffer_create_datareader_bin+0x8a>
 8013460:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8013464:	4672      	mov	r2, lr
 8013466:	4661      	mov	r1, ip
 8013468:	4628      	mov	r0, r5
 801346a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801346e:	2b01      	cmp	r3, #1
 8013470:	d025      	beq.n	80134be <uxr_buffer_create_datareader_bin+0xde>
 8013472:	2b03      	cmp	r3, #3
 8013474:	d029      	beq.n	80134ca <uxr_buffer_create_datareader_bin+0xea>
 8013476:	b32b      	cbz	r3, 80134c4 <uxr_buffer_create_datareader_bin+0xe4>
 8013478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801347c:	a923      	add	r1, sp, #140	@ 0x8c
 801347e:	a806      	add	r0, sp, #24
 8013480:	f7fa ff7c 	bl	800e37c <ucdr_init_buffer>
 8013484:	a90e      	add	r1, sp, #56	@ 0x38
 8013486:	a806      	add	r0, sp, #24
 8013488:	f002 fff6 	bl	8016478 <uxr_serialize_OBJK_DataReader_Binary>
 801348c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801348e:	f8cd 8000 	str.w	r8, [sp]
 8013492:	9401      	str	r4, [sp, #4]
 8013494:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013498:	60e3      	str	r3, [r4, #12]
 801349a:	4630      	mov	r0, r6
 801349c:	b29b      	uxth	r3, r3
 801349e:	f7ff fe35 	bl	801310c <uxr_common_create_entity>
 80134a2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80134a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134aa:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80134ae:	f04f 0c12 	mov.w	ip, #18
 80134b2:	250a      	movs	r5, #10
 80134b4:	2220      	movs	r2, #32
 80134b6:	2110      	movs	r1, #16
 80134b8:	2008      	movs	r0, #8
 80134ba:	2702      	movs	r7, #2
 80134bc:	e7cd      	b.n	801345a <uxr_buffer_create_datareader_bin+0x7a>
 80134be:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80134c2:	e7d9      	b.n	8013478 <uxr_buffer_create_datareader_bin+0x98>
 80134c4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80134c8:	e7d6      	b.n	8013478 <uxr_buffer_create_datareader_bin+0x98>
 80134ca:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80134ce:	e7d3      	b.n	8013478 <uxr_buffer_create_datareader_bin+0x98>

080134d0 <get_custom_error>:
 80134d0:	4b01      	ldr	r3, [pc, #4]	@ (80134d8 <get_custom_error+0x8>)
 80134d2:	7818      	ldrb	r0, [r3, #0]
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	20011b2c 	.word	0x20011b2c

080134dc <recv_custom_msg>:
 80134dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e0:	4693      	mov	fp, r2
 80134e2:	b089      	sub	sp, #36	@ 0x24
 80134e4:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80134e8:	9305      	str	r3, [sp, #20]
 80134ea:	468a      	mov	sl, r1
 80134ec:	2100      	movs	r1, #0
 80134ee:	4604      	mov	r4, r0
 80134f0:	f88d 101e 	strb.w	r1, [sp, #30]
 80134f4:	b322      	cbz	r2, 8013540 <recv_custom_msg+0x64>
 80134f6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80134fa:	f10d 081f 	add.w	r8, sp, #31
 80134fe:	af05      	add	r7, sp, #20
 8013500:	f10d 061e 	add.w	r6, sp, #30
 8013504:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8013508:	e002      	b.n	8013510 <recv_custom_msg+0x34>
 801350a:	9b05      	ldr	r3, [sp, #20]
 801350c:	2b00      	cmp	r3, #0
 801350e:	dd0f      	ble.n	8013530 <recv_custom_msg+0x54>
 8013510:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8013514:	4623      	mov	r3, r4
 8013516:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801351a:	e9cd 5600 	strd	r5, r6, [sp]
 801351e:	4622      	mov	r2, r4
 8013520:	4648      	mov	r0, r9
 8013522:	f001 fdb5 	bl	8015090 <uxr_read_framed_msg>
 8013526:	2800      	cmp	r0, #0
 8013528:	d0ef      	beq.n	801350a <recv_custom_msg+0x2e>
 801352a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801352e:	b1b3      	cbz	r3, 801355e <recv_custom_msg+0x82>
 8013530:	4b0f      	ldr	r3, [pc, #60]	@ (8013570 <recv_custom_msg+0x94>)
 8013532:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8013536:	701a      	strb	r2, [r3, #0]
 8013538:	2000      	movs	r0, #0
 801353a:	b009      	add	sp, #36	@ 0x24
 801353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013540:	f10d 021f 	add.w	r2, sp, #31
 8013544:	9200      	str	r2, [sp, #0]
 8013546:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801354a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801354e:	4601      	mov	r1, r0
 8013550:	47a8      	blx	r5
 8013552:	2800      	cmp	r0, #0
 8013554:	d0ec      	beq.n	8013530 <recv_custom_msg+0x54>
 8013556:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d1e8      	bne.n	8013530 <recv_custom_msg+0x54>
 801355e:	f8cb 0000 	str.w	r0, [fp]
 8013562:	2001      	movs	r0, #1
 8013564:	f8ca 4000 	str.w	r4, [sl]
 8013568:	b009      	add	sp, #36	@ 0x24
 801356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356e:	bf00      	nop
 8013570:	20011b2c 	.word	0x20011b2c

08013574 <send_custom_msg>:
 8013574:	b530      	push	{r4, r5, lr}
 8013576:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801357a:	b087      	sub	sp, #28
 801357c:	4615      	mov	r5, r2
 801357e:	b974      	cbnz	r4, 801359e <send_custom_msg+0x2a>
 8013580:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8013584:	f10d 0317 	add.w	r3, sp, #23
 8013588:	47a0      	blx	r4
 801358a:	b108      	cbz	r0, 8013590 <send_custom_msg+0x1c>
 801358c:	42a8      	cmp	r0, r5
 801358e:	d015      	beq.n	80135bc <send_custom_msg+0x48>
 8013590:	4b0c      	ldr	r3, [pc, #48]	@ (80135c4 <send_custom_msg+0x50>)
 8013592:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013596:	701a      	strb	r2, [r3, #0]
 8013598:	2000      	movs	r0, #0
 801359a:	b007      	add	sp, #28
 801359c:	bd30      	pop	{r4, r5, pc}
 801359e:	460b      	mov	r3, r1
 80135a0:	2200      	movs	r2, #0
 80135a2:	f10d 0117 	add.w	r1, sp, #23
 80135a6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80135aa:	4602      	mov	r2, r0
 80135ac:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80135b0:	9500      	str	r5, [sp, #0]
 80135b2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80135b6:	f001 fb73 	bl	8014ca0 <uxr_write_framed_msg>
 80135ba:	e7e6      	b.n	801358a <send_custom_msg+0x16>
 80135bc:	2001      	movs	r0, #1
 80135be:	b007      	add	sp, #28
 80135c0:	bd30      	pop	{r4, r5, pc}
 80135c2:	bf00      	nop
 80135c4:	20011b2c 	.word	0x20011b2c

080135c8 <uxr_set_custom_transport_callbacks>:
 80135c8:	b410      	push	{r4}
 80135ca:	9c01      	ldr	r4, [sp, #4]
 80135cc:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80135d0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80135d4:	9b02      	ldr	r3, [sp, #8]
 80135d6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80135da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135de:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80135e2:	4770      	bx	lr

080135e4 <uxr_init_custom_transport>:
 80135e4:	b538      	push	{r3, r4, r5, lr}
 80135e6:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80135ea:	b303      	cbz	r3, 801362e <uxr_init_custom_transport+0x4a>
 80135ec:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80135f0:	4604      	mov	r4, r0
 80135f2:	b1e2      	cbz	r2, 801362e <uxr_init_custom_transport+0x4a>
 80135f4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80135f8:	b1ca      	cbz	r2, 801362e <uxr_init_custom_transport+0x4a>
 80135fa:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80135fe:	b1b2      	cbz	r2, 801362e <uxr_init_custom_transport+0x4a>
 8013600:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8013604:	4798      	blx	r3
 8013606:	4605      	mov	r5, r0
 8013608:	b188      	cbz	r0, 801362e <uxr_init_custom_transport+0x4a>
 801360a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801360e:	b98b      	cbnz	r3, 8013634 <uxr_init_custom_transport+0x50>
 8013610:	490b      	ldr	r1, [pc, #44]	@ (8013640 <uxr_init_custom_transport+0x5c>)
 8013612:	4b0c      	ldr	r3, [pc, #48]	@ (8013644 <uxr_init_custom_transport+0x60>)
 8013614:	4a0c      	ldr	r2, [pc, #48]	@ (8013648 <uxr_init_custom_transport+0x64>)
 8013616:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801361a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801361e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8013622:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8013626:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801362a:	4628      	mov	r0, r5
 801362c:	bd38      	pop	{r3, r4, r5, pc}
 801362e:	2500      	movs	r5, #0
 8013630:	4628      	mov	r0, r5
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	2100      	movs	r1, #0
 8013636:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801363a:	f001 fb2b 	bl	8014c94 <uxr_init_framing_io>
 801363e:	e7e7      	b.n	8013610 <uxr_init_custom_transport+0x2c>
 8013640:	08013575 	.word	0x08013575
 8013644:	080134dd 	.word	0x080134dd
 8013648:	080134d1 	.word	0x080134d1

0801364c <uxr_close_custom_transport>:
 801364c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013650:	4718      	bx	r3
 8013652:	bf00      	nop

08013654 <uxr_object_id>:
 8013654:	b082      	sub	sp, #8
 8013656:	2300      	movs	r3, #0
 8013658:	f88d 1006 	strb.w	r1, [sp, #6]
 801365c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013660:	f360 030f 	bfi	r3, r0, #0, #16
 8013664:	f362 431f 	bfi	r3, r2, #16, #16
 8013668:	4618      	mov	r0, r3
 801366a:	b002      	add	sp, #8
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop

08013670 <uxr_object_id_from_raw>:
 8013670:	7843      	ldrb	r3, [r0, #1]
 8013672:	7801      	ldrb	r1, [r0, #0]
 8013674:	b082      	sub	sp, #8
 8013676:	f003 020f 	and.w	r2, r3, #15
 801367a:	f88d 2006 	strb.w	r2, [sp, #6]
 801367e:	091b      	lsrs	r3, r3, #4
 8013680:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013684:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013688:	2000      	movs	r0, #0
 801368a:	f363 000f 	bfi	r0, r3, #0, #16
 801368e:	f362 401f 	bfi	r0, r2, #16, #16
 8013692:	b002      	add	sp, #8
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop

08013698 <uxr_object_id_to_raw>:
 8013698:	4602      	mov	r2, r0
 801369a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801369e:	b082      	sub	sp, #8
 80136a0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80136a4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80136a8:	f881 c000 	strb.w	ip, [r1]
 80136ac:	7048      	strb	r0, [r1, #1]
 80136ae:	b002      	add	sp, #8
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop

080136b4 <uxr_ping_agent_session>:
 80136b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136b8:	4617      	mov	r7, r2
 80136ba:	b091      	sub	sp, #68	@ 0x44
 80136bc:	2210      	movs	r2, #16
 80136be:	4606      	mov	r6, r0
 80136c0:	4688      	mov	r8, r1
 80136c2:	a808      	add	r0, sp, #32
 80136c4:	eb0d 0102 	add.w	r1, sp, r2
 80136c8:	f7fa fe58 	bl	800e37c <ucdr_init_buffer>
 80136cc:	4b1e      	ldr	r3, [pc, #120]	@ (8013748 <uxr_ping_agent_session+0x94>)
 80136ce:	2500      	movs	r5, #0
 80136d0:	881b      	ldrh	r3, [r3, #0]
 80136d2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80136d6:	9500      	str	r5, [sp, #0]
 80136d8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80136dc:	2402      	movs	r4, #2
 80136de:	7831      	ldrb	r1, [r6, #0]
 80136e0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80136e4:	462a      	mov	r2, r5
 80136e6:	a808      	add	r0, sp, #32
 80136e8:	462b      	mov	r3, r5
 80136ea:	9403      	str	r4, [sp, #12]
 80136ec:	f002 fa96 	bl	8015c1c <uxr_serialize_message_header>
 80136f0:	4621      	mov	r1, r4
 80136f2:	462b      	mov	r3, r5
 80136f4:	2208      	movs	r2, #8
 80136f6:	a808      	add	r0, sp, #32
 80136f8:	f002 f896 	bl	8015828 <uxr_buffer_submessage_header>
 80136fc:	a902      	add	r1, sp, #8
 80136fe:	4604      	mov	r4, r0
 8013700:	a808      	add	r0, sp, #32
 8013702:	f003 f96b 	bl	80169dc <uxr_serialize_GET_INFO_Payload>
 8013706:	b104      	cbz	r4, 801370a <uxr_ping_agent_session+0x56>
 8013708:	b918      	cbnz	r0, 8013712 <uxr_ping_agent_session+0x5e>
 801370a:	2000      	movs	r0, #0
 801370c:	b011      	add	sp, #68	@ 0x44
 801370e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013712:	a808      	add	r0, sp, #32
 8013714:	f7fa fe5e 	bl	800e3d4 <ucdr_buffer_length>
 8013718:	4681      	mov	r9, r0
 801371a:	e00d      	b.n	8013738 <uxr_ping_agent_session+0x84>
 801371c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 801371e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013722:	47a0      	blx	r4
 8013724:	4641      	mov	r1, r8
 8013726:	4604      	mov	r4, r0
 8013728:	4630      	mov	r0, r6
 801372a:	f000 ff4d 	bl	80145c8 <uxr_run_session_until_pong>
 801372e:	ea04 0c00 	and.w	ip, r4, r0
 8013732:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 8013736:	d1e9      	bne.n	801370c <uxr_ping_agent_session+0x58>
 8013738:	42af      	cmp	r7, r5
 801373a:	464a      	mov	r2, r9
 801373c:	a904      	add	r1, sp, #16
 801373e:	f105 0501 	add.w	r5, r5, #1
 8013742:	d1eb      	bne.n	801371c <uxr_ping_agent_session+0x68>
 8013744:	e7e1      	b.n	801370a <uxr_ping_agent_session+0x56>
 8013746:	bf00      	nop
 8013748:	0801d804 	.word	0x0801d804

0801374c <uxr_ping_agent_attempts>:
 801374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013750:	ed2d 8b02 	vpush	{d8}
 8013754:	b0d1      	sub	sp, #324	@ 0x144
 8013756:	4606      	mov	r6, r0
 8013758:	4688      	mov	r8, r1
 801375a:	a80e      	add	r0, sp, #56	@ 0x38
 801375c:	a90a      	add	r1, sp, #40	@ 0x28
 801375e:	4615      	mov	r5, r2
 8013760:	2210      	movs	r2, #16
 8013762:	f7fa fe0b 	bl	800e37c <ucdr_init_buffer>
 8013766:	4b54      	ldr	r3, [pc, #336]	@ (80138b8 <uxr_ping_agent_attempts+0x16c>)
 8013768:	881b      	ldrh	r3, [r3, #0]
 801376a:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 801376e:	2300      	movs	r3, #0
 8013770:	2402      	movs	r4, #2
 8013772:	461a      	mov	r2, r3
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	2180      	movs	r1, #128	@ 0x80
 8013778:	a80e      	add	r0, sp, #56	@ 0x38
 801377a:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 801377e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8013780:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8013784:	f002 fa4a 	bl	8015c1c <uxr_serialize_message_header>
 8013788:	4621      	mov	r1, r4
 801378a:	2300      	movs	r3, #0
 801378c:	2208      	movs	r2, #8
 801378e:	a80e      	add	r0, sp, #56	@ 0x38
 8013790:	f002 f84a 	bl	8015828 <uxr_buffer_submessage_header>
 8013794:	a91e      	add	r1, sp, #120	@ 0x78
 8013796:	4604      	mov	r4, r0
 8013798:	a80e      	add	r0, sp, #56	@ 0x38
 801379a:	f003 f91f 	bl	80169dc <uxr_serialize_GET_INFO_Payload>
 801379e:	b104      	cbz	r4, 80137a2 <uxr_ping_agent_attempts+0x56>
 80137a0:	b938      	cbnz	r0, 80137b2 <uxr_ping_agent_attempts+0x66>
 80137a2:	f04f 0b00 	mov.w	fp, #0
 80137a6:	4658      	mov	r0, fp
 80137a8:	b051      	add	sp, #324	@ 0x144
 80137aa:	ecbd 8b02 	vpop	{d8}
 80137ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b2:	a80e      	add	r0, sp, #56	@ 0x38
 80137b4:	f7fa fe0e 	bl	800e3d4 <ucdr_buffer_length>
 80137b8:	1c6b      	adds	r3, r5, #1
 80137ba:	ee08 0a10 	vmov	s16, r0
 80137be:	9303      	str	r3, [sp, #12]
 80137c0:	f04f 0901 	mov.w	r9, #1
 80137c4:	9b03      	ldr	r3, [sp, #12]
 80137c6:	454b      	cmp	r3, r9
 80137c8:	d0eb      	beq.n	80137a2 <uxr_ping_agent_attempts+0x56>
 80137ca:	e9d6 0300 	ldrd	r0, r3, [r6]
 80137ce:	ee18 2a10 	vmov	r2, s16
 80137d2:	a90a      	add	r1, sp, #40	@ 0x28
 80137d4:	4798      	blx	r3
 80137d6:	f002 f86d 	bl	80158b4 <uxr_millis>
 80137da:	4645      	mov	r5, r8
 80137dc:	4604      	mov	r4, r0
 80137de:	f04f 0a00 	mov.w	sl, #0
 80137e2:	68b7      	ldr	r7, [r6, #8]
 80137e4:	6830      	ldr	r0, [r6, #0]
 80137e6:	f8cd a018 	str.w	sl, [sp, #24]
 80137ea:	4643      	mov	r3, r8
 80137ec:	aa07      	add	r2, sp, #28
 80137ee:	a906      	add	r1, sp, #24
 80137f0:	47b8      	blx	r7
 80137f2:	4607      	mov	r7, r0
 80137f4:	b958      	cbnz	r0, 801380e <uxr_ping_agent_attempts+0xc2>
 80137f6:	f002 f85d 	bl	80158b4 <uxr_millis>
 80137fa:	1b00      	subs	r0, r0, r4
 80137fc:	1a2d      	subs	r5, r5, r0
 80137fe:	f002 f859 	bl	80158b4 <uxr_millis>
 8013802:	2d00      	cmp	r5, #0
 8013804:	4604      	mov	r4, r0
 8013806:	dcec      	bgt.n	80137e2 <uxr_ping_agent_attempts+0x96>
 8013808:	f109 0901 	add.w	r9, r9, #1
 801380c:	e7da      	b.n	80137c4 <uxr_ping_agent_attempts+0x78>
 801380e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8013812:	a816      	add	r0, sp, #88	@ 0x58
 8013814:	f7fa fdb2 	bl	800e37c <ucdr_init_buffer>
 8013818:	ab05      	add	r3, sp, #20
 801381a:	f10d 0211 	add.w	r2, sp, #17
 801381e:	a916      	add	r1, sp, #88	@ 0x58
 8013820:	a808      	add	r0, sp, #32
 8013822:	e9cd aa08 	strd	sl, sl, [sp, #32]
 8013826:	f001 f9bb 	bl	8014ba0 <uxr_read_session_header>
 801382a:	22c8      	movs	r2, #200	@ 0xc8
 801382c:	2100      	movs	r1, #0
 801382e:	a81e      	add	r0, sp, #120	@ 0x78
 8013830:	f009 f884 	bl	801c93c <memset>
 8013834:	a816      	add	r0, sp, #88	@ 0x58
 8013836:	f7fa fdd1 	bl	800e3dc <ucdr_buffer_remaining>
 801383a:	2804      	cmp	r0, #4
 801383c:	d814      	bhi.n	8013868 <uxr_ping_agent_attempts+0x11c>
 801383e:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 8013842:	f002 f837 	bl	80158b4 <uxr_millis>
 8013846:	1b00      	subs	r0, r0, r4
 8013848:	1a2d      	subs	r5, r5, r0
 801384a:	f002 f833 	bl	80158b4 <uxr_millis>
 801384e:	2d00      	cmp	r5, #0
 8013850:	4604      	mov	r4, r0
 8013852:	dd2a      	ble.n	80138aa <uxr_ping_agent_attempts+0x15e>
 8013854:	f1bb 0f00 	cmp.w	fp, #0
 8013858:	d0c3      	beq.n	80137e2 <uxr_ping_agent_attempts+0x96>
 801385a:	46bb      	mov	fp, r7
 801385c:	4658      	mov	r0, fp
 801385e:	b051      	add	sp, #324	@ 0x144
 8013860:	ecbd 8b02 	vpop	{d8}
 8013864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013868:	f10d 0316 	add.w	r3, sp, #22
 801386c:	f10d 0213 	add.w	r2, sp, #19
 8013870:	f10d 0112 	add.w	r1, sp, #18
 8013874:	a816      	add	r0, sp, #88	@ 0x58
 8013876:	f88d a012 	strb.w	sl, [sp, #18]
 801387a:	f8ad a016 	strh.w	sl, [sp, #22]
 801387e:	f88d a013 	strb.w	sl, [sp, #19]
 8013882:	f002 fa1d 	bl	8015cc0 <uxr_deserialize_submessage_header>
 8013886:	a816      	add	r0, sp, #88	@ 0x58
 8013888:	f7fa fda8 	bl	800e3dc <ucdr_buffer_remaining>
 801388c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013890:	4298      	cmp	r0, r3
 8013892:	d3d4      	bcc.n	801383e <uxr_ping_agent_attempts+0xf2>
 8013894:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8013898:	2b06      	cmp	r3, #6
 801389a:	d1d0      	bne.n	801383e <uxr_ping_agent_attempts+0xf2>
 801389c:	a916      	add	r1, sp, #88	@ 0x58
 801389e:	a81e      	add	r0, sp, #120	@ 0x78
 80138a0:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 80138a4:	f000 face 	bl	8013e44 <read_submessage_info>
 80138a8:	e7c9      	b.n	801383e <uxr_ping_agent_attempts+0xf2>
 80138aa:	f1bb 0f00 	cmp.w	fp, #0
 80138ae:	d1d4      	bne.n	801385a <uxr_ping_agent_attempts+0x10e>
 80138b0:	f109 0901 	add.w	r9, r9, #1
 80138b4:	e786      	b.n	80137c4 <uxr_ping_agent_attempts+0x78>
 80138b6:	bf00      	nop
 80138b8:	0801d804 	.word	0x0801d804

080138bc <uxr_buffer_request_data>:
 80138bc:	b530      	push	{r4, r5, lr}
 80138be:	b095      	sub	sp, #84	@ 0x54
 80138c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80138c4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80138c6:	9303      	str	r3, [sp, #12]
 80138c8:	2200      	movs	r2, #0
 80138ca:	2d00      	cmp	r5, #0
 80138cc:	bf14      	ite	ne
 80138ce:	2101      	movne	r1, #1
 80138d0:	4611      	moveq	r1, r2
 80138d2:	4604      	mov	r4, r0
 80138d4:	f88d 301c 	strb.w	r3, [sp, #28]
 80138d8:	f88d 201d 	strb.w	r2, [sp, #29]
 80138dc:	f88d 201e 	strb.w	r2, [sp, #30]
 80138e0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80138e4:	d021      	beq.n	801392a <uxr_buffer_request_data+0x6e>
 80138e6:	682a      	ldr	r2, [r5, #0]
 80138e8:	686b      	ldr	r3, [r5, #4]
 80138ea:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80138ee:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80138f2:	2210      	movs	r2, #16
 80138f4:	2308      	movs	r3, #8
 80138f6:	2100      	movs	r1, #0
 80138f8:	e9cd 3100 	strd	r3, r1, [sp]
 80138fc:	4620      	mov	r0, r4
 80138fe:	9905      	ldr	r1, [sp, #20]
 8013900:	ab0c      	add	r3, sp, #48	@ 0x30
 8013902:	f001 f861 	bl	80149c8 <uxr_prepare_stream_to_write_submessage>
 8013906:	b918      	cbnz	r0, 8013910 <uxr_buffer_request_data+0x54>
 8013908:	4604      	mov	r4, r0
 801390a:	4620      	mov	r0, r4
 801390c:	b015      	add	sp, #84	@ 0x54
 801390e:	bd30      	pop	{r4, r5, pc}
 8013910:	9904      	ldr	r1, [sp, #16]
 8013912:	aa06      	add	r2, sp, #24
 8013914:	4620      	mov	r0, r4
 8013916:	f001 f98d 	bl	8014c34 <uxr_init_base_object_request>
 801391a:	a906      	add	r1, sp, #24
 801391c:	4604      	mov	r4, r0
 801391e:	a80c      	add	r0, sp, #48	@ 0x30
 8013920:	f003 f92e 	bl	8016b80 <uxr_serialize_READ_DATA_Payload>
 8013924:	4620      	mov	r0, r4
 8013926:	b015      	add	sp, #84	@ 0x54
 8013928:	bd30      	pop	{r4, r5, pc}
 801392a:	2208      	movs	r2, #8
 801392c:	e7e2      	b.n	80138f4 <uxr_buffer_request_data+0x38>
 801392e:	bf00      	nop

08013930 <uxr_buffer_cancel_data>:
 8013930:	b510      	push	{r4, lr}
 8013932:	b094      	sub	sp, #80	@ 0x50
 8013934:	2300      	movs	r3, #0
 8013936:	9202      	str	r2, [sp, #8]
 8013938:	9205      	str	r2, [sp, #20]
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	2201      	movs	r2, #1
 801393e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013942:	f88d 301e 	strb.w	r3, [sp, #30]
 8013946:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801394a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801394e:	2308      	movs	r3, #8
 8013950:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013954:	9300      	str	r3, [sp, #0]
 8013956:	2210      	movs	r2, #16
 8013958:	ab0c      	add	r3, sp, #48	@ 0x30
 801395a:	4604      	mov	r4, r0
 801395c:	9103      	str	r1, [sp, #12]
 801395e:	f001 f833 	bl	80149c8 <uxr_prepare_stream_to_write_submessage>
 8013962:	b918      	cbnz	r0, 801396c <uxr_buffer_cancel_data+0x3c>
 8013964:	4604      	mov	r4, r0
 8013966:	4620      	mov	r0, r4
 8013968:	b014      	add	sp, #80	@ 0x50
 801396a:	bd10      	pop	{r4, pc}
 801396c:	9905      	ldr	r1, [sp, #20]
 801396e:	aa06      	add	r2, sp, #24
 8013970:	4620      	mov	r0, r4
 8013972:	f001 f95f 	bl	8014c34 <uxr_init_base_object_request>
 8013976:	a906      	add	r1, sp, #24
 8013978:	4604      	mov	r4, r0
 801397a:	a80c      	add	r0, sp, #48	@ 0x30
 801397c:	f003 f900 	bl	8016b80 <uxr_serialize_READ_DATA_Payload>
 8013980:	4620      	mov	r0, r4
 8013982:	b014      	add	sp, #80	@ 0x50
 8013984:	bd10      	pop	{r4, pc}
 8013986:	bf00      	nop

08013988 <read_submessage_format>:
 8013988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801398c:	b095      	sub	sp, #84	@ 0x54
 801398e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8013992:	b113      	cbz	r3, 801399a <read_submessage_format+0x12>
 8013994:	b015      	add	sp, #84	@ 0x54
 8013996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801399a:	460c      	mov	r4, r1
 801399c:	4615      	mov	r5, r2
 801399e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80139a2:	4607      	mov	r7, r0
 80139a4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80139a6:	9004      	str	r0, [sp, #16]
 80139a8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80139aa:	9005      	str	r0, [sp, #20]
 80139ac:	1a52      	subs	r2, r2, r1
 80139ae:	a80c      	add	r0, sp, #48	@ 0x30
 80139b0:	4699      	mov	r9, r3
 80139b2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80139b6:	f7fa fce1 	bl	800e37c <ucdr_init_buffer>
 80139ba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80139be:	a80c      	add	r0, sp, #48	@ 0x30
 80139c0:	f7fa fcb0 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 80139c4:	69e2      	ldr	r2, [r4, #28]
 80139c6:	b19a      	cbz	r2, 80139f0 <read_submessage_format+0x68>
 80139c8:	f1b8 0f07 	cmp.w	r8, #7
 80139cc:	f882 9014 	strb.w	r9, [r2, #20]
 80139d0:	d040      	beq.n	8013a54 <read_submessage_format+0xcc>
 80139d2:	f1b8 0f08 	cmp.w	r8, #8
 80139d6:	d02e      	beq.n	8013a36 <read_submessage_format+0xae>
 80139d8:	f1b8 0f06 	cmp.w	r8, #6
 80139dc:	d011      	beq.n	8013a02 <read_submessage_format+0x7a>
 80139de:	2301      	movs	r3, #1
 80139e0:	7513      	strb	r3, [r2, #20]
 80139e2:	4629      	mov	r1, r5
 80139e4:	4620      	mov	r0, r4
 80139e6:	f7fa fd19 	bl	800e41c <ucdr_advance_buffer>
 80139ea:	b015      	add	sp, #84	@ 0x54
 80139ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139f0:	f1b8 0f07 	cmp.w	r8, #7
 80139f4:	d02e      	beq.n	8013a54 <read_submessage_format+0xcc>
 80139f6:	f1b8 0f08 	cmp.w	r8, #8
 80139fa:	d01c      	beq.n	8013a36 <read_submessage_format+0xae>
 80139fc:	f1b8 0f06 	cmp.w	r8, #6
 8013a00:	d1ef      	bne.n	80139e2 <read_submessage_format+0x5a>
 8013a02:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8013a06:	f1b8 0f00 	cmp.w	r8, #0
 8013a0a:	d011      	beq.n	8013a30 <read_submessage_format+0xa8>
 8013a0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a0e:	e9cd 3500 	strd	r3, r5, [sp]
 8013a12:	2306      	movs	r3, #6
 8013a14:	f88d 3016 	strb.w	r3, [sp, #22]
 8013a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013a1c:	9302      	str	r3, [sp, #8]
 8013a1e:	4632      	mov	r2, r6
 8013a20:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013a24:	4638      	mov	r0, r7
 8013a26:	47c0      	blx	r8
 8013a28:	2301      	movs	r3, #1
 8013a2a:	69e2      	ldr	r2, [r4, #28]
 8013a2c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	d1d4      	bne.n	80139de <read_submessage_format+0x56>
 8013a34:	e7d5      	b.n	80139e2 <read_submessage_format+0x5a>
 8013a36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d0f8      	beq.n	8013a30 <read_submessage_format+0xa8>
 8013a3e:	a906      	add	r1, sp, #24
 8013a40:	a80c      	add	r0, sp, #48	@ 0x30
 8013a42:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013a46:	f003 f961 	bl	8016d0c <uxr_deserialize_SampleIdentity>
 8013a4a:	b9a0      	cbnz	r0, 8013a76 <read_submessage_format+0xee>
 8013a4c:	69e2      	ldr	r2, [r4, #28]
 8013a4e:	2a00      	cmp	r2, #0
 8013a50:	d1c5      	bne.n	80139de <read_submessage_format+0x56>
 8013a52:	e7c6      	b.n	80139e2 <read_submessage_format+0x5a>
 8013a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013a58:	b13b      	cbz	r3, 8013a6a <read_submessage_format+0xe2>
 8013a5a:	a906      	add	r1, sp, #24
 8013a5c:	a80c      	add	r0, sp, #48	@ 0x30
 8013a5e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013a62:	f002 fe13 	bl	801668c <uxr_deserialize_BaseObjectRequest>
 8013a66:	bb60      	cbnz	r0, 8013ac2 <read_submessage_format+0x13a>
 8013a68:	69e2      	ldr	r2, [r4, #28]
 8013a6a:	68a3      	ldr	r3, [r4, #8]
 8013a6c:	442b      	add	r3, r5
 8013a6e:	60a3      	str	r3, [r4, #8]
 8013a70:	2a00      	cmp	r2, #0
 8013a72:	d1b4      	bne.n	80139de <read_submessage_format+0x56>
 8013a74:	e7b5      	b.n	80139e2 <read_submessage_format+0x5a>
 8013a76:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013a7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013a7c:	1a52      	subs	r2, r2, r1
 8013a7e:	eba8 0803 	sub.w	r8, r8, r3
 8013a82:	a80c      	add	r0, sp, #48	@ 0x30
 8013a84:	f7fa fc7a 	bl	800e37c <ucdr_init_buffer>
 8013a88:	44a8      	add	r8, r5
 8013a8a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013a8e:	a80c      	add	r0, sp, #48	@ 0x30
 8013a90:	f7fa fc48 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 8013a94:	fa1f f888 	uxth.w	r8, r8
 8013a98:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013aa0:	2108      	movs	r1, #8
 8013aa2:	f88d 1016 	strb.w	r1, [sp, #22]
 8013aa6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8013aaa:	9102      	str	r1, [sp, #8]
 8013aac:	ab06      	add	r3, sp, #24
 8013aae:	4632      	mov	r2, r6
 8013ab0:	9905      	ldr	r1, [sp, #20]
 8013ab2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8013ab6:	4638      	mov	r0, r7
 8013ab8:	47b0      	blx	r6
 8013aba:	2301      	movs	r3, #1
 8013abc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013ac0:	e7c4      	b.n	8013a4c <read_submessage_format+0xc4>
 8013ac2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013ac6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013ac8:	1a52      	subs	r2, r2, r1
 8013aca:	a80c      	add	r0, sp, #48	@ 0x30
 8013acc:	eba8 0803 	sub.w	r8, r8, r3
 8013ad0:	f7fa fc54 	bl	800e37c <ucdr_init_buffer>
 8013ad4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013ad8:	a80c      	add	r0, sp, #48	@ 0x30
 8013ada:	f7fa fc23 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 8013ade:	ab0c      	add	r3, sp, #48	@ 0x30
 8013ae0:	9300      	str	r3, [sp, #0]
 8013ae2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013ae6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013aea:	44a8      	add	r8, r5
 8013aec:	fa1f f888 	uxth.w	r8, r8
 8013af0:	f8cd 8004 	str.w	r8, [sp, #4]
 8013af4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013af8:	2107      	movs	r1, #7
 8013afa:	f88d 1016 	strb.w	r1, [sp, #22]
 8013afe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8013b02:	9102      	str	r1, [sp, #8]
 8013b04:	4632      	mov	r2, r6
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8013b0c:	9905      	ldr	r1, [sp, #20]
 8013b0e:	4638      	mov	r0, r7
 8013b10:	47b0      	blx	r6
 8013b12:	2301      	movs	r3, #1
 8013b14:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013b18:	e7a6      	b.n	8013a68 <read_submessage_format+0xe0>
 8013b1a:	bf00      	nop

08013b1c <on_get_fragmentation_info>:
 8013b1c:	b500      	push	{lr}
 8013b1e:	b08b      	sub	sp, #44	@ 0x2c
 8013b20:	4601      	mov	r1, r0
 8013b22:	2204      	movs	r2, #4
 8013b24:	a802      	add	r0, sp, #8
 8013b26:	f7fa fc29 	bl	800e37c <ucdr_init_buffer>
 8013b2a:	f10d 0305 	add.w	r3, sp, #5
 8013b2e:	f10d 0206 	add.w	r2, sp, #6
 8013b32:	a901      	add	r1, sp, #4
 8013b34:	a802      	add	r0, sp, #8
 8013b36:	f001 fe91 	bl	801585c <uxr_read_submessage_header>
 8013b3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013b3e:	2b0d      	cmp	r3, #13
 8013b40:	d003      	beq.n	8013b4a <on_get_fragmentation_info+0x2e>
 8013b42:	2000      	movs	r0, #0
 8013b44:	b00b      	add	sp, #44	@ 0x2c
 8013b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013b4e:	f013 0f02 	tst.w	r3, #2
 8013b52:	bf14      	ite	ne
 8013b54:	2002      	movne	r0, #2
 8013b56:	2001      	moveq	r0, #1
 8013b58:	b00b      	add	sp, #44	@ 0x2c
 8013b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b5e:	bf00      	nop

08013b60 <read_submessage_get_info>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	2500      	movs	r5, #0
 8013b64:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013b68:	4604      	mov	r4, r0
 8013b6a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013b6e:	460e      	mov	r6, r1
 8013b70:	a810      	add	r0, sp, #64	@ 0x40
 8013b72:	4629      	mov	r1, r5
 8013b74:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013b78:	f008 fee0 	bl	801c93c <memset>
 8013b7c:	a903      	add	r1, sp, #12
 8013b7e:	4630      	mov	r0, r6
 8013b80:	f002 ff40 	bl	8016a04 <uxr_deserialize_GET_INFO_Payload>
 8013b84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013b88:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	f001 f849 	bl	8014c24 <uxr_session_header_offset>
 8013b92:	462b      	mov	r3, r5
 8013b94:	9000      	str	r0, [sp, #0]
 8013b96:	220c      	movs	r2, #12
 8013b98:	a905      	add	r1, sp, #20
 8013b9a:	a808      	add	r0, sp, #32
 8013b9c:	f7fa fbdc 	bl	800e358 <ucdr_init_buffer_origin_offset>
 8013ba0:	a910      	add	r1, sp, #64	@ 0x40
 8013ba2:	a808      	add	r0, sp, #32
 8013ba4:	f002 ffa0 	bl	8016ae8 <uxr_serialize_INFO_Payload>
 8013ba8:	9b08      	ldr	r3, [sp, #32]
 8013baa:	462a      	mov	r2, r5
 8013bac:	4629      	mov	r1, r5
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f000 ffe2 	bl	8014b78 <uxr_stamp_session_header>
 8013bb4:	a808      	add	r0, sp, #32
 8013bb6:	f7fa fc0d 	bl	800e3d4 <ucdr_buffer_length>
 8013bba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013bbc:	4602      	mov	r2, r0
 8013bbe:	a905      	add	r1, sp, #20
 8013bc0:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013bc4:	47a0      	blx	r4
 8013bc6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8013bca:	bd70      	pop	{r4, r5, r6, pc}

08013bcc <write_submessage_acknack.isra.0>:
 8013bcc:	b570      	push	{r4, r5, r6, lr}
 8013bce:	b092      	sub	sp, #72	@ 0x48
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	460e      	mov	r6, r1
 8013bd4:	4614      	mov	r4, r2
 8013bd6:	f001 f825 	bl	8014c24 <uxr_session_header_offset>
 8013bda:	a905      	add	r1, sp, #20
 8013bdc:	9000      	str	r0, [sp, #0]
 8013bde:	2300      	movs	r3, #0
 8013be0:	a80a      	add	r0, sp, #40	@ 0x28
 8013be2:	2211      	movs	r2, #17
 8013be4:	f7fa fbb8 	bl	800e358 <ucdr_init_buffer_origin_offset>
 8013be8:	2218      	movs	r2, #24
 8013bea:	fb02 5404 	mla	r4, r2, r4, r5
 8013bee:	2300      	movs	r3, #0
 8013bf0:	2205      	movs	r2, #5
 8013bf2:	3450      	adds	r4, #80	@ 0x50
 8013bf4:	210a      	movs	r1, #10
 8013bf6:	a80a      	add	r0, sp, #40	@ 0x28
 8013bf8:	f001 fe16 	bl	8015828 <uxr_buffer_submessage_header>
 8013bfc:	a903      	add	r1, sp, #12
 8013bfe:	4620      	mov	r0, r4
 8013c00:	f006 fd18 	bl	801a634 <uxr_compute_acknack>
 8013c04:	ba40      	rev16	r0, r0
 8013c06:	f8ad 000e 	strh.w	r0, [sp, #14]
 8013c0a:	a903      	add	r1, sp, #12
 8013c0c:	a80a      	add	r0, sp, #40	@ 0x28
 8013c0e:	f88d 6010 	strb.w	r6, [sp, #16]
 8013c12:	f002 ffd9 	bl	8016bc8 <uxr_serialize_ACKNACK_Payload>
 8013c16:	2200      	movs	r2, #0
 8013c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	f000 ffab 	bl	8014b78 <uxr_stamp_session_header>
 8013c22:	a80a      	add	r0, sp, #40	@ 0x28
 8013c24:	f7fa fbd6 	bl	800e3d4 <ucdr_buffer_length>
 8013c28:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013c2a:	4602      	mov	r2, r0
 8013c2c:	a905      	add	r1, sp, #20
 8013c2e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013c32:	47a0      	blx	r4
 8013c34:	b012      	add	sp, #72	@ 0x48
 8013c36:	bd70      	pop	{r4, r5, r6, pc}

08013c38 <uxr_init_session>:
 8013c38:	b510      	push	{r4, lr}
 8013c3a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013c70 <uxr_init_session+0x38>
 8013c3e:	2300      	movs	r3, #0
 8013c40:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8013c44:	4604      	mov	r4, r0
 8013c46:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8013c4a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8013c4e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013c52:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013c56:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8013c5a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8013c5e:	2181      	movs	r1, #129	@ 0x81
 8013c60:	f000 fef6 	bl	8014a50 <uxr_init_session_info>
 8013c64:	f104 0008 	add.w	r0, r4, #8
 8013c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c6c:	f001 bcf8 	b.w	8015660 <uxr_init_stream_storage>
	...

08013c78 <uxr_set_status_callback>:
 8013c78:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop

08013c80 <uxr_set_topic_callback>:
 8013c80:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8013c84:	4770      	bx	lr
 8013c86:	bf00      	nop

08013c88 <uxr_set_request_callback>:
 8013c88:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop

08013c90 <uxr_set_reply_callback>:
 8013c90:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop

08013c98 <uxr_create_output_best_effort_stream>:
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	e9cd 2100 	strd	r2, r1, [sp]
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	f000 ffbf 	bl	8014c24 <uxr_session_header_offset>
 8013ca6:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013caa:	4603      	mov	r3, r0
 8013cac:	f104 0008 	add.w	r0, r4, #8
 8013cb0:	b004      	add	sp, #16
 8013cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cb6:	f001 bd1d 	b.w	80156f4 <uxr_add_output_best_effort_buffer>
 8013cba:	bf00      	nop

08013cbc <uxr_create_output_reliable_stream>:
 8013cbc:	b510      	push	{r4, lr}
 8013cbe:	b088      	sub	sp, #32
 8013cc0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013cc4:	4604      	mov	r4, r0
 8013cc6:	9303      	str	r3, [sp, #12]
 8013cc8:	f000 ffac 	bl	8014c24 <uxr_session_header_offset>
 8013ccc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013cd0:	9000      	str	r0, [sp, #0]
 8013cd2:	9905      	ldr	r1, [sp, #20]
 8013cd4:	f104 0008 	add.w	r0, r4, #8
 8013cd8:	f001 fd20 	bl	801571c <uxr_add_output_reliable_buffer>
 8013cdc:	2200      	movs	r2, #0
 8013cde:	b2c3      	uxtb	r3, r0
 8013ce0:	f363 0207 	bfi	r2, r3, #0, #8
 8013ce4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013ce8:	f363 220f 	bfi	r2, r3, #8, #8
 8013cec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013cf0:	f363 4217 	bfi	r2, r3, #16, #8
 8013cf4:	0e03      	lsrs	r3, r0, #24
 8013cf6:	f363 621f 	bfi	r2, r3, #24, #8
 8013cfa:	4610      	mov	r0, r2
 8013cfc:	b008      	add	sp, #32
 8013cfe:	bd10      	pop	{r4, pc}

08013d00 <uxr_create_input_best_effort_stream>:
 8013d00:	b082      	sub	sp, #8
 8013d02:	3008      	adds	r0, #8
 8013d04:	b002      	add	sp, #8
 8013d06:	f001 bd23 	b.w	8015750 <uxr_add_input_best_effort_buffer>
 8013d0a:	bf00      	nop

08013d0c <uxr_create_input_reliable_stream>:
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	4c0b      	ldr	r4, [pc, #44]	@ (8013d40 <uxr_create_input_reliable_stream+0x34>)
 8013d12:	9400      	str	r4, [sp, #0]
 8013d14:	3008      	adds	r0, #8
 8013d16:	f001 fd31 	bl	801577c <uxr_add_input_reliable_buffer>
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	b2c3      	uxtb	r3, r0
 8013d1e:	f363 0207 	bfi	r2, r3, #0, #8
 8013d22:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013d26:	f363 220f 	bfi	r2, r3, #8, #8
 8013d2a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013d2e:	f363 4217 	bfi	r2, r3, #16, #8
 8013d32:	0e03      	lsrs	r3, r0, #24
 8013d34:	f363 621f 	bfi	r2, r3, #24, #8
 8013d38:	4610      	mov	r0, r2
 8013d3a:	b004      	add	sp, #16
 8013d3c:	bd10      	pop	{r4, pc}
 8013d3e:	bf00      	nop
 8013d40:	08013b1d 	.word	0x08013b1d

08013d44 <uxr_epoch_nanos>:
 8013d44:	b510      	push	{r4, lr}
 8013d46:	4604      	mov	r4, r0
 8013d48:	f001 fdce 	bl	80158e8 <uxr_nanos>
 8013d4c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013d50:	1ac0      	subs	r0, r0, r3
 8013d52:	eb61 0102 	sbc.w	r1, r1, r2
 8013d56:	bd10      	pop	{r4, pc}

08013d58 <uxr_flash_output_streams>:
 8013d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d5c:	7e03      	ldrb	r3, [r0, #24]
 8013d5e:	b084      	sub	sp, #16
 8013d60:	4604      	mov	r4, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d035      	beq.n	8013dd2 <uxr_flash_output_streams+0x7a>
 8013d66:	f04f 0900 	mov.w	r9, #0
 8013d6a:	4648      	mov	r0, r9
 8013d6c:	f10d 0802 	add.w	r8, sp, #2
 8013d70:	af03      	add	r7, sp, #12
 8013d72:	ae02      	add	r6, sp, #8
 8013d74:	e006      	b.n	8013d84 <uxr_flash_output_streams+0x2c>
 8013d76:	7e23      	ldrb	r3, [r4, #24]
 8013d78:	f109 0901 	add.w	r9, r9, #1
 8013d7c:	fa5f f089 	uxtb.w	r0, r9
 8013d80:	4283      	cmp	r3, r0
 8013d82:	d926      	bls.n	8013dd2 <uxr_flash_output_streams+0x7a>
 8013d84:	2201      	movs	r2, #1
 8013d86:	4611      	mov	r1, r2
 8013d88:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8013d8c:	f001 fc14 	bl	80155b8 <uxr_stream_id>
 8013d90:	3508      	adds	r5, #8
 8013d92:	4684      	mov	ip, r0
 8013d94:	4643      	mov	r3, r8
 8013d96:	463a      	mov	r2, r7
 8013d98:	4631      	mov	r1, r6
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	f8cd c004 	str.w	ip, [sp, #4]
 8013da0:	f006 fcce 	bl	801a740 <uxr_prepare_best_effort_buffer_to_send>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	d0e6      	beq.n	8013d76 <uxr_flash_output_streams+0x1e>
 8013da8:	9b02      	ldr	r3, [sp, #8]
 8013daa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013dae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013db2:	4620      	mov	r0, r4
 8013db4:	f000 fee0 	bl	8014b78 <uxr_stamp_session_header>
 8013db8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013dba:	9a03      	ldr	r2, [sp, #12]
 8013dbc:	685d      	ldr	r5, [r3, #4]
 8013dbe:	6818      	ldr	r0, [r3, #0]
 8013dc0:	9902      	ldr	r1, [sp, #8]
 8013dc2:	47a8      	blx	r5
 8013dc4:	f109 0901 	add.w	r9, r9, #1
 8013dc8:	7e23      	ldrb	r3, [r4, #24]
 8013dca:	fa5f f089 	uxtb.w	r0, r9
 8013dce:	4283      	cmp	r3, r0
 8013dd0:	d8d8      	bhi.n	8013d84 <uxr_flash_output_streams+0x2c>
 8013dd2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013dd6:	b38b      	cbz	r3, 8013e3c <uxr_flash_output_streams+0xe4>
 8013dd8:	f04f 0900 	mov.w	r9, #0
 8013ddc:	f10d 0802 	add.w	r8, sp, #2
 8013de0:	af03      	add	r7, sp, #12
 8013de2:	ae02      	add	r6, sp, #8
 8013de4:	4648      	mov	r0, r9
 8013de6:	2201      	movs	r2, #1
 8013de8:	2102      	movs	r1, #2
 8013dea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8013dee:	f001 fbe3 	bl	80155b8 <uxr_stream_id>
 8013df2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013df6:	3520      	adds	r5, #32
 8013df8:	9001      	str	r0, [sp, #4]
 8013dfa:	e00d      	b.n	8013e18 <uxr_flash_output_streams+0xc0>
 8013dfc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013e00:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013e04:	9b02      	ldr	r3, [sp, #8]
 8013e06:	f000 feb7 	bl	8014b78 <uxr_stamp_session_header>
 8013e0a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013e0c:	9a03      	ldr	r2, [sp, #12]
 8013e0e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8013e12:	9902      	ldr	r1, [sp, #8]
 8013e14:	6818      	ldr	r0, [r3, #0]
 8013e16:	47d0      	blx	sl
 8013e18:	4643      	mov	r3, r8
 8013e1a:	463a      	mov	r2, r7
 8013e1c:	4631      	mov	r1, r6
 8013e1e:	4628      	mov	r0, r5
 8013e20:	f006 feac 	bl	801ab7c <uxr_prepare_next_reliable_buffer_to_send>
 8013e24:	4603      	mov	r3, r0
 8013e26:	4620      	mov	r0, r4
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1e7      	bne.n	8013dfc <uxr_flash_output_streams+0xa4>
 8013e2c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013e30:	f109 0901 	add.w	r9, r9, #1
 8013e34:	fa5f f089 	uxtb.w	r0, r9
 8013e38:	4283      	cmp	r3, r0
 8013e3a:	d8d4      	bhi.n	8013de6 <uxr_flash_output_streams+0x8e>
 8013e3c:	b004      	add	sp, #16
 8013e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e42:	bf00      	nop

08013e44 <read_submessage_info>:
 8013e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e48:	460d      	mov	r5, r1
 8013e4a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8013e4e:	4669      	mov	r1, sp
 8013e50:	4607      	mov	r7, r0
 8013e52:	4628      	mov	r0, r5
 8013e54:	f002 fcd0 	bl	80167f8 <uxr_deserialize_BaseObjectReply>
 8013e58:	a902      	add	r1, sp, #8
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013e62:	f7f8 ff91 	bl	800cd88 <ucdr_deserialize_bool>
 8013e66:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013e6a:	4004      	ands	r4, r0
 8013e6c:	b2e4      	uxtb	r4, r4
 8013e6e:	b95b      	cbnz	r3, 8013e88 <read_submessage_info+0x44>
 8013e70:	a987      	add	r1, sp, #540	@ 0x21c
 8013e72:	4628      	mov	r0, r5
 8013e74:	f7f8 ff88 	bl	800cd88 <ucdr_deserialize_bool>
 8013e78:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8013e7c:	4606      	mov	r6, r0
 8013e7e:	b94b      	cbnz	r3, 8013e94 <read_submessage_info+0x50>
 8013e80:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e88:	a903      	add	r1, sp, #12
 8013e8a:	4628      	mov	r0, r5
 8013e8c:	f002 fb5c 	bl	8016548 <uxr_deserialize_ObjectVariant>
 8013e90:	4004      	ands	r4, r0
 8013e92:	e7ed      	b.n	8013e70 <read_submessage_info+0x2c>
 8013e94:	a988      	add	r1, sp, #544	@ 0x220
 8013e96:	4628      	mov	r0, r5
 8013e98:	f7f8 ffa4 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8013e9c:	4234      	tst	r4, r6
 8013e9e:	d0ef      	beq.n	8013e80 <read_submessage_info+0x3c>
 8013ea0:	2800      	cmp	r0, #0
 8013ea2:	d0ed      	beq.n	8013e80 <read_submessage_info+0x3c>
 8013ea4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8013ea8:	2b0d      	cmp	r3, #13
 8013eaa:	d1e9      	bne.n	8013e80 <read_submessage_info+0x3c>
 8013eac:	a98a      	add	r1, sp, #552	@ 0x228
 8013eae:	4628      	mov	r0, r5
 8013eb0:	f7f9 fd3e 	bl	800d930 <ucdr_deserialize_int16_t>
 8013eb4:	b140      	cbz	r0, 8013ec8 <read_submessage_info+0x84>
 8013eb6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	dd07      	ble.n	8013ece <read_submessage_info+0x8a>
 8013ebe:	f1b8 0f00 	cmp.w	r8, #0
 8013ec2:	bf14      	ite	ne
 8013ec4:	2001      	movne	r0, #1
 8013ec6:	2002      	moveq	r0, #2
 8013ec8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8013ecc:	e7d8      	b.n	8013e80 <read_submessage_info+0x3c>
 8013ece:	2000      	movs	r0, #0
 8013ed0:	e7fa      	b.n	8013ec8 <read_submessage_info+0x84>
 8013ed2:	bf00      	nop

08013ed4 <read_submessage_list>:
 8013ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed8:	b097      	sub	sp, #92	@ 0x5c
 8013eda:	4ec1      	ldr	r6, [pc, #772]	@ (80141e0 <read_submessage_list+0x30c>)
 8013edc:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ede:	4604      	mov	r4, r0
 8013ee0:	460d      	mov	r5, r1
 8013ee2:	f04f 0801 	mov.w	r8, #1
 8013ee6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8013eea:	aa0c      	add	r2, sp, #48	@ 0x30
 8013eec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8013ef0:	4628      	mov	r0, r5
 8013ef2:	f001 fcb3 	bl	801585c <uxr_read_submessage_header>
 8013ef6:	2800      	cmp	r0, #0
 8013ef8:	f000 813e 	beq.w	8014178 <read_submessage_list+0x2a4>
 8013efc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8013f00:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013f04:	3b02      	subs	r3, #2
 8013f06:	2b0d      	cmp	r3, #13
 8013f08:	d8ed      	bhi.n	8013ee6 <read_submessage_list+0x12>
 8013f0a:	a101      	add	r1, pc, #4	@ (adr r1, 8013f10 <read_submessage_list+0x3c>)
 8013f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013f10:	0801416f 	.word	0x0801416f
 8013f14:	08013ee7 	.word	0x08013ee7
 8013f18:	0801415f 	.word	0x0801415f
 8013f1c:	080140fd 	.word	0x080140fd
 8013f20:	080140f3 	.word	0x080140f3
 8013f24:	08013ee7 	.word	0x08013ee7
 8013f28:	08013ee7 	.word	0x08013ee7
 8013f2c:	08014053 	.word	0x08014053
 8013f30:	08013fe3 	.word	0x08013fe3
 8013f34:	08013fa3 	.word	0x08013fa3
 8013f38:	08013ee7 	.word	0x08013ee7
 8013f3c:	08013ee7 	.word	0x08013ee7
 8013f40:	08013ee7 	.word	0x08013ee7
 8013f44:	08013f49 	.word	0x08013f49
 8013f48:	a910      	add	r1, sp, #64	@ 0x40
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f002 fe8c 	bl	8016c68 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013f50:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013f54:	f1b9 0f00 	cmp.w	r9, #0
 8013f58:	f000 8116 	beq.w	8014188 <read_submessage_list+0x2b4>
 8013f5c:	f001 fcc4 	bl	80158e8 <uxr_nanos>
 8013f60:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8013f62:	4602      	mov	r2, r0
 8013f64:	460b      	mov	r3, r1
 8013f66:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013f68:	2100      	movs	r1, #0
 8013f6a:	468c      	mov	ip, r1
 8013f6c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013f70:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013f74:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013f76:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8013f78:	468c      	mov	ip, r1
 8013f7a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013f7e:	46e2      	mov	sl, ip
 8013f80:	46bc      	mov	ip, r7
 8013f82:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013f86:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013f8a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8013f8e:	e9cd 7100 	strd	r7, r1, [sp]
 8013f92:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013f96:	9106      	str	r1, [sp, #24]
 8013f98:	4620      	mov	r0, r4
 8013f9a:	47c8      	blx	r9
 8013f9c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8013fa0:	e7a1      	b.n	8013ee6 <read_submessage_list+0x12>
 8013fa2:	a910      	add	r1, sp, #64	@ 0x40
 8013fa4:	4628      	mov	r0, r5
 8013fa6:	f002 fe4d 	bl	8016c44 <uxr_deserialize_HEARTBEAT_Payload>
 8013faa:	2100      	movs	r1, #0
 8013fac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013fb0:	f001 fb2c 	bl	801560c <uxr_stream_id_from_raw>
 8013fb4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013fb8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013fba:	4639      	mov	r1, r7
 8013fbc:	f104 0008 	add.w	r0, r4, #8
 8013fc0:	f001 fc12 	bl	80157e8 <uxr_get_input_reliable_stream>
 8013fc4:	2800      	cmp	r0, #0
 8013fc6:	d08e      	beq.n	8013ee6 <read_submessage_list+0x12>
 8013fc8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8013fcc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013fd0:	f006 fb24 	bl	801a61c <uxr_process_heartbeat>
 8013fd4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013fd8:	463a      	mov	r2, r7
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f7ff fdf6 	bl	8013bcc <write_submessage_acknack.isra.0>
 8013fe0:	e781      	b.n	8013ee6 <read_submessage_list+0x12>
 8013fe2:	a910      	add	r1, sp, #64	@ 0x40
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f002 fe05 	bl	8016bf4 <uxr_deserialize_ACKNACK_Payload>
 8013fea:	2100      	movs	r1, #0
 8013fec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013ff0:	f001 fb0c 	bl	801560c <uxr_stream_id_from_raw>
 8013ff4:	900d      	str	r0, [sp, #52]	@ 0x34
 8013ff6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013ffa:	f104 0008 	add.w	r0, r4, #8
 8013ffe:	f001 fbdf 	bl	80157c0 <uxr_get_output_reliable_stream>
 8014002:	4607      	mov	r7, r0
 8014004:	2800      	cmp	r0, #0
 8014006:	f43f af6e 	beq.w	8013ee6 <read_submessage_list+0x12>
 801400a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801400e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8014012:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8014016:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801401a:	b289      	uxth	r1, r1
 801401c:	f006 fe58 	bl	801acd0 <uxr_process_acknack>
 8014020:	4638      	mov	r0, r7
 8014022:	f006 fe15 	bl	801ac50 <uxr_begin_output_nack_buffer_it>
 8014026:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801402a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801402e:	e006      	b.n	801403e <read_submessage_list+0x16a>
 8014030:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014034:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014038:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801403a:	6818      	ldr	r0, [r3, #0]
 801403c:	47c8      	blx	r9
 801403e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8014042:	aa0f      	add	r2, sp, #60	@ 0x3c
 8014044:	4651      	mov	r1, sl
 8014046:	4638      	mov	r0, r7
 8014048:	f006 fe04 	bl	801ac54 <uxr_next_reliable_nack_buffer_to_send>
 801404c:	2800      	cmp	r0, #0
 801404e:	d1ef      	bne.n	8014030 <read_submessage_list+0x15c>
 8014050:	e749      	b.n	8013ee6 <read_submessage_list+0x12>
 8014052:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8014056:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801405a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801405e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8014062:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8014066:	4651      	mov	r1, sl
 8014068:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801406c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8014070:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8014074:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8014078:	4628      	mov	r0, r5
 801407a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801407e:	f002 fb05 	bl	801668c <uxr_deserialize_BaseObjectRequest>
 8014082:	4650      	mov	r0, sl
 8014084:	a90f      	add	r1, sp, #60	@ 0x3c
 8014086:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801408a:	f000 fdf1 	bl	8014c70 <uxr_parse_base_object_request>
 801408e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8014092:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8014094:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8014098:	9110      	str	r1, [sp, #64]	@ 0x40
 801409a:	3f04      	subs	r7, #4
 801409c:	f009 090e 	and.w	r9, r9, #14
 80140a0:	b2bf      	uxth	r7, r7
 80140a2:	f1bb 0f00 	cmp.w	fp, #0
 80140a6:	d006      	beq.n	80140b6 <read_submessage_list+0x1e2>
 80140a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80140ac:	9300      	str	r3, [sp, #0]
 80140ae:	4652      	mov	r2, sl
 80140b0:	2300      	movs	r3, #0
 80140b2:	4620      	mov	r0, r4
 80140b4:	47d8      	blx	fp
 80140b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80140b8:	b16a      	cbz	r2, 80140d6 <read_submessage_list+0x202>
 80140ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80140bc:	2100      	movs	r1, #0
 80140be:	3802      	subs	r0, #2
 80140c0:	e002      	b.n	80140c8 <read_submessage_list+0x1f4>
 80140c2:	3101      	adds	r1, #1
 80140c4:	4291      	cmp	r1, r2
 80140c6:	d006      	beq.n	80140d6 <read_submessage_list+0x202>
 80140c8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80140cc:	4553      	cmp	r3, sl
 80140ce:	d1f8      	bne.n	80140c2 <read_submessage_list+0x1ee>
 80140d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80140d2:	2200      	movs	r2, #0
 80140d4:	545a      	strb	r2, [r3, r1]
 80140d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80140da:	9102      	str	r1, [sp, #8]
 80140dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80140de:	9101      	str	r1, [sp, #4]
 80140e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80140e2:	9100      	str	r1, [sp, #0]
 80140e4:	464b      	mov	r3, r9
 80140e6:	463a      	mov	r2, r7
 80140e8:	4629      	mov	r1, r5
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7ff fc4c 	bl	8013988 <read_submessage_format>
 80140f0:	e6f9      	b.n	8013ee6 <read_submessage_list+0x12>
 80140f2:	4629      	mov	r1, r5
 80140f4:	4620      	mov	r0, r4
 80140f6:	f7ff fea5 	bl	8013e44 <read_submessage_info>
 80140fa:	e6f4      	b.n	8013ee6 <read_submessage_list+0x12>
 80140fc:	2a00      	cmp	r2, #0
 80140fe:	d03e      	beq.n	801417e <read_submessage_list+0x2aa>
 8014100:	a910      	add	r1, sp, #64	@ 0x40
 8014102:	4628      	mov	r0, r5
 8014104:	f002 fcd2 	bl	8016aac <uxr_deserialize_STATUS_Payload>
 8014108:	a90e      	add	r1, sp, #56	@ 0x38
 801410a:	aa0d      	add	r2, sp, #52	@ 0x34
 801410c:	a810      	add	r0, sp, #64	@ 0x40
 801410e:	f000 fdaf 	bl	8014c70 <uxr_parse_base_object_request>
 8014112:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8014116:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014118:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801411c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8014120:	910f      	str	r1, [sp, #60]	@ 0x3c
 8014122:	f1ba 0f00 	cmp.w	sl, #0
 8014126:	d006      	beq.n	8014136 <read_submessage_list+0x262>
 8014128:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	463a      	mov	r2, r7
 8014130:	464b      	mov	r3, r9
 8014132:	4620      	mov	r0, r4
 8014134:	47d0      	blx	sl
 8014136:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8014138:	2a00      	cmp	r2, #0
 801413a:	f43f aed4 	beq.w	8013ee6 <read_submessage_list+0x12>
 801413e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8014140:	2100      	movs	r1, #0
 8014142:	3802      	subs	r0, #2
 8014144:	e003      	b.n	801414e <read_submessage_list+0x27a>
 8014146:	3101      	adds	r1, #1
 8014148:	4291      	cmp	r1, r2
 801414a:	f43f aecc 	beq.w	8013ee6 <read_submessage_list+0x12>
 801414e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014152:	42bb      	cmp	r3, r7
 8014154:	d1f7      	bne.n	8014146 <read_submessage_list+0x272>
 8014156:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8014158:	f803 9001 	strb.w	r9, [r3, r1]
 801415c:	e6c3      	b.n	8013ee6 <read_submessage_list+0x12>
 801415e:	2a00      	cmp	r2, #0
 8014160:	f47f aec1 	bne.w	8013ee6 <read_submessage_list+0x12>
 8014164:	4629      	mov	r1, r5
 8014166:	4620      	mov	r0, r4
 8014168:	f000 fcc8 	bl	8014afc <uxr_read_create_session_status>
 801416c:	e6bb      	b.n	8013ee6 <read_submessage_list+0x12>
 801416e:	4629      	mov	r1, r5
 8014170:	4620      	mov	r0, r4
 8014172:	f7ff fcf5 	bl	8013b60 <read_submessage_get_info>
 8014176:	e6b6      	b.n	8013ee6 <read_submessage_list+0x12>
 8014178:	b017      	add	sp, #92	@ 0x5c
 801417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801417e:	4629      	mov	r1, r5
 8014180:	4620      	mov	r0, r4
 8014182:	f000 fcc7 	bl	8014b14 <uxr_read_delete_session_status>
 8014186:	e6ae      	b.n	8013ee6 <read_submessage_list+0x12>
 8014188:	f001 fbae 	bl	80158e8 <uxr_nanos>
 801418c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801418e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8014190:	464f      	mov	r7, r9
 8014192:	fbc3 2706 	smlal	r2, r7, r3, r6
 8014196:	1812      	adds	r2, r2, r0
 8014198:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801419a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801419c:	eb47 0101 	adc.w	r1, r7, r1
 80141a0:	464f      	mov	r7, r9
 80141a2:	fbc3 0706 	smlal	r0, r7, r3, r6
 80141a6:	463b      	mov	r3, r7
 80141a8:	4684      	mov	ip, r0
 80141aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80141ae:	fbc7 0906 	smlal	r0, r9, r7, r6
 80141b2:	eb1c 0c00 	adds.w	ip, ip, r0
 80141b6:	464f      	mov	r7, r9
 80141b8:	eb43 0307 	adc.w	r3, r3, r7
 80141bc:	ebb2 0c0c 	subs.w	ip, r2, ip
 80141c0:	eb61 0303 	sbc.w	r3, r1, r3
 80141c4:	0fda      	lsrs	r2, r3, #31
 80141c6:	eb12 020c 	adds.w	r2, r2, ip
 80141ca:	f143 0300 	adc.w	r3, r3, #0
 80141ce:	0852      	lsrs	r2, r2, #1
 80141d0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80141d4:	105b      	asrs	r3, r3, #1
 80141d6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80141da:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80141de:	e6dd      	b.n	8013f9c <read_submessage_list+0xc8>
 80141e0:	3b9aca00 	.word	0x3b9aca00

080141e4 <listen_message_reliably>:
 80141e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e8:	1e0b      	subs	r3, r1, #0
 80141ea:	b09d      	sub	sp, #116	@ 0x74
 80141ec:	bfb8      	it	lt
 80141ee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80141f2:	4680      	mov	r8, r0
 80141f4:	9305      	str	r3, [sp, #20]
 80141f6:	f001 fb5d 	bl	80158b4 <uxr_millis>
 80141fa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80141fe:	4681      	mov	r9, r0
 8014200:	2a00      	cmp	r2, #0
 8014202:	f000 80a1 	beq.w	8014348 <listen_message_reliably+0x164>
 8014206:	2600      	movs	r6, #0
 8014208:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801420c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8014210:	9303      	str	r3, [sp, #12]
 8014212:	4630      	mov	r0, r6
 8014214:	460f      	mov	r7, r1
 8014216:	e00f      	b.n	8014238 <listen_message_reliably+0x54>
 8014218:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801421c:	9903      	ldr	r1, [sp, #12]
 801421e:	455a      	cmp	r2, fp
 8014220:	f106 0601 	add.w	r6, r6, #1
 8014224:	eb73 0101 	sbcs.w	r1, r3, r1
 8014228:	b2f0      	uxtb	r0, r6
 801422a:	da01      	bge.n	8014230 <listen_message_reliably+0x4c>
 801422c:	4693      	mov	fp, r2
 801422e:	9303      	str	r3, [sp, #12]
 8014230:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8014234:	4283      	cmp	r3, r0
 8014236:	d960      	bls.n	80142fa <listen_message_reliably+0x116>
 8014238:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801423c:	2102      	movs	r1, #2
 801423e:	2201      	movs	r2, #1
 8014240:	f001 f9ba 	bl	80155b8 <uxr_stream_id>
 8014244:	00e4      	lsls	r4, r4, #3
 8014246:	f104 0520 	add.w	r5, r4, #32
 801424a:	4445      	add	r5, r8
 801424c:	4601      	mov	r1, r0
 801424e:	463b      	mov	r3, r7
 8014250:	464a      	mov	r2, r9
 8014252:	4628      	mov	r0, r5
 8014254:	9109      	str	r1, [sp, #36]	@ 0x24
 8014256:	f006 fcd1 	bl	801abfc <uxr_update_output_stream_heartbeat_timestamp>
 801425a:	eb08 0304 	add.w	r3, r8, r4
 801425e:	2800      	cmp	r0, #0
 8014260:	d0da      	beq.n	8014218 <listen_message_reliably+0x34>
 8014262:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014266:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801426a:	9304      	str	r3, [sp, #16]
 801426c:	4640      	mov	r0, r8
 801426e:	f000 fcd9 	bl	8014c24 <uxr_session_header_offset>
 8014272:	3501      	adds	r5, #1
 8014274:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8014278:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801427c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014280:	2300      	movs	r3, #0
 8014282:	2211      	movs	r2, #17
 8014284:	9000      	str	r0, [sp, #0]
 8014286:	a90c      	add	r1, sp, #48	@ 0x30
 8014288:	4650      	mov	r0, sl
 801428a:	f7fa f865 	bl	800e358 <ucdr_init_buffer_origin_offset>
 801428e:	2300      	movs	r3, #0
 8014290:	2205      	movs	r2, #5
 8014292:	210b      	movs	r1, #11
 8014294:	4650      	mov	r0, sl
 8014296:	f001 fac7 	bl	8015828 <uxr_buffer_submessage_header>
 801429a:	8968      	ldrh	r0, [r5, #10]
 801429c:	2101      	movs	r1, #1
 801429e:	f006 fd6f 	bl	801ad80 <uxr_seq_num_add>
 80142a2:	892b      	ldrh	r3, [r5, #8]
 80142a4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80142a8:	4602      	mov	r2, r0
 80142aa:	9b04      	ldr	r3, [sp, #16]
 80142ac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80142b0:	a90a      	add	r1, sp, #40	@ 0x28
 80142b2:	4650      	mov	r0, sl
 80142b4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80142b8:	f002 fcb0 	bl	8016c1c <uxr_serialize_HEARTBEAT_Payload>
 80142bc:	2200      	movs	r2, #0
 80142be:	4611      	mov	r1, r2
 80142c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80142c2:	4640      	mov	r0, r8
 80142c4:	f000 fc58 	bl	8014b78 <uxr_stamp_session_header>
 80142c8:	4650      	mov	r0, sl
 80142ca:	f7fa f883 	bl	800e3d4 <ucdr_buffer_length>
 80142ce:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80142d2:	4602      	mov	r2, r0
 80142d4:	a90c      	add	r1, sp, #48	@ 0x30
 80142d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80142da:	4444      	add	r4, r8
 80142dc:	47a8      	blx	r5
 80142de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80142e2:	9903      	ldr	r1, [sp, #12]
 80142e4:	455a      	cmp	r2, fp
 80142e6:	f106 0601 	add.w	r6, r6, #1
 80142ea:	eb73 0101 	sbcs.w	r1, r3, r1
 80142ee:	b2f0      	uxtb	r0, r6
 80142f0:	db9c      	blt.n	801422c <listen_message_reliably+0x48>
 80142f2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80142f6:	4283      	cmp	r3, r0
 80142f8:	d89e      	bhi.n	8014238 <listen_message_reliably+0x54>
 80142fa:	9a03      	ldr	r2, [sp, #12]
 80142fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014300:	429a      	cmp	r2, r3
 8014302:	bf08      	it	eq
 8014304:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8014308:	d01e      	beq.n	8014348 <listen_message_reliably+0x164>
 801430a:	ebab 0309 	sub.w	r3, fp, r9
 801430e:	9905      	ldr	r1, [sp, #20]
 8014310:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8014314:	2b00      	cmp	r3, #0
 8014316:	bf08      	it	eq
 8014318:	2301      	moveq	r3, #1
 801431a:	4299      	cmp	r1, r3
 801431c:	bfa8      	it	ge
 801431e:	4619      	movge	r1, r3
 8014320:	6894      	ldr	r4, [r2, #8]
 8014322:	6810      	ldr	r0, [r2, #0]
 8014324:	4689      	mov	r9, r1
 8014326:	460b      	mov	r3, r1
 8014328:	aa08      	add	r2, sp, #32
 801432a:	a907      	add	r1, sp, #28
 801432c:	47a0      	blx	r4
 801432e:	b968      	cbnz	r0, 801434c <listen_message_reliably+0x168>
 8014330:	9b05      	ldr	r3, [sp, #20]
 8014332:	eba3 0309 	sub.w	r3, r3, r9
 8014336:	2b00      	cmp	r3, #0
 8014338:	9305      	str	r3, [sp, #20]
 801433a:	f73f af5c 	bgt.w	80141f6 <listen_message_reliably+0x12>
 801433e:	4604      	mov	r4, r0
 8014340:	4620      	mov	r0, r4
 8014342:	b01d      	add	sp, #116	@ 0x74
 8014344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014348:	9b05      	ldr	r3, [sp, #20]
 801434a:	e7e0      	b.n	801430e <listen_message_reliably+0x12a>
 801434c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014350:	4604      	mov	r4, r0
 8014352:	a80c      	add	r0, sp, #48	@ 0x30
 8014354:	f7fa f812 	bl	800e37c <ucdr_init_buffer>
 8014358:	2500      	movs	r5, #0
 801435a:	f10d 031a 	add.w	r3, sp, #26
 801435e:	aa06      	add	r2, sp, #24
 8014360:	a90c      	add	r1, sp, #48	@ 0x30
 8014362:	4640      	mov	r0, r8
 8014364:	f88d 5018 	strb.w	r5, [sp, #24]
 8014368:	f000 fc1a 	bl	8014ba0 <uxr_read_session_header>
 801436c:	b918      	cbnz	r0, 8014376 <listen_message_reliably+0x192>
 801436e:	4620      	mov	r0, r4
 8014370:	b01d      	add	sp, #116	@ 0x74
 8014372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014376:	4629      	mov	r1, r5
 8014378:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801437c:	f001 f946 	bl	801560c <uxr_stream_id_from_raw>
 8014380:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8014384:	2d01      	cmp	r5, #1
 8014386:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801438a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801438e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014392:	d04b      	beq.n	801442c <listen_message_reliably+0x248>
 8014394:	2d02      	cmp	r5, #2
 8014396:	d00f      	beq.n	80143b8 <listen_message_reliably+0x1d4>
 8014398:	2d00      	cmp	r5, #0
 801439a:	d1e8      	bne.n	801436e <listen_message_reliably+0x18a>
 801439c:	4629      	mov	r1, r5
 801439e:	4628      	mov	r0, r5
 80143a0:	f001 f934 	bl	801560c <uxr_stream_id_from_raw>
 80143a4:	a90c      	add	r1, sp, #48	@ 0x30
 80143a6:	4602      	mov	r2, r0
 80143a8:	4640      	mov	r0, r8
 80143aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80143ac:	f7ff fd92 	bl	8013ed4 <read_submessage_list>
 80143b0:	4620      	mov	r0, r4
 80143b2:	b01d      	add	sp, #116	@ 0x74
 80143b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143b8:	4631      	mov	r1, r6
 80143ba:	f108 0008 	add.w	r0, r8, #8
 80143be:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80143c2:	f001 fa11 	bl	80157e8 <uxr_get_input_reliable_stream>
 80143c6:	4607      	mov	r7, r0
 80143c8:	b338      	cbz	r0, 801441a <listen_message_reliably+0x236>
 80143ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80143cc:	9203      	str	r2, [sp, #12]
 80143ce:	a80c      	add	r0, sp, #48	@ 0x30
 80143d0:	f7fa f804 	bl	800e3dc <ucdr_buffer_remaining>
 80143d4:	4603      	mov	r3, r0
 80143d6:	f10d 0019 	add.w	r0, sp, #25
 80143da:	9000      	str	r0, [sp, #0]
 80143dc:	9a03      	ldr	r2, [sp, #12]
 80143de:	4651      	mov	r1, sl
 80143e0:	4638      	mov	r0, r7
 80143e2:	f006 f821 	bl	801a428 <uxr_receive_reliable_message>
 80143e6:	b1c0      	cbz	r0, 801441a <listen_message_reliably+0x236>
 80143e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80143ec:	b393      	cbz	r3, 8014454 <listen_message_reliably+0x270>
 80143ee:	ad14      	add	r5, sp, #80	@ 0x50
 80143f0:	f04f 0a02 	mov.w	sl, #2
 80143f4:	e00a      	b.n	801440c <listen_message_reliably+0x228>
 80143f6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80143fa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80143fe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8014402:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014404:	4629      	mov	r1, r5
 8014406:	4640      	mov	r0, r8
 8014408:	f7ff fd64 	bl	8013ed4 <read_submessage_list>
 801440c:	2204      	movs	r2, #4
 801440e:	4629      	mov	r1, r5
 8014410:	4638      	mov	r0, r7
 8014412:	f006 f889 	bl	801a528 <uxr_next_input_reliable_buffer_available>
 8014416:	2800      	cmp	r0, #0
 8014418:	d1ed      	bne.n	80143f6 <listen_message_reliably+0x212>
 801441a:	4640      	mov	r0, r8
 801441c:	4632      	mov	r2, r6
 801441e:	4649      	mov	r1, r9
 8014420:	f7ff fbd4 	bl	8013bcc <write_submessage_acknack.isra.0>
 8014424:	4620      	mov	r0, r4
 8014426:	b01d      	add	sp, #116	@ 0x74
 8014428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801442c:	4631      	mov	r1, r6
 801442e:	f108 0008 	add.w	r0, r8, #8
 8014432:	f001 f9cf 	bl	80157d4 <uxr_get_input_best_effort_stream>
 8014436:	2800      	cmp	r0, #0
 8014438:	d099      	beq.n	801436e <listen_message_reliably+0x18a>
 801443a:	4651      	mov	r1, sl
 801443c:	f005 ff60 	bl	801a300 <uxr_receive_best_effort_message>
 8014440:	2800      	cmp	r0, #0
 8014442:	d094      	beq.n	801436e <listen_message_reliably+0x18a>
 8014444:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014448:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801444a:	a90c      	add	r1, sp, #48	@ 0x30
 801444c:	4640      	mov	r0, r8
 801444e:	f7ff fd41 	bl	8013ed4 <read_submessage_list>
 8014452:	e78c      	b.n	801436e <listen_message_reliably+0x18a>
 8014454:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014458:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801445a:	a90c      	add	r1, sp, #48	@ 0x30
 801445c:	4640      	mov	r0, r8
 801445e:	f7ff fd39 	bl	8013ed4 <read_submessage_list>
 8014462:	e7c4      	b.n	80143ee <listen_message_reliably+0x20a>

08014464 <uxr_run_session_timeout>:
 8014464:	b570      	push	{r4, r5, r6, lr}
 8014466:	4604      	mov	r4, r0
 8014468:	460d      	mov	r5, r1
 801446a:	f001 fa23 	bl	80158b4 <uxr_millis>
 801446e:	4606      	mov	r6, r0
 8014470:	4620      	mov	r0, r4
 8014472:	f7ff fc71 	bl	8013d58 <uxr_flash_output_streams>
 8014476:	4629      	mov	r1, r5
 8014478:	4620      	mov	r0, r4
 801447a:	f7ff feb3 	bl	80141e4 <listen_message_reliably>
 801447e:	f001 fa19 	bl	80158b4 <uxr_millis>
 8014482:	1b83      	subs	r3, r0, r6
 8014484:	1ae9      	subs	r1, r5, r3
 8014486:	2900      	cmp	r1, #0
 8014488:	dcf6      	bgt.n	8014478 <uxr_run_session_timeout+0x14>
 801448a:	f104 0008 	add.w	r0, r4, #8
 801448e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014492:	f001 b9b3 	b.w	80157fc <uxr_output_streams_confirmed>
 8014496:	bf00      	nop

08014498 <uxr_run_session_until_data>:
 8014498:	b570      	push	{r4, r5, r6, lr}
 801449a:	4604      	mov	r4, r0
 801449c:	460d      	mov	r5, r1
 801449e:	f001 fa09 	bl	80158b4 <uxr_millis>
 80144a2:	4606      	mov	r6, r0
 80144a4:	4620      	mov	r0, r4
 80144a6:	f7ff fc57 	bl	8013d58 <uxr_flash_output_streams>
 80144aa:	2300      	movs	r3, #0
 80144ac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80144b0:	4629      	mov	r1, r5
 80144b2:	e005      	b.n	80144c0 <uxr_run_session_until_data+0x28>
 80144b4:	f001 f9fe 	bl	80158b4 <uxr_millis>
 80144b8:	1b83      	subs	r3, r0, r6
 80144ba:	1ae9      	subs	r1, r5, r3
 80144bc:	2900      	cmp	r1, #0
 80144be:	dd07      	ble.n	80144d0 <uxr_run_session_until_data+0x38>
 80144c0:	4620      	mov	r0, r4
 80144c2:	f7ff fe8f 	bl	80141e4 <listen_message_reliably>
 80144c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80144ca:	2800      	cmp	r0, #0
 80144cc:	d0f2      	beq.n	80144b4 <uxr_run_session_until_data+0x1c>
 80144ce:	bd70      	pop	{r4, r5, r6, pc}
 80144d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80144d4:	bd70      	pop	{r4, r5, r6, pc}
 80144d6:	bf00      	nop

080144d8 <uxr_run_session_until_confirm_delivery>:
 80144d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144dc:	4606      	mov	r6, r0
 80144de:	460d      	mov	r5, r1
 80144e0:	f001 f9e8 	bl	80158b4 <uxr_millis>
 80144e4:	4607      	mov	r7, r0
 80144e6:	4630      	mov	r0, r6
 80144e8:	f7ff fc36 	bl	8013d58 <uxr_flash_output_streams>
 80144ec:	2d00      	cmp	r5, #0
 80144ee:	f106 0808 	add.w	r8, r6, #8
 80144f2:	bfa8      	it	ge
 80144f4:	462c      	movge	r4, r5
 80144f6:	da07      	bge.n	8014508 <uxr_run_session_until_confirm_delivery+0x30>
 80144f8:	e00e      	b.n	8014518 <uxr_run_session_until_confirm_delivery+0x40>
 80144fa:	f7ff fe73 	bl	80141e4 <listen_message_reliably>
 80144fe:	f001 f9d9 	bl	80158b4 <uxr_millis>
 8014502:	1bc3      	subs	r3, r0, r7
 8014504:	1aec      	subs	r4, r5, r3
 8014506:	d407      	bmi.n	8014518 <uxr_run_session_until_confirm_delivery+0x40>
 8014508:	4640      	mov	r0, r8
 801450a:	f001 f977 	bl	80157fc <uxr_output_streams_confirmed>
 801450e:	4603      	mov	r3, r0
 8014510:	4621      	mov	r1, r4
 8014512:	4630      	mov	r0, r6
 8014514:	2b00      	cmp	r3, #0
 8014516:	d0f0      	beq.n	80144fa <uxr_run_session_until_confirm_delivery+0x22>
 8014518:	4640      	mov	r0, r8
 801451a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801451e:	f001 b96d 	b.w	80157fc <uxr_output_streams_confirmed>
 8014522:	bf00      	nop

08014524 <uxr_run_session_until_all_status>:
 8014524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014528:	9c08      	ldr	r4, [sp, #32]
 801452a:	4606      	mov	r6, r0
 801452c:	460f      	mov	r7, r1
 801452e:	4691      	mov	r9, r2
 8014530:	461d      	mov	r5, r3
 8014532:	f7ff fc11 	bl	8013d58 <uxr_flash_output_streams>
 8014536:	b124      	cbz	r4, 8014542 <uxr_run_session_until_all_status+0x1e>
 8014538:	4622      	mov	r2, r4
 801453a:	21ff      	movs	r1, #255	@ 0xff
 801453c:	4628      	mov	r0, r5
 801453e:	f008 f9fd 	bl	801c93c <memset>
 8014542:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8014546:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8014548:	f001 f9b4 	bl	80158b4 <uxr_millis>
 801454c:	3d01      	subs	r5, #1
 801454e:	f1a9 0902 	sub.w	r9, r9, #2
 8014552:	4680      	mov	r8, r0
 8014554:	4639      	mov	r1, r7
 8014556:	4630      	mov	r0, r6
 8014558:	f7ff fe44 	bl	80141e4 <listen_message_reliably>
 801455c:	f001 f9aa 	bl	80158b4 <uxr_millis>
 8014560:	eba0 0008 	sub.w	r0, r0, r8
 8014564:	1a39      	subs	r1, r7, r0
 8014566:	b344      	cbz	r4, 80145ba <uxr_run_session_until_all_status+0x96>
 8014568:	4628      	mov	r0, r5
 801456a:	46ac      	mov	ip, r5
 801456c:	2301      	movs	r3, #1
 801456e:	e002      	b.n	8014576 <uxr_run_session_until_all_status+0x52>
 8014570:	42a3      	cmp	r3, r4
 8014572:	d20d      	bcs.n	8014590 <uxr_run_session_until_all_status+0x6c>
 8014574:	3301      	adds	r3, #1
 8014576:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801457a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801457e:	d1f7      	bne.n	8014570 <uxr_run_session_until_all_status+0x4c>
 8014580:	42a3      	cmp	r3, r4
 8014582:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8014586:	d213      	bcs.n	80145b0 <uxr_run_session_until_all_status+0x8c>
 8014588:	2a00      	cmp	r2, #0
 801458a:	d0f3      	beq.n	8014574 <uxr_run_session_until_all_status+0x50>
 801458c:	2900      	cmp	r1, #0
 801458e:	dce2      	bgt.n	8014556 <uxr_run_session_until_all_status+0x32>
 8014590:	2300      	movs	r3, #0
 8014592:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014594:	442c      	add	r4, r5
 8014596:	e001      	b.n	801459c <uxr_run_session_until_all_status+0x78>
 8014598:	2b01      	cmp	r3, #1
 801459a:	d812      	bhi.n	80145c2 <uxr_run_session_until_all_status+0x9e>
 801459c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80145a0:	4284      	cmp	r4, r0
 80145a2:	d1f9      	bne.n	8014598 <uxr_run_session_until_all_status+0x74>
 80145a4:	2b01      	cmp	r3, #1
 80145a6:	bf8c      	ite	hi
 80145a8:	2000      	movhi	r0, #0
 80145aa:	2001      	movls	r0, #1
 80145ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145b0:	2900      	cmp	r1, #0
 80145b2:	dded      	ble.n	8014590 <uxr_run_session_until_all_status+0x6c>
 80145b4:	2a00      	cmp	r2, #0
 80145b6:	d1ce      	bne.n	8014556 <uxr_run_session_until_all_status+0x32>
 80145b8:	e7ea      	b.n	8014590 <uxr_run_session_until_all_status+0x6c>
 80145ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80145bc:	2001      	movs	r0, #1
 80145be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145c2:	2000      	movs	r0, #0
 80145c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080145c8 <uxr_run_session_until_pong>:
 80145c8:	b570      	push	{r4, r5, r6, lr}
 80145ca:	4604      	mov	r4, r0
 80145cc:	460d      	mov	r5, r1
 80145ce:	f001 f971 	bl	80158b4 <uxr_millis>
 80145d2:	4606      	mov	r6, r0
 80145d4:	4620      	mov	r0, r4
 80145d6:	f7ff fbbf 	bl	8013d58 <uxr_flash_output_streams>
 80145da:	2300      	movs	r3, #0
 80145dc:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80145e0:	4629      	mov	r1, r5
 80145e2:	e005      	b.n	80145f0 <uxr_run_session_until_pong+0x28>
 80145e4:	f001 f966 	bl	80158b4 <uxr_millis>
 80145e8:	1b83      	subs	r3, r0, r6
 80145ea:	1ae9      	subs	r1, r5, r3
 80145ec:	2900      	cmp	r1, #0
 80145ee:	dd0c      	ble.n	801460a <uxr_run_session_until_pong+0x42>
 80145f0:	4620      	mov	r0, r4
 80145f2:	f7ff fdf7 	bl	80141e4 <listen_message_reliably>
 80145f6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80145fa:	2800      	cmp	r0, #0
 80145fc:	d0f2      	beq.n	80145e4 <uxr_run_session_until_pong+0x1c>
 80145fe:	f1a0 0001 	sub.w	r0, r0, #1
 8014602:	fab0 f080 	clz	r0, r0
 8014606:	0940      	lsrs	r0, r0, #5
 8014608:	bd70      	pop	{r4, r5, r6, pc}
 801460a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 801460e:	f1a0 0001 	sub.w	r0, r0, #1
 8014612:	fab0 f080 	clz	r0, r0
 8014616:	0940      	lsrs	r0, r0, #5
 8014618:	bd70      	pop	{r4, r5, r6, pc}
 801461a:	bf00      	nop

0801461c <wait_session_status>:
 801461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014620:	4604      	mov	r4, r0
 8014622:	b09d      	sub	sp, #116	@ 0x74
 8014624:	20ff      	movs	r0, #255	@ 0xff
 8014626:	7160      	strb	r0, [r4, #5]
 8014628:	9303      	str	r3, [sp, #12]
 801462a:	2b00      	cmp	r3, #0
 801462c:	f000 80b6 	beq.w	801479c <wait_session_status+0x180>
 8014630:	468a      	mov	sl, r1
 8014632:	4691      	mov	r9, r2
 8014634:	f04f 0b00 	mov.w	fp, #0
 8014638:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801463a:	464a      	mov	r2, r9
 801463c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014640:	4651      	mov	r1, sl
 8014642:	47a8      	blx	r5
 8014644:	f001 f936 	bl	80158b4 <uxr_millis>
 8014648:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801464c:	4605      	mov	r5, r0
 801464e:	e009      	b.n	8014664 <wait_session_status+0x48>
 8014650:	f001 f930 	bl	80158b4 <uxr_millis>
 8014654:	1b40      	subs	r0, r0, r5
 8014656:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801465a:	2b00      	cmp	r3, #0
 801465c:	dd40      	ble.n	80146e0 <wait_session_status+0xc4>
 801465e:	7960      	ldrb	r0, [r4, #5]
 8014660:	28ff      	cmp	r0, #255	@ 0xff
 8014662:	d145      	bne.n	80146f0 <wait_session_status+0xd4>
 8014664:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014666:	a908      	add	r1, sp, #32
 8014668:	6896      	ldr	r6, [r2, #8]
 801466a:	6810      	ldr	r0, [r2, #0]
 801466c:	aa09      	add	r2, sp, #36	@ 0x24
 801466e:	47b0      	blx	r6
 8014670:	2800      	cmp	r0, #0
 8014672:	d0ed      	beq.n	8014650 <wait_session_status+0x34>
 8014674:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014678:	a80c      	add	r0, sp, #48	@ 0x30
 801467a:	f7f9 fe7f 	bl	800e37c <ucdr_init_buffer>
 801467e:	2600      	movs	r6, #0
 8014680:	f10d 031e 	add.w	r3, sp, #30
 8014684:	aa07      	add	r2, sp, #28
 8014686:	a90c      	add	r1, sp, #48	@ 0x30
 8014688:	4620      	mov	r0, r4
 801468a:	f88d 601c 	strb.w	r6, [sp, #28]
 801468e:	f000 fa87 	bl	8014ba0 <uxr_read_session_header>
 8014692:	2800      	cmp	r0, #0
 8014694:	d0dc      	beq.n	8014650 <wait_session_status+0x34>
 8014696:	4631      	mov	r1, r6
 8014698:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801469c:	f000 ffb6 	bl	801560c <uxr_stream_id_from_raw>
 80146a0:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80146a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80146a8:	9302      	str	r3, [sp, #8]
 80146aa:	2f01      	cmp	r7, #1
 80146ac:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80146b0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80146b4:	d05c      	beq.n	8014770 <wait_session_status+0x154>
 80146b6:	2f02      	cmp	r7, #2
 80146b8:	d020      	beq.n	80146fc <wait_session_status+0xe0>
 80146ba:	2f00      	cmp	r7, #0
 80146bc:	d1c8      	bne.n	8014650 <wait_session_status+0x34>
 80146be:	4639      	mov	r1, r7
 80146c0:	4638      	mov	r0, r7
 80146c2:	f000 ffa3 	bl	801560c <uxr_stream_id_from_raw>
 80146c6:	a90c      	add	r1, sp, #48	@ 0x30
 80146c8:	4602      	mov	r2, r0
 80146ca:	900b      	str	r0, [sp, #44]	@ 0x2c
 80146cc:	4620      	mov	r0, r4
 80146ce:	f7ff fc01 	bl	8013ed4 <read_submessage_list>
 80146d2:	f001 f8ef 	bl	80158b4 <uxr_millis>
 80146d6:	1b40      	subs	r0, r0, r5
 80146d8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80146dc:	2b00      	cmp	r3, #0
 80146de:	dcbe      	bgt.n	801465e <wait_session_status+0x42>
 80146e0:	9b03      	ldr	r3, [sp, #12]
 80146e2:	7960      	ldrb	r0, [r4, #5]
 80146e4:	f10b 0b01 	add.w	fp, fp, #1
 80146e8:	455b      	cmp	r3, fp
 80146ea:	d001      	beq.n	80146f0 <wait_session_status+0xd4>
 80146ec:	28ff      	cmp	r0, #255	@ 0xff
 80146ee:	d0a3      	beq.n	8014638 <wait_session_status+0x1c>
 80146f0:	38ff      	subs	r0, #255	@ 0xff
 80146f2:	bf18      	it	ne
 80146f4:	2001      	movne	r0, #1
 80146f6:	b01d      	add	sp, #116	@ 0x74
 80146f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8014700:	9304      	str	r3, [sp, #16]
 8014702:	4631      	mov	r1, r6
 8014704:	f104 0008 	add.w	r0, r4, #8
 8014708:	f001 f86e 	bl	80157e8 <uxr_get_input_reliable_stream>
 801470c:	4680      	mov	r8, r0
 801470e:	b348      	cbz	r0, 8014764 <wait_session_status+0x148>
 8014710:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014712:	9205      	str	r2, [sp, #20]
 8014714:	a80c      	add	r0, sp, #48	@ 0x30
 8014716:	f7f9 fe61 	bl	800e3dc <ucdr_buffer_remaining>
 801471a:	4603      	mov	r3, r0
 801471c:	f10d 001d 	add.w	r0, sp, #29
 8014720:	9000      	str	r0, [sp, #0]
 8014722:	9a05      	ldr	r2, [sp, #20]
 8014724:	9902      	ldr	r1, [sp, #8]
 8014726:	4640      	mov	r0, r8
 8014728:	f005 fe7e 	bl	801a428 <uxr_receive_reliable_message>
 801472c:	b1d0      	cbz	r0, 8014764 <wait_session_status+0x148>
 801472e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d03a      	beq.n	80147ac <wait_session_status+0x190>
 8014736:	9f04      	ldr	r7, [sp, #16]
 8014738:	e00a      	b.n	8014750 <wait_session_status+0x134>
 801473a:	f04f 0302 	mov.w	r3, #2
 801473e:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8014742:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8014746:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801474a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801474c:	f7ff fbc2 	bl	8013ed4 <read_submessage_list>
 8014750:	a914      	add	r1, sp, #80	@ 0x50
 8014752:	2204      	movs	r2, #4
 8014754:	4640      	mov	r0, r8
 8014756:	f005 fee7 	bl	801a528 <uxr_next_input_reliable_buffer_available>
 801475a:	4603      	mov	r3, r0
 801475c:	a914      	add	r1, sp, #80	@ 0x50
 801475e:	4620      	mov	r0, r4
 8014760:	2b00      	cmp	r3, #0
 8014762:	d1ea      	bne.n	801473a <wait_session_status+0x11e>
 8014764:	9904      	ldr	r1, [sp, #16]
 8014766:	4632      	mov	r2, r6
 8014768:	4620      	mov	r0, r4
 801476a:	f7ff fa2f 	bl	8013bcc <write_submessage_acknack.isra.0>
 801476e:	e76f      	b.n	8014650 <wait_session_status+0x34>
 8014770:	4631      	mov	r1, r6
 8014772:	f104 0008 	add.w	r0, r4, #8
 8014776:	f001 f82d 	bl	80157d4 <uxr_get_input_best_effort_stream>
 801477a:	2800      	cmp	r0, #0
 801477c:	f43f af68 	beq.w	8014650 <wait_session_status+0x34>
 8014780:	9902      	ldr	r1, [sp, #8]
 8014782:	f005 fdbd 	bl	801a300 <uxr_receive_best_effort_message>
 8014786:	2800      	cmp	r0, #0
 8014788:	f43f af62 	beq.w	8014650 <wait_session_status+0x34>
 801478c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014790:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014792:	a90c      	add	r1, sp, #48	@ 0x30
 8014794:	4620      	mov	r0, r4
 8014796:	f7ff fb9d 	bl	8013ed4 <read_submessage_list>
 801479a:	e759      	b.n	8014650 <wait_session_status+0x34>
 801479c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801479e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80147a2:	47a0      	blx	r4
 80147a4:	2001      	movs	r0, #1
 80147a6:	b01d      	add	sp, #116	@ 0x74
 80147a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ac:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80147b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80147b2:	a90c      	add	r1, sp, #48	@ 0x30
 80147b4:	4620      	mov	r0, r4
 80147b6:	f7ff fb8d 	bl	8013ed4 <read_submessage_list>
 80147ba:	e7bc      	b.n	8014736 <wait_session_status+0x11a>

080147bc <uxr_delete_session_retries>:
 80147bc:	b530      	push	{r4, r5, lr}
 80147be:	b08f      	sub	sp, #60	@ 0x3c
 80147c0:	4604      	mov	r4, r0
 80147c2:	460d      	mov	r5, r1
 80147c4:	f000 fa2e 	bl	8014c24 <uxr_session_header_offset>
 80147c8:	2300      	movs	r3, #0
 80147ca:	2210      	movs	r2, #16
 80147cc:	9000      	str	r0, [sp, #0]
 80147ce:	a902      	add	r1, sp, #8
 80147d0:	a806      	add	r0, sp, #24
 80147d2:	f7f9 fdc1 	bl	800e358 <ucdr_init_buffer_origin_offset>
 80147d6:	a906      	add	r1, sp, #24
 80147d8:	4620      	mov	r0, r4
 80147da:	f000 f973 	bl	8014ac4 <uxr_buffer_delete_session>
 80147de:	2200      	movs	r2, #0
 80147e0:	4611      	mov	r1, r2
 80147e2:	9b06      	ldr	r3, [sp, #24]
 80147e4:	4620      	mov	r0, r4
 80147e6:	f000 f9c7 	bl	8014b78 <uxr_stamp_session_header>
 80147ea:	a806      	add	r0, sp, #24
 80147ec:	f7f9 fdf2 	bl	800e3d4 <ucdr_buffer_length>
 80147f0:	462b      	mov	r3, r5
 80147f2:	4602      	mov	r2, r0
 80147f4:	a902      	add	r1, sp, #8
 80147f6:	4620      	mov	r0, r4
 80147f8:	f7ff ff10 	bl	801461c <wait_session_status>
 80147fc:	b118      	cbz	r0, 8014806 <uxr_delete_session_retries+0x4a>
 80147fe:	7960      	ldrb	r0, [r4, #5]
 8014800:	fab0 f080 	clz	r0, r0
 8014804:	0940      	lsrs	r0, r0, #5
 8014806:	b00f      	add	sp, #60	@ 0x3c
 8014808:	bd30      	pop	{r4, r5, pc}
 801480a:	bf00      	nop

0801480c <uxr_create_session>:
 801480c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014810:	f100 0b08 	add.w	fp, r0, #8
 8014814:	b0ab      	sub	sp, #172	@ 0xac
 8014816:	4604      	mov	r4, r0
 8014818:	4658      	mov	r0, fp
 801481a:	f000 ff2b 	bl	8015674 <uxr_reset_stream_storage>
 801481e:	4620      	mov	r0, r4
 8014820:	f000 fa00 	bl	8014c24 <uxr_session_header_offset>
 8014824:	2300      	movs	r3, #0
 8014826:	9000      	str	r0, [sp, #0]
 8014828:	221c      	movs	r2, #28
 801482a:	a90b      	add	r1, sp, #44	@ 0x2c
 801482c:	a812      	add	r0, sp, #72	@ 0x48
 801482e:	f7f9 fd93 	bl	800e358 <ucdr_init_buffer_origin_offset>
 8014832:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014834:	8a1a      	ldrh	r2, [r3, #16]
 8014836:	3a04      	subs	r2, #4
 8014838:	b292      	uxth	r2, r2
 801483a:	a912      	add	r1, sp, #72	@ 0x48
 801483c:	4620      	mov	r0, r4
 801483e:	f000 f917 	bl	8014a70 <uxr_buffer_create_session>
 8014842:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8014844:	4620      	mov	r0, r4
 8014846:	f000 f983 	bl	8014b50 <uxr_stamp_create_session_header>
 801484a:	a812      	add	r0, sp, #72	@ 0x48
 801484c:	f7f9 fdc2 	bl	800e3d4 <ucdr_buffer_length>
 8014850:	23ff      	movs	r3, #255	@ 0xff
 8014852:	7163      	strb	r3, [r4, #5]
 8014854:	230a      	movs	r3, #10
 8014856:	46da      	mov	sl, fp
 8014858:	9303      	str	r3, [sp, #12]
 801485a:	4683      	mov	fp, r0
 801485c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801485e:	465a      	mov	r2, fp
 8014860:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014864:	a90b      	add	r1, sp, #44	@ 0x2c
 8014866:	47a8      	blx	r5
 8014868:	f001 f824 	bl	80158b4 <uxr_millis>
 801486c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014870:	4605      	mov	r5, r0
 8014872:	e009      	b.n	8014888 <uxr_create_session+0x7c>
 8014874:	f001 f81e 	bl	80158b4 <uxr_millis>
 8014878:	1b40      	subs	r0, r0, r5
 801487a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801487e:	2b00      	cmp	r3, #0
 8014880:	7962      	ldrb	r2, [r4, #5]
 8014882:	dd38      	ble.n	80148f6 <uxr_create_session+0xea>
 8014884:	2aff      	cmp	r2, #255	@ 0xff
 8014886:	d13c      	bne.n	8014902 <uxr_create_session+0xf6>
 8014888:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801488a:	a907      	add	r1, sp, #28
 801488c:	6896      	ldr	r6, [r2, #8]
 801488e:	6810      	ldr	r0, [r2, #0]
 8014890:	aa08      	add	r2, sp, #32
 8014892:	47b0      	blx	r6
 8014894:	2800      	cmp	r0, #0
 8014896:	d0ed      	beq.n	8014874 <uxr_create_session+0x68>
 8014898:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801489c:	a81a      	add	r0, sp, #104	@ 0x68
 801489e:	f7f9 fd6d 	bl	800e37c <ucdr_init_buffer>
 80148a2:	2600      	movs	r6, #0
 80148a4:	f10d 031a 	add.w	r3, sp, #26
 80148a8:	aa06      	add	r2, sp, #24
 80148aa:	a91a      	add	r1, sp, #104	@ 0x68
 80148ac:	4620      	mov	r0, r4
 80148ae:	f88d 6018 	strb.w	r6, [sp, #24]
 80148b2:	f000 f975 	bl	8014ba0 <uxr_read_session_header>
 80148b6:	2800      	cmp	r0, #0
 80148b8:	d0dc      	beq.n	8014874 <uxr_create_session+0x68>
 80148ba:	4631      	mov	r1, r6
 80148bc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80148c0:	f000 fea4 	bl	801560c <uxr_stream_id_from_raw>
 80148c4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80148c8:	2e01      	cmp	r6, #1
 80148ca:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80148ce:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80148d2:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80148d6:	d053      	beq.n	8014980 <uxr_create_session+0x174>
 80148d8:	2e02      	cmp	r6, #2
 80148da:	d018      	beq.n	801490e <uxr_create_session+0x102>
 80148dc:	2e00      	cmp	r6, #0
 80148de:	d1c9      	bne.n	8014874 <uxr_create_session+0x68>
 80148e0:	4631      	mov	r1, r6
 80148e2:	4630      	mov	r0, r6
 80148e4:	f000 fe92 	bl	801560c <uxr_stream_id_from_raw>
 80148e8:	a91a      	add	r1, sp, #104	@ 0x68
 80148ea:	4602      	mov	r2, r0
 80148ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80148ee:	4620      	mov	r0, r4
 80148f0:	f7ff faf0 	bl	8013ed4 <read_submessage_list>
 80148f4:	e7be      	b.n	8014874 <uxr_create_session+0x68>
 80148f6:	9b03      	ldr	r3, [sp, #12]
 80148f8:	3b01      	subs	r3, #1
 80148fa:	9303      	str	r3, [sp, #12]
 80148fc:	d001      	beq.n	8014902 <uxr_create_session+0xf6>
 80148fe:	2aff      	cmp	r2, #255	@ 0xff
 8014900:	d0ac      	beq.n	801485c <uxr_create_session+0x50>
 8014902:	2a00      	cmp	r2, #0
 8014904:	d051      	beq.n	80149aa <uxr_create_session+0x19e>
 8014906:	2000      	movs	r0, #0
 8014908:	b02b      	add	sp, #172	@ 0xac
 801490a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801490e:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014912:	9304      	str	r3, [sp, #16]
 8014914:	4639      	mov	r1, r7
 8014916:	4650      	mov	r0, sl
 8014918:	f000 ff66 	bl	80157e8 <uxr_get_input_reliable_stream>
 801491c:	4680      	mov	r8, r0
 801491e:	b348      	cbz	r0, 8014974 <uxr_create_session+0x168>
 8014920:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014922:	9205      	str	r2, [sp, #20]
 8014924:	a81a      	add	r0, sp, #104	@ 0x68
 8014926:	f7f9 fd59 	bl	800e3dc <ucdr_buffer_remaining>
 801492a:	4603      	mov	r3, r0
 801492c:	f10d 0019 	add.w	r0, sp, #25
 8014930:	9000      	str	r0, [sp, #0]
 8014932:	9a05      	ldr	r2, [sp, #20]
 8014934:	4649      	mov	r1, r9
 8014936:	4640      	mov	r0, r8
 8014938:	f005 fd76 	bl	801a428 <uxr_receive_reliable_message>
 801493c:	b1d0      	cbz	r0, 8014974 <uxr_create_session+0x168>
 801493e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d038      	beq.n	80149b8 <uxr_create_session+0x1ac>
 8014946:	9e04      	ldr	r6, [sp, #16]
 8014948:	e00a      	b.n	8014960 <uxr_create_session+0x154>
 801494a:	f04f 0302 	mov.w	r3, #2
 801494e:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8014952:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8014956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801495a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801495c:	f7ff faba 	bl	8013ed4 <read_submessage_list>
 8014960:	a922      	add	r1, sp, #136	@ 0x88
 8014962:	2204      	movs	r2, #4
 8014964:	4640      	mov	r0, r8
 8014966:	f005 fddf 	bl	801a528 <uxr_next_input_reliable_buffer_available>
 801496a:	4603      	mov	r3, r0
 801496c:	a922      	add	r1, sp, #136	@ 0x88
 801496e:	4620      	mov	r0, r4
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1ea      	bne.n	801494a <uxr_create_session+0x13e>
 8014974:	9904      	ldr	r1, [sp, #16]
 8014976:	463a      	mov	r2, r7
 8014978:	4620      	mov	r0, r4
 801497a:	f7ff f927 	bl	8013bcc <write_submessage_acknack.isra.0>
 801497e:	e779      	b.n	8014874 <uxr_create_session+0x68>
 8014980:	4639      	mov	r1, r7
 8014982:	4650      	mov	r0, sl
 8014984:	f000 ff26 	bl	80157d4 <uxr_get_input_best_effort_stream>
 8014988:	2800      	cmp	r0, #0
 801498a:	f43f af73 	beq.w	8014874 <uxr_create_session+0x68>
 801498e:	4649      	mov	r1, r9
 8014990:	f005 fcb6 	bl	801a300 <uxr_receive_best_effort_message>
 8014994:	2800      	cmp	r0, #0
 8014996:	f43f af6d 	beq.w	8014874 <uxr_create_session+0x68>
 801499a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801499e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80149a0:	a91a      	add	r1, sp, #104	@ 0x68
 80149a2:	4620      	mov	r0, r4
 80149a4:	f7ff fa96 	bl	8013ed4 <read_submessage_list>
 80149a8:	e764      	b.n	8014874 <uxr_create_session+0x68>
 80149aa:	4650      	mov	r0, sl
 80149ac:	f000 fe62 	bl	8015674 <uxr_reset_stream_storage>
 80149b0:	2001      	movs	r0, #1
 80149b2:	b02b      	add	sp, #172	@ 0xac
 80149b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b8:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80149bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80149be:	a91a      	add	r1, sp, #104	@ 0x68
 80149c0:	4620      	mov	r0, r4
 80149c2:	f7ff fa87 	bl	8013ed4 <read_submessage_list>
 80149c6:	e7be      	b.n	8014946 <uxr_create_session+0x13a>

080149c8 <uxr_prepare_stream_to_write_submessage>:
 80149c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149cc:	b082      	sub	sp, #8
 80149ce:	4682      	mov	sl, r0
 80149d0:	4610      	mov	r0, r2
 80149d2:	4615      	mov	r5, r2
 80149d4:	461e      	mov	r6, r3
 80149d6:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80149da:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80149de:	9101      	str	r1, [sp, #4]
 80149e0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80149e4:	f000 ff60 	bl	80158a8 <uxr_submessage_padding>
 80149e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80149ec:	f105 0904 	add.w	r9, r5, #4
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	4481      	add	r9, r0
 80149f4:	d01d      	beq.n	8014a32 <uxr_prepare_stream_to_write_submessage+0x6a>
 80149f6:	2b02      	cmp	r3, #2
 80149f8:	d116      	bne.n	8014a28 <uxr_prepare_stream_to_write_submessage+0x60>
 80149fa:	4621      	mov	r1, r4
 80149fc:	f10a 0008 	add.w	r0, sl, #8
 8014a00:	f000 fede 	bl	80157c0 <uxr_get_output_reliable_stream>
 8014a04:	4604      	mov	r4, r0
 8014a06:	b158      	cbz	r0, 8014a20 <uxr_prepare_stream_to_write_submessage+0x58>
 8014a08:	4649      	mov	r1, r9
 8014a0a:	4632      	mov	r2, r6
 8014a0c:	f005 ff48 	bl	801a8a0 <uxr_prepare_reliable_buffer_to_write>
 8014a10:	4604      	mov	r4, r0
 8014a12:	b12c      	cbz	r4, 8014a20 <uxr_prepare_stream_to_write_submessage+0x58>
 8014a14:	4643      	mov	r3, r8
 8014a16:	b2aa      	uxth	r2, r5
 8014a18:	4639      	mov	r1, r7
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f000 ff04 	bl	8015828 <uxr_buffer_submessage_header>
 8014a20:	4620      	mov	r0, r4
 8014a22:	b002      	add	sp, #8
 8014a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a28:	2400      	movs	r4, #0
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	b002      	add	sp, #8
 8014a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a32:	4621      	mov	r1, r4
 8014a34:	f10a 0008 	add.w	r0, sl, #8
 8014a38:	f000 feba 	bl	80157b0 <uxr_get_output_best_effort_stream>
 8014a3c:	4604      	mov	r4, r0
 8014a3e:	2800      	cmp	r0, #0
 8014a40:	d0ee      	beq.n	8014a20 <uxr_prepare_stream_to_write_submessage+0x58>
 8014a42:	4649      	mov	r1, r9
 8014a44:	4632      	mov	r2, r6
 8014a46:	f005 fe5b 	bl	801a700 <uxr_prepare_best_effort_buffer_to_write>
 8014a4a:	4604      	mov	r4, r0
 8014a4c:	e7e1      	b.n	8014a12 <uxr_prepare_stream_to_write_submessage+0x4a>
 8014a4e:	bf00      	nop

08014a50 <uxr_init_session_info>:
 8014a50:	0e13      	lsrs	r3, r2, #24
 8014a52:	7043      	strb	r3, [r0, #1]
 8014a54:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014a58:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014a5c:	7001      	strb	r1, [r0, #0]
 8014a5e:	70c3      	strb	r3, [r0, #3]
 8014a60:	2109      	movs	r1, #9
 8014a62:	23ff      	movs	r3, #255	@ 0xff
 8014a64:	f880 c002 	strb.w	ip, [r0, #2]
 8014a68:	7102      	strb	r2, [r0, #4]
 8014a6a:	80c1      	strh	r1, [r0, #6]
 8014a6c:	7143      	strb	r3, [r0, #5]
 8014a6e:	4770      	bx	lr

08014a70 <uxr_buffer_create_session>:
 8014a70:	b530      	push	{r4, r5, lr}
 8014a72:	b089      	sub	sp, #36	@ 0x24
 8014a74:	2300      	movs	r3, #0
 8014a76:	4d12      	ldr	r5, [pc, #72]	@ (8014ac0 <uxr_buffer_create_session+0x50>)
 8014a78:	9307      	str	r3, [sp, #28]
 8014a7a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014a7e:	2201      	movs	r2, #1
 8014a80:	9301      	str	r3, [sp, #4]
 8014a82:	80c2      	strh	r2, [r0, #6]
 8014a84:	f88d 2004 	strb.w	r2, [sp, #4]
 8014a88:	682a      	ldr	r2, [r5, #0]
 8014a8a:	9200      	str	r2, [sp, #0]
 8014a8c:	88aa      	ldrh	r2, [r5, #4]
 8014a8e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014a92:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014a96:	9202      	str	r2, [sp, #8]
 8014a98:	460c      	mov	r4, r1
 8014a9a:	7802      	ldrb	r2, [r0, #0]
 8014a9c:	9303      	str	r3, [sp, #12]
 8014a9e:	4619      	mov	r1, r3
 8014aa0:	f88d 200c 	strb.w	r2, [sp, #12]
 8014aa4:	4620      	mov	r0, r4
 8014aa6:	2210      	movs	r2, #16
 8014aa8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014aac:	9306      	str	r3, [sp, #24]
 8014aae:	f000 febb 	bl	8015828 <uxr_buffer_submessage_header>
 8014ab2:	4669      	mov	r1, sp
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	f001 feff 	bl	80168b8 <uxr_serialize_CREATE_CLIENT_Payload>
 8014aba:	b009      	add	sp, #36	@ 0x24
 8014abc:	bd30      	pop	{r4, r5, pc}
 8014abe:	bf00      	nop
 8014ac0:	0801d808 	.word	0x0801d808

08014ac4 <uxr_buffer_delete_session>:
 8014ac4:	b510      	push	{r4, lr}
 8014ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8014af8 <uxr_buffer_delete_session+0x34>)
 8014ac8:	b082      	sub	sp, #8
 8014aca:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8014ace:	f8ad c006 	strh.w	ip, [sp, #6]
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	2202      	movs	r2, #2
 8014ad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014ada:	80c2      	strh	r2, [r0, #6]
 8014adc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014ae0:	2204      	movs	r2, #4
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	2103      	movs	r1, #3
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f000 fe9e 	bl	8015828 <uxr_buffer_submessage_header>
 8014aec:	a901      	add	r1, sp, #4
 8014aee:	4620      	mov	r0, r4
 8014af0:	f001 ff9c 	bl	8016a2c <uxr_serialize_DELETE_Payload>
 8014af4:	b002      	add	sp, #8
 8014af6:	bd10      	pop	{r4, pc}
 8014af8:	0801d808 	.word	0x0801d808

08014afc <uxr_read_create_session_status>:
 8014afc:	b510      	push	{r4, lr}
 8014afe:	b088      	sub	sp, #32
 8014b00:	4604      	mov	r4, r0
 8014b02:	4608      	mov	r0, r1
 8014b04:	a901      	add	r1, sp, #4
 8014b06:	f001 ffa1 	bl	8016a4c <uxr_deserialize_STATUS_AGENT_Payload>
 8014b0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014b0e:	7163      	strb	r3, [r4, #5]
 8014b10:	b008      	add	sp, #32
 8014b12:	bd10      	pop	{r4, pc}

08014b14 <uxr_read_delete_session_status>:
 8014b14:	b510      	push	{r4, lr}
 8014b16:	4604      	mov	r4, r0
 8014b18:	b084      	sub	sp, #16
 8014b1a:	4608      	mov	r0, r1
 8014b1c:	a902      	add	r1, sp, #8
 8014b1e:	f001 ffc5 	bl	8016aac <uxr_deserialize_STATUS_Payload>
 8014b22:	88e3      	ldrh	r3, [r4, #6]
 8014b24:	2b02      	cmp	r3, #2
 8014b26:	d001      	beq.n	8014b2c <uxr_read_delete_session_status+0x18>
 8014b28:	b004      	add	sp, #16
 8014b2a:	bd10      	pop	{r4, pc}
 8014b2c:	f10d 000a 	add.w	r0, sp, #10
 8014b30:	f7fe fd9e 	bl	8013670 <uxr_object_id_from_raw>
 8014b34:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014b38:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014b3c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014b40:	b29b      	uxth	r3, r3
 8014b42:	2b02      	cmp	r3, #2
 8014b44:	bf04      	itt	eq
 8014b46:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8014b4a:	7163      	strbeq	r3, [r4, #5]
 8014b4c:	b004      	add	sp, #16
 8014b4e:	bd10      	pop	{r4, pc}

08014b50 <uxr_stamp_create_session_header>:
 8014b50:	b510      	push	{r4, lr}
 8014b52:	2208      	movs	r2, #8
 8014b54:	b08a      	sub	sp, #40	@ 0x28
 8014b56:	4604      	mov	r4, r0
 8014b58:	eb0d 0002 	add.w	r0, sp, r2
 8014b5c:	f7f9 fc0e 	bl	800e37c <ucdr_init_buffer>
 8014b60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b64:	9400      	str	r4, [sp, #0]
 8014b66:	2300      	movs	r3, #0
 8014b68:	461a      	mov	r2, r3
 8014b6a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014b6e:	a802      	add	r0, sp, #8
 8014b70:	f001 f854 	bl	8015c1c <uxr_serialize_message_header>
 8014b74:	b00a      	add	sp, #40	@ 0x28
 8014b76:	bd10      	pop	{r4, pc}

08014b78 <uxr_stamp_session_header>:
 8014b78:	b530      	push	{r4, r5, lr}
 8014b7a:	b08d      	sub	sp, #52	@ 0x34
 8014b7c:	4604      	mov	r4, r0
 8014b7e:	460d      	mov	r5, r1
 8014b80:	9203      	str	r2, [sp, #12]
 8014b82:	4619      	mov	r1, r3
 8014b84:	a804      	add	r0, sp, #16
 8014b86:	2208      	movs	r2, #8
 8014b88:	f7f9 fbf8 	bl	800e37c <ucdr_init_buffer>
 8014b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b90:	9b03      	ldr	r3, [sp, #12]
 8014b92:	9400      	str	r4, [sp, #0]
 8014b94:	462a      	mov	r2, r5
 8014b96:	a804      	add	r0, sp, #16
 8014b98:	f001 f840 	bl	8015c1c <uxr_serialize_message_header>
 8014b9c:	b00d      	add	sp, #52	@ 0x34
 8014b9e:	bd30      	pop	{r4, r5, pc}

08014ba0 <uxr_read_session_header>:
 8014ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba4:	4607      	mov	r7, r0
 8014ba6:	b084      	sub	sp, #16
 8014ba8:	4608      	mov	r0, r1
 8014baa:	460c      	mov	r4, r1
 8014bac:	4615      	mov	r5, r2
 8014bae:	461e      	mov	r6, r3
 8014bb0:	f7f9 fc14 	bl	800e3dc <ucdr_buffer_remaining>
 8014bb4:	2808      	cmp	r0, #8
 8014bb6:	d803      	bhi.n	8014bc0 <uxr_read_session_header+0x20>
 8014bb8:	2000      	movs	r0, #0
 8014bba:	b004      	add	sp, #16
 8014bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc0:	f10d 080c 	add.w	r8, sp, #12
 8014bc4:	4633      	mov	r3, r6
 8014bc6:	462a      	mov	r2, r5
 8014bc8:	f8cd 8000 	str.w	r8, [sp]
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f10d 010b 	add.w	r1, sp, #11
 8014bd2:	f001 f841 	bl	8015c58 <uxr_deserialize_message_header>
 8014bd6:	783a      	ldrb	r2, [r7, #0]
 8014bd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d1eb      	bne.n	8014bb8 <uxr_read_session_header+0x18>
 8014be0:	061b      	lsls	r3, r3, #24
 8014be2:	d41c      	bmi.n	8014c1e <uxr_read_session_header+0x7e>
 8014be4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014be8:	787b      	ldrb	r3, [r7, #1]
 8014bea:	429a      	cmp	r2, r3
 8014bec:	d003      	beq.n	8014bf6 <uxr_read_session_header+0x56>
 8014bee:	2001      	movs	r0, #1
 8014bf0:	f080 0001 	eor.w	r0, r0, #1
 8014bf4:	e7e1      	b.n	8014bba <uxr_read_session_header+0x1a>
 8014bf6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014bfa:	78bb      	ldrb	r3, [r7, #2]
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	f107 0102 	add.w	r1, r7, #2
 8014c02:	d1f4      	bne.n	8014bee <uxr_read_session_header+0x4e>
 8014c04:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8014c08:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014c0c:	429a      	cmp	r2, r3
 8014c0e:	d1ee      	bne.n	8014bee <uxr_read_session_header+0x4e>
 8014c10:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8014c14:	784b      	ldrb	r3, [r1, #1]
 8014c16:	429a      	cmp	r2, r3
 8014c18:	d1e9      	bne.n	8014bee <uxr_read_session_header+0x4e>
 8014c1a:	2000      	movs	r0, #0
 8014c1c:	e7e8      	b.n	8014bf0 <uxr_read_session_header+0x50>
 8014c1e:	2001      	movs	r0, #1
 8014c20:	e7cb      	b.n	8014bba <uxr_read_session_header+0x1a>
 8014c22:	bf00      	nop

08014c24 <uxr_session_header_offset>:
 8014c24:	f990 3000 	ldrsb.w	r3, [r0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	bfac      	ite	ge
 8014c2c:	2008      	movge	r0, #8
 8014c2e:	2004      	movlt	r0, #4
 8014c30:	4770      	bx	lr
 8014c32:	bf00      	nop

08014c34 <uxr_init_base_object_request>:
 8014c34:	b510      	push	{r4, lr}
 8014c36:	88c3      	ldrh	r3, [r0, #6]
 8014c38:	b082      	sub	sp, #8
 8014c3a:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014c3e:	9101      	str	r1, [sp, #4]
 8014c40:	f1a3 010a 	sub.w	r1, r3, #10
 8014c44:	b289      	uxth	r1, r1
 8014c46:	42a1      	cmp	r1, r4
 8014c48:	d80e      	bhi.n	8014c68 <uxr_init_base_object_request+0x34>
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	b29c      	uxth	r4, r3
 8014c4e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	80c4      	strh	r4, [r0, #6]
 8014c56:	9801      	ldr	r0, [sp, #4]
 8014c58:	7011      	strb	r1, [r2, #0]
 8014c5a:	7053      	strb	r3, [r2, #1]
 8014c5c:	1c91      	adds	r1, r2, #2
 8014c5e:	f7fe fd1b 	bl	8013698 <uxr_object_id_to_raw>
 8014c62:	4620      	mov	r0, r4
 8014c64:	b002      	add	sp, #8
 8014c66:	bd10      	pop	{r4, pc}
 8014c68:	230a      	movs	r3, #10
 8014c6a:	2100      	movs	r1, #0
 8014c6c:	461c      	mov	r4, r3
 8014c6e:	e7f1      	b.n	8014c54 <uxr_init_base_object_request+0x20>

08014c70 <uxr_parse_base_object_request>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	4604      	mov	r4, r0
 8014c74:	3002      	adds	r0, #2
 8014c76:	460d      	mov	r5, r1
 8014c78:	4616      	mov	r6, r2
 8014c7a:	f7fe fcf9 	bl	8013670 <uxr_object_id_from_raw>
 8014c7e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014c82:	8028      	strh	r0, [r5, #0]
 8014c84:	806b      	strh	r3, [r5, #2]
 8014c86:	7822      	ldrb	r2, [r4, #0]
 8014c88:	7863      	ldrb	r3, [r4, #1]
 8014c8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014c8e:	8033      	strh	r3, [r6, #0]
 8014c90:	bd70      	pop	{r4, r5, r6, pc}
 8014c92:	bf00      	nop

08014c94 <uxr_init_framing_io>:
 8014c94:	2300      	movs	r3, #0
 8014c96:	7041      	strb	r1, [r0, #1]
 8014c98:	7003      	strb	r3, [r0, #0]
 8014c9a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop

08014ca0 <uxr_write_framed_msg>:
 8014ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca4:	4617      	mov	r7, r2
 8014ca6:	7842      	ldrb	r2, [r0, #1]
 8014ca8:	b083      	sub	sp, #12
 8014caa:	460e      	mov	r6, r1
 8014cac:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014cb0:	469a      	mov	sl, r3
 8014cb2:	2901      	cmp	r1, #1
 8014cb4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014cb8:	4604      	mov	r4, r0
 8014cba:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8014cbe:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014cc2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014cc6:	f240 8137 	bls.w	8014f38 <uxr_write_framed_msg+0x298>
 8014cca:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014cce:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014cd2:	2901      	cmp	r1, #1
 8014cd4:	f04f 0202 	mov.w	r2, #2
 8014cd8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cdc:	f240 808f 	bls.w	8014dfe <uxr_write_framed_msg+0x15e>
 8014ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ce2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014ce6:	b2dd      	uxtb	r5, r3
 8014ce8:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014cec:	2203      	movs	r2, #3
 8014cee:	2901      	cmp	r1, #1
 8014cf0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014cf4:	f240 809a 	bls.w	8014e2c <uxr_write_framed_msg+0x18c>
 8014cf8:	18a1      	adds	r1, r4, r2
 8014cfa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014cfc:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8014d00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014d04:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014d08:	3201      	adds	r2, #1
 8014d0a:	2801      	cmp	r0, #1
 8014d0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d10:	f240 80a0 	bls.w	8014e54 <uxr_write_framed_msg+0x1b4>
 8014d14:	18a0      	adds	r0, r4, r2
 8014d16:	3201      	adds	r2, #1
 8014d18:	b2d2      	uxtb	r2, r2
 8014d1a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014d1e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	f000 80a9 	beq.w	8014e7a <uxr_write_framed_msg+0x1da>
 8014d28:	f04f 0900 	mov.w	r9, #0
 8014d2c:	46c8      	mov	r8, r9
 8014d2e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014d32:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014d36:	2901      	cmp	r1, #1
 8014d38:	f240 80c3 	bls.w	8014ec2 <uxr_write_framed_msg+0x222>
 8014d3c:	2a29      	cmp	r2, #41	@ 0x29
 8014d3e:	f200 809f 	bhi.w	8014e80 <uxr_write_framed_msg+0x1e0>
 8014d42:	18a1      	adds	r1, r4, r2
 8014d44:	3201      	adds	r2, #1
 8014d46:	b2d2      	uxtb	r2, r2
 8014d48:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014d4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014d50:	ea89 0303 	eor.w	r3, r9, r3
 8014d54:	498c      	ldr	r1, [pc, #560]	@ (8014f88 <uxr_write_framed_msg+0x2e8>)
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	f108 0801 	add.w	r8, r8, #1
 8014d5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d60:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014d66:	4543      	cmp	r3, r8
 8014d68:	d8e1      	bhi.n	8014d2e <uxr_write_framed_msg+0x8e>
 8014d6a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014d6e:	fa5f f889 	uxtb.w	r8, r9
 8014d72:	9301      	str	r3, [sp, #4]
 8014d74:	f04f 0900 	mov.w	r9, #0
 8014d78:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014d7c:	fa5f f18a 	uxtb.w	r1, sl
 8014d80:	2901      	cmp	r1, #1
 8014d82:	d921      	bls.n	8014dc8 <uxr_write_framed_msg+0x128>
 8014d84:	2a29      	cmp	r2, #41	@ 0x29
 8014d86:	f240 80af 	bls.w	8014ee8 <uxr_write_framed_msg+0x248>
 8014d8a:	2500      	movs	r5, #0
 8014d8c:	e000      	b.n	8014d90 <uxr_write_framed_msg+0xf0>
 8014d8e:	b160      	cbz	r0, 8014daa <uxr_write_framed_msg+0x10a>
 8014d90:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014d94:	1b52      	subs	r2, r2, r5
 8014d96:	465b      	mov	r3, fp
 8014d98:	4421      	add	r1, r4
 8014d9a:	4638      	mov	r0, r7
 8014d9c:	47b0      	blx	r6
 8014d9e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014da2:	4405      	add	r5, r0
 8014da4:	4295      	cmp	r5, r2
 8014da6:	d3f2      	bcc.n	8014d8e <uxr_write_framed_msg+0xee>
 8014da8:	d003      	beq.n	8014db2 <uxr_write_framed_msg+0x112>
 8014daa:	2000      	movs	r0, #0
 8014dac:	b003      	add	sp, #12
 8014dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014db2:	fa5f f18a 	uxtb.w	r1, sl
 8014db6:	f04f 0300 	mov.w	r3, #0
 8014dba:	2901      	cmp	r1, #1
 8014dbc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014dc0:	f04f 0200 	mov.w	r2, #0
 8014dc4:	f200 8090 	bhi.w	8014ee8 <uxr_write_framed_msg+0x248>
 8014dc8:	1c51      	adds	r1, r2, #1
 8014dca:	b2c9      	uxtb	r1, r1
 8014dcc:	2929      	cmp	r1, #41	@ 0x29
 8014dce:	d8dc      	bhi.n	8014d8a <uxr_write_framed_msg+0xea>
 8014dd0:	18a5      	adds	r5, r4, r2
 8014dd2:	4421      	add	r1, r4
 8014dd4:	3202      	adds	r2, #2
 8014dd6:	f088 0820 	eor.w	r8, r8, #32
 8014dda:	4648      	mov	r0, r9
 8014ddc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014de0:	b2d2      	uxtb	r2, r2
 8014de2:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014de6:	f04f 0901 	mov.w	r9, #1
 8014dea:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014dee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014df2:	2800      	cmp	r0, #0
 8014df4:	f040 8085 	bne.w	8014f02 <uxr_write_framed_msg+0x262>
 8014df8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014dfc:	e7bc      	b.n	8014d78 <uxr_write_framed_msg+0xd8>
 8014dfe:	4611      	mov	r1, r2
 8014e00:	f04f 0c03 	mov.w	ip, #3
 8014e04:	2204      	movs	r2, #4
 8014e06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e08:	4421      	add	r1, r4
 8014e0a:	b2dd      	uxtb	r5, r3
 8014e0c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8014e10:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8014e14:	44a4      	add	ip, r4
 8014e16:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014e1a:	f080 0020 	eor.w	r0, r0, #32
 8014e1e:	2901      	cmp	r1, #1
 8014e20:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014e24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e28:	f63f af66 	bhi.w	8014cf8 <uxr_write_framed_msg+0x58>
 8014e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014e2e:	18a0      	adds	r0, r4, r2
 8014e30:	f085 0520 	eor.w	r5, r5, #32
 8014e34:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014e3c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014e40:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014e44:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014e48:	3202      	adds	r2, #2
 8014e4a:	2801      	cmp	r0, #1
 8014e4c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e50:	f63f af60 	bhi.w	8014d14 <uxr_write_framed_msg+0x74>
 8014e54:	1c50      	adds	r0, r2, #1
 8014e56:	18a5      	adds	r5, r4, r2
 8014e58:	fa54 f080 	uxtab	r0, r4, r0
 8014e5c:	3202      	adds	r2, #2
 8014e5e:	f081 0120 	eor.w	r1, r1, #32
 8014e62:	b2d2      	uxtb	r2, r2
 8014e64:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014e68:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014e6c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014e70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f47f af57 	bne.w	8014d28 <uxr_write_framed_msg+0x88>
 8014e7a:	9301      	str	r3, [sp, #4]
 8014e7c:	4698      	mov	r8, r3
 8014e7e:	e779      	b.n	8014d74 <uxr_write_framed_msg+0xd4>
 8014e80:	2500      	movs	r5, #0
 8014e82:	e001      	b.n	8014e88 <uxr_write_framed_msg+0x1e8>
 8014e84:	2800      	cmp	r0, #0
 8014e86:	d090      	beq.n	8014daa <uxr_write_framed_msg+0x10a>
 8014e88:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014e8c:	1b52      	subs	r2, r2, r5
 8014e8e:	465b      	mov	r3, fp
 8014e90:	4421      	add	r1, r4
 8014e92:	4638      	mov	r0, r7
 8014e94:	47b0      	blx	r6
 8014e96:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014e9a:	4405      	add	r5, r0
 8014e9c:	4295      	cmp	r5, r2
 8014e9e:	d3f1      	bcc.n	8014e84 <uxr_write_framed_msg+0x1e4>
 8014ea0:	d183      	bne.n	8014daa <uxr_write_framed_msg+0x10a>
 8014ea2:	f04f 0300 	mov.w	r3, #0
 8014ea6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014eaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014eac:	4543      	cmp	r3, r8
 8014eae:	d964      	bls.n	8014f7a <uxr_write_framed_msg+0x2da>
 8014eb0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014eb4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014eb8:	2901      	cmp	r1, #1
 8014eba:	f04f 0200 	mov.w	r2, #0
 8014ebe:	f63f af3d 	bhi.w	8014d3c <uxr_write_framed_msg+0x9c>
 8014ec2:	1c51      	adds	r1, r2, #1
 8014ec4:	b2c9      	uxtb	r1, r1
 8014ec6:	2929      	cmp	r1, #41	@ 0x29
 8014ec8:	d8da      	bhi.n	8014e80 <uxr_write_framed_msg+0x1e0>
 8014eca:	18a0      	adds	r0, r4, r2
 8014ecc:	4421      	add	r1, r4
 8014ece:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014ed2:	3202      	adds	r2, #2
 8014ed4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014ed8:	b2d2      	uxtb	r2, r2
 8014eda:	f083 0020 	eor.w	r0, r3, #32
 8014ede:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014ee2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ee6:	e733      	b.n	8014d50 <uxr_write_framed_msg+0xb0>
 8014ee8:	18a1      	adds	r1, r4, r2
 8014eea:	3201      	adds	r2, #1
 8014eec:	4648      	mov	r0, r9
 8014eee:	b2d2      	uxtb	r2, r2
 8014ef0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014ef4:	f04f 0901 	mov.w	r9, #1
 8014ef8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014efc:	2800      	cmp	r0, #0
 8014efe:	f43f af7b 	beq.w	8014df8 <uxr_write_framed_msg+0x158>
 8014f02:	2500      	movs	r5, #0
 8014f04:	e002      	b.n	8014f0c <uxr_write_framed_msg+0x26c>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f43f af4f 	beq.w	8014daa <uxr_write_framed_msg+0x10a>
 8014f0c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014f10:	1b52      	subs	r2, r2, r5
 8014f12:	465b      	mov	r3, fp
 8014f14:	4421      	add	r1, r4
 8014f16:	4638      	mov	r0, r7
 8014f18:	47b0      	blx	r6
 8014f1a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014f1e:	4405      	add	r5, r0
 8014f20:	4295      	cmp	r5, r2
 8014f22:	d3f0      	bcc.n	8014f06 <uxr_write_framed_msg+0x266>
 8014f24:	f47f af41 	bne.w	8014daa <uxr_write_framed_msg+0x10a>
 8014f28:	2300      	movs	r3, #0
 8014f2a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014f2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f30:	b298      	uxth	r0, r3
 8014f32:	b003      	add	sp, #12
 8014f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f38:	217d      	movs	r1, #125	@ 0x7d
 8014f3a:	f082 0220 	eor.w	r2, r2, #32
 8014f3e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014f42:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014f46:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014f4a:	2901      	cmp	r1, #1
 8014f4c:	f04f 0203 	mov.w	r2, #3
 8014f50:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f54:	d804      	bhi.n	8014f60 <uxr_write_framed_msg+0x2c0>
 8014f56:	4611      	mov	r1, r2
 8014f58:	f04f 0c04 	mov.w	ip, #4
 8014f5c:	2205      	movs	r2, #5
 8014f5e:	e752      	b.n	8014e06 <uxr_write_framed_msg+0x166>
 8014f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014f62:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014f66:	b2dd      	uxtb	r5, r3
 8014f68:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014f6c:	2204      	movs	r2, #4
 8014f6e:	2901      	cmp	r1, #1
 8014f70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014f74:	f63f aec0 	bhi.w	8014cf8 <uxr_write_framed_msg+0x58>
 8014f78:	e758      	b.n	8014e2c <uxr_write_framed_msg+0x18c>
 8014f7a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014f7e:	fa5f f889 	uxtb.w	r8, r9
 8014f82:	9301      	str	r3, [sp, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	e6f5      	b.n	8014d74 <uxr_write_framed_msg+0xd4>
 8014f88:	0801e4dc 	.word	0x0801e4dc

08014f8c <uxr_framing_read_transport>:
 8014f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f90:	4604      	mov	r4, r0
 8014f92:	b083      	sub	sp, #12
 8014f94:	461f      	mov	r7, r3
 8014f96:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014f9a:	4689      	mov	r9, r1
 8014f9c:	4692      	mov	sl, r2
 8014f9e:	f000 fc89 	bl	80158b4 <uxr_millis>
 8014fa2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014fa6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014faa:	42b3      	cmp	r3, r6
 8014fac:	4680      	mov	r8, r0
 8014fae:	d061      	beq.n	8015074 <uxr_framing_read_transport+0xe8>
 8014fb0:	d81c      	bhi.n	8014fec <uxr_framing_read_transport+0x60>
 8014fb2:	1e75      	subs	r5, r6, #1
 8014fb4:	1aed      	subs	r5, r5, r3
 8014fb6:	b2ed      	uxtb	r5, r5
 8014fb8:	2600      	movs	r6, #0
 8014fba:	455d      	cmp	r5, fp
 8014fbc:	d81f      	bhi.n	8014ffe <uxr_framing_read_transport+0x72>
 8014fbe:	19ab      	adds	r3, r5, r6
 8014fc0:	455b      	cmp	r3, fp
 8014fc2:	bf84      	itt	hi
 8014fc4:	ebab 0605 	subhi.w	r6, fp, r5
 8014fc8:	b2f6      	uxtbhi	r6, r6
 8014fca:	b9ed      	cbnz	r5, 8015008 <uxr_framing_read_transport+0x7c>
 8014fcc:	f04f 0b00 	mov.w	fp, #0
 8014fd0:	f000 fc70 	bl	80158b4 <uxr_millis>
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	eba0 0808 	sub.w	r8, r0, r8
 8014fda:	eba3 0308 	sub.w	r3, r3, r8
 8014fde:	4658      	mov	r0, fp
 8014fe0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014fe4:	603b      	str	r3, [r7, #0]
 8014fe6:	b003      	add	sp, #12
 8014fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fec:	2e00      	cmp	r6, #0
 8014fee:	d049      	beq.n	8015084 <uxr_framing_read_transport+0xf8>
 8014ff0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014ff4:	b2ed      	uxtb	r5, r5
 8014ff6:	3e01      	subs	r6, #1
 8014ff8:	455d      	cmp	r5, fp
 8014ffa:	b2f6      	uxtb	r6, r6
 8014ffc:	d9df      	bls.n	8014fbe <uxr_framing_read_transport+0x32>
 8014ffe:	fa5f f58b 	uxtb.w	r5, fp
 8015002:	2600      	movs	r6, #0
 8015004:	2d00      	cmp	r5, #0
 8015006:	d0e1      	beq.n	8014fcc <uxr_framing_read_transport+0x40>
 8015008:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801500c:	3102      	adds	r1, #2
 801500e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015010:	9300      	str	r3, [sp, #0]
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	4421      	add	r1, r4
 8015016:	462a      	mov	r2, r5
 8015018:	4650      	mov	r0, sl
 801501a:	47c8      	blx	r9
 801501c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8015020:	4a1a      	ldr	r2, [pc, #104]	@ (801508c <uxr_framing_read_transport+0x100>)
 8015022:	4403      	add	r3, r0
 8015024:	0859      	lsrs	r1, r3, #1
 8015026:	fba2 2101 	umull	r2, r1, r2, r1
 801502a:	0889      	lsrs	r1, r1, #2
 801502c:	222a      	movs	r2, #42	@ 0x2a
 801502e:	fb02 3111 	mls	r1, r2, r1, r3
 8015032:	4683      	mov	fp, r0
 8015034:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8015038:	2800      	cmp	r0, #0
 801503a:	d0c7      	beq.n	8014fcc <uxr_framing_read_transport+0x40>
 801503c:	42a8      	cmp	r0, r5
 801503e:	d1c7      	bne.n	8014fd0 <uxr_framing_read_transport+0x44>
 8015040:	2e00      	cmp	r6, #0
 8015042:	d0c5      	beq.n	8014fd0 <uxr_framing_read_transport+0x44>
 8015044:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015046:	9300      	str	r3, [sp, #0]
 8015048:	3102      	adds	r1, #2
 801504a:	4632      	mov	r2, r6
 801504c:	4421      	add	r1, r4
 801504e:	2300      	movs	r3, #0
 8015050:	4650      	mov	r0, sl
 8015052:	47c8      	blx	r9
 8015054:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015058:	4a0c      	ldr	r2, [pc, #48]	@ (801508c <uxr_framing_read_transport+0x100>)
 801505a:	180b      	adds	r3, r1, r0
 801505c:	0859      	lsrs	r1, r3, #1
 801505e:	fba2 1201 	umull	r1, r2, r2, r1
 8015062:	0892      	lsrs	r2, r2, #2
 8015064:	212a      	movs	r1, #42	@ 0x2a
 8015066:	fb01 3312 	mls	r3, r1, r2, r3
 801506a:	eb00 0b05 	add.w	fp, r0, r5
 801506e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8015072:	e7ad      	b.n	8014fd0 <uxr_framing_read_transport+0x44>
 8015074:	2600      	movs	r6, #0
 8015076:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801507a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801507c:	d9bf      	bls.n	8014ffe <uxr_framing_read_transport+0x72>
 801507e:	2102      	movs	r1, #2
 8015080:	2529      	movs	r5, #41	@ 0x29
 8015082:	e7c4      	b.n	801500e <uxr_framing_read_transport+0x82>
 8015084:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8015088:	b2ed      	uxtb	r5, r5
 801508a:	e796      	b.n	8014fba <uxr_framing_read_transport+0x2e>
 801508c:	30c30c31 	.word	0x30c30c31

08015090 <uxr_read_framed_msg>:
 8015090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015094:	461e      	mov	r6, r3
 8015096:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801509a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801509e:	429d      	cmp	r5, r3
 80150a0:	b083      	sub	sp, #12
 80150a2:	4604      	mov	r4, r0
 80150a4:	4688      	mov	r8, r1
 80150a6:	4691      	mov	r9, r2
 80150a8:	f000 8188 	beq.w	80153bc <uxr_read_framed_msg+0x32c>
 80150ac:	7823      	ldrb	r3, [r4, #0]
 80150ae:	4dc1      	ldr	r5, [pc, #772]	@ (80153b4 <uxr_read_framed_msg+0x324>)
 80150b0:	4fc1      	ldr	r7, [pc, #772]	@ (80153b8 <uxr_read_framed_msg+0x328>)
 80150b2:	2b07      	cmp	r3, #7
 80150b4:	d8fd      	bhi.n	80150b2 <uxr_read_framed_msg+0x22>
 80150b6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80150ba:	0115      	.short	0x0115
 80150bc:	00d600f6 	.word	0x00d600f6
 80150c0:	009000b9 	.word	0x009000b9
 80150c4:	0030004d 	.word	0x0030004d
 80150c8:	0008      	.short	0x0008
 80150ca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80150ce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80150d2:	4299      	cmp	r1, r3
 80150d4:	f000 814a 	beq.w	801536c <uxr_read_framed_msg+0x2dc>
 80150d8:	18e2      	adds	r2, r4, r3
 80150da:	7892      	ldrb	r2, [r2, #2]
 80150dc:	2a7d      	cmp	r2, #125	@ 0x7d
 80150de:	f000 8199 	beq.w	8015414 <uxr_read_framed_msg+0x384>
 80150e2:	3301      	adds	r3, #1
 80150e4:	0858      	lsrs	r0, r3, #1
 80150e6:	fba5 1000 	umull	r1, r0, r5, r0
 80150ea:	0880      	lsrs	r0, r0, #2
 80150ec:	212a      	movs	r1, #42	@ 0x2a
 80150ee:	fb01 3310 	mls	r3, r1, r0, r3
 80150f2:	2a7e      	cmp	r2, #126	@ 0x7e
 80150f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150f8:	f000 8252 	beq.w	80155a0 <uxr_read_framed_msg+0x510>
 80150fc:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80150fe:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8015100:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015104:	b29b      	uxth	r3, r3
 8015106:	2200      	movs	r2, #0
 8015108:	4299      	cmp	r1, r3
 801510a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801510c:	7022      	strb	r2, [r4, #0]
 801510e:	f000 8179 	beq.w	8015404 <uxr_read_framed_msg+0x374>
 8015112:	2000      	movs	r0, #0
 8015114:	b003      	add	sp, #12
 8015116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801511a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801511e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015122:	4299      	cmp	r1, r3
 8015124:	f000 8131 	beq.w	801538a <uxr_read_framed_msg+0x2fa>
 8015128:	18e2      	adds	r2, r4, r3
 801512a:	7890      	ldrb	r0, [r2, #2]
 801512c:	287d      	cmp	r0, #125	@ 0x7d
 801512e:	f000 8190 	beq.w	8015452 <uxr_read_framed_msg+0x3c2>
 8015132:	3301      	adds	r3, #1
 8015134:	085a      	lsrs	r2, r3, #1
 8015136:	fba5 1202 	umull	r1, r2, r5, r2
 801513a:	0892      	lsrs	r2, r2, #2
 801513c:	212a      	movs	r1, #42	@ 0x2a
 801513e:	fb01 3312 	mls	r3, r1, r2, r3
 8015142:	287e      	cmp	r0, #126	@ 0x7e
 8015144:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015148:	f000 821a 	beq.w	8015580 <uxr_read_framed_msg+0x4f0>
 801514c:	2307      	movs	r3, #7
 801514e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8015150:	7023      	strb	r3, [r4, #0]
 8015152:	e7ae      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 8015154:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015156:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801515a:	459e      	cmp	lr, r3
 801515c:	d938      	bls.n	80151d0 <uxr_read_framed_msg+0x140>
 801515e:	ee07 8a90 	vmov	s15, r8
 8015162:	212a      	movs	r1, #42	@ 0x2a
 8015164:	e020      	b.n	80151a8 <uxr_read_framed_msg+0x118>
 8015166:	f89b c002 	ldrb.w	ip, [fp, #2]
 801516a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801516e:	f000 80d4 	beq.w	801531a <uxr_read_framed_msg+0x28a>
 8015172:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8015176:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801517a:	f000 8219 	beq.w	80155b0 <uxr_read_framed_msg+0x520>
 801517e:	f806 c003 	strb.w	ip, [r6, r3]
 8015182:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8015186:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8015188:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801518c:	ea8a 000c 	eor.w	r0, sl, ip
 8015190:	b2c0      	uxtb	r0, r0
 8015192:	3301      	adds	r3, #1
 8015194:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8015198:	b29b      	uxth	r3, r3
 801519a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801519e:	4573      	cmp	r3, lr
 80151a0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80151a2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80151a4:	f080 8120 	bcs.w	80153e8 <uxr_read_framed_msg+0x358>
 80151a8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80151ac:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80151b0:	f100 0c01 	add.w	ip, r0, #1
 80151b4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80151b8:	fba5 8202 	umull	r8, r2, r5, r2
 80151bc:	0892      	lsrs	r2, r2, #2
 80151be:	4582      	cmp	sl, r0
 80151c0:	eb04 0b00 	add.w	fp, r4, r0
 80151c4:	fb01 c212 	mls	r2, r1, r2, ip
 80151c8:	d1cd      	bne.n	8015166 <uxr_read_framed_msg+0xd6>
 80151ca:	ee17 8a90 	vmov	r8, s15
 80151ce:	459e      	cmp	lr, r3
 80151d0:	f040 8111 	bne.w	80153f6 <uxr_read_framed_msg+0x366>
 80151d4:	2306      	movs	r3, #6
 80151d6:	7023      	strb	r3, [r4, #0]
 80151d8:	e76b      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80151da:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80151de:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80151e2:	4298      	cmp	r0, r3
 80151e4:	f000 80c2 	beq.w	801536c <uxr_read_framed_msg+0x2dc>
 80151e8:	18e2      	adds	r2, r4, r3
 80151ea:	7891      	ldrb	r1, [r2, #2]
 80151ec:	297d      	cmp	r1, #125	@ 0x7d
 80151ee:	f000 814c 	beq.w	801548a <uxr_read_framed_msg+0x3fa>
 80151f2:	3301      	adds	r3, #1
 80151f4:	085a      	lsrs	r2, r3, #1
 80151f6:	fba5 0202 	umull	r0, r2, r5, r2
 80151fa:	0892      	lsrs	r2, r2, #2
 80151fc:	202a      	movs	r0, #42	@ 0x2a
 80151fe:	fb00 3312 	mls	r3, r0, r2, r3
 8015202:	297e      	cmp	r1, #126	@ 0x7e
 8015204:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015208:	f000 81ca 	beq.w	80155a0 <uxr_read_framed_msg+0x510>
 801520c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801520e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015212:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015214:	b29b      	uxth	r3, r3
 8015216:	2000      	movs	r0, #0
 8015218:	428b      	cmp	r3, r1
 801521a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801521c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801521e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8015220:	f240 80df 	bls.w	80153e2 <uxr_read_framed_msg+0x352>
 8015224:	7020      	strb	r0, [r4, #0]
 8015226:	b003      	add	sp, #12
 8015228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801522c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8015230:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8015234:	4299      	cmp	r1, r3
 8015236:	f000 80a8 	beq.w	801538a <uxr_read_framed_msg+0x2fa>
 801523a:	18e2      	adds	r2, r4, r3
 801523c:	7890      	ldrb	r0, [r2, #2]
 801523e:	287d      	cmp	r0, #125	@ 0x7d
 8015240:	f000 8164 	beq.w	801550c <uxr_read_framed_msg+0x47c>
 8015244:	3301      	adds	r3, #1
 8015246:	085a      	lsrs	r2, r3, #1
 8015248:	fba5 1202 	umull	r1, r2, r5, r2
 801524c:	0892      	lsrs	r2, r2, #2
 801524e:	212a      	movs	r1, #42	@ 0x2a
 8015250:	fb01 3312 	mls	r3, r1, r2, r3
 8015254:	287e      	cmp	r0, #126	@ 0x7e
 8015256:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801525a:	f000 8191 	beq.w	8015580 <uxr_read_framed_msg+0x4f0>
 801525e:	2304      	movs	r3, #4
 8015260:	8620      	strh	r0, [r4, #48]	@ 0x30
 8015262:	7023      	strb	r3, [r4, #0]
 8015264:	e725      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 8015266:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801526a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801526e:	4290      	cmp	r0, r2
 8015270:	f000 80b3 	beq.w	80153da <uxr_read_framed_msg+0x34a>
 8015274:	18a3      	adds	r3, r4, r2
 8015276:	7899      	ldrb	r1, [r3, #2]
 8015278:	297d      	cmp	r1, #125	@ 0x7d
 801527a:	f000 8164 	beq.w	8015546 <uxr_read_framed_msg+0x4b6>
 801527e:	3201      	adds	r2, #1
 8015280:	0850      	lsrs	r0, r2, #1
 8015282:	fba5 3000 	umull	r3, r0, r5, r0
 8015286:	0880      	lsrs	r0, r0, #2
 8015288:	232a      	movs	r3, #42	@ 0x2a
 801528a:	fb03 2210 	mls	r2, r3, r0, r2
 801528e:	297e      	cmp	r1, #126	@ 0x7e
 8015290:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015294:	f000 8188 	beq.w	80155a8 <uxr_read_framed_msg+0x518>
 8015298:	7863      	ldrb	r3, [r4, #1]
 801529a:	428b      	cmp	r3, r1
 801529c:	bf0c      	ite	eq
 801529e:	2303      	moveq	r3, #3
 80152a0:	2300      	movne	r3, #0
 80152a2:	7023      	strb	r3, [r4, #0]
 80152a4:	e705      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80152a6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80152aa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80152ae:	2200      	movs	r2, #0
 80152b0:	4299      	cmp	r1, r3
 80152b2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80152b6:	d06c      	beq.n	8015392 <uxr_read_framed_msg+0x302>
 80152b8:	18e2      	adds	r2, r4, r3
 80152ba:	7890      	ldrb	r0, [r2, #2]
 80152bc:	287d      	cmp	r0, #125	@ 0x7d
 80152be:	f000 8101 	beq.w	80154c4 <uxr_read_framed_msg+0x434>
 80152c2:	3301      	adds	r3, #1
 80152c4:	085a      	lsrs	r2, r3, #1
 80152c6:	fba5 1202 	umull	r1, r2, r5, r2
 80152ca:	0892      	lsrs	r2, r2, #2
 80152cc:	212a      	movs	r1, #42	@ 0x2a
 80152ce:	fb01 3312 	mls	r3, r1, r2, r3
 80152d2:	287e      	cmp	r0, #126	@ 0x7e
 80152d4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80152d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80152dc:	d059      	beq.n	8015392 <uxr_read_framed_msg+0x302>
 80152de:	2302      	movs	r3, #2
 80152e0:	7023      	strb	r3, [r4, #0]
 80152e2:	e6e6      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80152e4:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80152e8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80152ec:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80152f0:	1c51      	adds	r1, r2, #1
 80152f2:	084b      	lsrs	r3, r1, #1
 80152f4:	fba5 c303 	umull	ip, r3, r5, r3
 80152f8:	089b      	lsrs	r3, r3, #2
 80152fa:	fb0e 1313 	mls	r3, lr, r3, r1
 80152fe:	4592      	cmp	sl, r2
 8015300:	eb04 0002 	add.w	r0, r4, r2
 8015304:	b2da      	uxtb	r2, r3
 8015306:	f43f af04 	beq.w	8015112 <uxr_read_framed_msg+0x82>
 801530a:	7883      	ldrb	r3, [r0, #2]
 801530c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015310:	2b7e      	cmp	r3, #126	@ 0x7e
 8015312:	d1ed      	bne.n	80152f0 <uxr_read_framed_msg+0x260>
 8015314:	2301      	movs	r3, #1
 8015316:	7023      	strb	r3, [r4, #0]
 8015318:	e6cb      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 801531a:	f100 0c01 	add.w	ip, r0, #1
 801531e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015322:	fba5 8202 	umull	r8, r2, r5, r2
 8015326:	0892      	lsrs	r2, r2, #2
 8015328:	fb01 c212 	mls	r2, r1, r2, ip
 801532c:	eb04 0c02 	add.w	ip, r4, r2
 8015330:	b2d2      	uxtb	r2, r2
 8015332:	4592      	cmp	sl, r2
 8015334:	f100 0002 	add.w	r0, r0, #2
 8015338:	f43f af47 	beq.w	80151ca <uxr_read_framed_msg+0x13a>
 801533c:	0842      	lsrs	r2, r0, #1
 801533e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8015342:	fba5 8202 	umull	r8, r2, r5, r2
 8015346:	0892      	lsrs	r2, r2, #2
 8015348:	fb01 0012 	mls	r0, r1, r2, r0
 801534c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8015350:	f08a 0c20 	eor.w	ip, sl, #32
 8015354:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8015358:	f47f af11 	bne.w	801517e <uxr_read_framed_msg+0xee>
 801535c:	459e      	cmp	lr, r3
 801535e:	ee17 8a90 	vmov	r8, s15
 8015362:	f43f af37 	beq.w	80151d4 <uxr_read_framed_msg+0x144>
 8015366:	2301      	movs	r3, #1
 8015368:	7023      	strb	r3, [r4, #0]
 801536a:	e6a2      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 801536c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	2301      	movs	r3, #1
 8015372:	9301      	str	r3, [sp, #4]
 8015374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015376:	464a      	mov	r2, r9
 8015378:	4641      	mov	r1, r8
 801537a:	4620      	mov	r0, r4
 801537c:	f7ff fe06 	bl	8014f8c <uxr_framing_read_transport>
 8015380:	2800      	cmp	r0, #0
 8015382:	f43f aec6 	beq.w	8015112 <uxr_read_framed_msg+0x82>
 8015386:	7823      	ldrb	r3, [r4, #0]
 8015388:	e693      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 801538a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801538c:	9300      	str	r3, [sp, #0]
 801538e:	2302      	movs	r3, #2
 8015390:	e7ef      	b.n	8015372 <uxr_read_framed_msg+0x2e2>
 8015392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015394:	9300      	str	r3, [sp, #0]
 8015396:	2304      	movs	r3, #4
 8015398:	9301      	str	r3, [sp, #4]
 801539a:	464a      	mov	r2, r9
 801539c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801539e:	4641      	mov	r1, r8
 80153a0:	4620      	mov	r0, r4
 80153a2:	f7ff fdf3 	bl	8014f8c <uxr_framing_read_transport>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d1ed      	bne.n	8015386 <uxr_read_framed_msg+0x2f6>
 80153aa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80153ae:	2b7e      	cmp	r3, #126	@ 0x7e
 80153b0:	d0e9      	beq.n	8015386 <uxr_read_framed_msg+0x2f6>
 80153b2:	e6ae      	b.n	8015112 <uxr_read_framed_msg+0x82>
 80153b4:	30c30c31 	.word	0x30c30c31
 80153b8:	0801e4dc 	.word	0x0801e4dc
 80153bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153be:	9300      	str	r3, [sp, #0]
 80153c0:	2305      	movs	r3, #5
 80153c2:	9301      	str	r3, [sp, #4]
 80153c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153c6:	f7ff fde1 	bl	8014f8c <uxr_framing_read_transport>
 80153ca:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80153ce:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80153d2:	429a      	cmp	r2, r3
 80153d4:	f43f ae9d 	beq.w	8015112 <uxr_read_framed_msg+0x82>
 80153d8:	e668      	b.n	80150ac <uxr_read_framed_msg+0x1c>
 80153da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153dc:	9300      	str	r3, [sp, #0]
 80153de:	2303      	movs	r3, #3
 80153e0:	e7c7      	b.n	8015372 <uxr_read_framed_msg+0x2e2>
 80153e2:	2305      	movs	r3, #5
 80153e4:	7023      	strb	r3, [r4, #0]
 80153e6:	e664      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80153e8:	ee17 8a90 	vmov	r8, s15
 80153ec:	f43f aef2 	beq.w	80151d4 <uxr_read_framed_msg+0x144>
 80153f0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80153f4:	d08e      	beq.n	8015314 <uxr_read_framed_msg+0x284>
 80153f6:	ebae 0303 	sub.w	r3, lr, r3
 80153fa:	3302      	adds	r3, #2
 80153fc:	9301      	str	r3, [sp, #4]
 80153fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015400:	9300      	str	r3, [sp, #0]
 8015402:	e7b7      	b.n	8015374 <uxr_read_framed_msg+0x2e4>
 8015404:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015406:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801540a:	7013      	strb	r3, [r2, #0]
 801540c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801540e:	b003      	add	sp, #12
 8015410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015414:	f103 0c01 	add.w	ip, r3, #1
 8015418:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801541c:	fba5 0202 	umull	r0, r2, r5, r2
 8015420:	0892      	lsrs	r2, r2, #2
 8015422:	202a      	movs	r0, #42	@ 0x2a
 8015424:	fb00 c212 	mls	r2, r0, r2, ip
 8015428:	fa5f fc82 	uxtb.w	ip, r2
 801542c:	4561      	cmp	r1, ip
 801542e:	d09d      	beq.n	801536c <uxr_read_framed_msg+0x2dc>
 8015430:	3302      	adds	r3, #2
 8015432:	4422      	add	r2, r4
 8015434:	0859      	lsrs	r1, r3, #1
 8015436:	7892      	ldrb	r2, [r2, #2]
 8015438:	fba5 c101 	umull	ip, r1, r5, r1
 801543c:	0889      	lsrs	r1, r1, #2
 801543e:	fb00 3311 	mls	r3, r0, r1, r3
 8015442:	2a7e      	cmp	r2, #126	@ 0x7e
 8015444:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015448:	f000 80aa 	beq.w	80155a0 <uxr_read_framed_msg+0x510>
 801544c:	f082 0220 	eor.w	r2, r2, #32
 8015450:	e654      	b.n	80150fc <uxr_read_framed_msg+0x6c>
 8015452:	1c58      	adds	r0, r3, #1
 8015454:	0842      	lsrs	r2, r0, #1
 8015456:	fba5 c202 	umull	ip, r2, r5, r2
 801545a:	0892      	lsrs	r2, r2, #2
 801545c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015460:	fb0c 0212 	mls	r2, ip, r2, r0
 8015464:	b2d0      	uxtb	r0, r2
 8015466:	4281      	cmp	r1, r0
 8015468:	d08f      	beq.n	801538a <uxr_read_framed_msg+0x2fa>
 801546a:	4422      	add	r2, r4
 801546c:	3302      	adds	r3, #2
 801546e:	7890      	ldrb	r0, [r2, #2]
 8015470:	085a      	lsrs	r2, r3, #1
 8015472:	fba5 1202 	umull	r1, r2, r5, r2
 8015476:	0892      	lsrs	r2, r2, #2
 8015478:	fb0c 3312 	mls	r3, ip, r2, r3
 801547c:	287e      	cmp	r0, #126	@ 0x7e
 801547e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015482:	d07d      	beq.n	8015580 <uxr_read_framed_msg+0x4f0>
 8015484:	f080 0020 	eor.w	r0, r0, #32
 8015488:	e660      	b.n	801514c <uxr_read_framed_msg+0xbc>
 801548a:	1c59      	adds	r1, r3, #1
 801548c:	084a      	lsrs	r2, r1, #1
 801548e:	fba5 c202 	umull	ip, r2, r5, r2
 8015492:	0892      	lsrs	r2, r2, #2
 8015494:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015498:	fb0c 1212 	mls	r2, ip, r2, r1
 801549c:	b2d1      	uxtb	r1, r2
 801549e:	4288      	cmp	r0, r1
 80154a0:	f43f af64 	beq.w	801536c <uxr_read_framed_msg+0x2dc>
 80154a4:	4422      	add	r2, r4
 80154a6:	3302      	adds	r3, #2
 80154a8:	7891      	ldrb	r1, [r2, #2]
 80154aa:	085a      	lsrs	r2, r3, #1
 80154ac:	fba5 0202 	umull	r0, r2, r5, r2
 80154b0:	0892      	lsrs	r2, r2, #2
 80154b2:	fb0c 3312 	mls	r3, ip, r2, r3
 80154b6:	297e      	cmp	r1, #126	@ 0x7e
 80154b8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154bc:	d070      	beq.n	80155a0 <uxr_read_framed_msg+0x510>
 80154be:	f081 0120 	eor.w	r1, r1, #32
 80154c2:	e6a3      	b.n	801520c <uxr_read_framed_msg+0x17c>
 80154c4:	f103 0c01 	add.w	ip, r3, #1
 80154c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80154cc:	fba5 0202 	umull	r0, r2, r5, r2
 80154d0:	0892      	lsrs	r2, r2, #2
 80154d2:	202a      	movs	r0, #42	@ 0x2a
 80154d4:	fb00 c212 	mls	r2, r0, r2, ip
 80154d8:	fa5f fc82 	uxtb.w	ip, r2
 80154dc:	4561      	cmp	r1, ip
 80154de:	f43f af58 	beq.w	8015392 <uxr_read_framed_msg+0x302>
 80154e2:	4422      	add	r2, r4
 80154e4:	3302      	adds	r3, #2
 80154e6:	7891      	ldrb	r1, [r2, #2]
 80154e8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80154ec:	085a      	lsrs	r2, r3, #1
 80154ee:	fba5 c202 	umull	ip, r2, r5, r2
 80154f2:	0892      	lsrs	r2, r2, #2
 80154f4:	fb00 3312 	mls	r3, r0, r2, r3
 80154f8:	297e      	cmp	r1, #126	@ 0x7e
 80154fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80154fe:	f43f af48 	beq.w	8015392 <uxr_read_framed_msg+0x302>
 8015502:	f081 0120 	eor.w	r1, r1, #32
 8015506:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801550a:	e6e8      	b.n	80152de <uxr_read_framed_msg+0x24e>
 801550c:	1c58      	adds	r0, r3, #1
 801550e:	0842      	lsrs	r2, r0, #1
 8015510:	fba5 c202 	umull	ip, r2, r5, r2
 8015514:	0892      	lsrs	r2, r2, #2
 8015516:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801551a:	fb0c 0212 	mls	r2, ip, r2, r0
 801551e:	b2d0      	uxtb	r0, r2
 8015520:	4281      	cmp	r1, r0
 8015522:	f43f af32 	beq.w	801538a <uxr_read_framed_msg+0x2fa>
 8015526:	4422      	add	r2, r4
 8015528:	3302      	adds	r3, #2
 801552a:	7890      	ldrb	r0, [r2, #2]
 801552c:	085a      	lsrs	r2, r3, #1
 801552e:	fba5 1202 	umull	r1, r2, r5, r2
 8015532:	0892      	lsrs	r2, r2, #2
 8015534:	fb0c 3312 	mls	r3, ip, r2, r3
 8015538:	287e      	cmp	r0, #126	@ 0x7e
 801553a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801553e:	d01f      	beq.n	8015580 <uxr_read_framed_msg+0x4f0>
 8015540:	f080 0020 	eor.w	r0, r0, #32
 8015544:	e68b      	b.n	801525e <uxr_read_framed_msg+0x1ce>
 8015546:	1c51      	adds	r1, r2, #1
 8015548:	084b      	lsrs	r3, r1, #1
 801554a:	fba5 c303 	umull	ip, r3, r5, r3
 801554e:	089b      	lsrs	r3, r3, #2
 8015550:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015554:	fb0c 1313 	mls	r3, ip, r3, r1
 8015558:	b2d9      	uxtb	r1, r3
 801555a:	4288      	cmp	r0, r1
 801555c:	f43f af3d 	beq.w	80153da <uxr_read_framed_msg+0x34a>
 8015560:	3202      	adds	r2, #2
 8015562:	4423      	add	r3, r4
 8015564:	0850      	lsrs	r0, r2, #1
 8015566:	789b      	ldrb	r3, [r3, #2]
 8015568:	fba5 1000 	umull	r1, r0, r5, r0
 801556c:	0880      	lsrs	r0, r0, #2
 801556e:	fb0c 2210 	mls	r2, ip, r0, r2
 8015572:	2b7e      	cmp	r3, #126	@ 0x7e
 8015574:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015578:	d016      	beq.n	80155a8 <uxr_read_framed_msg+0x518>
 801557a:	f083 0120 	eor.w	r1, r3, #32
 801557e:	e68b      	b.n	8015298 <uxr_read_framed_msg+0x208>
 8015580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015582:	9300      	str	r3, [sp, #0]
 8015584:	2302      	movs	r3, #2
 8015586:	9301      	str	r3, [sp, #4]
 8015588:	464a      	mov	r2, r9
 801558a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801558c:	4641      	mov	r1, r8
 801558e:	4620      	mov	r0, r4
 8015590:	f7ff fcfc 	bl	8014f8c <uxr_framing_read_transport>
 8015594:	2800      	cmp	r0, #0
 8015596:	f47f aef6 	bne.w	8015386 <uxr_read_framed_msg+0x2f6>
 801559a:	2301      	movs	r3, #1
 801559c:	7023      	strb	r3, [r4, #0]
 801559e:	e588      	b.n	80150b2 <uxr_read_framed_msg+0x22>
 80155a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	2301      	movs	r3, #1
 80155a6:	e7ee      	b.n	8015586 <uxr_read_framed_msg+0x4f6>
 80155a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155aa:	9300      	str	r3, [sp, #0]
 80155ac:	2303      	movs	r3, #3
 80155ae:	e7ea      	b.n	8015586 <uxr_read_framed_msg+0x4f6>
 80155b0:	ee17 8a90 	vmov	r8, s15
 80155b4:	e6ae      	b.n	8015314 <uxr_read_framed_msg+0x284>
 80155b6:	bf00      	nop

080155b8 <uxr_stream_id>:
 80155b8:	2901      	cmp	r1, #1
 80155ba:	b082      	sub	sp, #8
 80155bc:	d01d      	beq.n	80155fa <uxr_stream_id+0x42>
 80155be:	2902      	cmp	r1, #2
 80155c0:	f04f 0c00 	mov.w	ip, #0
 80155c4:	d01e      	beq.n	8015604 <uxr_stream_id+0x4c>
 80155c6:	2300      	movs	r3, #0
 80155c8:	f36c 0307 	bfi	r3, ip, #0, #8
 80155cc:	f360 230f 	bfi	r3, r0, #8, #8
 80155d0:	f361 4317 	bfi	r3, r1, #16, #8
 80155d4:	f362 631f 	bfi	r3, r2, #24, #8
 80155d8:	b2da      	uxtb	r2, r3
 80155da:	2000      	movs	r0, #0
 80155dc:	f362 0007 	bfi	r0, r2, #0, #8
 80155e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80155e4:	f362 200f 	bfi	r0, r2, #8, #8
 80155e8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80155ec:	f362 4017 	bfi	r0, r2, #16, #8
 80155f0:	0e1b      	lsrs	r3, r3, #24
 80155f2:	f363 601f 	bfi	r0, r3, #24, #8
 80155f6:	b002      	add	sp, #8
 80155f8:	4770      	bx	lr
 80155fa:	f100 0c01 	add.w	ip, r0, #1
 80155fe:	fa5f fc8c 	uxtb.w	ip, ip
 8015602:	e7e0      	b.n	80155c6 <uxr_stream_id+0xe>
 8015604:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8015608:	e7dd      	b.n	80155c6 <uxr_stream_id+0xe>
 801560a:	bf00      	nop

0801560c <uxr_stream_id_from_raw>:
 801560c:	b082      	sub	sp, #8
 801560e:	b130      	cbz	r0, 801561e <uxr_stream_id_from_raw+0x12>
 8015610:	0603      	lsls	r3, r0, #24
 8015612:	d420      	bmi.n	8015656 <uxr_stream_id_from_raw+0x4a>
 8015614:	1e42      	subs	r2, r0, #1
 8015616:	b2d2      	uxtb	r2, r2
 8015618:	f04f 0c01 	mov.w	ip, #1
 801561c:	e001      	b.n	8015622 <uxr_stream_id_from_raw+0x16>
 801561e:	4684      	mov	ip, r0
 8015620:	4602      	mov	r2, r0
 8015622:	2300      	movs	r3, #0
 8015624:	f360 0307 	bfi	r3, r0, #0, #8
 8015628:	f362 230f 	bfi	r3, r2, #8, #8
 801562c:	f36c 4317 	bfi	r3, ip, #16, #8
 8015630:	f361 631f 	bfi	r3, r1, #24, #8
 8015634:	b2da      	uxtb	r2, r3
 8015636:	2000      	movs	r0, #0
 8015638:	f362 0007 	bfi	r0, r2, #0, #8
 801563c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015640:	f362 200f 	bfi	r0, r2, #8, #8
 8015644:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015648:	f362 4017 	bfi	r0, r2, #16, #8
 801564c:	0e1b      	lsrs	r3, r3, #24
 801564e:	f363 601f 	bfi	r0, r3, #24, #8
 8015652:	b002      	add	sp, #8
 8015654:	4770      	bx	lr
 8015656:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801565a:	f04f 0c02 	mov.w	ip, #2
 801565e:	e7e0      	b.n	8015622 <uxr_stream_id_from_raw+0x16>

08015660 <uxr_init_stream_storage>:
 8015660:	2300      	movs	r3, #0
 8015662:	7403      	strb	r3, [r0, #16]
 8015664:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8015668:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801566c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015670:	4770      	bx	lr
 8015672:	bf00      	nop

08015674 <uxr_reset_stream_storage>:
 8015674:	b570      	push	{r4, r5, r6, lr}
 8015676:	7c03      	ldrb	r3, [r0, #16]
 8015678:	4604      	mov	r4, r0
 801567a:	b153      	cbz	r3, 8015692 <uxr_reset_stream_storage+0x1e>
 801567c:	4606      	mov	r6, r0
 801567e:	2500      	movs	r5, #0
 8015680:	4630      	mov	r0, r6
 8015682:	f005 f837 	bl	801a6f4 <uxr_reset_output_best_effort_stream>
 8015686:	7c23      	ldrb	r3, [r4, #16]
 8015688:	3501      	adds	r5, #1
 801568a:	42ab      	cmp	r3, r5
 801568c:	f106 0610 	add.w	r6, r6, #16
 8015690:	d8f6      	bhi.n	8015680 <uxr_reset_stream_storage+0xc>
 8015692:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015696:	b163      	cbz	r3, 80156b2 <uxr_reset_stream_storage+0x3e>
 8015698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801569c:	2500      	movs	r5, #0
 801569e:	4630      	mov	r0, r6
 80156a0:	f004 fe2a 	bl	801a2f8 <uxr_reset_input_best_effort_stream>
 80156a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80156a8:	3501      	adds	r5, #1
 80156aa:	42ab      	cmp	r3, r5
 80156ac:	f106 0602 	add.w	r6, r6, #2
 80156b0:	d8f5      	bhi.n	801569e <uxr_reset_stream_storage+0x2a>
 80156b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80156b6:	b163      	cbz	r3, 80156d2 <uxr_reset_stream_storage+0x5e>
 80156b8:	f104 0618 	add.w	r6, r4, #24
 80156bc:	2500      	movs	r5, #0
 80156be:	4630      	mov	r0, r6
 80156c0:	f005 f8c4 	bl	801a84c <uxr_reset_output_reliable_stream>
 80156c4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80156c8:	3501      	adds	r5, #1
 80156ca:	42ab      	cmp	r3, r5
 80156cc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80156d0:	d8f5      	bhi.n	80156be <uxr_reset_stream_storage+0x4a>
 80156d2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80156d6:	b163      	cbz	r3, 80156f2 <uxr_reset_stream_storage+0x7e>
 80156d8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80156dc:	2500      	movs	r5, #0
 80156de:	4630      	mov	r0, r6
 80156e0:	f004 fe7e 	bl	801a3e0 <uxr_reset_input_reliable_stream>
 80156e4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80156e8:	3501      	adds	r5, #1
 80156ea:	42ab      	cmp	r3, r5
 80156ec:	f106 0618 	add.w	r6, r6, #24
 80156f0:	d8f5      	bhi.n	80156de <uxr_reset_stream_storage+0x6a>
 80156f2:	bd70      	pop	{r4, r5, r6, pc}

080156f4 <uxr_add_output_best_effort_buffer>:
 80156f4:	b510      	push	{r4, lr}
 80156f6:	7c04      	ldrb	r4, [r0, #16]
 80156f8:	f104 0c01 	add.w	ip, r4, #1
 80156fc:	b082      	sub	sp, #8
 80156fe:	f880 c010 	strb.w	ip, [r0, #16]
 8015702:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8015706:	f004 ffeb 	bl	801a6e0 <uxr_init_output_best_effort_stream>
 801570a:	2201      	movs	r2, #1
 801570c:	4611      	mov	r1, r2
 801570e:	4620      	mov	r0, r4
 8015710:	b002      	add	sp, #8
 8015712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015716:	f7ff bf4f 	b.w	80155b8 <uxr_stream_id>
 801571a:	bf00      	nop

0801571c <uxr_add_output_reliable_buffer>:
 801571c:	b510      	push	{r4, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	4684      	mov	ip, r0
 8015722:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015726:	9000      	str	r0, [sp, #0]
 8015728:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801572c:	2028      	movs	r0, #40	@ 0x28
 801572e:	fb00 c004 	mla	r0, r0, r4, ip
 8015732:	f104 0e01 	add.w	lr, r4, #1
 8015736:	3018      	adds	r0, #24
 8015738:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 801573c:	f005 f84e 	bl	801a7dc <uxr_init_output_reliable_stream>
 8015740:	2201      	movs	r2, #1
 8015742:	2102      	movs	r1, #2
 8015744:	4620      	mov	r0, r4
 8015746:	b004      	add	sp, #16
 8015748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801574c:	f7ff bf34 	b.w	80155b8 <uxr_stream_id>

08015750 <uxr_add_input_best_effort_buffer>:
 8015750:	b510      	push	{r4, lr}
 8015752:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8015756:	4603      	mov	r3, r0
 8015758:	1c62      	adds	r2, r4, #1
 801575a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801575e:	b082      	sub	sp, #8
 8015760:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015768:	f004 fdc2 	bl	801a2f0 <uxr_init_input_best_effort_stream>
 801576c:	2200      	movs	r2, #0
 801576e:	2101      	movs	r1, #1
 8015770:	4620      	mov	r0, r4
 8015772:	b002      	add	sp, #8
 8015774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015778:	f7ff bf1e 	b.w	80155b8 <uxr_stream_id>

0801577c <uxr_add_input_reliable_buffer>:
 801577c:	b510      	push	{r4, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	4684      	mov	ip, r0
 8015782:	9806      	ldr	r0, [sp, #24]
 8015784:	9000      	str	r0, [sp, #0]
 8015786:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801578a:	2018      	movs	r0, #24
 801578c:	fb00 c004 	mla	r0, r0, r4, ip
 8015790:	f104 0e01 	add.w	lr, r4, #1
 8015794:	3048      	adds	r0, #72	@ 0x48
 8015796:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801579a:	f004 fdf5 	bl	801a388 <uxr_init_input_reliable_stream>
 801579e:	2200      	movs	r2, #0
 80157a0:	2102      	movs	r1, #2
 80157a2:	4620      	mov	r0, r4
 80157a4:	b004      	add	sp, #16
 80157a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80157aa:	f7ff bf05 	b.w	80155b8 <uxr_stream_id>
 80157ae:	bf00      	nop

080157b0 <uxr_get_output_best_effort_stream>:
 80157b0:	7c03      	ldrb	r3, [r0, #16]
 80157b2:	428b      	cmp	r3, r1
 80157b4:	bf8c      	ite	hi
 80157b6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80157ba:	2000      	movls	r0, #0
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop

080157c0 <uxr_get_output_reliable_stream>:
 80157c0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80157c4:	428b      	cmp	r3, r1
 80157c6:	bf83      	ittte	hi
 80157c8:	2328      	movhi	r3, #40	@ 0x28
 80157ca:	fb03 0001 	mlahi	r0, r3, r1, r0
 80157ce:	3018      	addhi	r0, #24
 80157d0:	2000      	movls	r0, #0
 80157d2:	4770      	bx	lr

080157d4 <uxr_get_input_best_effort_stream>:
 80157d4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80157d8:	428b      	cmp	r3, r1
 80157da:	bf86      	itte	hi
 80157dc:	3121      	addhi	r1, #33	@ 0x21
 80157de:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80157e2:	2000      	movls	r0, #0
 80157e4:	4770      	bx	lr
 80157e6:	bf00      	nop

080157e8 <uxr_get_input_reliable_stream>:
 80157e8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80157ec:	428b      	cmp	r3, r1
 80157ee:	bf83      	ittte	hi
 80157f0:	2318      	movhi	r3, #24
 80157f2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80157f6:	3048      	addhi	r0, #72	@ 0x48
 80157f8:	2000      	movls	r0, #0
 80157fa:	4770      	bx	lr

080157fc <uxr_output_streams_confirmed>:
 80157fc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015800:	b183      	cbz	r3, 8015824 <uxr_output_streams_confirmed+0x28>
 8015802:	b570      	push	{r4, r5, r6, lr}
 8015804:	4606      	mov	r6, r0
 8015806:	f100 0518 	add.w	r5, r0, #24
 801580a:	2400      	movs	r4, #0
 801580c:	e001      	b.n	8015812 <uxr_output_streams_confirmed+0x16>
 801580e:	3528      	adds	r5, #40	@ 0x28
 8015810:	b138      	cbz	r0, 8015822 <uxr_output_streams_confirmed+0x26>
 8015812:	4628      	mov	r0, r5
 8015814:	f005 fa8a 	bl	801ad2c <uxr_is_output_up_to_date>
 8015818:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801581c:	3401      	adds	r4, #1
 801581e:	42a3      	cmp	r3, r4
 8015820:	d8f5      	bhi.n	801580e <uxr_output_streams_confirmed+0x12>
 8015822:	bd70      	pop	{r4, r5, r6, pc}
 8015824:	2001      	movs	r0, #1
 8015826:	4770      	bx	lr

08015828 <uxr_buffer_submessage_header>:
 8015828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801582a:	4604      	mov	r4, r0
 801582c:	460e      	mov	r6, r1
 801582e:	2104      	movs	r1, #4
 8015830:	4615      	mov	r5, r2
 8015832:	461f      	mov	r7, r3
 8015834:	f7f8 fdbc 	bl	800e3b0 <ucdr_align_to>
 8015838:	2301      	movs	r3, #1
 801583a:	ea47 0203 	orr.w	r2, r7, r3
 801583e:	4631      	mov	r1, r6
 8015840:	7523      	strb	r3, [r4, #20]
 8015842:	4620      	mov	r0, r4
 8015844:	462b      	mov	r3, r5
 8015846:	f000 fa27 	bl	8015c98 <uxr_serialize_submessage_header>
 801584a:	4620      	mov	r0, r4
 801584c:	f7f8 fdc6 	bl	800e3dc <ucdr_buffer_remaining>
 8015850:	42a8      	cmp	r0, r5
 8015852:	bf34      	ite	cc
 8015854:	2000      	movcc	r0, #0
 8015856:	2001      	movcs	r0, #1
 8015858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801585a:	bf00      	nop

0801585c <uxr_read_submessage_header>:
 801585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015860:	4604      	mov	r4, r0
 8015862:	460d      	mov	r5, r1
 8015864:	2104      	movs	r1, #4
 8015866:	4616      	mov	r6, r2
 8015868:	4698      	mov	r8, r3
 801586a:	f7f8 fda1 	bl	800e3b0 <ucdr_align_to>
 801586e:	4620      	mov	r0, r4
 8015870:	f7f8 fdb4 	bl	800e3dc <ucdr_buffer_remaining>
 8015874:	2803      	cmp	r0, #3
 8015876:	bf8c      	ite	hi
 8015878:	2701      	movhi	r7, #1
 801587a:	2700      	movls	r7, #0
 801587c:	d802      	bhi.n	8015884 <uxr_read_submessage_header+0x28>
 801587e:	4638      	mov	r0, r7
 8015880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015884:	4633      	mov	r3, r6
 8015886:	4642      	mov	r2, r8
 8015888:	4620      	mov	r0, r4
 801588a:	4629      	mov	r1, r5
 801588c:	f000 fa18 	bl	8015cc0 <uxr_deserialize_submessage_header>
 8015890:	f898 3000 	ldrb.w	r3, [r8]
 8015894:	f003 0201 	and.w	r2, r3, #1
 8015898:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801589c:	f888 3000 	strb.w	r3, [r8]
 80158a0:	7522      	strb	r2, [r4, #20]
 80158a2:	4638      	mov	r0, r7
 80158a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158a8 <uxr_submessage_padding>:
 80158a8:	f010 0003 	ands.w	r0, r0, #3
 80158ac:	bf18      	it	ne
 80158ae:	f1c0 0004 	rsbne	r0, r0, #4
 80158b2:	4770      	bx	lr

080158b4 <uxr_millis>:
 80158b4:	b510      	push	{r4, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	4669      	mov	r1, sp
 80158ba:	2001      	movs	r0, #1
 80158bc:	f7ed ff1c 	bl	80036f8 <clock_gettime>
 80158c0:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80158c4:	4906      	ldr	r1, [pc, #24]	@ (80158e0 <uxr_millis+0x2c>)
 80158c6:	fba0 0301 	umull	r0, r3, r0, r1
 80158ca:	1900      	adds	r0, r0, r4
 80158cc:	fb01 3102 	mla	r1, r1, r2, r3
 80158d0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80158d4:	4a03      	ldr	r2, [pc, #12]	@ (80158e4 <uxr_millis+0x30>)
 80158d6:	2300      	movs	r3, #0
 80158d8:	f7eb f920 	bl	8000b1c <__aeabi_ldivmod>
 80158dc:	b004      	add	sp, #16
 80158de:	bd10      	pop	{r4, pc}
 80158e0:	3b9aca00 	.word	0x3b9aca00
 80158e4:	000f4240 	.word	0x000f4240

080158e8 <uxr_nanos>:
 80158e8:	b510      	push	{r4, lr}
 80158ea:	b084      	sub	sp, #16
 80158ec:	4669      	mov	r1, sp
 80158ee:	2001      	movs	r0, #1
 80158f0:	f7ed ff02 	bl	80036f8 <clock_gettime>
 80158f4:	4a06      	ldr	r2, [pc, #24]	@ (8015910 <uxr_nanos+0x28>)
 80158f6:	9800      	ldr	r0, [sp, #0]
 80158f8:	9902      	ldr	r1, [sp, #8]
 80158fa:	9c01      	ldr	r4, [sp, #4]
 80158fc:	fba0 0302 	umull	r0, r3, r0, r2
 8015900:	1840      	adds	r0, r0, r1
 8015902:	fb02 3304 	mla	r3, r2, r4, r3
 8015906:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801590a:	b004      	add	sp, #16
 801590c:	bd10      	pop	{r4, pc}
 801590e:	bf00      	nop
 8015910:	3b9aca00 	.word	0x3b9aca00

08015914 <on_full_output_buffer_fragmented>:
 8015914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015918:	460c      	mov	r4, r1
 801591a:	b08a      	sub	sp, #40	@ 0x28
 801591c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8015920:	4606      	mov	r6, r0
 8015922:	f104 0008 	add.w	r0, r4, #8
 8015926:	f7ff ff4b 	bl	80157c0 <uxr_get_output_reliable_stream>
 801592a:	4605      	mov	r5, r0
 801592c:	f005 fa08 	bl	801ad40 <get_available_free_slots>
 8015930:	b968      	cbnz	r0, 801594e <on_full_output_buffer_fragmented+0x3a>
 8015932:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8015936:	4620      	mov	r0, r4
 8015938:	4798      	blx	r3
 801593a:	b918      	cbnz	r0, 8015944 <on_full_output_buffer_fragmented+0x30>
 801593c:	2001      	movs	r0, #1
 801593e:	b00a      	add	sp, #40	@ 0x28
 8015940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015944:	4628      	mov	r0, r5
 8015946:	f005 f9fb 	bl	801ad40 <get_available_free_slots>
 801594a:	2800      	cmp	r0, #0
 801594c:	d0f6      	beq.n	801593c <on_full_output_buffer_fragmented+0x28>
 801594e:	8929      	ldrh	r1, [r5, #8]
 8015950:	89eb      	ldrh	r3, [r5, #14]
 8015952:	7b28      	ldrb	r0, [r5, #12]
 8015954:	686a      	ldr	r2, [r5, #4]
 8015956:	fbb2 f8f1 	udiv	r8, r2, r1
 801595a:	fbb3 f2f1 	udiv	r2, r3, r1
 801595e:	fb01 3112 	mls	r1, r1, r2, r3
 8015962:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8015966:	b289      	uxth	r1, r1
 8015968:	fb08 f101 	mul.w	r1, r8, r1
 801596c:	30fc      	adds	r0, #252	@ 0xfc
 801596e:	f1a8 0804 	sub.w	r8, r8, #4
 8015972:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8015976:	4440      	add	r0, r8
 8015978:	b287      	uxth	r7, r0
 801597a:	1bdb      	subs	r3, r3, r7
 801597c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015980:	682b      	ldr	r3, [r5, #0]
 8015982:	3104      	adds	r1, #4
 8015984:	4419      	add	r1, r3
 8015986:	4642      	mov	r2, r8
 8015988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801598c:	9300      	str	r3, [sp, #0]
 801598e:	a802      	add	r0, sp, #8
 8015990:	2300      	movs	r3, #0
 8015992:	f7f8 fce1 	bl	800e358 <ucdr_init_buffer_origin_offset>
 8015996:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801599a:	f102 0308 	add.w	r3, r2, #8
 801599e:	4543      	cmp	r3, r8
 80159a0:	d928      	bls.n	80159f4 <on_full_output_buffer_fragmented+0xe0>
 80159a2:	463a      	mov	r2, r7
 80159a4:	2300      	movs	r3, #0
 80159a6:	210d      	movs	r1, #13
 80159a8:	a802      	add	r0, sp, #8
 80159aa:	f7ff ff3d 	bl	8015828 <uxr_buffer_submessage_header>
 80159ae:	8929      	ldrh	r1, [r5, #8]
 80159b0:	89eb      	ldrh	r3, [r5, #14]
 80159b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80159b6:	fb01 3312 	mls	r3, r1, r2, r3
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	686a      	ldr	r2, [r5, #4]
 80159be:	fbb2 f2f1 	udiv	r2, r2, r1
 80159c2:	fb02 f303 	mul.w	r3, r2, r3
 80159c6:	682a      	ldr	r2, [r5, #0]
 80159c8:	f842 8003 	str.w	r8, [r2, r3]
 80159cc:	89e8      	ldrh	r0, [r5, #14]
 80159ce:	2101      	movs	r1, #1
 80159d0:	f005 f9d6 	bl	801ad80 <uxr_seq_num_add>
 80159d4:	9904      	ldr	r1, [sp, #16]
 80159d6:	9a03      	ldr	r2, [sp, #12]
 80159d8:	81e8      	strh	r0, [r5, #14]
 80159da:	1a52      	subs	r2, r2, r1
 80159dc:	4630      	mov	r0, r6
 80159de:	f7f8 fccd 	bl	800e37c <ucdr_init_buffer>
 80159e2:	4630      	mov	r0, r6
 80159e4:	490f      	ldr	r1, [pc, #60]	@ (8015a24 <on_full_output_buffer_fragmented+0x110>)
 80159e6:	4622      	mov	r2, r4
 80159e8:	f7f8 fc9c 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 80159ec:	2000      	movs	r0, #0
 80159ee:	b00a      	add	sp, #40	@ 0x28
 80159f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159f4:	b292      	uxth	r2, r2
 80159f6:	2302      	movs	r3, #2
 80159f8:	210d      	movs	r1, #13
 80159fa:	a802      	add	r0, sp, #8
 80159fc:	f7ff ff14 	bl	8015828 <uxr_buffer_submessage_header>
 8015a00:	8928      	ldrh	r0, [r5, #8]
 8015a02:	89eb      	ldrh	r3, [r5, #14]
 8015a04:	fbb3 f1f0 	udiv	r1, r3, r0
 8015a08:	fb00 3311 	mls	r3, r0, r1, r3
 8015a0c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015a10:	6869      	ldr	r1, [r5, #4]
 8015a12:	fbb1 f1f0 	udiv	r1, r1, r0
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	fb01 f303 	mul.w	r3, r1, r3
 8015a1c:	6829      	ldr	r1, [r5, #0]
 8015a1e:	3208      	adds	r2, #8
 8015a20:	50ca      	str	r2, [r1, r3]
 8015a22:	e7d3      	b.n	80159cc <on_full_output_buffer_fragmented+0xb8>
 8015a24:	08015915 	.word	0x08015915

08015a28 <uxr_prepare_output_stream>:
 8015a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a2a:	b087      	sub	sp, #28
 8015a2c:	2707      	movs	r7, #7
 8015a2e:	9202      	str	r2, [sp, #8]
 8015a30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015a32:	9103      	str	r1, [sp, #12]
 8015a34:	2500      	movs	r5, #0
 8015a36:	3204      	adds	r2, #4
 8015a38:	e9cd 7500 	strd	r7, r5, [sp]
 8015a3c:	461c      	mov	r4, r3
 8015a3e:	4606      	mov	r6, r0
 8015a40:	f7fe ffc2 	bl	80149c8 <uxr_prepare_stream_to_write_submessage>
 8015a44:	f080 0201 	eor.w	r2, r0, #1
 8015a48:	b2d2      	uxtb	r2, r2
 8015a4a:	75a2      	strb	r2, [r4, #22]
 8015a4c:	b112      	cbz	r2, 8015a54 <uxr_prepare_output_stream+0x2c>
 8015a4e:	4628      	mov	r0, r5
 8015a50:	b007      	add	sp, #28
 8015a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a54:	aa05      	add	r2, sp, #20
 8015a56:	9902      	ldr	r1, [sp, #8]
 8015a58:	4630      	mov	r0, r6
 8015a5a:	f7ff f8eb 	bl	8014c34 <uxr_init_base_object_request>
 8015a5e:	a905      	add	r1, sp, #20
 8015a60:	4605      	mov	r5, r0
 8015a62:	4620      	mov	r0, r4
 8015a64:	f001 f8a0 	bl	8016ba8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015a68:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015a6c:	69a6      	ldr	r6, [r4, #24]
 8015a6e:	69e7      	ldr	r7, [r4, #28]
 8015a70:	1a52      	subs	r2, r2, r1
 8015a72:	4620      	mov	r0, r4
 8015a74:	f7f8 fc82 	bl	800e37c <ucdr_init_buffer>
 8015a78:	4620      	mov	r0, r4
 8015a7a:	463a      	mov	r2, r7
 8015a7c:	4631      	mov	r1, r6
 8015a7e:	f7f8 fc51 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 8015a82:	4628      	mov	r0, r5
 8015a84:	b007      	add	sp, #28
 8015a86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a88 <uxr_prepare_output_stream_fragmented>:
 8015a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a8c:	b091      	sub	sp, #68	@ 0x44
 8015a8e:	4605      	mov	r5, r0
 8015a90:	9105      	str	r1, [sp, #20]
 8015a92:	3008      	adds	r0, #8
 8015a94:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015a98:	461e      	mov	r6, r3
 8015a9a:	9204      	str	r2, [sp, #16]
 8015a9c:	f7ff fe90 	bl	80157c0 <uxr_get_output_reliable_stream>
 8015aa0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	f000 8091 	beq.w	8015bcc <uxr_prepare_output_stream_fragmented+0x144>
 8015aaa:	4604      	mov	r4, r0
 8015aac:	2800      	cmp	r0, #0
 8015aae:	f000 808d 	beq.w	8015bcc <uxr_prepare_output_stream_fragmented+0x144>
 8015ab2:	f005 f945 	bl	801ad40 <get_available_free_slots>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	f000 8083 	beq.w	8015bc2 <uxr_prepare_output_stream_fragmented+0x13a>
 8015abc:	8922      	ldrh	r2, [r4, #8]
 8015abe:	89e7      	ldrh	r7, [r4, #14]
 8015ac0:	fbb7 f9f2 	udiv	r9, r7, r2
 8015ac4:	fb02 7919 	mls	r9, r2, r9, r7
 8015ac8:	fa1f f989 	uxth.w	r9, r9
 8015acc:	6863      	ldr	r3, [r4, #4]
 8015ace:	fbb3 f2f2 	udiv	r2, r3, r2
 8015ad2:	6823      	ldr	r3, [r4, #0]
 8015ad4:	9203      	str	r2, [sp, #12]
 8015ad6:	fb02 f909 	mul.w	r9, r2, r9
 8015ada:	f109 0904 	add.w	r9, r9, #4
 8015ade:	4499      	add	r9, r3
 8015ae0:	7b23      	ldrb	r3, [r4, #12]
 8015ae2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015ae6:	4543      	cmp	r3, r8
 8015ae8:	f1a2 0b04 	sub.w	fp, r2, #4
 8015aec:	d37a      	bcc.n	8015be4 <uxr_prepare_output_stream_fragmented+0x15c>
 8015aee:	f1ab 0a04 	sub.w	sl, fp, #4
 8015af2:	ebaa 0a03 	sub.w	sl, sl, r3
 8015af6:	465a      	mov	r2, fp
 8015af8:	2300      	movs	r3, #0
 8015afa:	4649      	mov	r1, r9
 8015afc:	a808      	add	r0, sp, #32
 8015afe:	f8cd 8000 	str.w	r8, [sp]
 8015b02:	f7f8 fc29 	bl	800e358 <ucdr_init_buffer_origin_offset>
 8015b06:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015b08:	fa1f fa8a 	uxth.w	sl, sl
 8015b0c:	4652      	mov	r2, sl
 8015b0e:	f103 0a08 	add.w	sl, r3, #8
 8015b12:	45da      	cmp	sl, fp
 8015b14:	bf34      	ite	cc
 8015b16:	2302      	movcc	r3, #2
 8015b18:	2300      	movcs	r3, #0
 8015b1a:	210d      	movs	r1, #13
 8015b1c:	a808      	add	r0, sp, #32
 8015b1e:	f7ff fe83 	bl	8015828 <uxr_buffer_submessage_header>
 8015b22:	8921      	ldrh	r1, [r4, #8]
 8015b24:	fbb7 f2f1 	udiv	r2, r7, r1
 8015b28:	fb01 7212 	mls	r2, r1, r2, r7
 8015b2c:	b292      	uxth	r2, r2
 8015b2e:	6863      	ldr	r3, [r4, #4]
 8015b30:	fbb3 f3f1 	udiv	r3, r3, r1
 8015b34:	fb02 f303 	mul.w	r3, r2, r3
 8015b38:	6822      	ldr	r2, [r4, #0]
 8015b3a:	4638      	mov	r0, r7
 8015b3c:	f842 b003 	str.w	fp, [r2, r3]
 8015b40:	2101      	movs	r1, #1
 8015b42:	f005 f91d 	bl	801ad80 <uxr_seq_num_add>
 8015b46:	9b03      	ldr	r3, [sp, #12]
 8015b48:	f108 0104 	add.w	r1, r8, #4
 8015b4c:	f1a3 0208 	sub.w	r2, r3, #8
 8015b50:	eba2 0208 	sub.w	r2, r2, r8
 8015b54:	4449      	add	r1, r9
 8015b56:	4607      	mov	r7, r0
 8015b58:	4630      	mov	r0, r6
 8015b5a:	f7f8 fc0f 	bl	800e37c <ucdr_init_buffer>
 8015b5e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015b60:	81e7      	strh	r7, [r4, #14]
 8015b62:	1d1a      	adds	r2, r3, #4
 8015b64:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015b68:	bf28      	it	cs
 8015b6a:	2200      	movcs	r2, #0
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	b292      	uxth	r2, r2
 8015b70:	2107      	movs	r1, #7
 8015b72:	4630      	mov	r0, r6
 8015b74:	f7ff fe58 	bl	8015828 <uxr_buffer_submessage_header>
 8015b78:	9904      	ldr	r1, [sp, #16]
 8015b7a:	aa07      	add	r2, sp, #28
 8015b7c:	4628      	mov	r0, r5
 8015b7e:	f7ff f859 	bl	8014c34 <uxr_init_base_object_request>
 8015b82:	4604      	mov	r4, r0
 8015b84:	b318      	cbz	r0, 8015bce <uxr_prepare_output_stream_fragmented+0x146>
 8015b86:	a907      	add	r1, sp, #28
 8015b88:	4630      	mov	r0, r6
 8015b8a:	f001 f80d 	bl	8016ba8 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015b8e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015b92:	4630      	mov	r0, r6
 8015b94:	1a52      	subs	r2, r2, r1
 8015b96:	f7f8 fbf1 	bl	800e37c <ucdr_init_buffer>
 8015b9a:	9b05      	ldr	r3, [sp, #20]
 8015b9c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015ba0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015ba2:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8015ba6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015ba8:	491b      	ldr	r1, [pc, #108]	@ (8015c18 <uxr_prepare_output_stream_fragmented+0x190>)
 8015baa:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8015bae:	4630      	mov	r0, r6
 8015bb0:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015bb4:	462a      	mov	r2, r5
 8015bb6:	f7f8 fbb5 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 8015bba:	4620      	mov	r0, r4
 8015bbc:	b011      	add	sp, #68	@ 0x44
 8015bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bc2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015bc4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	4798      	blx	r3
 8015bca:	b920      	cbnz	r0, 8015bd6 <uxr_prepare_output_stream_fragmented+0x14e>
 8015bcc:	2400      	movs	r4, #0
 8015bce:	4620      	mov	r0, r4
 8015bd0:	b011      	add	sp, #68	@ 0x44
 8015bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f005 f8b2 	bl	801ad40 <get_available_free_slots>
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	f47f af6d 	bne.w	8015abc <uxr_prepare_output_stream_fragmented+0x34>
 8015be2:	e7f3      	b.n	8015bcc <uxr_prepare_output_stream_fragmented+0x144>
 8015be4:	4638      	mov	r0, r7
 8015be6:	2101      	movs	r1, #1
 8015be8:	f005 f8ca 	bl	801ad80 <uxr_seq_num_add>
 8015bec:	8921      	ldrh	r1, [r4, #8]
 8015bee:	fbb0 f2f1 	udiv	r2, r0, r1
 8015bf2:	fb01 0912 	mls	r9, r1, r2, r0
 8015bf6:	fa1f f289 	uxth.w	r2, r9
 8015bfa:	6863      	ldr	r3, [r4, #4]
 8015bfc:	fbb3 f9f1 	udiv	r9, r3, r1
 8015c00:	6823      	ldr	r3, [r4, #0]
 8015c02:	fb02 f909 	mul.w	r9, r2, r9
 8015c06:	f109 0904 	add.w	r9, r9, #4
 8015c0a:	4499      	add	r9, r3
 8015c0c:	4607      	mov	r7, r0
 8015c0e:	7b23      	ldrb	r3, [r4, #12]
 8015c10:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015c14:	e76b      	b.n	8015aee <uxr_prepare_output_stream_fragmented+0x66>
 8015c16:	bf00      	nop
 8015c18:	08015915 	.word	0x08015915

08015c1c <uxr_serialize_message_header>:
 8015c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c1e:	b083      	sub	sp, #12
 8015c20:	4616      	mov	r6, r2
 8015c22:	4604      	mov	r4, r0
 8015c24:	9301      	str	r3, [sp, #4]
 8015c26:	460d      	mov	r5, r1
 8015c28:	9f08      	ldr	r7, [sp, #32]
 8015c2a:	f7f7 f8c5 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015c2e:	4631      	mov	r1, r6
 8015c30:	4620      	mov	r0, r4
 8015c32:	f7f7 f8c1 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015c36:	9a01      	ldr	r2, [sp, #4]
 8015c38:	2101      	movs	r1, #1
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	f7f7 f968 	bl	800cf10 <ucdr_serialize_endian_uint16_t>
 8015c40:	062b      	lsls	r3, r5, #24
 8015c42:	d501      	bpl.n	8015c48 <uxr_serialize_message_header+0x2c>
 8015c44:	b003      	add	sp, #12
 8015c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c48:	2204      	movs	r2, #4
 8015c4a:	4639      	mov	r1, r7
 8015c4c:	4620      	mov	r0, r4
 8015c4e:	b003      	add	sp, #12
 8015c50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015c54:	f7fd b870 	b.w	8012d38 <ucdr_serialize_array_uint8_t>

08015c58 <uxr_deserialize_message_header>:
 8015c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c5a:	b083      	sub	sp, #12
 8015c5c:	4616      	mov	r6, r2
 8015c5e:	4604      	mov	r4, r0
 8015c60:	9301      	str	r3, [sp, #4]
 8015c62:	460d      	mov	r5, r1
 8015c64:	9f08      	ldr	r7, [sp, #32]
 8015c66:	f7f7 f8bd 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8015c6a:	4631      	mov	r1, r6
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	f7f7 f8b9 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8015c72:	9a01      	ldr	r2, [sp, #4]
 8015c74:	2101      	movs	r1, #1
 8015c76:	4620      	mov	r0, r4
 8015c78:	f7f7 fa3e 	bl	800d0f8 <ucdr_deserialize_endian_uint16_t>
 8015c7c:	f995 3000 	ldrsb.w	r3, [r5]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	da01      	bge.n	8015c88 <uxr_deserialize_message_header+0x30>
 8015c84:	b003      	add	sp, #12
 8015c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c88:	2204      	movs	r2, #4
 8015c8a:	4639      	mov	r1, r7
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	b003      	add	sp, #12
 8015c90:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015c94:	f7fd b8b4 	b.w	8012e00 <ucdr_deserialize_array_uint8_t>

08015c98 <uxr_serialize_submessage_header>:
 8015c98:	b530      	push	{r4, r5, lr}
 8015c9a:	b083      	sub	sp, #12
 8015c9c:	4615      	mov	r5, r2
 8015c9e:	4604      	mov	r4, r0
 8015ca0:	9301      	str	r3, [sp, #4]
 8015ca2:	f7f7 f889 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015ca6:	4629      	mov	r1, r5
 8015ca8:	4620      	mov	r0, r4
 8015caa:	f7f7 f885 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015cae:	9a01      	ldr	r2, [sp, #4]
 8015cb0:	2101      	movs	r1, #1
 8015cb2:	4620      	mov	r0, r4
 8015cb4:	b003      	add	sp, #12
 8015cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015cba:	f7f7 b929 	b.w	800cf10 <ucdr_serialize_endian_uint16_t>
 8015cbe:	bf00      	nop

08015cc0 <uxr_deserialize_submessage_header>:
 8015cc0:	b530      	push	{r4, r5, lr}
 8015cc2:	b083      	sub	sp, #12
 8015cc4:	4615      	mov	r5, r2
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	9301      	str	r3, [sp, #4]
 8015cca:	f7f7 f88b 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8015cce:	4629      	mov	r1, r5
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f7f7 f887 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8015cd6:	9a01      	ldr	r2, [sp, #4]
 8015cd8:	2101      	movs	r1, #1
 8015cda:	4620      	mov	r0, r4
 8015cdc:	b003      	add	sp, #12
 8015cde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ce2:	f7f7 ba09 	b.w	800d0f8 <ucdr_deserialize_endian_uint16_t>
 8015ce6:	bf00      	nop

08015ce8 <uxr_serialize_CLIENT_Representation>:
 8015ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cec:	2204      	movs	r2, #4
 8015cee:	460e      	mov	r6, r1
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	f7fd f821 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	4607      	mov	r7, r0
 8015cfa:	1d31      	adds	r1, r6, #4
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	f7fd f81b 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015d02:	4038      	ands	r0, r7
 8015d04:	2202      	movs	r2, #2
 8015d06:	1db1      	adds	r1, r6, #6
 8015d08:	b2c7      	uxtb	r7, r0
 8015d0a:	4628      	mov	r0, r5
 8015d0c:	f7fd f814 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015d10:	2204      	movs	r2, #4
 8015d12:	4007      	ands	r7, r0
 8015d14:	f106 0108 	add.w	r1, r6, #8
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f7fd f80d 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015d1e:	7b31      	ldrb	r1, [r6, #12]
 8015d20:	4007      	ands	r7, r0
 8015d22:	4628      	mov	r0, r5
 8015d24:	f7f7 f848 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015d28:	7b71      	ldrb	r1, [r6, #13]
 8015d2a:	4007      	ands	r7, r0
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	f7f7 f815 	bl	800cd5c <ucdr_serialize_bool>
 8015d32:	7b73      	ldrb	r3, [r6, #13]
 8015d34:	ea07 0800 	and.w	r8, r7, r0
 8015d38:	b93b      	cbnz	r3, 8015d4a <uxr_serialize_CLIENT_Representation+0x62>
 8015d3a:	8bb1      	ldrh	r1, [r6, #28]
 8015d3c:	4628      	mov	r0, r5
 8015d3e:	f7f7 f867 	bl	800ce10 <ucdr_serialize_uint16_t>
 8015d42:	ea08 0000 	and.w	r0, r8, r0
 8015d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d4a:	6931      	ldr	r1, [r6, #16]
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	f7f7 fa49 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8015d52:	6933      	ldr	r3, [r6, #16]
 8015d54:	b1e3      	cbz	r3, 8015d90 <uxr_serialize_CLIENT_Representation+0xa8>
 8015d56:	b1c0      	cbz	r0, 8015d8a <uxr_serialize_CLIENT_Representation+0xa2>
 8015d58:	4637      	mov	r7, r6
 8015d5a:	f04f 0900 	mov.w	r9, #0
 8015d5e:	e001      	b.n	8015d64 <uxr_serialize_CLIENT_Representation+0x7c>
 8015d60:	3708      	adds	r7, #8
 8015d62:	b194      	cbz	r4, 8015d8a <uxr_serialize_CLIENT_Representation+0xa2>
 8015d64:	6979      	ldr	r1, [r7, #20]
 8015d66:	4628      	mov	r0, r5
 8015d68:	f004 faaa 	bl	801a2c0 <ucdr_serialize_string>
 8015d6c:	69b9      	ldr	r1, [r7, #24]
 8015d6e:	4604      	mov	r4, r0
 8015d70:	4628      	mov	r0, r5
 8015d72:	f004 faa5 	bl	801a2c0 <ucdr_serialize_string>
 8015d76:	6933      	ldr	r3, [r6, #16]
 8015d78:	f109 0901 	add.w	r9, r9, #1
 8015d7c:	4004      	ands	r4, r0
 8015d7e:	4599      	cmp	r9, r3
 8015d80:	b2e4      	uxtb	r4, r4
 8015d82:	d3ed      	bcc.n	8015d60 <uxr_serialize_CLIENT_Representation+0x78>
 8015d84:	ea08 0804 	and.w	r8, r8, r4
 8015d88:	e7d7      	b.n	8015d3a <uxr_serialize_CLIENT_Representation+0x52>
 8015d8a:	f04f 0800 	mov.w	r8, #0
 8015d8e:	e7d4      	b.n	8015d3a <uxr_serialize_CLIENT_Representation+0x52>
 8015d90:	ea08 0800 	and.w	r8, r8, r0
 8015d94:	e7d1      	b.n	8015d3a <uxr_serialize_CLIENT_Representation+0x52>
 8015d96:	bf00      	nop

08015d98 <uxr_deserialize_CLIENT_Representation>:
 8015d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d9c:	2204      	movs	r2, #4
 8015d9e:	460c      	mov	r4, r1
 8015da0:	4605      	mov	r5, r0
 8015da2:	f7fd f82d 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8015da6:	2202      	movs	r2, #2
 8015da8:	4607      	mov	r7, r0
 8015daa:	1d21      	adds	r1, r4, #4
 8015dac:	4628      	mov	r0, r5
 8015dae:	f7fd f827 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8015db2:	4038      	ands	r0, r7
 8015db4:	2202      	movs	r2, #2
 8015db6:	1da1      	adds	r1, r4, #6
 8015db8:	b2c6      	uxtb	r6, r0
 8015dba:	4628      	mov	r0, r5
 8015dbc:	f7fd f820 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8015dc0:	2204      	movs	r2, #4
 8015dc2:	4006      	ands	r6, r0
 8015dc4:	f104 0108 	add.w	r1, r4, #8
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f7fd f819 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8015dce:	f104 010c 	add.w	r1, r4, #12
 8015dd2:	4006      	ands	r6, r0
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	f7f7 f805 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8015dda:	f104 010d 	add.w	r1, r4, #13
 8015dde:	ea06 0700 	and.w	r7, r6, r0
 8015de2:	4628      	mov	r0, r5
 8015de4:	f7f6 ffd0 	bl	800cd88 <ucdr_deserialize_bool>
 8015de8:	7b63      	ldrb	r3, [r4, #13]
 8015dea:	4007      	ands	r7, r0
 8015dec:	b93b      	cbnz	r3, 8015dfe <uxr_deserialize_CLIENT_Representation+0x66>
 8015dee:	f104 011c 	add.w	r1, r4, #28
 8015df2:	4628      	mov	r0, r5
 8015df4:	f7f7 f90c 	bl	800d010 <ucdr_deserialize_uint16_t>
 8015df8:	4038      	ands	r0, r7
 8015dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dfe:	f104 0110 	add.w	r1, r4, #16
 8015e02:	4628      	mov	r0, r5
 8015e04:	f7f7 fb1e 	bl	800d444 <ucdr_deserialize_uint32_t>
 8015e08:	6923      	ldr	r3, [r4, #16]
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	d903      	bls.n	8015e16 <uxr_deserialize_CLIENT_Representation+0x7e>
 8015e0e:	2301      	movs	r3, #1
 8015e10:	75ab      	strb	r3, [r5, #22]
 8015e12:	2700      	movs	r7, #0
 8015e14:	e7eb      	b.n	8015dee <uxr_deserialize_CLIENT_Representation+0x56>
 8015e16:	b30b      	cbz	r3, 8015e5c <uxr_deserialize_CLIENT_Representation+0xc4>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d0fa      	beq.n	8015e12 <uxr_deserialize_CLIENT_Representation+0x7a>
 8015e1c:	46a0      	mov	r8, r4
 8015e1e:	f04f 0900 	mov.w	r9, #0
 8015e22:	e001      	b.n	8015e28 <uxr_deserialize_CLIENT_Representation+0x90>
 8015e24:	2e00      	cmp	r6, #0
 8015e26:	d0f4      	beq.n	8015e12 <uxr_deserialize_CLIENT_Representation+0x7a>
 8015e28:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015e30:	4628      	mov	r0, r5
 8015e32:	f004 fa55 	bl	801a2e0 <ucdr_deserialize_string>
 8015e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015e3a:	4606      	mov	r6, r0
 8015e3c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015e40:	4628      	mov	r0, r5
 8015e42:	f004 fa4d 	bl	801a2e0 <ucdr_deserialize_string>
 8015e46:	6923      	ldr	r3, [r4, #16]
 8015e48:	f109 0901 	add.w	r9, r9, #1
 8015e4c:	4006      	ands	r6, r0
 8015e4e:	4599      	cmp	r9, r3
 8015e50:	f108 0808 	add.w	r8, r8, #8
 8015e54:	b2f6      	uxtb	r6, r6
 8015e56:	d3e5      	bcc.n	8015e24 <uxr_deserialize_CLIENT_Representation+0x8c>
 8015e58:	4037      	ands	r7, r6
 8015e5a:	e7c8      	b.n	8015dee <uxr_deserialize_CLIENT_Representation+0x56>
 8015e5c:	4007      	ands	r7, r0
 8015e5e:	e7c6      	b.n	8015dee <uxr_deserialize_CLIENT_Representation+0x56>

08015e60 <uxr_serialize_AGENT_Representation>:
 8015e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e64:	2204      	movs	r2, #4
 8015e66:	460f      	mov	r7, r1
 8015e68:	4605      	mov	r5, r0
 8015e6a:	f7fc ff65 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015e6e:	2202      	movs	r2, #2
 8015e70:	4604      	mov	r4, r0
 8015e72:	1d39      	adds	r1, r7, #4
 8015e74:	4628      	mov	r0, r5
 8015e76:	f7fc ff5f 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015e7a:	4020      	ands	r0, r4
 8015e7c:	2202      	movs	r2, #2
 8015e7e:	1db9      	adds	r1, r7, #6
 8015e80:	b2c4      	uxtb	r4, r0
 8015e82:	4628      	mov	r0, r5
 8015e84:	f7fc ff58 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015e88:	7a39      	ldrb	r1, [r7, #8]
 8015e8a:	4004      	ands	r4, r0
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	f7f6 ff65 	bl	800cd5c <ucdr_serialize_bool>
 8015e92:	7a3b      	ldrb	r3, [r7, #8]
 8015e94:	ea00 0804 	and.w	r8, r0, r4
 8015e98:	b913      	cbnz	r3, 8015ea0 <uxr_serialize_AGENT_Representation+0x40>
 8015e9a:	4640      	mov	r0, r8
 8015e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ea0:	68f9      	ldr	r1, [r7, #12]
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	f7f7 f99e 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	b303      	cbz	r3, 8015eee <uxr_serialize_AGENT_Representation+0x8e>
 8015eac:	b1d0      	cbz	r0, 8015ee4 <uxr_serialize_AGENT_Representation+0x84>
 8015eae:	463e      	mov	r6, r7
 8015eb0:	f04f 0900 	mov.w	r9, #0
 8015eb4:	e001      	b.n	8015eba <uxr_serialize_AGENT_Representation+0x5a>
 8015eb6:	3608      	adds	r6, #8
 8015eb8:	b1a4      	cbz	r4, 8015ee4 <uxr_serialize_AGENT_Representation+0x84>
 8015eba:	6931      	ldr	r1, [r6, #16]
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f004 f9ff 	bl	801a2c0 <ucdr_serialize_string>
 8015ec2:	6971      	ldr	r1, [r6, #20]
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	4628      	mov	r0, r5
 8015ec8:	f004 f9fa 	bl	801a2c0 <ucdr_serialize_string>
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	f109 0901 	add.w	r9, r9, #1
 8015ed2:	4004      	ands	r4, r0
 8015ed4:	4599      	cmp	r9, r3
 8015ed6:	b2e4      	uxtb	r4, r4
 8015ed8:	d3ed      	bcc.n	8015eb6 <uxr_serialize_AGENT_Representation+0x56>
 8015eda:	ea08 0804 	and.w	r8, r8, r4
 8015ede:	4640      	mov	r0, r8
 8015ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ee4:	f04f 0800 	mov.w	r8, #0
 8015ee8:	4640      	mov	r0, r8
 8015eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eee:	ea08 0800 	and.w	r8, r8, r0
 8015ef2:	e7d2      	b.n	8015e9a <uxr_serialize_AGENT_Representation+0x3a>

08015ef4 <uxr_serialize_DATAWRITER_Representation>:
 8015ef4:	b570      	push	{r4, r5, r6, lr}
 8015ef6:	460d      	mov	r5, r1
 8015ef8:	7809      	ldrb	r1, [r1, #0]
 8015efa:	4606      	mov	r6, r0
 8015efc:	f7f6 ff5c 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015f00:	4604      	mov	r4, r0
 8015f02:	b130      	cbz	r0, 8015f12 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015f04:	782b      	ldrb	r3, [r5, #0]
 8015f06:	2b02      	cmp	r3, #2
 8015f08:	d00c      	beq.n	8015f24 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015f0a:	2b03      	cmp	r3, #3
 8015f0c:	d010      	beq.n	8015f30 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d008      	beq.n	8015f24 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015f12:	2202      	movs	r2, #2
 8015f14:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015f18:	4630      	mov	r0, r6
 8015f1a:	f7fc ff0d 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015f1e:	4020      	ands	r0, r4
 8015f20:	b2c0      	uxtb	r0, r0
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	6869      	ldr	r1, [r5, #4]
 8015f26:	4630      	mov	r0, r6
 8015f28:	f004 f9ca 	bl	801a2c0 <ucdr_serialize_string>
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	e7f0      	b.n	8015f12 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015f30:	4629      	mov	r1, r5
 8015f32:	4630      	mov	r0, r6
 8015f34:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015f38:	3104      	adds	r1, #4
 8015f3a:	f7fd f89b 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 8015f3e:	4604      	mov	r4, r0
 8015f40:	e7e7      	b.n	8015f12 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015f42:	bf00      	nop

08015f44 <uxr_serialize_ObjectVariant.part.0>:
 8015f44:	b570      	push	{r4, r5, r6, lr}
 8015f46:	780b      	ldrb	r3, [r1, #0]
 8015f48:	3b01      	subs	r3, #1
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	4605      	mov	r5, r0
 8015f4e:	2b0d      	cmp	r3, #13
 8015f50:	d854      	bhi.n	8015ffc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015f52:	e8df f003 	tbb	[pc, r3]
 8015f56:	0730      	.short	0x0730
 8015f58:	07071b1b 	.word	0x07071b1b
 8015f5c:	0c530707 	.word	0x0c530707
 8015f60:	494e0c0c 	.word	0x494e0c0c
 8015f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f68:	3104      	adds	r1, #4
 8015f6a:	f7ff bfc3 	b.w	8015ef4 <uxr_serialize_DATAWRITER_Representation>
 8015f6e:	7909      	ldrb	r1, [r1, #4]
 8015f70:	f7f6 ff22 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015f74:	b1e8      	cbz	r0, 8015fb2 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015f76:	7923      	ldrb	r3, [r4, #4]
 8015f78:	2b01      	cmp	r3, #1
 8015f7a:	d001      	beq.n	8015f80 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015f7c:	2b02      	cmp	r3, #2
 8015f7e:	d13d      	bne.n	8015ffc <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015f80:	68a1      	ldr	r1, [r4, #8]
 8015f82:	4628      	mov	r0, r5
 8015f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f88:	f004 b99a 	b.w	801a2c0 <ucdr_serialize_string>
 8015f8c:	7909      	ldrb	r1, [r1, #4]
 8015f8e:	f7f6 ff13 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015f92:	4606      	mov	r6, r0
 8015f94:	b120      	cbz	r0, 8015fa0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015f96:	7923      	ldrb	r3, [r4, #4]
 8015f98:	2b02      	cmp	r3, #2
 8015f9a:	d039      	beq.n	8016010 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015f9c:	2b03      	cmp	r3, #3
 8015f9e:	d02f      	beq.n	8016000 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015fa0:	2202      	movs	r2, #2
 8015fa2:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f7fc fec6 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8015fac:	4030      	ands	r0, r6
 8015fae:	b2c0      	uxtb	r0, r0
 8015fb0:	bd70      	pop	{r4, r5, r6, pc}
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	bd70      	pop	{r4, r5, r6, pc}
 8015fb6:	7909      	ldrb	r1, [r1, #4]
 8015fb8:	f7f6 fefe 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8015fbc:	4606      	mov	r6, r0
 8015fbe:	b158      	cbz	r0, 8015fd8 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015fc0:	7923      	ldrb	r3, [r4, #4]
 8015fc2:	2b02      	cmp	r3, #2
 8015fc4:	d003      	beq.n	8015fce <uxr_serialize_ObjectVariant.part.0+0x8a>
 8015fc6:	2b03      	cmp	r3, #3
 8015fc8:	d028      	beq.n	801601c <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	d104      	bne.n	8015fd8 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015fce:	68a1      	ldr	r1, [r4, #8]
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	f004 f975 	bl	801a2c0 <ucdr_serialize_string>
 8015fd6:	4606      	mov	r6, r0
 8015fd8:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015fdc:	4628      	mov	r0, r5
 8015fde:	f7f7 fc27 	bl	800d830 <ucdr_serialize_int16_t>
 8015fe2:	4030      	ands	r0, r6
 8015fe4:	b2c0      	uxtb	r0, r0
 8015fe6:	bd70      	pop	{r4, r5, r6, pc}
 8015fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015fec:	3104      	adds	r1, #4
 8015fee:	f7ff be7b 	b.w	8015ce8 <uxr_serialize_CLIENT_Representation>
 8015ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ff6:	3104      	adds	r1, #4
 8015ff8:	f7ff bf32 	b.w	8015e60 <uxr_serialize_AGENT_Representation>
 8015ffc:	2001      	movs	r0, #1
 8015ffe:	bd70      	pop	{r4, r5, r6, pc}
 8016000:	68a2      	ldr	r2, [r4, #8]
 8016002:	f104 010c 	add.w	r1, r4, #12
 8016006:	4628      	mov	r0, r5
 8016008:	f7fd f834 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 801600c:	4606      	mov	r6, r0
 801600e:	e7c7      	b.n	8015fa0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016010:	68a1      	ldr	r1, [r4, #8]
 8016012:	4628      	mov	r0, r5
 8016014:	f004 f954 	bl	801a2c0 <ucdr_serialize_string>
 8016018:	4606      	mov	r6, r0
 801601a:	e7c1      	b.n	8015fa0 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801601c:	68a2      	ldr	r2, [r4, #8]
 801601e:	f104 010c 	add.w	r1, r4, #12
 8016022:	4628      	mov	r0, r5
 8016024:	f7fd f826 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 8016028:	4606      	mov	r6, r0
 801602a:	e7d5      	b.n	8015fd8 <uxr_serialize_ObjectVariant.part.0+0x94>

0801602c <uxr_deserialize_DATAWRITER_Representation>:
 801602c:	b570      	push	{r4, r5, r6, lr}
 801602e:	4606      	mov	r6, r0
 8016030:	460d      	mov	r5, r1
 8016032:	f7f6 fed7 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016036:	4604      	mov	r4, r0
 8016038:	b130      	cbz	r0, 8016048 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801603a:	782b      	ldrb	r3, [r5, #0]
 801603c:	2b02      	cmp	r3, #2
 801603e:	d00c      	beq.n	801605a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016040:	2b03      	cmp	r3, #3
 8016042:	d012      	beq.n	801606a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8016044:	2b01      	cmp	r3, #1
 8016046:	d008      	beq.n	801605a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8016048:	2202      	movs	r2, #2
 801604a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801604e:	4630      	mov	r0, r6
 8016050:	f7fc fed6 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016054:	4020      	ands	r0, r4
 8016056:	b2c0      	uxtb	r0, r0
 8016058:	bd70      	pop	{r4, r5, r6, pc}
 801605a:	6869      	ldr	r1, [r5, #4]
 801605c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016060:	4630      	mov	r0, r6
 8016062:	f004 f93d 	bl	801a2e0 <ucdr_deserialize_string>
 8016066:	4604      	mov	r4, r0
 8016068:	e7ee      	b.n	8016048 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801606a:	1d2b      	adds	r3, r5, #4
 801606c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016070:	f105 0108 	add.w	r1, r5, #8
 8016074:	4630      	mov	r0, r6
 8016076:	f7fd f80f 	bl	8013098 <ucdr_deserialize_sequence_uint8_t>
 801607a:	4604      	mov	r4, r0
 801607c:	e7e4      	b.n	8016048 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801607e:	bf00      	nop

08016080 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8016080:	b570      	push	{r4, r5, r6, lr}
 8016082:	460d      	mov	r5, r1
 8016084:	7809      	ldrb	r1, [r1, #0]
 8016086:	4606      	mov	r6, r0
 8016088:	f7f6 fe68 	bl	800cd5c <ucdr_serialize_bool>
 801608c:	782b      	ldrb	r3, [r5, #0]
 801608e:	4604      	mov	r4, r0
 8016090:	b94b      	cbnz	r3, 80160a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8016092:	7a29      	ldrb	r1, [r5, #8]
 8016094:	4630      	mov	r0, r6
 8016096:	f7f6 fe61 	bl	800cd5c <ucdr_serialize_bool>
 801609a:	7a2b      	ldrb	r3, [r5, #8]
 801609c:	4004      	ands	r4, r0
 801609e:	b2e4      	uxtb	r4, r4
 80160a0:	b943      	cbnz	r3, 80160b4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80160a2:	4620      	mov	r0, r4
 80160a4:	bd70      	pop	{r4, r5, r6, pc}
 80160a6:	6869      	ldr	r1, [r5, #4]
 80160a8:	4630      	mov	r0, r6
 80160aa:	f004 f909 	bl	801a2c0 <ucdr_serialize_string>
 80160ae:	4004      	ands	r4, r0
 80160b0:	b2e4      	uxtb	r4, r4
 80160b2:	e7ee      	b.n	8016092 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80160b4:	68e9      	ldr	r1, [r5, #12]
 80160b6:	4630      	mov	r0, r6
 80160b8:	f004 f902 	bl	801a2c0 <ucdr_serialize_string>
 80160bc:	4004      	ands	r4, r0
 80160be:	4620      	mov	r0, r4
 80160c0:	bd70      	pop	{r4, r5, r6, pc}
 80160c2:	bf00      	nop

080160c4 <uxr_serialize_OBJK_Topic_Binary>:
 80160c4:	b570      	push	{r4, r5, r6, lr}
 80160c6:	460d      	mov	r5, r1
 80160c8:	6809      	ldr	r1, [r1, #0]
 80160ca:	4606      	mov	r6, r0
 80160cc:	f004 f8f8 	bl	801a2c0 <ucdr_serialize_string>
 80160d0:	7929      	ldrb	r1, [r5, #4]
 80160d2:	4604      	mov	r4, r0
 80160d4:	4630      	mov	r0, r6
 80160d6:	f7f6 fe41 	bl	800cd5c <ucdr_serialize_bool>
 80160da:	792b      	ldrb	r3, [r5, #4]
 80160dc:	4004      	ands	r4, r0
 80160de:	b2e4      	uxtb	r4, r4
 80160e0:	b943      	cbnz	r3, 80160f4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80160e2:	7b29      	ldrb	r1, [r5, #12]
 80160e4:	4630      	mov	r0, r6
 80160e6:	f7f6 fe39 	bl	800cd5c <ucdr_serialize_bool>
 80160ea:	7b2b      	ldrb	r3, [r5, #12]
 80160ec:	4004      	ands	r4, r0
 80160ee:	b93b      	cbnz	r3, 8016100 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80160f0:	4620      	mov	r0, r4
 80160f2:	bd70      	pop	{r4, r5, r6, pc}
 80160f4:	68a9      	ldr	r1, [r5, #8]
 80160f6:	4630      	mov	r0, r6
 80160f8:	f004 f8e2 	bl	801a2c0 <ucdr_serialize_string>
 80160fc:	4004      	ands	r4, r0
 80160fe:	e7f0      	b.n	80160e2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8016100:	6929      	ldr	r1, [r5, #16]
 8016102:	4630      	mov	r0, r6
 8016104:	f004 f8dc 	bl	801a2c0 <ucdr_serialize_string>
 8016108:	4004      	ands	r4, r0
 801610a:	b2e4      	uxtb	r4, r4
 801610c:	4620      	mov	r0, r4
 801610e:	bd70      	pop	{r4, r5, r6, pc}

08016110 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8016110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	460c      	mov	r4, r1
 8016116:	7809      	ldrb	r1, [r1, #0]
 8016118:	4606      	mov	r6, r0
 801611a:	f7f6 fe1f 	bl	800cd5c <ucdr_serialize_bool>
 801611e:	7823      	ldrb	r3, [r4, #0]
 8016120:	4605      	mov	r5, r0
 8016122:	b96b      	cbnz	r3, 8016140 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8016124:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8016128:	4630      	mov	r0, r6
 801612a:	f7f6 fe17 	bl	800cd5c <ucdr_serialize_bool>
 801612e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8016132:	4005      	ands	r5, r0
 8016134:	b2ed      	uxtb	r5, r5
 8016136:	2b00      	cmp	r3, #0
 8016138:	d169      	bne.n	801620e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801613a:	4628      	mov	r0, r5
 801613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016140:	6861      	ldr	r1, [r4, #4]
 8016142:	4630      	mov	r0, r6
 8016144:	f7f7 f84e 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8016148:	6863      	ldr	r3, [r4, #4]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d06b      	beq.n	8016226 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801614e:	2800      	cmp	r0, #0
 8016150:	d067      	beq.n	8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016152:	68a1      	ldr	r1, [r4, #8]
 8016154:	4630      	mov	r0, r6
 8016156:	f004 f8b3 	bl	801a2c0 <ucdr_serialize_string>
 801615a:	6863      	ldr	r3, [r4, #4]
 801615c:	2b01      	cmp	r3, #1
 801615e:	d953      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016160:	2800      	cmp	r0, #0
 8016162:	d05e      	beq.n	8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016164:	68e1      	ldr	r1, [r4, #12]
 8016166:	4630      	mov	r0, r6
 8016168:	f004 f8aa 	bl	801a2c0 <ucdr_serialize_string>
 801616c:	6863      	ldr	r3, [r4, #4]
 801616e:	2b02      	cmp	r3, #2
 8016170:	d94a      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016172:	2800      	cmp	r0, #0
 8016174:	d055      	beq.n	8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016176:	6921      	ldr	r1, [r4, #16]
 8016178:	4630      	mov	r0, r6
 801617a:	f004 f8a1 	bl	801a2c0 <ucdr_serialize_string>
 801617e:	6863      	ldr	r3, [r4, #4]
 8016180:	2b03      	cmp	r3, #3
 8016182:	d941      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016184:	2800      	cmp	r0, #0
 8016186:	d04c      	beq.n	8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016188:	6961      	ldr	r1, [r4, #20]
 801618a:	4630      	mov	r0, r6
 801618c:	f004 f898 	bl	801a2c0 <ucdr_serialize_string>
 8016190:	6863      	ldr	r3, [r4, #4]
 8016192:	2b04      	cmp	r3, #4
 8016194:	d938      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016196:	2800      	cmp	r0, #0
 8016198:	d043      	beq.n	8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801619a:	69a1      	ldr	r1, [r4, #24]
 801619c:	4630      	mov	r0, r6
 801619e:	f004 f88f 	bl	801a2c0 <ucdr_serialize_string>
 80161a2:	6863      	ldr	r3, [r4, #4]
 80161a4:	2b05      	cmp	r3, #5
 80161a6:	d92f      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d03a      	beq.n	8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80161ac:	69e1      	ldr	r1, [r4, #28]
 80161ae:	4630      	mov	r0, r6
 80161b0:	f004 f886 	bl	801a2c0 <ucdr_serialize_string>
 80161b4:	6863      	ldr	r3, [r4, #4]
 80161b6:	2b06      	cmp	r3, #6
 80161b8:	d926      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80161ba:	b390      	cbz	r0, 8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80161bc:	6a21      	ldr	r1, [r4, #32]
 80161be:	4630      	mov	r0, r6
 80161c0:	f004 f87e 	bl	801a2c0 <ucdr_serialize_string>
 80161c4:	6863      	ldr	r3, [r4, #4]
 80161c6:	2b07      	cmp	r3, #7
 80161c8:	d91e      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80161ca:	b350      	cbz	r0, 8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80161cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80161ce:	4630      	mov	r0, r6
 80161d0:	f004 f876 	bl	801a2c0 <ucdr_serialize_string>
 80161d4:	6863      	ldr	r3, [r4, #4]
 80161d6:	2b08      	cmp	r3, #8
 80161d8:	d916      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80161da:	b310      	cbz	r0, 8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80161dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80161de:	4630      	mov	r0, r6
 80161e0:	f004 f86e 	bl	801a2c0 <ucdr_serialize_string>
 80161e4:	6863      	ldr	r3, [r4, #4]
 80161e6:	2b09      	cmp	r3, #9
 80161e8:	d90e      	bls.n	8016208 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80161ea:	b1d0      	cbz	r0, 8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80161ec:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80161f0:	2709      	movs	r7, #9
 80161f2:	e000      	b.n	80161f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80161f4:	b1a8      	cbz	r0, 8016222 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80161f6:	f858 1b04 	ldr.w	r1, [r8], #4
 80161fa:	4630      	mov	r0, r6
 80161fc:	f004 f860 	bl	801a2c0 <ucdr_serialize_string>
 8016200:	6862      	ldr	r2, [r4, #4]
 8016202:	3701      	adds	r7, #1
 8016204:	4297      	cmp	r7, r2
 8016206:	d3f5      	bcc.n	80161f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8016208:	4005      	ands	r5, r0
 801620a:	b2ed      	uxtb	r5, r5
 801620c:	e78a      	b.n	8016124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801620e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016210:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016214:	4630      	mov	r0, r6
 8016216:	f7fc ff2d 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 801621a:	4005      	ands	r5, r0
 801621c:	4628      	mov	r0, r5
 801621e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016222:	2500      	movs	r5, #0
 8016224:	e77e      	b.n	8016124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8016226:	4028      	ands	r0, r5
 8016228:	b2c5      	uxtb	r5, r0
 801622a:	e77b      	b.n	8016124 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801622c <uxr_serialize_OBJK_Publisher_Binary>:
 801622c:	b570      	push	{r4, r5, r6, lr}
 801622e:	460d      	mov	r5, r1
 8016230:	7809      	ldrb	r1, [r1, #0]
 8016232:	4606      	mov	r6, r0
 8016234:	f7f6 fd92 	bl	800cd5c <ucdr_serialize_bool>
 8016238:	782b      	ldrb	r3, [r5, #0]
 801623a:	4604      	mov	r4, r0
 801623c:	b94b      	cbnz	r3, 8016252 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801623e:	7a29      	ldrb	r1, [r5, #8]
 8016240:	4630      	mov	r0, r6
 8016242:	f7f6 fd8b 	bl	800cd5c <ucdr_serialize_bool>
 8016246:	7a2b      	ldrb	r3, [r5, #8]
 8016248:	4004      	ands	r4, r0
 801624a:	b2e4      	uxtb	r4, r4
 801624c:	b943      	cbnz	r3, 8016260 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801624e:	4620      	mov	r0, r4
 8016250:	bd70      	pop	{r4, r5, r6, pc}
 8016252:	6869      	ldr	r1, [r5, #4]
 8016254:	4630      	mov	r0, r6
 8016256:	f004 f833 	bl	801a2c0 <ucdr_serialize_string>
 801625a:	4004      	ands	r4, r0
 801625c:	b2e4      	uxtb	r4, r4
 801625e:	e7ee      	b.n	801623e <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8016260:	f105 010c 	add.w	r1, r5, #12
 8016264:	4630      	mov	r0, r6
 8016266:	f7ff ff53 	bl	8016110 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801626a:	4004      	ands	r4, r0
 801626c:	4620      	mov	r0, r4
 801626e:	bd70      	pop	{r4, r5, r6, pc}

08016270 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8016270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016274:	460c      	mov	r4, r1
 8016276:	7809      	ldrb	r1, [r1, #0]
 8016278:	4606      	mov	r6, r0
 801627a:	f7f6 fd6f 	bl	800cd5c <ucdr_serialize_bool>
 801627e:	7823      	ldrb	r3, [r4, #0]
 8016280:	4605      	mov	r5, r0
 8016282:	b96b      	cbnz	r3, 80162a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8016284:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8016288:	4630      	mov	r0, r6
 801628a:	f7f6 fd67 	bl	800cd5c <ucdr_serialize_bool>
 801628e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8016292:	4005      	ands	r5, r0
 8016294:	b2ed      	uxtb	r5, r5
 8016296:	2b00      	cmp	r3, #0
 8016298:	d169      	bne.n	801636e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801629a:	4628      	mov	r0, r5
 801629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a0:	6861      	ldr	r1, [r4, #4]
 80162a2:	4630      	mov	r0, r6
 80162a4:	f7f6 ff9e 	bl	800d1e4 <ucdr_serialize_uint32_t>
 80162a8:	6863      	ldr	r3, [r4, #4]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d06b      	beq.n	8016386 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d067      	beq.n	8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80162b2:	68a1      	ldr	r1, [r4, #8]
 80162b4:	4630      	mov	r0, r6
 80162b6:	f004 f803 	bl	801a2c0 <ucdr_serialize_string>
 80162ba:	6863      	ldr	r3, [r4, #4]
 80162bc:	2b01      	cmp	r3, #1
 80162be:	d953      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d05e      	beq.n	8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80162c4:	68e1      	ldr	r1, [r4, #12]
 80162c6:	4630      	mov	r0, r6
 80162c8:	f003 fffa 	bl	801a2c0 <ucdr_serialize_string>
 80162cc:	6863      	ldr	r3, [r4, #4]
 80162ce:	2b02      	cmp	r3, #2
 80162d0:	d94a      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80162d2:	2800      	cmp	r0, #0
 80162d4:	d055      	beq.n	8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80162d6:	6921      	ldr	r1, [r4, #16]
 80162d8:	4630      	mov	r0, r6
 80162da:	f003 fff1 	bl	801a2c0 <ucdr_serialize_string>
 80162de:	6863      	ldr	r3, [r4, #4]
 80162e0:	2b03      	cmp	r3, #3
 80162e2:	d941      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d04c      	beq.n	8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80162e8:	6961      	ldr	r1, [r4, #20]
 80162ea:	4630      	mov	r0, r6
 80162ec:	f003 ffe8 	bl	801a2c0 <ucdr_serialize_string>
 80162f0:	6863      	ldr	r3, [r4, #4]
 80162f2:	2b04      	cmp	r3, #4
 80162f4:	d938      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	d043      	beq.n	8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80162fa:	69a1      	ldr	r1, [r4, #24]
 80162fc:	4630      	mov	r0, r6
 80162fe:	f003 ffdf 	bl	801a2c0 <ucdr_serialize_string>
 8016302:	6863      	ldr	r3, [r4, #4]
 8016304:	2b05      	cmp	r3, #5
 8016306:	d92f      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016308:	2800      	cmp	r0, #0
 801630a:	d03a      	beq.n	8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801630c:	69e1      	ldr	r1, [r4, #28]
 801630e:	4630      	mov	r0, r6
 8016310:	f003 ffd6 	bl	801a2c0 <ucdr_serialize_string>
 8016314:	6863      	ldr	r3, [r4, #4]
 8016316:	2b06      	cmp	r3, #6
 8016318:	d926      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801631a:	b390      	cbz	r0, 8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801631c:	6a21      	ldr	r1, [r4, #32]
 801631e:	4630      	mov	r0, r6
 8016320:	f003 ffce 	bl	801a2c0 <ucdr_serialize_string>
 8016324:	6863      	ldr	r3, [r4, #4]
 8016326:	2b07      	cmp	r3, #7
 8016328:	d91e      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801632a:	b350      	cbz	r0, 8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801632c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801632e:	4630      	mov	r0, r6
 8016330:	f003 ffc6 	bl	801a2c0 <ucdr_serialize_string>
 8016334:	6863      	ldr	r3, [r4, #4]
 8016336:	2b08      	cmp	r3, #8
 8016338:	d916      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801633a:	b310      	cbz	r0, 8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801633c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801633e:	4630      	mov	r0, r6
 8016340:	f003 ffbe 	bl	801a2c0 <ucdr_serialize_string>
 8016344:	6863      	ldr	r3, [r4, #4]
 8016346:	2b09      	cmp	r3, #9
 8016348:	d90e      	bls.n	8016368 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801634a:	b1d0      	cbz	r0, 8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801634c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8016350:	2709      	movs	r7, #9
 8016352:	e000      	b.n	8016356 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8016354:	b1a8      	cbz	r0, 8016382 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016356:	f858 1b04 	ldr.w	r1, [r8], #4
 801635a:	4630      	mov	r0, r6
 801635c:	f003 ffb0 	bl	801a2c0 <ucdr_serialize_string>
 8016360:	6862      	ldr	r2, [r4, #4]
 8016362:	3701      	adds	r7, #1
 8016364:	4297      	cmp	r7, r2
 8016366:	d3f5      	bcc.n	8016354 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8016368:	4005      	ands	r5, r0
 801636a:	b2ed      	uxtb	r5, r5
 801636c:	e78a      	b.n	8016284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801636e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8016370:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8016374:	4630      	mov	r0, r6
 8016376:	f7fc fe7d 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 801637a:	4005      	ands	r5, r0
 801637c:	4628      	mov	r0, r5
 801637e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016382:	2500      	movs	r5, #0
 8016384:	e77e      	b.n	8016284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8016386:	4028      	ands	r0, r5
 8016388:	b2c5      	uxtb	r5, r0
 801638a:	e77b      	b.n	8016284 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0801638c <uxr_serialize_OBJK_Subscriber_Binary>:
 801638c:	b570      	push	{r4, r5, r6, lr}
 801638e:	460d      	mov	r5, r1
 8016390:	7809      	ldrb	r1, [r1, #0]
 8016392:	4606      	mov	r6, r0
 8016394:	f7f6 fce2 	bl	800cd5c <ucdr_serialize_bool>
 8016398:	782b      	ldrb	r3, [r5, #0]
 801639a:	4604      	mov	r4, r0
 801639c:	b94b      	cbnz	r3, 80163b2 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801639e:	7a29      	ldrb	r1, [r5, #8]
 80163a0:	4630      	mov	r0, r6
 80163a2:	f7f6 fcdb 	bl	800cd5c <ucdr_serialize_bool>
 80163a6:	7a2b      	ldrb	r3, [r5, #8]
 80163a8:	4004      	ands	r4, r0
 80163aa:	b2e4      	uxtb	r4, r4
 80163ac:	b943      	cbnz	r3, 80163c0 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80163ae:	4620      	mov	r0, r4
 80163b0:	bd70      	pop	{r4, r5, r6, pc}
 80163b2:	6869      	ldr	r1, [r5, #4]
 80163b4:	4630      	mov	r0, r6
 80163b6:	f003 ff83 	bl	801a2c0 <ucdr_serialize_string>
 80163ba:	4004      	ands	r4, r0
 80163bc:	b2e4      	uxtb	r4, r4
 80163be:	e7ee      	b.n	801639e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80163c0:	f105 010c 	add.w	r1, r5, #12
 80163c4:	4630      	mov	r0, r6
 80163c6:	f7ff ff53 	bl	8016270 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80163ca:	4004      	ands	r4, r0
 80163cc:	4620      	mov	r0, r4
 80163ce:	bd70      	pop	{r4, r5, r6, pc}

080163d0 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80163d0:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80163d4:	4688      	mov	r8, r1
 80163d6:	8809      	ldrh	r1, [r1, #0]
 80163d8:	4681      	mov	r9, r0
 80163da:	f7f6 fd19 	bl	800ce10 <ucdr_serialize_uint16_t>
 80163de:	f898 1002 	ldrb.w	r1, [r8, #2]
 80163e2:	4606      	mov	r6, r0
 80163e4:	4648      	mov	r0, r9
 80163e6:	f7f6 fcb9 	bl	800cd5c <ucdr_serialize_bool>
 80163ea:	f898 3002 	ldrb.w	r3, [r8, #2]
 80163ee:	4006      	ands	r6, r0
 80163f0:	b2f5      	uxtb	r5, r6
 80163f2:	b9eb      	cbnz	r3, 8016430 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80163f4:	f898 1006 	ldrb.w	r1, [r8, #6]
 80163f8:	4648      	mov	r0, r9
 80163fa:	f7f6 fcaf 	bl	800cd5c <ucdr_serialize_bool>
 80163fe:	f898 3006 	ldrb.w	r3, [r8, #6]
 8016402:	4005      	ands	r5, r0
 8016404:	bb7b      	cbnz	r3, 8016466 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8016406:	f898 100c 	ldrb.w	r1, [r8, #12]
 801640a:	4648      	mov	r0, r9
 801640c:	f7f6 fca6 	bl	800cd5c <ucdr_serialize_bool>
 8016410:	f898 300c 	ldrb.w	r3, [r8, #12]
 8016414:	4005      	ands	r5, r0
 8016416:	b9f3      	cbnz	r3, 8016456 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8016418:	f898 1014 	ldrb.w	r1, [r8, #20]
 801641c:	4648      	mov	r0, r9
 801641e:	f7f6 fc9d 	bl	800cd5c <ucdr_serialize_bool>
 8016422:	f898 3014 	ldrb.w	r3, [r8, #20]
 8016426:	4005      	ands	r5, r0
 8016428:	b94b      	cbnz	r3, 801643e <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801642a:	4628      	mov	r0, r5
 801642c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8016430:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8016434:	4648      	mov	r0, r9
 8016436:	f7f6 fceb 	bl	800ce10 <ucdr_serialize_uint16_t>
 801643a:	4005      	ands	r5, r0
 801643c:	e7da      	b.n	80163f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801643e:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8016442:	f108 011c 	add.w	r1, r8, #28
 8016446:	4648      	mov	r0, r9
 8016448:	f7fc fe14 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 801644c:	4028      	ands	r0, r5
 801644e:	b2c5      	uxtb	r5, r0
 8016450:	4628      	mov	r0, r5
 8016452:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8016456:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801645a:	4648      	mov	r0, r9
 801645c:	f7f6 fec2 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8016460:	4028      	ands	r0, r5
 8016462:	b2c5      	uxtb	r5, r0
 8016464:	e7d8      	b.n	8016418 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8016466:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801646a:	4648      	mov	r0, r9
 801646c:	f7f6 feba 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8016470:	4028      	ands	r0, r5
 8016472:	b2c5      	uxtb	r5, r0
 8016474:	e7c7      	b.n	8016406 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8016476:	bf00      	nop

08016478 <uxr_serialize_OBJK_DataReader_Binary>:
 8016478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801647a:	2202      	movs	r2, #2
 801647c:	460c      	mov	r4, r1
 801647e:	4606      	mov	r6, r0
 8016480:	f7fc fc5a 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016484:	78a1      	ldrb	r1, [r4, #2]
 8016486:	4605      	mov	r5, r0
 8016488:	4630      	mov	r0, r6
 801648a:	f7f6 fc67 	bl	800cd5c <ucdr_serialize_bool>
 801648e:	78a3      	ldrb	r3, [r4, #2]
 8016490:	4005      	ands	r5, r0
 8016492:	b2ed      	uxtb	r5, r5
 8016494:	b90b      	cbnz	r3, 801649a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8016496:	4628      	mov	r0, r5
 8016498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801649a:	f104 0108 	add.w	r1, r4, #8
 801649e:	4630      	mov	r0, r6
 80164a0:	f7ff ff96 	bl	80163d0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80164a4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80164a8:	4607      	mov	r7, r0
 80164aa:	4630      	mov	r0, r6
 80164ac:	f7f6 fc56 	bl	800cd5c <ucdr_serialize_bool>
 80164b0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80164b4:	4038      	ands	r0, r7
 80164b6:	b2c7      	uxtb	r7, r0
 80164b8:	b95b      	cbnz	r3, 80164d2 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80164ba:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80164be:	4630      	mov	r0, r6
 80164c0:	f7f6 fc4c 	bl	800cd5c <ucdr_serialize_bool>
 80164c4:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80164c8:	4007      	ands	r7, r0
 80164ca:	b94b      	cbnz	r3, 80164e0 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80164cc:	403d      	ands	r5, r7
 80164ce:	4628      	mov	r0, r5
 80164d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164d2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80164d6:	4630      	mov	r0, r6
 80164d8:	f7f7 f8da 	bl	800d690 <ucdr_serialize_uint64_t>
 80164dc:	4007      	ands	r7, r0
 80164de:	e7ec      	b.n	80164ba <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80164e0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80164e2:	4630      	mov	r0, r6
 80164e4:	f003 feec 	bl	801a2c0 <ucdr_serialize_string>
 80164e8:	4007      	ands	r7, r0
 80164ea:	b2ff      	uxtb	r7, r7
 80164ec:	e7ee      	b.n	80164cc <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80164ee:	bf00      	nop

080164f0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80164f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f2:	2202      	movs	r2, #2
 80164f4:	460d      	mov	r5, r1
 80164f6:	4606      	mov	r6, r0
 80164f8:	f7fc fc1e 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 80164fc:	78a9      	ldrb	r1, [r5, #2]
 80164fe:	4604      	mov	r4, r0
 8016500:	4630      	mov	r0, r6
 8016502:	f7f6 fc2b 	bl	800cd5c <ucdr_serialize_bool>
 8016506:	78ab      	ldrb	r3, [r5, #2]
 8016508:	4004      	ands	r4, r0
 801650a:	b2e4      	uxtb	r4, r4
 801650c:	b90b      	cbnz	r3, 8016512 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801650e:	4620      	mov	r0, r4
 8016510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016512:	f105 0108 	add.w	r1, r5, #8
 8016516:	4630      	mov	r0, r6
 8016518:	f7ff ff5a 	bl	80163d0 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801651c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8016520:	4607      	mov	r7, r0
 8016522:	4630      	mov	r0, r6
 8016524:	f7f6 fc1a 	bl	800cd5c <ucdr_serialize_bool>
 8016528:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801652c:	4038      	ands	r0, r7
 801652e:	b2c7      	uxtb	r7, r0
 8016530:	b913      	cbnz	r3, 8016538 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8016532:	403c      	ands	r4, r7
 8016534:	4620      	mov	r0, r4
 8016536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016538:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801653c:	4630      	mov	r0, r6
 801653e:	f7f7 f8a7 	bl	800d690 <ucdr_serialize_uint64_t>
 8016542:	4007      	ands	r7, r0
 8016544:	e7f5      	b.n	8016532 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8016546:	bf00      	nop

08016548 <uxr_deserialize_ObjectVariant>:
 8016548:	b570      	push	{r4, r5, r6, lr}
 801654a:	4605      	mov	r5, r0
 801654c:	460e      	mov	r6, r1
 801654e:	f7f6 fc49 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016552:	b168      	cbz	r0, 8016570 <uxr_deserialize_ObjectVariant+0x28>
 8016554:	7833      	ldrb	r3, [r6, #0]
 8016556:	3b01      	subs	r3, #1
 8016558:	4604      	mov	r4, r0
 801655a:	2b0d      	cmp	r3, #13
 801655c:	d809      	bhi.n	8016572 <uxr_deserialize_ObjectVariant+0x2a>
 801655e:	e8df f003 	tbb	[pc, r3]
 8016562:	0a41      	.short	0x0a41
 8016564:	0a0a2323 	.word	0x0a0a2323
 8016568:	10080a0a 	.word	0x10080a0a
 801656c:	565c1010 	.word	0x565c1010
 8016570:	2400      	movs	r4, #0
 8016572:	4620      	mov	r0, r4
 8016574:	bd70      	pop	{r4, r5, r6, pc}
 8016576:	1d31      	adds	r1, r6, #4
 8016578:	4628      	mov	r0, r5
 801657a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801657e:	f7ff bd55 	b.w	801602c <uxr_deserialize_DATAWRITER_Representation>
 8016582:	1d31      	adds	r1, r6, #4
 8016584:	4628      	mov	r0, r5
 8016586:	f7f6 fc2d 	bl	800cde4 <ucdr_deserialize_uint8_t>
 801658a:	2800      	cmp	r0, #0
 801658c:	d0f0      	beq.n	8016570 <uxr_deserialize_ObjectVariant+0x28>
 801658e:	7933      	ldrb	r3, [r6, #4]
 8016590:	2b01      	cmp	r3, #1
 8016592:	d001      	beq.n	8016598 <uxr_deserialize_ObjectVariant+0x50>
 8016594:	2b02      	cmp	r3, #2
 8016596:	d1ec      	bne.n	8016572 <uxr_deserialize_ObjectVariant+0x2a>
 8016598:	68b1      	ldr	r1, [r6, #8]
 801659a:	4628      	mov	r0, r5
 801659c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80165a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165a4:	f003 be9c 	b.w	801a2e0 <ucdr_deserialize_string>
 80165a8:	1d31      	adds	r1, r6, #4
 80165aa:	4628      	mov	r0, r5
 80165ac:	f7f6 fc1a 	bl	800cde4 <ucdr_deserialize_uint8_t>
 80165b0:	4604      	mov	r4, r0
 80165b2:	b170      	cbz	r0, 80165d2 <uxr_deserialize_ObjectVariant+0x8a>
 80165b4:	7933      	ldrb	r3, [r6, #4]
 80165b6:	2b02      	cmp	r3, #2
 80165b8:	d04c      	beq.n	8016654 <uxr_deserialize_ObjectVariant+0x10c>
 80165ba:	2b03      	cmp	r3, #3
 80165bc:	d109      	bne.n	80165d2 <uxr_deserialize_ObjectVariant+0x8a>
 80165be:	f106 0308 	add.w	r3, r6, #8
 80165c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80165c6:	f106 010c 	add.w	r1, r6, #12
 80165ca:	4628      	mov	r0, r5
 80165cc:	f7fc fd64 	bl	8013098 <ucdr_deserialize_sequence_uint8_t>
 80165d0:	4604      	mov	r4, r0
 80165d2:	2202      	movs	r2, #2
 80165d4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80165d8:	4628      	mov	r0, r5
 80165da:	f7fc fc11 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 80165de:	4020      	ands	r0, r4
 80165e0:	b2c4      	uxtb	r4, r0
 80165e2:	e7c6      	b.n	8016572 <uxr_deserialize_ObjectVariant+0x2a>
 80165e4:	1d31      	adds	r1, r6, #4
 80165e6:	4628      	mov	r0, r5
 80165e8:	f7f6 fbfc 	bl	800cde4 <ucdr_deserialize_uint8_t>
 80165ec:	4604      	mov	r4, r0
 80165ee:	b130      	cbz	r0, 80165fe <uxr_deserialize_ObjectVariant+0xb6>
 80165f0:	7933      	ldrb	r3, [r6, #4]
 80165f2:	2b02      	cmp	r3, #2
 80165f4:	d036      	beq.n	8016664 <uxr_deserialize_ObjectVariant+0x11c>
 80165f6:	2b03      	cmp	r3, #3
 80165f8:	d03c      	beq.n	8016674 <uxr_deserialize_ObjectVariant+0x12c>
 80165fa:	2b01      	cmp	r3, #1
 80165fc:	d032      	beq.n	8016664 <uxr_deserialize_ObjectVariant+0x11c>
 80165fe:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8016602:	4628      	mov	r0, r5
 8016604:	f7f7 f994 	bl	800d930 <ucdr_deserialize_int16_t>
 8016608:	4020      	ands	r0, r4
 801660a:	b2c4      	uxtb	r4, r0
 801660c:	e7b1      	b.n	8016572 <uxr_deserialize_ObjectVariant+0x2a>
 801660e:	1d31      	adds	r1, r6, #4
 8016610:	4628      	mov	r0, r5
 8016612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016616:	f7ff bbbf 	b.w	8015d98 <uxr_deserialize_CLIENT_Representation>
 801661a:	2204      	movs	r2, #4
 801661c:	18b1      	adds	r1, r6, r2
 801661e:	4628      	mov	r0, r5
 8016620:	f7fc fbee 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016624:	2202      	movs	r2, #2
 8016626:	f106 0108 	add.w	r1, r6, #8
 801662a:	4604      	mov	r4, r0
 801662c:	4628      	mov	r0, r5
 801662e:	f7fc fbe7 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016632:	2202      	movs	r2, #2
 8016634:	4004      	ands	r4, r0
 8016636:	f106 010a 	add.w	r1, r6, #10
 801663a:	4628      	mov	r0, r5
 801663c:	f7fc fbe0 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016640:	b2e4      	uxtb	r4, r4
 8016642:	4603      	mov	r3, r0
 8016644:	f106 010c 	add.w	r1, r6, #12
 8016648:	4628      	mov	r0, r5
 801664a:	401c      	ands	r4, r3
 801664c:	f7f6 fb9c 	bl	800cd88 <ucdr_deserialize_bool>
 8016650:	4004      	ands	r4, r0
 8016652:	e78e      	b.n	8016572 <uxr_deserialize_ObjectVariant+0x2a>
 8016654:	68b1      	ldr	r1, [r6, #8]
 8016656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801665a:	4628      	mov	r0, r5
 801665c:	f003 fe40 	bl	801a2e0 <ucdr_deserialize_string>
 8016660:	4604      	mov	r4, r0
 8016662:	e7b6      	b.n	80165d2 <uxr_deserialize_ObjectVariant+0x8a>
 8016664:	68b1      	ldr	r1, [r6, #8]
 8016666:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801666a:	4628      	mov	r0, r5
 801666c:	f003 fe38 	bl	801a2e0 <ucdr_deserialize_string>
 8016670:	4604      	mov	r4, r0
 8016672:	e7c4      	b.n	80165fe <uxr_deserialize_ObjectVariant+0xb6>
 8016674:	f106 0308 	add.w	r3, r6, #8
 8016678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801667c:	f106 010c 	add.w	r1, r6, #12
 8016680:	4628      	mov	r0, r5
 8016682:	f7fc fd09 	bl	8013098 <ucdr_deserialize_sequence_uint8_t>
 8016686:	4604      	mov	r4, r0
 8016688:	e7b9      	b.n	80165fe <uxr_deserialize_ObjectVariant+0xb6>
 801668a:	bf00      	nop

0801668c <uxr_deserialize_BaseObjectRequest>:
 801668c:	b570      	push	{r4, r5, r6, lr}
 801668e:	2202      	movs	r2, #2
 8016690:	4605      	mov	r5, r0
 8016692:	460e      	mov	r6, r1
 8016694:	f7fc fbb4 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016698:	2202      	movs	r2, #2
 801669a:	4604      	mov	r4, r0
 801669c:	18b1      	adds	r1, r6, r2
 801669e:	4628      	mov	r0, r5
 80166a0:	f7fc fbae 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 80166a4:	4020      	ands	r0, r4
 80166a6:	b2c0      	uxtb	r0, r0
 80166a8:	bd70      	pop	{r4, r5, r6, pc}
 80166aa:	bf00      	nop

080166ac <uxr_serialize_ActivityInfoVariant>:
 80166ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166b0:	460d      	mov	r5, r1
 80166b2:	7809      	ldrb	r1, [r1, #0]
 80166b4:	4607      	mov	r7, r0
 80166b6:	f7f6 fb7f 	bl	800cdb8 <ucdr_serialize_uint8_t>
 80166ba:	4681      	mov	r9, r0
 80166bc:	b138      	cbz	r0, 80166ce <uxr_serialize_ActivityInfoVariant+0x22>
 80166be:	782b      	ldrb	r3, [r5, #0]
 80166c0:	2b06      	cmp	r3, #6
 80166c2:	f000 8082 	beq.w	80167ca <uxr_serialize_ActivityInfoVariant+0x11e>
 80166c6:	2b0d      	cmp	r3, #13
 80166c8:	d016      	beq.n	80166f8 <uxr_serialize_ActivityInfoVariant+0x4c>
 80166ca:	2b05      	cmp	r3, #5
 80166cc:	d002      	beq.n	80166d4 <uxr_serialize_ActivityInfoVariant+0x28>
 80166ce:	4648      	mov	r0, r9
 80166d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166d4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80166d8:	4638      	mov	r0, r7
 80166da:	f7f7 f8a9 	bl	800d830 <ucdr_serialize_int16_t>
 80166de:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80166e2:	4681      	mov	r9, r0
 80166e4:	4638      	mov	r0, r7
 80166e6:	f7f6 ffd3 	bl	800d690 <ucdr_serialize_uint64_t>
 80166ea:	ea09 0000 	and.w	r0, r9, r0
 80166ee:	fa5f f980 	uxtb.w	r9, r0
 80166f2:	4648      	mov	r0, r9
 80166f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166f8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80166fc:	4638      	mov	r0, r7
 80166fe:	f7f7 f897 	bl	800d830 <ucdr_serialize_int16_t>
 8016702:	68e9      	ldr	r1, [r5, #12]
 8016704:	4681      	mov	r9, r0
 8016706:	4638      	mov	r0, r7
 8016708:	f7f6 fd6c 	bl	800d1e4 <ucdr_serialize_uint32_t>
 801670c:	68eb      	ldr	r3, [r5, #12]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d0eb      	beq.n	80166ea <uxr_serialize_ActivityInfoVariant+0x3e>
 8016712:	b320      	cbz	r0, 801675e <uxr_serialize_ActivityInfoVariant+0xb2>
 8016714:	f105 080c 	add.w	r8, r5, #12
 8016718:	2600      	movs	r6, #0
 801671a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801671e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8016722:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8016726:	4638      	mov	r0, r7
 8016728:	f7f6 fb46 	bl	800cdb8 <ucdr_serialize_uint8_t>
 801672c:	2800      	cmp	r0, #0
 801672e:	d053      	beq.n	80167d8 <uxr_serialize_ActivityInfoVariant+0x12c>
 8016730:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8016734:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8016738:	0074      	lsls	r4, r6, #1
 801673a:	00c9      	lsls	r1, r1, #3
 801673c:	2b03      	cmp	r3, #3
 801673e:	d854      	bhi.n	80167ea <uxr_serialize_ActivityInfoVariant+0x13e>
 8016740:	e8df f003 	tbb	[pc, r3]
 8016744:	02102132 	.word	0x02102132
 8016748:	4441      	add	r1, r8
 801674a:	4638      	mov	r0, r7
 801674c:	6889      	ldr	r1, [r1, #8]
 801674e:	f003 fdb7 	bl	801a2c0 <ucdr_serialize_string>
 8016752:	68ea      	ldr	r2, [r5, #12]
 8016754:	3601      	adds	r6, #1
 8016756:	4296      	cmp	r6, r2
 8016758:	d242      	bcs.n	80167e0 <uxr_serialize_ActivityInfoVariant+0x134>
 801675a:	2800      	cmp	r0, #0
 801675c:	d1dd      	bne.n	801671a <uxr_serialize_ActivityInfoVariant+0x6e>
 801675e:	f04f 0900 	mov.w	r9, #0
 8016762:	e7b4      	b.n	80166ce <uxr_serialize_ActivityInfoVariant+0x22>
 8016764:	3108      	adds	r1, #8
 8016766:	4441      	add	r1, r8
 8016768:	2210      	movs	r2, #16
 801676a:	4638      	mov	r0, r7
 801676c:	f7fc fae4 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016770:	4434      	add	r4, r6
 8016772:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8016776:	4604      	mov	r4, r0
 8016778:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801677a:	4638      	mov	r0, r7
 801677c:	f7f6 fd32 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8016780:	4020      	ands	r0, r4
 8016782:	b2c0      	uxtb	r0, r0
 8016784:	e7e5      	b.n	8016752 <uxr_serialize_ActivityInfoVariant+0xa6>
 8016786:	3108      	adds	r1, #8
 8016788:	4441      	add	r1, r8
 801678a:	2204      	movs	r2, #4
 801678c:	4638      	mov	r0, r7
 801678e:	f7fc fad3 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016792:	4434      	add	r4, r6
 8016794:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8016798:	4604      	mov	r4, r0
 801679a:	8b19      	ldrh	r1, [r3, #24]
 801679c:	4638      	mov	r0, r7
 801679e:	f7f6 fb37 	bl	800ce10 <ucdr_serialize_uint16_t>
 80167a2:	4020      	ands	r0, r4
 80167a4:	b2c0      	uxtb	r0, r0
 80167a6:	e7d4      	b.n	8016752 <uxr_serialize_ActivityInfoVariant+0xa6>
 80167a8:	3108      	adds	r1, #8
 80167aa:	4441      	add	r1, r8
 80167ac:	2202      	movs	r2, #2
 80167ae:	4638      	mov	r0, r7
 80167b0:	f7fc fac2 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 80167b4:	4434      	add	r4, r6
 80167b6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80167ba:	4604      	mov	r4, r0
 80167bc:	7d99      	ldrb	r1, [r3, #22]
 80167be:	4638      	mov	r0, r7
 80167c0:	f7f6 fafa 	bl	800cdb8 <ucdr_serialize_uint8_t>
 80167c4:	4020      	ands	r0, r4
 80167c6:	b2c0      	uxtb	r0, r0
 80167c8:	e7c3      	b.n	8016752 <uxr_serialize_ActivityInfoVariant+0xa6>
 80167ca:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80167ce:	4638      	mov	r0, r7
 80167d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167d4:	f7f7 b82c 	b.w	800d830 <ucdr_serialize_int16_t>
 80167d8:	68ea      	ldr	r2, [r5, #12]
 80167da:	3601      	adds	r6, #1
 80167dc:	42b2      	cmp	r2, r6
 80167de:	d8be      	bhi.n	801675e <uxr_serialize_ActivityInfoVariant+0xb2>
 80167e0:	ea09 0900 	and.w	r9, r9, r0
 80167e4:	fa5f f989 	uxtb.w	r9, r9
 80167e8:	e771      	b.n	80166ce <uxr_serialize_ActivityInfoVariant+0x22>
 80167ea:	68eb      	ldr	r3, [r5, #12]
 80167ec:	3601      	adds	r6, #1
 80167ee:	429e      	cmp	r6, r3
 80167f0:	f10a 0a18 	add.w	sl, sl, #24
 80167f4:	d395      	bcc.n	8016722 <uxr_serialize_ActivityInfoVariant+0x76>
 80167f6:	e76a      	b.n	80166ce <uxr_serialize_ActivityInfoVariant+0x22>

080167f8 <uxr_deserialize_BaseObjectReply>:
 80167f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167fc:	2202      	movs	r2, #2
 80167fe:	4606      	mov	r6, r0
 8016800:	460f      	mov	r7, r1
 8016802:	f7fc fafd 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016806:	2202      	movs	r2, #2
 8016808:	18b9      	adds	r1, r7, r2
 801680a:	4605      	mov	r5, r0
 801680c:	4630      	mov	r0, r6
 801680e:	f7fc faf7 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016812:	1d39      	adds	r1, r7, #4
 8016814:	4680      	mov	r8, r0
 8016816:	4630      	mov	r0, r6
 8016818:	f7f6 fae4 	bl	800cde4 <ucdr_deserialize_uint8_t>
 801681c:	1d79      	adds	r1, r7, #5
 801681e:	4604      	mov	r4, r0
 8016820:	4630      	mov	r0, r6
 8016822:	f7f6 fadf 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016826:	ea05 0508 	and.w	r5, r5, r8
 801682a:	402c      	ands	r4, r5
 801682c:	4020      	ands	r0, r4
 801682e:	b2c0      	uxtb	r0, r0
 8016830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016834 <uxr_serialize_ReadSpecification>:
 8016834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016838:	460e      	mov	r6, r1
 801683a:	7809      	ldrb	r1, [r1, #0]
 801683c:	4607      	mov	r7, r0
 801683e:	f7f6 fabb 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016842:	7871      	ldrb	r1, [r6, #1]
 8016844:	4604      	mov	r4, r0
 8016846:	4638      	mov	r0, r7
 8016848:	f7f6 fab6 	bl	800cdb8 <ucdr_serialize_uint8_t>
 801684c:	78b1      	ldrb	r1, [r6, #2]
 801684e:	4004      	ands	r4, r0
 8016850:	4638      	mov	r0, r7
 8016852:	f7f6 fa83 	bl	800cd5c <ucdr_serialize_bool>
 8016856:	78b3      	ldrb	r3, [r6, #2]
 8016858:	b2e4      	uxtb	r4, r4
 801685a:	4004      	ands	r4, r0
 801685c:	b94b      	cbnz	r3, 8016872 <uxr_serialize_ReadSpecification+0x3e>
 801685e:	7a31      	ldrb	r1, [r6, #8]
 8016860:	4638      	mov	r0, r7
 8016862:	f7f6 fa7b 	bl	800cd5c <ucdr_serialize_bool>
 8016866:	7a33      	ldrb	r3, [r6, #8]
 8016868:	4004      	ands	r4, r0
 801686a:	b943      	cbnz	r3, 801687e <uxr_serialize_ReadSpecification+0x4a>
 801686c:	4620      	mov	r0, r4
 801686e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016872:	6871      	ldr	r1, [r6, #4]
 8016874:	4638      	mov	r0, r7
 8016876:	f003 fd23 	bl	801a2c0 <ucdr_serialize_string>
 801687a:	4004      	ands	r4, r0
 801687c:	e7ef      	b.n	801685e <uxr_serialize_ReadSpecification+0x2a>
 801687e:	8971      	ldrh	r1, [r6, #10]
 8016880:	4638      	mov	r0, r7
 8016882:	f7f6 fac5 	bl	800ce10 <ucdr_serialize_uint16_t>
 8016886:	89b1      	ldrh	r1, [r6, #12]
 8016888:	4605      	mov	r5, r0
 801688a:	4638      	mov	r0, r7
 801688c:	f7f6 fac0 	bl	800ce10 <ucdr_serialize_uint16_t>
 8016890:	89f1      	ldrh	r1, [r6, #14]
 8016892:	4005      	ands	r5, r0
 8016894:	4638      	mov	r0, r7
 8016896:	f7f6 fabb 	bl	800ce10 <ucdr_serialize_uint16_t>
 801689a:	8a31      	ldrh	r1, [r6, #16]
 801689c:	4680      	mov	r8, r0
 801689e:	4638      	mov	r0, r7
 80168a0:	f7f6 fab6 	bl	800ce10 <ucdr_serialize_uint16_t>
 80168a4:	b2ed      	uxtb	r5, r5
 80168a6:	4025      	ands	r5, r4
 80168a8:	ea08 0505 	and.w	r5, r8, r5
 80168ac:	ea00 0405 	and.w	r4, r0, r5
 80168b0:	4620      	mov	r0, r4
 80168b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168b6:	bf00      	nop

080168b8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80168b8:	f7ff ba16 	b.w	8015ce8 <uxr_serialize_CLIENT_Representation>

080168bc <uxr_serialize_CREATE_Payload>:
 80168bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168be:	2202      	movs	r2, #2
 80168c0:	4607      	mov	r7, r0
 80168c2:	460e      	mov	r6, r1
 80168c4:	f7fc fa38 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 80168c8:	2202      	movs	r2, #2
 80168ca:	18b1      	adds	r1, r6, r2
 80168cc:	4605      	mov	r5, r0
 80168ce:	4638      	mov	r0, r7
 80168d0:	f7fc fa32 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 80168d4:	7931      	ldrb	r1, [r6, #4]
 80168d6:	4604      	mov	r4, r0
 80168d8:	4638      	mov	r0, r7
 80168da:	f7f6 fa6d 	bl	800cdb8 <ucdr_serialize_uint8_t>
 80168de:	b170      	cbz	r0, 80168fe <uxr_serialize_CREATE_Payload+0x42>
 80168e0:	7933      	ldrb	r3, [r6, #4]
 80168e2:	402c      	ands	r4, r5
 80168e4:	3b01      	subs	r3, #1
 80168e6:	b2e4      	uxtb	r4, r4
 80168e8:	2b0d      	cmp	r3, #13
 80168ea:	d809      	bhi.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 80168ec:	e8df f003 	tbb	[pc, r3]
 80168f0:	23230a4c 	.word	0x23230a4c
 80168f4:	0a0a0a0a 	.word	0x0a0a0a0a
 80168f8:	12121208 	.word	0x12121208
 80168fc:	3e45      	.short	0x3e45
 80168fe:	2400      	movs	r4, #0
 8016900:	4620      	mov	r0, r4
 8016902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016904:	f106 0108 	add.w	r1, r6, #8
 8016908:	4638      	mov	r0, r7
 801690a:	f7ff faf3 	bl	8015ef4 <uxr_serialize_DATAWRITER_Representation>
 801690e:	4004      	ands	r4, r0
 8016910:	4620      	mov	r0, r4
 8016912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016914:	7a31      	ldrb	r1, [r6, #8]
 8016916:	4638      	mov	r0, r7
 8016918:	f7f6 fa4e 	bl	800cdb8 <ucdr_serialize_uint8_t>
 801691c:	2800      	cmp	r0, #0
 801691e:	d0ee      	beq.n	80168fe <uxr_serialize_CREATE_Payload+0x42>
 8016920:	7a33      	ldrb	r3, [r6, #8]
 8016922:	2b01      	cmp	r3, #1
 8016924:	d001      	beq.n	801692a <uxr_serialize_CREATE_Payload+0x6e>
 8016926:	2b02      	cmp	r3, #2
 8016928:	d1ea      	bne.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 801692a:	68f1      	ldr	r1, [r6, #12]
 801692c:	4638      	mov	r0, r7
 801692e:	f003 fcc7 	bl	801a2c0 <ucdr_serialize_string>
 8016932:	4004      	ands	r4, r0
 8016934:	e7e4      	b.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 8016936:	7a31      	ldrb	r1, [r6, #8]
 8016938:	4638      	mov	r0, r7
 801693a:	f7f6 fa3d 	bl	800cdb8 <ucdr_serialize_uint8_t>
 801693e:	4605      	mov	r5, r0
 8016940:	b158      	cbz	r0, 801695a <uxr_serialize_CREATE_Payload+0x9e>
 8016942:	7a33      	ldrb	r3, [r6, #8]
 8016944:	2b02      	cmp	r3, #2
 8016946:	d034      	beq.n	80169b2 <uxr_serialize_CREATE_Payload+0xf6>
 8016948:	2b03      	cmp	r3, #3
 801694a:	d106      	bne.n	801695a <uxr_serialize_CREATE_Payload+0x9e>
 801694c:	68f2      	ldr	r2, [r6, #12]
 801694e:	f106 0110 	add.w	r1, r6, #16
 8016952:	4638      	mov	r0, r7
 8016954:	f7fc fb8e 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 8016958:	4605      	mov	r5, r0
 801695a:	2202      	movs	r2, #2
 801695c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016960:	4638      	mov	r0, r7
 8016962:	f7fc f9e9 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016966:	4028      	ands	r0, r5
 8016968:	4004      	ands	r4, r0
 801696a:	e7c9      	b.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 801696c:	f106 0108 	add.w	r1, r6, #8
 8016970:	4638      	mov	r0, r7
 8016972:	f7ff f9b9 	bl	8015ce8 <uxr_serialize_CLIENT_Representation>
 8016976:	4004      	ands	r4, r0
 8016978:	e7c2      	b.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 801697a:	f106 0108 	add.w	r1, r6, #8
 801697e:	4638      	mov	r0, r7
 8016980:	f7ff fa6e 	bl	8015e60 <uxr_serialize_AGENT_Representation>
 8016984:	4004      	ands	r4, r0
 8016986:	e7bb      	b.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 8016988:	7a31      	ldrb	r1, [r6, #8]
 801698a:	4638      	mov	r0, r7
 801698c:	f7f6 fa14 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016990:	4605      	mov	r5, r0
 8016992:	b130      	cbz	r0, 80169a2 <uxr_serialize_CREATE_Payload+0xe6>
 8016994:	7a33      	ldrb	r3, [r6, #8]
 8016996:	2b02      	cmp	r3, #2
 8016998:	d011      	beq.n	80169be <uxr_serialize_CREATE_Payload+0x102>
 801699a:	2b03      	cmp	r3, #3
 801699c:	d015      	beq.n	80169ca <uxr_serialize_CREATE_Payload+0x10e>
 801699e:	2b01      	cmp	r3, #1
 80169a0:	d00d      	beq.n	80169be <uxr_serialize_CREATE_Payload+0x102>
 80169a2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80169a6:	4638      	mov	r0, r7
 80169a8:	f7f6 ff42 	bl	800d830 <ucdr_serialize_int16_t>
 80169ac:	4028      	ands	r0, r5
 80169ae:	4004      	ands	r4, r0
 80169b0:	e7a6      	b.n	8016900 <uxr_serialize_CREATE_Payload+0x44>
 80169b2:	68f1      	ldr	r1, [r6, #12]
 80169b4:	4638      	mov	r0, r7
 80169b6:	f003 fc83 	bl	801a2c0 <ucdr_serialize_string>
 80169ba:	4605      	mov	r5, r0
 80169bc:	e7cd      	b.n	801695a <uxr_serialize_CREATE_Payload+0x9e>
 80169be:	68f1      	ldr	r1, [r6, #12]
 80169c0:	4638      	mov	r0, r7
 80169c2:	f003 fc7d 	bl	801a2c0 <ucdr_serialize_string>
 80169c6:	4605      	mov	r5, r0
 80169c8:	e7eb      	b.n	80169a2 <uxr_serialize_CREATE_Payload+0xe6>
 80169ca:	68f2      	ldr	r2, [r6, #12]
 80169cc:	f106 0110 	add.w	r1, r6, #16
 80169d0:	4638      	mov	r0, r7
 80169d2:	f7fc fb4f 	bl	8013074 <ucdr_serialize_sequence_uint8_t>
 80169d6:	4605      	mov	r5, r0
 80169d8:	e7e3      	b.n	80169a2 <uxr_serialize_CREATE_Payload+0xe6>
 80169da:	bf00      	nop

080169dc <uxr_serialize_GET_INFO_Payload>:
 80169dc:	b570      	push	{r4, r5, r6, lr}
 80169de:	2202      	movs	r2, #2
 80169e0:	4605      	mov	r5, r0
 80169e2:	460e      	mov	r6, r1
 80169e4:	f7fc f9a8 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 80169e8:	2202      	movs	r2, #2
 80169ea:	18b1      	adds	r1, r6, r2
 80169ec:	4604      	mov	r4, r0
 80169ee:	4628      	mov	r0, r5
 80169f0:	f7fc f9a2 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 80169f4:	6871      	ldr	r1, [r6, #4]
 80169f6:	4004      	ands	r4, r0
 80169f8:	4628      	mov	r0, r5
 80169fa:	f7f6 fbf3 	bl	800d1e4 <ucdr_serialize_uint32_t>
 80169fe:	b2e4      	uxtb	r4, r4
 8016a00:	4020      	ands	r0, r4
 8016a02:	bd70      	pop	{r4, r5, r6, pc}

08016a04 <uxr_deserialize_GET_INFO_Payload>:
 8016a04:	b570      	push	{r4, r5, r6, lr}
 8016a06:	2202      	movs	r2, #2
 8016a08:	4605      	mov	r5, r0
 8016a0a:	460e      	mov	r6, r1
 8016a0c:	f7fc f9f8 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016a10:	2202      	movs	r2, #2
 8016a12:	18b1      	adds	r1, r6, r2
 8016a14:	4604      	mov	r4, r0
 8016a16:	4628      	mov	r0, r5
 8016a18:	f7fc f9f2 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016a1c:	1d31      	adds	r1, r6, #4
 8016a1e:	4004      	ands	r4, r0
 8016a20:	4628      	mov	r0, r5
 8016a22:	f7f6 fd0f 	bl	800d444 <ucdr_deserialize_uint32_t>
 8016a26:	b2e4      	uxtb	r4, r4
 8016a28:	4020      	ands	r0, r4
 8016a2a:	bd70      	pop	{r4, r5, r6, pc}

08016a2c <uxr_serialize_DELETE_Payload>:
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	2202      	movs	r2, #2
 8016a30:	4605      	mov	r5, r0
 8016a32:	460e      	mov	r6, r1
 8016a34:	f7fc f980 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016a38:	2202      	movs	r2, #2
 8016a3a:	4604      	mov	r4, r0
 8016a3c:	18b1      	adds	r1, r6, r2
 8016a3e:	4628      	mov	r0, r5
 8016a40:	f7fc f97a 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016a44:	4020      	ands	r0, r4
 8016a46:	b2c0      	uxtb	r0, r0
 8016a48:	bd70      	pop	{r4, r5, r6, pc}
 8016a4a:	bf00      	nop

08016a4c <uxr_deserialize_STATUS_AGENT_Payload>:
 8016a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a50:	4605      	mov	r5, r0
 8016a52:	460e      	mov	r6, r1
 8016a54:	f7f6 f9c6 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016a58:	1c71      	adds	r1, r6, #1
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	f7f6 f9c1 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016a62:	2204      	movs	r2, #4
 8016a64:	18b1      	adds	r1, r6, r2
 8016a66:	4680      	mov	r8, r0
 8016a68:	4628      	mov	r0, r5
 8016a6a:	f7fc f9c9 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016a6e:	f106 0108 	add.w	r1, r6, #8
 8016a72:	4607      	mov	r7, r0
 8016a74:	2202      	movs	r2, #2
 8016a76:	4628      	mov	r0, r5
 8016a78:	f7fc f9c2 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016a7c:	ea04 0308 	and.w	r3, r4, r8
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	ea03 0407 	and.w	r4, r3, r7
 8016a86:	2202      	movs	r2, #2
 8016a88:	4607      	mov	r7, r0
 8016a8a:	f106 010a 	add.w	r1, r6, #10
 8016a8e:	4628      	mov	r0, r5
 8016a90:	f7fc f9b6 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016a94:	f106 010c 	add.w	r1, r6, #12
 8016a98:	4603      	mov	r3, r0
 8016a9a:	4628      	mov	r0, r5
 8016a9c:	461d      	mov	r5, r3
 8016a9e:	f7f6 f973 	bl	800cd88 <ucdr_deserialize_bool>
 8016aa2:	403c      	ands	r4, r7
 8016aa4:	4025      	ands	r5, r4
 8016aa6:	4028      	ands	r0, r5
 8016aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016aac <uxr_deserialize_STATUS_Payload>:
 8016aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ab0:	2202      	movs	r2, #2
 8016ab2:	4606      	mov	r6, r0
 8016ab4:	460f      	mov	r7, r1
 8016ab6:	f7fc f9a3 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016aba:	2202      	movs	r2, #2
 8016abc:	18b9      	adds	r1, r7, r2
 8016abe:	4605      	mov	r5, r0
 8016ac0:	4630      	mov	r0, r6
 8016ac2:	f7fc f99d 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016ac6:	1d39      	adds	r1, r7, #4
 8016ac8:	4680      	mov	r8, r0
 8016aca:	4630      	mov	r0, r6
 8016acc:	f7f6 f98a 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016ad0:	1d79      	adds	r1, r7, #5
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	4630      	mov	r0, r6
 8016ad6:	f7f6 f985 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016ada:	ea05 0508 	and.w	r5, r5, r8
 8016ade:	402c      	ands	r4, r5
 8016ae0:	4020      	ands	r0, r4
 8016ae2:	b2c0      	uxtb	r0, r0
 8016ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016ae8 <uxr_serialize_INFO_Payload>:
 8016ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aec:	2202      	movs	r2, #2
 8016aee:	460c      	mov	r4, r1
 8016af0:	4605      	mov	r5, r0
 8016af2:	f7fc f921 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016af6:	2202      	movs	r2, #2
 8016af8:	18a1      	adds	r1, r4, r2
 8016afa:	4680      	mov	r8, r0
 8016afc:	4628      	mov	r0, r5
 8016afe:	f7fc f91b 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016b02:	7921      	ldrb	r1, [r4, #4]
 8016b04:	4607      	mov	r7, r0
 8016b06:	4628      	mov	r0, r5
 8016b08:	f7f6 f956 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016b0c:	7961      	ldrb	r1, [r4, #5]
 8016b0e:	4606      	mov	r6, r0
 8016b10:	4628      	mov	r0, r5
 8016b12:	f7f6 f951 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016b16:	ea08 0807 	and.w	r8, r8, r7
 8016b1a:	ea06 0608 	and.w	r6, r6, r8
 8016b1e:	4006      	ands	r6, r0
 8016b20:	7a21      	ldrb	r1, [r4, #8]
 8016b22:	4628      	mov	r0, r5
 8016b24:	f7f6 f91a 	bl	800cd5c <ucdr_serialize_bool>
 8016b28:	7a23      	ldrb	r3, [r4, #8]
 8016b2a:	b2f7      	uxtb	r7, r6
 8016b2c:	4606      	mov	r6, r0
 8016b2e:	b96b      	cbnz	r3, 8016b4c <uxr_serialize_INFO_Payload+0x64>
 8016b30:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8016b34:	4628      	mov	r0, r5
 8016b36:	f7f6 f911 	bl	800cd5c <ucdr_serialize_bool>
 8016b3a:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8016b3e:	4030      	ands	r0, r6
 8016b40:	b2c6      	uxtb	r6, r0
 8016b42:	b983      	cbnz	r3, 8016b66 <uxr_serialize_INFO_Payload+0x7e>
 8016b44:	ea06 0007 	and.w	r0, r6, r7
 8016b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b4c:	7b21      	ldrb	r1, [r4, #12]
 8016b4e:	4628      	mov	r0, r5
 8016b50:	f7f6 f932 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016b54:	b188      	cbz	r0, 8016b7a <uxr_serialize_INFO_Payload+0x92>
 8016b56:	f104 010c 	add.w	r1, r4, #12
 8016b5a:	4628      	mov	r0, r5
 8016b5c:	f7ff f9f2 	bl	8015f44 <uxr_serialize_ObjectVariant.part.0>
 8016b60:	4030      	ands	r0, r6
 8016b62:	b2c6      	uxtb	r6, r0
 8016b64:	e7e4      	b.n	8016b30 <uxr_serialize_INFO_Payload+0x48>
 8016b66:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	f7ff fd9e 	bl	80166ac <uxr_serialize_ActivityInfoVariant>
 8016b70:	4006      	ands	r6, r0
 8016b72:	ea06 0007 	and.w	r0, r6, r7
 8016b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	e7d8      	b.n	8016b30 <uxr_serialize_INFO_Payload+0x48>
 8016b7e:	bf00      	nop

08016b80 <uxr_serialize_READ_DATA_Payload>:
 8016b80:	b570      	push	{r4, r5, r6, lr}
 8016b82:	2202      	movs	r2, #2
 8016b84:	4605      	mov	r5, r0
 8016b86:	460e      	mov	r6, r1
 8016b88:	f7fc f8d6 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016b8c:	2202      	movs	r2, #2
 8016b8e:	18b1      	adds	r1, r6, r2
 8016b90:	4604      	mov	r4, r0
 8016b92:	4628      	mov	r0, r5
 8016b94:	f7fc f8d0 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016b98:	1d31      	adds	r1, r6, #4
 8016b9a:	4004      	ands	r4, r0
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	f7ff fe49 	bl	8016834 <uxr_serialize_ReadSpecification>
 8016ba2:	b2e4      	uxtb	r4, r4
 8016ba4:	4020      	ands	r0, r4
 8016ba6:	bd70      	pop	{r4, r5, r6, pc}

08016ba8 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016ba8:	b570      	push	{r4, r5, r6, lr}
 8016baa:	2202      	movs	r2, #2
 8016bac:	4605      	mov	r5, r0
 8016bae:	460e      	mov	r6, r1
 8016bb0:	f7fc f8c2 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016bb4:	2202      	movs	r2, #2
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	18b1      	adds	r1, r6, r2
 8016bba:	4628      	mov	r0, r5
 8016bbc:	f7fc f8bc 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016bc0:	4020      	ands	r0, r4
 8016bc2:	b2c0      	uxtb	r0, r0
 8016bc4:	bd70      	pop	{r4, r5, r6, pc}
 8016bc6:	bf00      	nop

08016bc8 <uxr_serialize_ACKNACK_Payload>:
 8016bc8:	b570      	push	{r4, r5, r6, lr}
 8016bca:	460c      	mov	r4, r1
 8016bcc:	460e      	mov	r6, r1
 8016bce:	f834 1b02 	ldrh.w	r1, [r4], #2
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	f7f6 f91c 	bl	800ce10 <ucdr_serialize_uint16_t>
 8016bd8:	2202      	movs	r2, #2
 8016bda:	4621      	mov	r1, r4
 8016bdc:	4604      	mov	r4, r0
 8016bde:	4628      	mov	r0, r5
 8016be0:	f7fc f8aa 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016be4:	7931      	ldrb	r1, [r6, #4]
 8016be6:	4004      	ands	r4, r0
 8016be8:	4628      	mov	r0, r5
 8016bea:	f7f6 f8e5 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016bee:	b2e4      	uxtb	r4, r4
 8016bf0:	4020      	ands	r0, r4
 8016bf2:	bd70      	pop	{r4, r5, r6, pc}

08016bf4 <uxr_deserialize_ACKNACK_Payload>:
 8016bf4:	b570      	push	{r4, r5, r6, lr}
 8016bf6:	4605      	mov	r5, r0
 8016bf8:	460e      	mov	r6, r1
 8016bfa:	f7f6 fa09 	bl	800d010 <ucdr_deserialize_uint16_t>
 8016bfe:	2202      	movs	r2, #2
 8016c00:	18b1      	adds	r1, r6, r2
 8016c02:	4604      	mov	r4, r0
 8016c04:	4628      	mov	r0, r5
 8016c06:	f7fc f8fb 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016c0a:	1d31      	adds	r1, r6, #4
 8016c0c:	4004      	ands	r4, r0
 8016c0e:	4628      	mov	r0, r5
 8016c10:	f7f6 f8e8 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016c14:	b2e4      	uxtb	r4, r4
 8016c16:	4020      	ands	r0, r4
 8016c18:	bd70      	pop	{r4, r5, r6, pc}
 8016c1a:	bf00      	nop

08016c1c <uxr_serialize_HEARTBEAT_Payload>:
 8016c1c:	b570      	push	{r4, r5, r6, lr}
 8016c1e:	460d      	mov	r5, r1
 8016c20:	8809      	ldrh	r1, [r1, #0]
 8016c22:	4606      	mov	r6, r0
 8016c24:	f7f6 f8f4 	bl	800ce10 <ucdr_serialize_uint16_t>
 8016c28:	8869      	ldrh	r1, [r5, #2]
 8016c2a:	4604      	mov	r4, r0
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	f7f6 f8ef 	bl	800ce10 <ucdr_serialize_uint16_t>
 8016c32:	7929      	ldrb	r1, [r5, #4]
 8016c34:	4004      	ands	r4, r0
 8016c36:	4630      	mov	r0, r6
 8016c38:	f7f6 f8be 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016c3c:	b2e4      	uxtb	r4, r4
 8016c3e:	4020      	ands	r0, r4
 8016c40:	bd70      	pop	{r4, r5, r6, pc}
 8016c42:	bf00      	nop

08016c44 <uxr_deserialize_HEARTBEAT_Payload>:
 8016c44:	b570      	push	{r4, r5, r6, lr}
 8016c46:	4605      	mov	r5, r0
 8016c48:	460e      	mov	r6, r1
 8016c4a:	f7f6 f9e1 	bl	800d010 <ucdr_deserialize_uint16_t>
 8016c4e:	1cb1      	adds	r1, r6, #2
 8016c50:	4604      	mov	r4, r0
 8016c52:	4628      	mov	r0, r5
 8016c54:	f7f6 f9dc 	bl	800d010 <ucdr_deserialize_uint16_t>
 8016c58:	1d31      	adds	r1, r6, #4
 8016c5a:	4004      	ands	r4, r0
 8016c5c:	4628      	mov	r0, r5
 8016c5e:	f7f6 f8c1 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016c62:	b2e4      	uxtb	r4, r4
 8016c64:	4020      	ands	r0, r4
 8016c66:	bd70      	pop	{r4, r5, r6, pc}

08016c68 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c6c:	4605      	mov	r5, r0
 8016c6e:	460e      	mov	r6, r1
 8016c70:	f7f6 ff6a 	bl	800db48 <ucdr_deserialize_int32_t>
 8016c74:	1d31      	adds	r1, r6, #4
 8016c76:	4607      	mov	r7, r0
 8016c78:	4628      	mov	r0, r5
 8016c7a:	f7f6 fbe3 	bl	800d444 <ucdr_deserialize_uint32_t>
 8016c7e:	f106 0108 	add.w	r1, r6, #8
 8016c82:	4680      	mov	r8, r0
 8016c84:	4628      	mov	r0, r5
 8016c86:	f7f6 ff5f 	bl	800db48 <ucdr_deserialize_int32_t>
 8016c8a:	f106 010c 	add.w	r1, r6, #12
 8016c8e:	4604      	mov	r4, r0
 8016c90:	4628      	mov	r0, r5
 8016c92:	f7f6 fbd7 	bl	800d444 <ucdr_deserialize_uint32_t>
 8016c96:	ea07 0708 	and.w	r7, r7, r8
 8016c9a:	403c      	ands	r4, r7
 8016c9c:	f106 0110 	add.w	r1, r6, #16
 8016ca0:	4004      	ands	r4, r0
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	f7f6 ff50 	bl	800db48 <ucdr_deserialize_int32_t>
 8016ca8:	f106 0114 	add.w	r1, r6, #20
 8016cac:	4607      	mov	r7, r0
 8016cae:	4628      	mov	r0, r5
 8016cb0:	f7f6 fbc8 	bl	800d444 <ucdr_deserialize_uint32_t>
 8016cb4:	b2e4      	uxtb	r4, r4
 8016cb6:	403c      	ands	r4, r7
 8016cb8:	4020      	ands	r0, r4
 8016cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cbe:	bf00      	nop

08016cc0 <uxr_serialize_SampleIdentity>:
 8016cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc4:	220c      	movs	r2, #12
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	460d      	mov	r5, r1
 8016cca:	f7fc f835 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016cce:	2203      	movs	r2, #3
 8016cd0:	f105 010c 	add.w	r1, r5, #12
 8016cd4:	4607      	mov	r7, r0
 8016cd6:	4620      	mov	r0, r4
 8016cd8:	f7fc f82e 	bl	8012d38 <ucdr_serialize_array_uint8_t>
 8016cdc:	7be9      	ldrb	r1, [r5, #15]
 8016cde:	4680      	mov	r8, r0
 8016ce0:	4620      	mov	r0, r4
 8016ce2:	f7f6 f869 	bl	800cdb8 <ucdr_serialize_uint8_t>
 8016ce6:	6929      	ldr	r1, [r5, #16]
 8016ce8:	4606      	mov	r6, r0
 8016cea:	4620      	mov	r0, r4
 8016cec:	f7f6 fe94 	bl	800da18 <ucdr_serialize_int32_t>
 8016cf0:	6969      	ldr	r1, [r5, #20]
 8016cf2:	4603      	mov	r3, r0
 8016cf4:	4620      	mov	r0, r4
 8016cf6:	ea07 0708 	and.w	r7, r7, r8
 8016cfa:	461c      	mov	r4, r3
 8016cfc:	f7f6 fa72 	bl	800d1e4 <ucdr_serialize_uint32_t>
 8016d00:	403e      	ands	r6, r7
 8016d02:	4034      	ands	r4, r6
 8016d04:	4020      	ands	r0, r4
 8016d06:	b2c0      	uxtb	r0, r0
 8016d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016d0c <uxr_deserialize_SampleIdentity>:
 8016d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d10:	220c      	movs	r2, #12
 8016d12:	4604      	mov	r4, r0
 8016d14:	460d      	mov	r5, r1
 8016d16:	f7fc f873 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016d1a:	2203      	movs	r2, #3
 8016d1c:	f105 010c 	add.w	r1, r5, #12
 8016d20:	4607      	mov	r7, r0
 8016d22:	4620      	mov	r0, r4
 8016d24:	f7fc f86c 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8016d28:	f105 010f 	add.w	r1, r5, #15
 8016d2c:	4680      	mov	r8, r0
 8016d2e:	4620      	mov	r0, r4
 8016d30:	f7f6 f858 	bl	800cde4 <ucdr_deserialize_uint8_t>
 8016d34:	f105 0110 	add.w	r1, r5, #16
 8016d38:	4606      	mov	r6, r0
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	f7f6 ff04 	bl	800db48 <ucdr_deserialize_int32_t>
 8016d40:	f105 0114 	add.w	r1, r5, #20
 8016d44:	4603      	mov	r3, r0
 8016d46:	4620      	mov	r0, r4
 8016d48:	ea07 0708 	and.w	r7, r7, r8
 8016d4c:	461c      	mov	r4, r3
 8016d4e:	f7f6 fb79 	bl	800d444 <ucdr_deserialize_uint32_t>
 8016d52:	403e      	ands	r6, r7
 8016d54:	4034      	ands	r4, r6
 8016d56:	4020      	ands	r0, r4
 8016d58:	b2c0      	uxtb	r0, r0
 8016d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d5e:	bf00      	nop

08016d60 <nav_msgs__msg__Odometry__init>:
 8016d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d64:	4605      	mov	r5, r0
 8016d66:	b3c0      	cbz	r0, 8016dda <nav_msgs__msg__Odometry__init+0x7a>
 8016d68:	f003 f8e8 	bl	8019f3c <std_msgs__msg__Header__init>
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	b310      	cbz	r0, 8016db6 <nav_msgs__msg__Odometry__init+0x56>
 8016d70:	f105 0614 	add.w	r6, r5, #20
 8016d74:	4630      	mov	r0, r6
 8016d76:	f003 f883 	bl	8019e80 <rosidl_runtime_c__String__init>
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d040      	beq.n	8016e02 <nav_msgs__msg__Odometry__init+0xa2>
 8016d80:	f105 0720 	add.w	r7, r5, #32
 8016d84:	4638      	mov	r0, r7
 8016d86:	f003 f915 	bl	8019fb4 <geometry_msgs__msg__PoseWithCovariance__init>
 8016d8a:	4604      	mov	r4, r0
 8016d8c:	b348      	cbz	r0, 8016de2 <nav_msgs__msg__Odometry__init+0x82>
 8016d8e:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 8016d92:	4640      	mov	r0, r8
 8016d94:	f003 f924 	bl	8019fe0 <geometry_msgs__msg__TwistWithCovariance__init>
 8016d98:	4604      	mov	r4, r0
 8016d9a:	b9d8      	cbnz	r0, 8016dd4 <nav_msgs__msg__Odometry__init+0x74>
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	f003 f8f1 	bl	8019f84 <std_msgs__msg__Header__fini>
 8016da2:	4630      	mov	r0, r6
 8016da4:	f003 f882 	bl	8019eac <rosidl_runtime_c__String__fini>
 8016da8:	4638      	mov	r0, r7
 8016daa:	f003 f915 	bl	8019fd8 <geometry_msgs__msg__PoseWithCovariance__fini>
 8016dae:	4640      	mov	r0, r8
 8016db0:	f003 f928 	bl	801a004 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016db4:	e00e      	b.n	8016dd4 <nav_msgs__msg__Odometry__init+0x74>
 8016db6:	4628      	mov	r0, r5
 8016db8:	f003 f8e4 	bl	8019f84 <std_msgs__msg__Header__fini>
 8016dbc:	f105 0014 	add.w	r0, r5, #20
 8016dc0:	f003 f874 	bl	8019eac <rosidl_runtime_c__String__fini>
 8016dc4:	f105 0020 	add.w	r0, r5, #32
 8016dc8:	f003 f906 	bl	8019fd8 <geometry_msgs__msg__PoseWithCovariance__fini>
 8016dcc:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 8016dd0:	f003 f918 	bl	801a004 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016dda:	4604      	mov	r4, r0
 8016ddc:	4620      	mov	r0, r4
 8016dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016de2:	4628      	mov	r0, r5
 8016de4:	f003 f8ce 	bl	8019f84 <std_msgs__msg__Header__fini>
 8016de8:	4630      	mov	r0, r6
 8016dea:	f003 f85f 	bl	8019eac <rosidl_runtime_c__String__fini>
 8016dee:	4638      	mov	r0, r7
 8016df0:	f003 f8f2 	bl	8019fd8 <geometry_msgs__msg__PoseWithCovariance__fini>
 8016df4:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 8016df8:	f003 f904 	bl	801a004 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e02:	4628      	mov	r0, r5
 8016e04:	f003 f8be 	bl	8019f84 <std_msgs__msg__Header__fini>
 8016e08:	4630      	mov	r0, r6
 8016e0a:	e7d9      	b.n	8016dc0 <nav_msgs__msg__Odometry__init+0x60>

08016e0c <nav_msgs__msg__Odometry__fini>:
 8016e0c:	b188      	cbz	r0, 8016e32 <nav_msgs__msg__Odometry__fini+0x26>
 8016e0e:	b510      	push	{r4, lr}
 8016e10:	4604      	mov	r4, r0
 8016e12:	f003 f8b7 	bl	8019f84 <std_msgs__msg__Header__fini>
 8016e16:	f104 0014 	add.w	r0, r4, #20
 8016e1a:	f003 f847 	bl	8019eac <rosidl_runtime_c__String__fini>
 8016e1e:	f104 0020 	add.w	r0, r4, #32
 8016e22:	f003 f8d9 	bl	8019fd8 <geometry_msgs__msg__PoseWithCovariance__fini>
 8016e26:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8016e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e2e:	f003 b8e9 	b.w	801a004 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016e32:	4770      	bx	lr

08016e34 <rcl_client_get_rmw_handle>:
 8016e34:	b118      	cbz	r0, 8016e3e <rcl_client_get_rmw_handle+0xa>
 8016e36:	6800      	ldr	r0, [r0, #0]
 8016e38:	b108      	cbz	r0, 8016e3e <rcl_client_get_rmw_handle+0xa>
 8016e3a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016e3e:	4770      	bx	lr

08016e40 <rcl_send_request>:
 8016e40:	b570      	push	{r4, r5, r6, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	b1e8      	cbz	r0, 8016e82 <rcl_send_request+0x42>
 8016e46:	4604      	mov	r4, r0
 8016e48:	6800      	ldr	r0, [r0, #0]
 8016e4a:	b1d0      	cbz	r0, 8016e82 <rcl_send_request+0x42>
 8016e4c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016e50:	b1bb      	cbz	r3, 8016e82 <rcl_send_request+0x42>
 8016e52:	460e      	mov	r6, r1
 8016e54:	b1d1      	cbz	r1, 8016e8c <rcl_send_request+0x4c>
 8016e56:	4615      	mov	r5, r2
 8016e58:	b1c2      	cbz	r2, 8016e8c <rcl_send_request+0x4c>
 8016e5a:	2105      	movs	r1, #5
 8016e5c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016e60:	f7f9 fca8 	bl	80107b4 <__atomic_load_8>
 8016e64:	6823      	ldr	r3, [r4, #0]
 8016e66:	e9c5 0100 	strd	r0, r1, [r5]
 8016e6a:	462a      	mov	r2, r5
 8016e6c:	4631      	mov	r1, r6
 8016e6e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016e72:	f002 fcff 	bl	8019874 <rmw_send_request>
 8016e76:	4606      	mov	r6, r0
 8016e78:	b160      	cbz	r0, 8016e94 <rcl_send_request+0x54>
 8016e7a:	2601      	movs	r6, #1
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	b002      	add	sp, #8
 8016e80:	bd70      	pop	{r4, r5, r6, pc}
 8016e82:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8016e86:	4630      	mov	r0, r6
 8016e88:	b002      	add	sp, #8
 8016e8a:	bd70      	pop	{r4, r5, r6, pc}
 8016e8c:	260b      	movs	r6, #11
 8016e8e:	4630      	mov	r0, r6
 8016e90:	b002      	add	sp, #8
 8016e92:	bd70      	pop	{r4, r5, r6, pc}
 8016e94:	6820      	ldr	r0, [r4, #0]
 8016e96:	2105      	movs	r1, #5
 8016e98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e9c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016ea0:	9100      	str	r1, [sp, #0]
 8016ea2:	f7f9 fcf3 	bl	801088c <__atomic_exchange_8>
 8016ea6:	4630      	mov	r0, r6
 8016ea8:	b002      	add	sp, #8
 8016eaa:	bd70      	pop	{r4, r5, r6, pc}
 8016eac:	0000      	movs	r0, r0
	...

08016eb0 <rcl_take_response>:
 8016eb0:	b570      	push	{r4, r5, r6, lr}
 8016eb2:	468e      	mov	lr, r1
 8016eb4:	460c      	mov	r4, r1
 8016eb6:	4616      	mov	r6, r2
 8016eb8:	4605      	mov	r5, r0
 8016eba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ebe:	b08c      	sub	sp, #48	@ 0x30
 8016ec0:	f10d 0c18 	add.w	ip, sp, #24
 8016ec4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ec8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016ecc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ed0:	b35d      	cbz	r5, 8016f2a <rcl_take_response+0x7a>
 8016ed2:	682b      	ldr	r3, [r5, #0]
 8016ed4:	b34b      	cbz	r3, 8016f2a <rcl_take_response+0x7a>
 8016ed6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016eda:	b330      	cbz	r0, 8016f2a <rcl_take_response+0x7a>
 8016edc:	b346      	cbz	r6, 8016f30 <rcl_take_response+0x80>
 8016ede:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8016f38 <rcl_take_response+0x88>
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	f88d 3007 	strb.w	r3, [sp, #7]
 8016ee8:	4632      	mov	r2, r6
 8016eea:	f10d 0307 	add.w	r3, sp, #7
 8016eee:	a902      	add	r1, sp, #8
 8016ef0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016ef4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016ef8:	f002 fdc4 	bl	8019a84 <rmw_take_response>
 8016efc:	4605      	mov	r5, r0
 8016efe:	b9c8      	cbnz	r0, 8016f34 <rcl_take_response+0x84>
 8016f00:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016f04:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016f08:	2a00      	cmp	r2, #0
 8016f0a:	bf08      	it	eq
 8016f0c:	461d      	moveq	r5, r3
 8016f0e:	f10d 0e18 	add.w	lr, sp, #24
 8016f12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f16:	46a4      	mov	ip, r4
 8016f18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016f20:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f24:	4628      	mov	r0, r5
 8016f26:	b00c      	add	sp, #48	@ 0x30
 8016f28:	bd70      	pop	{r4, r5, r6, pc}
 8016f2a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8016f2e:	e7ee      	b.n	8016f0e <rcl_take_response+0x5e>
 8016f30:	250b      	movs	r5, #11
 8016f32:	e7ec      	b.n	8016f0e <rcl_take_response+0x5e>
 8016f34:	2501      	movs	r5, #1
 8016f36:	e7ea      	b.n	8016f0e <rcl_take_response+0x5e>
	...

08016f40 <rcl_client_is_valid>:
 8016f40:	b130      	cbz	r0, 8016f50 <rcl_client_is_valid+0x10>
 8016f42:	6800      	ldr	r0, [r0, #0]
 8016f44:	b120      	cbz	r0, 8016f50 <rcl_client_is_valid+0x10>
 8016f46:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016f4a:	3800      	subs	r0, #0
 8016f4c:	bf18      	it	ne
 8016f4e:	2001      	movne	r0, #1
 8016f50:	4770      	bx	lr
 8016f52:	bf00      	nop

08016f54 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016f54:	280b      	cmp	r0, #11
 8016f56:	dc0d      	bgt.n	8016f74 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016f58:	2800      	cmp	r0, #0
 8016f5a:	db09      	blt.n	8016f70 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016f5c:	280b      	cmp	r0, #11
 8016f5e:	d807      	bhi.n	8016f70 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016f60:	e8df f000 	tbb	[pc, r0]
 8016f64:	07060607 	.word	0x07060607
 8016f68:	06060606 	.word	0x06060606
 8016f6c:	07070606 	.word	0x07070606
 8016f70:	2001      	movs	r0, #1
 8016f72:	4770      	bx	lr
 8016f74:	28cb      	cmp	r0, #203	@ 0xcb
 8016f76:	bf18      	it	ne
 8016f78:	2001      	movne	r0, #1
 8016f7a:	4770      	bx	lr

08016f7c <rcl_get_zero_initialized_guard_condition>:
 8016f7c:	4a03      	ldr	r2, [pc, #12]	@ (8016f8c <rcl_get_zero_initialized_guard_condition+0x10>)
 8016f7e:	4603      	mov	r3, r0
 8016f80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f84:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f88:	4618      	mov	r0, r3
 8016f8a:	4770      	bx	lr
 8016f8c:	0801e6dc 	.word	0x0801e6dc

08016f90 <rcl_guard_condition_init>:
 8016f90:	b082      	sub	sp, #8
 8016f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f94:	b087      	sub	sp, #28
 8016f96:	ac0c      	add	r4, sp, #48	@ 0x30
 8016f98:	e884 000c 	stmia.w	r4, {r2, r3}
 8016f9c:	46a6      	mov	lr, r4
 8016f9e:	460d      	mov	r5, r1
 8016fa0:	4604      	mov	r4, r0
 8016fa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fa6:	f10d 0c04 	add.w	ip, sp, #4
 8016faa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fae:	f8de 3000 	ldr.w	r3, [lr]
 8016fb2:	f8cc 3000 	str.w	r3, [ip]
 8016fb6:	a801      	add	r0, sp, #4
 8016fb8:	f7f9 fbee 	bl	8010798 <rcutils_allocator_is_valid>
 8016fbc:	b338      	cbz	r0, 801700e <rcl_guard_condition_init+0x7e>
 8016fbe:	b334      	cbz	r4, 801700e <rcl_guard_condition_init+0x7e>
 8016fc0:	6866      	ldr	r6, [r4, #4]
 8016fc2:	b9ee      	cbnz	r6, 8017000 <rcl_guard_condition_init+0x70>
 8016fc4:	b31d      	cbz	r5, 801700e <rcl_guard_condition_init+0x7e>
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f7f7 fb50 	bl	800e66c <rcl_context_is_valid>
 8016fcc:	b308      	cbz	r0, 8017012 <rcl_guard_condition_init+0x82>
 8016fce:	9b01      	ldr	r3, [sp, #4]
 8016fd0:	9905      	ldr	r1, [sp, #20]
 8016fd2:	201c      	movs	r0, #28
 8016fd4:	4798      	blx	r3
 8016fd6:	4607      	mov	r7, r0
 8016fd8:	6060      	str	r0, [r4, #4]
 8016fda:	b310      	cbz	r0, 8017022 <rcl_guard_condition_init+0x92>
 8016fdc:	6828      	ldr	r0, [r5, #0]
 8016fde:	3028      	adds	r0, #40	@ 0x28
 8016fe0:	f002 fbae 	bl	8019740 <rmw_create_guard_condition>
 8016fe4:	6038      	str	r0, [r7, #0]
 8016fe6:	6860      	ldr	r0, [r4, #4]
 8016fe8:	6805      	ldr	r5, [r0, #0]
 8016fea:	b1a5      	cbz	r5, 8017016 <rcl_guard_condition_init+0x86>
 8016fec:	2301      	movs	r3, #1
 8016fee:	ac01      	add	r4, sp, #4
 8016ff0:	7103      	strb	r3, [r0, #4]
 8016ff2:	f100 0708 	add.w	r7, r0, #8
 8016ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ff8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016ffa:	6823      	ldr	r3, [r4, #0]
 8016ffc:	603b      	str	r3, [r7, #0]
 8016ffe:	e000      	b.n	8017002 <rcl_guard_condition_init+0x72>
 8017000:	2664      	movs	r6, #100	@ 0x64
 8017002:	4630      	mov	r0, r6
 8017004:	b007      	add	sp, #28
 8017006:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801700a:	b002      	add	sp, #8
 801700c:	4770      	bx	lr
 801700e:	260b      	movs	r6, #11
 8017010:	e7f7      	b.n	8017002 <rcl_guard_condition_init+0x72>
 8017012:	2665      	movs	r6, #101	@ 0x65
 8017014:	e7f5      	b.n	8017002 <rcl_guard_condition_init+0x72>
 8017016:	9b02      	ldr	r3, [sp, #8]
 8017018:	9905      	ldr	r1, [sp, #20]
 801701a:	4798      	blx	r3
 801701c:	2601      	movs	r6, #1
 801701e:	6065      	str	r5, [r4, #4]
 8017020:	e7ef      	b.n	8017002 <rcl_guard_condition_init+0x72>
 8017022:	260a      	movs	r6, #10
 8017024:	e7ed      	b.n	8017002 <rcl_guard_condition_init+0x72>
 8017026:	bf00      	nop

08017028 <rcl_guard_condition_init_from_rmw>:
 8017028:	b082      	sub	sp, #8
 801702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017034:	4604      	mov	r4, r0
 8017036:	f84c 3f04 	str.w	r3, [ip, #4]!
 801703a:	460e      	mov	r6, r1
 801703c:	4617      	mov	r7, r2
 801703e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017042:	f10d 0e04 	add.w	lr, sp, #4
 8017046:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801704a:	f8dc 3000 	ldr.w	r3, [ip]
 801704e:	f8ce 3000 	str.w	r3, [lr]
 8017052:	a801      	add	r0, sp, #4
 8017054:	f7f9 fba0 	bl	8010798 <rcutils_allocator_is_valid>
 8017058:	b350      	cbz	r0, 80170b0 <rcl_guard_condition_init_from_rmw+0x88>
 801705a:	b34c      	cbz	r4, 80170b0 <rcl_guard_condition_init_from_rmw+0x88>
 801705c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017060:	f1b8 0f00 	cmp.w	r8, #0
 8017064:	d11e      	bne.n	80170a4 <rcl_guard_condition_init_from_rmw+0x7c>
 8017066:	b31f      	cbz	r7, 80170b0 <rcl_guard_condition_init_from_rmw+0x88>
 8017068:	4638      	mov	r0, r7
 801706a:	f7f7 faff 	bl	800e66c <rcl_context_is_valid>
 801706e:	b328      	cbz	r0, 80170bc <rcl_guard_condition_init_from_rmw+0x94>
 8017070:	9b01      	ldr	r3, [sp, #4]
 8017072:	9905      	ldr	r1, [sp, #20]
 8017074:	201c      	movs	r0, #28
 8017076:	4798      	blx	r3
 8017078:	4605      	mov	r5, r0
 801707a:	6060      	str	r0, [r4, #4]
 801707c:	b358      	cbz	r0, 80170d6 <rcl_guard_condition_init_from_rmw+0xae>
 801707e:	b1fe      	cbz	r6, 80170c0 <rcl_guard_condition_init_from_rmw+0x98>
 8017080:	6006      	str	r6, [r0, #0]
 8017082:	f880 8004 	strb.w	r8, [r0, #4]
 8017086:	ac01      	add	r4, sp, #4
 8017088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801708a:	f105 0c08 	add.w	ip, r5, #8
 801708e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017092:	6823      	ldr	r3, [r4, #0]
 8017094:	f8cc 3000 	str.w	r3, [ip]
 8017098:	2000      	movs	r0, #0
 801709a:	b006      	add	sp, #24
 801709c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170a0:	b002      	add	sp, #8
 80170a2:	4770      	bx	lr
 80170a4:	2064      	movs	r0, #100	@ 0x64
 80170a6:	b006      	add	sp, #24
 80170a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170ac:	b002      	add	sp, #8
 80170ae:	4770      	bx	lr
 80170b0:	200b      	movs	r0, #11
 80170b2:	b006      	add	sp, #24
 80170b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170b8:	b002      	add	sp, #8
 80170ba:	4770      	bx	lr
 80170bc:	2065      	movs	r0, #101	@ 0x65
 80170be:	e7f2      	b.n	80170a6 <rcl_guard_condition_init_from_rmw+0x7e>
 80170c0:	6838      	ldr	r0, [r7, #0]
 80170c2:	3028      	adds	r0, #40	@ 0x28
 80170c4:	f002 fb3c 	bl	8019740 <rmw_create_guard_condition>
 80170c8:	6028      	str	r0, [r5, #0]
 80170ca:	6865      	ldr	r5, [r4, #4]
 80170cc:	682e      	ldr	r6, [r5, #0]
 80170ce:	b126      	cbz	r6, 80170da <rcl_guard_condition_init_from_rmw+0xb2>
 80170d0:	2301      	movs	r3, #1
 80170d2:	712b      	strb	r3, [r5, #4]
 80170d4:	e7d7      	b.n	8017086 <rcl_guard_condition_init_from_rmw+0x5e>
 80170d6:	200a      	movs	r0, #10
 80170d8:	e7e5      	b.n	80170a6 <rcl_guard_condition_init_from_rmw+0x7e>
 80170da:	4628      	mov	r0, r5
 80170dc:	9b02      	ldr	r3, [sp, #8]
 80170de:	9905      	ldr	r1, [sp, #20]
 80170e0:	4798      	blx	r3
 80170e2:	6066      	str	r6, [r4, #4]
 80170e4:	2001      	movs	r0, #1
 80170e6:	e7de      	b.n	80170a6 <rcl_guard_condition_init_from_rmw+0x7e>

080170e8 <rcl_guard_condition_fini>:
 80170e8:	b570      	push	{r4, r5, r6, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	b1f0      	cbz	r0, 801712c <rcl_guard_condition_fini+0x44>
 80170ee:	6843      	ldr	r3, [r0, #4]
 80170f0:	4604      	mov	r4, r0
 80170f2:	b163      	cbz	r3, 801710e <rcl_guard_condition_fini+0x26>
 80170f4:	6818      	ldr	r0, [r3, #0]
 80170f6:	68de      	ldr	r6, [r3, #12]
 80170f8:	6999      	ldr	r1, [r3, #24]
 80170fa:	b160      	cbz	r0, 8017116 <rcl_guard_condition_fini+0x2e>
 80170fc:	791d      	ldrb	r5, [r3, #4]
 80170fe:	b965      	cbnz	r5, 801711a <rcl_guard_condition_fini+0x32>
 8017100:	4618      	mov	r0, r3
 8017102:	47b0      	blx	r6
 8017104:	2300      	movs	r3, #0
 8017106:	4628      	mov	r0, r5
 8017108:	6063      	str	r3, [r4, #4]
 801710a:	b002      	add	sp, #8
 801710c:	bd70      	pop	{r4, r5, r6, pc}
 801710e:	461d      	mov	r5, r3
 8017110:	4628      	mov	r0, r5
 8017112:	b002      	add	sp, #8
 8017114:	bd70      	pop	{r4, r5, r6, pc}
 8017116:	4605      	mov	r5, r0
 8017118:	e7f2      	b.n	8017100 <rcl_guard_condition_fini+0x18>
 801711a:	9101      	str	r1, [sp, #4]
 801711c:	f002 fb24 	bl	8019768 <rmw_destroy_guard_condition>
 8017120:	1e05      	subs	r5, r0, #0
 8017122:	6863      	ldr	r3, [r4, #4]
 8017124:	9901      	ldr	r1, [sp, #4]
 8017126:	bf18      	it	ne
 8017128:	2501      	movne	r5, #1
 801712a:	e7e9      	b.n	8017100 <rcl_guard_condition_fini+0x18>
 801712c:	250b      	movs	r5, #11
 801712e:	4628      	mov	r0, r5
 8017130:	b002      	add	sp, #8
 8017132:	bd70      	pop	{r4, r5, r6, pc}

08017134 <rcl_guard_condition_get_default_options>:
 8017134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017136:	b087      	sub	sp, #28
 8017138:	4606      	mov	r6, r0
 801713a:	4668      	mov	r0, sp
 801713c:	f7f9 fb1e 	bl	801077c <rcutils_get_default_allocator>
 8017140:	4b09      	ldr	r3, [pc, #36]	@ (8017168 <rcl_guard_condition_get_default_options+0x34>)
 8017142:	46ee      	mov	lr, sp
 8017144:	469c      	mov	ip, r3
 8017146:	461d      	mov	r5, r3
 8017148:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801714c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017152:	4634      	mov	r4, r6
 8017154:	f8de 7000 	ldr.w	r7, [lr]
 8017158:	f8cc 7000 	str.w	r7, [ip]
 801715c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801715e:	4630      	mov	r0, r6
 8017160:	6027      	str	r7, [r4, #0]
 8017162:	b007      	add	sp, #28
 8017164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017166:	bf00      	nop
 8017168:	20011b30 	.word	0x20011b30

0801716c <rcl_trigger_guard_condition>:
 801716c:	b148      	cbz	r0, 8017182 <rcl_trigger_guard_condition+0x16>
 801716e:	b508      	push	{r3, lr}
 8017170:	6843      	ldr	r3, [r0, #4]
 8017172:	b143      	cbz	r3, 8017186 <rcl_trigger_guard_condition+0x1a>
 8017174:	6818      	ldr	r0, [r3, #0]
 8017176:	f002 fccf 	bl	8019b18 <rmw_trigger_guard_condition>
 801717a:	3800      	subs	r0, #0
 801717c:	bf18      	it	ne
 801717e:	2001      	movne	r0, #1
 8017180:	bd08      	pop	{r3, pc}
 8017182:	200b      	movs	r0, #11
 8017184:	4770      	bx	lr
 8017186:	200b      	movs	r0, #11
 8017188:	bd08      	pop	{r3, pc}
 801718a:	bf00      	nop

0801718c <rcl_guard_condition_get_rmw_handle>:
 801718c:	b110      	cbz	r0, 8017194 <rcl_guard_condition_get_rmw_handle+0x8>
 801718e:	6840      	ldr	r0, [r0, #4]
 8017190:	b100      	cbz	r0, 8017194 <rcl_guard_condition_get_rmw_handle+0x8>
 8017192:	6800      	ldr	r0, [r0, #0]
 8017194:	4770      	bx	lr
 8017196:	bf00      	nop

08017198 <rcl_init>:
 8017198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801719c:	1e05      	subs	r5, r0, #0
 801719e:	b09c      	sub	sp, #112	@ 0x70
 80171a0:	460e      	mov	r6, r1
 80171a2:	4690      	mov	r8, r2
 80171a4:	461f      	mov	r7, r3
 80171a6:	f340 8099 	ble.w	80172dc <rcl_init+0x144>
 80171aa:	2900      	cmp	r1, #0
 80171ac:	f000 8099 	beq.w	80172e2 <rcl_init+0x14a>
 80171b0:	f1a1 0e04 	sub.w	lr, r1, #4
 80171b4:	f04f 0c00 	mov.w	ip, #0
 80171b8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80171bc:	f10c 0c01 	add.w	ip, ip, #1
 80171c0:	2c00      	cmp	r4, #0
 80171c2:	f000 808e 	beq.w	80172e2 <rcl_init+0x14a>
 80171c6:	4565      	cmp	r5, ip
 80171c8:	d1f6      	bne.n	80171b8 <rcl_init+0x20>
 80171ca:	f1b8 0f00 	cmp.w	r8, #0
 80171ce:	f000 8088 	beq.w	80172e2 <rcl_init+0x14a>
 80171d2:	f8d8 4000 	ldr.w	r4, [r8]
 80171d6:	2c00      	cmp	r4, #0
 80171d8:	f000 8083 	beq.w	80172e2 <rcl_init+0x14a>
 80171dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171de:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80171e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171e6:	6823      	ldr	r3, [r4, #0]
 80171e8:	f8cc 3000 	str.w	r3, [ip]
 80171ec:	a817      	add	r0, sp, #92	@ 0x5c
 80171ee:	f7f9 fad3 	bl	8010798 <rcutils_allocator_is_valid>
 80171f2:	2800      	cmp	r0, #0
 80171f4:	d075      	beq.n	80172e2 <rcl_init+0x14a>
 80171f6:	2f00      	cmp	r7, #0
 80171f8:	d073      	beq.n	80172e2 <rcl_init+0x14a>
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d175      	bne.n	80172ec <rcl_init+0x154>
 8017200:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8017204:	2178      	movs	r1, #120	@ 0x78
 8017206:	2001      	movs	r0, #1
 8017208:	4798      	blx	r3
 801720a:	4604      	mov	r4, r0
 801720c:	6038      	str	r0, [r7, #0]
 801720e:	2800      	cmp	r0, #0
 8017210:	f000 80a0 	beq.w	8017354 <rcl_init+0x1bc>
 8017214:	a802      	add	r0, sp, #8
 8017216:	f002 f833 	bl	8019280 <rmw_get_zero_initialized_context>
 801721a:	a902      	add	r1, sp, #8
 801721c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8017220:	2250      	movs	r2, #80	@ 0x50
 8017222:	ac17      	add	r4, sp, #92	@ 0x5c
 8017224:	f005 fc53 	bl	801cace <memcpy>
 8017228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801722a:	f8d7 e000 	ldr.w	lr, [r7]
 801722e:	46f4      	mov	ip, lr
 8017230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017234:	6823      	ldr	r3, [r4, #0]
 8017236:	f8cc 3000 	str.w	r3, [ip]
 801723a:	f10e 0114 	add.w	r1, lr, #20
 801723e:	4640      	mov	r0, r8
 8017240:	f7f7 fb26 	bl	800e890 <rcl_init_options_copy>
 8017244:	4604      	mov	r4, r0
 8017246:	2800      	cmp	r0, #0
 8017248:	d144      	bne.n	80172d4 <rcl_init+0x13c>
 801724a:	f8d7 9000 	ldr.w	r9, [r7]
 801724e:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8017252:	f8c9 0020 	str.w	r0, [r9, #32]
 8017256:	f8c9 5018 	str.w	r5, [r9, #24]
 801725a:	f8c9 801c 	str.w	r8, [r9, #28]
 801725e:	2d00      	cmp	r5, #0
 8017260:	d04b      	beq.n	80172fa <rcl_init+0x162>
 8017262:	2e00      	cmp	r6, #0
 8017264:	d049      	beq.n	80172fa <rcl_init+0x162>
 8017266:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801726a:	2104      	movs	r1, #4
 801726c:	4628      	mov	r0, r5
 801726e:	4798      	blx	r3
 8017270:	f8c9 0020 	str.w	r0, [r9, #32]
 8017274:	f8d7 9000 	ldr.w	r9, [r7]
 8017278:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801727c:	46ca      	mov	sl, r9
 801727e:	b343      	cbz	r3, 80172d2 <rcl_init+0x13a>
 8017280:	2d01      	cmp	r5, #1
 8017282:	f178 0300 	sbcs.w	r3, r8, #0
 8017286:	db38      	blt.n	80172fa <rcl_init+0x162>
 8017288:	2400      	movs	r4, #0
 801728a:	3e04      	subs	r6, #4
 801728c:	46a1      	mov	r9, r4
 801728e:	e00b      	b.n	80172a8 <rcl_init+0x110>
 8017290:	6831      	ldr	r1, [r6, #0]
 8017292:	f005 fc1c 	bl	801cace <memcpy>
 8017296:	3401      	adds	r4, #1
 8017298:	f149 0900 	adc.w	r9, r9, #0
 801729c:	45c8      	cmp	r8, r9
 801729e:	bf08      	it	eq
 80172a0:	42a5      	cmpeq	r5, r4
 80172a2:	d028      	beq.n	80172f6 <rcl_init+0x15e>
 80172a4:	f8d7 a000 	ldr.w	sl, [r7]
 80172a8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80172ac:	f7e8 ffba 	bl	8000224 <strlen>
 80172b0:	1c42      	adds	r2, r0, #1
 80172b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80172b4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80172b6:	f8da a020 	ldr.w	sl, [sl, #32]
 80172ba:	9201      	str	r2, [sp, #4]
 80172bc:	4610      	mov	r0, r2
 80172be:	4798      	blx	r3
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80172c6:	6a1b      	ldr	r3, [r3, #32]
 80172c8:	9a01      	ldr	r2, [sp, #4]
 80172ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80172ce:	2800      	cmp	r0, #0
 80172d0:	d1de      	bne.n	8017290 <rcl_init+0xf8>
 80172d2:	240a      	movs	r4, #10
 80172d4:	4638      	mov	r0, r7
 80172d6:	f7f7 f9d5 	bl	800e684 <__cleanup_context>
 80172da:	e003      	b.n	80172e4 <rcl_init+0x14c>
 80172dc:	2900      	cmp	r1, #0
 80172de:	f43f af74 	beq.w	80171ca <rcl_init+0x32>
 80172e2:	240b      	movs	r4, #11
 80172e4:	4620      	mov	r0, r4
 80172e6:	b01c      	add	sp, #112	@ 0x70
 80172e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ec:	2464      	movs	r4, #100	@ 0x64
 80172ee:	4620      	mov	r0, r4
 80172f0:	b01c      	add	sp, #112	@ 0x70
 80172f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172f6:	f8d7 9000 	ldr.w	r9, [r7]
 80172fa:	491d      	ldr	r1, [pc, #116]	@ (8017370 <rcl_init+0x1d8>)
 80172fc:	680b      	ldr	r3, [r1, #0]
 80172fe:	3301      	adds	r3, #1
 8017300:	d023      	beq.n	801734a <rcl_init+0x1b2>
 8017302:	600b      	str	r3, [r1, #0]
 8017304:	461a      	mov	r2, r3
 8017306:	2400      	movs	r4, #0
 8017308:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801730c:	607b      	str	r3, [r7, #4]
 801730e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8017310:	6182      	str	r2, [r0, #24]
 8017312:	3301      	adds	r3, #1
 8017314:	61c4      	str	r4, [r0, #28]
 8017316:	d01f      	beq.n	8017358 <rcl_init+0x1c0>
 8017318:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801731c:	b94b      	cbnz	r3, 8017332 <rcl_init+0x19a>
 801731e:	3030      	adds	r0, #48	@ 0x30
 8017320:	f000 f846 	bl	80173b0 <rcl_get_localhost_only>
 8017324:	4604      	mov	r4, r0
 8017326:	2800      	cmp	r0, #0
 8017328:	d1d4      	bne.n	80172d4 <rcl_init+0x13c>
 801732a:	f8d7 9000 	ldr.w	r9, [r7]
 801732e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8017332:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8017336:	3018      	adds	r0, #24
 8017338:	f7f9 ff5e 	bl	80111f8 <rmw_init>
 801733c:	4604      	mov	r4, r0
 801733e:	2800      	cmp	r0, #0
 8017340:	d0d0      	beq.n	80172e4 <rcl_init+0x14c>
 8017342:	f7ff fe07 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 8017346:	4604      	mov	r4, r0
 8017348:	e7c4      	b.n	80172d4 <rcl_init+0x13c>
 801734a:	2201      	movs	r2, #1
 801734c:	461c      	mov	r4, r3
 801734e:	600a      	str	r2, [r1, #0]
 8017350:	4613      	mov	r3, r2
 8017352:	e7d9      	b.n	8017308 <rcl_init+0x170>
 8017354:	240a      	movs	r4, #10
 8017356:	e7c5      	b.n	80172e4 <rcl_init+0x14c>
 8017358:	3024      	adds	r0, #36	@ 0x24
 801735a:	f003 fd31 	bl	801adc0 <rcl_get_default_domain_id>
 801735e:	4604      	mov	r4, r0
 8017360:	2800      	cmp	r0, #0
 8017362:	d1b7      	bne.n	80172d4 <rcl_init+0x13c>
 8017364:	f8d7 9000 	ldr.w	r9, [r7]
 8017368:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801736c:	e7d4      	b.n	8017318 <rcl_init+0x180>
 801736e:	bf00      	nop
 8017370:	20011b44 	.word	0x20011b44

08017374 <rcl_shutdown>:
 8017374:	b1a8      	cbz	r0, 80173a2 <rcl_shutdown+0x2e>
 8017376:	6803      	ldr	r3, [r0, #0]
 8017378:	b510      	push	{r4, lr}
 801737a:	4604      	mov	r4, r0
 801737c:	b173      	cbz	r3, 801739c <rcl_shutdown+0x28>
 801737e:	f7f7 f975 	bl	800e66c <rcl_context_is_valid>
 8017382:	b140      	cbz	r0, 8017396 <rcl_shutdown+0x22>
 8017384:	6820      	ldr	r0, [r4, #0]
 8017386:	3028      	adds	r0, #40	@ 0x28
 8017388:	f7fa f86c 	bl	8011464 <rmw_shutdown>
 801738c:	4603      	mov	r3, r0
 801738e:	b958      	cbnz	r0, 80173a8 <rcl_shutdown+0x34>
 8017390:	6060      	str	r0, [r4, #4]
 8017392:	4618      	mov	r0, r3
 8017394:	bd10      	pop	{r4, pc}
 8017396:	236a      	movs	r3, #106	@ 0x6a
 8017398:	4618      	mov	r0, r3
 801739a:	bd10      	pop	{r4, pc}
 801739c:	230b      	movs	r3, #11
 801739e:	4618      	mov	r0, r3
 80173a0:	bd10      	pop	{r4, pc}
 80173a2:	230b      	movs	r3, #11
 80173a4:	4618      	mov	r0, r3
 80173a6:	4770      	bx	lr
 80173a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ac:	f7ff bdd2 	b.w	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>

080173b0 <rcl_get_localhost_only>:
 80173b0:	b510      	push	{r4, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	2300      	movs	r3, #0
 80173b6:	9301      	str	r3, [sp, #4]
 80173b8:	b1b8      	cbz	r0, 80173ea <rcl_get_localhost_only+0x3a>
 80173ba:	4604      	mov	r4, r0
 80173bc:	a901      	add	r1, sp, #4
 80173be:	480c      	ldr	r0, [pc, #48]	@ (80173f0 <rcl_get_localhost_only+0x40>)
 80173c0:	f7f9 fa9c 	bl	80108fc <rcutils_get_env>
 80173c4:	b110      	cbz	r0, 80173cc <rcl_get_localhost_only+0x1c>
 80173c6:	2001      	movs	r0, #1
 80173c8:	b002      	add	sp, #8
 80173ca:	bd10      	pop	{r4, pc}
 80173cc:	9b01      	ldr	r3, [sp, #4]
 80173ce:	b113      	cbz	r3, 80173d6 <rcl_get_localhost_only+0x26>
 80173d0:	781a      	ldrb	r2, [r3, #0]
 80173d2:	2a31      	cmp	r2, #49	@ 0x31
 80173d4:	d004      	beq.n	80173e0 <rcl_get_localhost_only+0x30>
 80173d6:	2302      	movs	r3, #2
 80173d8:	2000      	movs	r0, #0
 80173da:	7023      	strb	r3, [r4, #0]
 80173dc:	b002      	add	sp, #8
 80173de:	bd10      	pop	{r4, pc}
 80173e0:	785b      	ldrb	r3, [r3, #1]
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d1f7      	bne.n	80173d6 <rcl_get_localhost_only+0x26>
 80173e6:	2301      	movs	r3, #1
 80173e8:	e7f6      	b.n	80173d8 <rcl_get_localhost_only+0x28>
 80173ea:	200b      	movs	r0, #11
 80173ec:	b002      	add	sp, #8
 80173ee:	bd10      	pop	{r4, pc}
 80173f0:	0801dfcc 	.word	0x0801dfcc

080173f4 <rcl_node_resolve_name>:
 80173f4:	b082      	sub	sp, #8
 80173f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173fa:	b091      	sub	sp, #68	@ 0x44
 80173fc:	ac1a      	add	r4, sp, #104	@ 0x68
 80173fe:	e884 000c 	stmia.w	r4, {r2, r3}
 8017402:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8017406:	2800      	cmp	r0, #0
 8017408:	d03b      	beq.n	8017482 <rcl_node_resolve_name+0x8e>
 801740a:	460c      	mov	r4, r1
 801740c:	4605      	mov	r5, r0
 801740e:	f7f7 fc4f 	bl	800ecb0 <rcl_node_get_options>
 8017412:	2800      	cmp	r0, #0
 8017414:	d037      	beq.n	8017486 <rcl_node_resolve_name+0x92>
 8017416:	4628      	mov	r0, r5
 8017418:	f7f7 fc3a 	bl	800ec90 <rcl_node_get_name>
 801741c:	4606      	mov	r6, r0
 801741e:	4628      	mov	r0, r5
 8017420:	f7f7 fc3e 	bl	800eca0 <rcl_node_get_namespace>
 8017424:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8017428:	4681      	mov	r9, r0
 801742a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801742e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8017430:	46ac      	mov	ip, r5
 8017432:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017436:	f8de 3000 	ldr.w	r3, [lr]
 801743a:	f8cc 3000 	str.w	r3, [ip]
 801743e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017440:	b1fb      	cbz	r3, 8017482 <rcl_node_resolve_name+0x8e>
 8017442:	468a      	mov	sl, r1
 8017444:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8017448:	f001 fdee 	bl	8019028 <rcutils_get_zero_initialized_string_map>
 801744c:	ab10      	add	r3, sp, #64	@ 0x40
 801744e:	9008      	str	r0, [sp, #32]
 8017450:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8017454:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017458:	2100      	movs	r1, #0
 801745a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801745e:	a808      	add	r0, sp, #32
 8017460:	f001 fe5a 	bl	8019118 <rcutils_string_map_init>
 8017464:	4607      	mov	r7, r0
 8017466:	b180      	cbz	r0, 801748a <rcl_node_resolve_name+0x96>
 8017468:	f7f9 fa60 	bl	801092c <rcutils_get_error_string>
 801746c:	f7f9 fa74 	bl	8010958 <rcutils_reset_error>
 8017470:	2f0a      	cmp	r7, #10
 8017472:	bf18      	it	ne
 8017474:	2701      	movne	r7, #1
 8017476:	4638      	mov	r0, r7
 8017478:	b011      	add	sp, #68	@ 0x44
 801747a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801747e:	b002      	add	sp, #8
 8017480:	4770      	bx	lr
 8017482:	270b      	movs	r7, #11
 8017484:	e7f7      	b.n	8017476 <rcl_node_resolve_name+0x82>
 8017486:	2701      	movs	r7, #1
 8017488:	e7f5      	b.n	8017476 <rcl_node_resolve_name+0x82>
 801748a:	9009      	str	r0, [sp, #36]	@ 0x24
 801748c:	9007      	str	r0, [sp, #28]
 801748e:	a808      	add	r0, sp, #32
 8017490:	f003 fe28 	bl	801b0e4 <rcl_get_default_topic_name_substitutions>
 8017494:	4607      	mov	r7, r0
 8017496:	b1a8      	cbz	r0, 80174c4 <rcl_node_resolve_name+0xd0>
 8017498:	280a      	cmp	r0, #10
 801749a:	9c07      	ldr	r4, [sp, #28]
 801749c:	d000      	beq.n	80174a0 <rcl_node_resolve_name+0xac>
 801749e:	2701      	movs	r7, #1
 80174a0:	a808      	add	r0, sp, #32
 80174a2:	f001 fe79 	bl	8019198 <rcutils_string_map_fini>
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d13d      	bne.n	8017526 <rcl_node_resolve_name+0x132>
 80174aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174ac:	4659      	mov	r1, fp
 80174ae:	47d0      	blx	sl
 80174b0:	4659      	mov	r1, fp
 80174b2:	4620      	mov	r0, r4
 80174b4:	47d0      	blx	sl
 80174b6:	f1b8 0f00 	cmp.w	r8, #0
 80174ba:	d0dc      	beq.n	8017476 <rcl_node_resolve_name+0x82>
 80174bc:	2f67      	cmp	r7, #103	@ 0x67
 80174be:	bf08      	it	eq
 80174c0:	2768      	moveq	r7, #104	@ 0x68
 80174c2:	e7d8      	b.n	8017476 <rcl_node_resolve_name+0x82>
 80174c4:	ab09      	add	r3, sp, #36	@ 0x24
 80174c6:	9305      	str	r3, [sp, #20]
 80174c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174ca:	46ec      	mov	ip, sp
 80174cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174d0:	682b      	ldr	r3, [r5, #0]
 80174d2:	f8cc 3000 	str.w	r3, [ip]
 80174d6:	464a      	mov	r2, r9
 80174d8:	4631      	mov	r1, r6
 80174da:	4620      	mov	r0, r4
 80174dc:	ab08      	add	r3, sp, #32
 80174de:	f003 fca3 	bl	801ae28 <rcl_expand_topic_name>
 80174e2:	4607      	mov	r7, r0
 80174e4:	b9b8      	cbnz	r0, 8017516 <rcl_node_resolve_name+0x122>
 80174e6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80174e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80174ea:	4602      	mov	r2, r0
 80174ec:	a90a      	add	r1, sp, #40	@ 0x28
 80174ee:	4620      	mov	r0, r4
 80174f0:	f001 ff5a 	bl	80193a8 <rmw_validate_full_topic_name>
 80174f4:	b988      	cbnz	r0, 801751a <rcl_node_resolve_name+0x126>
 80174f6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80174f8:	b9d5      	cbnz	r5, 8017530 <rcl_node_resolve_name+0x13c>
 80174fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80174fc:	a808      	add	r0, sp, #32
 80174fe:	601c      	str	r4, [r3, #0]
 8017500:	f001 fe4a 	bl	8019198 <rcutils_string_map_fini>
 8017504:	4607      	mov	r7, r0
 8017506:	b1a8      	cbz	r0, 8017534 <rcl_node_resolve_name+0x140>
 8017508:	f7f9 fa10 	bl	801092c <rcutils_get_error_string>
 801750c:	462c      	mov	r4, r5
 801750e:	f7f9 fa23 	bl	8010958 <rcutils_reset_error>
 8017512:	2701      	movs	r7, #1
 8017514:	e7c9      	b.n	80174aa <rcl_node_resolve_name+0xb6>
 8017516:	9c07      	ldr	r4, [sp, #28]
 8017518:	e7c2      	b.n	80174a0 <rcl_node_resolve_name+0xac>
 801751a:	f7f9 fa07 	bl	801092c <rcutils_get_error_string>
 801751e:	2701      	movs	r7, #1
 8017520:	f7f9 fa1a 	bl	8010958 <rcutils_reset_error>
 8017524:	e7bc      	b.n	80174a0 <rcl_node_resolve_name+0xac>
 8017526:	f7f9 fa01 	bl	801092c <rcutils_get_error_string>
 801752a:	f7f9 fa15 	bl	8010958 <rcutils_reset_error>
 801752e:	e7bc      	b.n	80174aa <rcl_node_resolve_name+0xb6>
 8017530:	2767      	movs	r7, #103	@ 0x67
 8017532:	e7b5      	b.n	80174a0 <rcl_node_resolve_name+0xac>
 8017534:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017536:	4659      	mov	r1, fp
 8017538:	47d0      	blx	sl
 801753a:	4659      	mov	r1, fp
 801753c:	4638      	mov	r0, r7
 801753e:	47d0      	blx	sl
 8017540:	e799      	b.n	8017476 <rcl_node_resolve_name+0x82>
 8017542:	bf00      	nop

08017544 <rcl_service_get_rmw_handle>:
 8017544:	b118      	cbz	r0, 801754e <rcl_service_get_rmw_handle+0xa>
 8017546:	6800      	ldr	r0, [r0, #0]
 8017548:	b108      	cbz	r0, 801754e <rcl_service_get_rmw_handle+0xa>
 801754a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801754e:	4770      	bx	lr

08017550 <rcl_take_request>:
 8017550:	b570      	push	{r4, r5, r6, lr}
 8017552:	468e      	mov	lr, r1
 8017554:	460c      	mov	r4, r1
 8017556:	4616      	mov	r6, r2
 8017558:	4605      	mov	r5, r0
 801755a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801755e:	b08c      	sub	sp, #48	@ 0x30
 8017560:	f10d 0c18 	add.w	ip, sp, #24
 8017564:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017568:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801756c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017570:	b30d      	cbz	r5, 80175b6 <rcl_take_request+0x66>
 8017572:	682b      	ldr	r3, [r5, #0]
 8017574:	b1fb      	cbz	r3, 80175b6 <rcl_take_request+0x66>
 8017576:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801757a:	b1e0      	cbz	r0, 80175b6 <rcl_take_request+0x66>
 801757c:	b336      	cbz	r6, 80175cc <rcl_take_request+0x7c>
 801757e:	2300      	movs	r3, #0
 8017580:	f88d 3007 	strb.w	r3, [sp, #7]
 8017584:	4632      	mov	r2, r6
 8017586:	f10d 0307 	add.w	r3, sp, #7
 801758a:	a902      	add	r1, sp, #8
 801758c:	f002 f9c0 	bl	8019910 <rmw_take_request>
 8017590:	4605      	mov	r5, r0
 8017592:	b198      	cbz	r0, 80175bc <rcl_take_request+0x6c>
 8017594:	280a      	cmp	r0, #10
 8017596:	bf18      	it	ne
 8017598:	2501      	movne	r5, #1
 801759a:	f10d 0e18 	add.w	lr, sp, #24
 801759e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80175a2:	46a4      	mov	ip, r4
 80175a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80175ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80175b0:	4628      	mov	r0, r5
 80175b2:	b00c      	add	sp, #48	@ 0x30
 80175b4:	bd70      	pop	{r4, r5, r6, pc}
 80175b6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80175ba:	e7ee      	b.n	801759a <rcl_take_request+0x4a>
 80175bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80175c0:	f240 2359 	movw	r3, #601	@ 0x259
 80175c4:	2a00      	cmp	r2, #0
 80175c6:	bf08      	it	eq
 80175c8:	461d      	moveq	r5, r3
 80175ca:	e7e6      	b.n	801759a <rcl_take_request+0x4a>
 80175cc:	250b      	movs	r5, #11
 80175ce:	e7e4      	b.n	801759a <rcl_take_request+0x4a>

080175d0 <rcl_send_response>:
 80175d0:	b170      	cbz	r0, 80175f0 <rcl_send_response+0x20>
 80175d2:	6800      	ldr	r0, [r0, #0]
 80175d4:	b160      	cbz	r0, 80175f0 <rcl_send_response+0x20>
 80175d6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80175da:	b148      	cbz	r0, 80175f0 <rcl_send_response+0x20>
 80175dc:	b159      	cbz	r1, 80175f6 <rcl_send_response+0x26>
 80175de:	b510      	push	{r4, lr}
 80175e0:	b15a      	cbz	r2, 80175fa <rcl_send_response+0x2a>
 80175e2:	f002 f9f3 	bl	80199cc <rmw_send_response>
 80175e6:	b110      	cbz	r0, 80175ee <rcl_send_response+0x1e>
 80175e8:	2802      	cmp	r0, #2
 80175ea:	bf18      	it	ne
 80175ec:	2001      	movne	r0, #1
 80175ee:	bd10      	pop	{r4, pc}
 80175f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80175f4:	4770      	bx	lr
 80175f6:	200b      	movs	r0, #11
 80175f8:	4770      	bx	lr
 80175fa:	200b      	movs	r0, #11
 80175fc:	bd10      	pop	{r4, pc}
 80175fe:	bf00      	nop

08017600 <rcl_service_is_valid>:
 8017600:	b130      	cbz	r0, 8017610 <rcl_service_is_valid+0x10>
 8017602:	6800      	ldr	r0, [r0, #0]
 8017604:	b120      	cbz	r0, 8017610 <rcl_service_is_valid+0x10>
 8017606:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801760a:	3800      	subs	r0, #0
 801760c:	bf18      	it	ne
 801760e:	2001      	movne	r0, #1
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop

08017614 <rcl_get_system_time>:
 8017614:	4608      	mov	r0, r1
 8017616:	f7f9 bb13 	b.w	8010c40 <rcutils_system_time_now>
 801761a:	bf00      	nop

0801761c <rcl_get_steady_time>:
 801761c:	4608      	mov	r0, r1
 801761e:	f7f9 bb37 	b.w	8010c90 <rcutils_steady_time_now>
 8017622:	bf00      	nop

08017624 <rcl_get_ros_time>:
 8017624:	7a03      	ldrb	r3, [r0, #8]
 8017626:	b510      	push	{r4, lr}
 8017628:	460c      	mov	r4, r1
 801762a:	b133      	cbz	r3, 801763a <rcl_get_ros_time+0x16>
 801762c:	2105      	movs	r1, #5
 801762e:	f7f9 f8c1 	bl	80107b4 <__atomic_load_8>
 8017632:	e9c4 0100 	strd	r0, r1, [r4]
 8017636:	2000      	movs	r0, #0
 8017638:	bd10      	pop	{r4, pc}
 801763a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801763e:	4608      	mov	r0, r1
 8017640:	f7f9 bafe 	b.w	8010c40 <rcutils_system_time_now>

08017644 <rcl_clock_init>:
 8017644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017646:	4605      	mov	r5, r0
 8017648:	4610      	mov	r0, r2
 801764a:	4614      	mov	r4, r2
 801764c:	460e      	mov	r6, r1
 801764e:	f7f9 f8a3 	bl	8010798 <rcutils_allocator_is_valid>
 8017652:	b128      	cbz	r0, 8017660 <rcl_clock_init+0x1c>
 8017654:	2d03      	cmp	r5, #3
 8017656:	d803      	bhi.n	8017660 <rcl_clock_init+0x1c>
 8017658:	e8df f005 	tbb	[pc, r5]
 801765c:	06532e1d 	.word	0x06532e1d
 8017660:	f04f 0c0b 	mov.w	ip, #11
 8017664:	4660      	mov	r0, ip
 8017666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017668:	2e00      	cmp	r6, #0
 801766a:	d0f9      	beq.n	8017660 <rcl_clock_init+0x1c>
 801766c:	2c00      	cmp	r4, #0
 801766e:	d0f7      	beq.n	8017660 <rcl_clock_init+0x1c>
 8017670:	2300      	movs	r3, #0
 8017672:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017676:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801772c <rcl_clock_init+0xe8>
 801767a:	6133      	str	r3, [r6, #16]
 801767c:	f106 0514 	add.w	r5, r6, #20
 8017680:	469c      	mov	ip, r3
 8017682:	2703      	movs	r7, #3
 8017684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017688:	6823      	ldr	r3, [r4, #0]
 801768a:	602b      	str	r3, [r5, #0]
 801768c:	7037      	strb	r7, [r6, #0]
 801768e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017692:	4660      	mov	r0, ip
 8017694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017696:	2e00      	cmp	r6, #0
 8017698:	d0e2      	beq.n	8017660 <rcl_clock_init+0x1c>
 801769a:	2300      	movs	r3, #0
 801769c:	7033      	strb	r3, [r6, #0]
 801769e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80176a2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80176a6:	469c      	mov	ip, r3
 80176a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176aa:	f106 0514 	add.w	r5, r6, #20
 80176ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80176b0:	6823      	ldr	r3, [r4, #0]
 80176b2:	602b      	str	r3, [r5, #0]
 80176b4:	4660      	mov	r0, ip
 80176b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176b8:	2e00      	cmp	r6, #0
 80176ba:	d0d1      	beq.n	8017660 <rcl_clock_init+0x1c>
 80176bc:	2c00      	cmp	r4, #0
 80176be:	d0cf      	beq.n	8017660 <rcl_clock_init+0x1c>
 80176c0:	2700      	movs	r7, #0
 80176c2:	7037      	strb	r7, [r6, #0]
 80176c4:	46a4      	mov	ip, r4
 80176c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80176ca:	f106 0514 	add.w	r5, r6, #20
 80176ce:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80176d2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80176d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80176d8:	f8dc 3000 	ldr.w	r3, [ip]
 80176dc:	602b      	str	r3, [r5, #0]
 80176de:	6921      	ldr	r1, [r4, #16]
 80176e0:	6823      	ldr	r3, [r4, #0]
 80176e2:	2010      	movs	r0, #16
 80176e4:	4798      	blx	r3
 80176e6:	6130      	str	r0, [r6, #16]
 80176e8:	b1d0      	cbz	r0, 8017720 <rcl_clock_init+0xdc>
 80176ea:	2200      	movs	r2, #0
 80176ec:	2300      	movs	r3, #0
 80176ee:	e9c0 2300 	strd	r2, r3, [r0]
 80176f2:	2301      	movs	r3, #1
 80176f4:	7207      	strb	r7, [r0, #8]
 80176f6:	4a0c      	ldr	r2, [pc, #48]	@ (8017728 <rcl_clock_init+0xe4>)
 80176f8:	7033      	strb	r3, [r6, #0]
 80176fa:	46bc      	mov	ip, r7
 80176fc:	60f2      	str	r2, [r6, #12]
 80176fe:	4660      	mov	r0, ip
 8017700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017702:	2e00      	cmp	r6, #0
 8017704:	d0ac      	beq.n	8017660 <rcl_clock_init+0x1c>
 8017706:	2c00      	cmp	r4, #0
 8017708:	d0aa      	beq.n	8017660 <rcl_clock_init+0x1c>
 801770a:	2300      	movs	r3, #0
 801770c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017710:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8017730 <rcl_clock_init+0xec>
 8017714:	6133      	str	r3, [r6, #16]
 8017716:	f106 0514 	add.w	r5, r6, #20
 801771a:	469c      	mov	ip, r3
 801771c:	2702      	movs	r7, #2
 801771e:	e7b1      	b.n	8017684 <rcl_clock_init+0x40>
 8017720:	f04f 0c0a 	mov.w	ip, #10
 8017724:	e79e      	b.n	8017664 <rcl_clock_init+0x20>
 8017726:	bf00      	nop
 8017728:	08017625 	.word	0x08017625
 801772c:	0801761d 	.word	0x0801761d
 8017730:	08017615 	.word	0x08017615

08017734 <rcl_clock_fini>:
 8017734:	2800      	cmp	r0, #0
 8017736:	d02c      	beq.n	8017792 <rcl_clock_fini+0x5e>
 8017738:	b538      	push	{r3, r4, r5, lr}
 801773a:	4604      	mov	r4, r0
 801773c:	3014      	adds	r0, #20
 801773e:	f7f9 f82b 	bl	8010798 <rcutils_allocator_is_valid>
 8017742:	b140      	cbz	r0, 8017756 <rcl_clock_fini+0x22>
 8017744:	7823      	ldrb	r3, [r4, #0]
 8017746:	2b02      	cmp	r3, #2
 8017748:	d007      	beq.n	801775a <rcl_clock_fini+0x26>
 801774a:	2b03      	cmp	r3, #3
 801774c:	d005      	beq.n	801775a <rcl_clock_fini+0x26>
 801774e:	2b01      	cmp	r3, #1
 8017750:	d00f      	beq.n	8017772 <rcl_clock_fini+0x3e>
 8017752:	200b      	movs	r0, #11
 8017754:	bd38      	pop	{r3, r4, r5, pc}
 8017756:	2001      	movs	r0, #1
 8017758:	bd38      	pop	{r3, r4, r5, pc}
 801775a:	68a0      	ldr	r0, [r4, #8]
 801775c:	2800      	cmp	r0, #0
 801775e:	d0f9      	beq.n	8017754 <rcl_clock_fini+0x20>
 8017760:	2500      	movs	r5, #0
 8017762:	6860      	ldr	r0, [r4, #4]
 8017764:	69a3      	ldr	r3, [r4, #24]
 8017766:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017768:	60a5      	str	r5, [r4, #8]
 801776a:	4798      	blx	r3
 801776c:	6065      	str	r5, [r4, #4]
 801776e:	4628      	mov	r0, r5
 8017770:	bd38      	pop	{r3, r4, r5, pc}
 8017772:	68a3      	ldr	r3, [r4, #8]
 8017774:	b133      	cbz	r3, 8017784 <rcl_clock_fini+0x50>
 8017776:	2500      	movs	r5, #0
 8017778:	69a3      	ldr	r3, [r4, #24]
 801777a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801777c:	6860      	ldr	r0, [r4, #4]
 801777e:	60a5      	str	r5, [r4, #8]
 8017780:	4798      	blx	r3
 8017782:	6065      	str	r5, [r4, #4]
 8017784:	6920      	ldr	r0, [r4, #16]
 8017786:	69a3      	ldr	r3, [r4, #24]
 8017788:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801778a:	4798      	blx	r3
 801778c:	2000      	movs	r0, #0
 801778e:	6120      	str	r0, [r4, #16]
 8017790:	bd38      	pop	{r3, r4, r5, pc}
 8017792:	200b      	movs	r0, #11
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop

08017798 <rcl_clock_get_now>:
 8017798:	b140      	cbz	r0, 80177ac <rcl_clock_get_now+0x14>
 801779a:	b139      	cbz	r1, 80177ac <rcl_clock_get_now+0x14>
 801779c:	7803      	ldrb	r3, [r0, #0]
 801779e:	b11b      	cbz	r3, 80177a8 <rcl_clock_get_now+0x10>
 80177a0:	68c3      	ldr	r3, [r0, #12]
 80177a2:	b10b      	cbz	r3, 80177a8 <rcl_clock_get_now+0x10>
 80177a4:	6900      	ldr	r0, [r0, #16]
 80177a6:	4718      	bx	r3
 80177a8:	2001      	movs	r0, #1
 80177aa:	4770      	bx	lr
 80177ac:	200b      	movs	r0, #11
 80177ae:	4770      	bx	lr

080177b0 <rcl_clock_add_jump_callback>:
 80177b0:	b082      	sub	sp, #8
 80177b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b6:	a906      	add	r1, sp, #24
 80177b8:	e881 000c 	stmia.w	r1, {r2, r3}
 80177bc:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80177c0:	b320      	cbz	r0, 801780c <rcl_clock_add_jump_callback+0x5c>
 80177c2:	4604      	mov	r4, r0
 80177c4:	3014      	adds	r0, #20
 80177c6:	f7f8 ffe7 	bl	8010798 <rcutils_allocator_is_valid>
 80177ca:	b1f8      	cbz	r0, 801780c <rcl_clock_add_jump_callback+0x5c>
 80177cc:	b1f6      	cbz	r6, 801780c <rcl_clock_add_jump_callback+0x5c>
 80177ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	db1b      	blt.n	801780c <rcl_clock_add_jump_callback+0x5c>
 80177d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80177d8:	2a01      	cmp	r2, #1
 80177da:	f173 0300 	sbcs.w	r3, r3, #0
 80177de:	da15      	bge.n	801780c <rcl_clock_add_jump_callback+0x5c>
 80177e0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80177e4:	2f00      	cmp	r7, #0
 80177e6:	d042      	beq.n	801786e <rcl_clock_add_jump_callback+0xbe>
 80177e8:	2300      	movs	r3, #0
 80177ea:	4602      	mov	r2, r0
 80177ec:	e003      	b.n	80177f6 <rcl_clock_add_jump_callback+0x46>
 80177ee:	42bb      	cmp	r3, r7
 80177f0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80177f4:	d011      	beq.n	801781a <rcl_clock_add_jump_callback+0x6a>
 80177f6:	6811      	ldr	r1, [r2, #0]
 80177f8:	42b1      	cmp	r1, r6
 80177fa:	f103 0301 	add.w	r3, r3, #1
 80177fe:	d1f6      	bne.n	80177ee <rcl_clock_add_jump_callback+0x3e>
 8017800:	6a11      	ldr	r1, [r2, #32]
 8017802:	42a9      	cmp	r1, r5
 8017804:	d1f3      	bne.n	80177ee <rcl_clock_add_jump_callback+0x3e>
 8017806:	f04f 0e01 	mov.w	lr, #1
 801780a:	e001      	b.n	8017810 <rcl_clock_add_jump_callback+0x60>
 801780c:	f04f 0e0b 	mov.w	lr, #11
 8017810:	4670      	mov	r0, lr
 8017812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017816:	b002      	add	sp, #8
 8017818:	4770      	bx	lr
 801781a:	3301      	adds	r3, #1
 801781c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017820:	00d9      	lsls	r1, r3, #3
 8017822:	69e3      	ldr	r3, [r4, #28]
 8017824:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017826:	4798      	blx	r3
 8017828:	b1f0      	cbz	r0, 8017868 <rcl_clock_add_jump_callback+0xb8>
 801782a:	68a3      	ldr	r3, [r4, #8]
 801782c:	6060      	str	r0, [r4, #4]
 801782e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8017832:	f10d 0c18 	add.w	ip, sp, #24
 8017836:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 801783a:	f103 0801 	add.w	r8, r3, #1
 801783e:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8017842:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017846:	f106 0708 	add.w	r7, r6, #8
 801784a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801784c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017850:	f04f 0e00 	mov.w	lr, #0
 8017854:	e887 0003 	stmia.w	r7, {r0, r1}
 8017858:	6235      	str	r5, [r6, #32]
 801785a:	4670      	mov	r0, lr
 801785c:	f8c4 8008 	str.w	r8, [r4, #8]
 8017860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017864:	b002      	add	sp, #8
 8017866:	4770      	bx	lr
 8017868:	f04f 0e0a 	mov.w	lr, #10
 801786c:	e7d0      	b.n	8017810 <rcl_clock_add_jump_callback+0x60>
 801786e:	2128      	movs	r1, #40	@ 0x28
 8017870:	e7d7      	b.n	8017822 <rcl_clock_add_jump_callback+0x72>
 8017872:	bf00      	nop

08017874 <rcl_clock_remove_jump_callback>:
 8017874:	2800      	cmp	r0, #0
 8017876:	d057      	beq.n	8017928 <rcl_clock_remove_jump_callback+0xb4>
 8017878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801787c:	4605      	mov	r5, r0
 801787e:	3014      	adds	r0, #20
 8017880:	4688      	mov	r8, r1
 8017882:	4692      	mov	sl, r2
 8017884:	f7f8 ff88 	bl	8010798 <rcutils_allocator_is_valid>
 8017888:	2800      	cmp	r0, #0
 801788a:	d03b      	beq.n	8017904 <rcl_clock_remove_jump_callback+0x90>
 801788c:	f1b8 0f00 	cmp.w	r8, #0
 8017890:	d038      	beq.n	8017904 <rcl_clock_remove_jump_callback+0x90>
 8017892:	68ae      	ldr	r6, [r5, #8]
 8017894:	b166      	cbz	r6, 80178b0 <rcl_clock_remove_jump_callback+0x3c>
 8017896:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801789a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801789e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 80178a2:	464c      	mov	r4, r9
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	4543      	cmp	r3, r8
 80178a8:	d005      	beq.n	80178b6 <rcl_clock_remove_jump_callback+0x42>
 80178aa:	3428      	adds	r4, #40	@ 0x28
 80178ac:	42a7      	cmp	r7, r4
 80178ae:	d1f9      	bne.n	80178a4 <rcl_clock_remove_jump_callback+0x30>
 80178b0:	2001      	movs	r0, #1
 80178b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178b6:	6a23      	ldr	r3, [r4, #32]
 80178b8:	3428      	adds	r4, #40	@ 0x28
 80178ba:	42bc      	cmp	r4, r7
 80178bc:	d02d      	beq.n	801791a <rcl_clock_remove_jump_callback+0xa6>
 80178be:	4553      	cmp	r3, sl
 80178c0:	d1f0      	bne.n	80178a4 <rcl_clock_remove_jump_callback+0x30>
 80178c2:	46a6      	mov	lr, r4
 80178c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80178c8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80178cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80178d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80178dc:	3428      	adds	r4, #40	@ 0x28
 80178de:	42a7      	cmp	r7, r4
 80178e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80178e4:	d1ed      	bne.n	80178c2 <rcl_clock_remove_jump_callback+0x4e>
 80178e6:	3e01      	subs	r6, #1
 80178e8:	60ae      	str	r6, [r5, #8]
 80178ea:	b176      	cbz	r6, 801790a <rcl_clock_remove_jump_callback+0x96>
 80178ec:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80178f0:	69eb      	ldr	r3, [r5, #28]
 80178f2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80178f4:	00f1      	lsls	r1, r6, #3
 80178f6:	4648      	mov	r0, r9
 80178f8:	4798      	blx	r3
 80178fa:	b1b8      	cbz	r0, 801792c <rcl_clock_remove_jump_callback+0xb8>
 80178fc:	6068      	str	r0, [r5, #4]
 80178fe:	2000      	movs	r0, #0
 8017900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017904:	200b      	movs	r0, #11
 8017906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801790a:	4648      	mov	r0, r9
 801790c:	69ab      	ldr	r3, [r5, #24]
 801790e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8017910:	4798      	blx	r3
 8017912:	606e      	str	r6, [r5, #4]
 8017914:	4630      	mov	r0, r6
 8017916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801791a:	4553      	cmp	r3, sl
 801791c:	d1c8      	bne.n	80178b0 <rcl_clock_remove_jump_callback+0x3c>
 801791e:	3e01      	subs	r6, #1
 8017920:	60ae      	str	r6, [r5, #8]
 8017922:	2e00      	cmp	r6, #0
 8017924:	d1e2      	bne.n	80178ec <rcl_clock_remove_jump_callback+0x78>
 8017926:	e7f0      	b.n	801790a <rcl_clock_remove_jump_callback+0x96>
 8017928:	200b      	movs	r0, #11
 801792a:	4770      	bx	lr
 801792c:	200a      	movs	r0, #10
 801792e:	e7ea      	b.n	8017906 <rcl_clock_remove_jump_callback+0x92>

08017930 <rcl_get_zero_initialized_wait_set>:
 8017930:	b510      	push	{r4, lr}
 8017932:	4c08      	ldr	r4, [pc, #32]	@ (8017954 <rcl_get_zero_initialized_wait_set+0x24>)
 8017934:	4686      	mov	lr, r0
 8017936:	4684      	mov	ip, r0
 8017938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801793a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801793e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017946:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801794a:	6823      	ldr	r3, [r4, #0]
 801794c:	f8cc 3000 	str.w	r3, [ip]
 8017950:	4670      	mov	r0, lr
 8017952:	bd10      	pop	{r4, pc}
 8017954:	0801e6e4 	.word	0x0801e6e4

08017958 <rcl_wait_set_is_valid>:
 8017958:	b118      	cbz	r0, 8017962 <rcl_wait_set_is_valid+0xa>
 801795a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801795c:	3800      	subs	r0, #0
 801795e:	bf18      	it	ne
 8017960:	2001      	movne	r0, #1
 8017962:	4770      	bx	lr

08017964 <rcl_wait_set_fini>:
 8017964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017968:	b082      	sub	sp, #8
 801796a:	2800      	cmp	r0, #0
 801796c:	f000 8095 	beq.w	8017a9a <rcl_wait_set_fini+0x136>
 8017970:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017972:	4604      	mov	r4, r0
 8017974:	2e00      	cmp	r6, #0
 8017976:	f000 808c 	beq.w	8017a92 <rcl_wait_set_fini+0x12e>
 801797a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801797c:	f002 fa5e 	bl	8019e3c <rmw_destroy_wait_set>
 8017980:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017982:	1e06      	subs	r6, r0, #0
 8017984:	bf18      	it	ne
 8017986:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801798a:	2d00      	cmp	r5, #0
 801798c:	f000 8081 	beq.w	8017a92 <rcl_wait_set_fini+0x12e>
 8017990:	6820      	ldr	r0, [r4, #0]
 8017992:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017996:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017998:	2700      	movs	r7, #0
 801799a:	6067      	str	r7, [r4, #4]
 801799c:	602f      	str	r7, [r5, #0]
 801799e:	b120      	cbz	r0, 80179aa <rcl_wait_set_fini+0x46>
 80179a0:	9101      	str	r1, [sp, #4]
 80179a2:	47c0      	blx	r8
 80179a4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80179a6:	9901      	ldr	r1, [sp, #4]
 80179a8:	6027      	str	r7, [r4, #0]
 80179aa:	68a8      	ldr	r0, [r5, #8]
 80179ac:	b120      	cbz	r0, 80179b8 <rcl_wait_set_fini+0x54>
 80179ae:	47c0      	blx	r8
 80179b0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80179b2:	2300      	movs	r3, #0
 80179b4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80179b8:	68a0      	ldr	r0, [r4, #8]
 80179ba:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80179bc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80179be:	f04f 0800 	mov.w	r8, #0
 80179c2:	f8c4 800c 	str.w	r8, [r4, #12]
 80179c6:	f8c5 800c 	str.w	r8, [r5, #12]
 80179ca:	b128      	cbz	r0, 80179d8 <rcl_wait_set_fini+0x74>
 80179cc:	47b8      	blx	r7
 80179ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80179d0:	f8c4 8008 	str.w	r8, [r4, #8]
 80179d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80179d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80179d8:	6968      	ldr	r0, [r5, #20]
 80179da:	f04f 0800 	mov.w	r8, #0
 80179de:	f8c5 8010 	str.w	r8, [r5, #16]
 80179e2:	b128      	cbz	r0, 80179f0 <rcl_wait_set_fini+0x8c>
 80179e4:	47b8      	blx	r7
 80179e6:	f8c5 8014 	str.w	r8, [r5, #20]
 80179ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80179ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80179ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80179f0:	6920      	ldr	r0, [r4, #16]
 80179f2:	f04f 0800 	mov.w	r8, #0
 80179f6:	f8c4 8014 	str.w	r8, [r4, #20]
 80179fa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80179fe:	b128      	cbz	r0, 8017a0c <rcl_wait_set_fini+0xa8>
 8017a00:	47b8      	blx	r7
 8017a02:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a04:	f8c4 8010 	str.w	r8, [r4, #16]
 8017a08:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017a0a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017a0c:	69a0      	ldr	r0, [r4, #24]
 8017a0e:	f04f 0800 	mov.w	r8, #0
 8017a12:	f8c4 801c 	str.w	r8, [r4, #28]
 8017a16:	f8c5 8018 	str.w	r8, [r5, #24]
 8017a1a:	b128      	cbz	r0, 8017a28 <rcl_wait_set_fini+0xc4>
 8017a1c:	9101      	str	r1, [sp, #4]
 8017a1e:	47b8      	blx	r7
 8017a20:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a22:	9901      	ldr	r1, [sp, #4]
 8017a24:	f8c4 8018 	str.w	r8, [r4, #24]
 8017a28:	6a28      	ldr	r0, [r5, #32]
 8017a2a:	b120      	cbz	r0, 8017a36 <rcl_wait_set_fini+0xd2>
 8017a2c:	47b8      	blx	r7
 8017a2e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a30:	2300      	movs	r3, #0
 8017a32:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8017a36:	6a20      	ldr	r0, [r4, #32]
 8017a38:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017a3c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017a3e:	2700      	movs	r7, #0
 8017a40:	6267      	str	r7, [r4, #36]	@ 0x24
 8017a42:	626f      	str	r7, [r5, #36]	@ 0x24
 8017a44:	b120      	cbz	r0, 8017a50 <rcl_wait_set_fini+0xec>
 8017a46:	9101      	str	r1, [sp, #4]
 8017a48:	47c0      	blx	r8
 8017a4a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a4c:	9901      	ldr	r1, [sp, #4]
 8017a4e:	6227      	str	r7, [r4, #32]
 8017a50:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8017a52:	b120      	cbz	r0, 8017a5e <rcl_wait_set_fini+0xfa>
 8017a54:	47c0      	blx	r8
 8017a56:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a58:	2300      	movs	r3, #0
 8017a5a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017a5e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017a60:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017a64:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017a66:	2700      	movs	r7, #0
 8017a68:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017a6a:	632f      	str	r7, [r5, #48]	@ 0x30
 8017a6c:	b120      	cbz	r0, 8017a78 <rcl_wait_set_fini+0x114>
 8017a6e:	9101      	str	r1, [sp, #4]
 8017a70:	47c0      	blx	r8
 8017a72:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a74:	9901      	ldr	r1, [sp, #4]
 8017a76:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017a78:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017a7a:	b120      	cbz	r0, 8017a86 <rcl_wait_set_fini+0x122>
 8017a7c:	47c0      	blx	r8
 8017a7e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017a80:	2300      	movs	r3, #0
 8017a82:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8017a86:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017a88:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	4798      	blx	r3
 8017a8e:	2300      	movs	r3, #0
 8017a90:	6323      	str	r3, [r4, #48]	@ 0x30
 8017a92:	4630      	mov	r0, r6
 8017a94:	b002      	add	sp, #8
 8017a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a9a:	260b      	movs	r6, #11
 8017a9c:	4630      	mov	r0, r6
 8017a9e:	b002      	add	sp, #8
 8017aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017aa4 <rcl_wait_set_add_subscription>:
 8017aa4:	b318      	cbz	r0, 8017aee <rcl_wait_set_add_subscription+0x4a>
 8017aa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017aa8:	b570      	push	{r4, r5, r6, lr}
 8017aaa:	4604      	mov	r4, r0
 8017aac:	b30b      	cbz	r3, 8017af2 <rcl_wait_set_add_subscription+0x4e>
 8017aae:	b319      	cbz	r1, 8017af8 <rcl_wait_set_add_subscription+0x54>
 8017ab0:	681d      	ldr	r5, [r3, #0]
 8017ab2:	6840      	ldr	r0, [r0, #4]
 8017ab4:	4285      	cmp	r5, r0
 8017ab6:	d217      	bcs.n	8017ae8 <rcl_wait_set_add_subscription+0x44>
 8017ab8:	6820      	ldr	r0, [r4, #0]
 8017aba:	1c6e      	adds	r6, r5, #1
 8017abc:	601e      	str	r6, [r3, #0]
 8017abe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017ac2:	b102      	cbz	r2, 8017ac6 <rcl_wait_set_add_subscription+0x22>
 8017ac4:	6015      	str	r5, [r2, #0]
 8017ac6:	4608      	mov	r0, r1
 8017ac8:	f7f7 fbf6 	bl	800f2b8 <rcl_subscription_get_rmw_handle>
 8017acc:	b150      	cbz	r0, 8017ae4 <rcl_wait_set_add_subscription+0x40>
 8017ace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ad0:	6842      	ldr	r2, [r0, #4]
 8017ad2:	689b      	ldr	r3, [r3, #8]
 8017ad4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ad8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017ada:	6853      	ldr	r3, [r2, #4]
 8017adc:	3301      	adds	r3, #1
 8017ade:	2000      	movs	r0, #0
 8017ae0:	6053      	str	r3, [r2, #4]
 8017ae2:	bd70      	pop	{r4, r5, r6, pc}
 8017ae4:	2001      	movs	r0, #1
 8017ae6:	bd70      	pop	{r4, r5, r6, pc}
 8017ae8:	f240 3086 	movw	r0, #902	@ 0x386
 8017aec:	bd70      	pop	{r4, r5, r6, pc}
 8017aee:	200b      	movs	r0, #11
 8017af0:	4770      	bx	lr
 8017af2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017af6:	bd70      	pop	{r4, r5, r6, pc}
 8017af8:	200b      	movs	r0, #11
 8017afa:	bd70      	pop	{r4, r5, r6, pc}

08017afc <rcl_wait_set_clear>:
 8017afc:	2800      	cmp	r0, #0
 8017afe:	d073      	beq.n	8017be8 <rcl_wait_set_clear+0xec>
 8017b00:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017b02:	b510      	push	{r4, lr}
 8017b04:	4604      	mov	r4, r0
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d070      	beq.n	8017bec <rcl_wait_set_clear+0xf0>
 8017b0a:	6800      	ldr	r0, [r0, #0]
 8017b0c:	b138      	cbz	r0, 8017b1e <rcl_wait_set_clear+0x22>
 8017b0e:	6862      	ldr	r2, [r4, #4]
 8017b10:	2100      	movs	r1, #0
 8017b12:	0092      	lsls	r2, r2, #2
 8017b14:	f004 ff12 	bl	801c93c <memset>
 8017b18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	601a      	str	r2, [r3, #0]
 8017b1e:	68a0      	ldr	r0, [r4, #8]
 8017b20:	b138      	cbz	r0, 8017b32 <rcl_wait_set_clear+0x36>
 8017b22:	68e2      	ldr	r2, [r4, #12]
 8017b24:	2100      	movs	r1, #0
 8017b26:	0092      	lsls	r2, r2, #2
 8017b28:	f004 ff08 	bl	801c93c <memset>
 8017b2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b2e:	2200      	movs	r2, #0
 8017b30:	60da      	str	r2, [r3, #12]
 8017b32:	69a0      	ldr	r0, [r4, #24]
 8017b34:	b138      	cbz	r0, 8017b46 <rcl_wait_set_clear+0x4a>
 8017b36:	69e2      	ldr	r2, [r4, #28]
 8017b38:	2100      	movs	r1, #0
 8017b3a:	0092      	lsls	r2, r2, #2
 8017b3c:	f004 fefe 	bl	801c93c <memset>
 8017b40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b42:	2200      	movs	r2, #0
 8017b44:	619a      	str	r2, [r3, #24]
 8017b46:	6a20      	ldr	r0, [r4, #32]
 8017b48:	b138      	cbz	r0, 8017b5a <rcl_wait_set_clear+0x5e>
 8017b4a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017b4c:	2100      	movs	r1, #0
 8017b4e:	0092      	lsls	r2, r2, #2
 8017b50:	f004 fef4 	bl	801c93c <memset>
 8017b54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b56:	2200      	movs	r2, #0
 8017b58:	625a      	str	r2, [r3, #36]	@ 0x24
 8017b5a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017b5c:	b138      	cbz	r0, 8017b6e <rcl_wait_set_clear+0x72>
 8017b5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017b60:	2100      	movs	r1, #0
 8017b62:	0092      	lsls	r2, r2, #2
 8017b64:	f004 feea 	bl	801c93c <memset>
 8017b68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8017b6e:	6920      	ldr	r0, [r4, #16]
 8017b70:	b138      	cbz	r0, 8017b82 <rcl_wait_set_clear+0x86>
 8017b72:	6962      	ldr	r2, [r4, #20]
 8017b74:	2100      	movs	r1, #0
 8017b76:	0092      	lsls	r2, r2, #2
 8017b78:	f004 fee0 	bl	801c93c <memset>
 8017b7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b7e:	2200      	movs	r2, #0
 8017b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8017b82:	6898      	ldr	r0, [r3, #8]
 8017b84:	b138      	cbz	r0, 8017b96 <rcl_wait_set_clear+0x9a>
 8017b86:	685a      	ldr	r2, [r3, #4]
 8017b88:	2100      	movs	r1, #0
 8017b8a:	0092      	lsls	r2, r2, #2
 8017b8c:	f004 fed6 	bl	801c93c <memset>
 8017b90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017b92:	2200      	movs	r2, #0
 8017b94:	605a      	str	r2, [r3, #4]
 8017b96:	6958      	ldr	r0, [r3, #20]
 8017b98:	b138      	cbz	r0, 8017baa <rcl_wait_set_clear+0xae>
 8017b9a:	691a      	ldr	r2, [r3, #16]
 8017b9c:	2100      	movs	r1, #0
 8017b9e:	0092      	lsls	r2, r2, #2
 8017ba0:	f004 fecc 	bl	801c93c <memset>
 8017ba4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	611a      	str	r2, [r3, #16]
 8017baa:	6a18      	ldr	r0, [r3, #32]
 8017bac:	b138      	cbz	r0, 8017bbe <rcl_wait_set_clear+0xc2>
 8017bae:	69da      	ldr	r2, [r3, #28]
 8017bb0:	2100      	movs	r1, #0
 8017bb2:	0092      	lsls	r2, r2, #2
 8017bb4:	f004 fec2 	bl	801c93c <memset>
 8017bb8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bba:	2200      	movs	r2, #0
 8017bbc:	61da      	str	r2, [r3, #28]
 8017bbe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017bc0:	b138      	cbz	r0, 8017bd2 <rcl_wait_set_clear+0xd6>
 8017bc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017bc4:	2100      	movs	r1, #0
 8017bc6:	0092      	lsls	r2, r2, #2
 8017bc8:	f004 feb8 	bl	801c93c <memset>
 8017bcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bce:	2200      	movs	r2, #0
 8017bd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8017bd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017bd4:	b138      	cbz	r0, 8017be6 <rcl_wait_set_clear+0xea>
 8017bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017bd8:	2100      	movs	r1, #0
 8017bda:	0092      	lsls	r2, r2, #2
 8017bdc:	f004 feae 	bl	801c93c <memset>
 8017be0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017be2:	2000      	movs	r0, #0
 8017be4:	6358      	str	r0, [r3, #52]	@ 0x34
 8017be6:	bd10      	pop	{r4, pc}
 8017be8:	200b      	movs	r0, #11
 8017bea:	4770      	bx	lr
 8017bec:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017bf0:	bd10      	pop	{r4, pc}
 8017bf2:	bf00      	nop

08017bf4 <rcl_wait_set_resize>:
 8017bf4:	2800      	cmp	r0, #0
 8017bf6:	f000 8185 	beq.w	8017f04 <rcl_wait_set_resize+0x310>
 8017bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfe:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8017c00:	b083      	sub	sp, #12
 8017c02:	4605      	mov	r5, r0
 8017c04:	2c00      	cmp	r4, #0
 8017c06:	f000 817f 	beq.w	8017f08 <rcl_wait_set_resize+0x314>
 8017c0a:	f04f 0900 	mov.w	r9, #0
 8017c0e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8017c12:	461f      	mov	r7, r3
 8017c14:	4688      	mov	r8, r1
 8017c16:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017c1a:	4616      	mov	r6, r2
 8017c1c:	f8c0 9004 	str.w	r9, [r0, #4]
 8017c20:	f8c4 9000 	str.w	r9, [r4]
 8017c24:	2900      	cmp	r1, #0
 8017c26:	f000 80bd 	beq.w	8017da4 <rcl_wait_set_resize+0x1b0>
 8017c2a:	008c      	lsls	r4, r1, #2
 8017c2c:	6800      	ldr	r0, [r0, #0]
 8017c2e:	9301      	str	r3, [sp, #4]
 8017c30:	4652      	mov	r2, sl
 8017c32:	4621      	mov	r1, r4
 8017c34:	4798      	blx	r3
 8017c36:	9b01      	ldr	r3, [sp, #4]
 8017c38:	6028      	str	r0, [r5, #0]
 8017c3a:	2800      	cmp	r0, #0
 8017c3c:	f000 80cb 	beq.w	8017dd6 <rcl_wait_set_resize+0x1e2>
 8017c40:	4622      	mov	r2, r4
 8017c42:	4649      	mov	r1, r9
 8017c44:	9301      	str	r3, [sp, #4]
 8017c46:	f004 fe79 	bl	801c93c <memset>
 8017c4a:	f8c5 8004 	str.w	r8, [r5, #4]
 8017c4e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8017c52:	9b01      	ldr	r3, [sp, #4]
 8017c54:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017c58:	f8c8 9004 	str.w	r9, [r8, #4]
 8017c5c:	4652      	mov	r2, sl
 8017c5e:	4621      	mov	r1, r4
 8017c60:	4798      	blx	r3
 8017c62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017c64:	f8c8 0008 	str.w	r0, [r8, #8]
 8017c68:	689b      	ldr	r3, [r3, #8]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	f000 80ac 	beq.w	8017dc8 <rcl_wait_set_resize+0x1d4>
 8017c70:	4622      	mov	r2, r4
 8017c72:	4649      	mov	r1, r9
 8017c74:	4618      	mov	r0, r3
 8017c76:	f004 fe61 	bl	801c93c <memset>
 8017c7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017c7c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017c80:	f04f 0800 	mov.w	r8, #0
 8017c84:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8017c88:	f8c5 800c 	str.w	r8, [r5, #12]
 8017c8c:	f8c4 800c 	str.w	r8, [r4, #12]
 8017c90:	2e00      	cmp	r6, #0
 8017c92:	f040 80a4 	bne.w	8017dde <rcl_wait_set_resize+0x1ea>
 8017c96:	68a8      	ldr	r0, [r5, #8]
 8017c98:	b128      	cbz	r0, 8017ca6 <rcl_wait_set_resize+0xb2>
 8017c9a:	4649      	mov	r1, r9
 8017c9c:	4790      	blx	r2
 8017c9e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017ca0:	60ae      	str	r6, [r5, #8]
 8017ca2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017ca6:	f04f 0800 	mov.w	r8, #0
 8017caa:	19f6      	adds	r6, r6, r7
 8017cac:	f8c4 8010 	str.w	r8, [r4, #16]
 8017cb0:	f040 80ac 	bne.w	8017e0c <rcl_wait_set_resize+0x218>
 8017cb4:	6960      	ldr	r0, [r4, #20]
 8017cb6:	b130      	cbz	r0, 8017cc6 <rcl_wait_set_resize+0xd2>
 8017cb8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8017cba:	4649      	mov	r1, r9
 8017cbc:	4798      	blx	r3
 8017cbe:	6166      	str	r6, [r4, #20]
 8017cc0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017cc2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017cc6:	2600      	movs	r6, #0
 8017cc8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017ccc:	616e      	str	r6, [r5, #20]
 8017cce:	6426      	str	r6, [r4, #64]	@ 0x40
 8017cd0:	2f00      	cmp	r7, #0
 8017cd2:	f040 80ad 	bne.w	8017e30 <rcl_wait_set_resize+0x23c>
 8017cd6:	6928      	ldr	r0, [r5, #16]
 8017cd8:	b138      	cbz	r0, 8017cea <rcl_wait_set_resize+0xf6>
 8017cda:	4649      	mov	r1, r9
 8017cdc:	47d0      	blx	sl
 8017cde:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017ce0:	612f      	str	r7, [r5, #16]
 8017ce2:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017ce6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017cea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017cec:	2600      	movs	r6, #0
 8017cee:	61ee      	str	r6, [r5, #28]
 8017cf0:	61a6      	str	r6, [r4, #24]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	f040 80af 	bne.w	8017e56 <rcl_wait_set_resize+0x262>
 8017cf8:	69a8      	ldr	r0, [r5, #24]
 8017cfa:	b120      	cbz	r0, 8017d06 <rcl_wait_set_resize+0x112>
 8017cfc:	4649      	mov	r1, r9
 8017cfe:	47d0      	blx	sl
 8017d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d04:	61ab      	str	r3, [r5, #24]
 8017d06:	6a20      	ldr	r0, [r4, #32]
 8017d08:	b128      	cbz	r0, 8017d16 <rcl_wait_set_resize+0x122>
 8017d0a:	4649      	mov	r1, r9
 8017d0c:	47d0      	blx	sl
 8017d0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d10:	2300      	movs	r3, #0
 8017d12:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017d18:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017d1a:	2600      	movs	r6, #0
 8017d1c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017d20:	626e      	str	r6, [r5, #36]	@ 0x24
 8017d22:	6266      	str	r6, [r4, #36]	@ 0x24
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	f000 80b6 	beq.w	8017e96 <rcl_wait_set_resize+0x2a2>
 8017d2a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017d2e:	6a28      	ldr	r0, [r5, #32]
 8017d30:	463a      	mov	r2, r7
 8017d32:	4651      	mov	r1, sl
 8017d34:	47c8      	blx	r9
 8017d36:	6228      	str	r0, [r5, #32]
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	d04c      	beq.n	8017dd6 <rcl_wait_set_resize+0x1e2>
 8017d3c:	4652      	mov	r2, sl
 8017d3e:	4631      	mov	r1, r6
 8017d40:	f004 fdfc 	bl	801c93c <memset>
 8017d44:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017d48:	626b      	str	r3, [r5, #36]	@ 0x24
 8017d4a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017d4c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8017d4e:	463a      	mov	r2, r7
 8017d50:	4651      	mov	r1, sl
 8017d52:	47c8      	blx	r9
 8017d54:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017d56:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017d58:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8017d5a:	2c00      	cmp	r4, #0
 8017d5c:	f000 80f0 	beq.w	8017f40 <rcl_wait_set_resize+0x34c>
 8017d60:	4620      	mov	r0, r4
 8017d62:	4652      	mov	r2, sl
 8017d64:	4631      	mov	r1, r6
 8017d66:	f004 fde9 	bl	801c93c <memset>
 8017d6a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d6e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017d70:	2600      	movs	r6, #0
 8017d72:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017d76:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8017d78:	6326      	str	r6, [r4, #48]	@ 0x30
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f040 809d 	bne.w	8017eba <rcl_wait_set_resize+0x2c6>
 8017d80:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017d82:	b120      	cbz	r0, 8017d8e <rcl_wait_set_resize+0x19a>
 8017d84:	4639      	mov	r1, r7
 8017d86:	47c0      	blx	r8
 8017d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017d8c:	62ab      	str	r3, [r5, #40]	@ 0x28
 8017d8e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017d90:	b310      	cbz	r0, 8017dd8 <rcl_wait_set_resize+0x1e4>
 8017d92:	4639      	mov	r1, r7
 8017d94:	47c0      	blx	r8
 8017d96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017d98:	2000      	movs	r0, #0
 8017d9a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8017d9e:	b003      	add	sp, #12
 8017da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017da4:	6800      	ldr	r0, [r0, #0]
 8017da6:	b120      	cbz	r0, 8017db2 <rcl_wait_set_resize+0x1be>
 8017da8:	4651      	mov	r1, sl
 8017daa:	47d8      	blx	fp
 8017dac:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017dae:	f8c5 8000 	str.w	r8, [r5]
 8017db2:	68a0      	ldr	r0, [r4, #8]
 8017db4:	2800      	cmp	r0, #0
 8017db6:	f43f af61 	beq.w	8017c7c <rcl_wait_set_resize+0x88>
 8017dba:	4651      	mov	r1, sl
 8017dbc:	47d8      	blx	fp
 8017dbe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017dc6:	e759      	b.n	8017c7c <rcl_wait_set_resize+0x88>
 8017dc8:	6828      	ldr	r0, [r5, #0]
 8017dca:	9301      	str	r3, [sp, #4]
 8017dcc:	4651      	mov	r1, sl
 8017dce:	47d8      	blx	fp
 8017dd0:	9b01      	ldr	r3, [sp, #4]
 8017dd2:	e9c5 3300 	strd	r3, r3, [r5]
 8017dd6:	200a      	movs	r0, #10
 8017dd8:	b003      	add	sp, #12
 8017dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dde:	00b4      	lsls	r4, r6, #2
 8017de0:	68a8      	ldr	r0, [r5, #8]
 8017de2:	464a      	mov	r2, r9
 8017de4:	4621      	mov	r1, r4
 8017de6:	4798      	blx	r3
 8017de8:	60a8      	str	r0, [r5, #8]
 8017dea:	2800      	cmp	r0, #0
 8017dec:	d0f3      	beq.n	8017dd6 <rcl_wait_set_resize+0x1e2>
 8017dee:	4622      	mov	r2, r4
 8017df0:	4641      	mov	r1, r8
 8017df2:	f004 fda3 	bl	801c93c <memset>
 8017df6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017df8:	60ee      	str	r6, [r5, #12]
 8017dfa:	f04f 0800 	mov.w	r8, #0
 8017dfe:	19f6      	adds	r6, r6, r7
 8017e00:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017e04:	f8c4 8010 	str.w	r8, [r4, #16]
 8017e08:	f43f af54 	beq.w	8017cb4 <rcl_wait_set_resize+0xc0>
 8017e0c:	00b6      	lsls	r6, r6, #2
 8017e0e:	464a      	mov	r2, r9
 8017e10:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017e12:	6960      	ldr	r0, [r4, #20]
 8017e14:	4631      	mov	r1, r6
 8017e16:	4798      	blx	r3
 8017e18:	4681      	mov	r9, r0
 8017e1a:	6160      	str	r0, [r4, #20]
 8017e1c:	2800      	cmp	r0, #0
 8017e1e:	d076      	beq.n	8017f0e <rcl_wait_set_resize+0x31a>
 8017e20:	4632      	mov	r2, r6
 8017e22:	4641      	mov	r1, r8
 8017e24:	f004 fd8a 	bl	801c93c <memset>
 8017e28:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017e2a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017e2e:	e74a      	b.n	8017cc6 <rcl_wait_set_resize+0xd2>
 8017e30:	00bc      	lsls	r4, r7, #2
 8017e32:	6928      	ldr	r0, [r5, #16]
 8017e34:	464a      	mov	r2, r9
 8017e36:	4621      	mov	r1, r4
 8017e38:	47c0      	blx	r8
 8017e3a:	6128      	str	r0, [r5, #16]
 8017e3c:	2800      	cmp	r0, #0
 8017e3e:	d0ca      	beq.n	8017dd6 <rcl_wait_set_resize+0x1e2>
 8017e40:	4622      	mov	r2, r4
 8017e42:	4631      	mov	r1, r6
 8017e44:	f004 fd7a 	bl	801c93c <memset>
 8017e48:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017e4a:	616f      	str	r7, [r5, #20]
 8017e4c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017e50:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017e54:	e749      	b.n	8017cea <rcl_wait_set_resize+0xf6>
 8017e56:	009c      	lsls	r4, r3, #2
 8017e58:	69a8      	ldr	r0, [r5, #24]
 8017e5a:	464a      	mov	r2, r9
 8017e5c:	4621      	mov	r1, r4
 8017e5e:	47c0      	blx	r8
 8017e60:	61a8      	str	r0, [r5, #24]
 8017e62:	2800      	cmp	r0, #0
 8017e64:	d0b7      	beq.n	8017dd6 <rcl_wait_set_resize+0x1e2>
 8017e66:	4622      	mov	r2, r4
 8017e68:	4631      	mov	r1, r6
 8017e6a:	f004 fd67 	bl	801c93c <memset>
 8017e6e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017e70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e72:	61eb      	str	r3, [r5, #28]
 8017e74:	6a38      	ldr	r0, [r7, #32]
 8017e76:	61fe      	str	r6, [r7, #28]
 8017e78:	464a      	mov	r2, r9
 8017e7a:	4621      	mov	r1, r4
 8017e7c:	47c0      	blx	r8
 8017e7e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017e80:	6238      	str	r0, [r7, #32]
 8017e82:	6a1f      	ldr	r7, [r3, #32]
 8017e84:	2f00      	cmp	r7, #0
 8017e86:	d054      	beq.n	8017f32 <rcl_wait_set_resize+0x33e>
 8017e88:	4622      	mov	r2, r4
 8017e8a:	4631      	mov	r1, r6
 8017e8c:	4638      	mov	r0, r7
 8017e8e:	f004 fd55 	bl	801c93c <memset>
 8017e92:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017e94:	e73f      	b.n	8017d16 <rcl_wait_set_resize+0x122>
 8017e96:	6a28      	ldr	r0, [r5, #32]
 8017e98:	b120      	cbz	r0, 8017ea4 <rcl_wait_set_resize+0x2b0>
 8017e9a:	4639      	mov	r1, r7
 8017e9c:	47c0      	blx	r8
 8017e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017ea0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017ea2:	622b      	str	r3, [r5, #32]
 8017ea4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017ea6:	2800      	cmp	r0, #0
 8017ea8:	f43f af60 	beq.w	8017d6c <rcl_wait_set_resize+0x178>
 8017eac:	4639      	mov	r1, r7
 8017eae:	47c0      	blx	r8
 8017eb0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017eb8:	e758      	b.n	8017d6c <rcl_wait_set_resize+0x178>
 8017eba:	009c      	lsls	r4, r3, #2
 8017ebc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017ebe:	463a      	mov	r2, r7
 8017ec0:	4621      	mov	r1, r4
 8017ec2:	47c8      	blx	r9
 8017ec4:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017ec6:	2800      	cmp	r0, #0
 8017ec8:	d085      	beq.n	8017dd6 <rcl_wait_set_resize+0x1e2>
 8017eca:	4622      	mov	r2, r4
 8017ecc:	4631      	mov	r1, r6
 8017ece:	f004 fd35 	bl	801c93c <memset>
 8017ed2:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ed8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8017eda:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017ede:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017ee2:	463a      	mov	r2, r7
 8017ee4:	4621      	mov	r1, r4
 8017ee6:	47c8      	blx	r9
 8017ee8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017eea:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8017eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ef0:	b36b      	cbz	r3, 8017f4e <rcl_wait_set_resize+0x35a>
 8017ef2:	4622      	mov	r2, r4
 8017ef4:	4631      	mov	r1, r6
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f004 fd20 	bl	801c93c <memset>
 8017efc:	4630      	mov	r0, r6
 8017efe:	b003      	add	sp, #12
 8017f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f04:	200b      	movs	r0, #11
 8017f06:	4770      	bx	lr
 8017f08:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017f0c:	e764      	b.n	8017dd8 <rcl_wait_set_resize+0x1e4>
 8017f0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017f10:	68a8      	ldr	r0, [r5, #8]
 8017f12:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017f16:	4798      	blx	r3
 8017f18:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017f1a:	6928      	ldr	r0, [r5, #16]
 8017f1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017f1e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017f20:	f8c5 900c 	str.w	r9, [r5, #12]
 8017f24:	f8c5 9008 	str.w	r9, [r5, #8]
 8017f28:	4790      	blx	r2
 8017f2a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017f2e:	200a      	movs	r0, #10
 8017f30:	e752      	b.n	8017dd8 <rcl_wait_set_resize+0x1e4>
 8017f32:	69a8      	ldr	r0, [r5, #24]
 8017f34:	4649      	mov	r1, r9
 8017f36:	47d0      	blx	sl
 8017f38:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017f3c:	200a      	movs	r0, #10
 8017f3e:	e74b      	b.n	8017dd8 <rcl_wait_set_resize+0x1e4>
 8017f40:	6a28      	ldr	r0, [r5, #32]
 8017f42:	4639      	mov	r1, r7
 8017f44:	47c0      	blx	r8
 8017f46:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017f4a:	200a      	movs	r0, #10
 8017f4c:	e744      	b.n	8017dd8 <rcl_wait_set_resize+0x1e4>
 8017f4e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017f50:	9301      	str	r3, [sp, #4]
 8017f52:	4639      	mov	r1, r7
 8017f54:	47c0      	blx	r8
 8017f56:	9b01      	ldr	r3, [sp, #4]
 8017f58:	200a      	movs	r0, #10
 8017f5a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017f5e:	e73b      	b.n	8017dd8 <rcl_wait_set_resize+0x1e4>

08017f60 <rcl_wait_set_init>:
 8017f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f64:	b084      	sub	sp, #16
 8017f66:	4604      	mov	r4, r0
 8017f68:	a810      	add	r0, sp, #64	@ 0x40
 8017f6a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8017f6e:	460f      	mov	r7, r1
 8017f70:	4690      	mov	r8, r2
 8017f72:	4699      	mov	r9, r3
 8017f74:	f7f8 fc10 	bl	8010798 <rcutils_allocator_is_valid>
 8017f78:	2800      	cmp	r0, #0
 8017f7a:	d06b      	beq.n	8018054 <rcl_wait_set_init+0xf4>
 8017f7c:	2c00      	cmp	r4, #0
 8017f7e:	d069      	beq.n	8018054 <rcl_wait_set_init+0xf4>
 8017f80:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017f82:	b125      	cbz	r5, 8017f8e <rcl_wait_set_init+0x2e>
 8017f84:	2564      	movs	r5, #100	@ 0x64
 8017f86:	4628      	mov	r0, r5
 8017f88:	b004      	add	sp, #16
 8017f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f8e:	f1ba 0f00 	cmp.w	sl, #0
 8017f92:	d05f      	beq.n	8018054 <rcl_wait_set_init+0xf4>
 8017f94:	4650      	mov	r0, sl
 8017f96:	f7f6 fb69 	bl	800e66c <rcl_context_is_valid>
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	d067      	beq.n	801806e <rcl_wait_set_init+0x10e>
 8017f9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017fa0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017fa2:	205c      	movs	r0, #92	@ 0x5c
 8017fa4:	4798      	blx	r3
 8017fa6:	6320      	str	r0, [r4, #48]	@ 0x30
 8017fa8:	2800      	cmp	r0, #0
 8017faa:	d062      	beq.n	8018072 <rcl_wait_set_init+0x112>
 8017fac:	4629      	mov	r1, r5
 8017fae:	225c      	movs	r2, #92	@ 0x5c
 8017fb0:	f004 fcc4 	bl	801c93c <memset>
 8017fb4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8017fb8:	eb03 0e02 	add.w	lr, r3, r2
 8017fbc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017fbe:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017fc0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017fc4:	449e      	add	lr, r3
 8017fc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017fca:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017fce:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017fd2:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017fd6:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8017fda:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8017fde:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8017fe2:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8017fe6:	f8da a000 	ldr.w	sl, [sl]
 8017fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017fec:	44c6      	add	lr, r8
 8017fee:	f8dc 3000 	ldr.w	r3, [ip]
 8017ff2:	602b      	str	r3, [r5, #0]
 8017ff4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8017ff8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8017ffc:	f001 ff14 	bl	8019e28 <rmw_create_wait_set>
 8018000:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018002:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8018004:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018006:	b350      	cbz	r0, 801805e <rcl_wait_set_init+0xfe>
 8018008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801800a:	9302      	str	r3, [sp, #8]
 801800c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801800e:	9301      	str	r3, [sp, #4]
 8018010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018012:	9300      	str	r3, [sp, #0]
 8018014:	4642      	mov	r2, r8
 8018016:	464b      	mov	r3, r9
 8018018:	4639      	mov	r1, r7
 801801a:	4620      	mov	r0, r4
 801801c:	f7ff fdea 	bl	8017bf4 <rcl_wait_set_resize>
 8018020:	4605      	mov	r5, r0
 8018022:	2800      	cmp	r0, #0
 8018024:	d0af      	beq.n	8017f86 <rcl_wait_set_init+0x26>
 8018026:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018028:	bb2b      	cbnz	r3, 8018076 <rcl_wait_set_init+0x116>
 801802a:	2600      	movs	r6, #0
 801802c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018030:	9600      	str	r6, [sp, #0]
 8018032:	4633      	mov	r3, r6
 8018034:	4632      	mov	r2, r6
 8018036:	4631      	mov	r1, r6
 8018038:	4620      	mov	r0, r4
 801803a:	f7ff fddb 	bl	8017bf4 <rcl_wait_set_resize>
 801803e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018040:	2800      	cmp	r0, #0
 8018042:	d0a0      	beq.n	8017f86 <rcl_wait_set_init+0x26>
 8018044:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8018046:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8018048:	4798      	blx	r3
 801804a:	4628      	mov	r0, r5
 801804c:	6326      	str	r6, [r4, #48]	@ 0x30
 801804e:	b004      	add	sp, #16
 8018050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018054:	250b      	movs	r5, #11
 8018056:	4628      	mov	r0, r5
 8018058:	b004      	add	sp, #16
 801805a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801805e:	2501      	movs	r5, #1
 8018060:	f001 feec 	bl	8019e3c <rmw_destroy_wait_set>
 8018064:	2800      	cmp	r0, #0
 8018066:	bf18      	it	ne
 8018068:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801806c:	e7dd      	b.n	801802a <rcl_wait_set_init+0xca>
 801806e:	2565      	movs	r5, #101	@ 0x65
 8018070:	e789      	b.n	8017f86 <rcl_wait_set_init+0x26>
 8018072:	250a      	movs	r5, #10
 8018074:	e787      	b.n	8017f86 <rcl_wait_set_init+0x26>
 8018076:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8018078:	e7f2      	b.n	8018060 <rcl_wait_set_init+0x100>
 801807a:	bf00      	nop

0801807c <rcl_wait_set_add_guard_condition>:
 801807c:	b318      	cbz	r0, 80180c6 <rcl_wait_set_add_guard_condition+0x4a>
 801807e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018080:	b570      	push	{r4, r5, r6, lr}
 8018082:	4604      	mov	r4, r0
 8018084:	b30b      	cbz	r3, 80180ca <rcl_wait_set_add_guard_condition+0x4e>
 8018086:	b319      	cbz	r1, 80180d0 <rcl_wait_set_add_guard_condition+0x54>
 8018088:	68dd      	ldr	r5, [r3, #12]
 801808a:	68c0      	ldr	r0, [r0, #12]
 801808c:	4285      	cmp	r5, r0
 801808e:	d217      	bcs.n	80180c0 <rcl_wait_set_add_guard_condition+0x44>
 8018090:	68a0      	ldr	r0, [r4, #8]
 8018092:	1c6e      	adds	r6, r5, #1
 8018094:	60de      	str	r6, [r3, #12]
 8018096:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801809a:	b102      	cbz	r2, 801809e <rcl_wait_set_add_guard_condition+0x22>
 801809c:	6015      	str	r5, [r2, #0]
 801809e:	4608      	mov	r0, r1
 80180a0:	f7ff f874 	bl	801718c <rcl_guard_condition_get_rmw_handle>
 80180a4:	b150      	cbz	r0, 80180bc <rcl_wait_set_add_guard_condition+0x40>
 80180a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80180a8:	6842      	ldr	r2, [r0, #4]
 80180aa:	695b      	ldr	r3, [r3, #20]
 80180ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80180b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80180b2:	6913      	ldr	r3, [r2, #16]
 80180b4:	3301      	adds	r3, #1
 80180b6:	2000      	movs	r0, #0
 80180b8:	6113      	str	r3, [r2, #16]
 80180ba:	bd70      	pop	{r4, r5, r6, pc}
 80180bc:	2001      	movs	r0, #1
 80180be:	bd70      	pop	{r4, r5, r6, pc}
 80180c0:	f240 3086 	movw	r0, #902	@ 0x386
 80180c4:	bd70      	pop	{r4, r5, r6, pc}
 80180c6:	200b      	movs	r0, #11
 80180c8:	4770      	bx	lr
 80180ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80180ce:	bd70      	pop	{r4, r5, r6, pc}
 80180d0:	200b      	movs	r0, #11
 80180d2:	bd70      	pop	{r4, r5, r6, pc}

080180d4 <rcl_wait_set_add_timer>:
 80180d4:	b328      	cbz	r0, 8018122 <rcl_wait_set_add_timer+0x4e>
 80180d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80180d8:	b570      	push	{r4, r5, r6, lr}
 80180da:	4604      	mov	r4, r0
 80180dc:	b31b      	cbz	r3, 8018126 <rcl_wait_set_add_timer+0x52>
 80180de:	b329      	cbz	r1, 801812c <rcl_wait_set_add_timer+0x58>
 80180e0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80180e2:	6965      	ldr	r5, [r4, #20]
 80180e4:	42a8      	cmp	r0, r5
 80180e6:	d219      	bcs.n	801811c <rcl_wait_set_add_timer+0x48>
 80180e8:	6925      	ldr	r5, [r4, #16]
 80180ea:	1c46      	adds	r6, r0, #1
 80180ec:	641e      	str	r6, [r3, #64]	@ 0x40
 80180ee:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80180f2:	b102      	cbz	r2, 80180f6 <rcl_wait_set_add_timer+0x22>
 80180f4:	6010      	str	r0, [r2, #0]
 80180f6:	4608      	mov	r0, r1
 80180f8:	f7f7 fb5e 	bl	800f7b8 <rcl_timer_get_guard_condition>
 80180fc:	b168      	cbz	r0, 801811a <rcl_wait_set_add_timer+0x46>
 80180fe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8018100:	68e3      	ldr	r3, [r4, #12]
 8018102:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8018104:	3b01      	subs	r3, #1
 8018106:	441d      	add	r5, r3
 8018108:	f7ff f840 	bl	801718c <rcl_guard_condition_get_rmw_handle>
 801810c:	b180      	cbz	r0, 8018130 <rcl_wait_set_add_timer+0x5c>
 801810e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018110:	6842      	ldr	r2, [r0, #4]
 8018112:	695b      	ldr	r3, [r3, #20]
 8018114:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018118:	2000      	movs	r0, #0
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	f240 3086 	movw	r0, #902	@ 0x386
 8018120:	bd70      	pop	{r4, r5, r6, pc}
 8018122:	200b      	movs	r0, #11
 8018124:	4770      	bx	lr
 8018126:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	200b      	movs	r0, #11
 801812e:	bd70      	pop	{r4, r5, r6, pc}
 8018130:	2001      	movs	r0, #1
 8018132:	bd70      	pop	{r4, r5, r6, pc}

08018134 <rcl_wait_set_add_client>:
 8018134:	b318      	cbz	r0, 801817e <rcl_wait_set_add_client+0x4a>
 8018136:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018138:	b570      	push	{r4, r5, r6, lr}
 801813a:	4604      	mov	r4, r0
 801813c:	b30b      	cbz	r3, 8018182 <rcl_wait_set_add_client+0x4e>
 801813e:	b319      	cbz	r1, 8018188 <rcl_wait_set_add_client+0x54>
 8018140:	699d      	ldr	r5, [r3, #24]
 8018142:	69c0      	ldr	r0, [r0, #28]
 8018144:	4285      	cmp	r5, r0
 8018146:	d217      	bcs.n	8018178 <rcl_wait_set_add_client+0x44>
 8018148:	69a0      	ldr	r0, [r4, #24]
 801814a:	1c6e      	adds	r6, r5, #1
 801814c:	619e      	str	r6, [r3, #24]
 801814e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8018152:	b102      	cbz	r2, 8018156 <rcl_wait_set_add_client+0x22>
 8018154:	6015      	str	r5, [r2, #0]
 8018156:	4608      	mov	r0, r1
 8018158:	f7fe fe6c 	bl	8016e34 <rcl_client_get_rmw_handle>
 801815c:	b150      	cbz	r0, 8018174 <rcl_wait_set_add_client+0x40>
 801815e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018160:	6842      	ldr	r2, [r0, #4]
 8018162:	6a1b      	ldr	r3, [r3, #32]
 8018164:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018168:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801816a:	69d3      	ldr	r3, [r2, #28]
 801816c:	3301      	adds	r3, #1
 801816e:	2000      	movs	r0, #0
 8018170:	61d3      	str	r3, [r2, #28]
 8018172:	bd70      	pop	{r4, r5, r6, pc}
 8018174:	2001      	movs	r0, #1
 8018176:	bd70      	pop	{r4, r5, r6, pc}
 8018178:	f240 3086 	movw	r0, #902	@ 0x386
 801817c:	bd70      	pop	{r4, r5, r6, pc}
 801817e:	200b      	movs	r0, #11
 8018180:	4770      	bx	lr
 8018182:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018186:	bd70      	pop	{r4, r5, r6, pc}
 8018188:	200b      	movs	r0, #11
 801818a:	bd70      	pop	{r4, r5, r6, pc}

0801818c <rcl_wait_set_add_service>:
 801818c:	b318      	cbz	r0, 80181d6 <rcl_wait_set_add_service+0x4a>
 801818e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018190:	b570      	push	{r4, r5, r6, lr}
 8018192:	4604      	mov	r4, r0
 8018194:	b30b      	cbz	r3, 80181da <rcl_wait_set_add_service+0x4e>
 8018196:	b319      	cbz	r1, 80181e0 <rcl_wait_set_add_service+0x54>
 8018198:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801819a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801819c:	4285      	cmp	r5, r0
 801819e:	d217      	bcs.n	80181d0 <rcl_wait_set_add_service+0x44>
 80181a0:	6a20      	ldr	r0, [r4, #32]
 80181a2:	1c6e      	adds	r6, r5, #1
 80181a4:	625e      	str	r6, [r3, #36]	@ 0x24
 80181a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80181aa:	b102      	cbz	r2, 80181ae <rcl_wait_set_add_service+0x22>
 80181ac:	6015      	str	r5, [r2, #0]
 80181ae:	4608      	mov	r0, r1
 80181b0:	f7ff f9c8 	bl	8017544 <rcl_service_get_rmw_handle>
 80181b4:	b150      	cbz	r0, 80181cc <rcl_wait_set_add_service+0x40>
 80181b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80181b8:	6842      	ldr	r2, [r0, #4]
 80181ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80181c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80181c2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80181c4:	3301      	adds	r3, #1
 80181c6:	2000      	movs	r0, #0
 80181c8:	6293      	str	r3, [r2, #40]	@ 0x28
 80181ca:	bd70      	pop	{r4, r5, r6, pc}
 80181cc:	2001      	movs	r0, #1
 80181ce:	bd70      	pop	{r4, r5, r6, pc}
 80181d0:	f240 3086 	movw	r0, #902	@ 0x386
 80181d4:	bd70      	pop	{r4, r5, r6, pc}
 80181d6:	200b      	movs	r0, #11
 80181d8:	4770      	bx	lr
 80181da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80181de:	bd70      	pop	{r4, r5, r6, pc}
 80181e0:	200b      	movs	r0, #11
 80181e2:	bd70      	pop	{r4, r5, r6, pc}
 80181e4:	0000      	movs	r0, r0
	...

080181e8 <rcl_wait>:
 80181e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181ec:	ed2d 8b02 	vpush	{d8}
 80181f0:	b08d      	sub	sp, #52	@ 0x34
 80181f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80181f6:	2800      	cmp	r0, #0
 80181f8:	f000 8143 	beq.w	8018482 <rcl_wait+0x29a>
 80181fc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80181fe:	4605      	mov	r5, r0
 8018200:	2e00      	cmp	r6, #0
 8018202:	f000 8112 	beq.w	801842a <rcl_wait+0x242>
 8018206:	6843      	ldr	r3, [r0, #4]
 8018208:	b983      	cbnz	r3, 801822c <rcl_wait+0x44>
 801820a:	68eb      	ldr	r3, [r5, #12]
 801820c:	b973      	cbnz	r3, 801822c <rcl_wait+0x44>
 801820e:	696b      	ldr	r3, [r5, #20]
 8018210:	b963      	cbnz	r3, 801822c <rcl_wait+0x44>
 8018212:	69eb      	ldr	r3, [r5, #28]
 8018214:	b953      	cbnz	r3, 801822c <rcl_wait+0x44>
 8018216:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8018218:	b943      	cbnz	r3, 801822c <rcl_wait+0x44>
 801821a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801821c:	b933      	cbnz	r3, 801822c <rcl_wait+0x44>
 801821e:	f240 3085 	movw	r0, #901	@ 0x385
 8018222:	b00d      	add	sp, #52	@ 0x34
 8018224:	ecbd 8b02 	vpop	{d8}
 8018228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801822c:	9b04      	ldr	r3, [sp, #16]
 801822e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8018230:	2b01      	cmp	r3, #1
 8018232:	9b05      	ldr	r3, [sp, #20]
 8018234:	f173 0300 	sbcs.w	r3, r3, #0
 8018238:	f2c0 80f0 	blt.w	801841c <rcl_wait+0x234>
 801823c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018240:	4643      	mov	r3, r8
 8018242:	2a00      	cmp	r2, #0
 8018244:	f000 8133 	beq.w	80184ae <rcl_wait+0x2c6>
 8018248:	2400      	movs	r4, #0
 801824a:	4613      	mov	r3, r2
 801824c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80184c0 <rcl_wait+0x2d8>
 8018250:	46a2      	mov	sl, r4
 8018252:	46a3      	mov	fp, r4
 8018254:	f240 3921 	movw	r9, #801	@ 0x321
 8018258:	4632      	mov	r2, r6
 801825a:	e014      	b.n	8018286 <rcl_wait+0x9e>
 801825c:	2800      	cmp	r0, #0
 801825e:	d1e0      	bne.n	8018222 <rcl_wait+0x3a>
 8018260:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018264:	4542      	cmp	r2, r8
 8018266:	eb73 0107 	sbcs.w	r1, r3, r7
 801826a:	da03      	bge.n	8018274 <rcl_wait+0x8c>
 801826c:	4690      	mov	r8, r2
 801826e:	461f      	mov	r7, r3
 8018270:	f04f 0b01 	mov.w	fp, #1
 8018274:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8018276:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8018278:	3401      	adds	r4, #1
 801827a:	f14a 0a00 	adc.w	sl, sl, #0
 801827e:	429c      	cmp	r4, r3
 8018280:	f17a 0100 	sbcs.w	r1, sl, #0
 8018284:	d228      	bcs.n	80182d8 <rcl_wait+0xf0>
 8018286:	6928      	ldr	r0, [r5, #16]
 8018288:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801828c:	a908      	add	r1, sp, #32
 801828e:	00a6      	lsls	r6, r4, #2
 8018290:	2800      	cmp	r0, #0
 8018292:	d0f1      	beq.n	8018278 <rcl_wait+0x90>
 8018294:	68eb      	ldr	r3, [r5, #12]
 8018296:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801829a:	4423      	add	r3, r4
 801829c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 80182a0:	f1be 0f00 	cmp.w	lr, #0
 80182a4:	d006      	beq.n	80182b4 <rcl_wait+0xcc>
 80182a6:	6913      	ldr	r3, [r2, #16]
 80182a8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 80182ac:	3301      	adds	r3, #1
 80182ae:	6113      	str	r3, [r2, #16]
 80182b0:	692b      	ldr	r3, [r5, #16]
 80182b2:	5998      	ldr	r0, [r3, r6]
 80182b4:	ed8d 8b08 	vstr	d8, [sp, #32]
 80182b8:	f7f7 fa4c 	bl	800f754 <rcl_timer_get_time_until_next_call>
 80182bc:	4548      	cmp	r0, r9
 80182be:	d1cd      	bne.n	801825c <rcl_wait+0x74>
 80182c0:	692b      	ldr	r3, [r5, #16]
 80182c2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80182c4:	2100      	movs	r1, #0
 80182c6:	5199      	str	r1, [r3, r6]
 80182c8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80182ca:	3401      	adds	r4, #1
 80182cc:	f14a 0a00 	adc.w	sl, sl, #0
 80182d0:	429c      	cmp	r4, r3
 80182d2:	f17a 0100 	sbcs.w	r1, sl, #0
 80182d6:	d3d6      	bcc.n	8018286 <rcl_wait+0x9e>
 80182d8:	4616      	mov	r6, r2
 80182da:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80182de:	4313      	orrs	r3, r2
 80182e0:	46d9      	mov	r9, fp
 80182e2:	f040 80a9 	bne.w	8018438 <rcl_wait+0x250>
 80182e6:	2300      	movs	r3, #0
 80182e8:	2200      	movs	r2, #0
 80182ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80182ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80182f2:	ab08      	add	r3, sp, #32
 80182f4:	9302      	str	r3, [sp, #8]
 80182f6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80182f8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80182fc:	e9cd 3200 	strd	r3, r2, [sp]
 8018300:	f106 0110 	add.w	r1, r6, #16
 8018304:	f106 031c 	add.w	r3, r6, #28
 8018308:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801830c:	1d30      	adds	r0, r6, #4
 801830e:	f001 fc13 	bl	8019b38 <rmw_wait>
 8018312:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018314:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018316:	4680      	mov	r8, r0
 8018318:	b1ca      	cbz	r2, 801834e <rcl_wait+0x166>
 801831a:	2400      	movs	r4, #0
 801831c:	4627      	mov	r7, r4
 801831e:	692a      	ldr	r2, [r5, #16]
 8018320:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8018324:	f10d 011f 	add.w	r1, sp, #31
 8018328:	00a6      	lsls	r6, r4, #2
 801832a:	b160      	cbz	r0, 8018346 <rcl_wait+0x15e>
 801832c:	f88d 701f 	strb.w	r7, [sp, #31]
 8018330:	f7f7 f9d6 	bl	800f6e0 <rcl_timer_is_ready>
 8018334:	2800      	cmp	r0, #0
 8018336:	f47f af74 	bne.w	8018222 <rcl_wait+0x3a>
 801833a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801833e:	b90b      	cbnz	r3, 8018344 <rcl_wait+0x15c>
 8018340:	692a      	ldr	r2, [r5, #16]
 8018342:	5193      	str	r3, [r2, r6]
 8018344:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8018346:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018348:	3401      	adds	r4, #1
 801834a:	42a2      	cmp	r2, r4
 801834c:	d8e7      	bhi.n	801831e <rcl_wait+0x136>
 801834e:	f038 0002 	bics.w	r0, r8, #2
 8018352:	f040 8090 	bne.w	8018476 <rcl_wait+0x28e>
 8018356:	686e      	ldr	r6, [r5, #4]
 8018358:	4602      	mov	r2, r0
 801835a:	b91e      	cbnz	r6, 8018364 <rcl_wait+0x17c>
 801835c:	e00d      	b.n	801837a <rcl_wait+0x192>
 801835e:	3201      	adds	r2, #1
 8018360:	42b2      	cmp	r2, r6
 8018362:	d00a      	beq.n	801837a <rcl_wait+0x192>
 8018364:	6899      	ldr	r1, [r3, #8]
 8018366:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801836a:	2900      	cmp	r1, #0
 801836c:	d1f7      	bne.n	801835e <rcl_wait+0x176>
 801836e:	682c      	ldr	r4, [r5, #0]
 8018370:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8018374:	3201      	adds	r2, #1
 8018376:	42b2      	cmp	r2, r6
 8018378:	d1f4      	bne.n	8018364 <rcl_wait+0x17c>
 801837a:	68ee      	ldr	r6, [r5, #12]
 801837c:	2200      	movs	r2, #0
 801837e:	b91e      	cbnz	r6, 8018388 <rcl_wait+0x1a0>
 8018380:	e00d      	b.n	801839e <rcl_wait+0x1b6>
 8018382:	3201      	adds	r2, #1
 8018384:	42b2      	cmp	r2, r6
 8018386:	d00a      	beq.n	801839e <rcl_wait+0x1b6>
 8018388:	6959      	ldr	r1, [r3, #20]
 801838a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801838e:	2900      	cmp	r1, #0
 8018390:	d1f7      	bne.n	8018382 <rcl_wait+0x19a>
 8018392:	68ac      	ldr	r4, [r5, #8]
 8018394:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8018398:	3201      	adds	r2, #1
 801839a:	42b2      	cmp	r2, r6
 801839c:	d1f4      	bne.n	8018388 <rcl_wait+0x1a0>
 801839e:	69ee      	ldr	r6, [r5, #28]
 80183a0:	2200      	movs	r2, #0
 80183a2:	b91e      	cbnz	r6, 80183ac <rcl_wait+0x1c4>
 80183a4:	e00d      	b.n	80183c2 <rcl_wait+0x1da>
 80183a6:	3201      	adds	r2, #1
 80183a8:	42b2      	cmp	r2, r6
 80183aa:	d00a      	beq.n	80183c2 <rcl_wait+0x1da>
 80183ac:	6a19      	ldr	r1, [r3, #32]
 80183ae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80183b2:	2900      	cmp	r1, #0
 80183b4:	d1f7      	bne.n	80183a6 <rcl_wait+0x1be>
 80183b6:	69ac      	ldr	r4, [r5, #24]
 80183b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80183bc:	3201      	adds	r2, #1
 80183be:	42b2      	cmp	r2, r6
 80183c0:	d1f4      	bne.n	80183ac <rcl_wait+0x1c4>
 80183c2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80183c4:	2200      	movs	r2, #0
 80183c6:	b91e      	cbnz	r6, 80183d0 <rcl_wait+0x1e8>
 80183c8:	e00d      	b.n	80183e6 <rcl_wait+0x1fe>
 80183ca:	3201      	adds	r2, #1
 80183cc:	4296      	cmp	r6, r2
 80183ce:	d00a      	beq.n	80183e6 <rcl_wait+0x1fe>
 80183d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80183d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80183d6:	2900      	cmp	r1, #0
 80183d8:	d1f7      	bne.n	80183ca <rcl_wait+0x1e2>
 80183da:	6a2c      	ldr	r4, [r5, #32]
 80183dc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80183e0:	3201      	adds	r2, #1
 80183e2:	4296      	cmp	r6, r2
 80183e4:	d1f4      	bne.n	80183d0 <rcl_wait+0x1e8>
 80183e6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 80183e8:	2200      	movs	r2, #0
 80183ea:	b91e      	cbnz	r6, 80183f4 <rcl_wait+0x20c>
 80183ec:	e00d      	b.n	801840a <rcl_wait+0x222>
 80183ee:	3201      	adds	r2, #1
 80183f0:	42b2      	cmp	r2, r6
 80183f2:	d00a      	beq.n	801840a <rcl_wait+0x222>
 80183f4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80183f6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80183fa:	2900      	cmp	r1, #0
 80183fc:	d1f7      	bne.n	80183ee <rcl_wait+0x206>
 80183fe:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8018400:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8018404:	3201      	adds	r2, #1
 8018406:	42b2      	cmp	r2, r6
 8018408:	d1f4      	bne.n	80183f4 <rcl_wait+0x20c>
 801840a:	f1b8 0f02 	cmp.w	r8, #2
 801840e:	f47f af08 	bne.w	8018222 <rcl_wait+0x3a>
 8018412:	464b      	mov	r3, r9
 8018414:	2b00      	cmp	r3, #0
 8018416:	bf08      	it	eq
 8018418:	2002      	moveq	r0, #2
 801841a:	e702      	b.n	8018222 <rcl_wait+0x3a>
 801841c:	2a00      	cmp	r2, #0
 801841e:	d03a      	beq.n	8018496 <rcl_wait+0x2ae>
 8018420:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018424:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018428:	e70e      	b.n	8018248 <rcl_wait+0x60>
 801842a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801842e:	b00d      	add	sp, #52	@ 0x34
 8018430:	ecbd 8b02 	vpop	{d8}
 8018434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018438:	9b04      	ldr	r3, [sp, #16]
 801843a:	2b01      	cmp	r3, #1
 801843c:	9b05      	ldr	r3, [sp, #20]
 801843e:	f173 0300 	sbcs.w	r3, r3, #0
 8018442:	db24      	blt.n	801848e <rcl_wait+0x2a6>
 8018444:	2f00      	cmp	r7, #0
 8018446:	bfbc      	itt	lt
 8018448:	f04f 0800 	movlt.w	r8, #0
 801844c:	4647      	movlt	r7, r8
 801844e:	a31e      	add	r3, pc, #120	@ (adr r3, 80184c8 <rcl_wait+0x2e0>)
 8018450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018454:	4640      	mov	r0, r8
 8018456:	4639      	mov	r1, r7
 8018458:	f7e8 fb60 	bl	8000b1c <__aeabi_ldivmod>
 801845c:	a31a      	add	r3, pc, #104	@ (adr r3, 80184c8 <rcl_wait+0x2e0>)
 801845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018462:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018466:	4640      	mov	r0, r8
 8018468:	4639      	mov	r1, r7
 801846a:	f7e8 fb57 	bl	8000b1c <__aeabi_ldivmod>
 801846e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018472:	ab08      	add	r3, sp, #32
 8018474:	e73e      	b.n	80182f4 <rcl_wait+0x10c>
 8018476:	2001      	movs	r0, #1
 8018478:	b00d      	add	sp, #52	@ 0x34
 801847a:	ecbd 8b02 	vpop	{d8}
 801847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018482:	200b      	movs	r0, #11
 8018484:	b00d      	add	sp, #52	@ 0x34
 8018486:	ecbd 8b02 	vpop	{d8}
 801848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801848e:	465b      	mov	r3, fp
 8018490:	2b00      	cmp	r3, #0
 8018492:	d1d7      	bne.n	8018444 <rcl_wait+0x25c>
 8018494:	e72e      	b.n	80182f4 <rcl_wait+0x10c>
 8018496:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801849a:	430b      	orrs	r3, r1
 801849c:	bf08      	it	eq
 801849e:	4691      	moveq	r9, r2
 80184a0:	f43f af21 	beq.w	80182e6 <rcl_wait+0xfe>
 80184a4:	9b04      	ldr	r3, [sp, #16]
 80184a6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80184aa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80184ae:	2b01      	cmp	r3, #1
 80184b0:	9b05      	ldr	r3, [sp, #20]
 80184b2:	f173 0300 	sbcs.w	r3, r3, #0
 80184b6:	f04f 0300 	mov.w	r3, #0
 80184ba:	4699      	mov	r9, r3
 80184bc:	dac2      	bge.n	8018444 <rcl_wait+0x25c>
 80184be:	e719      	b.n	80182f4 <rcl_wait+0x10c>
 80184c0:	ffffffff 	.word	0xffffffff
 80184c4:	7fffffff 	.word	0x7fffffff
 80184c8:	3b9aca00 	.word	0x3b9aca00
 80184cc:	00000000 	.word	0x00000000

080184d0 <rcl_action_take_goal_response>:
 80184d0:	2800      	cmp	r0, #0
 80184d2:	d039      	beq.n	8018548 <rcl_action_take_goal_response+0x78>
 80184d4:	b570      	push	{r4, r5, r6, lr}
 80184d6:	4604      	mov	r4, r0
 80184d8:	6800      	ldr	r0, [r0, #0]
 80184da:	b380      	cbz	r0, 801853e <rcl_action_take_goal_response+0x6e>
 80184dc:	460d      	mov	r5, r1
 80184de:	4616      	mov	r6, r2
 80184e0:	f7fe fd2e 	bl	8016f40 <rcl_client_is_valid>
 80184e4:	b330      	cbz	r0, 8018534 <rcl_action_take_goal_response+0x64>
 80184e6:	6820      	ldr	r0, [r4, #0]
 80184e8:	3004      	adds	r0, #4
 80184ea:	f7fe fd29 	bl	8016f40 <rcl_client_is_valid>
 80184ee:	b308      	cbz	r0, 8018534 <rcl_action_take_goal_response+0x64>
 80184f0:	6820      	ldr	r0, [r4, #0]
 80184f2:	3008      	adds	r0, #8
 80184f4:	f7fe fd24 	bl	8016f40 <rcl_client_is_valid>
 80184f8:	b1e0      	cbz	r0, 8018534 <rcl_action_take_goal_response+0x64>
 80184fa:	6820      	ldr	r0, [r4, #0]
 80184fc:	300c      	adds	r0, #12
 80184fe:	f7f6 fee1 	bl	800f2c4 <rcl_subscription_is_valid>
 8018502:	b1b8      	cbz	r0, 8018534 <rcl_action_take_goal_response+0x64>
 8018504:	6820      	ldr	r0, [r4, #0]
 8018506:	3010      	adds	r0, #16
 8018508:	f7f6 fedc 	bl	800f2c4 <rcl_subscription_is_valid>
 801850c:	b190      	cbz	r0, 8018534 <rcl_action_take_goal_response+0x64>
 801850e:	b1cd      	cbz	r5, 8018544 <rcl_action_take_goal_response+0x74>
 8018510:	b1c6      	cbz	r6, 8018544 <rcl_action_take_goal_response+0x74>
 8018512:	6820      	ldr	r0, [r4, #0]
 8018514:	4632      	mov	r2, r6
 8018516:	4629      	mov	r1, r5
 8018518:	f7fe fcca 	bl	8016eb0 <rcl_take_response>
 801851c:	b148      	cbz	r0, 8018532 <rcl_action_take_goal_response+0x62>
 801851e:	280a      	cmp	r0, #10
 8018520:	d007      	beq.n	8018532 <rcl_action_take_goal_response+0x62>
 8018522:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018526:	f640 0337 	movw	r3, #2103	@ 0x837
 801852a:	4290      	cmp	r0, r2
 801852c:	bf0c      	ite	eq
 801852e:	4618      	moveq	r0, r3
 8018530:	2001      	movne	r0, #1
 8018532:	bd70      	pop	{r4, r5, r6, pc}
 8018534:	f7f8 fa10 	bl	8010958 <rcutils_reset_error>
 8018538:	f640 0036 	movw	r0, #2102	@ 0x836
 801853c:	bd70      	pop	{r4, r5, r6, pc}
 801853e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018542:	bd70      	pop	{r4, r5, r6, pc}
 8018544:	200b      	movs	r0, #11
 8018546:	bd70      	pop	{r4, r5, r6, pc}
 8018548:	f640 0036 	movw	r0, #2102	@ 0x836
 801854c:	4770      	bx	lr
 801854e:	bf00      	nop

08018550 <rcl_action_send_result_request>:
 8018550:	b390      	cbz	r0, 80185b8 <rcl_action_send_result_request+0x68>
 8018552:	b570      	push	{r4, r5, r6, lr}
 8018554:	4604      	mov	r4, r0
 8018556:	6800      	ldr	r0, [r0, #0]
 8018558:	b348      	cbz	r0, 80185ae <rcl_action_send_result_request+0x5e>
 801855a:	460d      	mov	r5, r1
 801855c:	4616      	mov	r6, r2
 801855e:	f7fe fcef 	bl	8016f40 <rcl_client_is_valid>
 8018562:	b1f8      	cbz	r0, 80185a4 <rcl_action_send_result_request+0x54>
 8018564:	6820      	ldr	r0, [r4, #0]
 8018566:	3004      	adds	r0, #4
 8018568:	f7fe fcea 	bl	8016f40 <rcl_client_is_valid>
 801856c:	b1d0      	cbz	r0, 80185a4 <rcl_action_send_result_request+0x54>
 801856e:	6820      	ldr	r0, [r4, #0]
 8018570:	3008      	adds	r0, #8
 8018572:	f7fe fce5 	bl	8016f40 <rcl_client_is_valid>
 8018576:	b1a8      	cbz	r0, 80185a4 <rcl_action_send_result_request+0x54>
 8018578:	6820      	ldr	r0, [r4, #0]
 801857a:	300c      	adds	r0, #12
 801857c:	f7f6 fea2 	bl	800f2c4 <rcl_subscription_is_valid>
 8018580:	b180      	cbz	r0, 80185a4 <rcl_action_send_result_request+0x54>
 8018582:	6820      	ldr	r0, [r4, #0]
 8018584:	3010      	adds	r0, #16
 8018586:	f7f6 fe9d 	bl	800f2c4 <rcl_subscription_is_valid>
 801858a:	b158      	cbz	r0, 80185a4 <rcl_action_send_result_request+0x54>
 801858c:	b195      	cbz	r5, 80185b4 <rcl_action_send_result_request+0x64>
 801858e:	b18e      	cbz	r6, 80185b4 <rcl_action_send_result_request+0x64>
 8018590:	6820      	ldr	r0, [r4, #0]
 8018592:	4632      	mov	r2, r6
 8018594:	4629      	mov	r1, r5
 8018596:	3008      	adds	r0, #8
 8018598:	f7fe fc52 	bl	8016e40 <rcl_send_request>
 801859c:	3800      	subs	r0, #0
 801859e:	bf18      	it	ne
 80185a0:	2001      	movne	r0, #1
 80185a2:	bd70      	pop	{r4, r5, r6, pc}
 80185a4:	f7f8 f9d8 	bl	8010958 <rcutils_reset_error>
 80185a8:	f640 0036 	movw	r0, #2102	@ 0x836
 80185ac:	bd70      	pop	{r4, r5, r6, pc}
 80185ae:	f640 0036 	movw	r0, #2102	@ 0x836
 80185b2:	bd70      	pop	{r4, r5, r6, pc}
 80185b4:	200b      	movs	r0, #11
 80185b6:	bd70      	pop	{r4, r5, r6, pc}
 80185b8:	f640 0036 	movw	r0, #2102	@ 0x836
 80185bc:	4770      	bx	lr
 80185be:	bf00      	nop

080185c0 <rcl_action_take_result_response>:
 80185c0:	2800      	cmp	r0, #0
 80185c2:	d03a      	beq.n	801863a <rcl_action_take_result_response+0x7a>
 80185c4:	b570      	push	{r4, r5, r6, lr}
 80185c6:	4604      	mov	r4, r0
 80185c8:	6800      	ldr	r0, [r0, #0]
 80185ca:	b388      	cbz	r0, 8018630 <rcl_action_take_result_response+0x70>
 80185cc:	460d      	mov	r5, r1
 80185ce:	4616      	mov	r6, r2
 80185d0:	f7fe fcb6 	bl	8016f40 <rcl_client_is_valid>
 80185d4:	b338      	cbz	r0, 8018626 <rcl_action_take_result_response+0x66>
 80185d6:	6820      	ldr	r0, [r4, #0]
 80185d8:	3004      	adds	r0, #4
 80185da:	f7fe fcb1 	bl	8016f40 <rcl_client_is_valid>
 80185de:	b310      	cbz	r0, 8018626 <rcl_action_take_result_response+0x66>
 80185e0:	6820      	ldr	r0, [r4, #0]
 80185e2:	3008      	adds	r0, #8
 80185e4:	f7fe fcac 	bl	8016f40 <rcl_client_is_valid>
 80185e8:	b1e8      	cbz	r0, 8018626 <rcl_action_take_result_response+0x66>
 80185ea:	6820      	ldr	r0, [r4, #0]
 80185ec:	300c      	adds	r0, #12
 80185ee:	f7f6 fe69 	bl	800f2c4 <rcl_subscription_is_valid>
 80185f2:	b1c0      	cbz	r0, 8018626 <rcl_action_take_result_response+0x66>
 80185f4:	6820      	ldr	r0, [r4, #0]
 80185f6:	3010      	adds	r0, #16
 80185f8:	f7f6 fe64 	bl	800f2c4 <rcl_subscription_is_valid>
 80185fc:	b198      	cbz	r0, 8018626 <rcl_action_take_result_response+0x66>
 80185fe:	b1d5      	cbz	r5, 8018636 <rcl_action_take_result_response+0x76>
 8018600:	b1ce      	cbz	r6, 8018636 <rcl_action_take_result_response+0x76>
 8018602:	6820      	ldr	r0, [r4, #0]
 8018604:	4632      	mov	r2, r6
 8018606:	4629      	mov	r1, r5
 8018608:	3008      	adds	r0, #8
 801860a:	f7fe fc51 	bl	8016eb0 <rcl_take_response>
 801860e:	b148      	cbz	r0, 8018624 <rcl_action_take_result_response+0x64>
 8018610:	280a      	cmp	r0, #10
 8018612:	d007      	beq.n	8018624 <rcl_action_take_result_response+0x64>
 8018614:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018618:	f640 0337 	movw	r3, #2103	@ 0x837
 801861c:	4290      	cmp	r0, r2
 801861e:	bf0c      	ite	eq
 8018620:	4618      	moveq	r0, r3
 8018622:	2001      	movne	r0, #1
 8018624:	bd70      	pop	{r4, r5, r6, pc}
 8018626:	f7f8 f997 	bl	8010958 <rcutils_reset_error>
 801862a:	f640 0036 	movw	r0, #2102	@ 0x836
 801862e:	bd70      	pop	{r4, r5, r6, pc}
 8018630:	f640 0036 	movw	r0, #2102	@ 0x836
 8018634:	bd70      	pop	{r4, r5, r6, pc}
 8018636:	200b      	movs	r0, #11
 8018638:	bd70      	pop	{r4, r5, r6, pc}
 801863a:	f640 0036 	movw	r0, #2102	@ 0x836
 801863e:	4770      	bx	lr

08018640 <rcl_action_take_cancel_response>:
 8018640:	2800      	cmp	r0, #0
 8018642:	d03a      	beq.n	80186ba <rcl_action_take_cancel_response+0x7a>
 8018644:	b570      	push	{r4, r5, r6, lr}
 8018646:	4604      	mov	r4, r0
 8018648:	6800      	ldr	r0, [r0, #0]
 801864a:	b388      	cbz	r0, 80186b0 <rcl_action_take_cancel_response+0x70>
 801864c:	460d      	mov	r5, r1
 801864e:	4616      	mov	r6, r2
 8018650:	f7fe fc76 	bl	8016f40 <rcl_client_is_valid>
 8018654:	b338      	cbz	r0, 80186a6 <rcl_action_take_cancel_response+0x66>
 8018656:	6820      	ldr	r0, [r4, #0]
 8018658:	3004      	adds	r0, #4
 801865a:	f7fe fc71 	bl	8016f40 <rcl_client_is_valid>
 801865e:	b310      	cbz	r0, 80186a6 <rcl_action_take_cancel_response+0x66>
 8018660:	6820      	ldr	r0, [r4, #0]
 8018662:	3008      	adds	r0, #8
 8018664:	f7fe fc6c 	bl	8016f40 <rcl_client_is_valid>
 8018668:	b1e8      	cbz	r0, 80186a6 <rcl_action_take_cancel_response+0x66>
 801866a:	6820      	ldr	r0, [r4, #0]
 801866c:	300c      	adds	r0, #12
 801866e:	f7f6 fe29 	bl	800f2c4 <rcl_subscription_is_valid>
 8018672:	b1c0      	cbz	r0, 80186a6 <rcl_action_take_cancel_response+0x66>
 8018674:	6820      	ldr	r0, [r4, #0]
 8018676:	3010      	adds	r0, #16
 8018678:	f7f6 fe24 	bl	800f2c4 <rcl_subscription_is_valid>
 801867c:	b198      	cbz	r0, 80186a6 <rcl_action_take_cancel_response+0x66>
 801867e:	b1d5      	cbz	r5, 80186b6 <rcl_action_take_cancel_response+0x76>
 8018680:	b1ce      	cbz	r6, 80186b6 <rcl_action_take_cancel_response+0x76>
 8018682:	6820      	ldr	r0, [r4, #0]
 8018684:	4632      	mov	r2, r6
 8018686:	4629      	mov	r1, r5
 8018688:	3004      	adds	r0, #4
 801868a:	f7fe fc11 	bl	8016eb0 <rcl_take_response>
 801868e:	b148      	cbz	r0, 80186a4 <rcl_action_take_cancel_response+0x64>
 8018690:	280a      	cmp	r0, #10
 8018692:	d007      	beq.n	80186a4 <rcl_action_take_cancel_response+0x64>
 8018694:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018698:	f640 0337 	movw	r3, #2103	@ 0x837
 801869c:	4290      	cmp	r0, r2
 801869e:	bf0c      	ite	eq
 80186a0:	4618      	moveq	r0, r3
 80186a2:	2001      	movne	r0, #1
 80186a4:	bd70      	pop	{r4, r5, r6, pc}
 80186a6:	f7f8 f957 	bl	8010958 <rcutils_reset_error>
 80186aa:	f640 0036 	movw	r0, #2102	@ 0x836
 80186ae:	bd70      	pop	{r4, r5, r6, pc}
 80186b0:	f640 0036 	movw	r0, #2102	@ 0x836
 80186b4:	bd70      	pop	{r4, r5, r6, pc}
 80186b6:	200b      	movs	r0, #11
 80186b8:	bd70      	pop	{r4, r5, r6, pc}
 80186ba:	f640 0036 	movw	r0, #2102	@ 0x836
 80186be:	4770      	bx	lr

080186c0 <rcl_action_take_feedback>:
 80186c0:	2800      	cmp	r0, #0
 80186c2:	d038      	beq.n	8018736 <rcl_action_take_feedback+0x76>
 80186c4:	b530      	push	{r4, r5, lr}
 80186c6:	4604      	mov	r4, r0
 80186c8:	6800      	ldr	r0, [r0, #0]
 80186ca:	b091      	sub	sp, #68	@ 0x44
 80186cc:	b378      	cbz	r0, 801872e <rcl_action_take_feedback+0x6e>
 80186ce:	460d      	mov	r5, r1
 80186d0:	f7fe fc36 	bl	8016f40 <rcl_client_is_valid>
 80186d4:	b328      	cbz	r0, 8018722 <rcl_action_take_feedback+0x62>
 80186d6:	6820      	ldr	r0, [r4, #0]
 80186d8:	3004      	adds	r0, #4
 80186da:	f7fe fc31 	bl	8016f40 <rcl_client_is_valid>
 80186de:	b300      	cbz	r0, 8018722 <rcl_action_take_feedback+0x62>
 80186e0:	6820      	ldr	r0, [r4, #0]
 80186e2:	3008      	adds	r0, #8
 80186e4:	f7fe fc2c 	bl	8016f40 <rcl_client_is_valid>
 80186e8:	b1d8      	cbz	r0, 8018722 <rcl_action_take_feedback+0x62>
 80186ea:	6820      	ldr	r0, [r4, #0]
 80186ec:	300c      	adds	r0, #12
 80186ee:	f7f6 fde9 	bl	800f2c4 <rcl_subscription_is_valid>
 80186f2:	b1b0      	cbz	r0, 8018722 <rcl_action_take_feedback+0x62>
 80186f4:	6820      	ldr	r0, [r4, #0]
 80186f6:	3010      	adds	r0, #16
 80186f8:	f7f6 fde4 	bl	800f2c4 <rcl_subscription_is_valid>
 80186fc:	b188      	cbz	r0, 8018722 <rcl_action_take_feedback+0x62>
 80186fe:	b1ed      	cbz	r5, 801873c <rcl_action_take_feedback+0x7c>
 8018700:	6820      	ldr	r0, [r4, #0]
 8018702:	2300      	movs	r3, #0
 8018704:	466a      	mov	r2, sp
 8018706:	4629      	mov	r1, r5
 8018708:	300c      	adds	r0, #12
 801870a:	f7f6 fd7d 	bl	800f208 <rcl_take>
 801870e:	b160      	cbz	r0, 801872a <rcl_action_take_feedback+0x6a>
 8018710:	f240 1391 	movw	r3, #401	@ 0x191
 8018714:	4298      	cmp	r0, r3
 8018716:	d014      	beq.n	8018742 <rcl_action_take_feedback+0x82>
 8018718:	280a      	cmp	r0, #10
 801871a:	bf18      	it	ne
 801871c:	2001      	movne	r0, #1
 801871e:	b011      	add	sp, #68	@ 0x44
 8018720:	bd30      	pop	{r4, r5, pc}
 8018722:	f7f8 f919 	bl	8010958 <rcutils_reset_error>
 8018726:	f640 0036 	movw	r0, #2102	@ 0x836
 801872a:	b011      	add	sp, #68	@ 0x44
 801872c:	bd30      	pop	{r4, r5, pc}
 801872e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018732:	b011      	add	sp, #68	@ 0x44
 8018734:	bd30      	pop	{r4, r5, pc}
 8018736:	f640 0036 	movw	r0, #2102	@ 0x836
 801873a:	4770      	bx	lr
 801873c:	200b      	movs	r0, #11
 801873e:	b011      	add	sp, #68	@ 0x44
 8018740:	bd30      	pop	{r4, r5, pc}
 8018742:	f640 0037 	movw	r0, #2103	@ 0x837
 8018746:	e7f0      	b.n	801872a <rcl_action_take_feedback+0x6a>

08018748 <rcl_action_wait_set_add_action_client>:
 8018748:	2800      	cmp	r0, #0
 801874a:	d048      	beq.n	80187de <rcl_action_wait_set_add_action_client+0x96>
 801874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801874e:	460c      	mov	r4, r1
 8018750:	2900      	cmp	r1, #0
 8018752:	d03c      	beq.n	80187ce <rcl_action_wait_set_add_action_client+0x86>
 8018754:	4605      	mov	r5, r0
 8018756:	6808      	ldr	r0, [r1, #0]
 8018758:	2800      	cmp	r0, #0
 801875a:	d038      	beq.n	80187ce <rcl_action_wait_set_add_action_client+0x86>
 801875c:	4617      	mov	r7, r2
 801875e:	461e      	mov	r6, r3
 8018760:	f7fe fbee 	bl	8016f40 <rcl_client_is_valid>
 8018764:	b3b0      	cbz	r0, 80187d4 <rcl_action_wait_set_add_action_client+0x8c>
 8018766:	6820      	ldr	r0, [r4, #0]
 8018768:	3004      	adds	r0, #4
 801876a:	f7fe fbe9 	bl	8016f40 <rcl_client_is_valid>
 801876e:	b388      	cbz	r0, 80187d4 <rcl_action_wait_set_add_action_client+0x8c>
 8018770:	6820      	ldr	r0, [r4, #0]
 8018772:	3008      	adds	r0, #8
 8018774:	f7fe fbe4 	bl	8016f40 <rcl_client_is_valid>
 8018778:	b360      	cbz	r0, 80187d4 <rcl_action_wait_set_add_action_client+0x8c>
 801877a:	6820      	ldr	r0, [r4, #0]
 801877c:	300c      	adds	r0, #12
 801877e:	f7f6 fda1 	bl	800f2c4 <rcl_subscription_is_valid>
 8018782:	b338      	cbz	r0, 80187d4 <rcl_action_wait_set_add_action_client+0x8c>
 8018784:	6820      	ldr	r0, [r4, #0]
 8018786:	3010      	adds	r0, #16
 8018788:	f7f6 fd9c 	bl	800f2c4 <rcl_subscription_is_valid>
 801878c:	b310      	cbz	r0, 80187d4 <rcl_action_wait_set_add_action_client+0x8c>
 801878e:	6821      	ldr	r1, [r4, #0]
 8018790:	4628      	mov	r0, r5
 8018792:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018796:	f7ff fccd 	bl	8018134 <rcl_wait_set_add_client>
 801879a:	b9b8      	cbnz	r0, 80187cc <rcl_action_wait_set_add_action_client+0x84>
 801879c:	6821      	ldr	r1, [r4, #0]
 801879e:	4628      	mov	r0, r5
 80187a0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80187a4:	3104      	adds	r1, #4
 80187a6:	f7ff fcc5 	bl	8018134 <rcl_wait_set_add_client>
 80187aa:	b978      	cbnz	r0, 80187cc <rcl_action_wait_set_add_action_client+0x84>
 80187ac:	6821      	ldr	r1, [r4, #0]
 80187ae:	4628      	mov	r0, r5
 80187b0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80187b4:	3108      	adds	r1, #8
 80187b6:	f7ff fcbd 	bl	8018134 <rcl_wait_set_add_client>
 80187ba:	b938      	cbnz	r0, 80187cc <rcl_action_wait_set_add_action_client+0x84>
 80187bc:	6821      	ldr	r1, [r4, #0]
 80187be:	4628      	mov	r0, r5
 80187c0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80187c4:	310c      	adds	r1, #12
 80187c6:	f7ff f96d 	bl	8017aa4 <rcl_wait_set_add_subscription>
 80187ca:	b158      	cbz	r0, 80187e4 <rcl_action_wait_set_add_action_client+0x9c>
 80187cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80187d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187d4:	f7f8 f8c0 	bl	8010958 <rcutils_reset_error>
 80187d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80187dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80187de:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80187e2:	4770      	bx	lr
 80187e4:	6821      	ldr	r1, [r4, #0]
 80187e6:	4628      	mov	r0, r5
 80187e8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80187ec:	3110      	adds	r1, #16
 80187ee:	f7ff f959 	bl	8017aa4 <rcl_wait_set_add_subscription>
 80187f2:	2800      	cmp	r0, #0
 80187f4:	d1ea      	bne.n	80187cc <rcl_action_wait_set_add_action_client+0x84>
 80187f6:	b11f      	cbz	r7, 8018800 <rcl_action_wait_set_add_action_client+0xb8>
 80187f8:	6823      	ldr	r3, [r4, #0]
 80187fa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80187fe:	603b      	str	r3, [r7, #0]
 8018800:	2e00      	cmp	r6, #0
 8018802:	d0e3      	beq.n	80187cc <rcl_action_wait_set_add_action_client+0x84>
 8018804:	6823      	ldr	r3, [r4, #0]
 8018806:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801880a:	6033      	str	r3, [r6, #0]
 801880c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801880e:	bf00      	nop

08018810 <rcl_action_client_wait_set_get_entities_ready>:
 8018810:	2800      	cmp	r0, #0
 8018812:	f000 808d 	beq.w	8018930 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8018816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801881a:	460c      	mov	r4, r1
 801881c:	2900      	cmp	r1, #0
 801881e:	d077      	beq.n	8018910 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018820:	4605      	mov	r5, r0
 8018822:	6808      	ldr	r0, [r1, #0]
 8018824:	2800      	cmp	r0, #0
 8018826:	d073      	beq.n	8018910 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018828:	4616      	mov	r6, r2
 801882a:	461f      	mov	r7, r3
 801882c:	f7fe fb88 	bl	8016f40 <rcl_client_is_valid>
 8018830:	2800      	cmp	r0, #0
 8018832:	d071      	beq.n	8018918 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018834:	6820      	ldr	r0, [r4, #0]
 8018836:	3004      	adds	r0, #4
 8018838:	f7fe fb82 	bl	8016f40 <rcl_client_is_valid>
 801883c:	2800      	cmp	r0, #0
 801883e:	d06b      	beq.n	8018918 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018840:	6820      	ldr	r0, [r4, #0]
 8018842:	3008      	adds	r0, #8
 8018844:	f7fe fb7c 	bl	8016f40 <rcl_client_is_valid>
 8018848:	2800      	cmp	r0, #0
 801884a:	d065      	beq.n	8018918 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801884c:	6820      	ldr	r0, [r4, #0]
 801884e:	300c      	adds	r0, #12
 8018850:	f7f6 fd38 	bl	800f2c4 <rcl_subscription_is_valid>
 8018854:	2800      	cmp	r0, #0
 8018856:	d05f      	beq.n	8018918 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018858:	6820      	ldr	r0, [r4, #0]
 801885a:	3010      	adds	r0, #16
 801885c:	f7f6 fd32 	bl	800f2c4 <rcl_subscription_is_valid>
 8018860:	2800      	cmp	r0, #0
 8018862:	d059      	beq.n	8018918 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018864:	2e00      	cmp	r6, #0
 8018866:	d060      	beq.n	801892a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018868:	2f00      	cmp	r7, #0
 801886a:	d05e      	beq.n	801892a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801886c:	9b06      	ldr	r3, [sp, #24]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d05b      	beq.n	801892a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018872:	9b07      	ldr	r3, [sp, #28]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d058      	beq.n	801892a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018878:	9b08      	ldr	r3, [sp, #32]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d055      	beq.n	801892a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	686a      	ldr	r2, [r5, #4]
 8018882:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8018886:	428a      	cmp	r2, r1
 8018888:	d94c      	bls.n	8018924 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801888a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801888e:	4282      	cmp	r2, r0
 8018890:	d948      	bls.n	8018924 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018892:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8018896:	69ea      	ldr	r2, [r5, #28]
 8018898:	42a2      	cmp	r2, r4
 801889a:	d943      	bls.n	8018924 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801889c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80188a0:	4562      	cmp	r2, ip
 80188a2:	d93f      	bls.n	8018924 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80188a4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80188a8:	4572      	cmp	r2, lr
 80188aa:	d93b      	bls.n	8018924 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80188ac:	69aa      	ldr	r2, [r5, #24]
 80188ae:	682d      	ldr	r5, [r5, #0]
 80188b0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80188b4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80188b8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80188bc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80188c0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80188c4:	f103 0c0c 	add.w	ip, r3, #12
 80188c8:	eba5 050c 	sub.w	r5, r5, ip
 80188cc:	fab5 f585 	clz	r5, r5
 80188d0:	096d      	lsrs	r5, r5, #5
 80188d2:	7035      	strb	r5, [r6, #0]
 80188d4:	f103 0510 	add.w	r5, r3, #16
 80188d8:	1b64      	subs	r4, r4, r5
 80188da:	fab4 f484 	clz	r4, r4
 80188de:	0964      	lsrs	r4, r4, #5
 80188e0:	703c      	strb	r4, [r7, #0]
 80188e2:	eba3 0008 	sub.w	r0, r3, r8
 80188e6:	1d1c      	adds	r4, r3, #4
 80188e8:	3308      	adds	r3, #8
 80188ea:	1ad3      	subs	r3, r2, r3
 80188ec:	fab0 f080 	clz	r0, r0
 80188f0:	9a06      	ldr	r2, [sp, #24]
 80188f2:	0940      	lsrs	r0, r0, #5
 80188f4:	1b09      	subs	r1, r1, r4
 80188f6:	7010      	strb	r0, [r2, #0]
 80188f8:	fab1 f181 	clz	r1, r1
 80188fc:	9a07      	ldr	r2, [sp, #28]
 80188fe:	0949      	lsrs	r1, r1, #5
 8018900:	7011      	strb	r1, [r2, #0]
 8018902:	fab3 f383 	clz	r3, r3
 8018906:	9a08      	ldr	r2, [sp, #32]
 8018908:	095b      	lsrs	r3, r3, #5
 801890a:	2000      	movs	r0, #0
 801890c:	7013      	strb	r3, [r2, #0]
 801890e:	e001      	b.n	8018914 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8018910:	f640 0036 	movw	r0, #2102	@ 0x836
 8018914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018918:	f7f8 f81e 	bl	8010958 <rcutils_reset_error>
 801891c:	f640 0036 	movw	r0, #2102	@ 0x836
 8018920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018924:	2001      	movs	r0, #1
 8018926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801892a:	200b      	movs	r0, #11
 801892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018930:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018934:	4770      	bx	lr
 8018936:	bf00      	nop

08018938 <rcl_action_take_goal_request>:
 8018938:	2800      	cmp	r0, #0
 801893a:	d039      	beq.n	80189b0 <rcl_action_take_goal_request+0x78>
 801893c:	b570      	push	{r4, r5, r6, lr}
 801893e:	4604      	mov	r4, r0
 8018940:	6800      	ldr	r0, [r0, #0]
 8018942:	b380      	cbz	r0, 80189a6 <rcl_action_take_goal_request+0x6e>
 8018944:	460d      	mov	r5, r1
 8018946:	4616      	mov	r6, r2
 8018948:	f7fe fe5a 	bl	8017600 <rcl_service_is_valid>
 801894c:	b330      	cbz	r0, 801899c <rcl_action_take_goal_request+0x64>
 801894e:	6820      	ldr	r0, [r4, #0]
 8018950:	3004      	adds	r0, #4
 8018952:	f7fe fe55 	bl	8017600 <rcl_service_is_valid>
 8018956:	b308      	cbz	r0, 801899c <rcl_action_take_goal_request+0x64>
 8018958:	6820      	ldr	r0, [r4, #0]
 801895a:	3008      	adds	r0, #8
 801895c:	f7fe fe50 	bl	8017600 <rcl_service_is_valid>
 8018960:	b1e0      	cbz	r0, 801899c <rcl_action_take_goal_request+0x64>
 8018962:	6820      	ldr	r0, [r4, #0]
 8018964:	300c      	adds	r0, #12
 8018966:	f7f6 fafd 	bl	800ef64 <rcl_publisher_is_valid>
 801896a:	b1b8      	cbz	r0, 801899c <rcl_action_take_goal_request+0x64>
 801896c:	6820      	ldr	r0, [r4, #0]
 801896e:	3010      	adds	r0, #16
 8018970:	f7f6 faf8 	bl	800ef64 <rcl_publisher_is_valid>
 8018974:	b190      	cbz	r0, 801899c <rcl_action_take_goal_request+0x64>
 8018976:	b1cd      	cbz	r5, 80189ac <rcl_action_take_goal_request+0x74>
 8018978:	b1c6      	cbz	r6, 80189ac <rcl_action_take_goal_request+0x74>
 801897a:	6820      	ldr	r0, [r4, #0]
 801897c:	4632      	mov	r2, r6
 801897e:	4629      	mov	r1, r5
 8018980:	f7fe fde6 	bl	8017550 <rcl_take_request>
 8018984:	b148      	cbz	r0, 801899a <rcl_action_take_goal_request+0x62>
 8018986:	280a      	cmp	r0, #10
 8018988:	d007      	beq.n	801899a <rcl_action_take_goal_request+0x62>
 801898a:	f240 2259 	movw	r2, #601	@ 0x259
 801898e:	f640 0399 	movw	r3, #2201	@ 0x899
 8018992:	4290      	cmp	r0, r2
 8018994:	bf0c      	ite	eq
 8018996:	4618      	moveq	r0, r3
 8018998:	2001      	movne	r0, #1
 801899a:	bd70      	pop	{r4, r5, r6, pc}
 801899c:	f7f7 ffdc 	bl	8010958 <rcutils_reset_error>
 80189a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80189a4:	bd70      	pop	{r4, r5, r6, pc}
 80189a6:	f640 0098 	movw	r0, #2200	@ 0x898
 80189aa:	bd70      	pop	{r4, r5, r6, pc}
 80189ac:	200b      	movs	r0, #11
 80189ae:	bd70      	pop	{r4, r5, r6, pc}
 80189b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80189b4:	4770      	bx	lr
 80189b6:	bf00      	nop

080189b8 <rcl_action_send_goal_response>:
 80189b8:	b390      	cbz	r0, 8018a20 <rcl_action_send_goal_response+0x68>
 80189ba:	b570      	push	{r4, r5, r6, lr}
 80189bc:	4604      	mov	r4, r0
 80189be:	6800      	ldr	r0, [r0, #0]
 80189c0:	b348      	cbz	r0, 8018a16 <rcl_action_send_goal_response+0x5e>
 80189c2:	460d      	mov	r5, r1
 80189c4:	4616      	mov	r6, r2
 80189c6:	f7fe fe1b 	bl	8017600 <rcl_service_is_valid>
 80189ca:	b1f8      	cbz	r0, 8018a0c <rcl_action_send_goal_response+0x54>
 80189cc:	6820      	ldr	r0, [r4, #0]
 80189ce:	3004      	adds	r0, #4
 80189d0:	f7fe fe16 	bl	8017600 <rcl_service_is_valid>
 80189d4:	b1d0      	cbz	r0, 8018a0c <rcl_action_send_goal_response+0x54>
 80189d6:	6820      	ldr	r0, [r4, #0]
 80189d8:	3008      	adds	r0, #8
 80189da:	f7fe fe11 	bl	8017600 <rcl_service_is_valid>
 80189de:	b1a8      	cbz	r0, 8018a0c <rcl_action_send_goal_response+0x54>
 80189e0:	6820      	ldr	r0, [r4, #0]
 80189e2:	300c      	adds	r0, #12
 80189e4:	f7f6 fabe 	bl	800ef64 <rcl_publisher_is_valid>
 80189e8:	b180      	cbz	r0, 8018a0c <rcl_action_send_goal_response+0x54>
 80189ea:	6820      	ldr	r0, [r4, #0]
 80189ec:	3010      	adds	r0, #16
 80189ee:	f7f6 fab9 	bl	800ef64 <rcl_publisher_is_valid>
 80189f2:	b158      	cbz	r0, 8018a0c <rcl_action_send_goal_response+0x54>
 80189f4:	b195      	cbz	r5, 8018a1c <rcl_action_send_goal_response+0x64>
 80189f6:	b18e      	cbz	r6, 8018a1c <rcl_action_send_goal_response+0x64>
 80189f8:	6820      	ldr	r0, [r4, #0]
 80189fa:	4632      	mov	r2, r6
 80189fc:	4629      	mov	r1, r5
 80189fe:	f7fe fde7 	bl	80175d0 <rcl_send_response>
 8018a02:	b110      	cbz	r0, 8018a0a <rcl_action_send_goal_response+0x52>
 8018a04:	2802      	cmp	r0, #2
 8018a06:	bf18      	it	ne
 8018a08:	2001      	movne	r0, #1
 8018a0a:	bd70      	pop	{r4, r5, r6, pc}
 8018a0c:	f7f7 ffa4 	bl	8010958 <rcutils_reset_error>
 8018a10:	f640 0098 	movw	r0, #2200	@ 0x898
 8018a14:	bd70      	pop	{r4, r5, r6, pc}
 8018a16:	f640 0098 	movw	r0, #2200	@ 0x898
 8018a1a:	bd70      	pop	{r4, r5, r6, pc}
 8018a1c:	200b      	movs	r0, #11
 8018a1e:	bd70      	pop	{r4, r5, r6, pc}
 8018a20:	f640 0098 	movw	r0, #2200	@ 0x898
 8018a24:	4770      	bx	lr
 8018a26:	bf00      	nop

08018a28 <rcl_action_take_result_request>:
 8018a28:	2800      	cmp	r0, #0
 8018a2a:	d03a      	beq.n	8018aa2 <rcl_action_take_result_request+0x7a>
 8018a2c:	b570      	push	{r4, r5, r6, lr}
 8018a2e:	4604      	mov	r4, r0
 8018a30:	6800      	ldr	r0, [r0, #0]
 8018a32:	b388      	cbz	r0, 8018a98 <rcl_action_take_result_request+0x70>
 8018a34:	460d      	mov	r5, r1
 8018a36:	4616      	mov	r6, r2
 8018a38:	f7fe fde2 	bl	8017600 <rcl_service_is_valid>
 8018a3c:	b338      	cbz	r0, 8018a8e <rcl_action_take_result_request+0x66>
 8018a3e:	6820      	ldr	r0, [r4, #0]
 8018a40:	3004      	adds	r0, #4
 8018a42:	f7fe fddd 	bl	8017600 <rcl_service_is_valid>
 8018a46:	b310      	cbz	r0, 8018a8e <rcl_action_take_result_request+0x66>
 8018a48:	6820      	ldr	r0, [r4, #0]
 8018a4a:	3008      	adds	r0, #8
 8018a4c:	f7fe fdd8 	bl	8017600 <rcl_service_is_valid>
 8018a50:	b1e8      	cbz	r0, 8018a8e <rcl_action_take_result_request+0x66>
 8018a52:	6820      	ldr	r0, [r4, #0]
 8018a54:	300c      	adds	r0, #12
 8018a56:	f7f6 fa85 	bl	800ef64 <rcl_publisher_is_valid>
 8018a5a:	b1c0      	cbz	r0, 8018a8e <rcl_action_take_result_request+0x66>
 8018a5c:	6820      	ldr	r0, [r4, #0]
 8018a5e:	3010      	adds	r0, #16
 8018a60:	f7f6 fa80 	bl	800ef64 <rcl_publisher_is_valid>
 8018a64:	b198      	cbz	r0, 8018a8e <rcl_action_take_result_request+0x66>
 8018a66:	b1d5      	cbz	r5, 8018a9e <rcl_action_take_result_request+0x76>
 8018a68:	b1ce      	cbz	r6, 8018a9e <rcl_action_take_result_request+0x76>
 8018a6a:	6820      	ldr	r0, [r4, #0]
 8018a6c:	4632      	mov	r2, r6
 8018a6e:	4629      	mov	r1, r5
 8018a70:	3008      	adds	r0, #8
 8018a72:	f7fe fd6d 	bl	8017550 <rcl_take_request>
 8018a76:	b148      	cbz	r0, 8018a8c <rcl_action_take_result_request+0x64>
 8018a78:	280a      	cmp	r0, #10
 8018a7a:	d007      	beq.n	8018a8c <rcl_action_take_result_request+0x64>
 8018a7c:	f240 2259 	movw	r2, #601	@ 0x259
 8018a80:	f640 0399 	movw	r3, #2201	@ 0x899
 8018a84:	4290      	cmp	r0, r2
 8018a86:	bf0c      	ite	eq
 8018a88:	4618      	moveq	r0, r3
 8018a8a:	2001      	movne	r0, #1
 8018a8c:	bd70      	pop	{r4, r5, r6, pc}
 8018a8e:	f7f7 ff63 	bl	8010958 <rcutils_reset_error>
 8018a92:	f640 0098 	movw	r0, #2200	@ 0x898
 8018a96:	bd70      	pop	{r4, r5, r6, pc}
 8018a98:	f640 0098 	movw	r0, #2200	@ 0x898
 8018a9c:	bd70      	pop	{r4, r5, r6, pc}
 8018a9e:	200b      	movs	r0, #11
 8018aa0:	bd70      	pop	{r4, r5, r6, pc}
 8018aa2:	f640 0098 	movw	r0, #2200	@ 0x898
 8018aa6:	4770      	bx	lr

08018aa8 <rcl_action_take_cancel_request>:
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	d03a      	beq.n	8018b22 <rcl_action_take_cancel_request+0x7a>
 8018aac:	b570      	push	{r4, r5, r6, lr}
 8018aae:	4604      	mov	r4, r0
 8018ab0:	6800      	ldr	r0, [r0, #0]
 8018ab2:	b388      	cbz	r0, 8018b18 <rcl_action_take_cancel_request+0x70>
 8018ab4:	460d      	mov	r5, r1
 8018ab6:	4616      	mov	r6, r2
 8018ab8:	f7fe fda2 	bl	8017600 <rcl_service_is_valid>
 8018abc:	b338      	cbz	r0, 8018b0e <rcl_action_take_cancel_request+0x66>
 8018abe:	6820      	ldr	r0, [r4, #0]
 8018ac0:	3004      	adds	r0, #4
 8018ac2:	f7fe fd9d 	bl	8017600 <rcl_service_is_valid>
 8018ac6:	b310      	cbz	r0, 8018b0e <rcl_action_take_cancel_request+0x66>
 8018ac8:	6820      	ldr	r0, [r4, #0]
 8018aca:	3008      	adds	r0, #8
 8018acc:	f7fe fd98 	bl	8017600 <rcl_service_is_valid>
 8018ad0:	b1e8      	cbz	r0, 8018b0e <rcl_action_take_cancel_request+0x66>
 8018ad2:	6820      	ldr	r0, [r4, #0]
 8018ad4:	300c      	adds	r0, #12
 8018ad6:	f7f6 fa45 	bl	800ef64 <rcl_publisher_is_valid>
 8018ada:	b1c0      	cbz	r0, 8018b0e <rcl_action_take_cancel_request+0x66>
 8018adc:	6820      	ldr	r0, [r4, #0]
 8018ade:	3010      	adds	r0, #16
 8018ae0:	f7f6 fa40 	bl	800ef64 <rcl_publisher_is_valid>
 8018ae4:	b198      	cbz	r0, 8018b0e <rcl_action_take_cancel_request+0x66>
 8018ae6:	b1d5      	cbz	r5, 8018b1e <rcl_action_take_cancel_request+0x76>
 8018ae8:	b1ce      	cbz	r6, 8018b1e <rcl_action_take_cancel_request+0x76>
 8018aea:	6820      	ldr	r0, [r4, #0]
 8018aec:	4632      	mov	r2, r6
 8018aee:	4629      	mov	r1, r5
 8018af0:	3004      	adds	r0, #4
 8018af2:	f7fe fd2d 	bl	8017550 <rcl_take_request>
 8018af6:	b148      	cbz	r0, 8018b0c <rcl_action_take_cancel_request+0x64>
 8018af8:	280a      	cmp	r0, #10
 8018afa:	d007      	beq.n	8018b0c <rcl_action_take_cancel_request+0x64>
 8018afc:	f240 2259 	movw	r2, #601	@ 0x259
 8018b00:	f640 0399 	movw	r3, #2201	@ 0x899
 8018b04:	4290      	cmp	r0, r2
 8018b06:	bf0c      	ite	eq
 8018b08:	4618      	moveq	r0, r3
 8018b0a:	2001      	movne	r0, #1
 8018b0c:	bd70      	pop	{r4, r5, r6, pc}
 8018b0e:	f7f7 ff23 	bl	8010958 <rcutils_reset_error>
 8018b12:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b16:	bd70      	pop	{r4, r5, r6, pc}
 8018b18:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b1c:	bd70      	pop	{r4, r5, r6, pc}
 8018b1e:	200b      	movs	r0, #11
 8018b20:	bd70      	pop	{r4, r5, r6, pc}
 8018b22:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b26:	4770      	bx	lr

08018b28 <rcl_action_send_cancel_response>:
 8018b28:	b398      	cbz	r0, 8018b92 <rcl_action_send_cancel_response+0x6a>
 8018b2a:	b570      	push	{r4, r5, r6, lr}
 8018b2c:	4604      	mov	r4, r0
 8018b2e:	6800      	ldr	r0, [r0, #0]
 8018b30:	b350      	cbz	r0, 8018b88 <rcl_action_send_cancel_response+0x60>
 8018b32:	460d      	mov	r5, r1
 8018b34:	4616      	mov	r6, r2
 8018b36:	f7fe fd63 	bl	8017600 <rcl_service_is_valid>
 8018b3a:	b300      	cbz	r0, 8018b7e <rcl_action_send_cancel_response+0x56>
 8018b3c:	6820      	ldr	r0, [r4, #0]
 8018b3e:	3004      	adds	r0, #4
 8018b40:	f7fe fd5e 	bl	8017600 <rcl_service_is_valid>
 8018b44:	b1d8      	cbz	r0, 8018b7e <rcl_action_send_cancel_response+0x56>
 8018b46:	6820      	ldr	r0, [r4, #0]
 8018b48:	3008      	adds	r0, #8
 8018b4a:	f7fe fd59 	bl	8017600 <rcl_service_is_valid>
 8018b4e:	b1b0      	cbz	r0, 8018b7e <rcl_action_send_cancel_response+0x56>
 8018b50:	6820      	ldr	r0, [r4, #0]
 8018b52:	300c      	adds	r0, #12
 8018b54:	f7f6 fa06 	bl	800ef64 <rcl_publisher_is_valid>
 8018b58:	b188      	cbz	r0, 8018b7e <rcl_action_send_cancel_response+0x56>
 8018b5a:	6820      	ldr	r0, [r4, #0]
 8018b5c:	3010      	adds	r0, #16
 8018b5e:	f7f6 fa01 	bl	800ef64 <rcl_publisher_is_valid>
 8018b62:	b160      	cbz	r0, 8018b7e <rcl_action_send_cancel_response+0x56>
 8018b64:	b19d      	cbz	r5, 8018b8e <rcl_action_send_cancel_response+0x66>
 8018b66:	b196      	cbz	r6, 8018b8e <rcl_action_send_cancel_response+0x66>
 8018b68:	6820      	ldr	r0, [r4, #0]
 8018b6a:	4632      	mov	r2, r6
 8018b6c:	4629      	mov	r1, r5
 8018b6e:	3004      	adds	r0, #4
 8018b70:	f7fe fd2e 	bl	80175d0 <rcl_send_response>
 8018b74:	b110      	cbz	r0, 8018b7c <rcl_action_send_cancel_response+0x54>
 8018b76:	2802      	cmp	r0, #2
 8018b78:	bf18      	it	ne
 8018b7a:	2001      	movne	r0, #1
 8018b7c:	bd70      	pop	{r4, r5, r6, pc}
 8018b7e:	f7f7 feeb 	bl	8010958 <rcutils_reset_error>
 8018b82:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b86:	bd70      	pop	{r4, r5, r6, pc}
 8018b88:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b8c:	bd70      	pop	{r4, r5, r6, pc}
 8018b8e:	200b      	movs	r0, #11
 8018b90:	bd70      	pop	{r4, r5, r6, pc}
 8018b92:	f640 0098 	movw	r0, #2200	@ 0x898
 8018b96:	4770      	bx	lr

08018b98 <rcl_action_wait_set_add_action_server>:
 8018b98:	2800      	cmp	r0, #0
 8018b9a:	d04d      	beq.n	8018c38 <rcl_action_wait_set_add_action_server+0xa0>
 8018b9c:	b570      	push	{r4, r5, r6, lr}
 8018b9e:	460c      	mov	r4, r1
 8018ba0:	b159      	cbz	r1, 8018bba <rcl_action_wait_set_add_action_server+0x22>
 8018ba2:	4605      	mov	r5, r0
 8018ba4:	6808      	ldr	r0, [r1, #0]
 8018ba6:	b140      	cbz	r0, 8018bba <rcl_action_wait_set_add_action_server+0x22>
 8018ba8:	4616      	mov	r6, r2
 8018baa:	f7fe fd29 	bl	8017600 <rcl_service_is_valid>
 8018bae:	b120      	cbz	r0, 8018bba <rcl_action_wait_set_add_action_server+0x22>
 8018bb0:	6820      	ldr	r0, [r4, #0]
 8018bb2:	3004      	adds	r0, #4
 8018bb4:	f7fe fd24 	bl	8017600 <rcl_service_is_valid>
 8018bb8:	b910      	cbnz	r0, 8018bc0 <rcl_action_wait_set_add_action_server+0x28>
 8018bba:	f640 0098 	movw	r0, #2200	@ 0x898
 8018bbe:	bd70      	pop	{r4, r5, r6, pc}
 8018bc0:	6820      	ldr	r0, [r4, #0]
 8018bc2:	3008      	adds	r0, #8
 8018bc4:	f7fe fd1c 	bl	8017600 <rcl_service_is_valid>
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d0f6      	beq.n	8018bba <rcl_action_wait_set_add_action_server+0x22>
 8018bcc:	6820      	ldr	r0, [r4, #0]
 8018bce:	300c      	adds	r0, #12
 8018bd0:	f7f6 f9e0 	bl	800ef94 <rcl_publisher_is_valid_except_context>
 8018bd4:	2800      	cmp	r0, #0
 8018bd6:	d0f0      	beq.n	8018bba <rcl_action_wait_set_add_action_server+0x22>
 8018bd8:	6820      	ldr	r0, [r4, #0]
 8018bda:	3010      	adds	r0, #16
 8018bdc:	f7f6 f9da 	bl	800ef94 <rcl_publisher_is_valid_except_context>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d0ea      	beq.n	8018bba <rcl_action_wait_set_add_action_server+0x22>
 8018be4:	6821      	ldr	r1, [r4, #0]
 8018be6:	4628      	mov	r0, r5
 8018be8:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8018bec:	f7ff face 	bl	801818c <rcl_wait_set_add_service>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d1e4      	bne.n	8018bbe <rcl_action_wait_set_add_action_server+0x26>
 8018bf4:	6821      	ldr	r1, [r4, #0]
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8018bfc:	3104      	adds	r1, #4
 8018bfe:	f7ff fac5 	bl	801818c <rcl_wait_set_add_service>
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d1db      	bne.n	8018bbe <rcl_action_wait_set_add_action_server+0x26>
 8018c06:	6821      	ldr	r1, [r4, #0]
 8018c08:	4628      	mov	r0, r5
 8018c0a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8018c0e:	3108      	adds	r1, #8
 8018c10:	f7ff fabc 	bl	801818c <rcl_wait_set_add_service>
 8018c14:	2800      	cmp	r0, #0
 8018c16:	d1d2      	bne.n	8018bbe <rcl_action_wait_set_add_action_server+0x26>
 8018c18:	6821      	ldr	r1, [r4, #0]
 8018c1a:	4628      	mov	r0, r5
 8018c1c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018c20:	3114      	adds	r1, #20
 8018c22:	f7ff fa57 	bl	80180d4 <rcl_wait_set_add_timer>
 8018c26:	2800      	cmp	r0, #0
 8018c28:	d1c9      	bne.n	8018bbe <rcl_action_wait_set_add_action_server+0x26>
 8018c2a:	2e00      	cmp	r6, #0
 8018c2c:	d0c7      	beq.n	8018bbe <rcl_action_wait_set_add_action_server+0x26>
 8018c2e:	6823      	ldr	r3, [r4, #0]
 8018c30:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8018c34:	6033      	str	r3, [r6, #0]
 8018c36:	bd70      	pop	{r4, r5, r6, pc}
 8018c38:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018c3c:	4770      	bx	lr
 8018c3e:	bf00      	nop

08018c40 <rcl_action_server_wait_set_get_entities_ready>:
 8018c40:	2800      	cmp	r0, #0
 8018c42:	d05a      	beq.n	8018cfa <rcl_action_server_wait_set_get_entities_ready+0xba>
 8018c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c46:	460c      	mov	r4, r1
 8018c48:	b161      	cbz	r1, 8018c64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018c4a:	4605      	mov	r5, r0
 8018c4c:	6808      	ldr	r0, [r1, #0]
 8018c4e:	b148      	cbz	r0, 8018c64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018c50:	4616      	mov	r6, r2
 8018c52:	461f      	mov	r7, r3
 8018c54:	f7fe fcd4 	bl	8017600 <rcl_service_is_valid>
 8018c58:	b120      	cbz	r0, 8018c64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018c5a:	6820      	ldr	r0, [r4, #0]
 8018c5c:	3004      	adds	r0, #4
 8018c5e:	f7fe fccf 	bl	8017600 <rcl_service_is_valid>
 8018c62:	b910      	cbnz	r0, 8018c6a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8018c64:	f640 0098 	movw	r0, #2200	@ 0x898
 8018c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c6a:	6820      	ldr	r0, [r4, #0]
 8018c6c:	3008      	adds	r0, #8
 8018c6e:	f7fe fcc7 	bl	8017600 <rcl_service_is_valid>
 8018c72:	2800      	cmp	r0, #0
 8018c74:	d0f6      	beq.n	8018c64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018c76:	6820      	ldr	r0, [r4, #0]
 8018c78:	300c      	adds	r0, #12
 8018c7a:	f7f6 f98b 	bl	800ef94 <rcl_publisher_is_valid_except_context>
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	d0f0      	beq.n	8018c64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018c82:	6820      	ldr	r0, [r4, #0]
 8018c84:	3010      	adds	r0, #16
 8018c86:	f7f6 f985 	bl	800ef94 <rcl_publisher_is_valid_except_context>
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	d0ea      	beq.n	8018c64 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018c8e:	b3be      	cbz	r6, 8018d00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018c90:	b3b7      	cbz	r7, 8018d00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018c92:	9b06      	ldr	r3, [sp, #24]
 8018c94:	b3a3      	cbz	r3, 8018d00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018c96:	9b07      	ldr	r3, [sp, #28]
 8018c98:	b393      	cbz	r3, 8018d00 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018c9a:	6821      	ldr	r1, [r4, #0]
 8018c9c:	692a      	ldr	r2, [r5, #16]
 8018c9e:	6a2c      	ldr	r4, [r5, #32]
 8018ca0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8018ca4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8018ca8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8018cac:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8018cb0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8018cb4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018cb8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018cbc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8018cc0:	1a64      	subs	r4, r4, r1
 8018cc2:	fab4 f484 	clz	r4, r4
 8018cc6:	0964      	lsrs	r4, r4, #5
 8018cc8:	7034      	strb	r4, [r6, #0]
 8018cca:	1d0c      	adds	r4, r1, #4
 8018ccc:	1b1b      	subs	r3, r3, r4
 8018cce:	fab3 f383 	clz	r3, r3
 8018cd2:	095b      	lsrs	r3, r3, #5
 8018cd4:	f101 0408 	add.w	r4, r1, #8
 8018cd8:	703b      	strb	r3, [r7, #0]
 8018cda:	f101 0314 	add.w	r3, r1, #20
 8018cde:	1b01      	subs	r1, r0, r4
 8018ce0:	1ad3      	subs	r3, r2, r3
 8018ce2:	fab1 f181 	clz	r1, r1
 8018ce6:	9a06      	ldr	r2, [sp, #24]
 8018ce8:	0949      	lsrs	r1, r1, #5
 8018cea:	7011      	strb	r1, [r2, #0]
 8018cec:	fab3 f383 	clz	r3, r3
 8018cf0:	9a07      	ldr	r2, [sp, #28]
 8018cf2:	095b      	lsrs	r3, r3, #5
 8018cf4:	2000      	movs	r0, #0
 8018cf6:	7013      	strb	r3, [r2, #0]
 8018cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cfa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018cfe:	4770      	bx	lr
 8018d00:	200b      	movs	r0, #11
 8018d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018d04 <_execute_event_handler>:
 8018d04:	2002      	movs	r0, #2
 8018d06:	4770      	bx	lr

08018d08 <_cancel_goal_event_handler>:
 8018d08:	2003      	movs	r0, #3
 8018d0a:	4770      	bx	lr

08018d0c <_succeed_event_handler>:
 8018d0c:	2004      	movs	r0, #4
 8018d0e:	4770      	bx	lr

08018d10 <_abort_event_handler>:
 8018d10:	2006      	movs	r0, #6
 8018d12:	4770      	bx	lr

08018d14 <_canceled_event_handler>:
 8018d14:	2005      	movs	r0, #5
 8018d16:	4770      	bx	lr

08018d18 <rcl_action_transition_goal_state>:
 8018d18:	b2c2      	uxtb	r2, r0
 8018d1a:	2a06      	cmp	r2, #6
 8018d1c:	d80c      	bhi.n	8018d38 <rcl_action_transition_goal_state+0x20>
 8018d1e:	2904      	cmp	r1, #4
 8018d20:	d80a      	bhi.n	8018d38 <rcl_action_transition_goal_state+0x20>
 8018d22:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8018d26:	b410      	push	{r4}
 8018d28:	1853      	adds	r3, r2, r1
 8018d2a:	4c06      	ldr	r4, [pc, #24]	@ (8018d44 <rcl_action_transition_goal_state+0x2c>)
 8018d2c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018d30:	b123      	cbz	r3, 8018d3c <rcl_action_transition_goal_state+0x24>
 8018d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d36:	4718      	bx	r3
 8018d38:	2000      	movs	r0, #0
 8018d3a:	4770      	bx	lr
 8018d3c:	2000      	movs	r0, #0
 8018d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d42:	4770      	bx	lr
 8018d44:	0801e718 	.word	0x0801e718

08018d48 <rcl_action_get_zero_initialized_cancel_response>:
 8018d48:	b510      	push	{r4, lr}
 8018d4a:	4c07      	ldr	r4, [pc, #28]	@ (8018d68 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018d4c:	4686      	mov	lr, r0
 8018d4e:	4684      	mov	ip, r0
 8018d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d5c:	6823      	ldr	r3, [r4, #0]
 8018d5e:	f8cc 3000 	str.w	r3, [ip]
 8018d62:	4670      	mov	r0, lr
 8018d64:	bd10      	pop	{r4, pc}
 8018d66:	bf00      	nop
 8018d68:	0801e7a4 	.word	0x0801e7a4

08018d6c <rclc_action_send_result_request>:
 8018d6c:	b1d0      	cbz	r0, 8018da4 <rclc_action_send_result_request+0x38>
 8018d6e:	b500      	push	{lr}
 8018d70:	4684      	mov	ip, r0
 8018d72:	b087      	sub	sp, #28
 8018d74:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018d78:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018d7c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018d80:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018d84:	f10d 0e08 	add.w	lr, sp, #8
 8018d88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018d8c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018d90:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8018d94:	a902      	add	r1, sp, #8
 8018d96:	3010      	adds	r0, #16
 8018d98:	f7ff fbda 	bl	8018550 <rcl_action_send_result_request>
 8018d9c:	b920      	cbnz	r0, 8018da8 <rclc_action_send_result_request+0x3c>
 8018d9e:	b007      	add	sp, #28
 8018da0:	f85d fb04 	ldr.w	pc, [sp], #4
 8018da4:	200b      	movs	r0, #11
 8018da6:	4770      	bx	lr
 8018da8:	9001      	str	r0, [sp, #4]
 8018daa:	f7f7 fdd5 	bl	8010958 <rcutils_reset_error>
 8018dae:	9801      	ldr	r0, [sp, #4]
 8018db0:	b007      	add	sp, #28
 8018db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8018db6:	bf00      	nop

08018db8 <rclc_action_take_goal_handle>:
 8018db8:	b160      	cbz	r0, 8018dd4 <rclc_action_take_goal_handle+0x1c>
 8018dba:	6883      	ldr	r3, [r0, #8]
 8018dbc:	b143      	cbz	r3, 8018dd0 <rclc_action_take_goal_handle+0x18>
 8018dbe:	6819      	ldr	r1, [r3, #0]
 8018dc0:	6081      	str	r1, [r0, #8]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	721a      	strb	r2, [r3, #8]
 8018dc6:	68c1      	ldr	r1, [r0, #12]
 8018dc8:	6019      	str	r1, [r3, #0]
 8018dca:	621a      	str	r2, [r3, #32]
 8018dcc:	849a      	strh	r2, [r3, #36]	@ 0x24
 8018dce:	60c3      	str	r3, [r0, #12]
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	4770      	bx	lr
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	e7fb      	b.n	8018dd0 <rclc_action_take_goal_handle+0x18>

08018dd8 <rclc_action_remove_used_goal_handle>:
 8018dd8:	b180      	cbz	r0, 8018dfc <rclc_action_remove_used_goal_handle+0x24>
 8018dda:	b179      	cbz	r1, 8018dfc <rclc_action_remove_used_goal_handle+0x24>
 8018ddc:	68c3      	ldr	r3, [r0, #12]
 8018dde:	4299      	cmp	r1, r3
 8018de0:	d00d      	beq.n	8018dfe <rclc_action_remove_used_goal_handle+0x26>
 8018de2:	b12b      	cbz	r3, 8018df0 <rclc_action_remove_used_goal_handle+0x18>
 8018de4:	681a      	ldr	r2, [r3, #0]
 8018de6:	4291      	cmp	r1, r2
 8018de8:	d003      	beq.n	8018df2 <rclc_action_remove_used_goal_handle+0x1a>
 8018dea:	4613      	mov	r3, r2
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d1f9      	bne.n	8018de4 <rclc_action_remove_used_goal_handle+0xc>
 8018df0:	4770      	bx	lr
 8018df2:	680a      	ldr	r2, [r1, #0]
 8018df4:	601a      	str	r2, [r3, #0]
 8018df6:	6883      	ldr	r3, [r0, #8]
 8018df8:	600b      	str	r3, [r1, #0]
 8018dfa:	6081      	str	r1, [r0, #8]
 8018dfc:	4770      	bx	lr
 8018dfe:	680b      	ldr	r3, [r1, #0]
 8018e00:	60c3      	str	r3, [r0, #12]
 8018e02:	e7f8      	b.n	8018df6 <rclc_action_remove_used_goal_handle+0x1e>

08018e04 <rclc_action_find_goal_handle_by_uuid>:
 8018e04:	b538      	push	{r3, r4, r5, lr}
 8018e06:	b180      	cbz	r0, 8018e2a <rclc_action_find_goal_handle_by_uuid+0x26>
 8018e08:	460d      	mov	r5, r1
 8018e0a:	b181      	cbz	r1, 8018e2e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8018e0c:	68c4      	ldr	r4, [r0, #12]
 8018e0e:	b914      	cbnz	r4, 8018e16 <rclc_action_find_goal_handle_by_uuid+0x12>
 8018e10:	e009      	b.n	8018e26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018e12:	6824      	ldr	r4, [r4, #0]
 8018e14:	b13c      	cbz	r4, 8018e26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018e16:	f104 0009 	add.w	r0, r4, #9
 8018e1a:	2210      	movs	r2, #16
 8018e1c:	4629      	mov	r1, r5
 8018e1e:	f003 fd63 	bl	801c8e8 <memcmp>
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d1f5      	bne.n	8018e12 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018e26:	4620      	mov	r0, r4
 8018e28:	bd38      	pop	{r3, r4, r5, pc}
 8018e2a:	4604      	mov	r4, r0
 8018e2c:	e7fb      	b.n	8018e26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018e2e:	460c      	mov	r4, r1
 8018e30:	e7f9      	b.n	8018e26 <rclc_action_find_goal_handle_by_uuid+0x22>
 8018e32:	bf00      	nop

08018e34 <rclc_action_find_first_handle_by_status>:
 8018e34:	b140      	cbz	r0, 8018e48 <rclc_action_find_first_handle_by_status+0x14>
 8018e36:	68c0      	ldr	r0, [r0, #12]
 8018e38:	b910      	cbnz	r0, 8018e40 <rclc_action_find_first_handle_by_status+0xc>
 8018e3a:	e005      	b.n	8018e48 <rclc_action_find_first_handle_by_status+0x14>
 8018e3c:	6800      	ldr	r0, [r0, #0]
 8018e3e:	b118      	cbz	r0, 8018e48 <rclc_action_find_first_handle_by_status+0x14>
 8018e40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018e44:	428b      	cmp	r3, r1
 8018e46:	d1f9      	bne.n	8018e3c <rclc_action_find_first_handle_by_status+0x8>
 8018e48:	4770      	bx	lr
 8018e4a:	bf00      	nop

08018e4c <rclc_action_find_first_terminated_handle>:
 8018e4c:	b140      	cbz	r0, 8018e60 <rclc_action_find_first_terminated_handle+0x14>
 8018e4e:	68c0      	ldr	r0, [r0, #12]
 8018e50:	b910      	cbnz	r0, 8018e58 <rclc_action_find_first_terminated_handle+0xc>
 8018e52:	e005      	b.n	8018e60 <rclc_action_find_first_terminated_handle+0x14>
 8018e54:	6800      	ldr	r0, [r0, #0]
 8018e56:	b118      	cbz	r0, 8018e60 <rclc_action_find_first_terminated_handle+0x14>
 8018e58:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018e5c:	2b03      	cmp	r3, #3
 8018e5e:	ddf9      	ble.n	8018e54 <rclc_action_find_first_terminated_handle+0x8>
 8018e60:	4770      	bx	lr
 8018e62:	bf00      	nop

08018e64 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018e64:	b170      	cbz	r0, 8018e84 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018e66:	68c0      	ldr	r0, [r0, #12]
 8018e68:	b160      	cbz	r0, 8018e84 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018e6a:	b410      	push	{r4}
 8018e6c:	e001      	b.n	8018e72 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018e6e:	6800      	ldr	r0, [r0, #0]
 8018e70:	b128      	cbz	r0, 8018e7e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018e72:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018e76:	4299      	cmp	r1, r3
 8018e78:	bf08      	it	eq
 8018e7a:	4294      	cmpeq	r4, r2
 8018e7c:	d1f7      	bne.n	8018e6e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e82:	4770      	bx	lr
 8018e84:	4770      	bx	lr
 8018e86:	bf00      	nop

08018e88 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018e88:	b170      	cbz	r0, 8018ea8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018e8a:	68c0      	ldr	r0, [r0, #12]
 8018e8c:	b160      	cbz	r0, 8018ea8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018e8e:	b410      	push	{r4}
 8018e90:	e001      	b.n	8018e96 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018e92:	6800      	ldr	r0, [r0, #0]
 8018e94:	b128      	cbz	r0, 8018ea2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018e96:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8018e9a:	4299      	cmp	r1, r3
 8018e9c:	bf08      	it	eq
 8018e9e:	4294      	cmpeq	r4, r2
 8018ea0:	d1f7      	bne.n	8018e92 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ea6:	4770      	bx	lr
 8018ea8:	4770      	bx	lr
 8018eaa:	bf00      	nop

08018eac <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018eac:	b170      	cbz	r0, 8018ecc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018eae:	68c0      	ldr	r0, [r0, #12]
 8018eb0:	b160      	cbz	r0, 8018ecc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018eb2:	b410      	push	{r4}
 8018eb4:	e001      	b.n	8018eba <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018eb6:	6800      	ldr	r0, [r0, #0]
 8018eb8:	b128      	cbz	r0, 8018ec6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018eba:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8018ebe:	4299      	cmp	r1, r3
 8018ec0:	bf08      	it	eq
 8018ec2:	4294      	cmpeq	r4, r2
 8018ec4:	d1f7      	bne.n	8018eb6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018eca:	4770      	bx	lr
 8018ecc:	4770      	bx	lr
 8018ece:	bf00      	nop

08018ed0 <rclc_action_find_first_handle_with_goal_response>:
 8018ed0:	b140      	cbz	r0, 8018ee4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018ed2:	68c0      	ldr	r0, [r0, #12]
 8018ed4:	b910      	cbnz	r0, 8018edc <rclc_action_find_first_handle_with_goal_response+0xc>
 8018ed6:	e005      	b.n	8018ee4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018ed8:	6800      	ldr	r0, [r0, #0]
 8018eda:	b118      	cbz	r0, 8018ee4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018edc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d0f9      	beq.n	8018ed8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018ee4:	4770      	bx	lr
 8018ee6:	bf00      	nop

08018ee8 <rclc_action_find_first_handle_with_result_response>:
 8018ee8:	b140      	cbz	r0, 8018efc <rclc_action_find_first_handle_with_result_response+0x14>
 8018eea:	68c0      	ldr	r0, [r0, #12]
 8018eec:	b910      	cbnz	r0, 8018ef4 <rclc_action_find_first_handle_with_result_response+0xc>
 8018eee:	e005      	b.n	8018efc <rclc_action_find_first_handle_with_result_response+0x14>
 8018ef0:	6800      	ldr	r0, [r0, #0]
 8018ef2:	b118      	cbz	r0, 8018efc <rclc_action_find_first_handle_with_result_response+0x14>
 8018ef4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d0f9      	beq.n	8018ef0 <rclc_action_find_first_handle_with_result_response+0x8>
 8018efc:	4770      	bx	lr
 8018efe:	bf00      	nop

08018f00 <rclc_action_server_response_goal_request>:
 8018f00:	b198      	cbz	r0, 8018f2a <rclc_action_server_response_goal_request+0x2a>
 8018f02:	b510      	push	{r4, lr}
 8018f04:	6844      	ldr	r4, [r0, #4]
 8018f06:	b086      	sub	sp, #24
 8018f08:	2200      	movs	r2, #0
 8018f0a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018f0e:	460b      	mov	r3, r1
 8018f10:	9205      	str	r2, [sp, #20]
 8018f12:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8018f16:	aa03      	add	r2, sp, #12
 8018f18:	f104 0010 	add.w	r0, r4, #16
 8018f1c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018f20:	f7ff fd4a 	bl	80189b8 <rcl_action_send_goal_response>
 8018f24:	b918      	cbnz	r0, 8018f2e <rclc_action_server_response_goal_request+0x2e>
 8018f26:	b006      	add	sp, #24
 8018f28:	bd10      	pop	{r4, pc}
 8018f2a:	200b      	movs	r0, #11
 8018f2c:	4770      	bx	lr
 8018f2e:	9001      	str	r0, [sp, #4]
 8018f30:	f7f7 fd12 	bl	8010958 <rcutils_reset_error>
 8018f34:	9801      	ldr	r0, [sp, #4]
 8018f36:	b006      	add	sp, #24
 8018f38:	bd10      	pop	{r4, pc}
 8018f3a:	bf00      	nop
 8018f3c:	0000      	movs	r0, r0
	...

08018f40 <rclc_action_server_goal_cancel_accept>:
 8018f40:	b310      	cbz	r0, 8018f88 <rclc_action_server_goal_cancel_accept+0x48>
 8018f42:	b510      	push	{r4, lr}
 8018f44:	b090      	sub	sp, #64	@ 0x40
 8018f46:	4604      	mov	r4, r0
 8018f48:	a806      	add	r0, sp, #24
 8018f4a:	f7ff fefd 	bl	8018d48 <rcl_action_get_zero_initialized_cancel_response>
 8018f4e:	2300      	movs	r3, #0
 8018f50:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018f54:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018f58:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018f5c:	f88d 3018 	strb.w	r3, [sp, #24]
 8018f60:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018f64:	f8cd d01c 	str.w	sp, [sp, #28]
 8018f68:	46ec      	mov	ip, sp
 8018f6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f6e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018f90 <rclc_action_server_goal_cancel_accept+0x50>
 8018f72:	6860      	ldr	r0, [r4, #4]
 8018f74:	aa06      	add	r2, sp, #24
 8018f76:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8018f7a:	3010      	adds	r0, #16
 8018f7c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018f80:	f7ff fdd2 	bl	8018b28 <rcl_action_send_cancel_response>
 8018f84:	b010      	add	sp, #64	@ 0x40
 8018f86:	bd10      	pop	{r4, pc}
 8018f88:	200b      	movs	r0, #11
 8018f8a:	4770      	bx	lr
 8018f8c:	f3af 8000 	nop.w
 8018f90:	00000001 	.word	0x00000001
 8018f94:	00000001 	.word	0x00000001

08018f98 <rclc_action_server_goal_cancel_reject>:
 8018f98:	b082      	sub	sp, #8
 8018f9a:	b530      	push	{r4, r5, lr}
 8018f9c:	b08b      	sub	sp, #44	@ 0x2c
 8018f9e:	ac0e      	add	r4, sp, #56	@ 0x38
 8018fa0:	e884 000c 	stmia.w	r4, {r2, r3}
 8018fa4:	b188      	cbz	r0, 8018fca <rclc_action_server_goal_cancel_reject+0x32>
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	a801      	add	r0, sp, #4
 8018faa:	460d      	mov	r5, r1
 8018fac:	f7ff fecc 	bl	8018d48 <rcl_action_get_zero_initialized_cancel_response>
 8018fb0:	aa01      	add	r2, sp, #4
 8018fb2:	a90e      	add	r1, sp, #56	@ 0x38
 8018fb4:	f104 0010 	add.w	r0, r4, #16
 8018fb8:	f88d 5004 	strb.w	r5, [sp, #4]
 8018fbc:	f7ff fdb4 	bl	8018b28 <rcl_action_send_cancel_response>
 8018fc0:	b00b      	add	sp, #44	@ 0x2c
 8018fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fc6:	b002      	add	sp, #8
 8018fc8:	4770      	bx	lr
 8018fca:	200b      	movs	r0, #11
 8018fcc:	b00b      	add	sp, #44	@ 0x2c
 8018fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018fd2:	b002      	add	sp, #8
 8018fd4:	4770      	bx	lr
 8018fd6:	bf00      	nop

08018fd8 <rcutils_string_array_fini>:
 8018fd8:	b320      	cbz	r0, 8019024 <rcutils_string_array_fini+0x4c>
 8018fda:	b570      	push	{r4, r5, r6, lr}
 8018fdc:	4604      	mov	r4, r0
 8018fde:	6840      	ldr	r0, [r0, #4]
 8018fe0:	b1d8      	cbz	r0, 801901a <rcutils_string_array_fini+0x42>
 8018fe2:	f104 0008 	add.w	r0, r4, #8
 8018fe6:	f7f7 fbd7 	bl	8010798 <rcutils_allocator_is_valid>
 8018fea:	b1b8      	cbz	r0, 801901c <rcutils_string_array_fini+0x44>
 8018fec:	6823      	ldr	r3, [r4, #0]
 8018fee:	b1bb      	cbz	r3, 8019020 <rcutils_string_array_fini+0x48>
 8018ff0:	2500      	movs	r5, #0
 8018ff2:	6860      	ldr	r0, [r4, #4]
 8018ff4:	462e      	mov	r6, r5
 8018ff6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018ffa:	68e3      	ldr	r3, [r4, #12]
 8018ffc:	69a1      	ldr	r1, [r4, #24]
 8018ffe:	4798      	blx	r3
 8019000:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019004:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019008:	3501      	adds	r5, #1
 801900a:	429d      	cmp	r5, r3
 801900c:	d3f3      	bcc.n	8018ff6 <rcutils_string_array_fini+0x1e>
 801900e:	68e3      	ldr	r3, [r4, #12]
 8019010:	69a1      	ldr	r1, [r4, #24]
 8019012:	4798      	blx	r3
 8019014:	2000      	movs	r0, #0
 8019016:	e9c4 0000 	strd	r0, r0, [r4]
 801901a:	bd70      	pop	{r4, r5, r6, pc}
 801901c:	200b      	movs	r0, #11
 801901e:	bd70      	pop	{r4, r5, r6, pc}
 8019020:	6860      	ldr	r0, [r4, #4]
 8019022:	e7f4      	b.n	801900e <rcutils_string_array_fini+0x36>
 8019024:	200b      	movs	r0, #11
 8019026:	4770      	bx	lr

08019028 <rcutils_get_zero_initialized_string_map>:
 8019028:	4b01      	ldr	r3, [pc, #4]	@ (8019030 <rcutils_get_zero_initialized_string_map+0x8>)
 801902a:	2000      	movs	r0, #0
 801902c:	6018      	str	r0, [r3, #0]
 801902e:	4770      	bx	lr
 8019030:	20011b48 	.word	0x20011b48

08019034 <rcutils_string_map_reserve>:
 8019034:	2800      	cmp	r0, #0
 8019036:	d05f      	beq.n	80190f8 <rcutils_string_map_reserve+0xc4>
 8019038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801903c:	460c      	mov	r4, r1
 801903e:	6801      	ldr	r1, [r0, #0]
 8019040:	b082      	sub	sp, #8
 8019042:	4605      	mov	r5, r0
 8019044:	b129      	cbz	r1, 8019052 <rcutils_string_map_reserve+0x1e>
 8019046:	68cb      	ldr	r3, [r1, #12]
 8019048:	42a3      	cmp	r3, r4
 801904a:	d906      	bls.n	801905a <rcutils_string_map_reserve+0x26>
 801904c:	461c      	mov	r4, r3
 801904e:	2900      	cmp	r1, #0
 8019050:	d1f9      	bne.n	8019046 <rcutils_string_map_reserve+0x12>
 8019052:	201f      	movs	r0, #31
 8019054:	b002      	add	sp, #8
 8019056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801905a:	688b      	ldr	r3, [r1, #8]
 801905c:	42a3      	cmp	r3, r4
 801905e:	d047      	beq.n	80190f0 <rcutils_string_map_reserve+0xbc>
 8019060:	6a0e      	ldr	r6, [r1, #32]
 8019062:	2c00      	cmp	r4, #0
 8019064:	d034      	beq.n	80190d0 <rcutils_string_map_reserve+0x9c>
 8019066:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801906a:	d243      	bcs.n	80190f4 <rcutils_string_map_reserve+0xc0>
 801906c:	00a7      	lsls	r7, r4, #2
 801906e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8019072:	6808      	ldr	r0, [r1, #0]
 8019074:	4632      	mov	r2, r6
 8019076:	4639      	mov	r1, r7
 8019078:	47c0      	blx	r8
 801907a:	2800      	cmp	r0, #0
 801907c:	d03a      	beq.n	80190f4 <rcutils_string_map_reserve+0xc0>
 801907e:	682b      	ldr	r3, [r5, #0]
 8019080:	4632      	mov	r2, r6
 8019082:	6018      	str	r0, [r3, #0]
 8019084:	4639      	mov	r1, r7
 8019086:	6858      	ldr	r0, [r3, #4]
 8019088:	47c0      	blx	r8
 801908a:	2800      	cmp	r0, #0
 801908c:	d032      	beq.n	80190f4 <rcutils_string_map_reserve+0xc0>
 801908e:	682d      	ldr	r5, [r5, #0]
 8019090:	68ab      	ldr	r3, [r5, #8]
 8019092:	6068      	str	r0, [r5, #4]
 8019094:	42a3      	cmp	r3, r4
 8019096:	d226      	bcs.n	80190e6 <rcutils_string_map_reserve+0xb2>
 8019098:	682a      	ldr	r2, [r5, #0]
 801909a:	eb00 0c07 	add.w	ip, r0, r7
 801909e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80190a2:	45e6      	cmp	lr, ip
 80190a4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80190a8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80190ac:	d203      	bcs.n	80190b6 <rcutils_string_map_reserve+0x82>
 80190ae:	eb02 0c07 	add.w	ip, r2, r7
 80190b2:	4566      	cmp	r6, ip
 80190b4:	d322      	bcc.n	80190fc <rcutils_string_map_reserve+0xc8>
 80190b6:	1ae3      	subs	r3, r4, r3
 80190b8:	009a      	lsls	r2, r3, #2
 80190ba:	4670      	mov	r0, lr
 80190bc:	2100      	movs	r1, #0
 80190be:	9201      	str	r2, [sp, #4]
 80190c0:	f003 fc3c 	bl	801c93c <memset>
 80190c4:	9a01      	ldr	r2, [sp, #4]
 80190c6:	2100      	movs	r1, #0
 80190c8:	4630      	mov	r0, r6
 80190ca:	f003 fc37 	bl	801c93c <memset>
 80190ce:	e00a      	b.n	80190e6 <rcutils_string_map_reserve+0xb2>
 80190d0:	694f      	ldr	r7, [r1, #20]
 80190d2:	6808      	ldr	r0, [r1, #0]
 80190d4:	4631      	mov	r1, r6
 80190d6:	47b8      	blx	r7
 80190d8:	682b      	ldr	r3, [r5, #0]
 80190da:	4631      	mov	r1, r6
 80190dc:	6858      	ldr	r0, [r3, #4]
 80190de:	601c      	str	r4, [r3, #0]
 80190e0:	47b8      	blx	r7
 80190e2:	682d      	ldr	r5, [r5, #0]
 80190e4:	606c      	str	r4, [r5, #4]
 80190e6:	2000      	movs	r0, #0
 80190e8:	60ac      	str	r4, [r5, #8]
 80190ea:	b002      	add	sp, #8
 80190ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190f0:	2000      	movs	r0, #0
 80190f2:	e7af      	b.n	8019054 <rcutils_string_map_reserve+0x20>
 80190f4:	200a      	movs	r0, #10
 80190f6:	e7ad      	b.n	8019054 <rcutils_string_map_reserve+0x20>
 80190f8:	200b      	movs	r0, #11
 80190fa:	4770      	bx	lr
 80190fc:	1f0b      	subs	r3, r1, #4
 80190fe:	4418      	add	r0, r3
 8019100:	4413      	add	r3, r2
 8019102:	3a04      	subs	r2, #4
 8019104:	4417      	add	r7, r2
 8019106:	2200      	movs	r2, #0
 8019108:	f843 2f04 	str.w	r2, [r3, #4]!
 801910c:	42bb      	cmp	r3, r7
 801910e:	f840 2f04 	str.w	r2, [r0, #4]!
 8019112:	d1f9      	bne.n	8019108 <rcutils_string_map_reserve+0xd4>
 8019114:	e7e7      	b.n	80190e6 <rcutils_string_map_reserve+0xb2>
 8019116:	bf00      	nop

08019118 <rcutils_string_map_init>:
 8019118:	b082      	sub	sp, #8
 801911a:	b570      	push	{r4, r5, r6, lr}
 801911c:	ac04      	add	r4, sp, #16
 801911e:	e884 000c 	stmia.w	r4, {r2, r3}
 8019122:	b380      	cbz	r0, 8019186 <rcutils_string_map_init+0x6e>
 8019124:	6806      	ldr	r6, [r0, #0]
 8019126:	4604      	mov	r4, r0
 8019128:	b12e      	cbz	r6, 8019136 <rcutils_string_map_init+0x1e>
 801912a:	251e      	movs	r5, #30
 801912c:	4628      	mov	r0, r5
 801912e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019132:	b002      	add	sp, #8
 8019134:	4770      	bx	lr
 8019136:	a804      	add	r0, sp, #16
 8019138:	460d      	mov	r5, r1
 801913a:	f7f7 fb2d 	bl	8010798 <rcutils_allocator_is_valid>
 801913e:	b310      	cbz	r0, 8019186 <rcutils_string_map_init+0x6e>
 8019140:	9b04      	ldr	r3, [sp, #16]
 8019142:	9908      	ldr	r1, [sp, #32]
 8019144:	2024      	movs	r0, #36	@ 0x24
 8019146:	4798      	blx	r3
 8019148:	6020      	str	r0, [r4, #0]
 801914a:	b310      	cbz	r0, 8019192 <rcutils_string_map_init+0x7a>
 801914c:	f10d 0e10 	add.w	lr, sp, #16
 8019150:	e9c0 6600 	strd	r6, r6, [r0]
 8019154:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8019158:	f100 0c10 	add.w	ip, r0, #16
 801915c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019160:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019164:	f8de 3000 	ldr.w	r3, [lr]
 8019168:	f8cc 3000 	str.w	r3, [ip]
 801916c:	4629      	mov	r1, r5
 801916e:	4620      	mov	r0, r4
 8019170:	f7ff ff60 	bl	8019034 <rcutils_string_map_reserve>
 8019174:	4605      	mov	r5, r0
 8019176:	2800      	cmp	r0, #0
 8019178:	d0d8      	beq.n	801912c <rcutils_string_map_init+0x14>
 801917a:	9b05      	ldr	r3, [sp, #20]
 801917c:	9908      	ldr	r1, [sp, #32]
 801917e:	6820      	ldr	r0, [r4, #0]
 8019180:	4798      	blx	r3
 8019182:	6026      	str	r6, [r4, #0]
 8019184:	e7d2      	b.n	801912c <rcutils_string_map_init+0x14>
 8019186:	250b      	movs	r5, #11
 8019188:	4628      	mov	r0, r5
 801918a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801918e:	b002      	add	sp, #8
 8019190:	4770      	bx	lr
 8019192:	250a      	movs	r5, #10
 8019194:	e7ca      	b.n	801912c <rcutils_string_map_init+0x14>
 8019196:	bf00      	nop

08019198 <rcutils_string_map_fini>:
 8019198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801919c:	b082      	sub	sp, #8
 801919e:	2800      	cmp	r0, #0
 80191a0:	d03a      	beq.n	8019218 <rcutils_string_map_fini+0x80>
 80191a2:	6804      	ldr	r4, [r0, #0]
 80191a4:	4606      	mov	r6, r0
 80191a6:	2c00      	cmp	r4, #0
 80191a8:	d032      	beq.n	8019210 <rcutils_string_map_fini+0x78>
 80191aa:	68a3      	ldr	r3, [r4, #8]
 80191ac:	b32b      	cbz	r3, 80191fa <rcutils_string_map_fini+0x62>
 80191ae:	2500      	movs	r5, #0
 80191b0:	6822      	ldr	r2, [r4, #0]
 80191b2:	462f      	mov	r7, r5
 80191b4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80191b8:	b1e0      	cbz	r0, 80191f4 <rcutils_string_map_fini+0x5c>
 80191ba:	6a21      	ldr	r1, [r4, #32]
 80191bc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80191c0:	9101      	str	r1, [sp, #4]
 80191c2:	47c0      	blx	r8
 80191c4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80191c8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80191cc:	9901      	ldr	r1, [sp, #4]
 80191ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191d2:	47c0      	blx	r8
 80191d4:	68e3      	ldr	r3, [r4, #12]
 80191d6:	6862      	ldr	r2, [r4, #4]
 80191d8:	3b01      	subs	r3, #1
 80191da:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80191de:	60e3      	str	r3, [r4, #12]
 80191e0:	6834      	ldr	r4, [r6, #0]
 80191e2:	68a3      	ldr	r3, [r4, #8]
 80191e4:	3501      	adds	r5, #1
 80191e6:	429d      	cmp	r5, r3
 80191e8:	d207      	bcs.n	80191fa <rcutils_string_map_fini+0x62>
 80191ea:	6822      	ldr	r2, [r4, #0]
 80191ec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80191f0:	2800      	cmp	r0, #0
 80191f2:	d1e2      	bne.n	80191ba <rcutils_string_map_fini+0x22>
 80191f4:	3501      	adds	r5, #1
 80191f6:	429d      	cmp	r5, r3
 80191f8:	d3dc      	bcc.n	80191b4 <rcutils_string_map_fini+0x1c>
 80191fa:	2100      	movs	r1, #0
 80191fc:	4630      	mov	r0, r6
 80191fe:	f7ff ff19 	bl	8019034 <rcutils_string_map_reserve>
 8019202:	4604      	mov	r4, r0
 8019204:	b920      	cbnz	r0, 8019210 <rcutils_string_map_fini+0x78>
 8019206:	6830      	ldr	r0, [r6, #0]
 8019208:	6943      	ldr	r3, [r0, #20]
 801920a:	6a01      	ldr	r1, [r0, #32]
 801920c:	4798      	blx	r3
 801920e:	6034      	str	r4, [r6, #0]
 8019210:	4620      	mov	r0, r4
 8019212:	b002      	add	sp, #8
 8019214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019218:	240b      	movs	r4, #11
 801921a:	4620      	mov	r0, r4
 801921c:	b002      	add	sp, #8
 801921e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019222:	bf00      	nop

08019224 <rcutils_string_map_getn>:
 8019224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019228:	b300      	cbz	r0, 801926c <rcutils_string_map_getn+0x48>
 801922a:	6807      	ldr	r7, [r0, #0]
 801922c:	b1ff      	cbz	r7, 801926e <rcutils_string_map_getn+0x4a>
 801922e:	4688      	mov	r8, r1
 8019230:	b1e1      	cbz	r1, 801926c <rcutils_string_map_getn+0x48>
 8019232:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8019236:	683e      	ldr	r6, [r7, #0]
 8019238:	f1ba 0f00 	cmp.w	sl, #0
 801923c:	d016      	beq.n	801926c <rcutils_string_map_getn+0x48>
 801923e:	4691      	mov	r9, r2
 8019240:	3e04      	subs	r6, #4
 8019242:	2400      	movs	r4, #0
 8019244:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8019248:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801924c:	4628      	mov	r0, r5
 801924e:	3401      	adds	r4, #1
 8019250:	b155      	cbz	r5, 8019268 <rcutils_string_map_getn+0x44>
 8019252:	f7e6 ffe7 	bl	8000224 <strlen>
 8019256:	4548      	cmp	r0, r9
 8019258:	4602      	mov	r2, r0
 801925a:	4629      	mov	r1, r5
 801925c:	bf38      	it	cc
 801925e:	464a      	movcc	r2, r9
 8019260:	4640      	mov	r0, r8
 8019262:	f003 fb80 	bl	801c966 <strncmp>
 8019266:	b128      	cbz	r0, 8019274 <rcutils_string_map_getn+0x50>
 8019268:	45a2      	cmp	sl, r4
 801926a:	d1eb      	bne.n	8019244 <rcutils_string_map_getn+0x20>
 801926c:	2700      	movs	r7, #0
 801926e:	4638      	mov	r0, r7
 8019270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	f853 700b 	ldr.w	r7, [r3, fp]
 801927a:	4638      	mov	r0, r7
 801927c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019280 <rmw_get_zero_initialized_context>:
 8019280:	b510      	push	{r4, lr}
 8019282:	4604      	mov	r4, r0
 8019284:	3010      	adds	r0, #16
 8019286:	f7f7 fd2b 	bl	8010ce0 <rmw_get_zero_initialized_init_options>
 801928a:	2300      	movs	r3, #0
 801928c:	2000      	movs	r0, #0
 801928e:	2100      	movs	r1, #0
 8019290:	e9c4 0100 	strd	r0, r1, [r4]
 8019294:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8019298:	60a3      	str	r3, [r4, #8]
 801929a:	4620      	mov	r0, r4
 801929c:	bd10      	pop	{r4, pc}
 801929e:	bf00      	nop

080192a0 <rmw_time_equal>:
 80192a0:	b4f0      	push	{r4, r5, r6, r7}
 80192a2:	b084      	sub	sp, #16
 80192a4:	ac04      	add	r4, sp, #16
 80192a6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80192aa:	4603      	mov	r3, r0
 80192ac:	4924      	ldr	r1, [pc, #144]	@ (8019340 <rmw_time_equal+0xa0>)
 80192ae:	9e03      	ldr	r6, [sp, #12]
 80192b0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80192b4:	2202      	movs	r2, #2
 80192b6:	4299      	cmp	r1, r3
 80192b8:	41aa      	sbcs	r2, r5
 80192ba:	d330      	bcc.n	801931e <rmw_time_equal+0x7e>
 80192bc:	4c21      	ldr	r4, [pc, #132]	@ (8019344 <rmw_time_equal+0xa4>)
 80192be:	fba3 3204 	umull	r3, r2, r3, r4
 80192c2:	fb04 2205 	mla	r2, r4, r5, r2
 80192c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80192ca:	43dd      	mvns	r5, r3
 80192cc:	1a8c      	subs	r4, r1, r2
 80192ce:	4285      	cmp	r5, r0
 80192d0:	41b4      	sbcs	r4, r6
 80192d2:	d332      	bcc.n	801933a <rmw_time_equal+0x9a>
 80192d4:	eb10 0c03 	adds.w	ip, r0, r3
 80192d8:	eb42 0106 	adc.w	r1, r2, r6
 80192dc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80192e0:	4817      	ldr	r0, [pc, #92]	@ (8019340 <rmw_time_equal+0xa0>)
 80192e2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80192e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80192e6:	2202      	movs	r2, #2
 80192e8:	4298      	cmp	r0, r3
 80192ea:	41b2      	sbcs	r2, r6
 80192ec:	d31c      	bcc.n	8019328 <rmw_time_equal+0x88>
 80192ee:	4c15      	ldr	r4, [pc, #84]	@ (8019344 <rmw_time_equal+0xa4>)
 80192f0:	fba3 3204 	umull	r3, r2, r3, r4
 80192f4:	fb04 2206 	mla	r2, r4, r6, r2
 80192f8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80192fc:	43de      	mvns	r6, r3
 80192fe:	1a84      	subs	r4, r0, r2
 8019300:	42ae      	cmp	r6, r5
 8019302:	41bc      	sbcs	r4, r7
 8019304:	d315      	bcc.n	8019332 <rmw_time_equal+0x92>
 8019306:	195b      	adds	r3, r3, r5
 8019308:	eb42 0207 	adc.w	r2, r2, r7
 801930c:	428a      	cmp	r2, r1
 801930e:	bf08      	it	eq
 8019310:	4563      	cmpeq	r3, ip
 8019312:	bf0c      	ite	eq
 8019314:	2001      	moveq	r0, #1
 8019316:	2000      	movne	r0, #0
 8019318:	b004      	add	sp, #16
 801931a:	bcf0      	pop	{r4, r5, r6, r7}
 801931c:	4770      	bx	lr
 801931e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8019322:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019326:	e7d9      	b.n	80192dc <rmw_time_equal+0x3c>
 8019328:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801932c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8019330:	e7ec      	b.n	801930c <rmw_time_equal+0x6c>
 8019332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019336:	4602      	mov	r2, r0
 8019338:	e7e8      	b.n	801930c <rmw_time_equal+0x6c>
 801933a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801933e:	e7cd      	b.n	80192dc <rmw_time_equal+0x3c>
 8019340:	25c17d04 	.word	0x25c17d04
 8019344:	3b9aca00 	.word	0x3b9aca00

08019348 <rmw_time_total_nsec>:
 8019348:	b470      	push	{r4, r5, r6}
 801934a:	b085      	sub	sp, #20
 801934c:	ac04      	add	r4, sp, #16
 801934e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019352:	4603      	mov	r3, r0
 8019354:	4912      	ldr	r1, [pc, #72]	@ (80193a0 <rmw_time_total_nsec+0x58>)
 8019356:	9e03      	ldr	r6, [sp, #12]
 8019358:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801935c:	2202      	movs	r2, #2
 801935e:	4299      	cmp	r1, r3
 8019360:	41aa      	sbcs	r2, r5
 8019362:	d311      	bcc.n	8019388 <rmw_time_total_nsec+0x40>
 8019364:	4c0f      	ldr	r4, [pc, #60]	@ (80193a4 <rmw_time_total_nsec+0x5c>)
 8019366:	fba3 3204 	umull	r3, r2, r3, r4
 801936a:	fb04 2205 	mla	r2, r4, r5, r2
 801936e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019372:	43dd      	mvns	r5, r3
 8019374:	1a8c      	subs	r4, r1, r2
 8019376:	4285      	cmp	r5, r0
 8019378:	41b4      	sbcs	r4, r6
 801937a:	d30c      	bcc.n	8019396 <rmw_time_total_nsec+0x4e>
 801937c:	1818      	adds	r0, r3, r0
 801937e:	eb42 0106 	adc.w	r1, r2, r6
 8019382:	b005      	add	sp, #20
 8019384:	bc70      	pop	{r4, r5, r6}
 8019386:	4770      	bx	lr
 8019388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801938c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019390:	b005      	add	sp, #20
 8019392:	bc70      	pop	{r4, r5, r6}
 8019394:	4770      	bx	lr
 8019396:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801939a:	b005      	add	sp, #20
 801939c:	bc70      	pop	{r4, r5, r6}
 801939e:	4770      	bx	lr
 80193a0:	25c17d04 	.word	0x25c17d04
 80193a4:	3b9aca00 	.word	0x3b9aca00

080193a8 <rmw_validate_full_topic_name>:
 80193a8:	2800      	cmp	r0, #0
 80193aa:	d057      	beq.n	801945c <rmw_validate_full_topic_name+0xb4>
 80193ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193b0:	460d      	mov	r5, r1
 80193b2:	2900      	cmp	r1, #0
 80193b4:	d054      	beq.n	8019460 <rmw_validate_full_topic_name+0xb8>
 80193b6:	4616      	mov	r6, r2
 80193b8:	4604      	mov	r4, r0
 80193ba:	f7e6 ff33 	bl	8000224 <strlen>
 80193be:	b148      	cbz	r0, 80193d4 <rmw_validate_full_topic_name+0x2c>
 80193c0:	7823      	ldrb	r3, [r4, #0]
 80193c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80193c4:	d00d      	beq.n	80193e2 <rmw_validate_full_topic_name+0x3a>
 80193c6:	2302      	movs	r3, #2
 80193c8:	602b      	str	r3, [r5, #0]
 80193ca:	b13e      	cbz	r6, 80193dc <rmw_validate_full_topic_name+0x34>
 80193cc:	2000      	movs	r0, #0
 80193ce:	6030      	str	r0, [r6, #0]
 80193d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d4:	2301      	movs	r3, #1
 80193d6:	602b      	str	r3, [r5, #0]
 80193d8:	2e00      	cmp	r6, #0
 80193da:	d1f7      	bne.n	80193cc <rmw_validate_full_topic_name+0x24>
 80193dc:	2000      	movs	r0, #0
 80193de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193e2:	1e43      	subs	r3, r0, #1
 80193e4:	5ce2      	ldrb	r2, [r4, r3]
 80193e6:	2a2f      	cmp	r2, #47	@ 0x2f
 80193e8:	d03c      	beq.n	8019464 <rmw_validate_full_topic_name+0xbc>
 80193ea:	1e63      	subs	r3, r4, #1
 80193ec:	eb03 0800 	add.w	r8, r3, r0
 80193f0:	f1c4 0e01 	rsb	lr, r4, #1
 80193f4:	eb0e 0703 	add.w	r7, lr, r3
 80193f8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80193fc:	f021 0220 	bic.w	r2, r1, #32
 8019400:	3a41      	subs	r2, #65	@ 0x41
 8019402:	2a19      	cmp	r2, #25
 8019404:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8019408:	d90b      	bls.n	8019422 <rmw_validate_full_topic_name+0x7a>
 801940a:	295f      	cmp	r1, #95	@ 0x5f
 801940c:	d009      	beq.n	8019422 <rmw_validate_full_topic_name+0x7a>
 801940e:	f1bc 0f0a 	cmp.w	ip, #10
 8019412:	d906      	bls.n	8019422 <rmw_validate_full_topic_name+0x7a>
 8019414:	2304      	movs	r3, #4
 8019416:	602b      	str	r3, [r5, #0]
 8019418:	2e00      	cmp	r6, #0
 801941a:	d0df      	beq.n	80193dc <rmw_validate_full_topic_name+0x34>
 801941c:	6037      	str	r7, [r6, #0]
 801941e:	2000      	movs	r0, #0
 8019420:	e7d6      	b.n	80193d0 <rmw_validate_full_topic_name+0x28>
 8019422:	4543      	cmp	r3, r8
 8019424:	d1e6      	bne.n	80193f4 <rmw_validate_full_topic_name+0x4c>
 8019426:	4f1a      	ldr	r7, [pc, #104]	@ (8019490 <rmw_validate_full_topic_name+0xe8>)
 8019428:	2301      	movs	r3, #1
 801942a:	e004      	b.n	8019436 <rmw_validate_full_topic_name+0x8e>
 801942c:	4298      	cmp	r0, r3
 801942e:	f104 0401 	add.w	r4, r4, #1
 8019432:	d91c      	bls.n	801946e <rmw_validate_full_topic_name+0xc6>
 8019434:	4613      	mov	r3, r2
 8019436:	4298      	cmp	r0, r3
 8019438:	f103 0201 	add.w	r2, r3, #1
 801943c:	d0f6      	beq.n	801942c <rmw_validate_full_topic_name+0x84>
 801943e:	7821      	ldrb	r1, [r4, #0]
 8019440:	292f      	cmp	r1, #47	@ 0x2f
 8019442:	d1f3      	bne.n	801942c <rmw_validate_full_topic_name+0x84>
 8019444:	7861      	ldrb	r1, [r4, #1]
 8019446:	292f      	cmp	r1, #47	@ 0x2f
 8019448:	d01c      	beq.n	8019484 <rmw_validate_full_topic_name+0xdc>
 801944a:	5dc9      	ldrb	r1, [r1, r7]
 801944c:	0749      	lsls	r1, r1, #29
 801944e:	d5ed      	bpl.n	801942c <rmw_validate_full_topic_name+0x84>
 8019450:	2206      	movs	r2, #6
 8019452:	602a      	str	r2, [r5, #0]
 8019454:	2e00      	cmp	r6, #0
 8019456:	d0c1      	beq.n	80193dc <rmw_validate_full_topic_name+0x34>
 8019458:	6033      	str	r3, [r6, #0]
 801945a:	e7bf      	b.n	80193dc <rmw_validate_full_topic_name+0x34>
 801945c:	200b      	movs	r0, #11
 801945e:	4770      	bx	lr
 8019460:	200b      	movs	r0, #11
 8019462:	e7b5      	b.n	80193d0 <rmw_validate_full_topic_name+0x28>
 8019464:	2203      	movs	r2, #3
 8019466:	602a      	str	r2, [r5, #0]
 8019468:	2e00      	cmp	r6, #0
 801946a:	d1f5      	bne.n	8019458 <rmw_validate_full_topic_name+0xb0>
 801946c:	e7b6      	b.n	80193dc <rmw_validate_full_topic_name+0x34>
 801946e:	28f7      	cmp	r0, #247	@ 0xf7
 8019470:	d802      	bhi.n	8019478 <rmw_validate_full_topic_name+0xd0>
 8019472:	2000      	movs	r0, #0
 8019474:	6028      	str	r0, [r5, #0]
 8019476:	e7ab      	b.n	80193d0 <rmw_validate_full_topic_name+0x28>
 8019478:	2307      	movs	r3, #7
 801947a:	602b      	str	r3, [r5, #0]
 801947c:	2e00      	cmp	r6, #0
 801947e:	d0ad      	beq.n	80193dc <rmw_validate_full_topic_name+0x34>
 8019480:	23f6      	movs	r3, #246	@ 0xf6
 8019482:	e7e9      	b.n	8019458 <rmw_validate_full_topic_name+0xb0>
 8019484:	2205      	movs	r2, #5
 8019486:	602a      	str	r2, [r5, #0]
 8019488:	2e00      	cmp	r6, #0
 801948a:	d1e5      	bne.n	8019458 <rmw_validate_full_topic_name+0xb0>
 801948c:	e7a6      	b.n	80193dc <rmw_validate_full_topic_name+0x34>
 801948e:	bf00      	nop
 8019490:	0801eccf 	.word	0x0801eccf

08019494 <on_status>:
 8019494:	b082      	sub	sp, #8
 8019496:	b002      	add	sp, #8
 8019498:	4770      	bx	lr
 801949a:	bf00      	nop

0801949c <on_topic>:
 801949c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194a0:	4a22      	ldr	r2, [pc, #136]	@ (801952c <on_topic+0x90>)
 80194a2:	b094      	sub	sp, #80	@ 0x50
 80194a4:	6812      	ldr	r2, [r2, #0]
 80194a6:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80194a8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80194ac:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80194b0:	b3c2      	cbz	r2, 8019524 <on_topic+0x88>
 80194b2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80194b6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80194ba:	e001      	b.n	80194c0 <on_topic+0x24>
 80194bc:	6852      	ldr	r2, [r2, #4]
 80194be:	b38a      	cbz	r2, 8019524 <on_topic+0x88>
 80194c0:	6894      	ldr	r4, [r2, #8]
 80194c2:	8aa3      	ldrh	r3, [r4, #20]
 80194c4:	428b      	cmp	r3, r1
 80194c6:	d1f9      	bne.n	80194bc <on_topic+0x20>
 80194c8:	7da3      	ldrb	r3, [r4, #22]
 80194ca:	4283      	cmp	r3, r0
 80194cc:	d1f6      	bne.n	80194bc <on_topic+0x20>
 80194ce:	2248      	movs	r2, #72	@ 0x48
 80194d0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80194d4:	4668      	mov	r0, sp
 80194d6:	f003 fafa 	bl	801cace <memcpy>
 80194da:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80194de:	cb0c      	ldmia	r3, {r2, r3}
 80194e0:	4620      	mov	r0, r4
 80194e2:	f7f8 ff09 	bl	80122f8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80194e6:	4607      	mov	r7, r0
 80194e8:	b1e0      	cbz	r0, 8019524 <on_topic+0x88>
 80194ea:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80194ee:	4632      	mov	r2, r6
 80194f0:	4628      	mov	r0, r5
 80194f2:	f108 0110 	add.w	r1, r8, #16
 80194f6:	f7f9 fc83 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 80194fa:	b930      	cbnz	r0, 801950a <on_topic+0x6e>
 80194fc:	480c      	ldr	r0, [pc, #48]	@ (8019530 <on_topic+0x94>)
 80194fe:	4639      	mov	r1, r7
 8019500:	b014      	add	sp, #80	@ 0x50
 8019502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019506:	f000 b8bd 	b.w	8019684 <put_memory>
 801950a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801950e:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8019512:	f000 fca7 	bl	8019e64 <rmw_uros_epoch_nanos>
 8019516:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801951a:	2305      	movs	r3, #5
 801951c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019520:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019524:	b014      	add	sp, #80	@ 0x50
 8019526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801952a:	bf00      	nop
 801952c:	20011afc 	.word	0x20011afc
 8019530:	20011aec 	.word	0x20011aec

08019534 <on_request>:
 8019534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019538:	4823      	ldr	r0, [pc, #140]	@ (80195c8 <on_request+0x94>)
 801953a:	b094      	sub	sp, #80	@ 0x50
 801953c:	6800      	ldr	r0, [r0, #0]
 801953e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019540:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019544:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019546:	2800      	cmp	r0, #0
 8019548:	d03b      	beq.n	80195c2 <on_request+0x8e>
 801954a:	461d      	mov	r5, r3
 801954c:	e001      	b.n	8019552 <on_request+0x1e>
 801954e:	6840      	ldr	r0, [r0, #4]
 8019550:	b3b8      	cbz	r0, 80195c2 <on_request+0x8e>
 8019552:	6884      	ldr	r4, [r0, #8]
 8019554:	8b21      	ldrh	r1, [r4, #24]
 8019556:	4291      	cmp	r1, r2
 8019558:	d1f9      	bne.n	801954e <on_request+0x1a>
 801955a:	2248      	movs	r2, #72	@ 0x48
 801955c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019560:	4668      	mov	r0, sp
 8019562:	f003 fab4 	bl	801cace <memcpy>
 8019566:	f104 0320 	add.w	r3, r4, #32
 801956a:	cb0c      	ldmia	r3, {r2, r3}
 801956c:	4620      	mov	r0, r4
 801956e:	f7f8 fec3 	bl	80122f8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019572:	4680      	mov	r8, r0
 8019574:	b328      	cbz	r0, 80195c2 <on_request+0x8e>
 8019576:	4638      	mov	r0, r7
 8019578:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801957c:	4632      	mov	r2, r6
 801957e:	f107 0110 	add.w	r1, r7, #16
 8019582:	f7f9 fc3d 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8019586:	b930      	cbnz	r0, 8019596 <on_request+0x62>
 8019588:	4810      	ldr	r0, [pc, #64]	@ (80195cc <on_request+0x98>)
 801958a:	4641      	mov	r1, r8
 801958c:	b014      	add	sp, #80	@ 0x50
 801958e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019592:	f000 b877 	b.w	8019684 <put_memory>
 8019596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019598:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801959c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80195a0:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80195a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80195a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80195ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80195b0:	f000 fc58 	bl	8019e64 <rmw_uros_epoch_nanos>
 80195b4:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80195b8:	2303      	movs	r3, #3
 80195ba:	e942 0102 	strd	r0, r1, [r2, #-8]
 80195be:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80195c2:	b014      	add	sp, #80	@ 0x50
 80195c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195c8:	20011acc 	.word	0x20011acc
 80195cc:	20011aec 	.word	0x20011aec

080195d0 <on_reply>:
 80195d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195d4:	4821      	ldr	r0, [pc, #132]	@ (801965c <on_reply+0x8c>)
 80195d6:	b094      	sub	sp, #80	@ 0x50
 80195d8:	6800      	ldr	r0, [r0, #0]
 80195da:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80195dc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80195e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80195e2:	b3b8      	cbz	r0, 8019654 <on_reply+0x84>
 80195e4:	461d      	mov	r5, r3
 80195e6:	e001      	b.n	80195ec <on_reply+0x1c>
 80195e8:	6840      	ldr	r0, [r0, #4]
 80195ea:	b398      	cbz	r0, 8019654 <on_reply+0x84>
 80195ec:	6884      	ldr	r4, [r0, #8]
 80195ee:	8b21      	ldrh	r1, [r4, #24]
 80195f0:	4291      	cmp	r1, r2
 80195f2:	d1f9      	bne.n	80195e8 <on_reply+0x18>
 80195f4:	2248      	movs	r2, #72	@ 0x48
 80195f6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80195fa:	4668      	mov	r0, sp
 80195fc:	f003 fa67 	bl	801cace <memcpy>
 8019600:	f104 0320 	add.w	r3, r4, #32
 8019604:	cb0c      	ldmia	r3, {r2, r3}
 8019606:	4620      	mov	r0, r4
 8019608:	f7f8 fe76 	bl	80122f8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801960c:	4680      	mov	r8, r0
 801960e:	b308      	cbz	r0, 8019654 <on_reply+0x84>
 8019610:	4638      	mov	r0, r7
 8019612:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019616:	4632      	mov	r2, r6
 8019618:	f107 0110 	add.w	r1, r7, #16
 801961c:	f7f9 fbf0 	bl	8012e00 <ucdr_deserialize_array_uint8_t>
 8019620:	b930      	cbnz	r0, 8019630 <on_reply+0x60>
 8019622:	480f      	ldr	r0, [pc, #60]	@ (8019660 <on_reply+0x90>)
 8019624:	4641      	mov	r1, r8
 8019626:	b014      	add	sp, #80	@ 0x50
 8019628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801962c:	f000 b82a 	b.w	8019684 <put_memory>
 8019630:	2200      	movs	r2, #0
 8019632:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8019636:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801963a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801963e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8019642:	f000 fc0f 	bl	8019e64 <rmw_uros_epoch_nanos>
 8019646:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801964a:	2304      	movs	r3, #4
 801964c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019650:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019654:	b014      	add	sp, #80	@ 0x50
 8019656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801965a:	bf00      	nop
 801965c:	2000d1dc 	.word	0x2000d1dc
 8019660:	20011aec 	.word	0x20011aec

08019664 <get_memory>:
 8019664:	4603      	mov	r3, r0
 8019666:	6840      	ldr	r0, [r0, #4]
 8019668:	b158      	cbz	r0, 8019682 <get_memory+0x1e>
 801966a:	6842      	ldr	r2, [r0, #4]
 801966c:	605a      	str	r2, [r3, #4]
 801966e:	b10a      	cbz	r2, 8019674 <get_memory+0x10>
 8019670:	2100      	movs	r1, #0
 8019672:	6011      	str	r1, [r2, #0]
 8019674:	681a      	ldr	r2, [r3, #0]
 8019676:	6042      	str	r2, [r0, #4]
 8019678:	b102      	cbz	r2, 801967c <get_memory+0x18>
 801967a:	6010      	str	r0, [r2, #0]
 801967c:	2200      	movs	r2, #0
 801967e:	6002      	str	r2, [r0, #0]
 8019680:	6018      	str	r0, [r3, #0]
 8019682:	4770      	bx	lr

08019684 <put_memory>:
 8019684:	680b      	ldr	r3, [r1, #0]
 8019686:	b10b      	cbz	r3, 801968c <put_memory+0x8>
 8019688:	684a      	ldr	r2, [r1, #4]
 801968a:	605a      	str	r2, [r3, #4]
 801968c:	684a      	ldr	r2, [r1, #4]
 801968e:	b102      	cbz	r2, 8019692 <put_memory+0xe>
 8019690:	6013      	str	r3, [r2, #0]
 8019692:	6803      	ldr	r3, [r0, #0]
 8019694:	428b      	cmp	r3, r1
 8019696:	6843      	ldr	r3, [r0, #4]
 8019698:	bf08      	it	eq
 801969a:	6002      	streq	r2, [r0, #0]
 801969c:	604b      	str	r3, [r1, #4]
 801969e:	b103      	cbz	r3, 80196a2 <put_memory+0x1e>
 80196a0:	6019      	str	r1, [r3, #0]
 80196a2:	2300      	movs	r3, #0
 80196a4:	600b      	str	r3, [r1, #0]
 80196a6:	6041      	str	r1, [r0, #4]
 80196a8:	4770      	bx	lr
 80196aa:	bf00      	nop

080196ac <rmw_destroy_client>:
 80196ac:	b570      	push	{r4, r5, r6, lr}
 80196ae:	b128      	cbz	r0, 80196bc <rmw_destroy_client+0x10>
 80196b0:	4604      	mov	r4, r0
 80196b2:	6800      	ldr	r0, [r0, #0]
 80196b4:	460d      	mov	r5, r1
 80196b6:	f7f8 ff95 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 80196ba:	b910      	cbnz	r0, 80196c2 <rmw_destroy_client+0x16>
 80196bc:	2401      	movs	r4, #1
 80196be:	4620      	mov	r0, r4
 80196c0:	bd70      	pop	{r4, r5, r6, pc}
 80196c2:	6863      	ldr	r3, [r4, #4]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d0f9      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196c8:	2d00      	cmp	r5, #0
 80196ca:	d0f7      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196cc:	6828      	ldr	r0, [r5, #0]
 80196ce:	f7f8 ff89 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 80196d2:	2800      	cmp	r0, #0
 80196d4:	d0f2      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196d6:	686e      	ldr	r6, [r5, #4]
 80196d8:	2e00      	cmp	r6, #0
 80196da:	d0ef      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196dc:	6864      	ldr	r4, [r4, #4]
 80196de:	6932      	ldr	r2, [r6, #16]
 80196e0:	6920      	ldr	r0, [r4, #16]
 80196e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80196e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80196ea:	6819      	ldr	r1, [r3, #0]
 80196ec:	f7fa f920 	bl	8013930 <uxr_buffer_cancel_data>
 80196f0:	4602      	mov	r2, r0
 80196f2:	6920      	ldr	r0, [r4, #16]
 80196f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80196f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80196fc:	f7f8 fef2 	bl	80124e4 <run_xrce_session>
 8019700:	6920      	ldr	r0, [r4, #16]
 8019702:	6932      	ldr	r2, [r6, #16]
 8019704:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019708:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801970c:	6819      	ldr	r1, [r3, #0]
 801970e:	f7f9 fcdd 	bl	80130cc <uxr_buffer_delete_entity>
 8019712:	4602      	mov	r2, r0
 8019714:	6920      	ldr	r0, [r4, #16]
 8019716:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801971a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801971e:	f7f8 fee1 	bl	80124e4 <run_xrce_session>
 8019722:	2800      	cmp	r0, #0
 8019724:	4628      	mov	r0, r5
 8019726:	bf14      	ite	ne
 8019728:	2400      	movne	r4, #0
 801972a:	2402      	moveq	r4, #2
 801972c:	f7f8 fdc2 	bl	80122b4 <rmw_uxrce_fini_client_memory>
 8019730:	e7c5      	b.n	80196be <rmw_destroy_client+0x12>
 8019732:	bf00      	nop

08019734 <rmw_get_implementation_identifier>:
 8019734:	4b01      	ldr	r3, [pc, #4]	@ (801973c <rmw_get_implementation_identifier+0x8>)
 8019736:	6818      	ldr	r0, [r3, #0]
 8019738:	4770      	bx	lr
 801973a:	bf00      	nop
 801973c:	0801e7c8 	.word	0x0801e7c8

08019740 <rmw_create_guard_condition>:
 8019740:	b538      	push	{r3, r4, r5, lr}
 8019742:	4605      	mov	r5, r0
 8019744:	4807      	ldr	r0, [pc, #28]	@ (8019764 <rmw_create_guard_condition+0x24>)
 8019746:	f7ff ff8d 	bl	8019664 <get_memory>
 801974a:	b148      	cbz	r0, 8019760 <rmw_create_guard_condition+0x20>
 801974c:	6884      	ldr	r4, [r0, #8]
 801974e:	2300      	movs	r3, #0
 8019750:	7423      	strb	r3, [r4, #16]
 8019752:	61e5      	str	r5, [r4, #28]
 8019754:	f7ff ffee 	bl	8019734 <rmw_get_implementation_identifier>
 8019758:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801975c:	f104 0014 	add.w	r0, r4, #20
 8019760:	bd38      	pop	{r3, r4, r5, pc}
 8019762:	bf00      	nop
 8019764:	20011a8c 	.word	0x20011a8c

08019768 <rmw_destroy_guard_condition>:
 8019768:	b508      	push	{r3, lr}
 801976a:	4b08      	ldr	r3, [pc, #32]	@ (801978c <rmw_destroy_guard_condition+0x24>)
 801976c:	6819      	ldr	r1, [r3, #0]
 801976e:	b911      	cbnz	r1, 8019776 <rmw_destroy_guard_condition+0xe>
 8019770:	e00a      	b.n	8019788 <rmw_destroy_guard_condition+0x20>
 8019772:	6849      	ldr	r1, [r1, #4]
 8019774:	b141      	cbz	r1, 8019788 <rmw_destroy_guard_condition+0x20>
 8019776:	688b      	ldr	r3, [r1, #8]
 8019778:	3314      	adds	r3, #20
 801977a:	4298      	cmp	r0, r3
 801977c:	d1f9      	bne.n	8019772 <rmw_destroy_guard_condition+0xa>
 801977e:	4803      	ldr	r0, [pc, #12]	@ (801978c <rmw_destroy_guard_condition+0x24>)
 8019780:	f7ff ff80 	bl	8019684 <put_memory>
 8019784:	2000      	movs	r0, #0
 8019786:	bd08      	pop	{r3, pc}
 8019788:	2001      	movs	r0, #1
 801978a:	bd08      	pop	{r3, pc}
 801978c:	20011a8c 	.word	0x20011a8c

08019790 <create_topic>:
 8019790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019794:	4605      	mov	r5, r0
 8019796:	b084      	sub	sp, #16
 8019798:	4822      	ldr	r0, [pc, #136]	@ (8019824 <create_topic+0x94>)
 801979a:	460f      	mov	r7, r1
 801979c:	4616      	mov	r6, r2
 801979e:	f7ff ff61 	bl	8019664 <get_memory>
 80197a2:	4604      	mov	r4, r0
 80197a4:	2800      	cmp	r0, #0
 80197a6:	d039      	beq.n	801981c <create_topic+0x8c>
 80197a8:	692b      	ldr	r3, [r5, #16]
 80197aa:	6884      	ldr	r4, [r0, #8]
 80197ac:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 801982c <create_topic+0x9c>
 80197b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197b4:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80197b8:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80197bc:	1c42      	adds	r2, r0, #1
 80197be:	2102      	movs	r1, #2
 80197c0:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80197c4:	f7f9 ff46 	bl	8013654 <uxr_object_id>
 80197c8:	223c      	movs	r2, #60	@ 0x3c
 80197ca:	6120      	str	r0, [r4, #16]
 80197cc:	4641      	mov	r1, r8
 80197ce:	4638      	mov	r0, r7
 80197d0:	f7f8 feee 	bl	80125b0 <generate_topic_name>
 80197d4:	b1f0      	cbz	r0, 8019814 <create_topic+0x84>
 80197d6:	4f14      	ldr	r7, [pc, #80]	@ (8019828 <create_topic+0x98>)
 80197d8:	4630      	mov	r0, r6
 80197da:	2264      	movs	r2, #100	@ 0x64
 80197dc:	4639      	mov	r1, r7
 80197de:	f7f8 feb7 	bl	8012550 <generate_type_name>
 80197e2:	b1b8      	cbz	r0, 8019814 <create_topic+0x84>
 80197e4:	6928      	ldr	r0, [r5, #16]
 80197e6:	2306      	movs	r3, #6
 80197e8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80197ec:	f8cd 8000 	str.w	r8, [sp]
 80197f0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80197f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80197f8:	6811      	ldr	r1, [r2, #0]
 80197fa:	696b      	ldr	r3, [r5, #20]
 80197fc:	6922      	ldr	r2, [r4, #16]
 80197fe:	f7f9 fce3 	bl	80131c8 <uxr_buffer_create_topic_bin>
 8019802:	4602      	mov	r2, r0
 8019804:	6928      	ldr	r0, [r5, #16]
 8019806:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801980a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801980e:	f7f8 fe69 	bl	80124e4 <run_xrce_session>
 8019812:	b918      	cbnz	r0, 801981c <create_topic+0x8c>
 8019814:	4620      	mov	r0, r4
 8019816:	f7f8 fd63 	bl	80122e0 <rmw_uxrce_fini_topic_memory>
 801981a:	2400      	movs	r4, #0
 801981c:	4620      	mov	r0, r4
 801981e:	b004      	add	sp, #16
 8019820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019824:	20011b0c 	.word	0x20011b0c
 8019828:	20011b88 	.word	0x20011b88
 801982c:	20011b4c 	.word	0x20011b4c

08019830 <destroy_topic>:
 8019830:	b538      	push	{r3, r4, r5, lr}
 8019832:	6985      	ldr	r5, [r0, #24]
 8019834:	b1d5      	cbz	r5, 801986c <destroy_topic+0x3c>
 8019836:	4604      	mov	r4, r0
 8019838:	6928      	ldr	r0, [r5, #16]
 801983a:	6922      	ldr	r2, [r4, #16]
 801983c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019840:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019844:	6819      	ldr	r1, [r3, #0]
 8019846:	f7f9 fc41 	bl	80130cc <uxr_buffer_delete_entity>
 801984a:	4602      	mov	r2, r0
 801984c:	6928      	ldr	r0, [r5, #16]
 801984e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019852:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019856:	f7f8 fe45 	bl	80124e4 <run_xrce_session>
 801985a:	2800      	cmp	r0, #0
 801985c:	4620      	mov	r0, r4
 801985e:	bf14      	ite	ne
 8019860:	2400      	movne	r4, #0
 8019862:	2402      	moveq	r4, #2
 8019864:	f7f8 fd3c 	bl	80122e0 <rmw_uxrce_fini_topic_memory>
 8019868:	4620      	mov	r0, r4
 801986a:	bd38      	pop	{r3, r4, r5, pc}
 801986c:	2401      	movs	r4, #1
 801986e:	4620      	mov	r0, r4
 8019870:	bd38      	pop	{r3, r4, r5, pc}
 8019872:	bf00      	nop

08019874 <rmw_send_request>:
 8019874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019878:	4604      	mov	r4, r0
 801987a:	6800      	ldr	r0, [r0, #0]
 801987c:	b08b      	sub	sp, #44	@ 0x2c
 801987e:	460e      	mov	r6, r1
 8019880:	4615      	mov	r5, r2
 8019882:	b128      	cbz	r0, 8019890 <rmw_send_request+0x1c>
 8019884:	4b21      	ldr	r3, [pc, #132]	@ (801990c <rmw_send_request+0x98>)
 8019886:	6819      	ldr	r1, [r3, #0]
 8019888:	f7e6 fcc2 	bl	8000210 <strcmp>
 801988c:	2800      	cmp	r0, #0
 801988e:	d139      	bne.n	8019904 <rmw_send_request+0x90>
 8019890:	6864      	ldr	r4, [r4, #4]
 8019892:	6963      	ldr	r3, [r4, #20]
 8019894:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019898:	689b      	ldr	r3, [r3, #8]
 801989a:	4798      	blx	r3
 801989c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80198a0:	4630      	mov	r0, r6
 80198a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80198a6:	4798      	blx	r3
 80198a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80198ac:	9000      	str	r0, [sp, #0]
 80198ae:	6922      	ldr	r2, [r4, #16]
 80198b0:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80198b2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80198b6:	ab02      	add	r3, sp, #8
 80198b8:	f7fc f8b6 	bl	8015a28 <uxr_prepare_output_stream>
 80198bc:	2700      	movs	r7, #0
 80198be:	6028      	str	r0, [r5, #0]
 80198c0:	606f      	str	r7, [r5, #4]
 80198c2:	b198      	cbz	r0, 80198ec <rmw_send_request+0x78>
 80198c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80198c8:	a902      	add	r1, sp, #8
 80198ca:	4630      	mov	r0, r6
 80198cc:	4798      	blx	r3
 80198ce:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80198d2:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d00c      	beq.n	80198f4 <rmw_send_request+0x80>
 80198da:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80198dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80198e0:	f7fa fdfa 	bl	80144d8 <uxr_run_session_until_confirm_delivery>
 80198e4:	4638      	mov	r0, r7
 80198e6:	b00b      	add	sp, #44	@ 0x2c
 80198e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198ec:	2001      	movs	r0, #1
 80198ee:	b00b      	add	sp, #44	@ 0x2c
 80198f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80198f8:	f7fa fa2e 	bl	8013d58 <uxr_flash_output_streams>
 80198fc:	4638      	mov	r0, r7
 80198fe:	b00b      	add	sp, #44	@ 0x2c
 8019900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019904:	200c      	movs	r0, #12
 8019906:	b00b      	add	sp, #44	@ 0x2c
 8019908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801990c:	0801e7c8 	.word	0x0801e7c8

08019910 <rmw_take_request>:
 8019910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019914:	4605      	mov	r5, r0
 8019916:	6800      	ldr	r0, [r0, #0]
 8019918:	b089      	sub	sp, #36	@ 0x24
 801991a:	460c      	mov	r4, r1
 801991c:	4690      	mov	r8, r2
 801991e:	461e      	mov	r6, r3
 8019920:	b128      	cbz	r0, 801992e <rmw_take_request+0x1e>
 8019922:	4b28      	ldr	r3, [pc, #160]	@ (80199c4 <rmw_take_request+0xb4>)
 8019924:	6819      	ldr	r1, [r3, #0]
 8019926:	f7e6 fc73 	bl	8000210 <strcmp>
 801992a:	2800      	cmp	r0, #0
 801992c:	d146      	bne.n	80199bc <rmw_take_request+0xac>
 801992e:	b10e      	cbz	r6, 8019934 <rmw_take_request+0x24>
 8019930:	2300      	movs	r3, #0
 8019932:	7033      	strb	r3, [r6, #0]
 8019934:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8019938:	f7f8 fd56 	bl	80123e8 <rmw_uxrce_clean_expired_static_input_buffer>
 801993c:	4648      	mov	r0, r9
 801993e:	f7f8 fd2b 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019942:	4607      	mov	r7, r0
 8019944:	b3b0      	cbz	r0, 80199b4 <rmw_take_request+0xa4>
 8019946:	6885      	ldr	r5, [r0, #8]
 8019948:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801994c:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8019950:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8019954:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8019958:	7423      	strb	r3, [r4, #16]
 801995a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801995e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8019962:	74e2      	strb	r2, [r4, #19]
 8019964:	f8a4 3011 	strh.w	r3, [r4, #17]
 8019968:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801996c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8019970:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8019974:	61e1      	str	r1, [r4, #28]
 8019976:	6162      	str	r2, [r4, #20]
 8019978:	61a3      	str	r3, [r4, #24]
 801997a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801997e:	689b      	ldr	r3, [r3, #8]
 8019980:	4798      	blx	r3
 8019982:	6844      	ldr	r4, [r0, #4]
 8019984:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019988:	f105 0110 	add.w	r1, r5, #16
 801998c:	4668      	mov	r0, sp
 801998e:	f7f4 fcf5 	bl	800e37c <ucdr_init_buffer>
 8019992:	68e3      	ldr	r3, [r4, #12]
 8019994:	4641      	mov	r1, r8
 8019996:	4668      	mov	r0, sp
 8019998:	4798      	blx	r3
 801999a:	4639      	mov	r1, r7
 801999c:	4604      	mov	r4, r0
 801999e:	480a      	ldr	r0, [pc, #40]	@ (80199c8 <rmw_take_request+0xb8>)
 80199a0:	f7ff fe70 	bl	8019684 <put_memory>
 80199a4:	b106      	cbz	r6, 80199a8 <rmw_take_request+0x98>
 80199a6:	7034      	strb	r4, [r6, #0]
 80199a8:	f084 0001 	eor.w	r0, r4, #1
 80199ac:	b2c0      	uxtb	r0, r0
 80199ae:	b009      	add	sp, #36	@ 0x24
 80199b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199b4:	2001      	movs	r0, #1
 80199b6:	b009      	add	sp, #36	@ 0x24
 80199b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199bc:	200c      	movs	r0, #12
 80199be:	b009      	add	sp, #36	@ 0x24
 80199c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199c4:	0801e7c8 	.word	0x0801e7c8
 80199c8:	20011aec 	.word	0x20011aec

080199cc <rmw_send_response>:
 80199cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199ce:	4605      	mov	r5, r0
 80199d0:	6800      	ldr	r0, [r0, #0]
 80199d2:	b091      	sub	sp, #68	@ 0x44
 80199d4:	460c      	mov	r4, r1
 80199d6:	4616      	mov	r6, r2
 80199d8:	b128      	cbz	r0, 80199e6 <rmw_send_response+0x1a>
 80199da:	4b29      	ldr	r3, [pc, #164]	@ (8019a80 <rmw_send_response+0xb4>)
 80199dc:	6819      	ldr	r1, [r3, #0]
 80199de:	f7e6 fc17 	bl	8000210 <strcmp>
 80199e2:	2800      	cmp	r0, #0
 80199e4:	d141      	bne.n	8019a6a <rmw_send_response+0x9e>
 80199e6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80199ea:	9306      	str	r3, [sp, #24]
 80199ec:	4623      	mov	r3, r4
 80199ee:	9207      	str	r2, [sp, #28]
 80199f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199f4:	686d      	ldr	r5, [r5, #4]
 80199f6:	789b      	ldrb	r3, [r3, #2]
 80199f8:	68a1      	ldr	r1, [r4, #8]
 80199fa:	f88d 2017 	strb.w	r2, [sp, #23]
 80199fe:	f88d 3016 	strb.w	r3, [sp, #22]
 8019a02:	68e2      	ldr	r2, [r4, #12]
 8019a04:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8019a08:	6860      	ldr	r0, [r4, #4]
 8019a0a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019a0e:	ab02      	add	r3, sp, #8
 8019a10:	c307      	stmia	r3!, {r0, r1, r2}
 8019a12:	696b      	ldr	r3, [r5, #20]
 8019a14:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8019a16:	68db      	ldr	r3, [r3, #12]
 8019a18:	4798      	blx	r3
 8019a1a:	6844      	ldr	r4, [r0, #4]
 8019a1c:	4630      	mov	r0, r6
 8019a1e:	6923      	ldr	r3, [r4, #16]
 8019a20:	4798      	blx	r3
 8019a22:	f100 0318 	add.w	r3, r0, #24
 8019a26:	6938      	ldr	r0, [r7, #16]
 8019a28:	9300      	str	r3, [sp, #0]
 8019a2a:	692a      	ldr	r2, [r5, #16]
 8019a2c:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8019a2e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a32:	ab08      	add	r3, sp, #32
 8019a34:	f7fb fff8 	bl	8015a28 <uxr_prepare_output_stream>
 8019a38:	b910      	cbnz	r0, 8019a40 <rmw_send_response+0x74>
 8019a3a:	2001      	movs	r0, #1
 8019a3c:	b011      	add	sp, #68	@ 0x44
 8019a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a40:	a902      	add	r1, sp, #8
 8019a42:	a808      	add	r0, sp, #32
 8019a44:	f7fd f93c 	bl	8016cc0 <uxr_serialize_SampleIdentity>
 8019a48:	68a3      	ldr	r3, [r4, #8]
 8019a4a:	a908      	add	r1, sp, #32
 8019a4c:	4630      	mov	r0, r6
 8019a4e:	4798      	blx	r3
 8019a50:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8019a54:	6938      	ldr	r0, [r7, #16]
 8019a56:	2b01      	cmp	r3, #1
 8019a58:	d00a      	beq.n	8019a70 <rmw_send_response+0xa4>
 8019a5a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8019a5c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a60:	f7fa fd3a 	bl	80144d8 <uxr_run_session_until_confirm_delivery>
 8019a64:	2000      	movs	r0, #0
 8019a66:	b011      	add	sp, #68	@ 0x44
 8019a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a6a:	200c      	movs	r0, #12
 8019a6c:	b011      	add	sp, #68	@ 0x44
 8019a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a70:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a74:	f7fa f970 	bl	8013d58 <uxr_flash_output_streams>
 8019a78:	2000      	movs	r0, #0
 8019a7a:	b011      	add	sp, #68	@ 0x44
 8019a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a7e:	bf00      	nop
 8019a80:	0801e7c8 	.word	0x0801e7c8

08019a84 <rmw_take_response>:
 8019a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a88:	4604      	mov	r4, r0
 8019a8a:	6800      	ldr	r0, [r0, #0]
 8019a8c:	b088      	sub	sp, #32
 8019a8e:	4688      	mov	r8, r1
 8019a90:	4617      	mov	r7, r2
 8019a92:	461d      	mov	r5, r3
 8019a94:	b120      	cbz	r0, 8019aa0 <rmw_take_response+0x1c>
 8019a96:	4b1e      	ldr	r3, [pc, #120]	@ (8019b10 <rmw_take_response+0x8c>)
 8019a98:	6819      	ldr	r1, [r3, #0]
 8019a9a:	f7e6 fbb9 	bl	8000210 <strcmp>
 8019a9e:	bb78      	cbnz	r0, 8019b00 <rmw_take_response+0x7c>
 8019aa0:	b10d      	cbz	r5, 8019aa6 <rmw_take_response+0x22>
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	702b      	strb	r3, [r5, #0]
 8019aa6:	6864      	ldr	r4, [r4, #4]
 8019aa8:	f7f8 fc9e 	bl	80123e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019aac:	4620      	mov	r0, r4
 8019aae:	f7f8 fc73 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019ab2:	4606      	mov	r6, r0
 8019ab4:	b340      	cbz	r0, 8019b08 <rmw_take_response+0x84>
 8019ab6:	6963      	ldr	r3, [r4, #20]
 8019ab8:	6884      	ldr	r4, [r0, #8]
 8019aba:	68db      	ldr	r3, [r3, #12]
 8019abc:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019ac0:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019ac4:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8019ac8:	4798      	blx	r3
 8019aca:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8019ace:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019ad2:	f104 0110 	add.w	r1, r4, #16
 8019ad6:	4668      	mov	r0, sp
 8019ad8:	f7f4 fc50 	bl	800e37c <ucdr_init_buffer>
 8019adc:	4639      	mov	r1, r7
 8019ade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019ae2:	4668      	mov	r0, sp
 8019ae4:	4798      	blx	r3
 8019ae6:	4631      	mov	r1, r6
 8019ae8:	4604      	mov	r4, r0
 8019aea:	480a      	ldr	r0, [pc, #40]	@ (8019b14 <rmw_take_response+0x90>)
 8019aec:	f7ff fdca 	bl	8019684 <put_memory>
 8019af0:	b105      	cbz	r5, 8019af4 <rmw_take_response+0x70>
 8019af2:	702c      	strb	r4, [r5, #0]
 8019af4:	f084 0001 	eor.w	r0, r4, #1
 8019af8:	b2c0      	uxtb	r0, r0
 8019afa:	b008      	add	sp, #32
 8019afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b00:	200c      	movs	r0, #12
 8019b02:	b008      	add	sp, #32
 8019b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b08:	2001      	movs	r0, #1
 8019b0a:	b008      	add	sp, #32
 8019b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b10:	0801e7c8 	.word	0x0801e7c8
 8019b14:	20011aec 	.word	0x20011aec

08019b18 <rmw_trigger_guard_condition>:
 8019b18:	b160      	cbz	r0, 8019b34 <rmw_trigger_guard_condition+0x1c>
 8019b1a:	b510      	push	{r4, lr}
 8019b1c:	4604      	mov	r4, r0
 8019b1e:	6800      	ldr	r0, [r0, #0]
 8019b20:	f7f8 fd60 	bl	80125e4 <is_uxrce_rmw_identifier_valid>
 8019b24:	b908      	cbnz	r0, 8019b2a <rmw_trigger_guard_condition+0x12>
 8019b26:	2001      	movs	r0, #1
 8019b28:	bd10      	pop	{r4, pc}
 8019b2a:	6863      	ldr	r3, [r4, #4]
 8019b2c:	2201      	movs	r2, #1
 8019b2e:	741a      	strb	r2, [r3, #16]
 8019b30:	2000      	movs	r0, #0
 8019b32:	bd10      	pop	{r4, pc}
 8019b34:	2001      	movs	r0, #1
 8019b36:	4770      	bx	lr

08019b38 <rmw_wait>:
 8019b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b3c:	b089      	sub	sp, #36	@ 0x24
 8019b3e:	4605      	mov	r5, r0
 8019b40:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8019b42:	460e      	mov	r6, r1
 8019b44:	4698      	mov	r8, r3
 8019b46:	4691      	mov	r9, r2
 8019b48:	2a00      	cmp	r2, #0
 8019b4a:	f000 810a 	beq.w	8019d62 <rmw_wait+0x22a>
 8019b4e:	b16c      	cbz	r4, 8019b6c <rmw_wait+0x34>
 8019b50:	4bae      	ldr	r3, [pc, #696]	@ (8019e0c <rmw_wait+0x2d4>)
 8019b52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b54:	af04      	add	r7, sp, #16
 8019b56:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019b5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019b5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019b62:	f7ff fb9d 	bl	80192a0 <rmw_time_equal>
 8019b66:	2800      	cmp	r0, #0
 8019b68:	f000 8127 	beq.w	8019dba <rmw_wait+0x282>
 8019b6c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019b70:	f7f8 fc3a 	bl	80123e8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019b74:	4ba6      	ldr	r3, [pc, #664]	@ (8019e10 <rmw_wait+0x2d8>)
 8019b76:	681c      	ldr	r4, [r3, #0]
 8019b78:	b14c      	cbz	r4, 8019b8e <rmw_wait+0x56>
 8019b7a:	4623      	mov	r3, r4
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019b82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019b86:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d1f7      	bne.n	8019b7e <rmw_wait+0x46>
 8019b8e:	f1b9 0f00 	cmp.w	r9, #0
 8019b92:	d011      	beq.n	8019bb8 <rmw_wait+0x80>
 8019b94:	f8d9 1000 	ldr.w	r1, [r9]
 8019b98:	b171      	cbz	r1, 8019bb8 <rmw_wait+0x80>
 8019b9a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	2001      	movs	r0, #1
 8019ba2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019ba6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019ba8:	6912      	ldr	r2, [r2, #16]
 8019baa:	3301      	adds	r3, #1
 8019bac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019bb0:	4299      	cmp	r1, r3
 8019bb2:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019bb6:	d1f4      	bne.n	8019ba2 <rmw_wait+0x6a>
 8019bb8:	f1b8 0f00 	cmp.w	r8, #0
 8019bbc:	d011      	beq.n	8019be2 <rmw_wait+0xaa>
 8019bbe:	f8d8 1000 	ldr.w	r1, [r8]
 8019bc2:	b171      	cbz	r1, 8019be2 <rmw_wait+0xaa>
 8019bc4:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019bc8:	2300      	movs	r3, #0
 8019bca:	2001      	movs	r0, #1
 8019bcc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019bd0:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019bd2:	6912      	ldr	r2, [r2, #16]
 8019bd4:	3301      	adds	r3, #1
 8019bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019bda:	4299      	cmp	r1, r3
 8019bdc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019be0:	d1f4      	bne.n	8019bcc <rmw_wait+0x94>
 8019be2:	b185      	cbz	r5, 8019c06 <rmw_wait+0xce>
 8019be4:	6829      	ldr	r1, [r5, #0]
 8019be6:	b171      	cbz	r1, 8019c06 <rmw_wait+0xce>
 8019be8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019bec:	2300      	movs	r3, #0
 8019bee:	2001      	movs	r0, #1
 8019bf0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019bf4:	6a12      	ldr	r2, [r2, #32]
 8019bf6:	6912      	ldr	r2, [r2, #16]
 8019bf8:	3301      	adds	r3, #1
 8019bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019bfe:	4299      	cmp	r1, r3
 8019c00:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019c04:	d1f4      	bne.n	8019bf0 <rmw_wait+0xb8>
 8019c06:	b34c      	cbz	r4, 8019c5c <rmw_wait+0x124>
 8019c08:	4622      	mov	r2, r4
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019c10:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019c14:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019c18:	440b      	add	r3, r1
 8019c1a:	b2db      	uxtb	r3, r3
 8019c1c:	2a00      	cmp	r2, #0
 8019c1e:	d1f5      	bne.n	8019c0c <rmw_wait+0xd4>
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	f000 8084 	beq.w	8019d2e <rmw_wait+0x1f6>
 8019c26:	1c7a      	adds	r2, r7, #1
 8019c28:	d00d      	beq.n	8019c46 <rmw_wait+0x10e>
 8019c2a:	ee07 7a90 	vmov	s15, r7
 8019c2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019c32:	ee07 3a90 	vmov	s15, r3
 8019c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019c3e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019c42:	ee17 7a90 	vmov	r7, s15
 8019c46:	68a0      	ldr	r0, [r4, #8]
 8019c48:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019c4c:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	f040 8090 	bne.w	8019d76 <rmw_wait+0x23e>
 8019c56:	6864      	ldr	r4, [r4, #4]
 8019c58:	2c00      	cmp	r4, #0
 8019c5a:	d1f4      	bne.n	8019c46 <rmw_wait+0x10e>
 8019c5c:	f1b9 0f00 	cmp.w	r9, #0
 8019c60:	f000 80bc 	beq.w	8019ddc <rmw_wait+0x2a4>
 8019c64:	f8d9 7000 	ldr.w	r7, [r9]
 8019c68:	2f00      	cmp	r7, #0
 8019c6a:	f000 808e 	beq.w	8019d8a <rmw_wait+0x252>
 8019c6e:	2400      	movs	r4, #0
 8019c70:	4627      	mov	r7, r4
 8019c72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019c76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019c7a:	f7f8 fb8d 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	d05f      	beq.n	8019d42 <rmw_wait+0x20a>
 8019c82:	f8d9 3000 	ldr.w	r3, [r9]
 8019c86:	3401      	adds	r4, #1
 8019c88:	42a3      	cmp	r3, r4
 8019c8a:	f04f 0701 	mov.w	r7, #1
 8019c8e:	d8f0      	bhi.n	8019c72 <rmw_wait+0x13a>
 8019c90:	f1b8 0f00 	cmp.w	r8, #0
 8019c94:	d012      	beq.n	8019cbc <rmw_wait+0x184>
 8019c96:	f8d8 3000 	ldr.w	r3, [r8]
 8019c9a:	b17b      	cbz	r3, 8019cbc <rmw_wait+0x184>
 8019c9c:	2400      	movs	r4, #0
 8019c9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019ca2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019ca6:	f7f8 fb77 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019caa:	2800      	cmp	r0, #0
 8019cac:	d051      	beq.n	8019d52 <rmw_wait+0x21a>
 8019cae:	f8d8 3000 	ldr.w	r3, [r8]
 8019cb2:	3401      	adds	r4, #1
 8019cb4:	42a3      	cmp	r3, r4
 8019cb6:	f04f 0701 	mov.w	r7, #1
 8019cba:	d8f0      	bhi.n	8019c9e <rmw_wait+0x166>
 8019cbc:	b1dd      	cbz	r5, 8019cf6 <rmw_wait+0x1be>
 8019cbe:	682b      	ldr	r3, [r5, #0]
 8019cc0:	b1cb      	cbz	r3, 8019cf6 <rmw_wait+0x1be>
 8019cc2:	2400      	movs	r4, #0
 8019cc4:	686b      	ldr	r3, [r5, #4]
 8019cc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019cca:	f7f8 fb65 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019cce:	b158      	cbz	r0, 8019ce8 <rmw_wait+0x1b0>
 8019cd0:	682b      	ldr	r3, [r5, #0]
 8019cd2:	3401      	adds	r4, #1
 8019cd4:	42a3      	cmp	r3, r4
 8019cd6:	d969      	bls.n	8019dac <rmw_wait+0x274>
 8019cd8:	686b      	ldr	r3, [r5, #4]
 8019cda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019cde:	2701      	movs	r7, #1
 8019ce0:	f7f8 fb5a 	bl	8012398 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019ce4:	2800      	cmp	r0, #0
 8019ce6:	d1f3      	bne.n	8019cd0 <rmw_wait+0x198>
 8019ce8:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019cec:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019cf0:	3401      	adds	r4, #1
 8019cf2:	42a3      	cmp	r3, r4
 8019cf4:	d8e6      	bhi.n	8019cc4 <rmw_wait+0x18c>
 8019cf6:	b1a6      	cbz	r6, 8019d22 <rmw_wait+0x1ea>
 8019cf8:	6834      	ldr	r4, [r6, #0]
 8019cfa:	b194      	cbz	r4, 8019d22 <rmw_wait+0x1ea>
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	461d      	mov	r5, r3
 8019d00:	e004      	b.n	8019d0c <rmw_wait+0x1d4>
 8019d02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019d06:	3301      	adds	r3, #1
 8019d08:	42a3      	cmp	r3, r4
 8019d0a:	d00a      	beq.n	8019d22 <rmw_wait+0x1ea>
 8019d0c:	6870      	ldr	r0, [r6, #4]
 8019d0e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019d12:	7c0a      	ldrb	r2, [r1, #16]
 8019d14:	2a00      	cmp	r2, #0
 8019d16:	d0f4      	beq.n	8019d02 <rmw_wait+0x1ca>
 8019d18:	3301      	adds	r3, #1
 8019d1a:	42a3      	cmp	r3, r4
 8019d1c:	740d      	strb	r5, [r1, #16]
 8019d1e:	4617      	mov	r7, r2
 8019d20:	d1f4      	bne.n	8019d0c <rmw_wait+0x1d4>
 8019d22:	2f00      	cmp	r7, #0
 8019d24:	d03e      	beq.n	8019da4 <rmw_wait+0x26c>
 8019d26:	2000      	movs	r0, #0
 8019d28:	b009      	add	sp, #36	@ 0x24
 8019d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d2e:	68a0      	ldr	r0, [r4, #8]
 8019d30:	2100      	movs	r1, #0
 8019d32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d36:	f7fa fb95 	bl	8014464 <uxr_run_session_timeout>
 8019d3a:	6864      	ldr	r4, [r4, #4]
 8019d3c:	2c00      	cmp	r4, #0
 8019d3e:	d1f6      	bne.n	8019d2e <rmw_wait+0x1f6>
 8019d40:	e78c      	b.n	8019c5c <rmw_wait+0x124>
 8019d42:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019d46:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019d4a:	3401      	adds	r4, #1
 8019d4c:	42a3      	cmp	r3, r4
 8019d4e:	d890      	bhi.n	8019c72 <rmw_wait+0x13a>
 8019d50:	e79e      	b.n	8019c90 <rmw_wait+0x158>
 8019d52:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019d56:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019d5a:	3401      	adds	r4, #1
 8019d5c:	429c      	cmp	r4, r3
 8019d5e:	d39e      	bcc.n	8019c9e <rmw_wait+0x166>
 8019d60:	e7ac      	b.n	8019cbc <rmw_wait+0x184>
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	f47f aef3 	bne.w	8019b4e <rmw_wait+0x16>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	f47f aef0 	bne.w	8019b4e <rmw_wait+0x16>
 8019d6e:	2900      	cmp	r1, #0
 8019d70:	f47f aeed 	bne.w	8019b4e <rmw_wait+0x16>
 8019d74:	e7d7      	b.n	8019d26 <rmw_wait+0x1ee>
 8019d76:	4639      	mov	r1, r7
 8019d78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019d7c:	f7fa fb8c 	bl	8014498 <uxr_run_session_until_data>
 8019d80:	6864      	ldr	r4, [r4, #4]
 8019d82:	2c00      	cmp	r4, #0
 8019d84:	f47f af5f 	bne.w	8019c46 <rmw_wait+0x10e>
 8019d88:	e768      	b.n	8019c5c <rmw_wait+0x124>
 8019d8a:	f1b8 0f00 	cmp.w	r8, #0
 8019d8e:	d032      	beq.n	8019df6 <rmw_wait+0x2be>
 8019d90:	f8d8 3000 	ldr.w	r3, [r8]
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d181      	bne.n	8019c9c <rmw_wait+0x164>
 8019d98:	461f      	mov	r7, r3
 8019d9a:	2d00      	cmp	r5, #0
 8019d9c:	d18f      	bne.n	8019cbe <rmw_wait+0x186>
 8019d9e:	462f      	mov	r7, r5
 8019da0:	2e00      	cmp	r6, #0
 8019da2:	d1a9      	bne.n	8019cf8 <rmw_wait+0x1c0>
 8019da4:	2002      	movs	r0, #2
 8019da6:	b009      	add	sp, #36	@ 0x24
 8019da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019dac:	2e00      	cmp	r6, #0
 8019dae:	d0ba      	beq.n	8019d26 <rmw_wait+0x1ee>
 8019db0:	6834      	ldr	r4, [r6, #0]
 8019db2:	2701      	movs	r7, #1
 8019db4:	2c00      	cmp	r4, #0
 8019db6:	d1a1      	bne.n	8019cfc <rmw_wait+0x1c4>
 8019db8:	e7b5      	b.n	8019d26 <rmw_wait+0x1ee>
 8019dba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019dbe:	f7ff fac3 	bl	8019348 <rmw_time_total_nsec>
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	4a13      	ldr	r2, [pc, #76]	@ (8019e14 <rmw_wait+0x2dc>)
 8019dc6:	f7e6 fef9 	bl	8000bbc <__aeabi_uldivmod>
 8019dca:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8019dce:	f171 0300 	sbcs.w	r3, r1, #0
 8019dd2:	4607      	mov	r7, r0
 8019dd4:	bfa8      	it	ge
 8019dd6:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8019dda:	e6c9      	b.n	8019b70 <rmw_wait+0x38>
 8019ddc:	f1b8 0f00 	cmp.w	r8, #0
 8019de0:	d009      	beq.n	8019df6 <rmw_wait+0x2be>
 8019de2:	f8d8 3000 	ldr.w	r3, [r8]
 8019de6:	464f      	mov	r7, r9
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	f47f af57 	bne.w	8019c9c <rmw_wait+0x164>
 8019dee:	2d00      	cmp	r5, #0
 8019df0:	f47f af65 	bne.w	8019cbe <rmw_wait+0x186>
 8019df4:	e7d3      	b.n	8019d9e <rmw_wait+0x266>
 8019df6:	b17d      	cbz	r5, 8019e18 <rmw_wait+0x2e0>
 8019df8:	682b      	ldr	r3, [r5, #0]
 8019dfa:	4647      	mov	r7, r8
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	f47f af60 	bne.w	8019cc2 <rmw_wait+0x18a>
 8019e02:	2e00      	cmp	r6, #0
 8019e04:	f47f af78 	bne.w	8019cf8 <rmw_wait+0x1c0>
 8019e08:	e7cc      	b.n	8019da4 <rmw_wait+0x26c>
 8019e0a:	bf00      	nop
 8019e0c:	0801d818 	.word	0x0801d818
 8019e10:	20011adc 	.word	0x20011adc
 8019e14:	000f4240 	.word	0x000f4240
 8019e18:	2e00      	cmp	r6, #0
 8019e1a:	d0c3      	beq.n	8019da4 <rmw_wait+0x26c>
 8019e1c:	6834      	ldr	r4, [r6, #0]
 8019e1e:	462f      	mov	r7, r5
 8019e20:	2c00      	cmp	r4, #0
 8019e22:	f47f af6b 	bne.w	8019cfc <rmw_wait+0x1c4>
 8019e26:	e7bd      	b.n	8019da4 <rmw_wait+0x26c>

08019e28 <rmw_create_wait_set>:
 8019e28:	b508      	push	{r3, lr}
 8019e2a:	4803      	ldr	r0, [pc, #12]	@ (8019e38 <rmw_create_wait_set+0x10>)
 8019e2c:	f7ff fc1a 	bl	8019664 <get_memory>
 8019e30:	b108      	cbz	r0, 8019e36 <rmw_create_wait_set+0xe>
 8019e32:	6880      	ldr	r0, [r0, #8]
 8019e34:	3010      	adds	r0, #16
 8019e36:	bd08      	pop	{r3, pc}
 8019e38:	20011b1c 	.word	0x20011b1c

08019e3c <rmw_destroy_wait_set>:
 8019e3c:	b508      	push	{r3, lr}
 8019e3e:	4b08      	ldr	r3, [pc, #32]	@ (8019e60 <rmw_destroy_wait_set+0x24>)
 8019e40:	6819      	ldr	r1, [r3, #0]
 8019e42:	b911      	cbnz	r1, 8019e4a <rmw_destroy_wait_set+0xe>
 8019e44:	e00a      	b.n	8019e5c <rmw_destroy_wait_set+0x20>
 8019e46:	6849      	ldr	r1, [r1, #4]
 8019e48:	b141      	cbz	r1, 8019e5c <rmw_destroy_wait_set+0x20>
 8019e4a:	688b      	ldr	r3, [r1, #8]
 8019e4c:	3310      	adds	r3, #16
 8019e4e:	4298      	cmp	r0, r3
 8019e50:	d1f9      	bne.n	8019e46 <rmw_destroy_wait_set+0xa>
 8019e52:	4803      	ldr	r0, [pc, #12]	@ (8019e60 <rmw_destroy_wait_set+0x24>)
 8019e54:	f7ff fc16 	bl	8019684 <put_memory>
 8019e58:	2000      	movs	r0, #0
 8019e5a:	bd08      	pop	{r3, pc}
 8019e5c:	2001      	movs	r0, #1
 8019e5e:	bd08      	pop	{r3, pc}
 8019e60:	20011b1c 	.word	0x20011b1c

08019e64 <rmw_uros_epoch_nanos>:
 8019e64:	4b05      	ldr	r3, [pc, #20]	@ (8019e7c <rmw_uros_epoch_nanos+0x18>)
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	b123      	cbz	r3, 8019e74 <rmw_uros_epoch_nanos+0x10>
 8019e6a:	6898      	ldr	r0, [r3, #8]
 8019e6c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019e70:	f7f9 bf68 	b.w	8013d44 <uxr_epoch_nanos>
 8019e74:	2000      	movs	r0, #0
 8019e76:	2100      	movs	r1, #0
 8019e78:	4770      	bx	lr
 8019e7a:	bf00      	nop
 8019e7c:	20011adc 	.word	0x20011adc

08019e80 <rosidl_runtime_c__String__init>:
 8019e80:	b510      	push	{r4, lr}
 8019e82:	4604      	mov	r4, r0
 8019e84:	b086      	sub	sp, #24
 8019e86:	b170      	cbz	r0, 8019ea6 <rosidl_runtime_c__String__init+0x26>
 8019e88:	a801      	add	r0, sp, #4
 8019e8a:	f7f6 fc77 	bl	801077c <rcutils_get_default_allocator>
 8019e8e:	9b01      	ldr	r3, [sp, #4]
 8019e90:	9905      	ldr	r1, [sp, #20]
 8019e92:	2001      	movs	r0, #1
 8019e94:	4798      	blx	r3
 8019e96:	6020      	str	r0, [r4, #0]
 8019e98:	b128      	cbz	r0, 8019ea6 <rosidl_runtime_c__String__init+0x26>
 8019e9a:	2100      	movs	r1, #0
 8019e9c:	2201      	movs	r2, #1
 8019e9e:	7001      	strb	r1, [r0, #0]
 8019ea0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019ea4:	4610      	mov	r0, r2
 8019ea6:	b006      	add	sp, #24
 8019ea8:	bd10      	pop	{r4, pc}
 8019eaa:	bf00      	nop

08019eac <rosidl_runtime_c__String__fini>:
 8019eac:	b320      	cbz	r0, 8019ef8 <rosidl_runtime_c__String__fini+0x4c>
 8019eae:	b510      	push	{r4, lr}
 8019eb0:	6803      	ldr	r3, [r0, #0]
 8019eb2:	b086      	sub	sp, #24
 8019eb4:	4604      	mov	r4, r0
 8019eb6:	b173      	cbz	r3, 8019ed6 <rosidl_runtime_c__String__fini+0x2a>
 8019eb8:	6883      	ldr	r3, [r0, #8]
 8019eba:	b1f3      	cbz	r3, 8019efa <rosidl_runtime_c__String__fini+0x4e>
 8019ebc:	a801      	add	r0, sp, #4
 8019ebe:	f7f6 fc5d 	bl	801077c <rcutils_get_default_allocator>
 8019ec2:	9b02      	ldr	r3, [sp, #8]
 8019ec4:	9905      	ldr	r1, [sp, #20]
 8019ec6:	6820      	ldr	r0, [r4, #0]
 8019ec8:	4798      	blx	r3
 8019eca:	2300      	movs	r3, #0
 8019ecc:	e9c4 3300 	strd	r3, r3, [r4]
 8019ed0:	60a3      	str	r3, [r4, #8]
 8019ed2:	b006      	add	sp, #24
 8019ed4:	bd10      	pop	{r4, pc}
 8019ed6:	6843      	ldr	r3, [r0, #4]
 8019ed8:	b9db      	cbnz	r3, 8019f12 <rosidl_runtime_c__String__fini+0x66>
 8019eda:	6883      	ldr	r3, [r0, #8]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d0f8      	beq.n	8019ed2 <rosidl_runtime_c__String__fini+0x26>
 8019ee0:	4b12      	ldr	r3, [pc, #72]	@ (8019f2c <rosidl_runtime_c__String__fini+0x80>)
 8019ee2:	4813      	ldr	r0, [pc, #76]	@ (8019f30 <rosidl_runtime_c__String__fini+0x84>)
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	2251      	movs	r2, #81	@ 0x51
 8019ee8:	68db      	ldr	r3, [r3, #12]
 8019eea:	2101      	movs	r1, #1
 8019eec:	f002 fb92 	bl	801c614 <fwrite>
 8019ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ef4:	f002 f84e 	bl	801bf94 <exit>
 8019ef8:	4770      	bx	lr
 8019efa:	4b0c      	ldr	r3, [pc, #48]	@ (8019f2c <rosidl_runtime_c__String__fini+0x80>)
 8019efc:	480d      	ldr	r0, [pc, #52]	@ (8019f34 <rosidl_runtime_c__String__fini+0x88>)
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	224c      	movs	r2, #76	@ 0x4c
 8019f02:	68db      	ldr	r3, [r3, #12]
 8019f04:	2101      	movs	r1, #1
 8019f06:	f002 fb85 	bl	801c614 <fwrite>
 8019f0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f0e:	f002 f841 	bl	801bf94 <exit>
 8019f12:	4b06      	ldr	r3, [pc, #24]	@ (8019f2c <rosidl_runtime_c__String__fini+0x80>)
 8019f14:	4808      	ldr	r0, [pc, #32]	@ (8019f38 <rosidl_runtime_c__String__fini+0x8c>)
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	224e      	movs	r2, #78	@ 0x4e
 8019f1a:	68db      	ldr	r3, [r3, #12]
 8019f1c:	2101      	movs	r1, #1
 8019f1e:	f002 fb79 	bl	801c614 <fwrite>
 8019f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f26:	f002 f835 	bl	801bf94 <exit>
 8019f2a:	bf00      	nop
 8019f2c:	2000090c 	.word	0x2000090c
 8019f30:	0801e098 	.word	0x0801e098
 8019f34:	0801dff8 	.word	0x0801dff8
 8019f38:	0801e048 	.word	0x0801e048

08019f3c <std_msgs__msg__Header__init>:
 8019f3c:	b570      	push	{r4, r5, r6, lr}
 8019f3e:	4605      	mov	r5, r0
 8019f40:	b1a8      	cbz	r0, 8019f6e <std_msgs__msg__Header__init+0x32>
 8019f42:	f000 f831 	bl	8019fa8 <builtin_interfaces__msg__Time__init>
 8019f46:	4604      	mov	r4, r0
 8019f48:	b140      	cbz	r0, 8019f5c <std_msgs__msg__Header__init+0x20>
 8019f4a:	f105 0608 	add.w	r6, r5, #8
 8019f4e:	4630      	mov	r0, r6
 8019f50:	f7ff ff96 	bl	8019e80 <rosidl_runtime_c__String__init>
 8019f54:	4604      	mov	r4, r0
 8019f56:	b168      	cbz	r0, 8019f74 <std_msgs__msg__Header__init+0x38>
 8019f58:	4620      	mov	r0, r4
 8019f5a:	bd70      	pop	{r4, r5, r6, pc}
 8019f5c:	4628      	mov	r0, r5
 8019f5e:	f000 f827 	bl	8019fb0 <builtin_interfaces__msg__Time__fini>
 8019f62:	f105 0008 	add.w	r0, r5, #8
 8019f66:	f7ff ffa1 	bl	8019eac <rosidl_runtime_c__String__fini>
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	bd70      	pop	{r4, r5, r6, pc}
 8019f6e:	4604      	mov	r4, r0
 8019f70:	4620      	mov	r0, r4
 8019f72:	bd70      	pop	{r4, r5, r6, pc}
 8019f74:	4628      	mov	r0, r5
 8019f76:	f000 f81b 	bl	8019fb0 <builtin_interfaces__msg__Time__fini>
 8019f7a:	4630      	mov	r0, r6
 8019f7c:	f7ff ff96 	bl	8019eac <rosidl_runtime_c__String__fini>
 8019f80:	e7ea      	b.n	8019f58 <std_msgs__msg__Header__init+0x1c>
 8019f82:	bf00      	nop

08019f84 <std_msgs__msg__Header__fini>:
 8019f84:	b148      	cbz	r0, 8019f9a <std_msgs__msg__Header__fini+0x16>
 8019f86:	b510      	push	{r4, lr}
 8019f88:	4604      	mov	r4, r0
 8019f8a:	f000 f811 	bl	8019fb0 <builtin_interfaces__msg__Time__fini>
 8019f8e:	f104 0008 	add.w	r0, r4, #8
 8019f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f96:	f7ff bf89 	b.w	8019eac <rosidl_runtime_c__String__fini>
 8019f9a:	4770      	bx	lr

08019f9c <std_msgs__msg__Int32__init>:
 8019f9c:	3800      	subs	r0, #0
 8019f9e:	bf18      	it	ne
 8019fa0:	2001      	movne	r0, #1
 8019fa2:	4770      	bx	lr

08019fa4 <std_msgs__msg__Int32__fini>:
 8019fa4:	4770      	bx	lr
 8019fa6:	bf00      	nop

08019fa8 <builtin_interfaces__msg__Time__init>:
 8019fa8:	3800      	subs	r0, #0
 8019faa:	bf18      	it	ne
 8019fac:	2001      	movne	r0, #1
 8019fae:	4770      	bx	lr

08019fb0 <builtin_interfaces__msg__Time__fini>:
 8019fb0:	4770      	bx	lr
 8019fb2:	bf00      	nop

08019fb4 <geometry_msgs__msg__PoseWithCovariance__init>:
 8019fb4:	b538      	push	{r3, r4, r5, lr}
 8019fb6:	4604      	mov	r4, r0
 8019fb8:	b128      	cbz	r0, 8019fc6 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 8019fba:	f001 f96b 	bl	801b294 <geometry_msgs__msg__Pose__init>
 8019fbe:	4605      	mov	r5, r0
 8019fc0:	b120      	cbz	r0, 8019fcc <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 8019fc2:	4628      	mov	r0, r5
 8019fc4:	bd38      	pop	{r3, r4, r5, pc}
 8019fc6:	4605      	mov	r5, r0
 8019fc8:	4628      	mov	r0, r5
 8019fca:	bd38      	pop	{r3, r4, r5, pc}
 8019fcc:	4620      	mov	r0, r4
 8019fce:	f001 f985 	bl	801b2dc <geometry_msgs__msg__Pose__fini>
 8019fd2:	4628      	mov	r0, r5
 8019fd4:	bd38      	pop	{r3, r4, r5, pc}
 8019fd6:	bf00      	nop

08019fd8 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8019fd8:	b108      	cbz	r0, 8019fde <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 8019fda:	f001 b97f 	b.w	801b2dc <geometry_msgs__msg__Pose__fini>
 8019fde:	4770      	bx	lr

08019fe0 <geometry_msgs__msg__TwistWithCovariance__init>:
 8019fe0:	b538      	push	{r3, r4, r5, lr}
 8019fe2:	4604      	mov	r4, r0
 8019fe4:	b128      	cbz	r0, 8019ff2 <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 8019fe6:	f7f8 fcc5 	bl	8012974 <geometry_msgs__msg__Twist__init>
 8019fea:	4605      	mov	r5, r0
 8019fec:	b120      	cbz	r0, 8019ff8 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 8019fee:	4628      	mov	r0, r5
 8019ff0:	bd38      	pop	{r3, r4, r5, pc}
 8019ff2:	4605      	mov	r5, r0
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	bd38      	pop	{r3, r4, r5, pc}
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	f7f8 fcdf 	bl	80129bc <geometry_msgs__msg__Twist__fini>
 8019ffe:	4628      	mov	r0, r5
 801a000:	bd38      	pop	{r3, r4, r5, pc}
 801a002:	bf00      	nop

0801a004 <geometry_msgs__msg__TwistWithCovariance__fini>:
 801a004:	b108      	cbz	r0, 801a00a <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 801a006:	f7f8 bcd9 	b.w	80129bc <geometry_msgs__msg__Twist__fini>
 801a00a:	4770      	bx	lr

0801a00c <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 801a00c:	f001 b942 	b.w	801b294 <geometry_msgs__msg__Pose__init>

0801a010 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 801a010:	f001 b964 	b.w	801b2dc <geometry_msgs__msg__Pose__fini>

0801a014 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 801a014:	b510      	push	{r4, lr}
 801a016:	f001 f989 	bl	801b32c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801a01a:	4c07      	ldr	r4, [pc, #28]	@ (801a038 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 801a01c:	60e0      	str	r0, [r4, #12]
 801a01e:	f000 f815 	bl	801a04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801a022:	4b06      	ldr	r3, [pc, #24]	@ (801a03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801a024:	64a0      	str	r0, [r4, #72]	@ 0x48
 801a026:	681a      	ldr	r2, [r3, #0]
 801a028:	b10a      	cbz	r2, 801a02e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 801a02a:	4804      	ldr	r0, [pc, #16]	@ (801a03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801a02c:	bd10      	pop	{r4, pc}
 801a02e:	4a04      	ldr	r2, [pc, #16]	@ (801a040 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 801a030:	4802      	ldr	r0, [pc, #8]	@ (801a03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801a032:	6812      	ldr	r2, [r2, #0]
 801a034:	601a      	str	r2, [r3, #0]
 801a036:	bd10      	pop	{r4, pc}
 801a038:	20000648 	.word	0x20000648
 801a03c:	200006c0 	.word	0x200006c0
 801a040:	20000310 	.word	0x20000310

0801a044 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 801a044:	f001 b958 	b.w	801b2f8 <geometry_msgs__msg__Quaternion__init>

0801a048 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 801a048:	f001 b96a 	b.w	801b320 <geometry_msgs__msg__Quaternion__fini>

0801a04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801a04c:	4b04      	ldr	r3, [pc, #16]	@ (801a060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801a04e:	681a      	ldr	r2, [r3, #0]
 801a050:	b10a      	cbz	r2, 801a056 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 801a052:	4803      	ldr	r0, [pc, #12]	@ (801a060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801a054:	4770      	bx	lr
 801a056:	4a03      	ldr	r2, [pc, #12]	@ (801a064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 801a058:	4801      	ldr	r0, [pc, #4]	@ (801a060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801a05a:	6812      	ldr	r2, [r2, #0]
 801a05c:	601a      	str	r2, [r3, #0]
 801a05e:	4770      	bx	lr
 801a060:	200007bc 	.word	0x200007bc
 801a064:	20000310 	.word	0x20000310

0801a068 <get_serialized_size_geometry_msgs__msg__Pose>:
 801a068:	b570      	push	{r4, r5, r6, lr}
 801a06a:	4604      	mov	r4, r0
 801a06c:	b148      	cbz	r0, 801a082 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 801a06e:	460d      	mov	r5, r1
 801a070:	f001 f96a 	bl	801b348 <get_serialized_size_geometry_msgs__msg__Point>
 801a074:	4606      	mov	r6, r0
 801a076:	1829      	adds	r1, r5, r0
 801a078:	f104 0018 	add.w	r0, r4, #24
 801a07c:	f000 f868 	bl	801a150 <get_serialized_size_geometry_msgs__msg__Quaternion>
 801a080:	4430      	add	r0, r6
 801a082:	bd70      	pop	{r4, r5, r6, pc}

0801a084 <_Pose__cdr_deserialize>:
 801a084:	b570      	push	{r4, r5, r6, lr}
 801a086:	460c      	mov	r4, r1
 801a088:	b189      	cbz	r1, 801a0ae <_Pose__cdr_deserialize+0x2a>
 801a08a:	4605      	mov	r5, r0
 801a08c:	f001 f9e8 	bl	801b460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801a090:	6843      	ldr	r3, [r0, #4]
 801a092:	4621      	mov	r1, r4
 801a094:	68db      	ldr	r3, [r3, #12]
 801a096:	4628      	mov	r0, r5
 801a098:	4798      	blx	r3
 801a09a:	f000 f90d 	bl	801a2b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801a09e:	6843      	ldr	r3, [r0, #4]
 801a0a0:	f104 0118 	add.w	r1, r4, #24
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	68db      	ldr	r3, [r3, #12]
 801a0a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a0ac:	4718      	bx	r3
 801a0ae:	4608      	mov	r0, r1
 801a0b0:	bd70      	pop	{r4, r5, r6, pc}
 801a0b2:	bf00      	nop

0801a0b4 <_Pose__cdr_serialize>:
 801a0b4:	b510      	push	{r4, lr}
 801a0b6:	b082      	sub	sp, #8
 801a0b8:	9101      	str	r1, [sp, #4]
 801a0ba:	b190      	cbz	r0, 801a0e2 <_Pose__cdr_serialize+0x2e>
 801a0bc:	4604      	mov	r4, r0
 801a0be:	f001 f9cf 	bl	801b460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 801a0c2:	6843      	ldr	r3, [r0, #4]
 801a0c4:	9901      	ldr	r1, [sp, #4]
 801a0c6:	689b      	ldr	r3, [r3, #8]
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	4798      	blx	r3
 801a0cc:	f000 f8f4 	bl	801a2b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801a0d0:	6843      	ldr	r3, [r0, #4]
 801a0d2:	9901      	ldr	r1, [sp, #4]
 801a0d4:	689b      	ldr	r3, [r3, #8]
 801a0d6:	f104 0018 	add.w	r0, r4, #24
 801a0da:	b002      	add	sp, #8
 801a0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0e0:	4718      	bx	r3
 801a0e2:	b002      	add	sp, #8
 801a0e4:	bd10      	pop	{r4, pc}
 801a0e6:	bf00      	nop

0801a0e8 <_Pose__get_serialized_size>:
 801a0e8:	b538      	push	{r3, r4, r5, lr}
 801a0ea:	4604      	mov	r4, r0
 801a0ec:	b148      	cbz	r0, 801a102 <_Pose__get_serialized_size+0x1a>
 801a0ee:	2100      	movs	r1, #0
 801a0f0:	f001 f92a 	bl	801b348 <get_serialized_size_geometry_msgs__msg__Point>
 801a0f4:	4605      	mov	r5, r0
 801a0f6:	4601      	mov	r1, r0
 801a0f8:	f104 0018 	add.w	r0, r4, #24
 801a0fc:	f000 f828 	bl	801a150 <get_serialized_size_geometry_msgs__msg__Quaternion>
 801a100:	4428      	add	r0, r5
 801a102:	bd38      	pop	{r3, r4, r5, pc}

0801a104 <_Pose__max_serialized_size>:
 801a104:	b510      	push	{r4, lr}
 801a106:	b082      	sub	sp, #8
 801a108:	2301      	movs	r3, #1
 801a10a:	2100      	movs	r1, #0
 801a10c:	f10d 0007 	add.w	r0, sp, #7
 801a110:	f88d 3007 	strb.w	r3, [sp, #7]
 801a114:	f001 f988 	bl	801b428 <max_serialized_size_geometry_msgs__msg__Point>
 801a118:	4604      	mov	r4, r0
 801a11a:	4601      	mov	r1, r0
 801a11c:	f10d 0007 	add.w	r0, sp, #7
 801a120:	f000 f8a8 	bl	801a274 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801a124:	4420      	add	r0, r4
 801a126:	b002      	add	sp, #8
 801a128:	bd10      	pop	{r4, pc}
 801a12a:	bf00      	nop

0801a12c <max_serialized_size_geometry_msgs__msg__Pose>:
 801a12c:	2301      	movs	r3, #1
 801a12e:	b570      	push	{r4, r5, r6, lr}
 801a130:	7003      	strb	r3, [r0, #0]
 801a132:	4605      	mov	r5, r0
 801a134:	460e      	mov	r6, r1
 801a136:	f001 f977 	bl	801b428 <max_serialized_size_geometry_msgs__msg__Point>
 801a13a:	4604      	mov	r4, r0
 801a13c:	1831      	adds	r1, r6, r0
 801a13e:	4628      	mov	r0, r5
 801a140:	f000 f898 	bl	801a274 <max_serialized_size_geometry_msgs__msg__Quaternion>
 801a144:	4420      	add	r0, r4
 801a146:	bd70      	pop	{r4, r5, r6, pc}

0801a148 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 801a148:	4800      	ldr	r0, [pc, #0]	@ (801a14c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 801a14a:	4770      	bx	lr
 801a14c:	200007c8 	.word	0x200007c8

0801a150 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 801a150:	b1f0      	cbz	r0, 801a190 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801a152:	b570      	push	{r4, r5, r6, lr}
 801a154:	460d      	mov	r5, r1
 801a156:	4628      	mov	r0, r5
 801a158:	2108      	movs	r1, #8
 801a15a:	f7f4 f913 	bl	800e384 <ucdr_alignment>
 801a15e:	f105 0308 	add.w	r3, r5, #8
 801a162:	181e      	adds	r6, r3, r0
 801a164:	2108      	movs	r1, #8
 801a166:	4630      	mov	r0, r6
 801a168:	f7f4 f90c 	bl	800e384 <ucdr_alignment>
 801a16c:	f100 0408 	add.w	r4, r0, #8
 801a170:	4434      	add	r4, r6
 801a172:	2108      	movs	r1, #8
 801a174:	4620      	mov	r0, r4
 801a176:	f7f4 f905 	bl	800e384 <ucdr_alignment>
 801a17a:	3008      	adds	r0, #8
 801a17c:	4404      	add	r4, r0
 801a17e:	2108      	movs	r1, #8
 801a180:	4620      	mov	r0, r4
 801a182:	f7f4 f8ff 	bl	800e384 <ucdr_alignment>
 801a186:	f1c5 0508 	rsb	r5, r5, #8
 801a18a:	4428      	add	r0, r5
 801a18c:	4420      	add	r0, r4
 801a18e:	bd70      	pop	{r4, r5, r6, pc}
 801a190:	4770      	bx	lr
 801a192:	bf00      	nop

0801a194 <_Quaternion__cdr_deserialize>:
 801a194:	b538      	push	{r3, r4, r5, lr}
 801a196:	460c      	mov	r4, r1
 801a198:	b199      	cbz	r1, 801a1c2 <_Quaternion__cdr_deserialize+0x2e>
 801a19a:	4605      	mov	r5, r0
 801a19c:	f7f3 ff06 	bl	800dfac <ucdr_deserialize_double>
 801a1a0:	f104 0108 	add.w	r1, r4, #8
 801a1a4:	4628      	mov	r0, r5
 801a1a6:	f7f3 ff01 	bl	800dfac <ucdr_deserialize_double>
 801a1aa:	f104 0110 	add.w	r1, r4, #16
 801a1ae:	4628      	mov	r0, r5
 801a1b0:	f7f3 fefc 	bl	800dfac <ucdr_deserialize_double>
 801a1b4:	f104 0118 	add.w	r1, r4, #24
 801a1b8:	4628      	mov	r0, r5
 801a1ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1be:	f7f3 bef5 	b.w	800dfac <ucdr_deserialize_double>
 801a1c2:	4608      	mov	r0, r1
 801a1c4:	bd38      	pop	{r3, r4, r5, pc}
 801a1c6:	bf00      	nop

0801a1c8 <_Quaternion__cdr_serialize>:
 801a1c8:	b1c0      	cbz	r0, 801a1fc <_Quaternion__cdr_serialize+0x34>
 801a1ca:	b538      	push	{r3, r4, r5, lr}
 801a1cc:	ed90 0b00 	vldr	d0, [r0]
 801a1d0:	460d      	mov	r5, r1
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	4608      	mov	r0, r1
 801a1d6:	f7f3 fd47 	bl	800dc68 <ucdr_serialize_double>
 801a1da:	ed94 0b02 	vldr	d0, [r4, #8]
 801a1de:	4628      	mov	r0, r5
 801a1e0:	f7f3 fd42 	bl	800dc68 <ucdr_serialize_double>
 801a1e4:	ed94 0b04 	vldr	d0, [r4, #16]
 801a1e8:	4628      	mov	r0, r5
 801a1ea:	f7f3 fd3d 	bl	800dc68 <ucdr_serialize_double>
 801a1ee:	ed94 0b06 	vldr	d0, [r4, #24]
 801a1f2:	4628      	mov	r0, r5
 801a1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1f8:	f7f3 bd36 	b.w	800dc68 <ucdr_serialize_double>
 801a1fc:	4770      	bx	lr
 801a1fe:	bf00      	nop

0801a200 <_Quaternion__get_serialized_size>:
 801a200:	b1d0      	cbz	r0, 801a238 <_Quaternion__get_serialized_size+0x38>
 801a202:	b538      	push	{r3, r4, r5, lr}
 801a204:	2108      	movs	r1, #8
 801a206:	2000      	movs	r0, #0
 801a208:	f7f4 f8bc 	bl	800e384 <ucdr_alignment>
 801a20c:	f100 0508 	add.w	r5, r0, #8
 801a210:	2108      	movs	r1, #8
 801a212:	4628      	mov	r0, r5
 801a214:	f7f4 f8b6 	bl	800e384 <ucdr_alignment>
 801a218:	f100 0408 	add.w	r4, r0, #8
 801a21c:	442c      	add	r4, r5
 801a21e:	2108      	movs	r1, #8
 801a220:	4620      	mov	r0, r4
 801a222:	f7f4 f8af 	bl	800e384 <ucdr_alignment>
 801a226:	3008      	adds	r0, #8
 801a228:	4404      	add	r4, r0
 801a22a:	2108      	movs	r1, #8
 801a22c:	4620      	mov	r0, r4
 801a22e:	f7f4 f8a9 	bl	800e384 <ucdr_alignment>
 801a232:	3008      	adds	r0, #8
 801a234:	4420      	add	r0, r4
 801a236:	bd38      	pop	{r3, r4, r5, pc}
 801a238:	4770      	bx	lr
 801a23a:	bf00      	nop

0801a23c <_Quaternion__max_serialized_size>:
 801a23c:	b538      	push	{r3, r4, r5, lr}
 801a23e:	2108      	movs	r1, #8
 801a240:	2000      	movs	r0, #0
 801a242:	f7f4 f89f 	bl	800e384 <ucdr_alignment>
 801a246:	f100 0508 	add.w	r5, r0, #8
 801a24a:	2108      	movs	r1, #8
 801a24c:	4628      	mov	r0, r5
 801a24e:	f7f4 f899 	bl	800e384 <ucdr_alignment>
 801a252:	f100 0408 	add.w	r4, r0, #8
 801a256:	442c      	add	r4, r5
 801a258:	2108      	movs	r1, #8
 801a25a:	4620      	mov	r0, r4
 801a25c:	f7f4 f892 	bl	800e384 <ucdr_alignment>
 801a260:	3008      	adds	r0, #8
 801a262:	4404      	add	r4, r0
 801a264:	2108      	movs	r1, #8
 801a266:	4620      	mov	r0, r4
 801a268:	f7f4 f88c 	bl	800e384 <ucdr_alignment>
 801a26c:	3008      	adds	r0, #8
 801a26e:	4420      	add	r0, r4
 801a270:	bd38      	pop	{r3, r4, r5, pc}
 801a272:	bf00      	nop

0801a274 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 801a274:	b570      	push	{r4, r5, r6, lr}
 801a276:	2301      	movs	r3, #1
 801a278:	460c      	mov	r4, r1
 801a27a:	7003      	strb	r3, [r0, #0]
 801a27c:	2108      	movs	r1, #8
 801a27e:	4620      	mov	r0, r4
 801a280:	f7f4 f880 	bl	800e384 <ucdr_alignment>
 801a284:	f104 0508 	add.w	r5, r4, #8
 801a288:	1946      	adds	r6, r0, r5
 801a28a:	2108      	movs	r1, #8
 801a28c:	4630      	mov	r0, r6
 801a28e:	f7f4 f879 	bl	800e384 <ucdr_alignment>
 801a292:	f100 0508 	add.w	r5, r0, #8
 801a296:	4435      	add	r5, r6
 801a298:	2108      	movs	r1, #8
 801a29a:	4628      	mov	r0, r5
 801a29c:	f7f4 f872 	bl	800e384 <ucdr_alignment>
 801a2a0:	3008      	adds	r0, #8
 801a2a2:	4405      	add	r5, r0
 801a2a4:	2108      	movs	r1, #8
 801a2a6:	4628      	mov	r0, r5
 801a2a8:	f7f4 f86c 	bl	800e384 <ucdr_alignment>
 801a2ac:	f1c4 0408 	rsb	r4, r4, #8
 801a2b0:	4420      	add	r0, r4
 801a2b2:	4428      	add	r0, r5
 801a2b4:	bd70      	pop	{r4, r5, r6, pc}
 801a2b6:	bf00      	nop

0801a2b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 801a2b8:	4800      	ldr	r0, [pc, #0]	@ (801a2bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 801a2ba:	4770      	bx	lr
 801a2bc:	200007f0 	.word	0x200007f0

0801a2c0 <ucdr_serialize_string>:
 801a2c0:	b510      	push	{r4, lr}
 801a2c2:	b082      	sub	sp, #8
 801a2c4:	4604      	mov	r4, r0
 801a2c6:	4608      	mov	r0, r1
 801a2c8:	9101      	str	r1, [sp, #4]
 801a2ca:	f7e5 ffab 	bl	8000224 <strlen>
 801a2ce:	9901      	ldr	r1, [sp, #4]
 801a2d0:	1c42      	adds	r2, r0, #1
 801a2d2:	4620      	mov	r0, r4
 801a2d4:	b002      	add	sp, #8
 801a2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2da:	f7f8 be9f 	b.w	801301c <ucdr_serialize_sequence_char>
 801a2de:	bf00      	nop

0801a2e0 <ucdr_deserialize_string>:
 801a2e0:	b500      	push	{lr}
 801a2e2:	b083      	sub	sp, #12
 801a2e4:	ab01      	add	r3, sp, #4
 801a2e6:	f7f8 feab 	bl	8013040 <ucdr_deserialize_sequence_char>
 801a2ea:	b003      	add	sp, #12
 801a2ec:	f85d fb04 	ldr.w	pc, [sp], #4

0801a2f0 <uxr_init_input_best_effort_stream>:
 801a2f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a2f4:	8003      	strh	r3, [r0, #0]
 801a2f6:	4770      	bx	lr

0801a2f8 <uxr_reset_input_best_effort_stream>:
 801a2f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a2fc:	8003      	strh	r3, [r0, #0]
 801a2fe:	4770      	bx	lr

0801a300 <uxr_receive_best_effort_message>:
 801a300:	b538      	push	{r3, r4, r5, lr}
 801a302:	4604      	mov	r4, r0
 801a304:	8800      	ldrh	r0, [r0, #0]
 801a306:	460d      	mov	r5, r1
 801a308:	f000 fd42 	bl	801ad90 <uxr_seq_num_cmp>
 801a30c:	4603      	mov	r3, r0
 801a30e:	2b00      	cmp	r3, #0
 801a310:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801a314:	bfb8      	it	lt
 801a316:	8025      	strhlt	r5, [r4, #0]
 801a318:	bd38      	pop	{r3, r4, r5, pc}
 801a31a:	bf00      	nop

0801a31c <on_full_input_buffer>:
 801a31c:	b570      	push	{r4, r5, r6, lr}
 801a31e:	4605      	mov	r5, r0
 801a320:	460c      	mov	r4, r1
 801a322:	682b      	ldr	r3, [r5, #0]
 801a324:	6809      	ldr	r1, [r1, #0]
 801a326:	8920      	ldrh	r0, [r4, #8]
 801a328:	6862      	ldr	r2, [r4, #4]
 801a32a:	fbb2 f2f0 	udiv	r2, r2, r0
 801a32e:	eba3 0c01 	sub.w	ip, r3, r1
 801a332:	fbbc fcf2 	udiv	ip, ip, r2
 801a336:	f10c 0c01 	add.w	ip, ip, #1
 801a33a:	fa1f f38c 	uxth.w	r3, ip
 801a33e:	fbb3 f6f0 	udiv	r6, r3, r0
 801a342:	fb00 3316 	mls	r3, r0, r6, r3
 801a346:	b29b      	uxth	r3, r3
 801a348:	fb02 f303 	mul.w	r3, r2, r3
 801a34c:	1d18      	adds	r0, r3, #4
 801a34e:	4408      	add	r0, r1
 801a350:	7d26      	ldrb	r6, [r4, #20]
 801a352:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a356:	b116      	cbz	r6, 801a35e <on_full_input_buffer+0x42>
 801a358:	2600      	movs	r6, #0
 801a35a:	f840 6c04 	str.w	r6, [r0, #-4]
 801a35e:	2a03      	cmp	r2, #3
 801a360:	d801      	bhi.n	801a366 <on_full_input_buffer+0x4a>
 801a362:	2001      	movs	r0, #1
 801a364:	bd70      	pop	{r4, r5, r6, pc}
 801a366:	3308      	adds	r3, #8
 801a368:	4419      	add	r1, r3
 801a36a:	4628      	mov	r0, r5
 801a36c:	692b      	ldr	r3, [r5, #16]
 801a36e:	3a04      	subs	r2, #4
 801a370:	f7f3 fffc 	bl	800e36c <ucdr_init_buffer_origin>
 801a374:	4628      	mov	r0, r5
 801a376:	4903      	ldr	r1, [pc, #12]	@ (801a384 <on_full_input_buffer+0x68>)
 801a378:	4622      	mov	r2, r4
 801a37a:	f7f3 ffd3 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 801a37e:	2000      	movs	r0, #0
 801a380:	bd70      	pop	{r4, r5, r6, pc}
 801a382:	bf00      	nop
 801a384:	0801a31d 	.word	0x0801a31d

0801a388 <uxr_init_input_reliable_stream>:
 801a388:	b500      	push	{lr}
 801a38a:	e9c0 1200 	strd	r1, r2, [r0]
 801a38e:	f04f 0e00 	mov.w	lr, #0
 801a392:	9a01      	ldr	r2, [sp, #4]
 801a394:	8103      	strh	r3, [r0, #8]
 801a396:	6102      	str	r2, [r0, #16]
 801a398:	f880 e014 	strb.w	lr, [r0, #20]
 801a39c:	b1d3      	cbz	r3, 801a3d4 <uxr_init_input_reliable_stream+0x4c>
 801a39e:	f8c1 e000 	str.w	lr, [r1]
 801a3a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3a6:	f1bc 0f01 	cmp.w	ip, #1
 801a3aa:	d913      	bls.n	801a3d4 <uxr_init_input_reliable_stream+0x4c>
 801a3ac:	2301      	movs	r3, #1
 801a3ae:	fbb3 f1fc 	udiv	r1, r3, ip
 801a3b2:	fb0c 3111 	mls	r1, ip, r1, r3
 801a3b6:	b289      	uxth	r1, r1
 801a3b8:	6842      	ldr	r2, [r0, #4]
 801a3ba:	fbb2 f2fc 	udiv	r2, r2, ip
 801a3be:	fb01 f202 	mul.w	r2, r1, r2
 801a3c2:	6801      	ldr	r1, [r0, #0]
 801a3c4:	f841 e002 	str.w	lr, [r1, r2]
 801a3c8:	3301      	adds	r3, #1
 801a3ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	459c      	cmp	ip, r3
 801a3d2:	d8ec      	bhi.n	801a3ae <uxr_init_input_reliable_stream+0x26>
 801a3d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a3d8:	60c3      	str	r3, [r0, #12]
 801a3da:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3de:	bf00      	nop

0801a3e0 <uxr_reset_input_reliable_stream>:
 801a3e0:	8901      	ldrh	r1, [r0, #8]
 801a3e2:	b1e9      	cbz	r1, 801a420 <uxr_reset_input_reliable_stream+0x40>
 801a3e4:	f04f 0c00 	mov.w	ip, #0
 801a3e8:	b500      	push	{lr}
 801a3ea:	4663      	mov	r3, ip
 801a3ec:	46e6      	mov	lr, ip
 801a3ee:	fbb3 f2f1 	udiv	r2, r3, r1
 801a3f2:	fb01 3312 	mls	r3, r1, r2, r3
 801a3f6:	b29b      	uxth	r3, r3
 801a3f8:	6842      	ldr	r2, [r0, #4]
 801a3fa:	fbb2 f2f1 	udiv	r2, r2, r1
 801a3fe:	fb02 f303 	mul.w	r3, r2, r3
 801a402:	6802      	ldr	r2, [r0, #0]
 801a404:	f842 e003 	str.w	lr, [r2, r3]
 801a408:	f10c 0c01 	add.w	ip, ip, #1
 801a40c:	8901      	ldrh	r1, [r0, #8]
 801a40e:	fa1f f38c 	uxth.w	r3, ip
 801a412:	4299      	cmp	r1, r3
 801a414:	d8eb      	bhi.n	801a3ee <uxr_reset_input_reliable_stream+0xe>
 801a416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a41a:	60c3      	str	r3, [r0, #12]
 801a41c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a424:	60c3      	str	r3, [r0, #12]
 801a426:	4770      	bx	lr

0801a428 <uxr_receive_reliable_message>:
 801a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a42c:	4604      	mov	r4, r0
 801a42e:	460d      	mov	r5, r1
 801a430:	8901      	ldrh	r1, [r0, #8]
 801a432:	8980      	ldrh	r0, [r0, #12]
 801a434:	4690      	mov	r8, r2
 801a436:	461f      	mov	r7, r3
 801a438:	f000 fca2 	bl	801ad80 <uxr_seq_num_add>
 801a43c:	4629      	mov	r1, r5
 801a43e:	4606      	mov	r6, r0
 801a440:	89a0      	ldrh	r0, [r4, #12]
 801a442:	f000 fca5 	bl	801ad90 <uxr_seq_num_cmp>
 801a446:	2800      	cmp	r0, #0
 801a448:	db0a      	blt.n	801a460 <uxr_receive_reliable_message+0x38>
 801a44a:	2600      	movs	r6, #0
 801a44c:	89e0      	ldrh	r0, [r4, #14]
 801a44e:	4629      	mov	r1, r5
 801a450:	f000 fc9e 	bl	801ad90 <uxr_seq_num_cmp>
 801a454:	2800      	cmp	r0, #0
 801a456:	da00      	bge.n	801a45a <uxr_receive_reliable_message+0x32>
 801a458:	81e5      	strh	r5, [r4, #14]
 801a45a:	4630      	mov	r0, r6
 801a45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a460:	4630      	mov	r0, r6
 801a462:	4629      	mov	r1, r5
 801a464:	f000 fc94 	bl	801ad90 <uxr_seq_num_cmp>
 801a468:	2800      	cmp	r0, #0
 801a46a:	dbee      	blt.n	801a44a <uxr_receive_reliable_message+0x22>
 801a46c:	6923      	ldr	r3, [r4, #16]
 801a46e:	4640      	mov	r0, r8
 801a470:	4798      	blx	r3
 801a472:	2101      	movs	r1, #1
 801a474:	4681      	mov	r9, r0
 801a476:	89a0      	ldrh	r0, [r4, #12]
 801a478:	f000 fc82 	bl	801ad80 <uxr_seq_num_add>
 801a47c:	f1b9 0f00 	cmp.w	r9, #0
 801a480:	d101      	bne.n	801a486 <uxr_receive_reliable_message+0x5e>
 801a482:	4285      	cmp	r5, r0
 801a484:	d047      	beq.n	801a516 <uxr_receive_reliable_message+0xee>
 801a486:	8922      	ldrh	r2, [r4, #8]
 801a488:	fbb5 f0f2 	udiv	r0, r5, r2
 801a48c:	fb02 5010 	mls	r0, r2, r0, r5
 801a490:	b280      	uxth	r0, r0
 801a492:	6863      	ldr	r3, [r4, #4]
 801a494:	fbb3 f3f2 	udiv	r3, r3, r2
 801a498:	fb00 f303 	mul.w	r3, r0, r3
 801a49c:	6820      	ldr	r0, [r4, #0]
 801a49e:	3304      	adds	r3, #4
 801a4a0:	4418      	add	r0, r3
 801a4a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d1cf      	bne.n	801a44a <uxr_receive_reliable_message+0x22>
 801a4aa:	4641      	mov	r1, r8
 801a4ac:	463a      	mov	r2, r7
 801a4ae:	f002 fb0e 	bl	801cace <memcpy>
 801a4b2:	8921      	ldrh	r1, [r4, #8]
 801a4b4:	fbb5 f2f1 	udiv	r2, r5, r1
 801a4b8:	fb01 5212 	mls	r2, r1, r2, r5
 801a4bc:	b292      	uxth	r2, r2
 801a4be:	6863      	ldr	r3, [r4, #4]
 801a4c0:	fbb3 f3f1 	udiv	r3, r3, r1
 801a4c4:	fb02 f303 	mul.w	r3, r2, r3
 801a4c8:	6822      	ldr	r2, [r4, #0]
 801a4ca:	50d7      	str	r7, [r2, r3]
 801a4cc:	9a08      	ldr	r2, [sp, #32]
 801a4ce:	2301      	movs	r3, #1
 801a4d0:	7013      	strb	r3, [r2, #0]
 801a4d2:	f1b9 0f00 	cmp.w	r9, #0
 801a4d6:	d0b8      	beq.n	801a44a <uxr_receive_reliable_message+0x22>
 801a4d8:	89a6      	ldrh	r6, [r4, #12]
 801a4da:	4630      	mov	r0, r6
 801a4dc:	2101      	movs	r1, #1
 801a4de:	f000 fc4f 	bl	801ad80 <uxr_seq_num_add>
 801a4e2:	8922      	ldrh	r2, [r4, #8]
 801a4e4:	6863      	ldr	r3, [r4, #4]
 801a4e6:	fbb3 f3f2 	udiv	r3, r3, r2
 801a4ea:	4606      	mov	r6, r0
 801a4ec:	fbb0 f0f2 	udiv	r0, r0, r2
 801a4f0:	fb02 6010 	mls	r0, r2, r0, r6
 801a4f4:	b280      	uxth	r0, r0
 801a4f6:	fb00 f303 	mul.w	r3, r0, r3
 801a4fa:	6820      	ldr	r0, [r4, #0]
 801a4fc:	3304      	adds	r3, #4
 801a4fe:	4418      	add	r0, r3
 801a500:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a504:	2b00      	cmp	r3, #0
 801a506:	d0a0      	beq.n	801a44a <uxr_receive_reliable_message+0x22>
 801a508:	6923      	ldr	r3, [r4, #16]
 801a50a:	4798      	blx	r3
 801a50c:	2802      	cmp	r0, #2
 801a50e:	d008      	beq.n	801a522 <uxr_receive_reliable_message+0xfa>
 801a510:	2801      	cmp	r0, #1
 801a512:	d0e2      	beq.n	801a4da <uxr_receive_reliable_message+0xb2>
 801a514:	e799      	b.n	801a44a <uxr_receive_reliable_message+0x22>
 801a516:	9b08      	ldr	r3, [sp, #32]
 801a518:	81a5      	strh	r5, [r4, #12]
 801a51a:	2601      	movs	r6, #1
 801a51c:	f883 9000 	strb.w	r9, [r3]
 801a520:	e794      	b.n	801a44c <uxr_receive_reliable_message+0x24>
 801a522:	2601      	movs	r6, #1
 801a524:	e792      	b.n	801a44c <uxr_receive_reliable_message+0x24>
 801a526:	bf00      	nop

0801a528 <uxr_next_input_reliable_buffer_available>:
 801a528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a52c:	4604      	mov	r4, r0
 801a52e:	460f      	mov	r7, r1
 801a530:	8980      	ldrh	r0, [r0, #12]
 801a532:	2101      	movs	r1, #1
 801a534:	4690      	mov	r8, r2
 801a536:	f000 fc23 	bl	801ad80 <uxr_seq_num_add>
 801a53a:	8922      	ldrh	r2, [r4, #8]
 801a53c:	fbb0 f6f2 	udiv	r6, r0, r2
 801a540:	fb02 0616 	mls	r6, r2, r6, r0
 801a544:	b2b6      	uxth	r6, r6
 801a546:	6863      	ldr	r3, [r4, #4]
 801a548:	fbb3 f3f2 	udiv	r3, r3, r2
 801a54c:	fb06 f303 	mul.w	r3, r6, r3
 801a550:	6826      	ldr	r6, [r4, #0]
 801a552:	3304      	adds	r3, #4
 801a554:	441e      	add	r6, r3
 801a556:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a55a:	f1b9 0f00 	cmp.w	r9, #0
 801a55e:	d023      	beq.n	801a5a8 <uxr_next_input_reliable_buffer_available+0x80>
 801a560:	6923      	ldr	r3, [r4, #16]
 801a562:	4605      	mov	r5, r0
 801a564:	4630      	mov	r0, r6
 801a566:	4798      	blx	r3
 801a568:	4682      	mov	sl, r0
 801a56a:	b300      	cbz	r0, 801a5ae <uxr_next_input_reliable_buffer_available+0x86>
 801a56c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a570:	2101      	movs	r1, #1
 801a572:	4650      	mov	r0, sl
 801a574:	f000 fc04 	bl	801ad80 <uxr_seq_num_add>
 801a578:	8921      	ldrh	r1, [r4, #8]
 801a57a:	fbb0 f2f1 	udiv	r2, r0, r1
 801a57e:	4682      	mov	sl, r0
 801a580:	fb01 0212 	mls	r2, r1, r2, r0
 801a584:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a588:	b292      	uxth	r2, r2
 801a58a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a58e:	fb02 f303 	mul.w	r3, r2, r3
 801a592:	3304      	adds	r3, #4
 801a594:	4418      	add	r0, r3
 801a596:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a59a:	b12b      	cbz	r3, 801a5a8 <uxr_next_input_reliable_buffer_available+0x80>
 801a59c:	6923      	ldr	r3, [r4, #16]
 801a59e:	4798      	blx	r3
 801a5a0:	2802      	cmp	r0, #2
 801a5a2:	d01b      	beq.n	801a5dc <uxr_next_input_reliable_buffer_available+0xb4>
 801a5a4:	2801      	cmp	r0, #1
 801a5a6:	d0e3      	beq.n	801a570 <uxr_next_input_reliable_buffer_available+0x48>
 801a5a8:	2000      	movs	r0, #0
 801a5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5ae:	464a      	mov	r2, r9
 801a5b0:	4631      	mov	r1, r6
 801a5b2:	4638      	mov	r0, r7
 801a5b4:	f7f3 fee2 	bl	800e37c <ucdr_init_buffer>
 801a5b8:	8921      	ldrh	r1, [r4, #8]
 801a5ba:	fbb5 f2f1 	udiv	r2, r5, r1
 801a5be:	fb01 5212 	mls	r2, r1, r2, r5
 801a5c2:	b292      	uxth	r2, r2
 801a5c4:	6863      	ldr	r3, [r4, #4]
 801a5c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a5ca:	fb02 f303 	mul.w	r3, r2, r3
 801a5ce:	6822      	ldr	r2, [r4, #0]
 801a5d0:	f842 a003 	str.w	sl, [r2, r3]
 801a5d4:	2001      	movs	r0, #1
 801a5d6:	81a5      	strh	r5, [r4, #12]
 801a5d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a5dc:	8920      	ldrh	r0, [r4, #8]
 801a5de:	fbb5 f3f0 	udiv	r3, r5, r0
 801a5e2:	fb00 5513 	mls	r5, r0, r3, r5
 801a5e6:	b2ad      	uxth	r5, r5
 801a5e8:	6863      	ldr	r3, [r4, #4]
 801a5ea:	fbb3 f3f0 	udiv	r3, r3, r0
 801a5ee:	fb03 f505 	mul.w	r5, r3, r5
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	5158      	str	r0, [r3, r5]
 801a5f8:	eb06 0108 	add.w	r1, r6, r8
 801a5fc:	eba9 0208 	sub.w	r2, r9, r8
 801a600:	4638      	mov	r0, r7
 801a602:	f7f3 febb 	bl	800e37c <ucdr_init_buffer>
 801a606:	4638      	mov	r0, r7
 801a608:	4903      	ldr	r1, [pc, #12]	@ (801a618 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a60a:	4622      	mov	r2, r4
 801a60c:	f7f3 fe8a 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 801a610:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a614:	2001      	movs	r0, #1
 801a616:	e7c8      	b.n	801a5aa <uxr_next_input_reliable_buffer_available+0x82>
 801a618:	0801a31d 	.word	0x0801a31d

0801a61c <uxr_process_heartbeat>:
 801a61c:	b538      	push	{r3, r4, r5, lr}
 801a61e:	4611      	mov	r1, r2
 801a620:	4604      	mov	r4, r0
 801a622:	89c0      	ldrh	r0, [r0, #14]
 801a624:	4615      	mov	r5, r2
 801a626:	f000 fbb3 	bl	801ad90 <uxr_seq_num_cmp>
 801a62a:	2800      	cmp	r0, #0
 801a62c:	bfb8      	it	lt
 801a62e:	81e5      	strhlt	r5, [r4, #14]
 801a630:	bd38      	pop	{r3, r4, r5, pc}
 801a632:	bf00      	nop

0801a634 <uxr_compute_acknack>:
 801a634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a638:	8903      	ldrh	r3, [r0, #8]
 801a63a:	8985      	ldrh	r5, [r0, #12]
 801a63c:	4604      	mov	r4, r0
 801a63e:	460e      	mov	r6, r1
 801a640:	b1d3      	cbz	r3, 801a678 <uxr_compute_acknack+0x44>
 801a642:	4628      	mov	r0, r5
 801a644:	2701      	movs	r7, #1
 801a646:	e003      	b.n	801a650 <uxr_compute_acknack+0x1c>
 801a648:	4567      	cmp	r7, ip
 801a64a:	d215      	bcs.n	801a678 <uxr_compute_acknack+0x44>
 801a64c:	89a0      	ldrh	r0, [r4, #12]
 801a64e:	3701      	adds	r7, #1
 801a650:	b2b9      	uxth	r1, r7
 801a652:	f000 fb95 	bl	801ad80 <uxr_seq_num_add>
 801a656:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a65a:	fbb0 f3fc 	udiv	r3, r0, ip
 801a65e:	fb0c 0313 	mls	r3, ip, r3, r0
 801a662:	b29a      	uxth	r2, r3
 801a664:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a668:	fbb3 f3fc 	udiv	r3, r3, ip
 801a66c:	fb02 f303 	mul.w	r3, r2, r3
 801a670:	58cb      	ldr	r3, [r1, r3]
 801a672:	2b00      	cmp	r3, #0
 801a674:	d1e8      	bne.n	801a648 <uxr_compute_acknack+0x14>
 801a676:	4605      	mov	r5, r0
 801a678:	8035      	strh	r5, [r6, #0]
 801a67a:	2101      	movs	r1, #1
 801a67c:	4628      	mov	r0, r5
 801a67e:	89e7      	ldrh	r7, [r4, #14]
 801a680:	f000 fb82 	bl	801ad88 <uxr_seq_num_sub>
 801a684:	4601      	mov	r1, r0
 801a686:	4638      	mov	r0, r7
 801a688:	f000 fb7e 	bl	801ad88 <uxr_seq_num_sub>
 801a68c:	4605      	mov	r5, r0
 801a68e:	b318      	cbz	r0, 801a6d8 <uxr_compute_acknack+0xa4>
 801a690:	f04f 0900 	mov.w	r9, #0
 801a694:	464f      	mov	r7, r9
 801a696:	f04f 0801 	mov.w	r8, #1
 801a69a:	fa1f f189 	uxth.w	r1, r9
 801a69e:	8830      	ldrh	r0, [r6, #0]
 801a6a0:	f000 fb6e 	bl	801ad80 <uxr_seq_num_add>
 801a6a4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a6a8:	fbb0 f3fc 	udiv	r3, r0, ip
 801a6ac:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a6b0:	fb03 001c 	mls	r0, r3, ip, r0
 801a6b4:	b283      	uxth	r3, r0
 801a6b6:	fbb2 f2fc 	udiv	r2, r2, ip
 801a6ba:	fb02 f303 	mul.w	r3, r2, r3
 801a6be:	fa08 f209 	lsl.w	r2, r8, r9
 801a6c2:	58cb      	ldr	r3, [r1, r3]
 801a6c4:	f109 0901 	add.w	r9, r9, #1
 801a6c8:	b90b      	cbnz	r3, 801a6ce <uxr_compute_acknack+0x9a>
 801a6ca:	4317      	orrs	r7, r2
 801a6cc:	b2bf      	uxth	r7, r7
 801a6ce:	454d      	cmp	r5, r9
 801a6d0:	d1e3      	bne.n	801a69a <uxr_compute_acknack+0x66>
 801a6d2:	4638      	mov	r0, r7
 801a6d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6d8:	4607      	mov	r7, r0
 801a6da:	4638      	mov	r0, r7
 801a6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a6e0 <uxr_init_output_best_effort_stream>:
 801a6e0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a6e4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a6e8:	6001      	str	r1, [r0, #0]
 801a6ea:	7303      	strb	r3, [r0, #12]
 801a6ec:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a6f0:	4770      	bx	lr
 801a6f2:	bf00      	nop

0801a6f4 <uxr_reset_output_best_effort_stream>:
 801a6f4:	7b02      	ldrb	r2, [r0, #12]
 801a6f6:	6042      	str	r2, [r0, #4]
 801a6f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a6fc:	81c3      	strh	r3, [r0, #14]
 801a6fe:	4770      	bx	lr

0801a700 <uxr_prepare_best_effort_buffer_to_write>:
 801a700:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a702:	4604      	mov	r4, r0
 801a704:	b083      	sub	sp, #12
 801a706:	6840      	ldr	r0, [r0, #4]
 801a708:	460d      	mov	r5, r1
 801a70a:	4616      	mov	r6, r2
 801a70c:	f7fb f8cc 	bl	80158a8 <uxr_submessage_padding>
 801a710:	6863      	ldr	r3, [r4, #4]
 801a712:	4418      	add	r0, r3
 801a714:	68a3      	ldr	r3, [r4, #8]
 801a716:	1942      	adds	r2, r0, r5
 801a718:	4293      	cmp	r3, r2
 801a71a:	bf2c      	ite	cs
 801a71c:	2701      	movcs	r7, #1
 801a71e:	2700      	movcc	r7, #0
 801a720:	d202      	bcs.n	801a728 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a722:	4638      	mov	r0, r7
 801a724:	b003      	add	sp, #12
 801a726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a728:	9000      	str	r0, [sp, #0]
 801a72a:	6821      	ldr	r1, [r4, #0]
 801a72c:	4630      	mov	r0, r6
 801a72e:	2300      	movs	r3, #0
 801a730:	f7f3 fe12 	bl	800e358 <ucdr_init_buffer_origin_offset>
 801a734:	6861      	ldr	r1, [r4, #4]
 801a736:	4638      	mov	r0, r7
 801a738:	4429      	add	r1, r5
 801a73a:	6061      	str	r1, [r4, #4]
 801a73c:	b003      	add	sp, #12
 801a73e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a740 <uxr_prepare_best_effort_buffer_to_send>:
 801a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a744:	4604      	mov	r4, r0
 801a746:	461d      	mov	r5, r3
 801a748:	6840      	ldr	r0, [r0, #4]
 801a74a:	7b23      	ldrb	r3, [r4, #12]
 801a74c:	4298      	cmp	r0, r3
 801a74e:	bf8c      	ite	hi
 801a750:	2601      	movhi	r6, #1
 801a752:	2600      	movls	r6, #0
 801a754:	d802      	bhi.n	801a75c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a756:	4630      	mov	r0, r6
 801a758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a75c:	4688      	mov	r8, r1
 801a75e:	89e0      	ldrh	r0, [r4, #14]
 801a760:	2101      	movs	r1, #1
 801a762:	4617      	mov	r7, r2
 801a764:	f000 fb0c 	bl	801ad80 <uxr_seq_num_add>
 801a768:	6823      	ldr	r3, [r4, #0]
 801a76a:	81e0      	strh	r0, [r4, #14]
 801a76c:	8028      	strh	r0, [r5, #0]
 801a76e:	f8c8 3000 	str.w	r3, [r8]
 801a772:	6863      	ldr	r3, [r4, #4]
 801a774:	603b      	str	r3, [r7, #0]
 801a776:	7b23      	ldrb	r3, [r4, #12]
 801a778:	6063      	str	r3, [r4, #4]
 801a77a:	4630      	mov	r0, r6
 801a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a780 <on_full_output_buffer>:
 801a780:	b538      	push	{r3, r4, r5, lr}
 801a782:	6802      	ldr	r2, [r0, #0]
 801a784:	460c      	mov	r4, r1
 801a786:	6809      	ldr	r1, [r1, #0]
 801a788:	8923      	ldrh	r3, [r4, #8]
 801a78a:	eba2 0c01 	sub.w	ip, r2, r1
 801a78e:	6862      	ldr	r2, [r4, #4]
 801a790:	fbb2 f2f3 	udiv	r2, r2, r3
 801a794:	fbbc fcf2 	udiv	ip, ip, r2
 801a798:	f10c 0c01 	add.w	ip, ip, #1
 801a79c:	fa1f fc8c 	uxth.w	ip, ip
 801a7a0:	fbbc fef3 	udiv	lr, ip, r3
 801a7a4:	fb03 c31e 	mls	r3, r3, lr, ip
 801a7a8:	b29b      	uxth	r3, r3
 801a7aa:	fb02 f303 	mul.w	r3, r2, r3
 801a7ae:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a7b2:	58ca      	ldr	r2, [r1, r3]
 801a7b4:	4463      	add	r3, ip
 801a7b6:	eba2 020c 	sub.w	r2, r2, ip
 801a7ba:	3308      	adds	r3, #8
 801a7bc:	4605      	mov	r5, r0
 801a7be:	4419      	add	r1, r3
 801a7c0:	3a04      	subs	r2, #4
 801a7c2:	6903      	ldr	r3, [r0, #16]
 801a7c4:	f7f3 fdd2 	bl	800e36c <ucdr_init_buffer_origin>
 801a7c8:	4628      	mov	r0, r5
 801a7ca:	4903      	ldr	r1, [pc, #12]	@ (801a7d8 <on_full_output_buffer+0x58>)
 801a7cc:	4622      	mov	r2, r4
 801a7ce:	f7f3 fda9 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 801a7d2:	2000      	movs	r0, #0
 801a7d4:	bd38      	pop	{r3, r4, r5, pc}
 801a7d6:	bf00      	nop
 801a7d8:	0801a781 	.word	0x0801a781

0801a7dc <uxr_init_output_reliable_stream>:
 801a7dc:	b410      	push	{r4}
 801a7de:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a7e2:	8103      	strh	r3, [r0, #8]
 801a7e4:	e9c0 1200 	strd	r1, r2, [r0]
 801a7e8:	f880 c00c 	strb.w	ip, [r0, #12]
 801a7ec:	b1d3      	cbz	r3, 801a824 <uxr_init_output_reliable_stream+0x48>
 801a7ee:	f8c1 c000 	str.w	ip, [r1]
 801a7f2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a7f6:	f1bc 0f01 	cmp.w	ip, #1
 801a7fa:	d913      	bls.n	801a824 <uxr_init_output_reliable_stream+0x48>
 801a7fc:	2301      	movs	r3, #1
 801a7fe:	fbb3 f1fc 	udiv	r1, r3, ip
 801a802:	fb0c 3111 	mls	r1, ip, r1, r3
 801a806:	b289      	uxth	r1, r1
 801a808:	6842      	ldr	r2, [r0, #4]
 801a80a:	6804      	ldr	r4, [r0, #0]
 801a80c:	fbb2 f2fc 	udiv	r2, r2, ip
 801a810:	fb01 f202 	mul.w	r2, r1, r2
 801a814:	7b01      	ldrb	r1, [r0, #12]
 801a816:	50a1      	str	r1, [r4, r2]
 801a818:	3301      	adds	r3, #1
 801a81a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a81e:	b29b      	uxth	r3, r3
 801a820:	459c      	cmp	ip, r3
 801a822:	d8ec      	bhi.n	801a7fe <uxr_init_output_reliable_stream+0x22>
 801a824:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a828:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a82c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a830:	4905      	ldr	r1, [pc, #20]	@ (801a848 <uxr_init_output_reliable_stream+0x6c>)
 801a832:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a836:	f8c0 100e 	str.w	r1, [r0, #14]
 801a83a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a83e:	2300      	movs	r3, #0
 801a840:	8242      	strh	r2, [r0, #18]
 801a842:	8403      	strh	r3, [r0, #32]
 801a844:	4770      	bx	lr
 801a846:	bf00      	nop
 801a848:	ffff0000 	.word	0xffff0000

0801a84c <uxr_reset_output_reliable_stream>:
 801a84c:	8901      	ldrh	r1, [r0, #8]
 801a84e:	b1b1      	cbz	r1, 801a87e <uxr_reset_output_reliable_stream+0x32>
 801a850:	f04f 0c00 	mov.w	ip, #0
 801a854:	4663      	mov	r3, ip
 801a856:	fbb3 f2f1 	udiv	r2, r3, r1
 801a85a:	fb01 3312 	mls	r3, r1, r2, r3
 801a85e:	b29b      	uxth	r3, r3
 801a860:	6842      	ldr	r2, [r0, #4]
 801a862:	fbb2 f2f1 	udiv	r2, r2, r1
 801a866:	6801      	ldr	r1, [r0, #0]
 801a868:	fb02 f303 	mul.w	r3, r2, r3
 801a86c:	7b02      	ldrb	r2, [r0, #12]
 801a86e:	50ca      	str	r2, [r1, r3]
 801a870:	f10c 0c01 	add.w	ip, ip, #1
 801a874:	8901      	ldrh	r1, [r0, #8]
 801a876:	fa1f f38c 	uxth.w	r3, ip
 801a87a:	4299      	cmp	r1, r3
 801a87c:	d8eb      	bhi.n	801a856 <uxr_reset_output_reliable_stream+0xa>
 801a87e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a882:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a886:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a88a:	4904      	ldr	r1, [pc, #16]	@ (801a89c <uxr_reset_output_reliable_stream+0x50>)
 801a88c:	f8c0 100e 	str.w	r1, [r0, #14]
 801a890:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a894:	2300      	movs	r3, #0
 801a896:	8242      	strh	r2, [r0, #18]
 801a898:	8403      	strh	r3, [r0, #32]
 801a89a:	4770      	bx	lr
 801a89c:	ffff0000 	.word	0xffff0000

0801a8a0 <uxr_prepare_reliable_buffer_to_write>:
 801a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	b091      	sub	sp, #68	@ 0x44
 801a8a8:	8900      	ldrh	r0, [r0, #8]
 801a8aa:	89e6      	ldrh	r6, [r4, #14]
 801a8ac:	6823      	ldr	r3, [r4, #0]
 801a8ae:	9204      	str	r2, [sp, #16]
 801a8b0:	fbb6 f2f0 	udiv	r2, r6, r0
 801a8b4:	fb00 6212 	mls	r2, r0, r2, r6
 801a8b8:	b292      	uxth	r2, r2
 801a8ba:	6865      	ldr	r5, [r4, #4]
 801a8bc:	fbb5 f5f0 	udiv	r5, r5, r0
 801a8c0:	fb05 3202 	mla	r2, r5, r2, r3
 801a8c4:	3204      	adds	r2, #4
 801a8c6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a8ca:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a8ce:	9203      	str	r2, [sp, #12]
 801a8d0:	468b      	mov	fp, r1
 801a8d2:	1f2f      	subs	r7, r5, #4
 801a8d4:	2800      	cmp	r0, #0
 801a8d6:	f000 814c 	beq.w	801ab72 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a8da:	f04f 0c00 	mov.w	ip, #0
 801a8de:	46e2      	mov	sl, ip
 801a8e0:	4661      	mov	r1, ip
 801a8e2:	fbb1 f2f0 	udiv	r2, r1, r0
 801a8e6:	fb00 1212 	mls	r2, r0, r2, r1
 801a8ea:	b292      	uxth	r2, r2
 801a8ec:	fb05 f202 	mul.w	r2, r5, r2
 801a8f0:	f10c 0c01 	add.w	ip, ip, #1
 801a8f4:	589a      	ldr	r2, [r3, r2]
 801a8f6:	454a      	cmp	r2, r9
 801a8f8:	bf08      	it	eq
 801a8fa:	f10a 0a01 	addeq.w	sl, sl, #1
 801a8fe:	fa1f f18c 	uxth.w	r1, ip
 801a902:	bf08      	it	eq
 801a904:	fa1f fa8a 	uxtheq.w	sl, sl
 801a908:	4281      	cmp	r1, r0
 801a90a:	d3ea      	bcc.n	801a8e2 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a90c:	4640      	mov	r0, r8
 801a90e:	2104      	movs	r1, #4
 801a910:	f8cd a014 	str.w	sl, [sp, #20]
 801a914:	f7f3 fd36 	bl	800e384 <ucdr_alignment>
 801a918:	4480      	add	r8, r0
 801a91a:	eb08 020b 	add.w	r2, r8, fp
 801a91e:	42ba      	cmp	r2, r7
 801a920:	f240 80cd 	bls.w	801aabe <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a924:	7b22      	ldrb	r2, [r4, #12]
 801a926:	445a      	add	r2, fp
 801a928:	42ba      	cmp	r2, r7
 801a92a:	f240 80b5 	bls.w	801aa98 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a92e:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a932:	33fc      	adds	r3, #252	@ 0xfc
 801a934:	b2ba      	uxth	r2, r7
 801a936:	4413      	add	r3, r2
 801a938:	b29b      	uxth	r3, r3
 801a93a:	fb0a f903 	mul.w	r9, sl, r3
 801a93e:	45d9      	cmp	r9, fp
 801a940:	9305      	str	r3, [sp, #20]
 801a942:	9306      	str	r3, [sp, #24]
 801a944:	f0c0 80b7 	bcc.w	801aab6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a948:	f108 0304 	add.w	r3, r8, #4
 801a94c:	42bb      	cmp	r3, r7
 801a94e:	f080 80db 	bcs.w	801ab08 <uxr_prepare_reliable_buffer_to_write+0x268>
 801a952:	f1a2 0904 	sub.w	r9, r2, #4
 801a956:	eba9 0908 	sub.w	r9, r9, r8
 801a95a:	9b05      	ldr	r3, [sp, #20]
 801a95c:	fa1f f989 	uxth.w	r9, r9
 801a960:	ebab 0b09 	sub.w	fp, fp, r9
 801a964:	fbbb f2f3 	udiv	r2, fp, r3
 801a968:	fb03 b312 	mls	r3, r3, r2, fp
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	f000 80c8 	beq.w	801ab02 <uxr_prepare_reliable_buffer_to_write+0x262>
 801a972:	3201      	adds	r2, #1
 801a974:	b292      	uxth	r2, r2
 801a976:	9306      	str	r3, [sp, #24]
 801a978:	4552      	cmp	r2, sl
 801a97a:	f200 809c 	bhi.w	801aab6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a97e:	f10d 0b20 	add.w	fp, sp, #32
 801a982:	2a00      	cmp	r2, #0
 801a984:	d042      	beq.n	801aa0c <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a986:	f8cd 801c 	str.w	r8, [sp, #28]
 801a98a:	f04f 0a00 	mov.w	sl, #0
 801a98e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a992:	9505      	str	r5, [sp, #20]
 801a994:	f10d 0b20 	add.w	fp, sp, #32
 801a998:	4615      	mov	r5, r2
 801a99a:	e000      	b.n	801a99e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a99c:	46c1      	mov	r9, r8
 801a99e:	8920      	ldrh	r0, [r4, #8]
 801a9a0:	fbb6 f2f0 	udiv	r2, r6, r0
 801a9a4:	fb00 6112 	mls	r1, r0, r2, r6
 801a9a8:	b28a      	uxth	r2, r1
 801a9aa:	6863      	ldr	r3, [r4, #4]
 801a9ac:	fbb3 f1f0 	udiv	r1, r3, r0
 801a9b0:	6823      	ldr	r3, [r4, #0]
 801a9b2:	fb02 f101 	mul.w	r1, r2, r1
 801a9b6:	3104      	adds	r1, #4
 801a9b8:	4419      	add	r1, r3
 801a9ba:	4658      	mov	r0, fp
 801a9bc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a9c0:	9200      	str	r2, [sp, #0]
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	463a      	mov	r2, r7
 801a9c6:	f7f3 fcc7 	bl	800e358 <ucdr_init_buffer_origin_offset>
 801a9ca:	464a      	mov	r2, r9
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	210d      	movs	r1, #13
 801a9d0:	4658      	mov	r0, fp
 801a9d2:	f7fa ff29 	bl	8015828 <uxr_buffer_submessage_header>
 801a9d6:	8921      	ldrh	r1, [r4, #8]
 801a9d8:	fbb6 f2f1 	udiv	r2, r6, r1
 801a9dc:	fb01 6212 	mls	r2, r1, r2, r6
 801a9e0:	b292      	uxth	r2, r2
 801a9e2:	6863      	ldr	r3, [r4, #4]
 801a9e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801a9e8:	fb02 f303 	mul.w	r3, r2, r3
 801a9ec:	6822      	ldr	r2, [r4, #0]
 801a9ee:	4630      	mov	r0, r6
 801a9f0:	50d7      	str	r7, [r2, r3]
 801a9f2:	2101      	movs	r1, #1
 801a9f4:	f000 f9c4 	bl	801ad80 <uxr_seq_num_add>
 801a9f8:	f10a 0a01 	add.w	sl, sl, #1
 801a9fc:	fa1f f38a 	uxth.w	r3, sl
 801aa00:	429d      	cmp	r5, r3
 801aa02:	4606      	mov	r6, r0
 801aa04:	d8ca      	bhi.n	801a99c <uxr_prepare_reliable_buffer_to_write+0xfc>
 801aa06:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801aa0a:	9d05      	ldr	r5, [sp, #20]
 801aa0c:	8920      	ldrh	r0, [r4, #8]
 801aa0e:	fbb6 f3f0 	udiv	r3, r6, r0
 801aa12:	fb00 6313 	mls	r3, r0, r3, r6
 801aa16:	b299      	uxth	r1, r3
 801aa18:	6863      	ldr	r3, [r4, #4]
 801aa1a:	fbb3 f3f0 	udiv	r3, r3, r0
 801aa1e:	fb01 f303 	mul.w	r3, r1, r3
 801aa22:	6821      	ldr	r1, [r4, #0]
 801aa24:	3304      	adds	r3, #4
 801aa26:	4419      	add	r1, r3
 801aa28:	463a      	mov	r2, r7
 801aa2a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801aa2e:	9000      	str	r0, [sp, #0]
 801aa30:	2300      	movs	r3, #0
 801aa32:	4658      	mov	r0, fp
 801aa34:	f7f3 fc90 	bl	800e358 <ucdr_init_buffer_origin_offset>
 801aa38:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801aa3c:	4658      	mov	r0, fp
 801aa3e:	fa1f f289 	uxth.w	r2, r9
 801aa42:	2302      	movs	r3, #2
 801aa44:	210d      	movs	r1, #13
 801aa46:	f7fa feef 	bl	8015828 <uxr_buffer_submessage_header>
 801aa4a:	9b03      	ldr	r3, [sp, #12]
 801aa4c:	8927      	ldrh	r7, [r4, #8]
 801aa4e:	7b20      	ldrb	r0, [r4, #12]
 801aa50:	f108 0104 	add.w	r1, r8, #4
 801aa54:	440b      	add	r3, r1
 801aa56:	4619      	mov	r1, r3
 801aa58:	fbb6 f3f7 	udiv	r3, r6, r7
 801aa5c:	fb07 6313 	mls	r3, r7, r3, r6
 801aa60:	f1a5 0208 	sub.w	r2, r5, #8
 801aa64:	b29d      	uxth	r5, r3
 801aa66:	3004      	adds	r0, #4
 801aa68:	6863      	ldr	r3, [r4, #4]
 801aa6a:	fbb3 f3f7 	udiv	r3, r3, r7
 801aa6e:	fb05 f303 	mul.w	r3, r5, r3
 801aa72:	6825      	ldr	r5, [r4, #0]
 801aa74:	4448      	add	r0, r9
 801aa76:	50e8      	str	r0, [r5, r3]
 801aa78:	9d04      	ldr	r5, [sp, #16]
 801aa7a:	eba2 0208 	sub.w	r2, r2, r8
 801aa7e:	4628      	mov	r0, r5
 801aa80:	f7f3 fc7c 	bl	800e37c <ucdr_init_buffer>
 801aa84:	4628      	mov	r0, r5
 801aa86:	493c      	ldr	r1, [pc, #240]	@ (801ab78 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801aa88:	4622      	mov	r2, r4
 801aa8a:	f7f3 fc4b 	bl	800e324 <ucdr_set_on_full_buffer_callback>
 801aa8e:	2001      	movs	r0, #1
 801aa90:	81e6      	strh	r6, [r4, #14]
 801aa92:	b011      	add	sp, #68	@ 0x44
 801aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa98:	2101      	movs	r1, #1
 801aa9a:	89e0      	ldrh	r0, [r4, #14]
 801aa9c:	f000 f970 	bl	801ad80 <uxr_seq_num_add>
 801aaa0:	8921      	ldrh	r1, [r4, #8]
 801aaa2:	4605      	mov	r5, r0
 801aaa4:	8a60      	ldrh	r0, [r4, #18]
 801aaa6:	f000 f96b 	bl	801ad80 <uxr_seq_num_add>
 801aaaa:	4601      	mov	r1, r0
 801aaac:	4628      	mov	r0, r5
 801aaae:	f000 f96f 	bl	801ad90 <uxr_seq_num_cmp>
 801aab2:	2800      	cmp	r0, #0
 801aab4:	dd42      	ble.n	801ab3c <uxr_prepare_reliable_buffer_to_write+0x29c>
 801aab6:	2000      	movs	r0, #0
 801aab8:	b011      	add	sp, #68	@ 0x44
 801aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aabe:	8921      	ldrh	r1, [r4, #8]
 801aac0:	8a60      	ldrh	r0, [r4, #18]
 801aac2:	9205      	str	r2, [sp, #20]
 801aac4:	f000 f95c 	bl	801ad80 <uxr_seq_num_add>
 801aac8:	4601      	mov	r1, r0
 801aaca:	4630      	mov	r0, r6
 801aacc:	f000 f960 	bl	801ad90 <uxr_seq_num_cmp>
 801aad0:	2800      	cmp	r0, #0
 801aad2:	9a05      	ldr	r2, [sp, #20]
 801aad4:	dcef      	bgt.n	801aab6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801aad6:	8927      	ldrh	r7, [r4, #8]
 801aad8:	fbb6 f3f7 	udiv	r3, r6, r7
 801aadc:	fb07 6313 	mls	r3, r7, r3, r6
 801aae0:	b29d      	uxth	r5, r3
 801aae2:	6863      	ldr	r3, [r4, #4]
 801aae4:	6824      	ldr	r4, [r4, #0]
 801aae6:	fbb3 f3f7 	udiv	r3, r3, r7
 801aaea:	fb05 f303 	mul.w	r3, r5, r3
 801aaee:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801aaf2:	50e2      	str	r2, [r4, r3]
 801aaf4:	2300      	movs	r3, #0
 801aaf6:	f8cd 8000 	str.w	r8, [sp]
 801aafa:	f7f3 fc2d 	bl	800e358 <ucdr_init_buffer_origin_offset>
 801aafe:	2001      	movs	r0, #1
 801ab00:	e7da      	b.n	801aab8 <uxr_prepare_reliable_buffer_to_write+0x218>
 801ab02:	b293      	uxth	r3, r2
 801ab04:	461a      	mov	r2, r3
 801ab06:	e737      	b.n	801a978 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801ab08:	4630      	mov	r0, r6
 801ab0a:	2101      	movs	r1, #1
 801ab0c:	9207      	str	r2, [sp, #28]
 801ab0e:	f000 f937 	bl	801ad80 <uxr_seq_num_add>
 801ab12:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ab16:	fbb0 f1fc 	udiv	r1, r0, ip
 801ab1a:	fb0c 0111 	mls	r1, ip, r1, r0
 801ab1e:	4606      	mov	r6, r0
 801ab20:	b288      	uxth	r0, r1
 801ab22:	6863      	ldr	r3, [r4, #4]
 801ab24:	fbb3 f1fc 	udiv	r1, r3, ip
 801ab28:	6823      	ldr	r3, [r4, #0]
 801ab2a:	9a07      	ldr	r2, [sp, #28]
 801ab2c:	fb00 f101 	mul.w	r1, r0, r1
 801ab30:	3104      	adds	r1, #4
 801ab32:	440b      	add	r3, r1
 801ab34:	9303      	str	r3, [sp, #12]
 801ab36:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801ab3a:	e70a      	b.n	801a952 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801ab3c:	8921      	ldrh	r1, [r4, #8]
 801ab3e:	fbb5 f3f1 	udiv	r3, r5, r1
 801ab42:	fb01 5313 	mls	r3, r1, r3, r5
 801ab46:	b29a      	uxth	r2, r3
 801ab48:	6863      	ldr	r3, [r4, #4]
 801ab4a:	fbb3 f3f1 	udiv	r3, r3, r1
 801ab4e:	6821      	ldr	r1, [r4, #0]
 801ab50:	9804      	ldr	r0, [sp, #16]
 801ab52:	fb02 f303 	mul.w	r3, r2, r3
 801ab56:	3304      	adds	r3, #4
 801ab58:	7b22      	ldrb	r2, [r4, #12]
 801ab5a:	4419      	add	r1, r3
 801ab5c:	445a      	add	r2, fp
 801ab5e:	f841 2c04 	str.w	r2, [r1, #-4]
 801ab62:	7b23      	ldrb	r3, [r4, #12]
 801ab64:	9300      	str	r3, [sp, #0]
 801ab66:	2300      	movs	r3, #0
 801ab68:	f7f3 fbf6 	bl	800e358 <ucdr_init_buffer_origin_offset>
 801ab6c:	81e5      	strh	r5, [r4, #14]
 801ab6e:	2001      	movs	r0, #1
 801ab70:	e7a2      	b.n	801aab8 <uxr_prepare_reliable_buffer_to_write+0x218>
 801ab72:	4682      	mov	sl, r0
 801ab74:	e6ca      	b.n	801a90c <uxr_prepare_reliable_buffer_to_write+0x6c>
 801ab76:	bf00      	nop
 801ab78:	0801a781 	.word	0x0801a781

0801ab7c <uxr_prepare_next_reliable_buffer_to_send>:
 801ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab7e:	4604      	mov	r4, r0
 801ab80:	460f      	mov	r7, r1
 801ab82:	8a00      	ldrh	r0, [r0, #16]
 801ab84:	2101      	movs	r1, #1
 801ab86:	4616      	mov	r6, r2
 801ab88:	461d      	mov	r5, r3
 801ab8a:	f000 f8f9 	bl	801ad80 <uxr_seq_num_add>
 801ab8e:	8028      	strh	r0, [r5, #0]
 801ab90:	8922      	ldrh	r2, [r4, #8]
 801ab92:	fbb0 f3f2 	udiv	r3, r0, r2
 801ab96:	fb02 0c13 	mls	ip, r2, r3, r0
 801ab9a:	fa1f fc8c 	uxth.w	ip, ip
 801ab9e:	6863      	ldr	r3, [r4, #4]
 801aba0:	fbb3 f3f2 	udiv	r3, r3, r2
 801aba4:	fb0c fc03 	mul.w	ip, ip, r3
 801aba8:	6823      	ldr	r3, [r4, #0]
 801abaa:	89e1      	ldrh	r1, [r4, #14]
 801abac:	f10c 0c04 	add.w	ip, ip, #4
 801abb0:	4463      	add	r3, ip
 801abb2:	603b      	str	r3, [r7, #0]
 801abb4:	6823      	ldr	r3, [r4, #0]
 801abb6:	449c      	add	ip, r3
 801abb8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801abbc:	6033      	str	r3, [r6, #0]
 801abbe:	f000 f8e7 	bl	801ad90 <uxr_seq_num_cmp>
 801abc2:	2800      	cmp	r0, #0
 801abc4:	dd01      	ble.n	801abca <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801abc6:	2000      	movs	r0, #0
 801abc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abca:	7b23      	ldrb	r3, [r4, #12]
 801abcc:	6832      	ldr	r2, [r6, #0]
 801abce:	429a      	cmp	r2, r3
 801abd0:	d9f9      	bls.n	801abc6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801abd2:	8a61      	ldrh	r1, [r4, #18]
 801abd4:	8a20      	ldrh	r0, [r4, #16]
 801abd6:	f000 f8d7 	bl	801ad88 <uxr_seq_num_sub>
 801abda:	8923      	ldrh	r3, [r4, #8]
 801abdc:	4283      	cmp	r3, r0
 801abde:	d0f2      	beq.n	801abc6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801abe0:	8828      	ldrh	r0, [r5, #0]
 801abe2:	89e3      	ldrh	r3, [r4, #14]
 801abe4:	8220      	strh	r0, [r4, #16]
 801abe6:	4298      	cmp	r0, r3
 801abe8:	d001      	beq.n	801abee <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801abea:	2001      	movs	r0, #1
 801abec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abee:	2101      	movs	r1, #1
 801abf0:	f000 f8c6 	bl	801ad80 <uxr_seq_num_add>
 801abf4:	81e0      	strh	r0, [r4, #14]
 801abf6:	2001      	movs	r0, #1
 801abf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abfa:	bf00      	nop

0801abfc <uxr_update_output_stream_heartbeat_timestamp>:
 801abfc:	b570      	push	{r4, r5, r6, lr}
 801abfe:	8a01      	ldrh	r1, [r0, #16]
 801ac00:	4604      	mov	r4, r0
 801ac02:	8a40      	ldrh	r0, [r0, #18]
 801ac04:	4615      	mov	r5, r2
 801ac06:	461e      	mov	r6, r3
 801ac08:	f000 f8c2 	bl	801ad90 <uxr_seq_num_cmp>
 801ac0c:	2800      	cmp	r0, #0
 801ac0e:	db07      	blt.n	801ac20 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801ac10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ac14:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801ac18:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801ac1c:	2000      	movs	r0, #0
 801ac1e:	bd70      	pop	{r4, r5, r6, pc}
 801ac20:	f894 0020 	ldrb.w	r0, [r4, #32]
 801ac24:	b940      	cbnz	r0, 801ac38 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801ac26:	2301      	movs	r3, #1
 801ac28:	f884 3020 	strb.w	r3, [r4, #32]
 801ac2c:	3564      	adds	r5, #100	@ 0x64
 801ac2e:	f146 0600 	adc.w	r6, r6, #0
 801ac32:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801ac36:	bd70      	pop	{r4, r5, r6, pc}
 801ac38:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801ac3c:	4295      	cmp	r5, r2
 801ac3e:	eb76 0303 	sbcs.w	r3, r6, r3
 801ac42:	bfa5      	ittet	ge
 801ac44:	3001      	addge	r0, #1
 801ac46:	f884 0020 	strbge.w	r0, [r4, #32]
 801ac4a:	2000      	movlt	r0, #0
 801ac4c:	2001      	movge	r0, #1
 801ac4e:	e7ed      	b.n	801ac2c <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801ac50 <uxr_begin_output_nack_buffer_it>:
 801ac50:	8a40      	ldrh	r0, [r0, #18]
 801ac52:	4770      	bx	lr

0801ac54 <uxr_next_reliable_nack_buffer_to_send>:
 801ac54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac58:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801ac5c:	b082      	sub	sp, #8
 801ac5e:	f1b8 0f00 	cmp.w	r8, #0
 801ac62:	d011      	beq.n	801ac88 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801ac64:	4604      	mov	r4, r0
 801ac66:	8818      	ldrh	r0, [r3, #0]
 801ac68:	460e      	mov	r6, r1
 801ac6a:	4617      	mov	r7, r2
 801ac6c:	461d      	mov	r5, r3
 801ac6e:	2101      	movs	r1, #1
 801ac70:	f000 f886 	bl	801ad80 <uxr_seq_num_add>
 801ac74:	8028      	strh	r0, [r5, #0]
 801ac76:	8a21      	ldrh	r1, [r4, #16]
 801ac78:	f000 f88a 	bl	801ad90 <uxr_seq_num_cmp>
 801ac7c:	2800      	cmp	r0, #0
 801ac7e:	dd07      	ble.n	801ac90 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801ac80:	f04f 0800 	mov.w	r8, #0
 801ac84:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801ac88:	4640      	mov	r0, r8
 801ac8a:	b002      	add	sp, #8
 801ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac90:	8921      	ldrh	r1, [r4, #8]
 801ac92:	8828      	ldrh	r0, [r5, #0]
 801ac94:	6823      	ldr	r3, [r4, #0]
 801ac96:	fbb0 f2f1 	udiv	r2, r0, r1
 801ac9a:	fb01 0c12 	mls	ip, r1, r2, r0
 801ac9e:	fa1f f28c 	uxth.w	r2, ip
 801aca2:	9301      	str	r3, [sp, #4]
 801aca4:	6863      	ldr	r3, [r4, #4]
 801aca6:	fbb3 fcf1 	udiv	ip, r3, r1
 801acaa:	9b01      	ldr	r3, [sp, #4]
 801acac:	fb02 fc0c 	mul.w	ip, r2, ip
 801acb0:	f10c 0c04 	add.w	ip, ip, #4
 801acb4:	4463      	add	r3, ip
 801acb6:	6033      	str	r3, [r6, #0]
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	4463      	add	r3, ip
 801acbc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801acc0:	603b      	str	r3, [r7, #0]
 801acc2:	7b22      	ldrb	r2, [r4, #12]
 801acc4:	429a      	cmp	r2, r3
 801acc6:	d0d2      	beq.n	801ac6e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801acc8:	4640      	mov	r0, r8
 801acca:	b002      	add	sp, #8
 801accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801acd0 <uxr_process_acknack>:
 801acd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acd2:	4604      	mov	r4, r0
 801acd4:	460e      	mov	r6, r1
 801acd6:	4610      	mov	r0, r2
 801acd8:	2101      	movs	r1, #1
 801acda:	f000 f855 	bl	801ad88 <uxr_seq_num_sub>
 801acde:	8a61      	ldrh	r1, [r4, #18]
 801ace0:	f000 f852 	bl	801ad88 <uxr_seq_num_sub>
 801ace4:	b1c0      	cbz	r0, 801ad18 <uxr_process_acknack+0x48>
 801ace6:	4605      	mov	r5, r0
 801ace8:	2700      	movs	r7, #0
 801acea:	2101      	movs	r1, #1
 801acec:	8a60      	ldrh	r0, [r4, #18]
 801acee:	f000 f847 	bl	801ad80 <uxr_seq_num_add>
 801acf2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801acf6:	fbb0 f1fc 	udiv	r1, r0, ip
 801acfa:	e9d4 2300 	ldrd	r2, r3, [r4]
 801acfe:	fb0c 0111 	mls	r1, ip, r1, r0
 801ad02:	b289      	uxth	r1, r1
 801ad04:	3701      	adds	r7, #1
 801ad06:	fbb3 f3fc 	udiv	r3, r3, ip
 801ad0a:	fb01 f303 	mul.w	r3, r1, r3
 801ad0e:	42bd      	cmp	r5, r7
 801ad10:	7b21      	ldrb	r1, [r4, #12]
 801ad12:	8260      	strh	r0, [r4, #18]
 801ad14:	50d1      	str	r1, [r2, r3]
 801ad16:	d1e8      	bne.n	801acea <uxr_process_acknack+0x1a>
 801ad18:	3e00      	subs	r6, #0
 801ad1a:	f04f 0300 	mov.w	r3, #0
 801ad1e:	bf18      	it	ne
 801ad20:	2601      	movne	r6, #1
 801ad22:	f884 3020 	strb.w	r3, [r4, #32]
 801ad26:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ad2c <uxr_is_output_up_to_date>:
 801ad2c:	8a01      	ldrh	r1, [r0, #16]
 801ad2e:	8a40      	ldrh	r0, [r0, #18]
 801ad30:	b508      	push	{r3, lr}
 801ad32:	f000 f82d 	bl	801ad90 <uxr_seq_num_cmp>
 801ad36:	fab0 f080 	clz	r0, r0
 801ad3a:	0940      	lsrs	r0, r0, #5
 801ad3c:	bd08      	pop	{r3, pc}
 801ad3e:	bf00      	nop

0801ad40 <get_available_free_slots>:
 801ad40:	8902      	ldrh	r2, [r0, #8]
 801ad42:	b1da      	cbz	r2, 801ad7c <get_available_free_slots+0x3c>
 801ad44:	b530      	push	{r4, r5, lr}
 801ad46:	2100      	movs	r1, #0
 801ad48:	6843      	ldr	r3, [r0, #4]
 801ad4a:	6805      	ldr	r5, [r0, #0]
 801ad4c:	7b04      	ldrb	r4, [r0, #12]
 801ad4e:	fbb3 fef2 	udiv	lr, r3, r2
 801ad52:	4608      	mov	r0, r1
 801ad54:	460b      	mov	r3, r1
 801ad56:	fbb3 fcf2 	udiv	ip, r3, r2
 801ad5a:	fb02 331c 	mls	r3, r2, ip, r3
 801ad5e:	b29b      	uxth	r3, r3
 801ad60:	fb0e f303 	mul.w	r3, lr, r3
 801ad64:	3101      	adds	r1, #1
 801ad66:	f855 c003 	ldr.w	ip, [r5, r3]
 801ad6a:	4564      	cmp	r4, ip
 801ad6c:	bf08      	it	eq
 801ad6e:	3001      	addeq	r0, #1
 801ad70:	b28b      	uxth	r3, r1
 801ad72:	bf08      	it	eq
 801ad74:	b280      	uxtheq	r0, r0
 801ad76:	4293      	cmp	r3, r2
 801ad78:	d3ed      	bcc.n	801ad56 <get_available_free_slots+0x16>
 801ad7a:	bd30      	pop	{r4, r5, pc}
 801ad7c:	4610      	mov	r0, r2
 801ad7e:	4770      	bx	lr

0801ad80 <uxr_seq_num_add>:
 801ad80:	4408      	add	r0, r1
 801ad82:	b280      	uxth	r0, r0
 801ad84:	4770      	bx	lr
 801ad86:	bf00      	nop

0801ad88 <uxr_seq_num_sub>:
 801ad88:	1a40      	subs	r0, r0, r1
 801ad8a:	b280      	uxth	r0, r0
 801ad8c:	4770      	bx	lr
 801ad8e:	bf00      	nop

0801ad90 <uxr_seq_num_cmp>:
 801ad90:	4288      	cmp	r0, r1
 801ad92:	d011      	beq.n	801adb8 <uxr_seq_num_cmp+0x28>
 801ad94:	d309      	bcc.n	801adaa <uxr_seq_num_cmp+0x1a>
 801ad96:	4288      	cmp	r0, r1
 801ad98:	d910      	bls.n	801adbc <uxr_seq_num_cmp+0x2c>
 801ad9a:	1a40      	subs	r0, r0, r1
 801ad9c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801ada0:	bfd4      	ite	le
 801ada2:	2001      	movle	r0, #1
 801ada4:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801ada8:	4770      	bx	lr
 801adaa:	1a0b      	subs	r3, r1, r0
 801adac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801adb0:	daf1      	bge.n	801ad96 <uxr_seq_num_cmp+0x6>
 801adb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801adb6:	4770      	bx	lr
 801adb8:	2000      	movs	r0, #0
 801adba:	4770      	bx	lr
 801adbc:	2001      	movs	r0, #1
 801adbe:	4770      	bx	lr

0801adc0 <rcl_get_default_domain_id>:
 801adc0:	b530      	push	{r4, r5, lr}
 801adc2:	b083      	sub	sp, #12
 801adc4:	2300      	movs	r3, #0
 801adc6:	9300      	str	r3, [sp, #0]
 801adc8:	b1d0      	cbz	r0, 801ae00 <rcl_get_default_domain_id+0x40>
 801adca:	4604      	mov	r4, r0
 801adcc:	4669      	mov	r1, sp
 801adce:	4815      	ldr	r0, [pc, #84]	@ (801ae24 <rcl_get_default_domain_id+0x64>)
 801add0:	f7f5 fd94 	bl	80108fc <rcutils_get_env>
 801add4:	4602      	mov	r2, r0
 801add6:	b110      	cbz	r0, 801adde <rcl_get_default_domain_id+0x1e>
 801add8:	2001      	movs	r0, #1
 801adda:	b003      	add	sp, #12
 801addc:	bd30      	pop	{r4, r5, pc}
 801adde:	9b00      	ldr	r3, [sp, #0]
 801ade0:	b18b      	cbz	r3, 801ae06 <rcl_get_default_domain_id+0x46>
 801ade2:	7818      	ldrb	r0, [r3, #0]
 801ade4:	2800      	cmp	r0, #0
 801ade6:	d0f8      	beq.n	801adda <rcl_get_default_domain_id+0x1a>
 801ade8:	a901      	add	r1, sp, #4
 801adea:	4618      	mov	r0, r3
 801adec:	9201      	str	r2, [sp, #4]
 801adee:	f001 faf9 	bl	801c3e4 <strtoul>
 801adf2:	4605      	mov	r5, r0
 801adf4:	b150      	cbz	r0, 801ae0c <rcl_get_default_domain_id+0x4c>
 801adf6:	1c43      	adds	r3, r0, #1
 801adf8:	d00d      	beq.n	801ae16 <rcl_get_default_domain_id+0x56>
 801adfa:	6025      	str	r5, [r4, #0]
 801adfc:	2000      	movs	r0, #0
 801adfe:	e7ec      	b.n	801adda <rcl_get_default_domain_id+0x1a>
 801ae00:	200b      	movs	r0, #11
 801ae02:	b003      	add	sp, #12
 801ae04:	bd30      	pop	{r4, r5, pc}
 801ae06:	4618      	mov	r0, r3
 801ae08:	b003      	add	sp, #12
 801ae0a:	bd30      	pop	{r4, r5, pc}
 801ae0c:	9b01      	ldr	r3, [sp, #4]
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d0f2      	beq.n	801adfa <rcl_get_default_domain_id+0x3a>
 801ae14:	e7e0      	b.n	801add8 <rcl_get_default_domain_id+0x18>
 801ae16:	f001 fe25 	bl	801ca64 <__errno>
 801ae1a:	6803      	ldr	r3, [r0, #0]
 801ae1c:	2b22      	cmp	r3, #34	@ 0x22
 801ae1e:	d1ec      	bne.n	801adfa <rcl_get_default_domain_id+0x3a>
 801ae20:	e7da      	b.n	801add8 <rcl_get_default_domain_id+0x18>
 801ae22:	bf00      	nop
 801ae24:	0801e11c 	.word	0x0801e11c

0801ae28 <rcl_expand_topic_name>:
 801ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae2c:	b08b      	sub	sp, #44	@ 0x2c
 801ae2e:	9306      	str	r3, [sp, #24]
 801ae30:	2800      	cmp	r0, #0
 801ae32:	f000 80ad 	beq.w	801af90 <rcl_expand_topic_name+0x168>
 801ae36:	460e      	mov	r6, r1
 801ae38:	2900      	cmp	r1, #0
 801ae3a:	f000 80a9 	beq.w	801af90 <rcl_expand_topic_name+0x168>
 801ae3e:	4617      	mov	r7, r2
 801ae40:	2a00      	cmp	r2, #0
 801ae42:	f000 80a5 	beq.w	801af90 <rcl_expand_topic_name+0x168>
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	f000 80a2 	beq.w	801af90 <rcl_expand_topic_name+0x168>
 801ae4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	f000 809e 	beq.w	801af90 <rcl_expand_topic_name+0x168>
 801ae54:	2200      	movs	r2, #0
 801ae56:	a909      	add	r1, sp, #36	@ 0x24
 801ae58:	4680      	mov	r8, r0
 801ae5a:	f000 f949 	bl	801b0f0 <rcl_validate_topic_name>
 801ae5e:	4604      	mov	r4, r0
 801ae60:	2800      	cmp	r0, #0
 801ae62:	f040 8096 	bne.w	801af92 <rcl_expand_topic_name+0x16a>
 801ae66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	f040 809a 	bne.w	801afa2 <rcl_expand_topic_name+0x17a>
 801ae6e:	4602      	mov	r2, r0
 801ae70:	a909      	add	r1, sp, #36	@ 0x24
 801ae72:	4630      	mov	r0, r6
 801ae74:	f7f5 ffe0 	bl	8010e38 <rmw_validate_node_name>
 801ae78:	2800      	cmp	r0, #0
 801ae7a:	f040 808e 	bne.w	801af9a <rcl_expand_topic_name+0x172>
 801ae7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae80:	2a00      	cmp	r2, #0
 801ae82:	f040 8093 	bne.w	801afac <rcl_expand_topic_name+0x184>
 801ae86:	a909      	add	r1, sp, #36	@ 0x24
 801ae88:	4638      	mov	r0, r7
 801ae8a:	f7f5 ffb7 	bl	8010dfc <rmw_validate_namespace>
 801ae8e:	2800      	cmp	r0, #0
 801ae90:	f040 8083 	bne.w	801af9a <rcl_expand_topic_name+0x172>
 801ae94:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801ae96:	2c00      	cmp	r4, #0
 801ae98:	f040 80ed 	bne.w	801b076 <rcl_expand_topic_name+0x24e>
 801ae9c:	217b      	movs	r1, #123	@ 0x7b
 801ae9e:	4640      	mov	r0, r8
 801aea0:	f001 fd54 	bl	801c94c <strchr>
 801aea4:	f898 3000 	ldrb.w	r3, [r8]
 801aea8:	2b2f      	cmp	r3, #47	@ 0x2f
 801aeaa:	4605      	mov	r5, r0
 801aeac:	f000 809e 	beq.w	801afec <rcl_expand_topic_name+0x1c4>
 801aeb0:	2b7e      	cmp	r3, #126	@ 0x7e
 801aeb2:	f040 80a2 	bne.w	801affa <rcl_expand_topic_name+0x1d2>
 801aeb6:	4638      	mov	r0, r7
 801aeb8:	f7e5 f9b4 	bl	8000224 <strlen>
 801aebc:	4a82      	ldr	r2, [pc, #520]	@ (801b0c8 <rcl_expand_topic_name+0x2a0>)
 801aebe:	4b83      	ldr	r3, [pc, #524]	@ (801b0cc <rcl_expand_topic_name+0x2a4>)
 801aec0:	2801      	cmp	r0, #1
 801aec2:	bf18      	it	ne
 801aec4:	4613      	movne	r3, r2
 801aec6:	9302      	str	r3, [sp, #8]
 801aec8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801aeca:	9300      	str	r3, [sp, #0]
 801aecc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801aed0:	f108 0301 	add.w	r3, r8, #1
 801aed4:	9305      	str	r3, [sp, #20]
 801aed6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aeda:	9301      	str	r3, [sp, #4]
 801aedc:	ab14      	add	r3, sp, #80	@ 0x50
 801aede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aee0:	f7f5 fd56 	bl	8010990 <rcutils_format_string_limit>
 801aee4:	4682      	mov	sl, r0
 801aee6:	2800      	cmp	r0, #0
 801aee8:	f000 80c7 	beq.w	801b07a <rcl_expand_topic_name+0x252>
 801aeec:	2d00      	cmp	r5, #0
 801aeee:	f000 80a2 	beq.w	801b036 <rcl_expand_topic_name+0x20e>
 801aef2:	217b      	movs	r1, #123	@ 0x7b
 801aef4:	f001 fd2a 	bl	801c94c <strchr>
 801aef8:	46d1      	mov	r9, sl
 801aefa:	4605      	mov	r5, r0
 801aefc:	9407      	str	r4, [sp, #28]
 801aefe:	46d3      	mov	fp, sl
 801af00:	464c      	mov	r4, r9
 801af02:	2d00      	cmp	r5, #0
 801af04:	f000 80be 	beq.w	801b084 <rcl_expand_topic_name+0x25c>
 801af08:	217d      	movs	r1, #125	@ 0x7d
 801af0a:	4620      	mov	r0, r4
 801af0c:	f001 fd1e 	bl	801c94c <strchr>
 801af10:	eba0 0905 	sub.w	r9, r0, r5
 801af14:	f109 0a01 	add.w	sl, r9, #1
 801af18:	486d      	ldr	r0, [pc, #436]	@ (801b0d0 <rcl_expand_topic_name+0x2a8>)
 801af1a:	4652      	mov	r2, sl
 801af1c:	4629      	mov	r1, r5
 801af1e:	f001 fd22 	bl	801c966 <strncmp>
 801af22:	2800      	cmp	r0, #0
 801af24:	d067      	beq.n	801aff6 <rcl_expand_topic_name+0x1ce>
 801af26:	486b      	ldr	r0, [pc, #428]	@ (801b0d4 <rcl_expand_topic_name+0x2ac>)
 801af28:	4652      	mov	r2, sl
 801af2a:	4629      	mov	r1, r5
 801af2c:	f001 fd1b 	bl	801c966 <strncmp>
 801af30:	b130      	cbz	r0, 801af40 <rcl_expand_topic_name+0x118>
 801af32:	4869      	ldr	r0, [pc, #420]	@ (801b0d8 <rcl_expand_topic_name+0x2b0>)
 801af34:	4652      	mov	r2, sl
 801af36:	4629      	mov	r1, r5
 801af38:	f001 fd15 	bl	801c966 <strncmp>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	d137      	bne.n	801afb0 <rcl_expand_topic_name+0x188>
 801af40:	46b9      	mov	r9, r7
 801af42:	ab16      	add	r3, sp, #88	@ 0x58
 801af44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801af48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801af4c:	ab14      	add	r3, sp, #80	@ 0x50
 801af4e:	4628      	mov	r0, r5
 801af50:	cb0c      	ldmia	r3, {r2, r3}
 801af52:	4651      	mov	r1, sl
 801af54:	f7f5 fe58 	bl	8010c08 <rcutils_strndup>
 801af58:	4605      	mov	r5, r0
 801af5a:	2800      	cmp	r0, #0
 801af5c:	f000 809c 	beq.w	801b098 <rcl_expand_topic_name+0x270>
 801af60:	464a      	mov	r2, r9
 801af62:	4620      	mov	r0, r4
 801af64:	ab14      	add	r3, sp, #80	@ 0x50
 801af66:	4629      	mov	r1, r5
 801af68:	f7f5 fd4c 	bl	8010a04 <rcutils_repl_str>
 801af6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801af6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801af70:	4604      	mov	r4, r0
 801af72:	4628      	mov	r0, r5
 801af74:	4798      	blx	r3
 801af76:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801af78:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801af7a:	4658      	mov	r0, fp
 801af7c:	4798      	blx	r3
 801af7e:	2c00      	cmp	r4, #0
 801af80:	d07b      	beq.n	801b07a <rcl_expand_topic_name+0x252>
 801af82:	217b      	movs	r1, #123	@ 0x7b
 801af84:	4620      	mov	r0, r4
 801af86:	f001 fce1 	bl	801c94c <strchr>
 801af8a:	46a3      	mov	fp, r4
 801af8c:	4605      	mov	r5, r0
 801af8e:	e7b8      	b.n	801af02 <rcl_expand_topic_name+0xda>
 801af90:	240b      	movs	r4, #11
 801af92:	4620      	mov	r0, r4
 801af94:	b00b      	add	sp, #44	@ 0x2c
 801af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af9a:	f7fb ffdb 	bl	8016f54 <rcl_convert_rmw_ret_to_rcl_ret>
 801af9e:	4604      	mov	r4, r0
 801afa0:	e7f7      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801afa2:	2467      	movs	r4, #103	@ 0x67
 801afa4:	4620      	mov	r0, r4
 801afa6:	b00b      	add	sp, #44	@ 0x2c
 801afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afac:	24c9      	movs	r4, #201	@ 0xc9
 801afae:	e7f0      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801afb0:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801afb4:	9806      	ldr	r0, [sp, #24]
 801afb6:	1c69      	adds	r1, r5, #1
 801afb8:	f7fe f934 	bl	8019224 <rcutils_string_map_getn>
 801afbc:	4681      	mov	r9, r0
 801afbe:	2800      	cmp	r0, #0
 801afc0:	d1bf      	bne.n	801af42 <rcl_expand_topic_name+0x11a>
 801afc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801afc4:	aa16      	add	r2, sp, #88	@ 0x58
 801afc6:	6018      	str	r0, [r3, #0]
 801afc8:	ca07      	ldmia	r2, {r0, r1, r2}
 801afca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801afce:	ab14      	add	r3, sp, #80	@ 0x50
 801afd0:	cb0c      	ldmia	r3, {r2, r3}
 801afd2:	4651      	mov	r1, sl
 801afd4:	4628      	mov	r0, r5
 801afd6:	f7f5 fe17 	bl	8010c08 <rcutils_strndup>
 801afda:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801afdc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801afde:	4798      	blx	r3
 801afe0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801afe2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801afe4:	4658      	mov	r0, fp
 801afe6:	2469      	movs	r4, #105	@ 0x69
 801afe8:	4798      	blx	r3
 801afea:	e7d2      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801afec:	2800      	cmp	r0, #0
 801afee:	d05b      	beq.n	801b0a8 <rcl_expand_topic_name+0x280>
 801aff0:	46c1      	mov	r9, r8
 801aff2:	46a2      	mov	sl, r4
 801aff4:	e782      	b.n	801aefc <rcl_expand_topic_name+0xd4>
 801aff6:	46b1      	mov	r9, r6
 801aff8:	e7a3      	b.n	801af42 <rcl_expand_topic_name+0x11a>
 801affa:	2800      	cmp	r0, #0
 801affc:	d1f8      	bne.n	801aff0 <rcl_expand_topic_name+0x1c8>
 801affe:	4638      	mov	r0, r7
 801b000:	f7e5 f910 	bl	8000224 <strlen>
 801b004:	4a35      	ldr	r2, [pc, #212]	@ (801b0dc <rcl_expand_topic_name+0x2b4>)
 801b006:	4b36      	ldr	r3, [pc, #216]	@ (801b0e0 <rcl_expand_topic_name+0x2b8>)
 801b008:	f8cd 8010 	str.w	r8, [sp, #16]
 801b00c:	2801      	cmp	r0, #1
 801b00e:	bf18      	it	ne
 801b010:	4613      	movne	r3, r2
 801b012:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b016:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b01a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b01c:	9703      	str	r7, [sp, #12]
 801b01e:	9200      	str	r2, [sp, #0]
 801b020:	ab14      	add	r3, sp, #80	@ 0x50
 801b022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b024:	f7f5 fcb4 	bl	8010990 <rcutils_format_string_limit>
 801b028:	4682      	mov	sl, r0
 801b02a:	4653      	mov	r3, sl
 801b02c:	b32b      	cbz	r3, 801b07a <rcl_expand_topic_name+0x252>
 801b02e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b030:	f8c3 a000 	str.w	sl, [r3]
 801b034:	e7ad      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801b036:	f89a 3000 	ldrb.w	r3, [sl]
 801b03a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b03c:	d0f7      	beq.n	801b02e <rcl_expand_topic_name+0x206>
 801b03e:	4638      	mov	r0, r7
 801b040:	f7e5 f8f0 	bl	8000224 <strlen>
 801b044:	4a25      	ldr	r2, [pc, #148]	@ (801b0dc <rcl_expand_topic_name+0x2b4>)
 801b046:	4b26      	ldr	r3, [pc, #152]	@ (801b0e0 <rcl_expand_topic_name+0x2b8>)
 801b048:	f8cd a010 	str.w	sl, [sp, #16]
 801b04c:	2801      	cmp	r0, #1
 801b04e:	bf18      	it	ne
 801b050:	4613      	movne	r3, r2
 801b052:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801b056:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801b05a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b05c:	9703      	str	r7, [sp, #12]
 801b05e:	9200      	str	r2, [sp, #0]
 801b060:	ab14      	add	r3, sp, #80	@ 0x50
 801b062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b064:	f7f5 fc94 	bl	8010990 <rcutils_format_string_limit>
 801b068:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b06a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b06c:	4605      	mov	r5, r0
 801b06e:	4650      	mov	r0, sl
 801b070:	4798      	blx	r3
 801b072:	46aa      	mov	sl, r5
 801b074:	e7d9      	b.n	801b02a <rcl_expand_topic_name+0x202>
 801b076:	24ca      	movs	r4, #202	@ 0xca
 801b078:	e78b      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801b07a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801b07c:	2300      	movs	r3, #0
 801b07e:	6013      	str	r3, [r2, #0]
 801b080:	240a      	movs	r4, #10
 801b082:	e786      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801b084:	465b      	mov	r3, fp
 801b086:	9c07      	ldr	r4, [sp, #28]
 801b088:	46da      	mov	sl, fp
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d1d3      	bne.n	801b036 <rcl_expand_topic_name+0x20e>
 801b08e:	f898 3000 	ldrb.w	r3, [r8]
 801b092:	2b2f      	cmp	r3, #47	@ 0x2f
 801b094:	d0cb      	beq.n	801b02e <rcl_expand_topic_name+0x206>
 801b096:	e7b2      	b.n	801affe <rcl_expand_topic_name+0x1d6>
 801b098:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801b09c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b09e:	6015      	str	r5, [r2, #0]
 801b0a0:	4658      	mov	r0, fp
 801b0a2:	4798      	blx	r3
 801b0a4:	240a      	movs	r4, #10
 801b0a6:	e774      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801b0a8:	ab17      	add	r3, sp, #92	@ 0x5c
 801b0aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b0ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b0b2:	ab14      	add	r3, sp, #80	@ 0x50
 801b0b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b0b6:	4640      	mov	r0, r8
 801b0b8:	f7f5 fd84 	bl	8010bc4 <rcutils_strdup>
 801b0bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	6018      	str	r0, [r3, #0]
 801b0c2:	bf08      	it	eq
 801b0c4:	240a      	moveq	r4, #10
 801b0c6:	e764      	b.n	801af92 <rcl_expand_topic_name+0x16a>
 801b0c8:	0801e12c 	.word	0x0801e12c
 801b0cc:	0801de28 	.word	0x0801de28
 801b0d0:	0801e134 	.word	0x0801e134
 801b0d4:	0801e13c 	.word	0x0801e13c
 801b0d8:	0801e144 	.word	0x0801e144
 801b0dc:	0801daf4 	.word	0x0801daf4
 801b0e0:	0801daec 	.word	0x0801daec

0801b0e4 <rcl_get_default_topic_name_substitutions>:
 801b0e4:	2800      	cmp	r0, #0
 801b0e6:	bf0c      	ite	eq
 801b0e8:	200b      	moveq	r0, #11
 801b0ea:	2000      	movne	r0, #0
 801b0ec:	4770      	bx	lr
 801b0ee:	bf00      	nop

0801b0f0 <rcl_validate_topic_name>:
 801b0f0:	2800      	cmp	r0, #0
 801b0f2:	d07a      	beq.n	801b1ea <rcl_validate_topic_name+0xfa>
 801b0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0f8:	460e      	mov	r6, r1
 801b0fa:	2900      	cmp	r1, #0
 801b0fc:	d07c      	beq.n	801b1f8 <rcl_validate_topic_name+0x108>
 801b0fe:	4617      	mov	r7, r2
 801b100:	4605      	mov	r5, r0
 801b102:	f7e5 f88f 	bl	8000224 <strlen>
 801b106:	b1b0      	cbz	r0, 801b136 <rcl_validate_topic_name+0x46>
 801b108:	f895 9000 	ldrb.w	r9, [r5]
 801b10c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801b290 <rcl_validate_topic_name+0x1a0>
 801b110:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801b114:	f013 0304 	ands.w	r3, r3, #4
 801b118:	d169      	bne.n	801b1ee <rcl_validate_topic_name+0xfe>
 801b11a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b11e:	f815 2008 	ldrb.w	r2, [r5, r8]
 801b122:	2a2f      	cmp	r2, #47	@ 0x2f
 801b124:	d10e      	bne.n	801b144 <rcl_validate_topic_name+0x54>
 801b126:	2202      	movs	r2, #2
 801b128:	6032      	str	r2, [r6, #0]
 801b12a:	b36f      	cbz	r7, 801b188 <rcl_validate_topic_name+0x98>
 801b12c:	f8c7 8000 	str.w	r8, [r7]
 801b130:	4618      	mov	r0, r3
 801b132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b136:	2301      	movs	r3, #1
 801b138:	6033      	str	r3, [r6, #0]
 801b13a:	b32f      	cbz	r7, 801b188 <rcl_validate_topic_name+0x98>
 801b13c:	2000      	movs	r0, #0
 801b13e:	6038      	str	r0, [r7, #0]
 801b140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b144:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801b148:	461c      	mov	r4, r3
 801b14a:	4619      	mov	r1, r3
 801b14c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b150:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801b154:	f1be 0f09 	cmp.w	lr, #9
 801b158:	d919      	bls.n	801b18e <rcl_validate_topic_name+0x9e>
 801b15a:	f022 0e20 	bic.w	lr, r2, #32
 801b15e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801b162:	f1be 0f19 	cmp.w	lr, #25
 801b166:	d912      	bls.n	801b18e <rcl_validate_topic_name+0x9e>
 801b168:	2a5f      	cmp	r2, #95	@ 0x5f
 801b16a:	d019      	beq.n	801b1a0 <rcl_validate_topic_name+0xb0>
 801b16c:	2a2f      	cmp	r2, #47	@ 0x2f
 801b16e:	d051      	beq.n	801b214 <rcl_validate_topic_name+0x124>
 801b170:	2a7e      	cmp	r2, #126	@ 0x7e
 801b172:	d048      	beq.n	801b206 <rcl_validate_topic_name+0x116>
 801b174:	2a7b      	cmp	r2, #123	@ 0x7b
 801b176:	d054      	beq.n	801b222 <rcl_validate_topic_name+0x132>
 801b178:	2a7d      	cmp	r2, #125	@ 0x7d
 801b17a:	d161      	bne.n	801b240 <rcl_validate_topic_name+0x150>
 801b17c:	2c00      	cmp	r4, #0
 801b17e:	d155      	bne.n	801b22c <rcl_validate_topic_name+0x13c>
 801b180:	2305      	movs	r3, #5
 801b182:	6033      	str	r3, [r6, #0]
 801b184:	b107      	cbz	r7, 801b188 <rcl_validate_topic_name+0x98>
 801b186:	6039      	str	r1, [r7, #0]
 801b188:	2000      	movs	r0, #0
 801b18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b18e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b192:	0752      	lsls	r2, r2, #29
 801b194:	d504      	bpl.n	801b1a0 <rcl_validate_topic_name+0xb0>
 801b196:	b11c      	cbz	r4, 801b1a0 <rcl_validate_topic_name+0xb0>
 801b198:	b111      	cbz	r1, 801b1a0 <rcl_validate_topic_name+0xb0>
 801b19a:	1e4a      	subs	r2, r1, #1
 801b19c:	429a      	cmp	r2, r3
 801b19e:	d02d      	beq.n	801b1fc <rcl_validate_topic_name+0x10c>
 801b1a0:	3101      	adds	r1, #1
 801b1a2:	4288      	cmp	r0, r1
 801b1a4:	d1d2      	bne.n	801b14c <rcl_validate_topic_name+0x5c>
 801b1a6:	2c00      	cmp	r4, #0
 801b1a8:	d145      	bne.n	801b236 <rcl_validate_topic_name+0x146>
 801b1aa:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801b1ae:	d04f      	beq.n	801b250 <rcl_validate_topic_name+0x160>
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	2301      	movs	r3, #1
 801b1b4:	e006      	b.n	801b1c4 <rcl_validate_topic_name+0xd4>
 801b1b6:	428b      	cmp	r3, r1
 801b1b8:	f105 0501 	add.w	r5, r5, #1
 801b1bc:	f103 0201 	add.w	r2, r3, #1
 801b1c0:	d236      	bcs.n	801b230 <rcl_validate_topic_name+0x140>
 801b1c2:	4613      	mov	r3, r2
 801b1c4:	4580      	cmp	r8, r0
 801b1c6:	f100 0001 	add.w	r0, r0, #1
 801b1ca:	d0f4      	beq.n	801b1b6 <rcl_validate_topic_name+0xc6>
 801b1cc:	782a      	ldrb	r2, [r5, #0]
 801b1ce:	2a2f      	cmp	r2, #47	@ 0x2f
 801b1d0:	d1f1      	bne.n	801b1b6 <rcl_validate_topic_name+0xc6>
 801b1d2:	786a      	ldrb	r2, [r5, #1]
 801b1d4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b1d8:	0754      	lsls	r4, r2, #29
 801b1da:	d5ec      	bpl.n	801b1b6 <rcl_validate_topic_name+0xc6>
 801b1dc:	2204      	movs	r2, #4
 801b1de:	6032      	str	r2, [r6, #0]
 801b1e0:	2f00      	cmp	r7, #0
 801b1e2:	d0d1      	beq.n	801b188 <rcl_validate_topic_name+0x98>
 801b1e4:	603b      	str	r3, [r7, #0]
 801b1e6:	2000      	movs	r0, #0
 801b1e8:	e7aa      	b.n	801b140 <rcl_validate_topic_name+0x50>
 801b1ea:	200b      	movs	r0, #11
 801b1ec:	4770      	bx	lr
 801b1ee:	2304      	movs	r3, #4
 801b1f0:	6033      	str	r3, [r6, #0]
 801b1f2:	2f00      	cmp	r7, #0
 801b1f4:	d1a2      	bne.n	801b13c <rcl_validate_topic_name+0x4c>
 801b1f6:	e7c7      	b.n	801b188 <rcl_validate_topic_name+0x98>
 801b1f8:	200b      	movs	r0, #11
 801b1fa:	e7a1      	b.n	801b140 <rcl_validate_topic_name+0x50>
 801b1fc:	2309      	movs	r3, #9
 801b1fe:	6033      	str	r3, [r6, #0]
 801b200:	2f00      	cmp	r7, #0
 801b202:	d1c0      	bne.n	801b186 <rcl_validate_topic_name+0x96>
 801b204:	e7c0      	b.n	801b188 <rcl_validate_topic_name+0x98>
 801b206:	2900      	cmp	r1, #0
 801b208:	d0ca      	beq.n	801b1a0 <rcl_validate_topic_name+0xb0>
 801b20a:	2306      	movs	r3, #6
 801b20c:	6033      	str	r3, [r6, #0]
 801b20e:	2f00      	cmp	r7, #0
 801b210:	d1b9      	bne.n	801b186 <rcl_validate_topic_name+0x96>
 801b212:	e7b9      	b.n	801b188 <rcl_validate_topic_name+0x98>
 801b214:	2c00      	cmp	r4, #0
 801b216:	d0c3      	beq.n	801b1a0 <rcl_validate_topic_name+0xb0>
 801b218:	2308      	movs	r3, #8
 801b21a:	6033      	str	r3, [r6, #0]
 801b21c:	2f00      	cmp	r7, #0
 801b21e:	d1b2      	bne.n	801b186 <rcl_validate_topic_name+0x96>
 801b220:	e7b2      	b.n	801b188 <rcl_validate_topic_name+0x98>
 801b222:	2c00      	cmp	r4, #0
 801b224:	d1f8      	bne.n	801b218 <rcl_validate_topic_name+0x128>
 801b226:	460b      	mov	r3, r1
 801b228:	2401      	movs	r4, #1
 801b22a:	e7b9      	b.n	801b1a0 <rcl_validate_topic_name+0xb0>
 801b22c:	2400      	movs	r4, #0
 801b22e:	e7b7      	b.n	801b1a0 <rcl_validate_topic_name+0xb0>
 801b230:	2000      	movs	r0, #0
 801b232:	6030      	str	r0, [r6, #0]
 801b234:	e784      	b.n	801b140 <rcl_validate_topic_name+0x50>
 801b236:	2205      	movs	r2, #5
 801b238:	6032      	str	r2, [r6, #0]
 801b23a:	2f00      	cmp	r7, #0
 801b23c:	d1d2      	bne.n	801b1e4 <rcl_validate_topic_name+0xf4>
 801b23e:	e7a3      	b.n	801b188 <rcl_validate_topic_name+0x98>
 801b240:	2c00      	cmp	r4, #0
 801b242:	bf14      	ite	ne
 801b244:	2308      	movne	r3, #8
 801b246:	2303      	moveq	r3, #3
 801b248:	6033      	str	r3, [r6, #0]
 801b24a:	2f00      	cmp	r7, #0
 801b24c:	d19b      	bne.n	801b186 <rcl_validate_topic_name+0x96>
 801b24e:	e79b      	b.n	801b188 <rcl_validate_topic_name+0x98>
 801b250:	2301      	movs	r3, #1
 801b252:	e00a      	b.n	801b26a <rcl_validate_topic_name+0x17a>
 801b254:	2c01      	cmp	r4, #1
 801b256:	d013      	beq.n	801b280 <rcl_validate_topic_name+0x190>
 801b258:	4299      	cmp	r1, r3
 801b25a:	f104 0401 	add.w	r4, r4, #1
 801b25e:	f105 0501 	add.w	r5, r5, #1
 801b262:	f103 0201 	add.w	r2, r3, #1
 801b266:	d9e3      	bls.n	801b230 <rcl_validate_topic_name+0x140>
 801b268:	4613      	mov	r3, r2
 801b26a:	45a0      	cmp	r8, r4
 801b26c:	d0f4      	beq.n	801b258 <rcl_validate_topic_name+0x168>
 801b26e:	782a      	ldrb	r2, [r5, #0]
 801b270:	2a2f      	cmp	r2, #47	@ 0x2f
 801b272:	d1ef      	bne.n	801b254 <rcl_validate_topic_name+0x164>
 801b274:	786a      	ldrb	r2, [r5, #1]
 801b276:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b27a:	0752      	lsls	r2, r2, #29
 801b27c:	d5ec      	bpl.n	801b258 <rcl_validate_topic_name+0x168>
 801b27e:	e7ad      	b.n	801b1dc <rcl_validate_topic_name+0xec>
 801b280:	2307      	movs	r3, #7
 801b282:	6033      	str	r3, [r6, #0]
 801b284:	2f00      	cmp	r7, #0
 801b286:	f43f af7f 	beq.w	801b188 <rcl_validate_topic_name+0x98>
 801b28a:	603c      	str	r4, [r7, #0]
 801b28c:	2000      	movs	r0, #0
 801b28e:	e757      	b.n	801b140 <rcl_validate_topic_name+0x50>
 801b290:	0801eccf 	.word	0x0801eccf

0801b294 <geometry_msgs__msg__Pose__init>:
 801b294:	b570      	push	{r4, r5, r6, lr}
 801b296:	4605      	mov	r5, r0
 801b298:	b1a8      	cbz	r0, 801b2c6 <geometry_msgs__msg__Pose__init+0x32>
 801b29a:	f000 f8e5 	bl	801b468 <geometry_msgs__msg__Point__init>
 801b29e:	4604      	mov	r4, r0
 801b2a0:	b140      	cbz	r0, 801b2b4 <geometry_msgs__msg__Pose__init+0x20>
 801b2a2:	f105 0618 	add.w	r6, r5, #24
 801b2a6:	4630      	mov	r0, r6
 801b2a8:	f000 f826 	bl	801b2f8 <geometry_msgs__msg__Quaternion__init>
 801b2ac:	4604      	mov	r4, r0
 801b2ae:	b168      	cbz	r0, 801b2cc <geometry_msgs__msg__Pose__init+0x38>
 801b2b0:	4620      	mov	r0, r4
 801b2b2:	bd70      	pop	{r4, r5, r6, pc}
 801b2b4:	4628      	mov	r0, r5
 801b2b6:	f000 f8db 	bl	801b470 <geometry_msgs__msg__Point__fini>
 801b2ba:	f105 0018 	add.w	r0, r5, #24
 801b2be:	f000 f82f 	bl	801b320 <geometry_msgs__msg__Quaternion__fini>
 801b2c2:	4620      	mov	r0, r4
 801b2c4:	bd70      	pop	{r4, r5, r6, pc}
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	4620      	mov	r0, r4
 801b2ca:	bd70      	pop	{r4, r5, r6, pc}
 801b2cc:	4628      	mov	r0, r5
 801b2ce:	f000 f8cf 	bl	801b470 <geometry_msgs__msg__Point__fini>
 801b2d2:	4630      	mov	r0, r6
 801b2d4:	f000 f824 	bl	801b320 <geometry_msgs__msg__Quaternion__fini>
 801b2d8:	e7ea      	b.n	801b2b0 <geometry_msgs__msg__Pose__init+0x1c>
 801b2da:	bf00      	nop

0801b2dc <geometry_msgs__msg__Pose__fini>:
 801b2dc:	b148      	cbz	r0, 801b2f2 <geometry_msgs__msg__Pose__fini+0x16>
 801b2de:	b510      	push	{r4, lr}
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	f000 f8c5 	bl	801b470 <geometry_msgs__msg__Point__fini>
 801b2e6:	f104 0018 	add.w	r0, r4, #24
 801b2ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2ee:	f000 b817 	b.w	801b320 <geometry_msgs__msg__Quaternion__fini>
 801b2f2:	4770      	bx	lr
 801b2f4:	0000      	movs	r0, r0
	...

0801b2f8 <geometry_msgs__msg__Quaternion__init>:
 801b2f8:	b160      	cbz	r0, 801b314 <geometry_msgs__msg__Quaternion__init+0x1c>
 801b2fa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801b318 <geometry_msgs__msg__Quaternion__init+0x20>
 801b2fe:	2200      	movs	r2, #0
 801b300:	2300      	movs	r3, #0
 801b302:	e9c0 2300 	strd	r2, r3, [r0]
 801b306:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801b30a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b30e:	ed80 7b06 	vstr	d7, [r0, #24]
 801b312:	2001      	movs	r0, #1
 801b314:	4770      	bx	lr
 801b316:	bf00      	nop
 801b318:	00000000 	.word	0x00000000
 801b31c:	3ff00000 	.word	0x3ff00000

0801b320 <geometry_msgs__msg__Quaternion__fini>:
 801b320:	4770      	bx	lr
 801b322:	bf00      	nop

0801b324 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 801b324:	f000 b8a0 	b.w	801b468 <geometry_msgs__msg__Point__init>

0801b328 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 801b328:	f000 b8a2 	b.w	801b470 <geometry_msgs__msg__Point__fini>

0801b32c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801b32c:	4b04      	ldr	r3, [pc, #16]	@ (801b340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801b32e:	681a      	ldr	r2, [r3, #0]
 801b330:	b10a      	cbz	r2, 801b336 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 801b332:	4803      	ldr	r0, [pc, #12]	@ (801b340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801b334:	4770      	bx	lr
 801b336:	4a03      	ldr	r2, [pc, #12]	@ (801b344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 801b338:	4801      	ldr	r0, [pc, #4]	@ (801b340 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801b33a:	6812      	ldr	r2, [r2, #0]
 801b33c:	601a      	str	r2, [r3, #0]
 801b33e:	4770      	bx	lr
 801b340:	200008cc 	.word	0x200008cc
 801b344:	20000310 	.word	0x20000310

0801b348 <get_serialized_size_geometry_msgs__msg__Point>:
 801b348:	b1b8      	cbz	r0, 801b37a <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801b34a:	b538      	push	{r3, r4, r5, lr}
 801b34c:	460d      	mov	r5, r1
 801b34e:	4628      	mov	r0, r5
 801b350:	2108      	movs	r1, #8
 801b352:	f7f3 f817 	bl	800e384 <ucdr_alignment>
 801b356:	f105 0308 	add.w	r3, r5, #8
 801b35a:	181c      	adds	r4, r3, r0
 801b35c:	2108      	movs	r1, #8
 801b35e:	4620      	mov	r0, r4
 801b360:	f7f3 f810 	bl	800e384 <ucdr_alignment>
 801b364:	3008      	adds	r0, #8
 801b366:	4404      	add	r4, r0
 801b368:	2108      	movs	r1, #8
 801b36a:	4620      	mov	r0, r4
 801b36c:	f7f3 f80a 	bl	800e384 <ucdr_alignment>
 801b370:	f1c5 0508 	rsb	r5, r5, #8
 801b374:	4428      	add	r0, r5
 801b376:	4420      	add	r0, r4
 801b378:	bd38      	pop	{r3, r4, r5, pc}
 801b37a:	4770      	bx	lr

0801b37c <_Point__cdr_deserialize>:
 801b37c:	b538      	push	{r3, r4, r5, lr}
 801b37e:	460c      	mov	r4, r1
 801b380:	b171      	cbz	r1, 801b3a0 <_Point__cdr_deserialize+0x24>
 801b382:	4605      	mov	r5, r0
 801b384:	f7f2 fe12 	bl	800dfac <ucdr_deserialize_double>
 801b388:	f104 0108 	add.w	r1, r4, #8
 801b38c:	4628      	mov	r0, r5
 801b38e:	f7f2 fe0d 	bl	800dfac <ucdr_deserialize_double>
 801b392:	f104 0110 	add.w	r1, r4, #16
 801b396:	4628      	mov	r0, r5
 801b398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b39c:	f7f2 be06 	b.w	800dfac <ucdr_deserialize_double>
 801b3a0:	4608      	mov	r0, r1
 801b3a2:	bd38      	pop	{r3, r4, r5, pc}

0801b3a4 <_Point__cdr_serialize>:
 801b3a4:	b198      	cbz	r0, 801b3ce <_Point__cdr_serialize+0x2a>
 801b3a6:	b538      	push	{r3, r4, r5, lr}
 801b3a8:	ed90 0b00 	vldr	d0, [r0]
 801b3ac:	460d      	mov	r5, r1
 801b3ae:	4604      	mov	r4, r0
 801b3b0:	4608      	mov	r0, r1
 801b3b2:	f7f2 fc59 	bl	800dc68 <ucdr_serialize_double>
 801b3b6:	ed94 0b02 	vldr	d0, [r4, #8]
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	f7f2 fc54 	bl	800dc68 <ucdr_serialize_double>
 801b3c0:	ed94 0b04 	vldr	d0, [r4, #16]
 801b3c4:	4628      	mov	r0, r5
 801b3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3ca:	f7f2 bc4d 	b.w	800dc68 <ucdr_serialize_double>
 801b3ce:	4770      	bx	lr

0801b3d0 <_Point__get_serialized_size>:
 801b3d0:	b198      	cbz	r0, 801b3fa <_Point__get_serialized_size+0x2a>
 801b3d2:	b510      	push	{r4, lr}
 801b3d4:	2108      	movs	r1, #8
 801b3d6:	2000      	movs	r0, #0
 801b3d8:	f7f2 ffd4 	bl	800e384 <ucdr_alignment>
 801b3dc:	f100 0408 	add.w	r4, r0, #8
 801b3e0:	2108      	movs	r1, #8
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	f7f2 ffce 	bl	800e384 <ucdr_alignment>
 801b3e8:	3008      	adds	r0, #8
 801b3ea:	4404      	add	r4, r0
 801b3ec:	2108      	movs	r1, #8
 801b3ee:	4620      	mov	r0, r4
 801b3f0:	f7f2 ffc8 	bl	800e384 <ucdr_alignment>
 801b3f4:	3008      	adds	r0, #8
 801b3f6:	4420      	add	r0, r4
 801b3f8:	bd10      	pop	{r4, pc}
 801b3fa:	4770      	bx	lr

0801b3fc <_Point__max_serialized_size>:
 801b3fc:	b538      	push	{r3, r4, r5, lr}
 801b3fe:	2108      	movs	r1, #8
 801b400:	2000      	movs	r0, #0
 801b402:	f7f2 ffbf 	bl	800e384 <ucdr_alignment>
 801b406:	f100 0508 	add.w	r5, r0, #8
 801b40a:	2108      	movs	r1, #8
 801b40c:	4628      	mov	r0, r5
 801b40e:	f7f2 ffb9 	bl	800e384 <ucdr_alignment>
 801b412:	f100 0408 	add.w	r4, r0, #8
 801b416:	442c      	add	r4, r5
 801b418:	2108      	movs	r1, #8
 801b41a:	4620      	mov	r0, r4
 801b41c:	f7f2 ffb2 	bl	800e384 <ucdr_alignment>
 801b420:	3008      	adds	r0, #8
 801b422:	4420      	add	r0, r4
 801b424:	bd38      	pop	{r3, r4, r5, pc}
 801b426:	bf00      	nop

0801b428 <max_serialized_size_geometry_msgs__msg__Point>:
 801b428:	b570      	push	{r4, r5, r6, lr}
 801b42a:	2301      	movs	r3, #1
 801b42c:	460c      	mov	r4, r1
 801b42e:	7003      	strb	r3, [r0, #0]
 801b430:	2108      	movs	r1, #8
 801b432:	4620      	mov	r0, r4
 801b434:	f7f2 ffa6 	bl	800e384 <ucdr_alignment>
 801b438:	f104 0508 	add.w	r5, r4, #8
 801b43c:	1946      	adds	r6, r0, r5
 801b43e:	2108      	movs	r1, #8
 801b440:	4630      	mov	r0, r6
 801b442:	f7f2 ff9f 	bl	800e384 <ucdr_alignment>
 801b446:	f100 0508 	add.w	r5, r0, #8
 801b44a:	4435      	add	r5, r6
 801b44c:	2108      	movs	r1, #8
 801b44e:	4628      	mov	r0, r5
 801b450:	f7f2 ff98 	bl	800e384 <ucdr_alignment>
 801b454:	f1c4 0408 	rsb	r4, r4, #8
 801b458:	4420      	add	r0, r4
 801b45a:	4428      	add	r0, r5
 801b45c:	bd70      	pop	{r4, r5, r6, pc}
 801b45e:	bf00      	nop

0801b460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801b460:	4800      	ldr	r0, [pc, #0]	@ (801b464 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801b462:	4770      	bx	lr
 801b464:	200008d8 	.word	0x200008d8

0801b468 <geometry_msgs__msg__Point__init>:
 801b468:	3800      	subs	r0, #0
 801b46a:	bf18      	it	ne
 801b46c:	2001      	movne	r0, #1
 801b46e:	4770      	bx	lr

0801b470 <geometry_msgs__msg__Point__fini>:
 801b470:	4770      	bx	lr
 801b472:	bf00      	nop

0801b474 <cosf>:
 801b474:	ee10 3a10 	vmov	r3, s0
 801b478:	b507      	push	{r0, r1, r2, lr}
 801b47a:	4a1e      	ldr	r2, [pc, #120]	@ (801b4f4 <cosf+0x80>)
 801b47c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b480:	4293      	cmp	r3, r2
 801b482:	d806      	bhi.n	801b492 <cosf+0x1e>
 801b484:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801b4f8 <cosf+0x84>
 801b488:	b003      	add	sp, #12
 801b48a:	f85d eb04 	ldr.w	lr, [sp], #4
 801b48e:	f000 b87b 	b.w	801b588 <__kernel_cosf>
 801b492:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b496:	d304      	bcc.n	801b4a2 <cosf+0x2e>
 801b498:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b49c:	b003      	add	sp, #12
 801b49e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4a2:	4668      	mov	r0, sp
 801b4a4:	f000 f910 	bl	801b6c8 <__ieee754_rem_pio2f>
 801b4a8:	f000 0003 	and.w	r0, r0, #3
 801b4ac:	2801      	cmp	r0, #1
 801b4ae:	d009      	beq.n	801b4c4 <cosf+0x50>
 801b4b0:	2802      	cmp	r0, #2
 801b4b2:	d010      	beq.n	801b4d6 <cosf+0x62>
 801b4b4:	b9b0      	cbnz	r0, 801b4e4 <cosf+0x70>
 801b4b6:	eddd 0a01 	vldr	s1, [sp, #4]
 801b4ba:	ed9d 0a00 	vldr	s0, [sp]
 801b4be:	f000 f863 	bl	801b588 <__kernel_cosf>
 801b4c2:	e7eb      	b.n	801b49c <cosf+0x28>
 801b4c4:	eddd 0a01 	vldr	s1, [sp, #4]
 801b4c8:	ed9d 0a00 	vldr	s0, [sp]
 801b4cc:	f000 f8b4 	bl	801b638 <__kernel_sinf>
 801b4d0:	eeb1 0a40 	vneg.f32	s0, s0
 801b4d4:	e7e2      	b.n	801b49c <cosf+0x28>
 801b4d6:	eddd 0a01 	vldr	s1, [sp, #4]
 801b4da:	ed9d 0a00 	vldr	s0, [sp]
 801b4de:	f000 f853 	bl	801b588 <__kernel_cosf>
 801b4e2:	e7f5      	b.n	801b4d0 <cosf+0x5c>
 801b4e4:	eddd 0a01 	vldr	s1, [sp, #4]
 801b4e8:	ed9d 0a00 	vldr	s0, [sp]
 801b4ec:	2001      	movs	r0, #1
 801b4ee:	f000 f8a3 	bl	801b638 <__kernel_sinf>
 801b4f2:	e7d3      	b.n	801b49c <cosf+0x28>
 801b4f4:	3f490fd8 	.word	0x3f490fd8
 801b4f8:	00000000 	.word	0x00000000

0801b4fc <sinf>:
 801b4fc:	ee10 3a10 	vmov	r3, s0
 801b500:	b507      	push	{r0, r1, r2, lr}
 801b502:	4a1f      	ldr	r2, [pc, #124]	@ (801b580 <sinf+0x84>)
 801b504:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b508:	4293      	cmp	r3, r2
 801b50a:	d807      	bhi.n	801b51c <sinf+0x20>
 801b50c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801b584 <sinf+0x88>
 801b510:	2000      	movs	r0, #0
 801b512:	b003      	add	sp, #12
 801b514:	f85d eb04 	ldr.w	lr, [sp], #4
 801b518:	f000 b88e 	b.w	801b638 <__kernel_sinf>
 801b51c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b520:	d304      	bcc.n	801b52c <sinf+0x30>
 801b522:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b526:	b003      	add	sp, #12
 801b528:	f85d fb04 	ldr.w	pc, [sp], #4
 801b52c:	4668      	mov	r0, sp
 801b52e:	f000 f8cb 	bl	801b6c8 <__ieee754_rem_pio2f>
 801b532:	f000 0003 	and.w	r0, r0, #3
 801b536:	2801      	cmp	r0, #1
 801b538:	d00a      	beq.n	801b550 <sinf+0x54>
 801b53a:	2802      	cmp	r0, #2
 801b53c:	d00f      	beq.n	801b55e <sinf+0x62>
 801b53e:	b9c0      	cbnz	r0, 801b572 <sinf+0x76>
 801b540:	eddd 0a01 	vldr	s1, [sp, #4]
 801b544:	ed9d 0a00 	vldr	s0, [sp]
 801b548:	2001      	movs	r0, #1
 801b54a:	f000 f875 	bl	801b638 <__kernel_sinf>
 801b54e:	e7ea      	b.n	801b526 <sinf+0x2a>
 801b550:	eddd 0a01 	vldr	s1, [sp, #4]
 801b554:	ed9d 0a00 	vldr	s0, [sp]
 801b558:	f000 f816 	bl	801b588 <__kernel_cosf>
 801b55c:	e7e3      	b.n	801b526 <sinf+0x2a>
 801b55e:	eddd 0a01 	vldr	s1, [sp, #4]
 801b562:	ed9d 0a00 	vldr	s0, [sp]
 801b566:	2001      	movs	r0, #1
 801b568:	f000 f866 	bl	801b638 <__kernel_sinf>
 801b56c:	eeb1 0a40 	vneg.f32	s0, s0
 801b570:	e7d9      	b.n	801b526 <sinf+0x2a>
 801b572:	eddd 0a01 	vldr	s1, [sp, #4]
 801b576:	ed9d 0a00 	vldr	s0, [sp]
 801b57a:	f000 f805 	bl	801b588 <__kernel_cosf>
 801b57e:	e7f5      	b.n	801b56c <sinf+0x70>
 801b580:	3f490fd8 	.word	0x3f490fd8
 801b584:	00000000 	.word	0x00000000

0801b588 <__kernel_cosf>:
 801b588:	ee10 3a10 	vmov	r3, s0
 801b58c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b590:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801b594:	eef0 6a40 	vmov.f32	s13, s0
 801b598:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b59c:	d204      	bcs.n	801b5a8 <__kernel_cosf+0x20>
 801b59e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801b5a2:	ee17 2a90 	vmov	r2, s15
 801b5a6:	b342      	cbz	r2, 801b5fa <__kernel_cosf+0x72>
 801b5a8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801b5ac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801b618 <__kernel_cosf+0x90>
 801b5b0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801b61c <__kernel_cosf+0x94>
 801b5b4:	4a1a      	ldr	r2, [pc, #104]	@ (801b620 <__kernel_cosf+0x98>)
 801b5b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b5ba:	4293      	cmp	r3, r2
 801b5bc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b624 <__kernel_cosf+0x9c>
 801b5c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b5c4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801b628 <__kernel_cosf+0xa0>
 801b5c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b5cc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801b62c <__kernel_cosf+0xa4>
 801b5d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b5d4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801b630 <__kernel_cosf+0xa8>
 801b5d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b5dc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801b5e0:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b5e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b5e8:	eee7 0a06 	vfma.f32	s1, s14, s12
 801b5ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b5f0:	d804      	bhi.n	801b5fc <__kernel_cosf+0x74>
 801b5f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b5f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b5fa:	4770      	bx	lr
 801b5fc:	4a0d      	ldr	r2, [pc, #52]	@ (801b634 <__kernel_cosf+0xac>)
 801b5fe:	4293      	cmp	r3, r2
 801b600:	bf9a      	itte	ls
 801b602:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801b606:	ee07 3a10 	vmovls	s14, r3
 801b60a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801b60e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b616:	e7ec      	b.n	801b5f2 <__kernel_cosf+0x6a>
 801b618:	ad47d74e 	.word	0xad47d74e
 801b61c:	310f74f6 	.word	0x310f74f6
 801b620:	3e999999 	.word	0x3e999999
 801b624:	b493f27c 	.word	0xb493f27c
 801b628:	37d00d01 	.word	0x37d00d01
 801b62c:	bab60b61 	.word	0xbab60b61
 801b630:	3d2aaaab 	.word	0x3d2aaaab
 801b634:	3f480000 	.word	0x3f480000

0801b638 <__kernel_sinf>:
 801b638:	ee10 3a10 	vmov	r3, s0
 801b63c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b640:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801b644:	d204      	bcs.n	801b650 <__kernel_sinf+0x18>
 801b646:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b64a:	ee17 3a90 	vmov	r3, s15
 801b64e:	b35b      	cbz	r3, 801b6a8 <__kernel_sinf+0x70>
 801b650:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b654:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801b6ac <__kernel_sinf+0x74>
 801b658:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801b6b0 <__kernel_sinf+0x78>
 801b65c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b660:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801b6b4 <__kernel_sinf+0x7c>
 801b664:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b668:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801b6b8 <__kernel_sinf+0x80>
 801b66c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b670:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801b6bc <__kernel_sinf+0x84>
 801b674:	ee60 6a07 	vmul.f32	s13, s0, s14
 801b678:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b67c:	b930      	cbnz	r0, 801b68c <__kernel_sinf+0x54>
 801b67e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801b6c0 <__kernel_sinf+0x88>
 801b682:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b686:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b68a:	4770      	bx	lr
 801b68c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801b690:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801b694:	eee0 7a86 	vfma.f32	s15, s1, s12
 801b698:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801b69c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801b6c4 <__kernel_sinf+0x8c>
 801b6a0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801b6a4:	ee30 0a60 	vsub.f32	s0, s0, s1
 801b6a8:	4770      	bx	lr
 801b6aa:	bf00      	nop
 801b6ac:	2f2ec9d3 	.word	0x2f2ec9d3
 801b6b0:	b2d72f34 	.word	0xb2d72f34
 801b6b4:	3638ef1b 	.word	0x3638ef1b
 801b6b8:	b9500d01 	.word	0xb9500d01
 801b6bc:	3c088889 	.word	0x3c088889
 801b6c0:	be2aaaab 	.word	0xbe2aaaab
 801b6c4:	3e2aaaab 	.word	0x3e2aaaab

0801b6c8 <__ieee754_rem_pio2f>:
 801b6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6ca:	ee10 6a10 	vmov	r6, s0
 801b6ce:	4b88      	ldr	r3, [pc, #544]	@ (801b8f0 <__ieee754_rem_pio2f+0x228>)
 801b6d0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801b6d4:	429d      	cmp	r5, r3
 801b6d6:	b087      	sub	sp, #28
 801b6d8:	4604      	mov	r4, r0
 801b6da:	d805      	bhi.n	801b6e8 <__ieee754_rem_pio2f+0x20>
 801b6dc:	2300      	movs	r3, #0
 801b6de:	ed80 0a00 	vstr	s0, [r0]
 801b6e2:	6043      	str	r3, [r0, #4]
 801b6e4:	2000      	movs	r0, #0
 801b6e6:	e022      	b.n	801b72e <__ieee754_rem_pio2f+0x66>
 801b6e8:	4b82      	ldr	r3, [pc, #520]	@ (801b8f4 <__ieee754_rem_pio2f+0x22c>)
 801b6ea:	429d      	cmp	r5, r3
 801b6ec:	d83a      	bhi.n	801b764 <__ieee754_rem_pio2f+0x9c>
 801b6ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b6f2:	2e00      	cmp	r6, #0
 801b6f4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801b8f8 <__ieee754_rem_pio2f+0x230>
 801b6f8:	4a80      	ldr	r2, [pc, #512]	@ (801b8fc <__ieee754_rem_pio2f+0x234>)
 801b6fa:	f023 030f 	bic.w	r3, r3, #15
 801b6fe:	dd18      	ble.n	801b732 <__ieee754_rem_pio2f+0x6a>
 801b700:	4293      	cmp	r3, r2
 801b702:	ee70 7a47 	vsub.f32	s15, s0, s14
 801b706:	bf09      	itett	eq
 801b708:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801b900 <__ieee754_rem_pio2f+0x238>
 801b70c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801b904 <__ieee754_rem_pio2f+0x23c>
 801b710:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801b908 <__ieee754_rem_pio2f+0x240>
 801b714:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801b718:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801b71c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b720:	ed80 7a00 	vstr	s14, [r0]
 801b724:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b728:	edc0 7a01 	vstr	s15, [r0, #4]
 801b72c:	2001      	movs	r0, #1
 801b72e:	b007      	add	sp, #28
 801b730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b732:	4293      	cmp	r3, r2
 801b734:	ee70 7a07 	vadd.f32	s15, s0, s14
 801b738:	bf09      	itett	eq
 801b73a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801b900 <__ieee754_rem_pio2f+0x238>
 801b73e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801b904 <__ieee754_rem_pio2f+0x23c>
 801b742:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801b908 <__ieee754_rem_pio2f+0x240>
 801b746:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801b74a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b74e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b752:	ed80 7a00 	vstr	s14, [r0]
 801b756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b75a:	edc0 7a01 	vstr	s15, [r0, #4]
 801b75e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b762:	e7e4      	b.n	801b72e <__ieee754_rem_pio2f+0x66>
 801b764:	4b69      	ldr	r3, [pc, #420]	@ (801b90c <__ieee754_rem_pio2f+0x244>)
 801b766:	429d      	cmp	r5, r3
 801b768:	d873      	bhi.n	801b852 <__ieee754_rem_pio2f+0x18a>
 801b76a:	f000 f8dd 	bl	801b928 <fabsf>
 801b76e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801b910 <__ieee754_rem_pio2f+0x248>
 801b772:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b776:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b77a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b77e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b782:	ee17 0a90 	vmov	r0, s15
 801b786:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b8f8 <__ieee754_rem_pio2f+0x230>
 801b78a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b78e:	281f      	cmp	r0, #31
 801b790:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b904 <__ieee754_rem_pio2f+0x23c>
 801b794:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b798:	eeb1 6a47 	vneg.f32	s12, s14
 801b79c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b7a0:	ee16 1a90 	vmov	r1, s13
 801b7a4:	dc09      	bgt.n	801b7ba <__ieee754_rem_pio2f+0xf2>
 801b7a6:	4a5b      	ldr	r2, [pc, #364]	@ (801b914 <__ieee754_rem_pio2f+0x24c>)
 801b7a8:	1e47      	subs	r7, r0, #1
 801b7aa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b7ae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801b7b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801b7b6:	4293      	cmp	r3, r2
 801b7b8:	d107      	bne.n	801b7ca <__ieee754_rem_pio2f+0x102>
 801b7ba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801b7be:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801b7c2:	2a08      	cmp	r2, #8
 801b7c4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801b7c8:	dc14      	bgt.n	801b7f4 <__ieee754_rem_pio2f+0x12c>
 801b7ca:	6021      	str	r1, [r4, #0]
 801b7cc:	ed94 7a00 	vldr	s14, [r4]
 801b7d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b7d4:	2e00      	cmp	r6, #0
 801b7d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b7da:	ed84 0a01 	vstr	s0, [r4, #4]
 801b7de:	daa6      	bge.n	801b72e <__ieee754_rem_pio2f+0x66>
 801b7e0:	eeb1 7a47 	vneg.f32	s14, s14
 801b7e4:	eeb1 0a40 	vneg.f32	s0, s0
 801b7e8:	ed84 7a00 	vstr	s14, [r4]
 801b7ec:	ed84 0a01 	vstr	s0, [r4, #4]
 801b7f0:	4240      	negs	r0, r0
 801b7f2:	e79c      	b.n	801b72e <__ieee754_rem_pio2f+0x66>
 801b7f4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801b900 <__ieee754_rem_pio2f+0x238>
 801b7f8:	eef0 6a40 	vmov.f32	s13, s0
 801b7fc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801b800:	ee70 7a66 	vsub.f32	s15, s0, s13
 801b804:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b808:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b908 <__ieee754_rem_pio2f+0x240>
 801b80c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801b810:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801b814:	ee15 2a90 	vmov	r2, s11
 801b818:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b81c:	1a5b      	subs	r3, r3, r1
 801b81e:	2b19      	cmp	r3, #25
 801b820:	dc04      	bgt.n	801b82c <__ieee754_rem_pio2f+0x164>
 801b822:	edc4 5a00 	vstr	s11, [r4]
 801b826:	eeb0 0a66 	vmov.f32	s0, s13
 801b82a:	e7cf      	b.n	801b7cc <__ieee754_rem_pio2f+0x104>
 801b82c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801b918 <__ieee754_rem_pio2f+0x250>
 801b830:	eeb0 0a66 	vmov.f32	s0, s13
 801b834:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b838:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b83c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801b91c <__ieee754_rem_pio2f+0x254>
 801b840:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b844:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b848:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b84c:	ed84 7a00 	vstr	s14, [r4]
 801b850:	e7bc      	b.n	801b7cc <__ieee754_rem_pio2f+0x104>
 801b852:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801b856:	d306      	bcc.n	801b866 <__ieee754_rem_pio2f+0x19e>
 801b858:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b85c:	edc0 7a01 	vstr	s15, [r0, #4]
 801b860:	edc0 7a00 	vstr	s15, [r0]
 801b864:	e73e      	b.n	801b6e4 <__ieee754_rem_pio2f+0x1c>
 801b866:	15ea      	asrs	r2, r5, #23
 801b868:	3a86      	subs	r2, #134	@ 0x86
 801b86a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b86e:	ee07 3a90 	vmov	s15, r3
 801b872:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b876:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801b920 <__ieee754_rem_pio2f+0x258>
 801b87a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b87e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b882:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b886:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b88a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b88e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b892:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b896:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b89a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b89e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a6:	edcd 7a05 	vstr	s15, [sp, #20]
 801b8aa:	d11e      	bne.n	801b8ea <__ieee754_rem_pio2f+0x222>
 801b8ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8b4:	bf0c      	ite	eq
 801b8b6:	2301      	moveq	r3, #1
 801b8b8:	2302      	movne	r3, #2
 801b8ba:	491a      	ldr	r1, [pc, #104]	@ (801b924 <__ieee754_rem_pio2f+0x25c>)
 801b8bc:	9101      	str	r1, [sp, #4]
 801b8be:	2102      	movs	r1, #2
 801b8c0:	9100      	str	r1, [sp, #0]
 801b8c2:	a803      	add	r0, sp, #12
 801b8c4:	4621      	mov	r1, r4
 801b8c6:	f000 f837 	bl	801b938 <__kernel_rem_pio2f>
 801b8ca:	2e00      	cmp	r6, #0
 801b8cc:	f6bf af2f 	bge.w	801b72e <__ieee754_rem_pio2f+0x66>
 801b8d0:	edd4 7a00 	vldr	s15, [r4]
 801b8d4:	eef1 7a67 	vneg.f32	s15, s15
 801b8d8:	edc4 7a00 	vstr	s15, [r4]
 801b8dc:	edd4 7a01 	vldr	s15, [r4, #4]
 801b8e0:	eef1 7a67 	vneg.f32	s15, s15
 801b8e4:	edc4 7a01 	vstr	s15, [r4, #4]
 801b8e8:	e782      	b.n	801b7f0 <__ieee754_rem_pio2f+0x128>
 801b8ea:	2303      	movs	r3, #3
 801b8ec:	e7e5      	b.n	801b8ba <__ieee754_rem_pio2f+0x1f2>
 801b8ee:	bf00      	nop
 801b8f0:	3f490fd8 	.word	0x3f490fd8
 801b8f4:	4016cbe3 	.word	0x4016cbe3
 801b8f8:	3fc90f80 	.word	0x3fc90f80
 801b8fc:	3fc90fd0 	.word	0x3fc90fd0
 801b900:	37354400 	.word	0x37354400
 801b904:	37354443 	.word	0x37354443
 801b908:	2e85a308 	.word	0x2e85a308
 801b90c:	43490f80 	.word	0x43490f80
 801b910:	3f22f984 	.word	0x3f22f984
 801b914:	0801e820 	.word	0x0801e820
 801b918:	2e85a300 	.word	0x2e85a300
 801b91c:	248d3132 	.word	0x248d3132
 801b920:	43800000 	.word	0x43800000
 801b924:	0801e8a0 	.word	0x0801e8a0

0801b928 <fabsf>:
 801b928:	ee10 3a10 	vmov	r3, s0
 801b92c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b930:	ee00 3a10 	vmov	s0, r3
 801b934:	4770      	bx	lr
	...

0801b938 <__kernel_rem_pio2f>:
 801b938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b93c:	ed2d 8b04 	vpush	{d8-d9}
 801b940:	b0d9      	sub	sp, #356	@ 0x164
 801b942:	4690      	mov	r8, r2
 801b944:	9001      	str	r0, [sp, #4]
 801b946:	4ab6      	ldr	r2, [pc, #728]	@ (801bc20 <__kernel_rem_pio2f+0x2e8>)
 801b948:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801b94a:	f118 0f04 	cmn.w	r8, #4
 801b94e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801b952:	460f      	mov	r7, r1
 801b954:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801b958:	db26      	blt.n	801b9a8 <__kernel_rem_pio2f+0x70>
 801b95a:	f1b8 0203 	subs.w	r2, r8, #3
 801b95e:	bf48      	it	mi
 801b960:	f108 0204 	addmi.w	r2, r8, #4
 801b964:	10d2      	asrs	r2, r2, #3
 801b966:	1c55      	adds	r5, r2, #1
 801b968:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b96a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801b96e:	00e8      	lsls	r0, r5, #3
 801b970:	eba2 060b 	sub.w	r6, r2, fp
 801b974:	9002      	str	r0, [sp, #8]
 801b976:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801b97a:	eb0a 0c0b 	add.w	ip, sl, fp
 801b97e:	ac1c      	add	r4, sp, #112	@ 0x70
 801b980:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801b984:	2000      	movs	r0, #0
 801b986:	4560      	cmp	r0, ip
 801b988:	dd10      	ble.n	801b9ac <__kernel_rem_pio2f+0x74>
 801b98a:	a91c      	add	r1, sp, #112	@ 0x70
 801b98c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801b990:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801b994:	2600      	movs	r6, #0
 801b996:	4556      	cmp	r6, sl
 801b998:	dc24      	bgt.n	801b9e4 <__kernel_rem_pio2f+0xac>
 801b99a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b99e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801b9a2:	4684      	mov	ip, r0
 801b9a4:	2400      	movs	r4, #0
 801b9a6:	e016      	b.n	801b9d6 <__kernel_rem_pio2f+0x9e>
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	e7dc      	b.n	801b966 <__kernel_rem_pio2f+0x2e>
 801b9ac:	42c6      	cmn	r6, r0
 801b9ae:	bf5d      	ittte	pl
 801b9b0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801b9b4:	ee07 1a90 	vmovpl	s15, r1
 801b9b8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b9bc:	eef0 7a47 	vmovmi.f32	s15, s14
 801b9c0:	ece4 7a01 	vstmia	r4!, {s15}
 801b9c4:	3001      	adds	r0, #1
 801b9c6:	e7de      	b.n	801b986 <__kernel_rem_pio2f+0x4e>
 801b9c8:	ecfe 6a01 	vldmia	lr!, {s13}
 801b9cc:	ed3c 7a01 	vldmdb	ip!, {s14}
 801b9d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b9d4:	3401      	adds	r4, #1
 801b9d6:	455c      	cmp	r4, fp
 801b9d8:	ddf6      	ble.n	801b9c8 <__kernel_rem_pio2f+0x90>
 801b9da:	ece9 7a01 	vstmia	r9!, {s15}
 801b9de:	3601      	adds	r6, #1
 801b9e0:	3004      	adds	r0, #4
 801b9e2:	e7d8      	b.n	801b996 <__kernel_rem_pio2f+0x5e>
 801b9e4:	a908      	add	r1, sp, #32
 801b9e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b9ea:	9104      	str	r1, [sp, #16]
 801b9ec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b9ee:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801bc2c <__kernel_rem_pio2f+0x2f4>
 801b9f2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801bc28 <__kernel_rem_pio2f+0x2f0>
 801b9f6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801b9fa:	9203      	str	r2, [sp, #12]
 801b9fc:	4654      	mov	r4, sl
 801b9fe:	00a2      	lsls	r2, r4, #2
 801ba00:	9205      	str	r2, [sp, #20]
 801ba02:	aa58      	add	r2, sp, #352	@ 0x160
 801ba04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ba08:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801ba0c:	a944      	add	r1, sp, #272	@ 0x110
 801ba0e:	aa08      	add	r2, sp, #32
 801ba10:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801ba14:	4694      	mov	ip, r2
 801ba16:	4626      	mov	r6, r4
 801ba18:	2e00      	cmp	r6, #0
 801ba1a:	dc4c      	bgt.n	801bab6 <__kernel_rem_pio2f+0x17e>
 801ba1c:	4628      	mov	r0, r5
 801ba1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ba22:	f000 f9f1 	bl	801be08 <scalbnf>
 801ba26:	eeb0 8a40 	vmov.f32	s16, s0
 801ba2a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801ba2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ba32:	f000 fa4f 	bl	801bed4 <floorf>
 801ba36:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801ba3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ba3e:	2d00      	cmp	r5, #0
 801ba40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ba44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ba48:	ee17 9a90 	vmov	r9, s15
 801ba4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba50:	ee38 8a67 	vsub.f32	s16, s16, s15
 801ba54:	dd41      	ble.n	801bada <__kernel_rem_pio2f+0x1a2>
 801ba56:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801ba5a:	a908      	add	r1, sp, #32
 801ba5c:	f1c5 0e08 	rsb	lr, r5, #8
 801ba60:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801ba64:	fa46 f00e 	asr.w	r0, r6, lr
 801ba68:	4481      	add	r9, r0
 801ba6a:	fa00 f00e 	lsl.w	r0, r0, lr
 801ba6e:	1a36      	subs	r6, r6, r0
 801ba70:	f1c5 0007 	rsb	r0, r5, #7
 801ba74:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801ba78:	4106      	asrs	r6, r0
 801ba7a:	2e00      	cmp	r6, #0
 801ba7c:	dd3c      	ble.n	801baf8 <__kernel_rem_pio2f+0x1c0>
 801ba7e:	f04f 0e00 	mov.w	lr, #0
 801ba82:	f109 0901 	add.w	r9, r9, #1
 801ba86:	4670      	mov	r0, lr
 801ba88:	4574      	cmp	r4, lr
 801ba8a:	dc68      	bgt.n	801bb5e <__kernel_rem_pio2f+0x226>
 801ba8c:	2d00      	cmp	r5, #0
 801ba8e:	dd03      	ble.n	801ba98 <__kernel_rem_pio2f+0x160>
 801ba90:	2d01      	cmp	r5, #1
 801ba92:	d074      	beq.n	801bb7e <__kernel_rem_pio2f+0x246>
 801ba94:	2d02      	cmp	r5, #2
 801ba96:	d07d      	beq.n	801bb94 <__kernel_rem_pio2f+0x25c>
 801ba98:	2e02      	cmp	r6, #2
 801ba9a:	d12d      	bne.n	801baf8 <__kernel_rem_pio2f+0x1c0>
 801ba9c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801baa0:	ee30 8a48 	vsub.f32	s16, s0, s16
 801baa4:	b340      	cbz	r0, 801baf8 <__kernel_rem_pio2f+0x1c0>
 801baa6:	4628      	mov	r0, r5
 801baa8:	9306      	str	r3, [sp, #24]
 801baaa:	f000 f9ad 	bl	801be08 <scalbnf>
 801baae:	9b06      	ldr	r3, [sp, #24]
 801bab0:	ee38 8a40 	vsub.f32	s16, s16, s0
 801bab4:	e020      	b.n	801baf8 <__kernel_rem_pio2f+0x1c0>
 801bab6:	ee60 7a28 	vmul.f32	s15, s0, s17
 801baba:	3e01      	subs	r6, #1
 801babc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bac4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801bac8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bacc:	ecac 0a01 	vstmia	ip!, {s0}
 801bad0:	ed30 0a01 	vldmdb	r0!, {s0}
 801bad4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801bad8:	e79e      	b.n	801ba18 <__kernel_rem_pio2f+0xe0>
 801bada:	d105      	bne.n	801bae8 <__kernel_rem_pio2f+0x1b0>
 801badc:	1e60      	subs	r0, r4, #1
 801bade:	a908      	add	r1, sp, #32
 801bae0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801bae4:	11f6      	asrs	r6, r6, #7
 801bae6:	e7c8      	b.n	801ba7a <__kernel_rem_pio2f+0x142>
 801bae8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801baec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801baf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baf4:	da31      	bge.n	801bb5a <__kernel_rem_pio2f+0x222>
 801baf6:	2600      	movs	r6, #0
 801baf8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801bafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb00:	f040 8098 	bne.w	801bc34 <__kernel_rem_pio2f+0x2fc>
 801bb04:	1e60      	subs	r0, r4, #1
 801bb06:	2200      	movs	r2, #0
 801bb08:	4550      	cmp	r0, sl
 801bb0a:	da4b      	bge.n	801bba4 <__kernel_rem_pio2f+0x26c>
 801bb0c:	2a00      	cmp	r2, #0
 801bb0e:	d065      	beq.n	801bbdc <__kernel_rem_pio2f+0x2a4>
 801bb10:	3c01      	subs	r4, #1
 801bb12:	ab08      	add	r3, sp, #32
 801bb14:	3d08      	subs	r5, #8
 801bb16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801bb1a:	2b00      	cmp	r3, #0
 801bb1c:	d0f8      	beq.n	801bb10 <__kernel_rem_pio2f+0x1d8>
 801bb1e:	4628      	mov	r0, r5
 801bb20:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801bb24:	f000 f970 	bl	801be08 <scalbnf>
 801bb28:	1c63      	adds	r3, r4, #1
 801bb2a:	aa44      	add	r2, sp, #272	@ 0x110
 801bb2c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801bc2c <__kernel_rem_pio2f+0x2f4>
 801bb30:	0099      	lsls	r1, r3, #2
 801bb32:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bb36:	4623      	mov	r3, r4
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	f280 80a9 	bge.w	801bc90 <__kernel_rem_pio2f+0x358>
 801bb3e:	4623      	mov	r3, r4
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	f2c0 80c7 	blt.w	801bcd4 <__kernel_rem_pio2f+0x39c>
 801bb46:	aa44      	add	r2, sp, #272	@ 0x110
 801bb48:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801bb4c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801bc24 <__kernel_rem_pio2f+0x2ec>
 801bb50:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801bb54:	2000      	movs	r0, #0
 801bb56:	1ae2      	subs	r2, r4, r3
 801bb58:	e0b1      	b.n	801bcbe <__kernel_rem_pio2f+0x386>
 801bb5a:	2602      	movs	r6, #2
 801bb5c:	e78f      	b.n	801ba7e <__kernel_rem_pio2f+0x146>
 801bb5e:	f852 1b04 	ldr.w	r1, [r2], #4
 801bb62:	b948      	cbnz	r0, 801bb78 <__kernel_rem_pio2f+0x240>
 801bb64:	b121      	cbz	r1, 801bb70 <__kernel_rem_pio2f+0x238>
 801bb66:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801bb6a:	f842 1c04 	str.w	r1, [r2, #-4]
 801bb6e:	2101      	movs	r1, #1
 801bb70:	f10e 0e01 	add.w	lr, lr, #1
 801bb74:	4608      	mov	r0, r1
 801bb76:	e787      	b.n	801ba88 <__kernel_rem_pio2f+0x150>
 801bb78:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801bb7c:	e7f5      	b.n	801bb6a <__kernel_rem_pio2f+0x232>
 801bb7e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801bb82:	aa08      	add	r2, sp, #32
 801bb84:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801bb88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801bb8c:	a908      	add	r1, sp, #32
 801bb8e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801bb92:	e781      	b.n	801ba98 <__kernel_rem_pio2f+0x160>
 801bb94:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801bb98:	aa08      	add	r2, sp, #32
 801bb9a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801bb9e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801bba2:	e7f3      	b.n	801bb8c <__kernel_rem_pio2f+0x254>
 801bba4:	a908      	add	r1, sp, #32
 801bba6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801bbaa:	3801      	subs	r0, #1
 801bbac:	430a      	orrs	r2, r1
 801bbae:	e7ab      	b.n	801bb08 <__kernel_rem_pio2f+0x1d0>
 801bbb0:	3201      	adds	r2, #1
 801bbb2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801bbb6:	2e00      	cmp	r6, #0
 801bbb8:	d0fa      	beq.n	801bbb0 <__kernel_rem_pio2f+0x278>
 801bbba:	9905      	ldr	r1, [sp, #20]
 801bbbc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801bbc0:	eb0d 0001 	add.w	r0, sp, r1
 801bbc4:	18e6      	adds	r6, r4, r3
 801bbc6:	a91c      	add	r1, sp, #112	@ 0x70
 801bbc8:	f104 0c01 	add.w	ip, r4, #1
 801bbcc:	384c      	subs	r0, #76	@ 0x4c
 801bbce:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801bbd2:	4422      	add	r2, r4
 801bbd4:	4562      	cmp	r2, ip
 801bbd6:	da04      	bge.n	801bbe2 <__kernel_rem_pio2f+0x2aa>
 801bbd8:	4614      	mov	r4, r2
 801bbda:	e710      	b.n	801b9fe <__kernel_rem_pio2f+0xc6>
 801bbdc:	9804      	ldr	r0, [sp, #16]
 801bbde:	2201      	movs	r2, #1
 801bbe0:	e7e7      	b.n	801bbb2 <__kernel_rem_pio2f+0x27a>
 801bbe2:	9903      	ldr	r1, [sp, #12]
 801bbe4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801bbe8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801bbec:	9105      	str	r1, [sp, #20]
 801bbee:	ee07 1a90 	vmov	s15, r1
 801bbf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbf6:	2400      	movs	r4, #0
 801bbf8:	ece6 7a01 	vstmia	r6!, {s15}
 801bbfc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801bc00:	46b1      	mov	r9, r6
 801bc02:	455c      	cmp	r4, fp
 801bc04:	dd04      	ble.n	801bc10 <__kernel_rem_pio2f+0x2d8>
 801bc06:	ece0 7a01 	vstmia	r0!, {s15}
 801bc0a:	f10c 0c01 	add.w	ip, ip, #1
 801bc0e:	e7e1      	b.n	801bbd4 <__kernel_rem_pio2f+0x29c>
 801bc10:	ecfe 6a01 	vldmia	lr!, {s13}
 801bc14:	ed39 7a01 	vldmdb	r9!, {s14}
 801bc18:	3401      	adds	r4, #1
 801bc1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bc1e:	e7f0      	b.n	801bc02 <__kernel_rem_pio2f+0x2ca>
 801bc20:	0801ebe4 	.word	0x0801ebe4
 801bc24:	0801ebb8 	.word	0x0801ebb8
 801bc28:	43800000 	.word	0x43800000
 801bc2c:	3b800000 	.word	0x3b800000
 801bc30:	00000000 	.word	0x00000000
 801bc34:	9b02      	ldr	r3, [sp, #8]
 801bc36:	eeb0 0a48 	vmov.f32	s0, s16
 801bc3a:	eba3 0008 	sub.w	r0, r3, r8
 801bc3e:	f000 f8e3 	bl	801be08 <scalbnf>
 801bc42:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801bc28 <__kernel_rem_pio2f+0x2f0>
 801bc46:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801bc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc4e:	db19      	blt.n	801bc84 <__kernel_rem_pio2f+0x34c>
 801bc50:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801bc2c <__kernel_rem_pio2f+0x2f4>
 801bc54:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bc58:	aa08      	add	r2, sp, #32
 801bc5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc5e:	3508      	adds	r5, #8
 801bc60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc64:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801bc68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bc70:	ee10 3a10 	vmov	r3, s0
 801bc74:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801bc78:	ee17 3a90 	vmov	r3, s15
 801bc7c:	3401      	adds	r4, #1
 801bc7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801bc82:	e74c      	b.n	801bb1e <__kernel_rem_pio2f+0x1e6>
 801bc84:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bc88:	aa08      	add	r2, sp, #32
 801bc8a:	ee10 3a10 	vmov	r3, s0
 801bc8e:	e7f6      	b.n	801bc7e <__kernel_rem_pio2f+0x346>
 801bc90:	a808      	add	r0, sp, #32
 801bc92:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801bc96:	9001      	str	r0, [sp, #4]
 801bc98:	ee07 0a90 	vmov	s15, r0
 801bc9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bca0:	3b01      	subs	r3, #1
 801bca2:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bca6:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bcaa:	ed62 7a01 	vstmdb	r2!, {s15}
 801bcae:	e743      	b.n	801bb38 <__kernel_rem_pio2f+0x200>
 801bcb0:	ecfc 6a01 	vldmia	ip!, {s13}
 801bcb4:	ecb5 7a01 	vldmia	r5!, {s14}
 801bcb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bcbc:	3001      	adds	r0, #1
 801bcbe:	4550      	cmp	r0, sl
 801bcc0:	dc01      	bgt.n	801bcc6 <__kernel_rem_pio2f+0x38e>
 801bcc2:	4290      	cmp	r0, r2
 801bcc4:	ddf4      	ble.n	801bcb0 <__kernel_rem_pio2f+0x378>
 801bcc6:	a858      	add	r0, sp, #352	@ 0x160
 801bcc8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801bccc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801bcd0:	3b01      	subs	r3, #1
 801bcd2:	e735      	b.n	801bb40 <__kernel_rem_pio2f+0x208>
 801bcd4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801bcd6:	2b02      	cmp	r3, #2
 801bcd8:	dc09      	bgt.n	801bcee <__kernel_rem_pio2f+0x3b6>
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	dc27      	bgt.n	801bd2e <__kernel_rem_pio2f+0x3f6>
 801bcde:	d040      	beq.n	801bd62 <__kernel_rem_pio2f+0x42a>
 801bce0:	f009 0007 	and.w	r0, r9, #7
 801bce4:	b059      	add	sp, #356	@ 0x164
 801bce6:	ecbd 8b04 	vpop	{d8-d9}
 801bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcee:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801bcf0:	2b03      	cmp	r3, #3
 801bcf2:	d1f5      	bne.n	801bce0 <__kernel_rem_pio2f+0x3a8>
 801bcf4:	aa30      	add	r2, sp, #192	@ 0xc0
 801bcf6:	1f0b      	subs	r3, r1, #4
 801bcf8:	4413      	add	r3, r2
 801bcfa:	461a      	mov	r2, r3
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	2800      	cmp	r0, #0
 801bd00:	dc50      	bgt.n	801bda4 <__kernel_rem_pio2f+0x46c>
 801bd02:	4622      	mov	r2, r4
 801bd04:	2a01      	cmp	r2, #1
 801bd06:	dc5d      	bgt.n	801bdc4 <__kernel_rem_pio2f+0x48c>
 801bd08:	ab30      	add	r3, sp, #192	@ 0xc0
 801bd0a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801bd0e:	440b      	add	r3, r1
 801bd10:	2c01      	cmp	r4, #1
 801bd12:	dc67      	bgt.n	801bde4 <__kernel_rem_pio2f+0x4ac>
 801bd14:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801bd18:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801bd1c:	2e00      	cmp	r6, #0
 801bd1e:	d167      	bne.n	801bdf0 <__kernel_rem_pio2f+0x4b8>
 801bd20:	edc7 6a00 	vstr	s13, [r7]
 801bd24:	ed87 7a01 	vstr	s14, [r7, #4]
 801bd28:	edc7 7a02 	vstr	s15, [r7, #8]
 801bd2c:	e7d8      	b.n	801bce0 <__kernel_rem_pio2f+0x3a8>
 801bd2e:	ab30      	add	r3, sp, #192	@ 0xc0
 801bd30:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801bd34:	440b      	add	r3, r1
 801bd36:	4622      	mov	r2, r4
 801bd38:	2a00      	cmp	r2, #0
 801bd3a:	da24      	bge.n	801bd86 <__kernel_rem_pio2f+0x44e>
 801bd3c:	b34e      	cbz	r6, 801bd92 <__kernel_rem_pio2f+0x45a>
 801bd3e:	eef1 7a47 	vneg.f32	s15, s14
 801bd42:	edc7 7a00 	vstr	s15, [r7]
 801bd46:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801bd4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bd4e:	aa31      	add	r2, sp, #196	@ 0xc4
 801bd50:	2301      	movs	r3, #1
 801bd52:	429c      	cmp	r4, r3
 801bd54:	da20      	bge.n	801bd98 <__kernel_rem_pio2f+0x460>
 801bd56:	b10e      	cbz	r6, 801bd5c <__kernel_rem_pio2f+0x424>
 801bd58:	eef1 7a67 	vneg.f32	s15, s15
 801bd5c:	edc7 7a01 	vstr	s15, [r7, #4]
 801bd60:	e7be      	b.n	801bce0 <__kernel_rem_pio2f+0x3a8>
 801bd62:	ab30      	add	r3, sp, #192	@ 0xc0
 801bd64:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801bc30 <__kernel_rem_pio2f+0x2f8>
 801bd68:	440b      	add	r3, r1
 801bd6a:	2c00      	cmp	r4, #0
 801bd6c:	da05      	bge.n	801bd7a <__kernel_rem_pio2f+0x442>
 801bd6e:	b10e      	cbz	r6, 801bd74 <__kernel_rem_pio2f+0x43c>
 801bd70:	eef1 7a67 	vneg.f32	s15, s15
 801bd74:	edc7 7a00 	vstr	s15, [r7]
 801bd78:	e7b2      	b.n	801bce0 <__kernel_rem_pio2f+0x3a8>
 801bd7a:	ed33 7a01 	vldmdb	r3!, {s14}
 801bd7e:	3c01      	subs	r4, #1
 801bd80:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bd84:	e7f1      	b.n	801bd6a <__kernel_rem_pio2f+0x432>
 801bd86:	ed73 7a01 	vldmdb	r3!, {s15}
 801bd8a:	3a01      	subs	r2, #1
 801bd8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bd90:	e7d2      	b.n	801bd38 <__kernel_rem_pio2f+0x400>
 801bd92:	eef0 7a47 	vmov.f32	s15, s14
 801bd96:	e7d4      	b.n	801bd42 <__kernel_rem_pio2f+0x40a>
 801bd98:	ecb2 7a01 	vldmia	r2!, {s14}
 801bd9c:	3301      	adds	r3, #1
 801bd9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bda2:	e7d6      	b.n	801bd52 <__kernel_rem_pio2f+0x41a>
 801bda4:	ed72 7a01 	vldmdb	r2!, {s15}
 801bda8:	edd2 6a01 	vldr	s13, [r2, #4]
 801bdac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bdb0:	3801      	subs	r0, #1
 801bdb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bdb6:	ed82 7a00 	vstr	s14, [r2]
 801bdba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bdbe:	edc2 7a01 	vstr	s15, [r2, #4]
 801bdc2:	e79c      	b.n	801bcfe <__kernel_rem_pio2f+0x3c6>
 801bdc4:	ed73 7a01 	vldmdb	r3!, {s15}
 801bdc8:	edd3 6a01 	vldr	s13, [r3, #4]
 801bdcc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bdd0:	3a01      	subs	r2, #1
 801bdd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bdd6:	ed83 7a00 	vstr	s14, [r3]
 801bdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bdde:	edc3 7a01 	vstr	s15, [r3, #4]
 801bde2:	e78f      	b.n	801bd04 <__kernel_rem_pio2f+0x3cc>
 801bde4:	ed33 7a01 	vldmdb	r3!, {s14}
 801bde8:	3c01      	subs	r4, #1
 801bdea:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bdee:	e78f      	b.n	801bd10 <__kernel_rem_pio2f+0x3d8>
 801bdf0:	eef1 6a66 	vneg.f32	s13, s13
 801bdf4:	eeb1 7a47 	vneg.f32	s14, s14
 801bdf8:	edc7 6a00 	vstr	s13, [r7]
 801bdfc:	ed87 7a01 	vstr	s14, [r7, #4]
 801be00:	eef1 7a67 	vneg.f32	s15, s15
 801be04:	e790      	b.n	801bd28 <__kernel_rem_pio2f+0x3f0>
 801be06:	bf00      	nop

0801be08 <scalbnf>:
 801be08:	ee10 3a10 	vmov	r3, s0
 801be0c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801be10:	d02b      	beq.n	801be6a <scalbnf+0x62>
 801be12:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801be16:	d302      	bcc.n	801be1e <scalbnf+0x16>
 801be18:	ee30 0a00 	vadd.f32	s0, s0, s0
 801be1c:	4770      	bx	lr
 801be1e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801be22:	d123      	bne.n	801be6c <scalbnf+0x64>
 801be24:	4b24      	ldr	r3, [pc, #144]	@ (801beb8 <scalbnf+0xb0>)
 801be26:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801bebc <scalbnf+0xb4>
 801be2a:	4298      	cmp	r0, r3
 801be2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801be30:	db17      	blt.n	801be62 <scalbnf+0x5a>
 801be32:	ee10 3a10 	vmov	r3, s0
 801be36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801be3a:	3a19      	subs	r2, #25
 801be3c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801be40:	4288      	cmp	r0, r1
 801be42:	dd15      	ble.n	801be70 <scalbnf+0x68>
 801be44:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801bec0 <scalbnf+0xb8>
 801be48:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801bec4 <scalbnf+0xbc>
 801be4c:	ee10 3a10 	vmov	r3, s0
 801be50:	eeb0 7a67 	vmov.f32	s14, s15
 801be54:	2b00      	cmp	r3, #0
 801be56:	bfb8      	it	lt
 801be58:	eef0 7a66 	vmovlt.f32	s15, s13
 801be5c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801be60:	4770      	bx	lr
 801be62:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801bec8 <scalbnf+0xc0>
 801be66:	ee27 0a80 	vmul.f32	s0, s15, s0
 801be6a:	4770      	bx	lr
 801be6c:	0dd2      	lsrs	r2, r2, #23
 801be6e:	e7e5      	b.n	801be3c <scalbnf+0x34>
 801be70:	4410      	add	r0, r2
 801be72:	28fe      	cmp	r0, #254	@ 0xfe
 801be74:	dce6      	bgt.n	801be44 <scalbnf+0x3c>
 801be76:	2800      	cmp	r0, #0
 801be78:	dd06      	ble.n	801be88 <scalbnf+0x80>
 801be7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801be7e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801be82:	ee00 3a10 	vmov	s0, r3
 801be86:	4770      	bx	lr
 801be88:	f110 0f16 	cmn.w	r0, #22
 801be8c:	da09      	bge.n	801bea2 <scalbnf+0x9a>
 801be8e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801bec8 <scalbnf+0xc0>
 801be92:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801becc <scalbnf+0xc4>
 801be96:	ee10 3a10 	vmov	r3, s0
 801be9a:	eeb0 7a67 	vmov.f32	s14, s15
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	e7d9      	b.n	801be56 <scalbnf+0x4e>
 801bea2:	3019      	adds	r0, #25
 801bea4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801bea8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801beac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801bed0 <scalbnf+0xc8>
 801beb0:	ee07 3a90 	vmov	s15, r3
 801beb4:	e7d7      	b.n	801be66 <scalbnf+0x5e>
 801beb6:	bf00      	nop
 801beb8:	ffff3cb0 	.word	0xffff3cb0
 801bebc:	4c000000 	.word	0x4c000000
 801bec0:	7149f2ca 	.word	0x7149f2ca
 801bec4:	f149f2ca 	.word	0xf149f2ca
 801bec8:	0da24260 	.word	0x0da24260
 801becc:	8da24260 	.word	0x8da24260
 801bed0:	33000000 	.word	0x33000000

0801bed4 <floorf>:
 801bed4:	ee10 3a10 	vmov	r3, s0
 801bed8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801bedc:	3a7f      	subs	r2, #127	@ 0x7f
 801bede:	2a16      	cmp	r2, #22
 801bee0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801bee4:	dc2b      	bgt.n	801bf3e <floorf+0x6a>
 801bee6:	2a00      	cmp	r2, #0
 801bee8:	da12      	bge.n	801bf10 <floorf+0x3c>
 801beea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801bf50 <floorf+0x7c>
 801beee:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bef2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801befa:	dd06      	ble.n	801bf0a <floorf+0x36>
 801befc:	2b00      	cmp	r3, #0
 801befe:	da24      	bge.n	801bf4a <floorf+0x76>
 801bf00:	2900      	cmp	r1, #0
 801bf02:	4b14      	ldr	r3, [pc, #80]	@ (801bf54 <floorf+0x80>)
 801bf04:	bf08      	it	eq
 801bf06:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801bf0a:	ee00 3a10 	vmov	s0, r3
 801bf0e:	4770      	bx	lr
 801bf10:	4911      	ldr	r1, [pc, #68]	@ (801bf58 <floorf+0x84>)
 801bf12:	4111      	asrs	r1, r2
 801bf14:	420b      	tst	r3, r1
 801bf16:	d0fa      	beq.n	801bf0e <floorf+0x3a>
 801bf18:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801bf50 <floorf+0x7c>
 801bf1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bf20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf28:	ddef      	ble.n	801bf0a <floorf+0x36>
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	bfbe      	ittt	lt
 801bf2e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801bf32:	fa40 f202 	asrlt.w	r2, r0, r2
 801bf36:	189b      	addlt	r3, r3, r2
 801bf38:	ea23 0301 	bic.w	r3, r3, r1
 801bf3c:	e7e5      	b.n	801bf0a <floorf+0x36>
 801bf3e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801bf42:	d3e4      	bcc.n	801bf0e <floorf+0x3a>
 801bf44:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bf48:	4770      	bx	lr
 801bf4a:	2300      	movs	r3, #0
 801bf4c:	e7dd      	b.n	801bf0a <floorf+0x36>
 801bf4e:	bf00      	nop
 801bf50:	7149f2ca 	.word	0x7149f2ca
 801bf54:	bf800000 	.word	0xbf800000
 801bf58:	007fffff 	.word	0x007fffff

0801bf5c <calloc>:
 801bf5c:	4b02      	ldr	r3, [pc, #8]	@ (801bf68 <calloc+0xc>)
 801bf5e:	460a      	mov	r2, r1
 801bf60:	4601      	mov	r1, r0
 801bf62:	6818      	ldr	r0, [r3, #0]
 801bf64:	f000 b802 	b.w	801bf6c <_calloc_r>
 801bf68:	2000090c 	.word	0x2000090c

0801bf6c <_calloc_r>:
 801bf6c:	b570      	push	{r4, r5, r6, lr}
 801bf6e:	fba1 5402 	umull	r5, r4, r1, r2
 801bf72:	b934      	cbnz	r4, 801bf82 <_calloc_r+0x16>
 801bf74:	4629      	mov	r1, r5
 801bf76:	f000 f899 	bl	801c0ac <_malloc_r>
 801bf7a:	4606      	mov	r6, r0
 801bf7c:	b928      	cbnz	r0, 801bf8a <_calloc_r+0x1e>
 801bf7e:	4630      	mov	r0, r6
 801bf80:	bd70      	pop	{r4, r5, r6, pc}
 801bf82:	220c      	movs	r2, #12
 801bf84:	6002      	str	r2, [r0, #0]
 801bf86:	2600      	movs	r6, #0
 801bf88:	e7f9      	b.n	801bf7e <_calloc_r+0x12>
 801bf8a:	462a      	mov	r2, r5
 801bf8c:	4621      	mov	r1, r4
 801bf8e:	f000 fcd5 	bl	801c93c <memset>
 801bf92:	e7f4      	b.n	801bf7e <_calloc_r+0x12>

0801bf94 <exit>:
 801bf94:	b508      	push	{r3, lr}
 801bf96:	4b06      	ldr	r3, [pc, #24]	@ (801bfb0 <exit+0x1c>)
 801bf98:	4604      	mov	r4, r0
 801bf9a:	b113      	cbz	r3, 801bfa2 <exit+0xe>
 801bf9c:	2100      	movs	r1, #0
 801bf9e:	f3af 8000 	nop.w
 801bfa2:	4b04      	ldr	r3, [pc, #16]	@ (801bfb4 <exit+0x20>)
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	b103      	cbz	r3, 801bfaa <exit+0x16>
 801bfa8:	4798      	blx	r3
 801bfaa:	4620      	mov	r0, r4
 801bfac:	f7e8 f854 	bl	8004058 <_exit>
 801bfb0:	00000000 	.word	0x00000000
 801bfb4:	20011d2c 	.word	0x20011d2c

0801bfb8 <getenv>:
 801bfb8:	b507      	push	{r0, r1, r2, lr}
 801bfba:	4b04      	ldr	r3, [pc, #16]	@ (801bfcc <getenv+0x14>)
 801bfbc:	4601      	mov	r1, r0
 801bfbe:	aa01      	add	r2, sp, #4
 801bfc0:	6818      	ldr	r0, [r3, #0]
 801bfc2:	f000 f805 	bl	801bfd0 <_findenv_r>
 801bfc6:	b003      	add	sp, #12
 801bfc8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfcc:	2000090c 	.word	0x2000090c

0801bfd0 <_findenv_r>:
 801bfd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801c044 <_findenv_r+0x74>
 801bfd8:	4606      	mov	r6, r0
 801bfda:	4689      	mov	r9, r1
 801bfdc:	4617      	mov	r7, r2
 801bfde:	f000 fda3 	bl	801cb28 <__env_lock>
 801bfe2:	f8da 4000 	ldr.w	r4, [sl]
 801bfe6:	b134      	cbz	r4, 801bff6 <_findenv_r+0x26>
 801bfe8:	464b      	mov	r3, r9
 801bfea:	4698      	mov	r8, r3
 801bfec:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bff0:	b13a      	cbz	r2, 801c002 <_findenv_r+0x32>
 801bff2:	2a3d      	cmp	r2, #61	@ 0x3d
 801bff4:	d1f9      	bne.n	801bfea <_findenv_r+0x1a>
 801bff6:	4630      	mov	r0, r6
 801bff8:	f000 fd9c 	bl	801cb34 <__env_unlock>
 801bffc:	2000      	movs	r0, #0
 801bffe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c002:	eba8 0809 	sub.w	r8, r8, r9
 801c006:	46a3      	mov	fp, r4
 801c008:	f854 0b04 	ldr.w	r0, [r4], #4
 801c00c:	2800      	cmp	r0, #0
 801c00e:	d0f2      	beq.n	801bff6 <_findenv_r+0x26>
 801c010:	4642      	mov	r2, r8
 801c012:	4649      	mov	r1, r9
 801c014:	f000 fca7 	bl	801c966 <strncmp>
 801c018:	2800      	cmp	r0, #0
 801c01a:	d1f4      	bne.n	801c006 <_findenv_r+0x36>
 801c01c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c020:	eb03 0508 	add.w	r5, r3, r8
 801c024:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c028:	2b3d      	cmp	r3, #61	@ 0x3d
 801c02a:	d1ec      	bne.n	801c006 <_findenv_r+0x36>
 801c02c:	f8da 3000 	ldr.w	r3, [sl]
 801c030:	ebab 0303 	sub.w	r3, fp, r3
 801c034:	109b      	asrs	r3, r3, #2
 801c036:	4630      	mov	r0, r6
 801c038:	603b      	str	r3, [r7, #0]
 801c03a:	f000 fd7b 	bl	801cb34 <__env_unlock>
 801c03e:	1c68      	adds	r0, r5, #1
 801c040:	e7dd      	b.n	801bffe <_findenv_r+0x2e>
 801c042:	bf00      	nop
 801c044:	20000004 	.word	0x20000004

0801c048 <malloc>:
 801c048:	4b02      	ldr	r3, [pc, #8]	@ (801c054 <malloc+0xc>)
 801c04a:	4601      	mov	r1, r0
 801c04c:	6818      	ldr	r0, [r3, #0]
 801c04e:	f000 b82d 	b.w	801c0ac <_malloc_r>
 801c052:	bf00      	nop
 801c054:	2000090c 	.word	0x2000090c

0801c058 <free>:
 801c058:	4b02      	ldr	r3, [pc, #8]	@ (801c064 <free+0xc>)
 801c05a:	4601      	mov	r1, r0
 801c05c:	6818      	ldr	r0, [r3, #0]
 801c05e:	f000 bd6f 	b.w	801cb40 <_free_r>
 801c062:	bf00      	nop
 801c064:	2000090c 	.word	0x2000090c

0801c068 <sbrk_aligned>:
 801c068:	b570      	push	{r4, r5, r6, lr}
 801c06a:	4e0f      	ldr	r6, [pc, #60]	@ (801c0a8 <sbrk_aligned+0x40>)
 801c06c:	460c      	mov	r4, r1
 801c06e:	6831      	ldr	r1, [r6, #0]
 801c070:	4605      	mov	r5, r0
 801c072:	b911      	cbnz	r1, 801c07a <sbrk_aligned+0x12>
 801c074:	f000 fcd4 	bl	801ca20 <_sbrk_r>
 801c078:	6030      	str	r0, [r6, #0]
 801c07a:	4621      	mov	r1, r4
 801c07c:	4628      	mov	r0, r5
 801c07e:	f000 fccf 	bl	801ca20 <_sbrk_r>
 801c082:	1c43      	adds	r3, r0, #1
 801c084:	d103      	bne.n	801c08e <sbrk_aligned+0x26>
 801c086:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801c08a:	4620      	mov	r0, r4
 801c08c:	bd70      	pop	{r4, r5, r6, pc}
 801c08e:	1cc4      	adds	r4, r0, #3
 801c090:	f024 0403 	bic.w	r4, r4, #3
 801c094:	42a0      	cmp	r0, r4
 801c096:	d0f8      	beq.n	801c08a <sbrk_aligned+0x22>
 801c098:	1a21      	subs	r1, r4, r0
 801c09a:	4628      	mov	r0, r5
 801c09c:	f000 fcc0 	bl	801ca20 <_sbrk_r>
 801c0a0:	3001      	adds	r0, #1
 801c0a2:	d1f2      	bne.n	801c08a <sbrk_aligned+0x22>
 801c0a4:	e7ef      	b.n	801c086 <sbrk_aligned+0x1e>
 801c0a6:	bf00      	nop
 801c0a8:	20011bec 	.word	0x20011bec

0801c0ac <_malloc_r>:
 801c0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0b0:	1ccd      	adds	r5, r1, #3
 801c0b2:	f025 0503 	bic.w	r5, r5, #3
 801c0b6:	3508      	adds	r5, #8
 801c0b8:	2d0c      	cmp	r5, #12
 801c0ba:	bf38      	it	cc
 801c0bc:	250c      	movcc	r5, #12
 801c0be:	2d00      	cmp	r5, #0
 801c0c0:	4606      	mov	r6, r0
 801c0c2:	db01      	blt.n	801c0c8 <_malloc_r+0x1c>
 801c0c4:	42a9      	cmp	r1, r5
 801c0c6:	d904      	bls.n	801c0d2 <_malloc_r+0x26>
 801c0c8:	230c      	movs	r3, #12
 801c0ca:	6033      	str	r3, [r6, #0]
 801c0cc:	2000      	movs	r0, #0
 801c0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c1a8 <_malloc_r+0xfc>
 801c0d6:	f000 f869 	bl	801c1ac <__malloc_lock>
 801c0da:	f8d8 3000 	ldr.w	r3, [r8]
 801c0de:	461c      	mov	r4, r3
 801c0e0:	bb44      	cbnz	r4, 801c134 <_malloc_r+0x88>
 801c0e2:	4629      	mov	r1, r5
 801c0e4:	4630      	mov	r0, r6
 801c0e6:	f7ff ffbf 	bl	801c068 <sbrk_aligned>
 801c0ea:	1c43      	adds	r3, r0, #1
 801c0ec:	4604      	mov	r4, r0
 801c0ee:	d158      	bne.n	801c1a2 <_malloc_r+0xf6>
 801c0f0:	f8d8 4000 	ldr.w	r4, [r8]
 801c0f4:	4627      	mov	r7, r4
 801c0f6:	2f00      	cmp	r7, #0
 801c0f8:	d143      	bne.n	801c182 <_malloc_r+0xd6>
 801c0fa:	2c00      	cmp	r4, #0
 801c0fc:	d04b      	beq.n	801c196 <_malloc_r+0xea>
 801c0fe:	6823      	ldr	r3, [r4, #0]
 801c100:	4639      	mov	r1, r7
 801c102:	4630      	mov	r0, r6
 801c104:	eb04 0903 	add.w	r9, r4, r3
 801c108:	f000 fc8a 	bl	801ca20 <_sbrk_r>
 801c10c:	4581      	cmp	r9, r0
 801c10e:	d142      	bne.n	801c196 <_malloc_r+0xea>
 801c110:	6821      	ldr	r1, [r4, #0]
 801c112:	1a6d      	subs	r5, r5, r1
 801c114:	4629      	mov	r1, r5
 801c116:	4630      	mov	r0, r6
 801c118:	f7ff ffa6 	bl	801c068 <sbrk_aligned>
 801c11c:	3001      	adds	r0, #1
 801c11e:	d03a      	beq.n	801c196 <_malloc_r+0xea>
 801c120:	6823      	ldr	r3, [r4, #0]
 801c122:	442b      	add	r3, r5
 801c124:	6023      	str	r3, [r4, #0]
 801c126:	f8d8 3000 	ldr.w	r3, [r8]
 801c12a:	685a      	ldr	r2, [r3, #4]
 801c12c:	bb62      	cbnz	r2, 801c188 <_malloc_r+0xdc>
 801c12e:	f8c8 7000 	str.w	r7, [r8]
 801c132:	e00f      	b.n	801c154 <_malloc_r+0xa8>
 801c134:	6822      	ldr	r2, [r4, #0]
 801c136:	1b52      	subs	r2, r2, r5
 801c138:	d420      	bmi.n	801c17c <_malloc_r+0xd0>
 801c13a:	2a0b      	cmp	r2, #11
 801c13c:	d917      	bls.n	801c16e <_malloc_r+0xc2>
 801c13e:	1961      	adds	r1, r4, r5
 801c140:	42a3      	cmp	r3, r4
 801c142:	6025      	str	r5, [r4, #0]
 801c144:	bf18      	it	ne
 801c146:	6059      	strne	r1, [r3, #4]
 801c148:	6863      	ldr	r3, [r4, #4]
 801c14a:	bf08      	it	eq
 801c14c:	f8c8 1000 	streq.w	r1, [r8]
 801c150:	5162      	str	r2, [r4, r5]
 801c152:	604b      	str	r3, [r1, #4]
 801c154:	4630      	mov	r0, r6
 801c156:	f000 f82f 	bl	801c1b8 <__malloc_unlock>
 801c15a:	f104 000b 	add.w	r0, r4, #11
 801c15e:	1d23      	adds	r3, r4, #4
 801c160:	f020 0007 	bic.w	r0, r0, #7
 801c164:	1ac2      	subs	r2, r0, r3
 801c166:	bf1c      	itt	ne
 801c168:	1a1b      	subne	r3, r3, r0
 801c16a:	50a3      	strne	r3, [r4, r2]
 801c16c:	e7af      	b.n	801c0ce <_malloc_r+0x22>
 801c16e:	6862      	ldr	r2, [r4, #4]
 801c170:	42a3      	cmp	r3, r4
 801c172:	bf0c      	ite	eq
 801c174:	f8c8 2000 	streq.w	r2, [r8]
 801c178:	605a      	strne	r2, [r3, #4]
 801c17a:	e7eb      	b.n	801c154 <_malloc_r+0xa8>
 801c17c:	4623      	mov	r3, r4
 801c17e:	6864      	ldr	r4, [r4, #4]
 801c180:	e7ae      	b.n	801c0e0 <_malloc_r+0x34>
 801c182:	463c      	mov	r4, r7
 801c184:	687f      	ldr	r7, [r7, #4]
 801c186:	e7b6      	b.n	801c0f6 <_malloc_r+0x4a>
 801c188:	461a      	mov	r2, r3
 801c18a:	685b      	ldr	r3, [r3, #4]
 801c18c:	42a3      	cmp	r3, r4
 801c18e:	d1fb      	bne.n	801c188 <_malloc_r+0xdc>
 801c190:	2300      	movs	r3, #0
 801c192:	6053      	str	r3, [r2, #4]
 801c194:	e7de      	b.n	801c154 <_malloc_r+0xa8>
 801c196:	230c      	movs	r3, #12
 801c198:	6033      	str	r3, [r6, #0]
 801c19a:	4630      	mov	r0, r6
 801c19c:	f000 f80c 	bl	801c1b8 <__malloc_unlock>
 801c1a0:	e794      	b.n	801c0cc <_malloc_r+0x20>
 801c1a2:	6005      	str	r5, [r0, #0]
 801c1a4:	e7d6      	b.n	801c154 <_malloc_r+0xa8>
 801c1a6:	bf00      	nop
 801c1a8:	20011bf0 	.word	0x20011bf0

0801c1ac <__malloc_lock>:
 801c1ac:	4801      	ldr	r0, [pc, #4]	@ (801c1b4 <__malloc_lock+0x8>)
 801c1ae:	f000 bc84 	b.w	801caba <__retarget_lock_acquire_recursive>
 801c1b2:	bf00      	nop
 801c1b4:	20011d35 	.word	0x20011d35

0801c1b8 <__malloc_unlock>:
 801c1b8:	4801      	ldr	r0, [pc, #4]	@ (801c1c0 <__malloc_unlock+0x8>)
 801c1ba:	f000 bc7f 	b.w	801cabc <__retarget_lock_release_recursive>
 801c1be:	bf00      	nop
 801c1c0:	20011d35 	.word	0x20011d35

0801c1c4 <srand>:
 801c1c4:	b538      	push	{r3, r4, r5, lr}
 801c1c6:	4b10      	ldr	r3, [pc, #64]	@ (801c208 <srand+0x44>)
 801c1c8:	681d      	ldr	r5, [r3, #0]
 801c1ca:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c1cc:	4604      	mov	r4, r0
 801c1ce:	b9b3      	cbnz	r3, 801c1fe <srand+0x3a>
 801c1d0:	2018      	movs	r0, #24
 801c1d2:	f7ff ff39 	bl	801c048 <malloc>
 801c1d6:	4602      	mov	r2, r0
 801c1d8:	6328      	str	r0, [r5, #48]	@ 0x30
 801c1da:	b920      	cbnz	r0, 801c1e6 <srand+0x22>
 801c1dc:	4b0b      	ldr	r3, [pc, #44]	@ (801c20c <srand+0x48>)
 801c1de:	480c      	ldr	r0, [pc, #48]	@ (801c210 <srand+0x4c>)
 801c1e0:	2146      	movs	r1, #70	@ 0x46
 801c1e2:	f000 fc83 	bl	801caec <__assert_func>
 801c1e6:	490b      	ldr	r1, [pc, #44]	@ (801c214 <srand+0x50>)
 801c1e8:	4b0b      	ldr	r3, [pc, #44]	@ (801c218 <srand+0x54>)
 801c1ea:	e9c0 1300 	strd	r1, r3, [r0]
 801c1ee:	4b0b      	ldr	r3, [pc, #44]	@ (801c21c <srand+0x58>)
 801c1f0:	6083      	str	r3, [r0, #8]
 801c1f2:	230b      	movs	r3, #11
 801c1f4:	8183      	strh	r3, [r0, #12]
 801c1f6:	2100      	movs	r1, #0
 801c1f8:	2001      	movs	r0, #1
 801c1fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c1fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801c200:	2200      	movs	r2, #0
 801c202:	611c      	str	r4, [r3, #16]
 801c204:	615a      	str	r2, [r3, #20]
 801c206:	bd38      	pop	{r3, r4, r5, pc}
 801c208:	2000090c 	.word	0x2000090c
 801c20c:	0801ebf0 	.word	0x0801ebf0
 801c210:	0801ec07 	.word	0x0801ec07
 801c214:	abcd330e 	.word	0xabcd330e
 801c218:	e66d1234 	.word	0xe66d1234
 801c21c:	0005deec 	.word	0x0005deec

0801c220 <rand>:
 801c220:	4b16      	ldr	r3, [pc, #88]	@ (801c27c <rand+0x5c>)
 801c222:	b510      	push	{r4, lr}
 801c224:	681c      	ldr	r4, [r3, #0]
 801c226:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801c228:	b9b3      	cbnz	r3, 801c258 <rand+0x38>
 801c22a:	2018      	movs	r0, #24
 801c22c:	f7ff ff0c 	bl	801c048 <malloc>
 801c230:	4602      	mov	r2, r0
 801c232:	6320      	str	r0, [r4, #48]	@ 0x30
 801c234:	b920      	cbnz	r0, 801c240 <rand+0x20>
 801c236:	4b12      	ldr	r3, [pc, #72]	@ (801c280 <rand+0x60>)
 801c238:	4812      	ldr	r0, [pc, #72]	@ (801c284 <rand+0x64>)
 801c23a:	2152      	movs	r1, #82	@ 0x52
 801c23c:	f000 fc56 	bl	801caec <__assert_func>
 801c240:	4911      	ldr	r1, [pc, #68]	@ (801c288 <rand+0x68>)
 801c242:	4b12      	ldr	r3, [pc, #72]	@ (801c28c <rand+0x6c>)
 801c244:	e9c0 1300 	strd	r1, r3, [r0]
 801c248:	4b11      	ldr	r3, [pc, #68]	@ (801c290 <rand+0x70>)
 801c24a:	6083      	str	r3, [r0, #8]
 801c24c:	230b      	movs	r3, #11
 801c24e:	8183      	strh	r3, [r0, #12]
 801c250:	2100      	movs	r1, #0
 801c252:	2001      	movs	r0, #1
 801c254:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c258:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801c25a:	480e      	ldr	r0, [pc, #56]	@ (801c294 <rand+0x74>)
 801c25c:	690b      	ldr	r3, [r1, #16]
 801c25e:	694c      	ldr	r4, [r1, #20]
 801c260:	4a0d      	ldr	r2, [pc, #52]	@ (801c298 <rand+0x78>)
 801c262:	4358      	muls	r0, r3
 801c264:	fb02 0004 	mla	r0, r2, r4, r0
 801c268:	fba3 3202 	umull	r3, r2, r3, r2
 801c26c:	3301      	adds	r3, #1
 801c26e:	eb40 0002 	adc.w	r0, r0, r2
 801c272:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c276:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801c27a:	bd10      	pop	{r4, pc}
 801c27c:	2000090c 	.word	0x2000090c
 801c280:	0801ebf0 	.word	0x0801ebf0
 801c284:	0801ec07 	.word	0x0801ec07
 801c288:	abcd330e 	.word	0xabcd330e
 801c28c:	e66d1234 	.word	0xe66d1234
 801c290:	0005deec 	.word	0x0005deec
 801c294:	5851f42d 	.word	0x5851f42d
 801c298:	4c957f2d 	.word	0x4c957f2d

0801c29c <realloc>:
 801c29c:	4b02      	ldr	r3, [pc, #8]	@ (801c2a8 <realloc+0xc>)
 801c29e:	460a      	mov	r2, r1
 801c2a0:	4601      	mov	r1, r0
 801c2a2:	6818      	ldr	r0, [r3, #0]
 801c2a4:	f000 b802 	b.w	801c2ac <_realloc_r>
 801c2a8:	2000090c 	.word	0x2000090c

0801c2ac <_realloc_r>:
 801c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b0:	4607      	mov	r7, r0
 801c2b2:	4614      	mov	r4, r2
 801c2b4:	460d      	mov	r5, r1
 801c2b6:	b921      	cbnz	r1, 801c2c2 <_realloc_r+0x16>
 801c2b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2bc:	4611      	mov	r1, r2
 801c2be:	f7ff bef5 	b.w	801c0ac <_malloc_r>
 801c2c2:	b92a      	cbnz	r2, 801c2d0 <_realloc_r+0x24>
 801c2c4:	f000 fc3c 	bl	801cb40 <_free_r>
 801c2c8:	4625      	mov	r5, r4
 801c2ca:	4628      	mov	r0, r5
 801c2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2d0:	f000 fc80 	bl	801cbd4 <_malloc_usable_size_r>
 801c2d4:	4284      	cmp	r4, r0
 801c2d6:	4606      	mov	r6, r0
 801c2d8:	d802      	bhi.n	801c2e0 <_realloc_r+0x34>
 801c2da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c2de:	d8f4      	bhi.n	801c2ca <_realloc_r+0x1e>
 801c2e0:	4621      	mov	r1, r4
 801c2e2:	4638      	mov	r0, r7
 801c2e4:	f7ff fee2 	bl	801c0ac <_malloc_r>
 801c2e8:	4680      	mov	r8, r0
 801c2ea:	b908      	cbnz	r0, 801c2f0 <_realloc_r+0x44>
 801c2ec:	4645      	mov	r5, r8
 801c2ee:	e7ec      	b.n	801c2ca <_realloc_r+0x1e>
 801c2f0:	42b4      	cmp	r4, r6
 801c2f2:	4622      	mov	r2, r4
 801c2f4:	4629      	mov	r1, r5
 801c2f6:	bf28      	it	cs
 801c2f8:	4632      	movcs	r2, r6
 801c2fa:	f000 fbe8 	bl	801cace <memcpy>
 801c2fe:	4629      	mov	r1, r5
 801c300:	4638      	mov	r0, r7
 801c302:	f000 fc1d 	bl	801cb40 <_free_r>
 801c306:	e7f1      	b.n	801c2ec <_realloc_r+0x40>

0801c308 <_strtoul_l.isra.0>:
 801c308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c30c:	4e34      	ldr	r6, [pc, #208]	@ (801c3e0 <_strtoul_l.isra.0+0xd8>)
 801c30e:	4686      	mov	lr, r0
 801c310:	460d      	mov	r5, r1
 801c312:	4628      	mov	r0, r5
 801c314:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c318:	5d37      	ldrb	r7, [r6, r4]
 801c31a:	f017 0708 	ands.w	r7, r7, #8
 801c31e:	d1f8      	bne.n	801c312 <_strtoul_l.isra.0+0xa>
 801c320:	2c2d      	cmp	r4, #45	@ 0x2d
 801c322:	d110      	bne.n	801c346 <_strtoul_l.isra.0+0x3e>
 801c324:	782c      	ldrb	r4, [r5, #0]
 801c326:	2701      	movs	r7, #1
 801c328:	1c85      	adds	r5, r0, #2
 801c32a:	f033 0010 	bics.w	r0, r3, #16
 801c32e:	d115      	bne.n	801c35c <_strtoul_l.isra.0+0x54>
 801c330:	2c30      	cmp	r4, #48	@ 0x30
 801c332:	d10d      	bne.n	801c350 <_strtoul_l.isra.0+0x48>
 801c334:	7828      	ldrb	r0, [r5, #0]
 801c336:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801c33a:	2858      	cmp	r0, #88	@ 0x58
 801c33c:	d108      	bne.n	801c350 <_strtoul_l.isra.0+0x48>
 801c33e:	786c      	ldrb	r4, [r5, #1]
 801c340:	3502      	adds	r5, #2
 801c342:	2310      	movs	r3, #16
 801c344:	e00a      	b.n	801c35c <_strtoul_l.isra.0+0x54>
 801c346:	2c2b      	cmp	r4, #43	@ 0x2b
 801c348:	bf04      	itt	eq
 801c34a:	782c      	ldrbeq	r4, [r5, #0]
 801c34c:	1c85      	addeq	r5, r0, #2
 801c34e:	e7ec      	b.n	801c32a <_strtoul_l.isra.0+0x22>
 801c350:	2b00      	cmp	r3, #0
 801c352:	d1f6      	bne.n	801c342 <_strtoul_l.isra.0+0x3a>
 801c354:	2c30      	cmp	r4, #48	@ 0x30
 801c356:	bf14      	ite	ne
 801c358:	230a      	movne	r3, #10
 801c35a:	2308      	moveq	r3, #8
 801c35c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801c360:	2600      	movs	r6, #0
 801c362:	fbb8 f8f3 	udiv	r8, r8, r3
 801c366:	fb03 f908 	mul.w	r9, r3, r8
 801c36a:	ea6f 0909 	mvn.w	r9, r9
 801c36e:	4630      	mov	r0, r6
 801c370:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801c374:	f1bc 0f09 	cmp.w	ip, #9
 801c378:	d810      	bhi.n	801c39c <_strtoul_l.isra.0+0x94>
 801c37a:	4664      	mov	r4, ip
 801c37c:	42a3      	cmp	r3, r4
 801c37e:	dd1e      	ble.n	801c3be <_strtoul_l.isra.0+0xb6>
 801c380:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801c384:	d007      	beq.n	801c396 <_strtoul_l.isra.0+0x8e>
 801c386:	4580      	cmp	r8, r0
 801c388:	d316      	bcc.n	801c3b8 <_strtoul_l.isra.0+0xb0>
 801c38a:	d101      	bne.n	801c390 <_strtoul_l.isra.0+0x88>
 801c38c:	45a1      	cmp	r9, r4
 801c38e:	db13      	blt.n	801c3b8 <_strtoul_l.isra.0+0xb0>
 801c390:	fb00 4003 	mla	r0, r0, r3, r4
 801c394:	2601      	movs	r6, #1
 801c396:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c39a:	e7e9      	b.n	801c370 <_strtoul_l.isra.0+0x68>
 801c39c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801c3a0:	f1bc 0f19 	cmp.w	ip, #25
 801c3a4:	d801      	bhi.n	801c3aa <_strtoul_l.isra.0+0xa2>
 801c3a6:	3c37      	subs	r4, #55	@ 0x37
 801c3a8:	e7e8      	b.n	801c37c <_strtoul_l.isra.0+0x74>
 801c3aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801c3ae:	f1bc 0f19 	cmp.w	ip, #25
 801c3b2:	d804      	bhi.n	801c3be <_strtoul_l.isra.0+0xb6>
 801c3b4:	3c57      	subs	r4, #87	@ 0x57
 801c3b6:	e7e1      	b.n	801c37c <_strtoul_l.isra.0+0x74>
 801c3b8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801c3bc:	e7eb      	b.n	801c396 <_strtoul_l.isra.0+0x8e>
 801c3be:	1c73      	adds	r3, r6, #1
 801c3c0:	d106      	bne.n	801c3d0 <_strtoul_l.isra.0+0xc8>
 801c3c2:	2322      	movs	r3, #34	@ 0x22
 801c3c4:	f8ce 3000 	str.w	r3, [lr]
 801c3c8:	4630      	mov	r0, r6
 801c3ca:	b932      	cbnz	r2, 801c3da <_strtoul_l.isra.0+0xd2>
 801c3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3d0:	b107      	cbz	r7, 801c3d4 <_strtoul_l.isra.0+0xcc>
 801c3d2:	4240      	negs	r0, r0
 801c3d4:	2a00      	cmp	r2, #0
 801c3d6:	d0f9      	beq.n	801c3cc <_strtoul_l.isra.0+0xc4>
 801c3d8:	b106      	cbz	r6, 801c3dc <_strtoul_l.isra.0+0xd4>
 801c3da:	1e69      	subs	r1, r5, #1
 801c3dc:	6011      	str	r1, [r2, #0]
 801c3de:	e7f5      	b.n	801c3cc <_strtoul_l.isra.0+0xc4>
 801c3e0:	0801eccf 	.word	0x0801eccf

0801c3e4 <strtoul>:
 801c3e4:	4613      	mov	r3, r2
 801c3e6:	460a      	mov	r2, r1
 801c3e8:	4601      	mov	r1, r0
 801c3ea:	4802      	ldr	r0, [pc, #8]	@ (801c3f4 <strtoul+0x10>)
 801c3ec:	6800      	ldr	r0, [r0, #0]
 801c3ee:	f7ff bf8b 	b.w	801c308 <_strtoul_l.isra.0>
 801c3f2:	bf00      	nop
 801c3f4:	2000090c 	.word	0x2000090c

0801c3f8 <std>:
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	b510      	push	{r4, lr}
 801c3fc:	4604      	mov	r4, r0
 801c3fe:	e9c0 3300 	strd	r3, r3, [r0]
 801c402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c406:	6083      	str	r3, [r0, #8]
 801c408:	8181      	strh	r1, [r0, #12]
 801c40a:	6643      	str	r3, [r0, #100]	@ 0x64
 801c40c:	81c2      	strh	r2, [r0, #14]
 801c40e:	6183      	str	r3, [r0, #24]
 801c410:	4619      	mov	r1, r3
 801c412:	2208      	movs	r2, #8
 801c414:	305c      	adds	r0, #92	@ 0x5c
 801c416:	f000 fa91 	bl	801c93c <memset>
 801c41a:	4b0d      	ldr	r3, [pc, #52]	@ (801c450 <std+0x58>)
 801c41c:	6263      	str	r3, [r4, #36]	@ 0x24
 801c41e:	4b0d      	ldr	r3, [pc, #52]	@ (801c454 <std+0x5c>)
 801c420:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c422:	4b0d      	ldr	r3, [pc, #52]	@ (801c458 <std+0x60>)
 801c424:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c426:	4b0d      	ldr	r3, [pc, #52]	@ (801c45c <std+0x64>)
 801c428:	6323      	str	r3, [r4, #48]	@ 0x30
 801c42a:	4b0d      	ldr	r3, [pc, #52]	@ (801c460 <std+0x68>)
 801c42c:	6224      	str	r4, [r4, #32]
 801c42e:	429c      	cmp	r4, r3
 801c430:	d006      	beq.n	801c440 <std+0x48>
 801c432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c436:	4294      	cmp	r4, r2
 801c438:	d002      	beq.n	801c440 <std+0x48>
 801c43a:	33d0      	adds	r3, #208	@ 0xd0
 801c43c:	429c      	cmp	r4, r3
 801c43e:	d105      	bne.n	801c44c <std+0x54>
 801c440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c448:	f000 bb36 	b.w	801cab8 <__retarget_lock_init_recursive>
 801c44c:	bd10      	pop	{r4, pc}
 801c44e:	bf00      	nop
 801c450:	0801c6c1 	.word	0x0801c6c1
 801c454:	0801c6e3 	.word	0x0801c6e3
 801c458:	0801c71b 	.word	0x0801c71b
 801c45c:	0801c73f 	.word	0x0801c73f
 801c460:	20011bf4 	.word	0x20011bf4

0801c464 <stdio_exit_handler>:
 801c464:	4a02      	ldr	r2, [pc, #8]	@ (801c470 <stdio_exit_handler+0xc>)
 801c466:	4903      	ldr	r1, [pc, #12]	@ (801c474 <stdio_exit_handler+0x10>)
 801c468:	4803      	ldr	r0, [pc, #12]	@ (801c478 <stdio_exit_handler+0x14>)
 801c46a:	f000 b869 	b.w	801c540 <_fwalk_sglue>
 801c46e:	bf00      	nop
 801c470:	20000900 	.word	0x20000900
 801c474:	0801d539 	.word	0x0801d539
 801c478:	20000910 	.word	0x20000910

0801c47c <cleanup_stdio>:
 801c47c:	6841      	ldr	r1, [r0, #4]
 801c47e:	4b0c      	ldr	r3, [pc, #48]	@ (801c4b0 <cleanup_stdio+0x34>)
 801c480:	4299      	cmp	r1, r3
 801c482:	b510      	push	{r4, lr}
 801c484:	4604      	mov	r4, r0
 801c486:	d001      	beq.n	801c48c <cleanup_stdio+0x10>
 801c488:	f001 f856 	bl	801d538 <_fflush_r>
 801c48c:	68a1      	ldr	r1, [r4, #8]
 801c48e:	4b09      	ldr	r3, [pc, #36]	@ (801c4b4 <cleanup_stdio+0x38>)
 801c490:	4299      	cmp	r1, r3
 801c492:	d002      	beq.n	801c49a <cleanup_stdio+0x1e>
 801c494:	4620      	mov	r0, r4
 801c496:	f001 f84f 	bl	801d538 <_fflush_r>
 801c49a:	68e1      	ldr	r1, [r4, #12]
 801c49c:	4b06      	ldr	r3, [pc, #24]	@ (801c4b8 <cleanup_stdio+0x3c>)
 801c49e:	4299      	cmp	r1, r3
 801c4a0:	d004      	beq.n	801c4ac <cleanup_stdio+0x30>
 801c4a2:	4620      	mov	r0, r4
 801c4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4a8:	f001 b846 	b.w	801d538 <_fflush_r>
 801c4ac:	bd10      	pop	{r4, pc}
 801c4ae:	bf00      	nop
 801c4b0:	20011bf4 	.word	0x20011bf4
 801c4b4:	20011c5c 	.word	0x20011c5c
 801c4b8:	20011cc4 	.word	0x20011cc4

0801c4bc <global_stdio_init.part.0>:
 801c4bc:	b510      	push	{r4, lr}
 801c4be:	4b0b      	ldr	r3, [pc, #44]	@ (801c4ec <global_stdio_init.part.0+0x30>)
 801c4c0:	4c0b      	ldr	r4, [pc, #44]	@ (801c4f0 <global_stdio_init.part.0+0x34>)
 801c4c2:	4a0c      	ldr	r2, [pc, #48]	@ (801c4f4 <global_stdio_init.part.0+0x38>)
 801c4c4:	601a      	str	r2, [r3, #0]
 801c4c6:	4620      	mov	r0, r4
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	2104      	movs	r1, #4
 801c4cc:	f7ff ff94 	bl	801c3f8 <std>
 801c4d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c4d4:	2201      	movs	r2, #1
 801c4d6:	2109      	movs	r1, #9
 801c4d8:	f7ff ff8e 	bl	801c3f8 <std>
 801c4dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c4e0:	2202      	movs	r2, #2
 801c4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4e6:	2112      	movs	r1, #18
 801c4e8:	f7ff bf86 	b.w	801c3f8 <std>
 801c4ec:	20011d2c 	.word	0x20011d2c
 801c4f0:	20011bf4 	.word	0x20011bf4
 801c4f4:	0801c465 	.word	0x0801c465

0801c4f8 <__sfp_lock_acquire>:
 801c4f8:	4801      	ldr	r0, [pc, #4]	@ (801c500 <__sfp_lock_acquire+0x8>)
 801c4fa:	f000 bade 	b.w	801caba <__retarget_lock_acquire_recursive>
 801c4fe:	bf00      	nop
 801c500:	20011d36 	.word	0x20011d36

0801c504 <__sfp_lock_release>:
 801c504:	4801      	ldr	r0, [pc, #4]	@ (801c50c <__sfp_lock_release+0x8>)
 801c506:	f000 bad9 	b.w	801cabc <__retarget_lock_release_recursive>
 801c50a:	bf00      	nop
 801c50c:	20011d36 	.word	0x20011d36

0801c510 <__sinit>:
 801c510:	b510      	push	{r4, lr}
 801c512:	4604      	mov	r4, r0
 801c514:	f7ff fff0 	bl	801c4f8 <__sfp_lock_acquire>
 801c518:	6a23      	ldr	r3, [r4, #32]
 801c51a:	b11b      	cbz	r3, 801c524 <__sinit+0x14>
 801c51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c520:	f7ff bff0 	b.w	801c504 <__sfp_lock_release>
 801c524:	4b04      	ldr	r3, [pc, #16]	@ (801c538 <__sinit+0x28>)
 801c526:	6223      	str	r3, [r4, #32]
 801c528:	4b04      	ldr	r3, [pc, #16]	@ (801c53c <__sinit+0x2c>)
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d1f5      	bne.n	801c51c <__sinit+0xc>
 801c530:	f7ff ffc4 	bl	801c4bc <global_stdio_init.part.0>
 801c534:	e7f2      	b.n	801c51c <__sinit+0xc>
 801c536:	bf00      	nop
 801c538:	0801c47d 	.word	0x0801c47d
 801c53c:	20011d2c 	.word	0x20011d2c

0801c540 <_fwalk_sglue>:
 801c540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c544:	4607      	mov	r7, r0
 801c546:	4688      	mov	r8, r1
 801c548:	4614      	mov	r4, r2
 801c54a:	2600      	movs	r6, #0
 801c54c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c550:	f1b9 0901 	subs.w	r9, r9, #1
 801c554:	d505      	bpl.n	801c562 <_fwalk_sglue+0x22>
 801c556:	6824      	ldr	r4, [r4, #0]
 801c558:	2c00      	cmp	r4, #0
 801c55a:	d1f7      	bne.n	801c54c <_fwalk_sglue+0xc>
 801c55c:	4630      	mov	r0, r6
 801c55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c562:	89ab      	ldrh	r3, [r5, #12]
 801c564:	2b01      	cmp	r3, #1
 801c566:	d907      	bls.n	801c578 <_fwalk_sglue+0x38>
 801c568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c56c:	3301      	adds	r3, #1
 801c56e:	d003      	beq.n	801c578 <_fwalk_sglue+0x38>
 801c570:	4629      	mov	r1, r5
 801c572:	4638      	mov	r0, r7
 801c574:	47c0      	blx	r8
 801c576:	4306      	orrs	r6, r0
 801c578:	3568      	adds	r5, #104	@ 0x68
 801c57a:	e7e9      	b.n	801c550 <_fwalk_sglue+0x10>

0801c57c <_fwrite_r>:
 801c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c580:	9c08      	ldr	r4, [sp, #32]
 801c582:	468a      	mov	sl, r1
 801c584:	4690      	mov	r8, r2
 801c586:	fb02 f903 	mul.w	r9, r2, r3
 801c58a:	4606      	mov	r6, r0
 801c58c:	b118      	cbz	r0, 801c596 <_fwrite_r+0x1a>
 801c58e:	6a03      	ldr	r3, [r0, #32]
 801c590:	b90b      	cbnz	r3, 801c596 <_fwrite_r+0x1a>
 801c592:	f7ff ffbd 	bl	801c510 <__sinit>
 801c596:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c598:	07dd      	lsls	r5, r3, #31
 801c59a:	d405      	bmi.n	801c5a8 <_fwrite_r+0x2c>
 801c59c:	89a3      	ldrh	r3, [r4, #12]
 801c59e:	0598      	lsls	r0, r3, #22
 801c5a0:	d402      	bmi.n	801c5a8 <_fwrite_r+0x2c>
 801c5a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c5a4:	f000 fa89 	bl	801caba <__retarget_lock_acquire_recursive>
 801c5a8:	89a3      	ldrh	r3, [r4, #12]
 801c5aa:	0719      	lsls	r1, r3, #28
 801c5ac:	d516      	bpl.n	801c5dc <_fwrite_r+0x60>
 801c5ae:	6923      	ldr	r3, [r4, #16]
 801c5b0:	b1a3      	cbz	r3, 801c5dc <_fwrite_r+0x60>
 801c5b2:	2500      	movs	r5, #0
 801c5b4:	454d      	cmp	r5, r9
 801c5b6:	d01f      	beq.n	801c5f8 <_fwrite_r+0x7c>
 801c5b8:	68a7      	ldr	r7, [r4, #8]
 801c5ba:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801c5be:	3f01      	subs	r7, #1
 801c5c0:	2f00      	cmp	r7, #0
 801c5c2:	60a7      	str	r7, [r4, #8]
 801c5c4:	da04      	bge.n	801c5d0 <_fwrite_r+0x54>
 801c5c6:	69a3      	ldr	r3, [r4, #24]
 801c5c8:	429f      	cmp	r7, r3
 801c5ca:	db0f      	blt.n	801c5ec <_fwrite_r+0x70>
 801c5cc:	290a      	cmp	r1, #10
 801c5ce:	d00d      	beq.n	801c5ec <_fwrite_r+0x70>
 801c5d0:	6823      	ldr	r3, [r4, #0]
 801c5d2:	1c5a      	adds	r2, r3, #1
 801c5d4:	6022      	str	r2, [r4, #0]
 801c5d6:	7019      	strb	r1, [r3, #0]
 801c5d8:	3501      	adds	r5, #1
 801c5da:	e7eb      	b.n	801c5b4 <_fwrite_r+0x38>
 801c5dc:	4621      	mov	r1, r4
 801c5de:	4630      	mov	r0, r6
 801c5e0:	f000 f92c 	bl	801c83c <__swsetup_r>
 801c5e4:	2800      	cmp	r0, #0
 801c5e6:	d0e4      	beq.n	801c5b2 <_fwrite_r+0x36>
 801c5e8:	2500      	movs	r5, #0
 801c5ea:	e005      	b.n	801c5f8 <_fwrite_r+0x7c>
 801c5ec:	4622      	mov	r2, r4
 801c5ee:	4630      	mov	r0, r6
 801c5f0:	f000 f8e6 	bl	801c7c0 <__swbuf_r>
 801c5f4:	3001      	adds	r0, #1
 801c5f6:	d1ef      	bne.n	801c5d8 <_fwrite_r+0x5c>
 801c5f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c5fa:	07da      	lsls	r2, r3, #31
 801c5fc:	d405      	bmi.n	801c60a <_fwrite_r+0x8e>
 801c5fe:	89a3      	ldrh	r3, [r4, #12]
 801c600:	059b      	lsls	r3, r3, #22
 801c602:	d402      	bmi.n	801c60a <_fwrite_r+0x8e>
 801c604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c606:	f000 fa59 	bl	801cabc <__retarget_lock_release_recursive>
 801c60a:	fbb5 f0f8 	udiv	r0, r5, r8
 801c60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c614 <fwrite>:
 801c614:	b507      	push	{r0, r1, r2, lr}
 801c616:	9300      	str	r3, [sp, #0]
 801c618:	4613      	mov	r3, r2
 801c61a:	460a      	mov	r2, r1
 801c61c:	4601      	mov	r1, r0
 801c61e:	4803      	ldr	r0, [pc, #12]	@ (801c62c <fwrite+0x18>)
 801c620:	6800      	ldr	r0, [r0, #0]
 801c622:	f7ff ffab 	bl	801c57c <_fwrite_r>
 801c626:	b003      	add	sp, #12
 801c628:	f85d fb04 	ldr.w	pc, [sp], #4
 801c62c:	2000090c 	.word	0x2000090c

0801c630 <iprintf>:
 801c630:	b40f      	push	{r0, r1, r2, r3}
 801c632:	b507      	push	{r0, r1, r2, lr}
 801c634:	4906      	ldr	r1, [pc, #24]	@ (801c650 <iprintf+0x20>)
 801c636:	ab04      	add	r3, sp, #16
 801c638:	6808      	ldr	r0, [r1, #0]
 801c63a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c63e:	6881      	ldr	r1, [r0, #8]
 801c640:	9301      	str	r3, [sp, #4]
 801c642:	f000 fc51 	bl	801cee8 <_vfiprintf_r>
 801c646:	b003      	add	sp, #12
 801c648:	f85d eb04 	ldr.w	lr, [sp], #4
 801c64c:	b004      	add	sp, #16
 801c64e:	4770      	bx	lr
 801c650:	2000090c 	.word	0x2000090c

0801c654 <sniprintf>:
 801c654:	b40c      	push	{r2, r3}
 801c656:	b530      	push	{r4, r5, lr}
 801c658:	4b18      	ldr	r3, [pc, #96]	@ (801c6bc <sniprintf+0x68>)
 801c65a:	1e0c      	subs	r4, r1, #0
 801c65c:	681d      	ldr	r5, [r3, #0]
 801c65e:	b09d      	sub	sp, #116	@ 0x74
 801c660:	da08      	bge.n	801c674 <sniprintf+0x20>
 801c662:	238b      	movs	r3, #139	@ 0x8b
 801c664:	602b      	str	r3, [r5, #0]
 801c666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c66a:	b01d      	add	sp, #116	@ 0x74
 801c66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c670:	b002      	add	sp, #8
 801c672:	4770      	bx	lr
 801c674:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c678:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c67c:	f04f 0300 	mov.w	r3, #0
 801c680:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c682:	bf14      	ite	ne
 801c684:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c688:	4623      	moveq	r3, r4
 801c68a:	9304      	str	r3, [sp, #16]
 801c68c:	9307      	str	r3, [sp, #28]
 801c68e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c692:	9002      	str	r0, [sp, #8]
 801c694:	9006      	str	r0, [sp, #24]
 801c696:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c69a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c69c:	ab21      	add	r3, sp, #132	@ 0x84
 801c69e:	a902      	add	r1, sp, #8
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	9301      	str	r3, [sp, #4]
 801c6a4:	f000 fafa 	bl	801cc9c <_svfiprintf_r>
 801c6a8:	1c43      	adds	r3, r0, #1
 801c6aa:	bfbc      	itt	lt
 801c6ac:	238b      	movlt	r3, #139	@ 0x8b
 801c6ae:	602b      	strlt	r3, [r5, #0]
 801c6b0:	2c00      	cmp	r4, #0
 801c6b2:	d0da      	beq.n	801c66a <sniprintf+0x16>
 801c6b4:	9b02      	ldr	r3, [sp, #8]
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	701a      	strb	r2, [r3, #0]
 801c6ba:	e7d6      	b.n	801c66a <sniprintf+0x16>
 801c6bc:	2000090c 	.word	0x2000090c

0801c6c0 <__sread>:
 801c6c0:	b510      	push	{r4, lr}
 801c6c2:	460c      	mov	r4, r1
 801c6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6c8:	f000 f998 	bl	801c9fc <_read_r>
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	bfab      	itete	ge
 801c6d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c6d2:	89a3      	ldrhlt	r3, [r4, #12]
 801c6d4:	181b      	addge	r3, r3, r0
 801c6d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c6da:	bfac      	ite	ge
 801c6dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c6de:	81a3      	strhlt	r3, [r4, #12]
 801c6e0:	bd10      	pop	{r4, pc}

0801c6e2 <__swrite>:
 801c6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6e6:	461f      	mov	r7, r3
 801c6e8:	898b      	ldrh	r3, [r1, #12]
 801c6ea:	05db      	lsls	r3, r3, #23
 801c6ec:	4605      	mov	r5, r0
 801c6ee:	460c      	mov	r4, r1
 801c6f0:	4616      	mov	r6, r2
 801c6f2:	d505      	bpl.n	801c700 <__swrite+0x1e>
 801c6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6f8:	2302      	movs	r3, #2
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	f000 f96c 	bl	801c9d8 <_lseek_r>
 801c700:	89a3      	ldrh	r3, [r4, #12]
 801c702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c70a:	81a3      	strh	r3, [r4, #12]
 801c70c:	4632      	mov	r2, r6
 801c70e:	463b      	mov	r3, r7
 801c710:	4628      	mov	r0, r5
 801c712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c716:	f000 b993 	b.w	801ca40 <_write_r>

0801c71a <__sseek>:
 801c71a:	b510      	push	{r4, lr}
 801c71c:	460c      	mov	r4, r1
 801c71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c722:	f000 f959 	bl	801c9d8 <_lseek_r>
 801c726:	1c43      	adds	r3, r0, #1
 801c728:	89a3      	ldrh	r3, [r4, #12]
 801c72a:	bf15      	itete	ne
 801c72c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c72e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c732:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c736:	81a3      	strheq	r3, [r4, #12]
 801c738:	bf18      	it	ne
 801c73a:	81a3      	strhne	r3, [r4, #12]
 801c73c:	bd10      	pop	{r4, pc}

0801c73e <__sclose>:
 801c73e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c742:	f000 b939 	b.w	801c9b8 <_close_r>

0801c746 <_vsniprintf_r>:
 801c746:	b530      	push	{r4, r5, lr}
 801c748:	4614      	mov	r4, r2
 801c74a:	2c00      	cmp	r4, #0
 801c74c:	b09b      	sub	sp, #108	@ 0x6c
 801c74e:	4605      	mov	r5, r0
 801c750:	461a      	mov	r2, r3
 801c752:	da05      	bge.n	801c760 <_vsniprintf_r+0x1a>
 801c754:	238b      	movs	r3, #139	@ 0x8b
 801c756:	6003      	str	r3, [r0, #0]
 801c758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c75c:	b01b      	add	sp, #108	@ 0x6c
 801c75e:	bd30      	pop	{r4, r5, pc}
 801c760:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c764:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c768:	f04f 0300 	mov.w	r3, #0
 801c76c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c76e:	bf14      	ite	ne
 801c770:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c774:	4623      	moveq	r3, r4
 801c776:	9302      	str	r3, [sp, #8]
 801c778:	9305      	str	r3, [sp, #20]
 801c77a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c77e:	9100      	str	r1, [sp, #0]
 801c780:	9104      	str	r1, [sp, #16]
 801c782:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c786:	4669      	mov	r1, sp
 801c788:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c78a:	f000 fa87 	bl	801cc9c <_svfiprintf_r>
 801c78e:	1c43      	adds	r3, r0, #1
 801c790:	bfbc      	itt	lt
 801c792:	238b      	movlt	r3, #139	@ 0x8b
 801c794:	602b      	strlt	r3, [r5, #0]
 801c796:	2c00      	cmp	r4, #0
 801c798:	d0e0      	beq.n	801c75c <_vsniprintf_r+0x16>
 801c79a:	9b00      	ldr	r3, [sp, #0]
 801c79c:	2200      	movs	r2, #0
 801c79e:	701a      	strb	r2, [r3, #0]
 801c7a0:	e7dc      	b.n	801c75c <_vsniprintf_r+0x16>
	...

0801c7a4 <vsniprintf>:
 801c7a4:	b507      	push	{r0, r1, r2, lr}
 801c7a6:	9300      	str	r3, [sp, #0]
 801c7a8:	4613      	mov	r3, r2
 801c7aa:	460a      	mov	r2, r1
 801c7ac:	4601      	mov	r1, r0
 801c7ae:	4803      	ldr	r0, [pc, #12]	@ (801c7bc <vsniprintf+0x18>)
 801c7b0:	6800      	ldr	r0, [r0, #0]
 801c7b2:	f7ff ffc8 	bl	801c746 <_vsniprintf_r>
 801c7b6:	b003      	add	sp, #12
 801c7b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c7bc:	2000090c 	.word	0x2000090c

0801c7c0 <__swbuf_r>:
 801c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7c2:	460e      	mov	r6, r1
 801c7c4:	4614      	mov	r4, r2
 801c7c6:	4605      	mov	r5, r0
 801c7c8:	b118      	cbz	r0, 801c7d2 <__swbuf_r+0x12>
 801c7ca:	6a03      	ldr	r3, [r0, #32]
 801c7cc:	b90b      	cbnz	r3, 801c7d2 <__swbuf_r+0x12>
 801c7ce:	f7ff fe9f 	bl	801c510 <__sinit>
 801c7d2:	69a3      	ldr	r3, [r4, #24]
 801c7d4:	60a3      	str	r3, [r4, #8]
 801c7d6:	89a3      	ldrh	r3, [r4, #12]
 801c7d8:	071a      	lsls	r2, r3, #28
 801c7da:	d501      	bpl.n	801c7e0 <__swbuf_r+0x20>
 801c7dc:	6923      	ldr	r3, [r4, #16]
 801c7de:	b943      	cbnz	r3, 801c7f2 <__swbuf_r+0x32>
 801c7e0:	4621      	mov	r1, r4
 801c7e2:	4628      	mov	r0, r5
 801c7e4:	f000 f82a 	bl	801c83c <__swsetup_r>
 801c7e8:	b118      	cbz	r0, 801c7f2 <__swbuf_r+0x32>
 801c7ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c7ee:	4638      	mov	r0, r7
 801c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7f2:	6823      	ldr	r3, [r4, #0]
 801c7f4:	6922      	ldr	r2, [r4, #16]
 801c7f6:	1a98      	subs	r0, r3, r2
 801c7f8:	6963      	ldr	r3, [r4, #20]
 801c7fa:	b2f6      	uxtb	r6, r6
 801c7fc:	4283      	cmp	r3, r0
 801c7fe:	4637      	mov	r7, r6
 801c800:	dc05      	bgt.n	801c80e <__swbuf_r+0x4e>
 801c802:	4621      	mov	r1, r4
 801c804:	4628      	mov	r0, r5
 801c806:	f000 fe97 	bl	801d538 <_fflush_r>
 801c80a:	2800      	cmp	r0, #0
 801c80c:	d1ed      	bne.n	801c7ea <__swbuf_r+0x2a>
 801c80e:	68a3      	ldr	r3, [r4, #8]
 801c810:	3b01      	subs	r3, #1
 801c812:	60a3      	str	r3, [r4, #8]
 801c814:	6823      	ldr	r3, [r4, #0]
 801c816:	1c5a      	adds	r2, r3, #1
 801c818:	6022      	str	r2, [r4, #0]
 801c81a:	701e      	strb	r6, [r3, #0]
 801c81c:	6962      	ldr	r2, [r4, #20]
 801c81e:	1c43      	adds	r3, r0, #1
 801c820:	429a      	cmp	r2, r3
 801c822:	d004      	beq.n	801c82e <__swbuf_r+0x6e>
 801c824:	89a3      	ldrh	r3, [r4, #12]
 801c826:	07db      	lsls	r3, r3, #31
 801c828:	d5e1      	bpl.n	801c7ee <__swbuf_r+0x2e>
 801c82a:	2e0a      	cmp	r6, #10
 801c82c:	d1df      	bne.n	801c7ee <__swbuf_r+0x2e>
 801c82e:	4621      	mov	r1, r4
 801c830:	4628      	mov	r0, r5
 801c832:	f000 fe81 	bl	801d538 <_fflush_r>
 801c836:	2800      	cmp	r0, #0
 801c838:	d0d9      	beq.n	801c7ee <__swbuf_r+0x2e>
 801c83a:	e7d6      	b.n	801c7ea <__swbuf_r+0x2a>

0801c83c <__swsetup_r>:
 801c83c:	b538      	push	{r3, r4, r5, lr}
 801c83e:	4b29      	ldr	r3, [pc, #164]	@ (801c8e4 <__swsetup_r+0xa8>)
 801c840:	4605      	mov	r5, r0
 801c842:	6818      	ldr	r0, [r3, #0]
 801c844:	460c      	mov	r4, r1
 801c846:	b118      	cbz	r0, 801c850 <__swsetup_r+0x14>
 801c848:	6a03      	ldr	r3, [r0, #32]
 801c84a:	b90b      	cbnz	r3, 801c850 <__swsetup_r+0x14>
 801c84c:	f7ff fe60 	bl	801c510 <__sinit>
 801c850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c854:	0719      	lsls	r1, r3, #28
 801c856:	d422      	bmi.n	801c89e <__swsetup_r+0x62>
 801c858:	06da      	lsls	r2, r3, #27
 801c85a:	d407      	bmi.n	801c86c <__swsetup_r+0x30>
 801c85c:	2209      	movs	r2, #9
 801c85e:	602a      	str	r2, [r5, #0]
 801c860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c864:	81a3      	strh	r3, [r4, #12]
 801c866:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c86a:	e033      	b.n	801c8d4 <__swsetup_r+0x98>
 801c86c:	0758      	lsls	r0, r3, #29
 801c86e:	d512      	bpl.n	801c896 <__swsetup_r+0x5a>
 801c870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c872:	b141      	cbz	r1, 801c886 <__swsetup_r+0x4a>
 801c874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c878:	4299      	cmp	r1, r3
 801c87a:	d002      	beq.n	801c882 <__swsetup_r+0x46>
 801c87c:	4628      	mov	r0, r5
 801c87e:	f000 f95f 	bl	801cb40 <_free_r>
 801c882:	2300      	movs	r3, #0
 801c884:	6363      	str	r3, [r4, #52]	@ 0x34
 801c886:	89a3      	ldrh	r3, [r4, #12]
 801c888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c88c:	81a3      	strh	r3, [r4, #12]
 801c88e:	2300      	movs	r3, #0
 801c890:	6063      	str	r3, [r4, #4]
 801c892:	6923      	ldr	r3, [r4, #16]
 801c894:	6023      	str	r3, [r4, #0]
 801c896:	89a3      	ldrh	r3, [r4, #12]
 801c898:	f043 0308 	orr.w	r3, r3, #8
 801c89c:	81a3      	strh	r3, [r4, #12]
 801c89e:	6923      	ldr	r3, [r4, #16]
 801c8a0:	b94b      	cbnz	r3, 801c8b6 <__swsetup_r+0x7a>
 801c8a2:	89a3      	ldrh	r3, [r4, #12]
 801c8a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c8ac:	d003      	beq.n	801c8b6 <__swsetup_r+0x7a>
 801c8ae:	4621      	mov	r1, r4
 801c8b0:	4628      	mov	r0, r5
 801c8b2:	f000 fea1 	bl	801d5f8 <__smakebuf_r>
 801c8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c8ba:	f013 0201 	ands.w	r2, r3, #1
 801c8be:	d00a      	beq.n	801c8d6 <__swsetup_r+0x9a>
 801c8c0:	2200      	movs	r2, #0
 801c8c2:	60a2      	str	r2, [r4, #8]
 801c8c4:	6962      	ldr	r2, [r4, #20]
 801c8c6:	4252      	negs	r2, r2
 801c8c8:	61a2      	str	r2, [r4, #24]
 801c8ca:	6922      	ldr	r2, [r4, #16]
 801c8cc:	b942      	cbnz	r2, 801c8e0 <__swsetup_r+0xa4>
 801c8ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c8d2:	d1c5      	bne.n	801c860 <__swsetup_r+0x24>
 801c8d4:	bd38      	pop	{r3, r4, r5, pc}
 801c8d6:	0799      	lsls	r1, r3, #30
 801c8d8:	bf58      	it	pl
 801c8da:	6962      	ldrpl	r2, [r4, #20]
 801c8dc:	60a2      	str	r2, [r4, #8]
 801c8de:	e7f4      	b.n	801c8ca <__swsetup_r+0x8e>
 801c8e0:	2000      	movs	r0, #0
 801c8e2:	e7f7      	b.n	801c8d4 <__swsetup_r+0x98>
 801c8e4:	2000090c 	.word	0x2000090c

0801c8e8 <memcmp>:
 801c8e8:	b510      	push	{r4, lr}
 801c8ea:	3901      	subs	r1, #1
 801c8ec:	4402      	add	r2, r0
 801c8ee:	4290      	cmp	r0, r2
 801c8f0:	d101      	bne.n	801c8f6 <memcmp+0xe>
 801c8f2:	2000      	movs	r0, #0
 801c8f4:	e005      	b.n	801c902 <memcmp+0x1a>
 801c8f6:	7803      	ldrb	r3, [r0, #0]
 801c8f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c8fc:	42a3      	cmp	r3, r4
 801c8fe:	d001      	beq.n	801c904 <memcmp+0x1c>
 801c900:	1b18      	subs	r0, r3, r4
 801c902:	bd10      	pop	{r4, pc}
 801c904:	3001      	adds	r0, #1
 801c906:	e7f2      	b.n	801c8ee <memcmp+0x6>

0801c908 <memmove>:
 801c908:	4288      	cmp	r0, r1
 801c90a:	b510      	push	{r4, lr}
 801c90c:	eb01 0402 	add.w	r4, r1, r2
 801c910:	d902      	bls.n	801c918 <memmove+0x10>
 801c912:	4284      	cmp	r4, r0
 801c914:	4623      	mov	r3, r4
 801c916:	d807      	bhi.n	801c928 <memmove+0x20>
 801c918:	1e43      	subs	r3, r0, #1
 801c91a:	42a1      	cmp	r1, r4
 801c91c:	d008      	beq.n	801c930 <memmove+0x28>
 801c91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c922:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c926:	e7f8      	b.n	801c91a <memmove+0x12>
 801c928:	4402      	add	r2, r0
 801c92a:	4601      	mov	r1, r0
 801c92c:	428a      	cmp	r2, r1
 801c92e:	d100      	bne.n	801c932 <memmove+0x2a>
 801c930:	bd10      	pop	{r4, pc}
 801c932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c93a:	e7f7      	b.n	801c92c <memmove+0x24>

0801c93c <memset>:
 801c93c:	4402      	add	r2, r0
 801c93e:	4603      	mov	r3, r0
 801c940:	4293      	cmp	r3, r2
 801c942:	d100      	bne.n	801c946 <memset+0xa>
 801c944:	4770      	bx	lr
 801c946:	f803 1b01 	strb.w	r1, [r3], #1
 801c94a:	e7f9      	b.n	801c940 <memset+0x4>

0801c94c <strchr>:
 801c94c:	b2c9      	uxtb	r1, r1
 801c94e:	4603      	mov	r3, r0
 801c950:	4618      	mov	r0, r3
 801c952:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c956:	b112      	cbz	r2, 801c95e <strchr+0x12>
 801c958:	428a      	cmp	r2, r1
 801c95a:	d1f9      	bne.n	801c950 <strchr+0x4>
 801c95c:	4770      	bx	lr
 801c95e:	2900      	cmp	r1, #0
 801c960:	bf18      	it	ne
 801c962:	2000      	movne	r0, #0
 801c964:	4770      	bx	lr

0801c966 <strncmp>:
 801c966:	b510      	push	{r4, lr}
 801c968:	b16a      	cbz	r2, 801c986 <strncmp+0x20>
 801c96a:	3901      	subs	r1, #1
 801c96c:	1884      	adds	r4, r0, r2
 801c96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c972:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c976:	429a      	cmp	r2, r3
 801c978:	d103      	bne.n	801c982 <strncmp+0x1c>
 801c97a:	42a0      	cmp	r0, r4
 801c97c:	d001      	beq.n	801c982 <strncmp+0x1c>
 801c97e:	2a00      	cmp	r2, #0
 801c980:	d1f5      	bne.n	801c96e <strncmp+0x8>
 801c982:	1ad0      	subs	r0, r2, r3
 801c984:	bd10      	pop	{r4, pc}
 801c986:	4610      	mov	r0, r2
 801c988:	e7fc      	b.n	801c984 <strncmp+0x1e>

0801c98a <strstr>:
 801c98a:	780a      	ldrb	r2, [r1, #0]
 801c98c:	b570      	push	{r4, r5, r6, lr}
 801c98e:	b96a      	cbnz	r2, 801c9ac <strstr+0x22>
 801c990:	bd70      	pop	{r4, r5, r6, pc}
 801c992:	429a      	cmp	r2, r3
 801c994:	d109      	bne.n	801c9aa <strstr+0x20>
 801c996:	460c      	mov	r4, r1
 801c998:	4605      	mov	r5, r0
 801c99a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d0f6      	beq.n	801c990 <strstr+0x6>
 801c9a2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c9a6:	429e      	cmp	r6, r3
 801c9a8:	d0f7      	beq.n	801c99a <strstr+0x10>
 801c9aa:	3001      	adds	r0, #1
 801c9ac:	7803      	ldrb	r3, [r0, #0]
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d1ef      	bne.n	801c992 <strstr+0x8>
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	e7ec      	b.n	801c990 <strstr+0x6>
	...

0801c9b8 <_close_r>:
 801c9b8:	b538      	push	{r3, r4, r5, lr}
 801c9ba:	4d06      	ldr	r5, [pc, #24]	@ (801c9d4 <_close_r+0x1c>)
 801c9bc:	2300      	movs	r3, #0
 801c9be:	4604      	mov	r4, r0
 801c9c0:	4608      	mov	r0, r1
 801c9c2:	602b      	str	r3, [r5, #0]
 801c9c4:	f7e7 fb8c 	bl	80040e0 <_close>
 801c9c8:	1c43      	adds	r3, r0, #1
 801c9ca:	d102      	bne.n	801c9d2 <_close_r+0x1a>
 801c9cc:	682b      	ldr	r3, [r5, #0]
 801c9ce:	b103      	cbz	r3, 801c9d2 <_close_r+0x1a>
 801c9d0:	6023      	str	r3, [r4, #0]
 801c9d2:	bd38      	pop	{r3, r4, r5, pc}
 801c9d4:	20011d30 	.word	0x20011d30

0801c9d8 <_lseek_r>:
 801c9d8:	b538      	push	{r3, r4, r5, lr}
 801c9da:	4d07      	ldr	r5, [pc, #28]	@ (801c9f8 <_lseek_r+0x20>)
 801c9dc:	4604      	mov	r4, r0
 801c9de:	4608      	mov	r0, r1
 801c9e0:	4611      	mov	r1, r2
 801c9e2:	2200      	movs	r2, #0
 801c9e4:	602a      	str	r2, [r5, #0]
 801c9e6:	461a      	mov	r2, r3
 801c9e8:	f7e7 fba1 	bl	800412e <_lseek>
 801c9ec:	1c43      	adds	r3, r0, #1
 801c9ee:	d102      	bne.n	801c9f6 <_lseek_r+0x1e>
 801c9f0:	682b      	ldr	r3, [r5, #0]
 801c9f2:	b103      	cbz	r3, 801c9f6 <_lseek_r+0x1e>
 801c9f4:	6023      	str	r3, [r4, #0]
 801c9f6:	bd38      	pop	{r3, r4, r5, pc}
 801c9f8:	20011d30 	.word	0x20011d30

0801c9fc <_read_r>:
 801c9fc:	b538      	push	{r3, r4, r5, lr}
 801c9fe:	4d07      	ldr	r5, [pc, #28]	@ (801ca1c <_read_r+0x20>)
 801ca00:	4604      	mov	r4, r0
 801ca02:	4608      	mov	r0, r1
 801ca04:	4611      	mov	r1, r2
 801ca06:	2200      	movs	r2, #0
 801ca08:	602a      	str	r2, [r5, #0]
 801ca0a:	461a      	mov	r2, r3
 801ca0c:	f7e7 fb2f 	bl	800406e <_read>
 801ca10:	1c43      	adds	r3, r0, #1
 801ca12:	d102      	bne.n	801ca1a <_read_r+0x1e>
 801ca14:	682b      	ldr	r3, [r5, #0]
 801ca16:	b103      	cbz	r3, 801ca1a <_read_r+0x1e>
 801ca18:	6023      	str	r3, [r4, #0]
 801ca1a:	bd38      	pop	{r3, r4, r5, pc}
 801ca1c:	20011d30 	.word	0x20011d30

0801ca20 <_sbrk_r>:
 801ca20:	b538      	push	{r3, r4, r5, lr}
 801ca22:	4d06      	ldr	r5, [pc, #24]	@ (801ca3c <_sbrk_r+0x1c>)
 801ca24:	2300      	movs	r3, #0
 801ca26:	4604      	mov	r4, r0
 801ca28:	4608      	mov	r0, r1
 801ca2a:	602b      	str	r3, [r5, #0]
 801ca2c:	f7e7 fb8c 	bl	8004148 <_sbrk>
 801ca30:	1c43      	adds	r3, r0, #1
 801ca32:	d102      	bne.n	801ca3a <_sbrk_r+0x1a>
 801ca34:	682b      	ldr	r3, [r5, #0]
 801ca36:	b103      	cbz	r3, 801ca3a <_sbrk_r+0x1a>
 801ca38:	6023      	str	r3, [r4, #0]
 801ca3a:	bd38      	pop	{r3, r4, r5, pc}
 801ca3c:	20011d30 	.word	0x20011d30

0801ca40 <_write_r>:
 801ca40:	b538      	push	{r3, r4, r5, lr}
 801ca42:	4d07      	ldr	r5, [pc, #28]	@ (801ca60 <_write_r+0x20>)
 801ca44:	4604      	mov	r4, r0
 801ca46:	4608      	mov	r0, r1
 801ca48:	4611      	mov	r1, r2
 801ca4a:	2200      	movs	r2, #0
 801ca4c:	602a      	str	r2, [r5, #0]
 801ca4e:	461a      	mov	r2, r3
 801ca50:	f7e7 fb2a 	bl	80040a8 <_write>
 801ca54:	1c43      	adds	r3, r0, #1
 801ca56:	d102      	bne.n	801ca5e <_write_r+0x1e>
 801ca58:	682b      	ldr	r3, [r5, #0]
 801ca5a:	b103      	cbz	r3, 801ca5e <_write_r+0x1e>
 801ca5c:	6023      	str	r3, [r4, #0]
 801ca5e:	bd38      	pop	{r3, r4, r5, pc}
 801ca60:	20011d30 	.word	0x20011d30

0801ca64 <__errno>:
 801ca64:	4b01      	ldr	r3, [pc, #4]	@ (801ca6c <__errno+0x8>)
 801ca66:	6818      	ldr	r0, [r3, #0]
 801ca68:	4770      	bx	lr
 801ca6a:	bf00      	nop
 801ca6c:	2000090c 	.word	0x2000090c

0801ca70 <__libc_init_array>:
 801ca70:	b570      	push	{r4, r5, r6, lr}
 801ca72:	4d0d      	ldr	r5, [pc, #52]	@ (801caa8 <__libc_init_array+0x38>)
 801ca74:	4c0d      	ldr	r4, [pc, #52]	@ (801caac <__libc_init_array+0x3c>)
 801ca76:	1b64      	subs	r4, r4, r5
 801ca78:	10a4      	asrs	r4, r4, #2
 801ca7a:	2600      	movs	r6, #0
 801ca7c:	42a6      	cmp	r6, r4
 801ca7e:	d109      	bne.n	801ca94 <__libc_init_array+0x24>
 801ca80:	4d0b      	ldr	r5, [pc, #44]	@ (801cab0 <__libc_init_array+0x40>)
 801ca82:	4c0c      	ldr	r4, [pc, #48]	@ (801cab4 <__libc_init_array+0x44>)
 801ca84:	f000 fe62 	bl	801d74c <_init>
 801ca88:	1b64      	subs	r4, r4, r5
 801ca8a:	10a4      	asrs	r4, r4, #2
 801ca8c:	2600      	movs	r6, #0
 801ca8e:	42a6      	cmp	r6, r4
 801ca90:	d105      	bne.n	801ca9e <__libc_init_array+0x2e>
 801ca92:	bd70      	pop	{r4, r5, r6, pc}
 801ca94:	f855 3b04 	ldr.w	r3, [r5], #4
 801ca98:	4798      	blx	r3
 801ca9a:	3601      	adds	r6, #1
 801ca9c:	e7ee      	b.n	801ca7c <__libc_init_array+0xc>
 801ca9e:	f855 3b04 	ldr.w	r3, [r5], #4
 801caa2:	4798      	blx	r3
 801caa4:	3601      	adds	r6, #1
 801caa6:	e7f2      	b.n	801ca8e <__libc_init_array+0x1e>
 801caa8:	0801edd8 	.word	0x0801edd8
 801caac:	0801edd8 	.word	0x0801edd8
 801cab0:	0801edd8 	.word	0x0801edd8
 801cab4:	0801edf4 	.word	0x0801edf4

0801cab8 <__retarget_lock_init_recursive>:
 801cab8:	4770      	bx	lr

0801caba <__retarget_lock_acquire_recursive>:
 801caba:	4770      	bx	lr

0801cabc <__retarget_lock_release_recursive>:
 801cabc:	4770      	bx	lr

0801cabe <strcpy>:
 801cabe:	4603      	mov	r3, r0
 801cac0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cac4:	f803 2b01 	strb.w	r2, [r3], #1
 801cac8:	2a00      	cmp	r2, #0
 801caca:	d1f9      	bne.n	801cac0 <strcpy+0x2>
 801cacc:	4770      	bx	lr

0801cace <memcpy>:
 801cace:	440a      	add	r2, r1
 801cad0:	4291      	cmp	r1, r2
 801cad2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801cad6:	d100      	bne.n	801cada <memcpy+0xc>
 801cad8:	4770      	bx	lr
 801cada:	b510      	push	{r4, lr}
 801cadc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cae0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cae4:	4291      	cmp	r1, r2
 801cae6:	d1f9      	bne.n	801cadc <memcpy+0xe>
 801cae8:	bd10      	pop	{r4, pc}
	...

0801caec <__assert_func>:
 801caec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801caee:	4614      	mov	r4, r2
 801caf0:	461a      	mov	r2, r3
 801caf2:	4b09      	ldr	r3, [pc, #36]	@ (801cb18 <__assert_func+0x2c>)
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	4605      	mov	r5, r0
 801caf8:	68d8      	ldr	r0, [r3, #12]
 801cafa:	b14c      	cbz	r4, 801cb10 <__assert_func+0x24>
 801cafc:	4b07      	ldr	r3, [pc, #28]	@ (801cb1c <__assert_func+0x30>)
 801cafe:	9100      	str	r1, [sp, #0]
 801cb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cb04:	4906      	ldr	r1, [pc, #24]	@ (801cb20 <__assert_func+0x34>)
 801cb06:	462b      	mov	r3, r5
 801cb08:	f000 fd3e 	bl	801d588 <fiprintf>
 801cb0c:	f000 fdd2 	bl	801d6b4 <abort>
 801cb10:	4b04      	ldr	r3, [pc, #16]	@ (801cb24 <__assert_func+0x38>)
 801cb12:	461c      	mov	r4, r3
 801cb14:	e7f3      	b.n	801cafe <__assert_func+0x12>
 801cb16:	bf00      	nop
 801cb18:	2000090c 	.word	0x2000090c
 801cb1c:	0801ec5f 	.word	0x0801ec5f
 801cb20:	0801ec6c 	.word	0x0801ec6c
 801cb24:	0801ec9a 	.word	0x0801ec9a

0801cb28 <__env_lock>:
 801cb28:	4801      	ldr	r0, [pc, #4]	@ (801cb30 <__env_lock+0x8>)
 801cb2a:	f7ff bfc6 	b.w	801caba <__retarget_lock_acquire_recursive>
 801cb2e:	bf00      	nop
 801cb30:	20011d34 	.word	0x20011d34

0801cb34 <__env_unlock>:
 801cb34:	4801      	ldr	r0, [pc, #4]	@ (801cb3c <__env_unlock+0x8>)
 801cb36:	f7ff bfc1 	b.w	801cabc <__retarget_lock_release_recursive>
 801cb3a:	bf00      	nop
 801cb3c:	20011d34 	.word	0x20011d34

0801cb40 <_free_r>:
 801cb40:	b538      	push	{r3, r4, r5, lr}
 801cb42:	4605      	mov	r5, r0
 801cb44:	2900      	cmp	r1, #0
 801cb46:	d041      	beq.n	801cbcc <_free_r+0x8c>
 801cb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cb4c:	1f0c      	subs	r4, r1, #4
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	bfb8      	it	lt
 801cb52:	18e4      	addlt	r4, r4, r3
 801cb54:	f7ff fb2a 	bl	801c1ac <__malloc_lock>
 801cb58:	4a1d      	ldr	r2, [pc, #116]	@ (801cbd0 <_free_r+0x90>)
 801cb5a:	6813      	ldr	r3, [r2, #0]
 801cb5c:	b933      	cbnz	r3, 801cb6c <_free_r+0x2c>
 801cb5e:	6063      	str	r3, [r4, #4]
 801cb60:	6014      	str	r4, [r2, #0]
 801cb62:	4628      	mov	r0, r5
 801cb64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb68:	f7ff bb26 	b.w	801c1b8 <__malloc_unlock>
 801cb6c:	42a3      	cmp	r3, r4
 801cb6e:	d908      	bls.n	801cb82 <_free_r+0x42>
 801cb70:	6820      	ldr	r0, [r4, #0]
 801cb72:	1821      	adds	r1, r4, r0
 801cb74:	428b      	cmp	r3, r1
 801cb76:	bf01      	itttt	eq
 801cb78:	6819      	ldreq	r1, [r3, #0]
 801cb7a:	685b      	ldreq	r3, [r3, #4]
 801cb7c:	1809      	addeq	r1, r1, r0
 801cb7e:	6021      	streq	r1, [r4, #0]
 801cb80:	e7ed      	b.n	801cb5e <_free_r+0x1e>
 801cb82:	461a      	mov	r2, r3
 801cb84:	685b      	ldr	r3, [r3, #4]
 801cb86:	b10b      	cbz	r3, 801cb8c <_free_r+0x4c>
 801cb88:	42a3      	cmp	r3, r4
 801cb8a:	d9fa      	bls.n	801cb82 <_free_r+0x42>
 801cb8c:	6811      	ldr	r1, [r2, #0]
 801cb8e:	1850      	adds	r0, r2, r1
 801cb90:	42a0      	cmp	r0, r4
 801cb92:	d10b      	bne.n	801cbac <_free_r+0x6c>
 801cb94:	6820      	ldr	r0, [r4, #0]
 801cb96:	4401      	add	r1, r0
 801cb98:	1850      	adds	r0, r2, r1
 801cb9a:	4283      	cmp	r3, r0
 801cb9c:	6011      	str	r1, [r2, #0]
 801cb9e:	d1e0      	bne.n	801cb62 <_free_r+0x22>
 801cba0:	6818      	ldr	r0, [r3, #0]
 801cba2:	685b      	ldr	r3, [r3, #4]
 801cba4:	6053      	str	r3, [r2, #4]
 801cba6:	4408      	add	r0, r1
 801cba8:	6010      	str	r0, [r2, #0]
 801cbaa:	e7da      	b.n	801cb62 <_free_r+0x22>
 801cbac:	d902      	bls.n	801cbb4 <_free_r+0x74>
 801cbae:	230c      	movs	r3, #12
 801cbb0:	602b      	str	r3, [r5, #0]
 801cbb2:	e7d6      	b.n	801cb62 <_free_r+0x22>
 801cbb4:	6820      	ldr	r0, [r4, #0]
 801cbb6:	1821      	adds	r1, r4, r0
 801cbb8:	428b      	cmp	r3, r1
 801cbba:	bf04      	itt	eq
 801cbbc:	6819      	ldreq	r1, [r3, #0]
 801cbbe:	685b      	ldreq	r3, [r3, #4]
 801cbc0:	6063      	str	r3, [r4, #4]
 801cbc2:	bf04      	itt	eq
 801cbc4:	1809      	addeq	r1, r1, r0
 801cbc6:	6021      	streq	r1, [r4, #0]
 801cbc8:	6054      	str	r4, [r2, #4]
 801cbca:	e7ca      	b.n	801cb62 <_free_r+0x22>
 801cbcc:	bd38      	pop	{r3, r4, r5, pc}
 801cbce:	bf00      	nop
 801cbd0:	20011bf0 	.word	0x20011bf0

0801cbd4 <_malloc_usable_size_r>:
 801cbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cbd8:	1f18      	subs	r0, r3, #4
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	bfbc      	itt	lt
 801cbde:	580b      	ldrlt	r3, [r1, r0]
 801cbe0:	18c0      	addlt	r0, r0, r3
 801cbe2:	4770      	bx	lr

0801cbe4 <__ssputs_r>:
 801cbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbe8:	688e      	ldr	r6, [r1, #8]
 801cbea:	461f      	mov	r7, r3
 801cbec:	42be      	cmp	r6, r7
 801cbee:	680b      	ldr	r3, [r1, #0]
 801cbf0:	4682      	mov	sl, r0
 801cbf2:	460c      	mov	r4, r1
 801cbf4:	4690      	mov	r8, r2
 801cbf6:	d82d      	bhi.n	801cc54 <__ssputs_r+0x70>
 801cbf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cbfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cc00:	d026      	beq.n	801cc50 <__ssputs_r+0x6c>
 801cc02:	6965      	ldr	r5, [r4, #20]
 801cc04:	6909      	ldr	r1, [r1, #16]
 801cc06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc0a:	eba3 0901 	sub.w	r9, r3, r1
 801cc0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc12:	1c7b      	adds	r3, r7, #1
 801cc14:	444b      	add	r3, r9
 801cc16:	106d      	asrs	r5, r5, #1
 801cc18:	429d      	cmp	r5, r3
 801cc1a:	bf38      	it	cc
 801cc1c:	461d      	movcc	r5, r3
 801cc1e:	0553      	lsls	r3, r2, #21
 801cc20:	d527      	bpl.n	801cc72 <__ssputs_r+0x8e>
 801cc22:	4629      	mov	r1, r5
 801cc24:	f7ff fa42 	bl	801c0ac <_malloc_r>
 801cc28:	4606      	mov	r6, r0
 801cc2a:	b360      	cbz	r0, 801cc86 <__ssputs_r+0xa2>
 801cc2c:	6921      	ldr	r1, [r4, #16]
 801cc2e:	464a      	mov	r2, r9
 801cc30:	f7ff ff4d 	bl	801cace <memcpy>
 801cc34:	89a3      	ldrh	r3, [r4, #12]
 801cc36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801cc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cc3e:	81a3      	strh	r3, [r4, #12]
 801cc40:	6126      	str	r6, [r4, #16]
 801cc42:	6165      	str	r5, [r4, #20]
 801cc44:	444e      	add	r6, r9
 801cc46:	eba5 0509 	sub.w	r5, r5, r9
 801cc4a:	6026      	str	r6, [r4, #0]
 801cc4c:	60a5      	str	r5, [r4, #8]
 801cc4e:	463e      	mov	r6, r7
 801cc50:	42be      	cmp	r6, r7
 801cc52:	d900      	bls.n	801cc56 <__ssputs_r+0x72>
 801cc54:	463e      	mov	r6, r7
 801cc56:	6820      	ldr	r0, [r4, #0]
 801cc58:	4632      	mov	r2, r6
 801cc5a:	4641      	mov	r1, r8
 801cc5c:	f7ff fe54 	bl	801c908 <memmove>
 801cc60:	68a3      	ldr	r3, [r4, #8]
 801cc62:	1b9b      	subs	r3, r3, r6
 801cc64:	60a3      	str	r3, [r4, #8]
 801cc66:	6823      	ldr	r3, [r4, #0]
 801cc68:	4433      	add	r3, r6
 801cc6a:	6023      	str	r3, [r4, #0]
 801cc6c:	2000      	movs	r0, #0
 801cc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc72:	462a      	mov	r2, r5
 801cc74:	f7ff fb1a 	bl	801c2ac <_realloc_r>
 801cc78:	4606      	mov	r6, r0
 801cc7a:	2800      	cmp	r0, #0
 801cc7c:	d1e0      	bne.n	801cc40 <__ssputs_r+0x5c>
 801cc7e:	6921      	ldr	r1, [r4, #16]
 801cc80:	4650      	mov	r0, sl
 801cc82:	f7ff ff5d 	bl	801cb40 <_free_r>
 801cc86:	230c      	movs	r3, #12
 801cc88:	f8ca 3000 	str.w	r3, [sl]
 801cc8c:	89a3      	ldrh	r3, [r4, #12]
 801cc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc92:	81a3      	strh	r3, [r4, #12]
 801cc94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cc98:	e7e9      	b.n	801cc6e <__ssputs_r+0x8a>
	...

0801cc9c <_svfiprintf_r>:
 801cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca0:	4698      	mov	r8, r3
 801cca2:	898b      	ldrh	r3, [r1, #12]
 801cca4:	061b      	lsls	r3, r3, #24
 801cca6:	b09d      	sub	sp, #116	@ 0x74
 801cca8:	4607      	mov	r7, r0
 801ccaa:	460d      	mov	r5, r1
 801ccac:	4614      	mov	r4, r2
 801ccae:	d510      	bpl.n	801ccd2 <_svfiprintf_r+0x36>
 801ccb0:	690b      	ldr	r3, [r1, #16]
 801ccb2:	b973      	cbnz	r3, 801ccd2 <_svfiprintf_r+0x36>
 801ccb4:	2140      	movs	r1, #64	@ 0x40
 801ccb6:	f7ff f9f9 	bl	801c0ac <_malloc_r>
 801ccba:	6028      	str	r0, [r5, #0]
 801ccbc:	6128      	str	r0, [r5, #16]
 801ccbe:	b930      	cbnz	r0, 801ccce <_svfiprintf_r+0x32>
 801ccc0:	230c      	movs	r3, #12
 801ccc2:	603b      	str	r3, [r7, #0]
 801ccc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ccc8:	b01d      	add	sp, #116	@ 0x74
 801ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccce:	2340      	movs	r3, #64	@ 0x40
 801ccd0:	616b      	str	r3, [r5, #20]
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccd6:	2320      	movs	r3, #32
 801ccd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ccdc:	f8cd 800c 	str.w	r8, [sp, #12]
 801cce0:	2330      	movs	r3, #48	@ 0x30
 801cce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ce80 <_svfiprintf_r+0x1e4>
 801cce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ccea:	f04f 0901 	mov.w	r9, #1
 801ccee:	4623      	mov	r3, r4
 801ccf0:	469a      	mov	sl, r3
 801ccf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccf6:	b10a      	cbz	r2, 801ccfc <_svfiprintf_r+0x60>
 801ccf8:	2a25      	cmp	r2, #37	@ 0x25
 801ccfa:	d1f9      	bne.n	801ccf0 <_svfiprintf_r+0x54>
 801ccfc:	ebba 0b04 	subs.w	fp, sl, r4
 801cd00:	d00b      	beq.n	801cd1a <_svfiprintf_r+0x7e>
 801cd02:	465b      	mov	r3, fp
 801cd04:	4622      	mov	r2, r4
 801cd06:	4629      	mov	r1, r5
 801cd08:	4638      	mov	r0, r7
 801cd0a:	f7ff ff6b 	bl	801cbe4 <__ssputs_r>
 801cd0e:	3001      	adds	r0, #1
 801cd10:	f000 80a7 	beq.w	801ce62 <_svfiprintf_r+0x1c6>
 801cd14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd16:	445a      	add	r2, fp
 801cd18:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd1a:	f89a 3000 	ldrb.w	r3, [sl]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	f000 809f 	beq.w	801ce62 <_svfiprintf_r+0x1c6>
 801cd24:	2300      	movs	r3, #0
 801cd26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd2e:	f10a 0a01 	add.w	sl, sl, #1
 801cd32:	9304      	str	r3, [sp, #16]
 801cd34:	9307      	str	r3, [sp, #28]
 801cd36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cd3a:	931a      	str	r3, [sp, #104]	@ 0x68
 801cd3c:	4654      	mov	r4, sl
 801cd3e:	2205      	movs	r2, #5
 801cd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd44:	484e      	ldr	r0, [pc, #312]	@ (801ce80 <_svfiprintf_r+0x1e4>)
 801cd46:	f7e3 fa7b 	bl	8000240 <memchr>
 801cd4a:	9a04      	ldr	r2, [sp, #16]
 801cd4c:	b9d8      	cbnz	r0, 801cd86 <_svfiprintf_r+0xea>
 801cd4e:	06d0      	lsls	r0, r2, #27
 801cd50:	bf44      	itt	mi
 801cd52:	2320      	movmi	r3, #32
 801cd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd58:	0711      	lsls	r1, r2, #28
 801cd5a:	bf44      	itt	mi
 801cd5c:	232b      	movmi	r3, #43	@ 0x2b
 801cd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd62:	f89a 3000 	ldrb.w	r3, [sl]
 801cd66:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd68:	d015      	beq.n	801cd96 <_svfiprintf_r+0xfa>
 801cd6a:	9a07      	ldr	r2, [sp, #28]
 801cd6c:	4654      	mov	r4, sl
 801cd6e:	2000      	movs	r0, #0
 801cd70:	f04f 0c0a 	mov.w	ip, #10
 801cd74:	4621      	mov	r1, r4
 801cd76:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd7a:	3b30      	subs	r3, #48	@ 0x30
 801cd7c:	2b09      	cmp	r3, #9
 801cd7e:	d94b      	bls.n	801ce18 <_svfiprintf_r+0x17c>
 801cd80:	b1b0      	cbz	r0, 801cdb0 <_svfiprintf_r+0x114>
 801cd82:	9207      	str	r2, [sp, #28]
 801cd84:	e014      	b.n	801cdb0 <_svfiprintf_r+0x114>
 801cd86:	eba0 0308 	sub.w	r3, r0, r8
 801cd8a:	fa09 f303 	lsl.w	r3, r9, r3
 801cd8e:	4313      	orrs	r3, r2
 801cd90:	9304      	str	r3, [sp, #16]
 801cd92:	46a2      	mov	sl, r4
 801cd94:	e7d2      	b.n	801cd3c <_svfiprintf_r+0xa0>
 801cd96:	9b03      	ldr	r3, [sp, #12]
 801cd98:	1d19      	adds	r1, r3, #4
 801cd9a:	681b      	ldr	r3, [r3, #0]
 801cd9c:	9103      	str	r1, [sp, #12]
 801cd9e:	2b00      	cmp	r3, #0
 801cda0:	bfbb      	ittet	lt
 801cda2:	425b      	neglt	r3, r3
 801cda4:	f042 0202 	orrlt.w	r2, r2, #2
 801cda8:	9307      	strge	r3, [sp, #28]
 801cdaa:	9307      	strlt	r3, [sp, #28]
 801cdac:	bfb8      	it	lt
 801cdae:	9204      	strlt	r2, [sp, #16]
 801cdb0:	7823      	ldrb	r3, [r4, #0]
 801cdb2:	2b2e      	cmp	r3, #46	@ 0x2e
 801cdb4:	d10a      	bne.n	801cdcc <_svfiprintf_r+0x130>
 801cdb6:	7863      	ldrb	r3, [r4, #1]
 801cdb8:	2b2a      	cmp	r3, #42	@ 0x2a
 801cdba:	d132      	bne.n	801ce22 <_svfiprintf_r+0x186>
 801cdbc:	9b03      	ldr	r3, [sp, #12]
 801cdbe:	1d1a      	adds	r2, r3, #4
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	9203      	str	r2, [sp, #12]
 801cdc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cdc8:	3402      	adds	r4, #2
 801cdca:	9305      	str	r3, [sp, #20]
 801cdcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ce90 <_svfiprintf_r+0x1f4>
 801cdd0:	7821      	ldrb	r1, [r4, #0]
 801cdd2:	2203      	movs	r2, #3
 801cdd4:	4650      	mov	r0, sl
 801cdd6:	f7e3 fa33 	bl	8000240 <memchr>
 801cdda:	b138      	cbz	r0, 801cdec <_svfiprintf_r+0x150>
 801cddc:	9b04      	ldr	r3, [sp, #16]
 801cdde:	eba0 000a 	sub.w	r0, r0, sl
 801cde2:	2240      	movs	r2, #64	@ 0x40
 801cde4:	4082      	lsls	r2, r0
 801cde6:	4313      	orrs	r3, r2
 801cde8:	3401      	adds	r4, #1
 801cdea:	9304      	str	r3, [sp, #16]
 801cdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdf0:	4824      	ldr	r0, [pc, #144]	@ (801ce84 <_svfiprintf_r+0x1e8>)
 801cdf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cdf6:	2206      	movs	r2, #6
 801cdf8:	f7e3 fa22 	bl	8000240 <memchr>
 801cdfc:	2800      	cmp	r0, #0
 801cdfe:	d036      	beq.n	801ce6e <_svfiprintf_r+0x1d2>
 801ce00:	4b21      	ldr	r3, [pc, #132]	@ (801ce88 <_svfiprintf_r+0x1ec>)
 801ce02:	bb1b      	cbnz	r3, 801ce4c <_svfiprintf_r+0x1b0>
 801ce04:	9b03      	ldr	r3, [sp, #12]
 801ce06:	3307      	adds	r3, #7
 801ce08:	f023 0307 	bic.w	r3, r3, #7
 801ce0c:	3308      	adds	r3, #8
 801ce0e:	9303      	str	r3, [sp, #12]
 801ce10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce12:	4433      	add	r3, r6
 801ce14:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce16:	e76a      	b.n	801ccee <_svfiprintf_r+0x52>
 801ce18:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce1c:	460c      	mov	r4, r1
 801ce1e:	2001      	movs	r0, #1
 801ce20:	e7a8      	b.n	801cd74 <_svfiprintf_r+0xd8>
 801ce22:	2300      	movs	r3, #0
 801ce24:	3401      	adds	r4, #1
 801ce26:	9305      	str	r3, [sp, #20]
 801ce28:	4619      	mov	r1, r3
 801ce2a:	f04f 0c0a 	mov.w	ip, #10
 801ce2e:	4620      	mov	r0, r4
 801ce30:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce34:	3a30      	subs	r2, #48	@ 0x30
 801ce36:	2a09      	cmp	r2, #9
 801ce38:	d903      	bls.n	801ce42 <_svfiprintf_r+0x1a6>
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d0c6      	beq.n	801cdcc <_svfiprintf_r+0x130>
 801ce3e:	9105      	str	r1, [sp, #20]
 801ce40:	e7c4      	b.n	801cdcc <_svfiprintf_r+0x130>
 801ce42:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce46:	4604      	mov	r4, r0
 801ce48:	2301      	movs	r3, #1
 801ce4a:	e7f0      	b.n	801ce2e <_svfiprintf_r+0x192>
 801ce4c:	ab03      	add	r3, sp, #12
 801ce4e:	9300      	str	r3, [sp, #0]
 801ce50:	462a      	mov	r2, r5
 801ce52:	4b0e      	ldr	r3, [pc, #56]	@ (801ce8c <_svfiprintf_r+0x1f0>)
 801ce54:	a904      	add	r1, sp, #16
 801ce56:	4638      	mov	r0, r7
 801ce58:	f3af 8000 	nop.w
 801ce5c:	1c42      	adds	r2, r0, #1
 801ce5e:	4606      	mov	r6, r0
 801ce60:	d1d6      	bne.n	801ce10 <_svfiprintf_r+0x174>
 801ce62:	89ab      	ldrh	r3, [r5, #12]
 801ce64:	065b      	lsls	r3, r3, #25
 801ce66:	f53f af2d 	bmi.w	801ccc4 <_svfiprintf_r+0x28>
 801ce6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ce6c:	e72c      	b.n	801ccc8 <_svfiprintf_r+0x2c>
 801ce6e:	ab03      	add	r3, sp, #12
 801ce70:	9300      	str	r3, [sp, #0]
 801ce72:	462a      	mov	r2, r5
 801ce74:	4b05      	ldr	r3, [pc, #20]	@ (801ce8c <_svfiprintf_r+0x1f0>)
 801ce76:	a904      	add	r1, sp, #16
 801ce78:	4638      	mov	r0, r7
 801ce7a:	f000 f9bb 	bl	801d1f4 <_printf_i>
 801ce7e:	e7ed      	b.n	801ce5c <_svfiprintf_r+0x1c0>
 801ce80:	0801ec9b 	.word	0x0801ec9b
 801ce84:	0801eca5 	.word	0x0801eca5
 801ce88:	00000000 	.word	0x00000000
 801ce8c:	0801cbe5 	.word	0x0801cbe5
 801ce90:	0801eca1 	.word	0x0801eca1

0801ce94 <__sfputc_r>:
 801ce94:	6893      	ldr	r3, [r2, #8]
 801ce96:	3b01      	subs	r3, #1
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	b410      	push	{r4}
 801ce9c:	6093      	str	r3, [r2, #8]
 801ce9e:	da08      	bge.n	801ceb2 <__sfputc_r+0x1e>
 801cea0:	6994      	ldr	r4, [r2, #24]
 801cea2:	42a3      	cmp	r3, r4
 801cea4:	db01      	blt.n	801ceaa <__sfputc_r+0x16>
 801cea6:	290a      	cmp	r1, #10
 801cea8:	d103      	bne.n	801ceb2 <__sfputc_r+0x1e>
 801ceaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ceae:	f7ff bc87 	b.w	801c7c0 <__swbuf_r>
 801ceb2:	6813      	ldr	r3, [r2, #0]
 801ceb4:	1c58      	adds	r0, r3, #1
 801ceb6:	6010      	str	r0, [r2, #0]
 801ceb8:	7019      	strb	r1, [r3, #0]
 801ceba:	4608      	mov	r0, r1
 801cebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cec0:	4770      	bx	lr

0801cec2 <__sfputs_r>:
 801cec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cec4:	4606      	mov	r6, r0
 801cec6:	460f      	mov	r7, r1
 801cec8:	4614      	mov	r4, r2
 801ceca:	18d5      	adds	r5, r2, r3
 801cecc:	42ac      	cmp	r4, r5
 801cece:	d101      	bne.n	801ced4 <__sfputs_r+0x12>
 801ced0:	2000      	movs	r0, #0
 801ced2:	e007      	b.n	801cee4 <__sfputs_r+0x22>
 801ced4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ced8:	463a      	mov	r2, r7
 801ceda:	4630      	mov	r0, r6
 801cedc:	f7ff ffda 	bl	801ce94 <__sfputc_r>
 801cee0:	1c43      	adds	r3, r0, #1
 801cee2:	d1f3      	bne.n	801cecc <__sfputs_r+0xa>
 801cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cee8 <_vfiprintf_r>:
 801cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceec:	460d      	mov	r5, r1
 801ceee:	b09d      	sub	sp, #116	@ 0x74
 801cef0:	4614      	mov	r4, r2
 801cef2:	4698      	mov	r8, r3
 801cef4:	4606      	mov	r6, r0
 801cef6:	b118      	cbz	r0, 801cf00 <_vfiprintf_r+0x18>
 801cef8:	6a03      	ldr	r3, [r0, #32]
 801cefa:	b90b      	cbnz	r3, 801cf00 <_vfiprintf_r+0x18>
 801cefc:	f7ff fb08 	bl	801c510 <__sinit>
 801cf00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf02:	07d9      	lsls	r1, r3, #31
 801cf04:	d405      	bmi.n	801cf12 <_vfiprintf_r+0x2a>
 801cf06:	89ab      	ldrh	r3, [r5, #12]
 801cf08:	059a      	lsls	r2, r3, #22
 801cf0a:	d402      	bmi.n	801cf12 <_vfiprintf_r+0x2a>
 801cf0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf0e:	f7ff fdd4 	bl	801caba <__retarget_lock_acquire_recursive>
 801cf12:	89ab      	ldrh	r3, [r5, #12]
 801cf14:	071b      	lsls	r3, r3, #28
 801cf16:	d501      	bpl.n	801cf1c <_vfiprintf_r+0x34>
 801cf18:	692b      	ldr	r3, [r5, #16]
 801cf1a:	b99b      	cbnz	r3, 801cf44 <_vfiprintf_r+0x5c>
 801cf1c:	4629      	mov	r1, r5
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7ff fc8c 	bl	801c83c <__swsetup_r>
 801cf24:	b170      	cbz	r0, 801cf44 <_vfiprintf_r+0x5c>
 801cf26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf28:	07dc      	lsls	r4, r3, #31
 801cf2a:	d504      	bpl.n	801cf36 <_vfiprintf_r+0x4e>
 801cf2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf30:	b01d      	add	sp, #116	@ 0x74
 801cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf36:	89ab      	ldrh	r3, [r5, #12]
 801cf38:	0598      	lsls	r0, r3, #22
 801cf3a:	d4f7      	bmi.n	801cf2c <_vfiprintf_r+0x44>
 801cf3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf3e:	f7ff fdbd 	bl	801cabc <__retarget_lock_release_recursive>
 801cf42:	e7f3      	b.n	801cf2c <_vfiprintf_r+0x44>
 801cf44:	2300      	movs	r3, #0
 801cf46:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf48:	2320      	movs	r3, #32
 801cf4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cf4e:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf52:	2330      	movs	r3, #48	@ 0x30
 801cf54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d104 <_vfiprintf_r+0x21c>
 801cf58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cf5c:	f04f 0901 	mov.w	r9, #1
 801cf60:	4623      	mov	r3, r4
 801cf62:	469a      	mov	sl, r3
 801cf64:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf68:	b10a      	cbz	r2, 801cf6e <_vfiprintf_r+0x86>
 801cf6a:	2a25      	cmp	r2, #37	@ 0x25
 801cf6c:	d1f9      	bne.n	801cf62 <_vfiprintf_r+0x7a>
 801cf6e:	ebba 0b04 	subs.w	fp, sl, r4
 801cf72:	d00b      	beq.n	801cf8c <_vfiprintf_r+0xa4>
 801cf74:	465b      	mov	r3, fp
 801cf76:	4622      	mov	r2, r4
 801cf78:	4629      	mov	r1, r5
 801cf7a:	4630      	mov	r0, r6
 801cf7c:	f7ff ffa1 	bl	801cec2 <__sfputs_r>
 801cf80:	3001      	adds	r0, #1
 801cf82:	f000 80a7 	beq.w	801d0d4 <_vfiprintf_r+0x1ec>
 801cf86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf88:	445a      	add	r2, fp
 801cf8a:	9209      	str	r2, [sp, #36]	@ 0x24
 801cf8c:	f89a 3000 	ldrb.w	r3, [sl]
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	f000 809f 	beq.w	801d0d4 <_vfiprintf_r+0x1ec>
 801cf96:	2300      	movs	r3, #0
 801cf98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cf9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfa0:	f10a 0a01 	add.w	sl, sl, #1
 801cfa4:	9304      	str	r3, [sp, #16]
 801cfa6:	9307      	str	r3, [sp, #28]
 801cfa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cfac:	931a      	str	r3, [sp, #104]	@ 0x68
 801cfae:	4654      	mov	r4, sl
 801cfb0:	2205      	movs	r2, #5
 801cfb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cfb6:	4853      	ldr	r0, [pc, #332]	@ (801d104 <_vfiprintf_r+0x21c>)
 801cfb8:	f7e3 f942 	bl	8000240 <memchr>
 801cfbc:	9a04      	ldr	r2, [sp, #16]
 801cfbe:	b9d8      	cbnz	r0, 801cff8 <_vfiprintf_r+0x110>
 801cfc0:	06d1      	lsls	r1, r2, #27
 801cfc2:	bf44      	itt	mi
 801cfc4:	2320      	movmi	r3, #32
 801cfc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfca:	0713      	lsls	r3, r2, #28
 801cfcc:	bf44      	itt	mi
 801cfce:	232b      	movmi	r3, #43	@ 0x2b
 801cfd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfd4:	f89a 3000 	ldrb.w	r3, [sl]
 801cfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 801cfda:	d015      	beq.n	801d008 <_vfiprintf_r+0x120>
 801cfdc:	9a07      	ldr	r2, [sp, #28]
 801cfde:	4654      	mov	r4, sl
 801cfe0:	2000      	movs	r0, #0
 801cfe2:	f04f 0c0a 	mov.w	ip, #10
 801cfe6:	4621      	mov	r1, r4
 801cfe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cfec:	3b30      	subs	r3, #48	@ 0x30
 801cfee:	2b09      	cmp	r3, #9
 801cff0:	d94b      	bls.n	801d08a <_vfiprintf_r+0x1a2>
 801cff2:	b1b0      	cbz	r0, 801d022 <_vfiprintf_r+0x13a>
 801cff4:	9207      	str	r2, [sp, #28]
 801cff6:	e014      	b.n	801d022 <_vfiprintf_r+0x13a>
 801cff8:	eba0 0308 	sub.w	r3, r0, r8
 801cffc:	fa09 f303 	lsl.w	r3, r9, r3
 801d000:	4313      	orrs	r3, r2
 801d002:	9304      	str	r3, [sp, #16]
 801d004:	46a2      	mov	sl, r4
 801d006:	e7d2      	b.n	801cfae <_vfiprintf_r+0xc6>
 801d008:	9b03      	ldr	r3, [sp, #12]
 801d00a:	1d19      	adds	r1, r3, #4
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	9103      	str	r1, [sp, #12]
 801d010:	2b00      	cmp	r3, #0
 801d012:	bfbb      	ittet	lt
 801d014:	425b      	neglt	r3, r3
 801d016:	f042 0202 	orrlt.w	r2, r2, #2
 801d01a:	9307      	strge	r3, [sp, #28]
 801d01c:	9307      	strlt	r3, [sp, #28]
 801d01e:	bfb8      	it	lt
 801d020:	9204      	strlt	r2, [sp, #16]
 801d022:	7823      	ldrb	r3, [r4, #0]
 801d024:	2b2e      	cmp	r3, #46	@ 0x2e
 801d026:	d10a      	bne.n	801d03e <_vfiprintf_r+0x156>
 801d028:	7863      	ldrb	r3, [r4, #1]
 801d02a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d02c:	d132      	bne.n	801d094 <_vfiprintf_r+0x1ac>
 801d02e:	9b03      	ldr	r3, [sp, #12]
 801d030:	1d1a      	adds	r2, r3, #4
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	9203      	str	r2, [sp, #12]
 801d036:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d03a:	3402      	adds	r4, #2
 801d03c:	9305      	str	r3, [sp, #20]
 801d03e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d114 <_vfiprintf_r+0x22c>
 801d042:	7821      	ldrb	r1, [r4, #0]
 801d044:	2203      	movs	r2, #3
 801d046:	4650      	mov	r0, sl
 801d048:	f7e3 f8fa 	bl	8000240 <memchr>
 801d04c:	b138      	cbz	r0, 801d05e <_vfiprintf_r+0x176>
 801d04e:	9b04      	ldr	r3, [sp, #16]
 801d050:	eba0 000a 	sub.w	r0, r0, sl
 801d054:	2240      	movs	r2, #64	@ 0x40
 801d056:	4082      	lsls	r2, r0
 801d058:	4313      	orrs	r3, r2
 801d05a:	3401      	adds	r4, #1
 801d05c:	9304      	str	r3, [sp, #16]
 801d05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d062:	4829      	ldr	r0, [pc, #164]	@ (801d108 <_vfiprintf_r+0x220>)
 801d064:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d068:	2206      	movs	r2, #6
 801d06a:	f7e3 f8e9 	bl	8000240 <memchr>
 801d06e:	2800      	cmp	r0, #0
 801d070:	d03f      	beq.n	801d0f2 <_vfiprintf_r+0x20a>
 801d072:	4b26      	ldr	r3, [pc, #152]	@ (801d10c <_vfiprintf_r+0x224>)
 801d074:	bb1b      	cbnz	r3, 801d0be <_vfiprintf_r+0x1d6>
 801d076:	9b03      	ldr	r3, [sp, #12]
 801d078:	3307      	adds	r3, #7
 801d07a:	f023 0307 	bic.w	r3, r3, #7
 801d07e:	3308      	adds	r3, #8
 801d080:	9303      	str	r3, [sp, #12]
 801d082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d084:	443b      	add	r3, r7
 801d086:	9309      	str	r3, [sp, #36]	@ 0x24
 801d088:	e76a      	b.n	801cf60 <_vfiprintf_r+0x78>
 801d08a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d08e:	460c      	mov	r4, r1
 801d090:	2001      	movs	r0, #1
 801d092:	e7a8      	b.n	801cfe6 <_vfiprintf_r+0xfe>
 801d094:	2300      	movs	r3, #0
 801d096:	3401      	adds	r4, #1
 801d098:	9305      	str	r3, [sp, #20]
 801d09a:	4619      	mov	r1, r3
 801d09c:	f04f 0c0a 	mov.w	ip, #10
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0a6:	3a30      	subs	r2, #48	@ 0x30
 801d0a8:	2a09      	cmp	r2, #9
 801d0aa:	d903      	bls.n	801d0b4 <_vfiprintf_r+0x1cc>
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d0c6      	beq.n	801d03e <_vfiprintf_r+0x156>
 801d0b0:	9105      	str	r1, [sp, #20]
 801d0b2:	e7c4      	b.n	801d03e <_vfiprintf_r+0x156>
 801d0b4:	fb0c 2101 	mla	r1, ip, r1, r2
 801d0b8:	4604      	mov	r4, r0
 801d0ba:	2301      	movs	r3, #1
 801d0bc:	e7f0      	b.n	801d0a0 <_vfiprintf_r+0x1b8>
 801d0be:	ab03      	add	r3, sp, #12
 801d0c0:	9300      	str	r3, [sp, #0]
 801d0c2:	462a      	mov	r2, r5
 801d0c4:	4b12      	ldr	r3, [pc, #72]	@ (801d110 <_vfiprintf_r+0x228>)
 801d0c6:	a904      	add	r1, sp, #16
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	f3af 8000 	nop.w
 801d0ce:	4607      	mov	r7, r0
 801d0d0:	1c78      	adds	r0, r7, #1
 801d0d2:	d1d6      	bne.n	801d082 <_vfiprintf_r+0x19a>
 801d0d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d0d6:	07d9      	lsls	r1, r3, #31
 801d0d8:	d405      	bmi.n	801d0e6 <_vfiprintf_r+0x1fe>
 801d0da:	89ab      	ldrh	r3, [r5, #12]
 801d0dc:	059a      	lsls	r2, r3, #22
 801d0de:	d402      	bmi.n	801d0e6 <_vfiprintf_r+0x1fe>
 801d0e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d0e2:	f7ff fceb 	bl	801cabc <__retarget_lock_release_recursive>
 801d0e6:	89ab      	ldrh	r3, [r5, #12]
 801d0e8:	065b      	lsls	r3, r3, #25
 801d0ea:	f53f af1f 	bmi.w	801cf2c <_vfiprintf_r+0x44>
 801d0ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d0f0:	e71e      	b.n	801cf30 <_vfiprintf_r+0x48>
 801d0f2:	ab03      	add	r3, sp, #12
 801d0f4:	9300      	str	r3, [sp, #0]
 801d0f6:	462a      	mov	r2, r5
 801d0f8:	4b05      	ldr	r3, [pc, #20]	@ (801d110 <_vfiprintf_r+0x228>)
 801d0fa:	a904      	add	r1, sp, #16
 801d0fc:	4630      	mov	r0, r6
 801d0fe:	f000 f879 	bl	801d1f4 <_printf_i>
 801d102:	e7e4      	b.n	801d0ce <_vfiprintf_r+0x1e6>
 801d104:	0801ec9b 	.word	0x0801ec9b
 801d108:	0801eca5 	.word	0x0801eca5
 801d10c:	00000000 	.word	0x00000000
 801d110:	0801cec3 	.word	0x0801cec3
 801d114:	0801eca1 	.word	0x0801eca1

0801d118 <_printf_common>:
 801d118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d11c:	4616      	mov	r6, r2
 801d11e:	4698      	mov	r8, r3
 801d120:	688a      	ldr	r2, [r1, #8]
 801d122:	690b      	ldr	r3, [r1, #16]
 801d124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d128:	4293      	cmp	r3, r2
 801d12a:	bfb8      	it	lt
 801d12c:	4613      	movlt	r3, r2
 801d12e:	6033      	str	r3, [r6, #0]
 801d130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d134:	4607      	mov	r7, r0
 801d136:	460c      	mov	r4, r1
 801d138:	b10a      	cbz	r2, 801d13e <_printf_common+0x26>
 801d13a:	3301      	adds	r3, #1
 801d13c:	6033      	str	r3, [r6, #0]
 801d13e:	6823      	ldr	r3, [r4, #0]
 801d140:	0699      	lsls	r1, r3, #26
 801d142:	bf42      	ittt	mi
 801d144:	6833      	ldrmi	r3, [r6, #0]
 801d146:	3302      	addmi	r3, #2
 801d148:	6033      	strmi	r3, [r6, #0]
 801d14a:	6825      	ldr	r5, [r4, #0]
 801d14c:	f015 0506 	ands.w	r5, r5, #6
 801d150:	d106      	bne.n	801d160 <_printf_common+0x48>
 801d152:	f104 0a19 	add.w	sl, r4, #25
 801d156:	68e3      	ldr	r3, [r4, #12]
 801d158:	6832      	ldr	r2, [r6, #0]
 801d15a:	1a9b      	subs	r3, r3, r2
 801d15c:	42ab      	cmp	r3, r5
 801d15e:	dc26      	bgt.n	801d1ae <_printf_common+0x96>
 801d160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d164:	6822      	ldr	r2, [r4, #0]
 801d166:	3b00      	subs	r3, #0
 801d168:	bf18      	it	ne
 801d16a:	2301      	movne	r3, #1
 801d16c:	0692      	lsls	r2, r2, #26
 801d16e:	d42b      	bmi.n	801d1c8 <_printf_common+0xb0>
 801d170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d174:	4641      	mov	r1, r8
 801d176:	4638      	mov	r0, r7
 801d178:	47c8      	blx	r9
 801d17a:	3001      	adds	r0, #1
 801d17c:	d01e      	beq.n	801d1bc <_printf_common+0xa4>
 801d17e:	6823      	ldr	r3, [r4, #0]
 801d180:	6922      	ldr	r2, [r4, #16]
 801d182:	f003 0306 	and.w	r3, r3, #6
 801d186:	2b04      	cmp	r3, #4
 801d188:	bf02      	ittt	eq
 801d18a:	68e5      	ldreq	r5, [r4, #12]
 801d18c:	6833      	ldreq	r3, [r6, #0]
 801d18e:	1aed      	subeq	r5, r5, r3
 801d190:	68a3      	ldr	r3, [r4, #8]
 801d192:	bf0c      	ite	eq
 801d194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d198:	2500      	movne	r5, #0
 801d19a:	4293      	cmp	r3, r2
 801d19c:	bfc4      	itt	gt
 801d19e:	1a9b      	subgt	r3, r3, r2
 801d1a0:	18ed      	addgt	r5, r5, r3
 801d1a2:	2600      	movs	r6, #0
 801d1a4:	341a      	adds	r4, #26
 801d1a6:	42b5      	cmp	r5, r6
 801d1a8:	d11a      	bne.n	801d1e0 <_printf_common+0xc8>
 801d1aa:	2000      	movs	r0, #0
 801d1ac:	e008      	b.n	801d1c0 <_printf_common+0xa8>
 801d1ae:	2301      	movs	r3, #1
 801d1b0:	4652      	mov	r2, sl
 801d1b2:	4641      	mov	r1, r8
 801d1b4:	4638      	mov	r0, r7
 801d1b6:	47c8      	blx	r9
 801d1b8:	3001      	adds	r0, #1
 801d1ba:	d103      	bne.n	801d1c4 <_printf_common+0xac>
 801d1bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1c4:	3501      	adds	r5, #1
 801d1c6:	e7c6      	b.n	801d156 <_printf_common+0x3e>
 801d1c8:	18e1      	adds	r1, r4, r3
 801d1ca:	1c5a      	adds	r2, r3, #1
 801d1cc:	2030      	movs	r0, #48	@ 0x30
 801d1ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d1d2:	4422      	add	r2, r4
 801d1d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d1d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d1dc:	3302      	adds	r3, #2
 801d1de:	e7c7      	b.n	801d170 <_printf_common+0x58>
 801d1e0:	2301      	movs	r3, #1
 801d1e2:	4622      	mov	r2, r4
 801d1e4:	4641      	mov	r1, r8
 801d1e6:	4638      	mov	r0, r7
 801d1e8:	47c8      	blx	r9
 801d1ea:	3001      	adds	r0, #1
 801d1ec:	d0e6      	beq.n	801d1bc <_printf_common+0xa4>
 801d1ee:	3601      	adds	r6, #1
 801d1f0:	e7d9      	b.n	801d1a6 <_printf_common+0x8e>
	...

0801d1f4 <_printf_i>:
 801d1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d1f8:	7e0f      	ldrb	r7, [r1, #24]
 801d1fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d1fc:	2f78      	cmp	r7, #120	@ 0x78
 801d1fe:	4691      	mov	r9, r2
 801d200:	4680      	mov	r8, r0
 801d202:	460c      	mov	r4, r1
 801d204:	469a      	mov	sl, r3
 801d206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d20a:	d807      	bhi.n	801d21c <_printf_i+0x28>
 801d20c:	2f62      	cmp	r7, #98	@ 0x62
 801d20e:	d80a      	bhi.n	801d226 <_printf_i+0x32>
 801d210:	2f00      	cmp	r7, #0
 801d212:	f000 80d1 	beq.w	801d3b8 <_printf_i+0x1c4>
 801d216:	2f58      	cmp	r7, #88	@ 0x58
 801d218:	f000 80b8 	beq.w	801d38c <_printf_i+0x198>
 801d21c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d224:	e03a      	b.n	801d29c <_printf_i+0xa8>
 801d226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d22a:	2b15      	cmp	r3, #21
 801d22c:	d8f6      	bhi.n	801d21c <_printf_i+0x28>
 801d22e:	a101      	add	r1, pc, #4	@ (adr r1, 801d234 <_printf_i+0x40>)
 801d230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d234:	0801d28d 	.word	0x0801d28d
 801d238:	0801d2a1 	.word	0x0801d2a1
 801d23c:	0801d21d 	.word	0x0801d21d
 801d240:	0801d21d 	.word	0x0801d21d
 801d244:	0801d21d 	.word	0x0801d21d
 801d248:	0801d21d 	.word	0x0801d21d
 801d24c:	0801d2a1 	.word	0x0801d2a1
 801d250:	0801d21d 	.word	0x0801d21d
 801d254:	0801d21d 	.word	0x0801d21d
 801d258:	0801d21d 	.word	0x0801d21d
 801d25c:	0801d21d 	.word	0x0801d21d
 801d260:	0801d39f 	.word	0x0801d39f
 801d264:	0801d2cb 	.word	0x0801d2cb
 801d268:	0801d359 	.word	0x0801d359
 801d26c:	0801d21d 	.word	0x0801d21d
 801d270:	0801d21d 	.word	0x0801d21d
 801d274:	0801d3c1 	.word	0x0801d3c1
 801d278:	0801d21d 	.word	0x0801d21d
 801d27c:	0801d2cb 	.word	0x0801d2cb
 801d280:	0801d21d 	.word	0x0801d21d
 801d284:	0801d21d 	.word	0x0801d21d
 801d288:	0801d361 	.word	0x0801d361
 801d28c:	6833      	ldr	r3, [r6, #0]
 801d28e:	1d1a      	adds	r2, r3, #4
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	6032      	str	r2, [r6, #0]
 801d294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d29c:	2301      	movs	r3, #1
 801d29e:	e09c      	b.n	801d3da <_printf_i+0x1e6>
 801d2a0:	6833      	ldr	r3, [r6, #0]
 801d2a2:	6820      	ldr	r0, [r4, #0]
 801d2a4:	1d19      	adds	r1, r3, #4
 801d2a6:	6031      	str	r1, [r6, #0]
 801d2a8:	0606      	lsls	r6, r0, #24
 801d2aa:	d501      	bpl.n	801d2b0 <_printf_i+0xbc>
 801d2ac:	681d      	ldr	r5, [r3, #0]
 801d2ae:	e003      	b.n	801d2b8 <_printf_i+0xc4>
 801d2b0:	0645      	lsls	r5, r0, #25
 801d2b2:	d5fb      	bpl.n	801d2ac <_printf_i+0xb8>
 801d2b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d2b8:	2d00      	cmp	r5, #0
 801d2ba:	da03      	bge.n	801d2c4 <_printf_i+0xd0>
 801d2bc:	232d      	movs	r3, #45	@ 0x2d
 801d2be:	426d      	negs	r5, r5
 801d2c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d2c4:	4858      	ldr	r0, [pc, #352]	@ (801d428 <_printf_i+0x234>)
 801d2c6:	230a      	movs	r3, #10
 801d2c8:	e011      	b.n	801d2ee <_printf_i+0xfa>
 801d2ca:	6821      	ldr	r1, [r4, #0]
 801d2cc:	6833      	ldr	r3, [r6, #0]
 801d2ce:	0608      	lsls	r0, r1, #24
 801d2d0:	f853 5b04 	ldr.w	r5, [r3], #4
 801d2d4:	d402      	bmi.n	801d2dc <_printf_i+0xe8>
 801d2d6:	0649      	lsls	r1, r1, #25
 801d2d8:	bf48      	it	mi
 801d2da:	b2ad      	uxthmi	r5, r5
 801d2dc:	2f6f      	cmp	r7, #111	@ 0x6f
 801d2de:	4852      	ldr	r0, [pc, #328]	@ (801d428 <_printf_i+0x234>)
 801d2e0:	6033      	str	r3, [r6, #0]
 801d2e2:	bf14      	ite	ne
 801d2e4:	230a      	movne	r3, #10
 801d2e6:	2308      	moveq	r3, #8
 801d2e8:	2100      	movs	r1, #0
 801d2ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d2ee:	6866      	ldr	r6, [r4, #4]
 801d2f0:	60a6      	str	r6, [r4, #8]
 801d2f2:	2e00      	cmp	r6, #0
 801d2f4:	db05      	blt.n	801d302 <_printf_i+0x10e>
 801d2f6:	6821      	ldr	r1, [r4, #0]
 801d2f8:	432e      	orrs	r6, r5
 801d2fa:	f021 0104 	bic.w	r1, r1, #4
 801d2fe:	6021      	str	r1, [r4, #0]
 801d300:	d04b      	beq.n	801d39a <_printf_i+0x1a6>
 801d302:	4616      	mov	r6, r2
 801d304:	fbb5 f1f3 	udiv	r1, r5, r3
 801d308:	fb03 5711 	mls	r7, r3, r1, r5
 801d30c:	5dc7      	ldrb	r7, [r0, r7]
 801d30e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d312:	462f      	mov	r7, r5
 801d314:	42bb      	cmp	r3, r7
 801d316:	460d      	mov	r5, r1
 801d318:	d9f4      	bls.n	801d304 <_printf_i+0x110>
 801d31a:	2b08      	cmp	r3, #8
 801d31c:	d10b      	bne.n	801d336 <_printf_i+0x142>
 801d31e:	6823      	ldr	r3, [r4, #0]
 801d320:	07df      	lsls	r7, r3, #31
 801d322:	d508      	bpl.n	801d336 <_printf_i+0x142>
 801d324:	6923      	ldr	r3, [r4, #16]
 801d326:	6861      	ldr	r1, [r4, #4]
 801d328:	4299      	cmp	r1, r3
 801d32a:	bfde      	ittt	le
 801d32c:	2330      	movle	r3, #48	@ 0x30
 801d32e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d332:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d336:	1b92      	subs	r2, r2, r6
 801d338:	6122      	str	r2, [r4, #16]
 801d33a:	f8cd a000 	str.w	sl, [sp]
 801d33e:	464b      	mov	r3, r9
 801d340:	aa03      	add	r2, sp, #12
 801d342:	4621      	mov	r1, r4
 801d344:	4640      	mov	r0, r8
 801d346:	f7ff fee7 	bl	801d118 <_printf_common>
 801d34a:	3001      	adds	r0, #1
 801d34c:	d14a      	bne.n	801d3e4 <_printf_i+0x1f0>
 801d34e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d352:	b004      	add	sp, #16
 801d354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d358:	6823      	ldr	r3, [r4, #0]
 801d35a:	f043 0320 	orr.w	r3, r3, #32
 801d35e:	6023      	str	r3, [r4, #0]
 801d360:	4832      	ldr	r0, [pc, #200]	@ (801d42c <_printf_i+0x238>)
 801d362:	2778      	movs	r7, #120	@ 0x78
 801d364:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d368:	6823      	ldr	r3, [r4, #0]
 801d36a:	6831      	ldr	r1, [r6, #0]
 801d36c:	061f      	lsls	r7, r3, #24
 801d36e:	f851 5b04 	ldr.w	r5, [r1], #4
 801d372:	d402      	bmi.n	801d37a <_printf_i+0x186>
 801d374:	065f      	lsls	r7, r3, #25
 801d376:	bf48      	it	mi
 801d378:	b2ad      	uxthmi	r5, r5
 801d37a:	6031      	str	r1, [r6, #0]
 801d37c:	07d9      	lsls	r1, r3, #31
 801d37e:	bf44      	itt	mi
 801d380:	f043 0320 	orrmi.w	r3, r3, #32
 801d384:	6023      	strmi	r3, [r4, #0]
 801d386:	b11d      	cbz	r5, 801d390 <_printf_i+0x19c>
 801d388:	2310      	movs	r3, #16
 801d38a:	e7ad      	b.n	801d2e8 <_printf_i+0xf4>
 801d38c:	4826      	ldr	r0, [pc, #152]	@ (801d428 <_printf_i+0x234>)
 801d38e:	e7e9      	b.n	801d364 <_printf_i+0x170>
 801d390:	6823      	ldr	r3, [r4, #0]
 801d392:	f023 0320 	bic.w	r3, r3, #32
 801d396:	6023      	str	r3, [r4, #0]
 801d398:	e7f6      	b.n	801d388 <_printf_i+0x194>
 801d39a:	4616      	mov	r6, r2
 801d39c:	e7bd      	b.n	801d31a <_printf_i+0x126>
 801d39e:	6833      	ldr	r3, [r6, #0]
 801d3a0:	6825      	ldr	r5, [r4, #0]
 801d3a2:	6961      	ldr	r1, [r4, #20]
 801d3a4:	1d18      	adds	r0, r3, #4
 801d3a6:	6030      	str	r0, [r6, #0]
 801d3a8:	062e      	lsls	r6, r5, #24
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	d501      	bpl.n	801d3b2 <_printf_i+0x1be>
 801d3ae:	6019      	str	r1, [r3, #0]
 801d3b0:	e002      	b.n	801d3b8 <_printf_i+0x1c4>
 801d3b2:	0668      	lsls	r0, r5, #25
 801d3b4:	d5fb      	bpl.n	801d3ae <_printf_i+0x1ba>
 801d3b6:	8019      	strh	r1, [r3, #0]
 801d3b8:	2300      	movs	r3, #0
 801d3ba:	6123      	str	r3, [r4, #16]
 801d3bc:	4616      	mov	r6, r2
 801d3be:	e7bc      	b.n	801d33a <_printf_i+0x146>
 801d3c0:	6833      	ldr	r3, [r6, #0]
 801d3c2:	1d1a      	adds	r2, r3, #4
 801d3c4:	6032      	str	r2, [r6, #0]
 801d3c6:	681e      	ldr	r6, [r3, #0]
 801d3c8:	6862      	ldr	r2, [r4, #4]
 801d3ca:	2100      	movs	r1, #0
 801d3cc:	4630      	mov	r0, r6
 801d3ce:	f7e2 ff37 	bl	8000240 <memchr>
 801d3d2:	b108      	cbz	r0, 801d3d8 <_printf_i+0x1e4>
 801d3d4:	1b80      	subs	r0, r0, r6
 801d3d6:	6060      	str	r0, [r4, #4]
 801d3d8:	6863      	ldr	r3, [r4, #4]
 801d3da:	6123      	str	r3, [r4, #16]
 801d3dc:	2300      	movs	r3, #0
 801d3de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d3e2:	e7aa      	b.n	801d33a <_printf_i+0x146>
 801d3e4:	6923      	ldr	r3, [r4, #16]
 801d3e6:	4632      	mov	r2, r6
 801d3e8:	4649      	mov	r1, r9
 801d3ea:	4640      	mov	r0, r8
 801d3ec:	47d0      	blx	sl
 801d3ee:	3001      	adds	r0, #1
 801d3f0:	d0ad      	beq.n	801d34e <_printf_i+0x15a>
 801d3f2:	6823      	ldr	r3, [r4, #0]
 801d3f4:	079b      	lsls	r3, r3, #30
 801d3f6:	d413      	bmi.n	801d420 <_printf_i+0x22c>
 801d3f8:	68e0      	ldr	r0, [r4, #12]
 801d3fa:	9b03      	ldr	r3, [sp, #12]
 801d3fc:	4298      	cmp	r0, r3
 801d3fe:	bfb8      	it	lt
 801d400:	4618      	movlt	r0, r3
 801d402:	e7a6      	b.n	801d352 <_printf_i+0x15e>
 801d404:	2301      	movs	r3, #1
 801d406:	4632      	mov	r2, r6
 801d408:	4649      	mov	r1, r9
 801d40a:	4640      	mov	r0, r8
 801d40c:	47d0      	blx	sl
 801d40e:	3001      	adds	r0, #1
 801d410:	d09d      	beq.n	801d34e <_printf_i+0x15a>
 801d412:	3501      	adds	r5, #1
 801d414:	68e3      	ldr	r3, [r4, #12]
 801d416:	9903      	ldr	r1, [sp, #12]
 801d418:	1a5b      	subs	r3, r3, r1
 801d41a:	42ab      	cmp	r3, r5
 801d41c:	dcf2      	bgt.n	801d404 <_printf_i+0x210>
 801d41e:	e7eb      	b.n	801d3f8 <_printf_i+0x204>
 801d420:	2500      	movs	r5, #0
 801d422:	f104 0619 	add.w	r6, r4, #25
 801d426:	e7f5      	b.n	801d414 <_printf_i+0x220>
 801d428:	0801ecac 	.word	0x0801ecac
 801d42c:	0801ecbd 	.word	0x0801ecbd

0801d430 <__sflush_r>:
 801d430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d438:	0716      	lsls	r6, r2, #28
 801d43a:	4605      	mov	r5, r0
 801d43c:	460c      	mov	r4, r1
 801d43e:	d454      	bmi.n	801d4ea <__sflush_r+0xba>
 801d440:	684b      	ldr	r3, [r1, #4]
 801d442:	2b00      	cmp	r3, #0
 801d444:	dc02      	bgt.n	801d44c <__sflush_r+0x1c>
 801d446:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d448:	2b00      	cmp	r3, #0
 801d44a:	dd48      	ble.n	801d4de <__sflush_r+0xae>
 801d44c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d44e:	2e00      	cmp	r6, #0
 801d450:	d045      	beq.n	801d4de <__sflush_r+0xae>
 801d452:	2300      	movs	r3, #0
 801d454:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d458:	682f      	ldr	r7, [r5, #0]
 801d45a:	6a21      	ldr	r1, [r4, #32]
 801d45c:	602b      	str	r3, [r5, #0]
 801d45e:	d030      	beq.n	801d4c2 <__sflush_r+0x92>
 801d460:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d462:	89a3      	ldrh	r3, [r4, #12]
 801d464:	0759      	lsls	r1, r3, #29
 801d466:	d505      	bpl.n	801d474 <__sflush_r+0x44>
 801d468:	6863      	ldr	r3, [r4, #4]
 801d46a:	1ad2      	subs	r2, r2, r3
 801d46c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d46e:	b10b      	cbz	r3, 801d474 <__sflush_r+0x44>
 801d470:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d472:	1ad2      	subs	r2, r2, r3
 801d474:	2300      	movs	r3, #0
 801d476:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d478:	6a21      	ldr	r1, [r4, #32]
 801d47a:	4628      	mov	r0, r5
 801d47c:	47b0      	blx	r6
 801d47e:	1c43      	adds	r3, r0, #1
 801d480:	89a3      	ldrh	r3, [r4, #12]
 801d482:	d106      	bne.n	801d492 <__sflush_r+0x62>
 801d484:	6829      	ldr	r1, [r5, #0]
 801d486:	291d      	cmp	r1, #29
 801d488:	d82b      	bhi.n	801d4e2 <__sflush_r+0xb2>
 801d48a:	4a2a      	ldr	r2, [pc, #168]	@ (801d534 <__sflush_r+0x104>)
 801d48c:	40ca      	lsrs	r2, r1
 801d48e:	07d6      	lsls	r6, r2, #31
 801d490:	d527      	bpl.n	801d4e2 <__sflush_r+0xb2>
 801d492:	2200      	movs	r2, #0
 801d494:	6062      	str	r2, [r4, #4]
 801d496:	04d9      	lsls	r1, r3, #19
 801d498:	6922      	ldr	r2, [r4, #16]
 801d49a:	6022      	str	r2, [r4, #0]
 801d49c:	d504      	bpl.n	801d4a8 <__sflush_r+0x78>
 801d49e:	1c42      	adds	r2, r0, #1
 801d4a0:	d101      	bne.n	801d4a6 <__sflush_r+0x76>
 801d4a2:	682b      	ldr	r3, [r5, #0]
 801d4a4:	b903      	cbnz	r3, 801d4a8 <__sflush_r+0x78>
 801d4a6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d4a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d4aa:	602f      	str	r7, [r5, #0]
 801d4ac:	b1b9      	cbz	r1, 801d4de <__sflush_r+0xae>
 801d4ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d4b2:	4299      	cmp	r1, r3
 801d4b4:	d002      	beq.n	801d4bc <__sflush_r+0x8c>
 801d4b6:	4628      	mov	r0, r5
 801d4b8:	f7ff fb42 	bl	801cb40 <_free_r>
 801d4bc:	2300      	movs	r3, #0
 801d4be:	6363      	str	r3, [r4, #52]	@ 0x34
 801d4c0:	e00d      	b.n	801d4de <__sflush_r+0xae>
 801d4c2:	2301      	movs	r3, #1
 801d4c4:	4628      	mov	r0, r5
 801d4c6:	47b0      	blx	r6
 801d4c8:	4602      	mov	r2, r0
 801d4ca:	1c50      	adds	r0, r2, #1
 801d4cc:	d1c9      	bne.n	801d462 <__sflush_r+0x32>
 801d4ce:	682b      	ldr	r3, [r5, #0]
 801d4d0:	2b00      	cmp	r3, #0
 801d4d2:	d0c6      	beq.n	801d462 <__sflush_r+0x32>
 801d4d4:	2b1d      	cmp	r3, #29
 801d4d6:	d001      	beq.n	801d4dc <__sflush_r+0xac>
 801d4d8:	2b16      	cmp	r3, #22
 801d4da:	d11e      	bne.n	801d51a <__sflush_r+0xea>
 801d4dc:	602f      	str	r7, [r5, #0]
 801d4de:	2000      	movs	r0, #0
 801d4e0:	e022      	b.n	801d528 <__sflush_r+0xf8>
 801d4e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4e6:	b21b      	sxth	r3, r3
 801d4e8:	e01b      	b.n	801d522 <__sflush_r+0xf2>
 801d4ea:	690f      	ldr	r7, [r1, #16]
 801d4ec:	2f00      	cmp	r7, #0
 801d4ee:	d0f6      	beq.n	801d4de <__sflush_r+0xae>
 801d4f0:	0793      	lsls	r3, r2, #30
 801d4f2:	680e      	ldr	r6, [r1, #0]
 801d4f4:	bf08      	it	eq
 801d4f6:	694b      	ldreq	r3, [r1, #20]
 801d4f8:	600f      	str	r7, [r1, #0]
 801d4fa:	bf18      	it	ne
 801d4fc:	2300      	movne	r3, #0
 801d4fe:	eba6 0807 	sub.w	r8, r6, r7
 801d502:	608b      	str	r3, [r1, #8]
 801d504:	f1b8 0f00 	cmp.w	r8, #0
 801d508:	dde9      	ble.n	801d4de <__sflush_r+0xae>
 801d50a:	6a21      	ldr	r1, [r4, #32]
 801d50c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d50e:	4643      	mov	r3, r8
 801d510:	463a      	mov	r2, r7
 801d512:	4628      	mov	r0, r5
 801d514:	47b0      	blx	r6
 801d516:	2800      	cmp	r0, #0
 801d518:	dc08      	bgt.n	801d52c <__sflush_r+0xfc>
 801d51a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d522:	81a3      	strh	r3, [r4, #12]
 801d524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d52c:	4407      	add	r7, r0
 801d52e:	eba8 0800 	sub.w	r8, r8, r0
 801d532:	e7e7      	b.n	801d504 <__sflush_r+0xd4>
 801d534:	20400001 	.word	0x20400001

0801d538 <_fflush_r>:
 801d538:	b538      	push	{r3, r4, r5, lr}
 801d53a:	690b      	ldr	r3, [r1, #16]
 801d53c:	4605      	mov	r5, r0
 801d53e:	460c      	mov	r4, r1
 801d540:	b913      	cbnz	r3, 801d548 <_fflush_r+0x10>
 801d542:	2500      	movs	r5, #0
 801d544:	4628      	mov	r0, r5
 801d546:	bd38      	pop	{r3, r4, r5, pc}
 801d548:	b118      	cbz	r0, 801d552 <_fflush_r+0x1a>
 801d54a:	6a03      	ldr	r3, [r0, #32]
 801d54c:	b90b      	cbnz	r3, 801d552 <_fflush_r+0x1a>
 801d54e:	f7fe ffdf 	bl	801c510 <__sinit>
 801d552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d0f3      	beq.n	801d542 <_fflush_r+0xa>
 801d55a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d55c:	07d0      	lsls	r0, r2, #31
 801d55e:	d404      	bmi.n	801d56a <_fflush_r+0x32>
 801d560:	0599      	lsls	r1, r3, #22
 801d562:	d402      	bmi.n	801d56a <_fflush_r+0x32>
 801d564:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d566:	f7ff faa8 	bl	801caba <__retarget_lock_acquire_recursive>
 801d56a:	4628      	mov	r0, r5
 801d56c:	4621      	mov	r1, r4
 801d56e:	f7ff ff5f 	bl	801d430 <__sflush_r>
 801d572:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d574:	07da      	lsls	r2, r3, #31
 801d576:	4605      	mov	r5, r0
 801d578:	d4e4      	bmi.n	801d544 <_fflush_r+0xc>
 801d57a:	89a3      	ldrh	r3, [r4, #12]
 801d57c:	059b      	lsls	r3, r3, #22
 801d57e:	d4e1      	bmi.n	801d544 <_fflush_r+0xc>
 801d580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d582:	f7ff fa9b 	bl	801cabc <__retarget_lock_release_recursive>
 801d586:	e7dd      	b.n	801d544 <_fflush_r+0xc>

0801d588 <fiprintf>:
 801d588:	b40e      	push	{r1, r2, r3}
 801d58a:	b503      	push	{r0, r1, lr}
 801d58c:	4601      	mov	r1, r0
 801d58e:	ab03      	add	r3, sp, #12
 801d590:	4805      	ldr	r0, [pc, #20]	@ (801d5a8 <fiprintf+0x20>)
 801d592:	f853 2b04 	ldr.w	r2, [r3], #4
 801d596:	6800      	ldr	r0, [r0, #0]
 801d598:	9301      	str	r3, [sp, #4]
 801d59a:	f7ff fca5 	bl	801cee8 <_vfiprintf_r>
 801d59e:	b002      	add	sp, #8
 801d5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d5a4:	b003      	add	sp, #12
 801d5a6:	4770      	bx	lr
 801d5a8:	2000090c 	.word	0x2000090c

0801d5ac <__swhatbuf_r>:
 801d5ac:	b570      	push	{r4, r5, r6, lr}
 801d5ae:	460c      	mov	r4, r1
 801d5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5b4:	2900      	cmp	r1, #0
 801d5b6:	b096      	sub	sp, #88	@ 0x58
 801d5b8:	4615      	mov	r5, r2
 801d5ba:	461e      	mov	r6, r3
 801d5bc:	da0d      	bge.n	801d5da <__swhatbuf_r+0x2e>
 801d5be:	89a3      	ldrh	r3, [r4, #12]
 801d5c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d5c4:	f04f 0100 	mov.w	r1, #0
 801d5c8:	bf14      	ite	ne
 801d5ca:	2340      	movne	r3, #64	@ 0x40
 801d5cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d5d0:	2000      	movs	r0, #0
 801d5d2:	6031      	str	r1, [r6, #0]
 801d5d4:	602b      	str	r3, [r5, #0]
 801d5d6:	b016      	add	sp, #88	@ 0x58
 801d5d8:	bd70      	pop	{r4, r5, r6, pc}
 801d5da:	466a      	mov	r2, sp
 801d5dc:	f000 f848 	bl	801d670 <_fstat_r>
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	dbec      	blt.n	801d5be <__swhatbuf_r+0x12>
 801d5e4:	9901      	ldr	r1, [sp, #4]
 801d5e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d5ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d5ee:	4259      	negs	r1, r3
 801d5f0:	4159      	adcs	r1, r3
 801d5f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d5f6:	e7eb      	b.n	801d5d0 <__swhatbuf_r+0x24>

0801d5f8 <__smakebuf_r>:
 801d5f8:	898b      	ldrh	r3, [r1, #12]
 801d5fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d5fc:	079d      	lsls	r5, r3, #30
 801d5fe:	4606      	mov	r6, r0
 801d600:	460c      	mov	r4, r1
 801d602:	d507      	bpl.n	801d614 <__smakebuf_r+0x1c>
 801d604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d608:	6023      	str	r3, [r4, #0]
 801d60a:	6123      	str	r3, [r4, #16]
 801d60c:	2301      	movs	r3, #1
 801d60e:	6163      	str	r3, [r4, #20]
 801d610:	b003      	add	sp, #12
 801d612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d614:	ab01      	add	r3, sp, #4
 801d616:	466a      	mov	r2, sp
 801d618:	f7ff ffc8 	bl	801d5ac <__swhatbuf_r>
 801d61c:	9f00      	ldr	r7, [sp, #0]
 801d61e:	4605      	mov	r5, r0
 801d620:	4639      	mov	r1, r7
 801d622:	4630      	mov	r0, r6
 801d624:	f7fe fd42 	bl	801c0ac <_malloc_r>
 801d628:	b948      	cbnz	r0, 801d63e <__smakebuf_r+0x46>
 801d62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d62e:	059a      	lsls	r2, r3, #22
 801d630:	d4ee      	bmi.n	801d610 <__smakebuf_r+0x18>
 801d632:	f023 0303 	bic.w	r3, r3, #3
 801d636:	f043 0302 	orr.w	r3, r3, #2
 801d63a:	81a3      	strh	r3, [r4, #12]
 801d63c:	e7e2      	b.n	801d604 <__smakebuf_r+0xc>
 801d63e:	89a3      	ldrh	r3, [r4, #12]
 801d640:	6020      	str	r0, [r4, #0]
 801d642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d646:	81a3      	strh	r3, [r4, #12]
 801d648:	9b01      	ldr	r3, [sp, #4]
 801d64a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d64e:	b15b      	cbz	r3, 801d668 <__smakebuf_r+0x70>
 801d650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d654:	4630      	mov	r0, r6
 801d656:	f000 f81d 	bl	801d694 <_isatty_r>
 801d65a:	b128      	cbz	r0, 801d668 <__smakebuf_r+0x70>
 801d65c:	89a3      	ldrh	r3, [r4, #12]
 801d65e:	f023 0303 	bic.w	r3, r3, #3
 801d662:	f043 0301 	orr.w	r3, r3, #1
 801d666:	81a3      	strh	r3, [r4, #12]
 801d668:	89a3      	ldrh	r3, [r4, #12]
 801d66a:	431d      	orrs	r5, r3
 801d66c:	81a5      	strh	r5, [r4, #12]
 801d66e:	e7cf      	b.n	801d610 <__smakebuf_r+0x18>

0801d670 <_fstat_r>:
 801d670:	b538      	push	{r3, r4, r5, lr}
 801d672:	4d07      	ldr	r5, [pc, #28]	@ (801d690 <_fstat_r+0x20>)
 801d674:	2300      	movs	r3, #0
 801d676:	4604      	mov	r4, r0
 801d678:	4608      	mov	r0, r1
 801d67a:	4611      	mov	r1, r2
 801d67c:	602b      	str	r3, [r5, #0]
 801d67e:	f7e6 fd3b 	bl	80040f8 <_fstat>
 801d682:	1c43      	adds	r3, r0, #1
 801d684:	d102      	bne.n	801d68c <_fstat_r+0x1c>
 801d686:	682b      	ldr	r3, [r5, #0]
 801d688:	b103      	cbz	r3, 801d68c <_fstat_r+0x1c>
 801d68a:	6023      	str	r3, [r4, #0]
 801d68c:	bd38      	pop	{r3, r4, r5, pc}
 801d68e:	bf00      	nop
 801d690:	20011d30 	.word	0x20011d30

0801d694 <_isatty_r>:
 801d694:	b538      	push	{r3, r4, r5, lr}
 801d696:	4d06      	ldr	r5, [pc, #24]	@ (801d6b0 <_isatty_r+0x1c>)
 801d698:	2300      	movs	r3, #0
 801d69a:	4604      	mov	r4, r0
 801d69c:	4608      	mov	r0, r1
 801d69e:	602b      	str	r3, [r5, #0]
 801d6a0:	f7e6 fd3a 	bl	8004118 <_isatty>
 801d6a4:	1c43      	adds	r3, r0, #1
 801d6a6:	d102      	bne.n	801d6ae <_isatty_r+0x1a>
 801d6a8:	682b      	ldr	r3, [r5, #0]
 801d6aa:	b103      	cbz	r3, 801d6ae <_isatty_r+0x1a>
 801d6ac:	6023      	str	r3, [r4, #0]
 801d6ae:	bd38      	pop	{r3, r4, r5, pc}
 801d6b0:	20011d30 	.word	0x20011d30

0801d6b4 <abort>:
 801d6b4:	b508      	push	{r3, lr}
 801d6b6:	2006      	movs	r0, #6
 801d6b8:	f000 f82c 	bl	801d714 <raise>
 801d6bc:	2001      	movs	r0, #1
 801d6be:	f7e6 fccb 	bl	8004058 <_exit>

0801d6c2 <_raise_r>:
 801d6c2:	291f      	cmp	r1, #31
 801d6c4:	b538      	push	{r3, r4, r5, lr}
 801d6c6:	4605      	mov	r5, r0
 801d6c8:	460c      	mov	r4, r1
 801d6ca:	d904      	bls.n	801d6d6 <_raise_r+0x14>
 801d6cc:	2316      	movs	r3, #22
 801d6ce:	6003      	str	r3, [r0, #0]
 801d6d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d6d4:	bd38      	pop	{r3, r4, r5, pc}
 801d6d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d6d8:	b112      	cbz	r2, 801d6e0 <_raise_r+0x1e>
 801d6da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d6de:	b94b      	cbnz	r3, 801d6f4 <_raise_r+0x32>
 801d6e0:	4628      	mov	r0, r5
 801d6e2:	f000 f831 	bl	801d748 <_getpid_r>
 801d6e6:	4622      	mov	r2, r4
 801d6e8:	4601      	mov	r1, r0
 801d6ea:	4628      	mov	r0, r5
 801d6ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6f0:	f000 b818 	b.w	801d724 <_kill_r>
 801d6f4:	2b01      	cmp	r3, #1
 801d6f6:	d00a      	beq.n	801d70e <_raise_r+0x4c>
 801d6f8:	1c59      	adds	r1, r3, #1
 801d6fa:	d103      	bne.n	801d704 <_raise_r+0x42>
 801d6fc:	2316      	movs	r3, #22
 801d6fe:	6003      	str	r3, [r0, #0]
 801d700:	2001      	movs	r0, #1
 801d702:	e7e7      	b.n	801d6d4 <_raise_r+0x12>
 801d704:	2100      	movs	r1, #0
 801d706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d70a:	4620      	mov	r0, r4
 801d70c:	4798      	blx	r3
 801d70e:	2000      	movs	r0, #0
 801d710:	e7e0      	b.n	801d6d4 <_raise_r+0x12>
	...

0801d714 <raise>:
 801d714:	4b02      	ldr	r3, [pc, #8]	@ (801d720 <raise+0xc>)
 801d716:	4601      	mov	r1, r0
 801d718:	6818      	ldr	r0, [r3, #0]
 801d71a:	f7ff bfd2 	b.w	801d6c2 <_raise_r>
 801d71e:	bf00      	nop
 801d720:	2000090c 	.word	0x2000090c

0801d724 <_kill_r>:
 801d724:	b538      	push	{r3, r4, r5, lr}
 801d726:	4d07      	ldr	r5, [pc, #28]	@ (801d744 <_kill_r+0x20>)
 801d728:	2300      	movs	r3, #0
 801d72a:	4604      	mov	r4, r0
 801d72c:	4608      	mov	r0, r1
 801d72e:	4611      	mov	r1, r2
 801d730:	602b      	str	r3, [r5, #0]
 801d732:	f7e6 fc81 	bl	8004038 <_kill>
 801d736:	1c43      	adds	r3, r0, #1
 801d738:	d102      	bne.n	801d740 <_kill_r+0x1c>
 801d73a:	682b      	ldr	r3, [r5, #0]
 801d73c:	b103      	cbz	r3, 801d740 <_kill_r+0x1c>
 801d73e:	6023      	str	r3, [r4, #0]
 801d740:	bd38      	pop	{r3, r4, r5, pc}
 801d742:	bf00      	nop
 801d744:	20011d30 	.word	0x20011d30

0801d748 <_getpid_r>:
 801d748:	f7e6 bc6e 	b.w	8004028 <_getpid>

0801d74c <_init>:
 801d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d74e:	bf00      	nop
 801d750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d752:	bc08      	pop	{r3}
 801d754:	469e      	mov	lr, r3
 801d756:	4770      	bx	lr

0801d758 <_fini>:
 801d758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d75a:	bf00      	nop
 801d75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d75e:	bc08      	pop	{r3}
 801d760:	469e      	mov	lr, r3
 801d762:	4770      	bx	lr
