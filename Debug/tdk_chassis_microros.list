
tdk_chassis_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d15c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001668  0801d330  0801d330  0001e330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e998  0801e998  0002095c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e998  0801e998  0001f998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e9a0  0801e9a0  0002095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0801e9a0  0801e9a0  0001f9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e9bc  0801e9bc  0001f9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000095c  20000000  0801e9c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011388  20000960  0801f31c  00020960  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011ce8  0801f31c  00020ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002095c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8b4  00000000  00000000  0002098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005eec  00000000  00000000  0004f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc8  00000000  00000000  00055130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170f  00000000  00000000  00056ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f076  00000000  00000000  00058607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a2c4  00000000  00000000  0008767d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbfb7  00000000  00000000  000b1941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001ad8f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d40  00000000  00000000  001ad970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001b66b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000960 	.word	0x20000960
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d314 	.word	0x0801d314

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000964 	.word	0x20000964
 800020c:	0801d314 	.word	0x0801d314

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN11PinpointI2CC1EP17I2C_HandleTypeDefhm>:
PinpointI2C pinpoint(&hi2c1);
PinpointI2C::BulkData bd;
bool initi_yet = 0;

// ---- 建構 ----
PinpointI2C::PinpointI2C(I2C_HandleTypeDef* hi2c, uint8_t addr7bit, uint32_t timeoutMs)
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71fb      	strb	r3, [r7, #7]
: hi2c_(hi2c),
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	601a      	str	r2, [r3, #0]
  devAddr_(static_cast<uint16_t>(addr7bit) << 1), // HAL 多數範例使用 8-bit 位址（左移 1）
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	809a      	strh	r2, [r3, #4]
  timeoutMs_(timeoutMs)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2205      	movs	r2, #5
 8000f14:	731a      	strb	r2, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	735a      	strb	r2, [r3, #13]
{}
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <_ZN11PinpointI2C13Pinpoint_InitEv>:

void PinpointI2C::Pinpoint_Init()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	initi_yet = 1;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <_ZN11PinpointI2C13Pinpoint_InitEv+0x44>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
    // 1) 連線檢測
    if (!ping()) {
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f867 	bl	800100e <_ZN11PinpointI2C4pingEv>
        // TODO: 報警或重試
    }
    // 2) 一次性配置（每次上電後都要重新送配置；手冊明確說明）
    setTicksPerMM(19.894f);       // 依你的 pod 實際數值
 8000f40:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000f74 <_ZN11PinpointI2C13Pinpoint_InitEv+0x48>
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f990 	bl	800126a <_ZN11PinpointI2C13setTicksPerMMEf>
    setOffsets(75.0f, -65.0f);  // 依你的機構量測
 8000f4a:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000f78 <_ZN11PinpointI2C13Pinpoint_InitEv+0x4c>
 8000f4e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000f7c <_ZN11PinpointI2C13Pinpoint_InitEv+0x50>
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f99a 	bl	800128c <_ZN11PinpointI2C10setOffsetsEff>
    // pinpoint.setYawScalar(1.0f);        // 通常不建議改動
    // 3) 方向確認（前+X、左+Y）
    setEncoderDirections(PinpointI2C::EncDir::Forward,
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f9ca 	bl	80012f6 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_>
                                  PinpointI2C::EncDir::Forward);
    // 4) 開賽或程式啟動時：確保靜止後歸零+IMU校正（~0.25s）
    resetPosAndIMU();
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f9b7 	bl	80012d6 <_ZN11PinpointI2C14resetPosAndIMUEv>

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200009b8 	.word	0x200009b8
 8000f74:	419f26e9 	.word	0x419f26e9
 8000f78:	c2820000 	.word	0xc2820000
 8000f7c:	42960000 	.word	0x42960000

08000f80 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv>:
void PinpointI2C::Pinpoint_TaskLoop()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    // a) 用 Bulk 取資料（最省 I²C 次數）
		if (readBulk(bd)) {
 8000f88:	4913      	ldr	r1, [pc, #76]	@ (8000fd8 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x58>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f926 	bl	80011dc <_ZN11PinpointI2C8readBulkERNS_8BulkDataE>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x1e>
			i2c_connected = 1;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x5c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
			}else{
	        	//i2c_connected = 1;

			}
		}
}
 8000f9c:	e018      	b.n	8000fd0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x50>
			if (!isConnected()) {
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f822 	bl	8000fe8 <_ZNK11PinpointI2C11isConnectedEv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00f      	beq.n	8000fd0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x50>
	        	i2c_connected = 0;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
				HAL_I2C_DeInit(&hi2c1);
 8000fb6:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x60>)
 8000fb8:	f004 fca8 	bl	800590c <HAL_I2C_DeInit>
				HAL_I2C_Init (&hi2c1);
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x60>)
 8000fbe:	f004 fb61 	bl	8005684 <HAL_I2C_Init>
				i2c_reconnect = ping();
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f823 	bl	800100e <_ZN11PinpointI2C4pingEv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x64>)
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000990 	.word	0x20000990
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20005428 	.word	0x20005428
 8000fe4:	2000097c 	.word	0x2000097c

08000fe8 <_ZNK11PinpointI2C11isConnectedEv>:
// ---- 連線檢測 ----
void PinpointI2C::setMaxConsecutiveErrors(uint8_t n) { maxConsecutiveErrors_ = n ? n : 1; }
uint8_t PinpointI2C::consecutiveErrors() const { return consecutiveErrors_; }

bool PinpointI2C::isConnected() const {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    return consecutiveErrors_ < maxConsecutiveErrors_;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7b5a      	ldrb	r2, [r3, #13]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7b1b      	ldrb	r3, [r3, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	bf34      	ite	cc
 8000ffc:	2301      	movcc	r3, #1
 8000ffe:	2300      	movcs	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_ZN11PinpointI2C4pingEv>:

bool PinpointI2C::ping() {
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
    uint32_t id = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
    if (!readDeviceID(id)) return false;
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f8cc 	bl	80011be <_ZN11PinpointI2C12readDeviceIDERm>
 8001026:	4603      	mov	r3, r0
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <_ZN11PinpointI2C4pingEv+0x28>
 8001032:	2300      	movs	r3, #0
 8001034:	e005      	b.n	8001042 <_ZN11PinpointI2C4pingEv+0x34>
    return (id == 2u); // 手冊：Device ID 應為 2
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b02      	cmp	r3, #2
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZN11PinpointI2C7regReadEhPvt>:

// ---- 公用讀寫 ----
bool PinpointI2C::regRead(uint8_t reg, void* buf, uint16_t len) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b088      	sub	sp, #32
 800104e:	af04      	add	r7, sp, #16
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	461a      	mov	r2, r3
 8001056:	460b      	mov	r3, r1
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	4613      	mov	r3, r2
 800105c:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8899      	ldrh	r1, [r3, #4]
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	f004 fd71 	bl	8005b60 <HAL_I2C_Mem_Read>
 800107e:	4603      	mov	r3, r0
                         static_cast<uint8_t*>(buf), len, timeoutMs_) == HAL_OK) {
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
    if (HAL_I2C_Mem_Read(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <_ZN11PinpointI2C7regReadEhPvt+0x4e>
        onOk();
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f870 	bl	8001174 <_ZN11PinpointI2C4onOkEv>
        return true;
 8001094:	2301      	movs	r3, #1
 8001096:	e003      	b.n	80010a0 <_ZN11PinpointI2C7regReadEhPvt+0x56>
    }
    onErr();
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f87c 	bl	8001196 <_ZN11PinpointI2C5onErrEv>
    return false;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN11PinpointI2C8regWriteEhPKvt>:

bool PinpointI2C::regWrite(uint8_t reg, const void* buf, uint16_t len) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	461a      	mov	r2, r3
 80010b4:	460b      	mov	r3, r1
 80010b6:	72fb      	strb	r3, [r7, #11]
 80010b8:	4613      	mov	r3, r2
 80010ba:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Write(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8899      	ldrh	r1, [r3, #4]
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	893b      	ldrh	r3, [r7, #8]
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	f004 fc48 	bl	800596c <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
                          const_cast<uint8_t*>(static_cast<const uint8_t*>(buf)), len, timeoutMs_) == HAL_OK) {
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
    if (HAL_I2C_Mem_Write(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <_ZN11PinpointI2C8regWriteEhPKvt+0x4e>
        onOk();
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f841 	bl	8001174 <_ZN11PinpointI2C4onOkEv>
        return true;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e003      	b.n	80010fe <_ZN11PinpointI2C8regWriteEhPKvt+0x56>
    }
    onErr();
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 f84d 	bl	8001196 <_ZN11PinpointI2C5onErrEv>
    return false;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN11PinpointI2C8writeU32Ehm>:

bool PinpointI2C::writeU32(uint8_t reg, uint32_t v) { return regWrite(reg, &v, sizeof(v)); }
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	460b      	mov	r3, r1
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	72fb      	strb	r3, [r7, #11]
 8001114:	1d3a      	adds	r2, r7, #4
 8001116:	7af9      	ldrb	r1, [r7, #11]
 8001118:	2304      	movs	r3, #4
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff ffc4 	bl	80010a8 <_ZN11PinpointI2C8regWriteEhPKvt>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN11PinpointI2C7readU32EhRm>:
bool PinpointI2C::readU32(uint8_t reg, uint32_t& v) { return regRead(reg, &v, sizeof(v)); }
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	460b      	mov	r3, r1
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	72fb      	strb	r3, [r7, #11]
 8001138:	7af9      	ldrb	r1, [r7, #11]
 800113a:	2304      	movs	r3, #4
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ff83 	bl	800104a <_ZN11PinpointI2C7regReadEhPvt>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZN11PinpointI2C8writeF32Ehf>:
bool PinpointI2C::writeF32(uint8_t reg, float v)    { return regWrite(reg, &v, sizeof(v)); }
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	460b      	mov	r3, r1
 8001158:	ed87 0a01 	vstr	s0, [r7, #4]
 800115c:	72fb      	strb	r3, [r7, #11]
 800115e:	1d3a      	adds	r2, r7, #4
 8001160:	7af9      	ldrb	r1, [r7, #11]
 8001162:	2304      	movs	r3, #4
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff ff9f 	bl	80010a8 <_ZN11PinpointI2C8regWriteEhPKvt>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZN11PinpointI2C4onOkEv>:
bool PinpointI2C::readF32(uint8_t reg, float& v)    { return regRead(reg, &v, sizeof(v)); }

void PinpointI2C::onOk()  { if (consecutiveErrors_ > 0) consecutiveErrors_ = 0; }
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7b5b      	ldrb	r3, [r3, #13]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <_ZN11PinpointI2C4onOkEv+0x16>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	735a      	strb	r2, [r3, #13]
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN11PinpointI2C5onErrEv>:
void PinpointI2C::onErr() { if (consecutiveErrors_ < 0xFF) ++consecutiveErrors_; }
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b5b      	ldrb	r3, [r3, #13]
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d005      	beq.n	80011b2 <_ZN11PinpointI2C5onErrEv+0x1c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7b5b      	ldrb	r3, [r3, #13]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	735a      	strb	r2, [r3, #13]
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_ZN11PinpointI2C12readDeviceIDERm>:

// ---- 基礎暫存器 ----
bool PinpointI2C::readDeviceID(uint32_t& id)      { return readU32(REG_DEVICE_ID, id); }
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	2101      	movs	r1, #1
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffac 	bl	800112a <_ZN11PinpointI2C7readU32EhRm>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN11PinpointI2C8readBulkERNS_8BulkDataE>:
    bool okY = readU32(REG_ENC_Y, encY);
    return okX && okY;
}

// ---- Bulk Read ----
bool PinpointI2C::readBulk(BulkData& out) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    // 手冊：Bulk Read 總長 40 bytes，內容順序對應文件（此處採用常見版本的排列）
    uint8_t buf[40] = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f01b f988 	bl	801c504 <memset>
    if (!regRead(REG_BULK, buf, sizeof(buf))) return false;
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2328      	movs	r3, #40	@ 0x28
 80011fa:	2112      	movs	r1, #18
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff24 	bl	800104a <_ZN11PinpointI2C7regReadEhPvt>
 8001202:	4603      	mov	r3, r0
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <_ZN11PinpointI2C8readBulkERNS_8BulkDataE+0x36>
 800120e:	2300      	movs	r3, #0
 8001210:	e027      	b.n	8001262 <_ZN11PinpointI2C8readBulkERNS_8BulkDataE+0x86>

    // 解析：依序 4-byte 對齊（uint32/float）
    std::memcpy(&out.device_status, &buf[0], 4);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.loop_time_us,  &buf[4], 4);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3304      	adds	r3, #4
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.enc_x_raw,     &buf[8], 4);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3308      	adds	r3, #8
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.enc_y_raw,     &buf[12],4);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	330c      	adds	r3, #12
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.pos_x_mm,      &buf[16],4);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3310      	adds	r3, #16
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.pos_y_mm,      &buf[20],4);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3314      	adds	r3, #20
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.heading_rad,   &buf[24],4);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3318      	adds	r3, #24
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_x_mm_s,    &buf[28],4);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	331c      	adds	r3, #28
 800124c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_y_mm_s,    &buf[32],4);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3320      	adds	r3, #32
 8001254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001256:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_h_rad_s,   &buf[36],4);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3324      	adds	r3, #36	@ 0x24
 800125c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800125e:	601a      	str	r2, [r3, #0]
    return true;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	3730      	adds	r7, #48	@ 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZN11PinpointI2C13setTicksPerMMEf>:
           readF32(REG_VEL_Y, v.vy_mm_s) &&
           readF32(REG_VEL_H, v.w_rad_s);
}

// ---- 設定 ----
bool PinpointI2C::setTicksPerMM(float tpm) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	ed87 0a00 	vstr	s0, [r7]
    return writeF32(REG_TICKS_PER_MM, tpm);
 8001276:	ed97 0a00 	vldr	s0, [r7]
 800127a:	210e      	movs	r1, #14
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff66 	bl	800114e <_ZN11PinpointI2C8writeF32Ehf>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN11PinpointI2C10setOffsetsEff>:

bool PinpointI2C::setOffsets(float x_offset_mm, float y_offset_mm) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	ed87 0a02 	vstr	s0, [r7, #8]
 8001298:	edc7 0a01 	vstr	s1, [r7, #4]
    bool ok1 = writeF32(REG_X_OFFSET, x_offset_mm);
 800129c:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a0:	210f      	movs	r1, #15
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff ff53 	bl	800114e <_ZN11PinpointI2C8writeF32Ehf>
 80012a8:	4603      	mov	r3, r0
 80012aa:	75fb      	strb	r3, [r7, #23]
    bool ok2 = writeF32(REG_Y_OFFSET, y_offset_mm);
 80012ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80012b0:	2110      	movs	r1, #16
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff4b 	bl	800114e <_ZN11PinpointI2C8writeF32Ehf>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75bb      	strb	r3, [r7, #22]
    return ok1 && ok2;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <_ZN11PinpointI2C10setOffsetsEff+0x40>
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <_ZN11PinpointI2C10setOffsetsEff+0x40>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <_ZN11PinpointI2C10setOffsetsEff+0x42>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN11PinpointI2C14resetPosAndIMUEv>:
bool PinpointI2C::resetIMU() {
    uint32_t cmd = CTRL_RESET_IMU;
    return writeU32(REG_DEVICE_CTRL, cmd);
}

bool PinpointI2C::resetPosAndIMU() {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
    uint32_t cmd = CTRL_RESET_POS_AND_IMU;
 80012de:	2302      	movs	r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
    return writeU32(REG_DEVICE_CTRL, cmd);
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	2104      	movs	r1, #4
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff0d 	bl	8001106 <_ZN11PinpointI2C8writeU32Ehm>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_>:

bool PinpointI2C::setEncoderDirections(EncDir x, EncDir y) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
 8001302:	4613      	mov	r3, r2
 8001304:	70bb      	strb	r3, [r7, #2]
    uint32_t cmd = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
    cmd |= (y == EncDir::Reversed) ? CTRL_SET_Y_REV : CTRL_SET_Y_FWD;
 800130a:	78bb      	ldrb	r3, [r7, #2]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x1e>
 8001310:	2304      	movs	r3, #4
 8001312:	e000      	b.n	8001316 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x20>
 8001314:	2308      	movs	r3, #8
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
    cmd |= (x == EncDir::Reversed) ? CTRL_SET_X_REV : CTRL_SET_X_FWD;
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x30>
 8001322:	2310      	movs	r3, #16
 8001324:	e000      	b.n	8001328 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x32>
 8001326:	2320      	movs	r3, #32
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    return writeU32(REG_DEVICE_CTRL, cmd);
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	2104      	movs	r1, #4
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fee7 	bl	8001106 <_ZN11PinpointI2C8writeU32Ehm>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <_Z41__static_initialization_and_destruction_0v>:
bool PinpointI2C::writePosition(const Pose& p) {
    bool okx = writeF32(REG_POS_X, p.x_mm);
    bool oky = writeF32(REG_POS_Y, p.y_mm);
    bool okh = writeF32(REG_POS_H, p.heading);
    return okx && oky && okh;
}
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
PinpointI2C pinpoint(&hi2c1);
 8001348:	230a      	movs	r3, #10
 800134a:	2231      	movs	r2, #49	@ 0x31
 800134c:	4902      	ldr	r1, [pc, #8]	@ (8001358 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <_Z41__static_initialization_and_destruction_0v+0x18>)
 8001350:	f7ff fdca 	bl	8000ee8 <_ZN11PinpointI2CC1EP17I2C_HandleTypeDefhm>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20005428 	.word	0x20005428
 800135c:	20000980 	.word	0x20000980

08001360 <_GLOBAL__sub_I_i2c_req>:
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
 8001364:	f7ff ffee 	bl	8001344 <_Z41__static_initialization_and_destruction_0v>
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <pinpoint_init>:
extern int sec;

double pos_x, pos_y, pos_z, vel_x, vel_y, vel_z;
bool check = 0;

 void pinpoint_init(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
 	osDelay(500);
 8001370:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001374:	f008 fcc2 	bl	8009cfc <osDelay>
 	pinpoint.Pinpoint_Init();
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <pinpoint_init+0x18>)
 800137a:	f7ff fdd7 	bl	8000f2c <_ZN11PinpointI2C13Pinpoint_InitEv>
 }
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000980 	.word	0x20000980

08001388 <pinpoint_monitor>:
//    } else {
//        // I2C 裝置未回應，可能需要重試或報錯
//    }
//}

void pinpoint_monitor(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if (sec == update_period){
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <pinpoint_monitor+0x28>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b32      	cmp	r3, #50	@ 0x32
 8001392:	d10b      	bne.n	80013ac <pinpoint_monitor+0x24>
		// pinpoint.Pinpoint_TaskLoop();
		// sec = 0;
		  // 檢查連線狀態
        if (pinpoint.isConnected()) {
 8001394:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <pinpoint_monitor+0x2c>)
 8001396:	f7ff fe27 	bl	8000fe8 <_ZNK11PinpointI2C11isConnectedEv>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <pinpoint_monitor+0x1e>
            pinpoint.Pinpoint_TaskLoop();
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <pinpoint_monitor+0x2c>)
 80013a2:	f7ff fded 	bl	8000f80 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv>
//            // I2C 連線異常，嘗試重新初始化
//            HAL_I2C_DeInit(&hi2c1);
//            osDelay(100);
//            HAL_I2C_Init(&hi2c1);
        }
        sec = 0;
 80013a6:	4b02      	ldr	r3, [pc, #8]	@ (80013b0 <pinpoint_monitor+0x28>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
	}
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200086cc 	.word	0x200086cc
 80013b4:	20000980 	.word	0x20000980

080013b8 <update_pinpoint_pose>:

void update_pinpoint_pose(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	pos_x = bd.pos_x_mm;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <update_pinpoint_pose+0x80>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8f1 	bl	80005a8 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	491c      	ldr	r1, [pc, #112]	@ (800143c <update_pinpoint_pose+0x84>)
 80013cc:	e9c1 2300 	strd	r2, r3, [r1]
	pos_y = bd.pos_y_mm;
 80013d0:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <update_pinpoint_pose+0x80>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8e7 	bl	80005a8 <__aeabi_f2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4918      	ldr	r1, [pc, #96]	@ (8001440 <update_pinpoint_pose+0x88>)
 80013e0:	e9c1 2300 	strd	r2, r3, [r1]
	pos_z = bd.heading_rad;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <update_pinpoint_pose+0x80>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8dd 	bl	80005a8 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4914      	ldr	r1, [pc, #80]	@ (8001444 <update_pinpoint_pose+0x8c>)
 80013f4:	e9c1 2300 	strd	r2, r3, [r1]
	vel_x = bd.vel_x_mm_s;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <update_pinpoint_pose+0x80>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f8d3 	bl	80005a8 <__aeabi_f2d>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4910      	ldr	r1, [pc, #64]	@ (8001448 <update_pinpoint_pose+0x90>)
 8001408:	e9c1 2300 	strd	r2, r3, [r1]
	vel_y = bd.vel_y_mm_s;
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <update_pinpoint_pose+0x80>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8c9 	bl	80005a8 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	490c      	ldr	r1, [pc, #48]	@ (800144c <update_pinpoint_pose+0x94>)
 800141c:	e9c1 2300 	strd	r2, r3, [r1]
	vel_z = bd.vel_h_rad_s;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <update_pinpoint_pose+0x80>)
 8001422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f8bf 	bl	80005a8 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <update_pinpoint_pose+0x98>)
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000990 	.word	0x20000990
 800143c:	200009c0 	.word	0x200009c0
 8001440:	200009c8 	.word	0x200009c8
 8001444:	200009d0 	.word	0x200009d0
 8001448:	200009d8 	.word	0x200009d8
 800144c:	200009e0 	.word	0x200009e0
 8001450:	200009e8 	.word	0x200009e8

08001454 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	ed87 0a01 	vstr	s0, [r7, #4]
 800145e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001462:	f019 fdeb 	bl	801b03c <cosf>
 8001466:	eef0 7a40 	vmov.f32	s15, s0
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	ed87 0a01 	vstr	s0, [r7, #4]
 800147e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001482:	f019 fe1f 	bl	801b0c4 <sinf>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	eeb0 0a67 	vmov.f32	s0, s15
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <_ZN7Chassis8setSpeedEfff>:
#include "chassis.hpp"
#include "motor_config.h"
float Vx_global,Vy_global,dt;
void Chassis::setSpeed(float Vx_goal, float Vy_goal, float W_goal){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	ed87 0a02 	vstr	s0, [r7, #8]
 80014a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80014a4:	ed87 1a00 	vstr	s2, [r7]
    _Vx_goal = Vx_goal; _Vy_goal = Vy_goal; _W_goal = W_goal;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
    Mecan_InverseKinematics();
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f9a0 	bl	8001800 <_ZN7Chassis23Mecan_InverseKinematicsEv>
    _motorFR->setSpeed(_V_FR_goal);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	4610      	mov	r0, r2
 80014d0:	f000 face 	bl	8001a70 <_ZN15MotorController8setSpeedEf>
    _motorFL->setSpeed(_V_FL_goal);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	edd3 7a08 	vldr	s15, [r3, #32]
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	4610      	mov	r0, r2
 80014e4:	f000 fac4 	bl	8001a70 <_ZN15MotorController8setSpeedEf>
    _motorBR->setSpeed(_V_BR_goal);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	4610      	mov	r0, r2
 80014f8:	f000 faba 	bl	8001a70 <_ZN15MotorController8setSpeedEf>
    _motorBL->setSpeed(_V_BL_goal);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	4610      	mov	r0, r2
 800150c:	f000 fab0 	bl	8001a70 <_ZN15MotorController8setSpeedEf>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_ZN7Chassis11getLocationEv>:

void Chassis::getLocation(){
 8001518:	b580      	push	{r7, lr}
 800151a:	ed2d 8b02 	vpush	{d8}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	Mecan_ForwardKinematics();
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f88b 	bl	8001640 <_ZN7Chassis23Mecan_ForwardKinematicsEv>
	dt = DT;
 800152a:	4b41      	ldr	r3, [pc, #260]	@ (8001630 <_ZN7Chassis11getLocationEv+0x118>)
 800152c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001530:	601a      	str	r2, [r3, #0]
    theta += _W_now * DT/1000;                                              // rad
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	ed93 7a02 	vldr	s14, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800153e:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 8001634 <_ZN7Chassis11getLocationEv+0x11c>
 8001542:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	edc3 7a02 	vstr	s15, [r3, #8]
    Vx_global = _Vx_now * cos(theta) - _Vy_now * sin(theta);   // cm/s
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	edd3 7a02 	vldr	s15, [r3, #8]
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f7ff ff78 	bl	8001454 <_ZSt3cosf>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	ee28 8a27 	vmul.f32	s16, s16, s15
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 8a0f 	vldr	s17, [r3, #60]	@ 0x3c
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f7ff ff7a 	bl	8001474 <_ZSt3sinf>
 8001580:	eef0 7a40 	vmov.f32	s15, s0
 8001584:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001588:	ee78 7a67 	vsub.f32	s15, s16, s15
 800158c:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <_ZN7Chassis11getLocationEv+0x120>)
 800158e:	edc3 7a00 	vstr	s15, [r3]
    Vy_global = _Vx_now * sin(theta) + _Vy_now * cos(theta);   // cm/s
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	ed93 8a0e 	vldr	s16, [r3, #56]	@ 0x38
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	edd3 7a02 	vldr	s15, [r3, #8]
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	f7ff ff67 	bl	8001474 <_ZSt3sinf>
 80015a6:	eef0 7a40 	vmov.f32	s15, s0
 80015aa:	ee28 8a27 	vmul.f32	s16, s16, s15
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edd3 8a0f 	vldr	s17, [r3, #60]	@ 0x3c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	f7ff ff49 	bl	8001454 <_ZSt3cosf>
 80015c2:	eef0 7a40 	vmov.f32	s15, s0
 80015c6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80015ca:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015ce:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <_ZN7Chassis11getLocationEv+0x124>)
 80015d0:	edc3 7a00 	vstr	s15, [r3]
    x += (Vx_global * (dt/1000));                                        // cm
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed93 7a00 	vldr	s14, [r3]
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <_ZN7Chassis11getLocationEv+0x118>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8001634 <_ZN7Chassis11getLocationEv+0x11c>
 80015e4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <_ZN7Chassis11getLocationEv+0x120>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	edc3 7a00 	vstr	s15, [r3]
    y += (Vy_global * (dt/1000));										// cm
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <_ZN7Chassis11getLocationEv+0x118>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8001634 <_ZN7Chassis11getLocationEv+0x11c>
 800160c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001610:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <_ZN7Chassis11getLocationEv+0x124>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	ecbd 8b02 	vpop	{d8}
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200009f8 	.word	0x200009f8
 8001634:	447a0000 	.word	0x447a0000
 8001638:	200009f0 	.word	0x200009f0
 800163c:	200009f4 	.word	0x200009f4

08001640 <_ZN7Chassis23Mecan_ForwardKinematicsEv>:

void Chassis::Mecan_ForwardKinematics(){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
    _V_FR_now = _motorFR->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fa8f 	bl	8001b70 <_ZN15MotorController8getSpeedEv>
 8001652:	ee10 3a10 	vmov	r3, s0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe ffa6 	bl	80005a8 <__aeabi_f2d>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 8001662:	f7fe fff9 	bl	8000658 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	a360      	add	r3, pc, #384	@ (adr r3, 80017f0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe fff0 	bl	8000658 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff f9fc 	bl	8000a7c <__aeabi_d2f>
 8001684:	4602      	mov	r2, r0
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	649a      	str	r2, [r3, #72]	@ 0x48
    _V_FL_now = _motorFL->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 fa6e 	bl	8001b70 <_ZN15MotorController8getSpeedEv>
 8001694:	ee10 3a10 	vmov	r3, s0
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff85 	bl	80005a8 <__aeabi_f2d>
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b55      	ldr	r3, [pc, #340]	@ (80017f8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 80016a4:	f7fe ffd8 	bl	8000658 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	a34f      	add	r3, pc, #316	@ (adr r3, 80017f0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffcf 	bl	8000658 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f9db 	bl	8000a7c <__aeabi_d2f>
 80016c6:	4602      	mov	r2, r0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	64da      	str	r2, [r3, #76]	@ 0x4c
    _V_BR_now = _motorBR->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fa4d 	bl	8001b70 <_ZN15MotorController8getSpeedEv>
 80016d6:	ee10 3a10 	vmov	r3, s0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff64 	bl	80005a8 <__aeabi_f2d>
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	4b44      	ldr	r3, [pc, #272]	@ (80017f8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 80016e6:	f7fe ffb7 	bl	8000658 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	a33f      	add	r3, pc, #252	@ (adr r3, 80017f0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ffae 	bl	8000658 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f9ba 	bl	8000a7c <__aeabi_d2f>
 8001708:	4602      	mov	r2, r0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	651a      	str	r2, [r3, #80]	@ 0x50
    _V_BL_now = _motorBL->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fa2c 	bl	8001b70 <_ZN15MotorController8getSpeedEv>
 8001718:	ee10 3a10 	vmov	r3, s0
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff43 	bl	80005a8 <__aeabi_f2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 8001728:	f7fe ff96 	bl	8000658 <__aeabi_dmul>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	a32e      	add	r3, pc, #184	@ (adr r3, 80017f0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe ff8d 	bl	8000658 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff f999 	bl	8000a7c <__aeabi_d2f>
 800174a:	4602      	mov	r2, r0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	@ 0x54

    _Vx_now = (-_V_FR_now + _V_FL_now + _V_BR_now - _V_BL_now) / 4.0f;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800175c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001770:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001774:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    _Vy_now = (_V_FR_now + _V_FL_now + _V_BR_now + _V_BL_now) / 4.0f;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800178e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001798:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80017a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80017aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    _W_now = (-_V_FR_now +   _V_FL_now - _V_BR_now + _V_BL_now) / (CHASSIS_WIDTH + CHASSIS_LENGTH);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80017c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80017ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80017d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80017fc <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1bc>
 80017dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	4d12d84a 	.word	0x4d12d84a
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	40240000 	.word	0x40240000
 80017fc:	42600000 	.word	0x42600000

08001800 <_ZN7Chassis23Mecan_InverseKinematicsEv>:

void Chassis::Mecan_InverseKinematics(){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    _V_FR_goal = -_Vx_goal + _Vy_goal + _W_goal * _chassis_factor;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001814:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edc3 7a07 	vstr	s15, [r3, #28]
    _V_FL_goal = _Vx_goal + _Vy_goal - _W_goal * _chassis_factor;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800183e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800184e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	edc3 7a08 	vstr	s15, [r3, #32]
    _V_BR_goal = _Vx_goal + _Vy_goal + _W_goal * _chassis_factor;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    _V_BL_goal = -_Vx_goal + _Vy_goal - _W_goal * _chassis_factor;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80018a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_>:
/**********************************************************************/
extern float Vx_global,Vy_global,dt;

class Chassis {
    public:
        Chassis(MotorController* motorFR, MotorController* motorFL, MotorController* motorBR, MotorController* motorBL):
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
                _motorFR(motorFR), _motorFL(motorFL), _motorBR(motorBR), _motorBL(motorBL){}
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	615a      	str	r2, [r3, #20]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	619a      	str	r2, [r3, #24]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	621a      	str	r2, [r3, #32]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	@ 0x30
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	635a      	str	r2, [r3, #52]	@ 0x34
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	639a      	str	r2, [r3, #56]	@ 0x38
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4a0c      	ldr	r2, [pc, #48]	@ (8001980 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_+0xc4>)
 800194e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	649a      	str	r2, [r3, #72]	@ 0x48
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	651a      	str	r2, [r3, #80]	@ 0x50
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	3fe42a1f 	.word	0x3fe42a1f

08001984 <chassis_set_speed>:
//	}
	chassis.getLocation();
}

void chassis_set_speed(double vx,double vy,double vz)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	ed87 0b04 	vstr	d0, [r7, #16]
 800198e:	ed87 1b02 	vstr	d1, [r7, #8]
 8001992:	ed87 2b00 	vstr	d2, [r7]
	chassis.setSpeed(vx, vy, vz);
 8001996:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800199a:	f7ff f86f 	bl	8000a7c <__aeabi_d2f>
 800199e:	4604      	mov	r4, r0
 80019a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019a4:	f7ff f86a 	bl	8000a7c <__aeabi_d2f>
 80019a8:	4605      	mov	r5, r0
 80019aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019ae:	f7ff f865 	bl	8000a7c <__aeabi_d2f>
 80019b2:	4603      	mov	r3, r0
 80019b4:	ee01 3a10 	vmov	s2, r3
 80019b8:	ee00 5a90 	vmov	s1, r5
 80019bc:	ee00 4a10 	vmov	s0, r4
 80019c0:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <chassis_set_speed+0x50>)
 80019c2:	f7ff fd67 	bl	8001494 <_ZN7Chassis8setSpeedEfff>
	chassis.getLocation();
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <chassis_set_speed+0x50>)
 80019c8:	f7ff fda6 	bl	8001518 <_ZN7Chassis11getLocationEv>
}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	200009fc 	.word	0x200009fc

080019d8 <_Z41__static_initialization_and_destruction_0v>:
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af02      	add	r7, sp, #8
Chassis chassis(&Motor_FR, &Motor_FL , &Motor_BR, &Motor_BL);
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <_Z41__static_initialization_and_destruction_0v+0x20>)
 80019e4:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <_Z41__static_initialization_and_destruction_0v+0x24>)
 80019e6:	4906      	ldr	r1, [pc, #24]	@ (8001a00 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80019e8:	4806      	ldr	r0, [pc, #24]	@ (8001a04 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 80019ea:	f7ff ff67 	bl	80018bc <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_>
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000b44 	.word	0x20000b44
 80019f8:	20000af4 	.word	0x20000af4
 80019fc:	20000aa4 	.word	0x20000aa4
 8001a00:	20000a54 	.word	0x20000a54
 8001a04:	200009fc 	.word	0x200009fc

08001a08 <_GLOBAL__sub_I_chassis>:
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	f7ff ffe4 	bl	80019d8 <_Z41__static_initialization_and_destruction_0v>
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a20:	eef0 7ae7 	vabs.f32	s15, s15
 8001a24:	eeb0 0a67 	vmov.f32	s0, s15
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <_ZN15MotorController4initEii>:
#include "motor_ctrl.hpp"
int times = 0;
uint32_t current_cnt;
void MotorController::init(int en_ctrl,int dir_ctrl) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	213c      	movs	r1, #60	@ 0x3c
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fe83 	bl	8007750 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f005 fd0d 	bl	8007474 <HAL_TIM_PWM_Start>
    _dir_ctrl = dir_ctrl;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	64da      	str	r2, [r3, #76]	@ 0x4c
    _en_ctrl = en_ctrl;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	ed87 0a00 	vstr	s0, [r7]

    _targetSpeed = speed;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	631a      	str	r2, [r3, #48]	@ 0x30
//    times++;
    ComputePID();
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f884 	bl	8001b90 <_ZN15MotorController10ComputePIDEv>

//    if (_pidOutput > 80.0) _pidOutput = 80.0;
//    if (_pidOutput < -80.0) _pidOutput = -80.0;
    if (_dir_ctrl == 1){
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d112      	bne.n	8001ab6 <_ZN15MotorController8setSpeedEf+0x46>
    	HAL_GPIO_WritePin(_dirGPIO, _dirPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68d8      	ldr	r0, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	8a19      	ldrh	r1, [r3, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa6:	db01      	blt.n	8001aac <_ZN15MotorController8setSpeedEf+0x3c>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <_ZN15MotorController8setSpeedEf+0x3e>
 8001aac:	2300      	movs	r3, #0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f003 fdce 	bl	8005650 <HAL_GPIO_WritePin>
 8001ab4:	e014      	b.n	8001ae0 <_ZN15MotorController8setSpeedEf+0x70>
    }else{
    	HAL_GPIO_WritePin(_dirGPIO, _dirPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68d8      	ldr	r0, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	8a19      	ldrh	r1, [r3, #16]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	bfac      	ite	ge
 8001ace:	2301      	movge	r3, #1
 8001ad0:	2300      	movlt	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f083 0301 	eor.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	f003 fdb8 	bl	8005650 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	f7ff ff92 	bl	8001a12 <_ZSt4fabsf>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001b6c <_ZN15MotorController8setSpeedEf+0xfc>
 8001af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001afe:	ee17 3a90 	vmov	r3, s15
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	84da      	strh	r2, [r3, #38]	@ 0x26
    if (_pwmValue < 10) _pwmValue = 0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b0c:	2b09      	cmp	r3, #9
 8001b0e:	d802      	bhi.n	8001b16 <_ZN15MotorController8setSpeedEf+0xa6>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	84da      	strh	r2, [r3, #38]	@ 0x26
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <_ZN15MotorController8setSpeedEf+0xbc>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	635a      	str	r2, [r3, #52]	@ 0x34
//	if(_pidOutput > 0) HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_SET);
//	else HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_RESET);
//
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);

}
 8001b2a:	e01b      	b.n	8001b64 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d106      	bne.n	8001b42 <_ZN15MotorController8setSpeedEf+0xd2>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b40:	e010      	b.n	8001b64 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d106      	bne.n	8001b58 <_ZN15MotorController8setSpeedEf+0xe8>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b56:	e005      	b.n	8001b64 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	447a0000 	.word	0x447a0000

08001b70 <_ZN15MotorController8getSpeedEv>:

float MotorController::getSpeed() {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
//	updateSpeed();
    return _currentSpeed;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <_ZN15MotorController10ComputePIDEv>:

float MotorController::ComputePID() {
 8001b90:	b5b0      	push	{r4, r5, r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
    updateSpeed();
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f8a9 	bl	8001cf0 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    _integral += _error * (DT / 1000.0);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcf5 	bl	80005a8 <__aeabi_f2d>
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcee 	bl	80005a8 <__aeabi_f2d>
 8001bcc:	a345      	add	r3, pc, #276	@ (adr r3, 8001ce4 <_ZN15MotorController10ComputePIDEv+0x154>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fd41 	bl	8000658 <__aeabi_dmul>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4620      	mov	r0, r4
 8001bdc:	4629      	mov	r1, r5
 8001bde:	f7fe fb85 	bl	80002ec <__adddf3>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f7fe ff47 	bl	8000a7c <__aeabi_d2f>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001bfa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	db04      	blt.n	8001c12 <_ZN15MotorController10ComputePIDEv+0x82>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c10:	e00d      	b.n	8001c2e <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c18:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d803      	bhi.n	8001c2e <_ZN15MotorController10ComputePIDEv+0x9e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c


    float derivative = (_error - _lastError) / (DT / 1000.0);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3e:	ee17 0a90 	vmov	r0, s15
 8001c42:	f7fe fcb1 	bl	80005a8 <__aeabi_f2d>
 8001c46:	a327      	add	r3, pc, #156	@ (adr r3, 8001ce4 <_ZN15MotorController10ComputePIDEv+0x154>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fe2e 	bl	80008ac <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7fe ff10 	bl	8000a7c <__aeabi_d2f>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral); //+ (_kd * derivative);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    // Update last error
    _lastError = _error;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	639a      	str	r2, [r3, #56]	@ 0x38
    if(_pidOutput > 1) _pidOutput = 1;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca4:	dd04      	ble.n	8001cb0 <_ZN15MotorController10ComputePIDEv+0x120>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cae:	e00c      	b.n	8001cca <_ZN15MotorController10ComputePIDEv+0x13a>
    else if (_pidOutput < -1) _pidOutput = -1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001cb6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d502      	bpl.n	8001cca <_ZN15MotorController10ComputePIDEv+0x13a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <_ZN15MotorController10ComputePIDEv+0x150>)
 8001cc8:	629a      	str	r2, [r3, #40]	@ 0x28
    return _pidOutput;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	ee07 3a90 	vmov	s15, r3
////    pre_error = error;
//
//	if (_pidOutput > 1) _pidOutput = 1;
//	else if (_pidOutput < -1) _pidOutput = -1;
//    return _pidOutput;
}
 8001cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	bf800000 	.word	0xbf800000
 8001ce4:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ce8:	3f50624d 	.word	0x3f50624d
 8001cec:	00000000 	.word	0x00000000

08001cf0 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
//    else
//        _currentSpeed = (__HAL_TIM_GET_COUNTER(_enc) / ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0); // RPS
//
//    _last_cnt = __HAL_TIM_GET_COUNTER(_enc);

	cnt = __HAL_TIM_GetCounter(_enc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	b21a      	sxth	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	849a      	strh	r2, [r3, #36]	@ 0x24
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc39 	bl	8000584 <__aeabi_i2d>
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <_ZN15MotorController11updateSpeedEv+0xb8>)
 8001d18:	f7fe fdc8 	bl	80008ac <__aeabi_ddiv>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b20      	ldr	r3, [pc, #128]	@ (8001dac <_ZN15MotorController11updateSpeedEv+0xbc>)
 8001d2a:	f7fe fdbf 	bl	80008ac <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <_ZN15MotorController11updateSpeedEv+0xc0>)
 8001d3c:	f7fe fdb6 	bl	80008ac <__aeabi_ddiv>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	a315      	add	r3, pc, #84	@ (adr r3, 8001da0 <_ZN15MotorController11updateSpeedEv+0xb0>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fdad 	bl	80008ac <__aeabi_ddiv>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe fe8f 	bl	8000a7c <__aeabi_d2f>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(_enc, 0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    return _currentSpeed;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8e:	ee07 3a90 	vmov	s15, r3
}
 8001d92:	eeb0 0a67 	vmov.f32	s0, s15
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001da4:	3f50624d 	.word	0x3f50624d
 8001da8:	40590000 	.word	0x40590000
 8001dac:	40500000 	.word	0x40500000
 8001db0:	40100000 	.word	0x40100000

08001db4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* dirGPIO, uint16_t dirPin, double kp, double ki, double kd):
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6278      	str	r0, [r7, #36]	@ 0x24
 8001dbc:	6239      	str	r1, [r7, #32]
 8001dbe:	61fa      	str	r2, [r7, #28]
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	ed87 0b04 	vstr	d0, [r7, #16]
 8001dc6:	ed87 1b02 	vstr	d1, [r7, #8]
 8001dca:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _dirGPIO(dirGPIO), _dirPin(dirPin), _kp(kp), _ki(ki), _kd(kd){}
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	6a3a      	ldr	r2, [r7, #32]
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001dea:	821a      	strh	r2, [r3, #16]
 8001dec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df0:	f7fe fe44 	bl	8000a7c <__aeabi_d2f>
 8001df4:	4602      	mov	r2, r0
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dfe:	f7fe fe3d 	bl	8000a7c <__aeabi_d2f>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e06:	619a      	str	r2, [r3, #24]
 8001e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e0c:	f7fe fe36 	bl	8000a7c <__aeabi_d2f>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	61da      	str	r2, [r3, #28]
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	2200      	movs	r2, #0
 8001e30:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	2200      	movs	r2, #0
 8001e36:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	4a08      	ldr	r2, [pc, #32]	@ (8001e8c <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0xd8>)
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	2200      	movs	r2, #0
 8001e80:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	4618      	mov	r0, r3
 8001e86:	3728      	adds	r7, #40	@ 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	42c80000 	.word	0x42c80000

08001e90 <motor_init>:
float VgoalFL = 0.0;
float VgoalBR = 0.0;
float VgoalBL = 0.0;


void motor_init(){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	Motor_FR.init( 1, 1);
 8001e94:	2201      	movs	r2, #1
 8001e96:	2101      	movs	r1, #1
 8001e98:	480b      	ldr	r0, [pc, #44]	@ (8001ec8 <motor_init+0x38>)
 8001e9a:	f7ff fdca 	bl	8001a32 <_ZN15MotorController4initEii>
	Motor_FL.init( 1,-1);
 8001e9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	4809      	ldr	r0, [pc, #36]	@ (8001ecc <motor_init+0x3c>)
 8001ea6:	f7ff fdc4 	bl	8001a32 <_ZN15MotorController4initEii>
	Motor_BR.init(-1, 1);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eb0:	4807      	ldr	r0, [pc, #28]	@ (8001ed0 <motor_init+0x40>)
 8001eb2:	f7ff fdbe 	bl	8001a32 <_ZN15MotorController4initEii>
	Motor_BL.init( 1,-1);
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <motor_init+0x44>)
 8001ebe:	f7ff fdb8 	bl	8001a32 <_ZN15MotorController4initEii>
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000a54 	.word	0x20000a54
 8001ecc:	20000aa4 	.word	0x20000aa4
 8001ed0:	20000af4 	.word	0x20000af4
 8001ed4:	20000b44 	.word	0x20000b44

08001ed8 <_Z41__static_initialization_and_destruction_0v>:
    Motor_BL.setSpeed(VgoalBL);
//    test = Motor_BR.getSpeed();
//    Motor_BL.getSpeed();
//    Motor_FR.getSpeed();
//    Motor_FL.getSpeed();
}
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af02      	add	r7, sp, #8
MotorController Motor_FR(&htim1, &htim8, TIM_CHANNEL_1, GPIOB, GPIO_PIN_12, 4.5, 200, 0);
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f98 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	ed9f 2b21 	vldr	d2, [pc, #132]	@ 8001f70 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001eec:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001ef0:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8001f80 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4a29      	ldr	r2, [pc, #164]	@ (8001f9c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001ef8:	4929      	ldr	r1, [pc, #164]	@ (8001fa0 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 8001efa:	482a      	ldr	r0, [pc, #168]	@ (8001fa4 <_Z41__static_initialization_and_destruction_0v+0xcc>)
 8001efc:	f7ff ff5a 	bl	8001db4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_FL(&htim2, &htim8, TIM_CHANNEL_2, GPIOA, GPIO_PIN_12, 4.5, 200, 0);
 8001f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	ed9f 2b19 	vldr	d2, [pc, #100]	@ 8001f70 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f0e:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f12:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001f80 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f16:	2304      	movs	r3, #4
 8001f18:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001f1a:	4924      	ldr	r1, [pc, #144]	@ (8001fac <_Z41__static_initialization_and_destruction_0v+0xd4>)
 8001f1c:	4824      	ldr	r0, [pc, #144]	@ (8001fb0 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 8001f1e:	f7ff ff49 	bl	8001db4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_BR(&htim3, &htim8, TIM_CHANNEL_3, GPIOB, GPIO_PIN_14, 5, 100, 0);
 8001f22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	ed9f 2b10 	vldr	d2, [pc, #64]	@ 8001f70 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f30:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001f88 <_Z41__static_initialization_and_destruction_0v+0xb0>
 8001f34:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001f90 <_Z41__static_initialization_and_destruction_0v+0xb8>
 8001f38:	2308      	movs	r3, #8
 8001f3a:	4a18      	ldr	r2, [pc, #96]	@ (8001f9c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001f3c:	491d      	ldr	r1, [pc, #116]	@ (8001fb4 <_Z41__static_initialization_and_destruction_0v+0xdc>)
 8001f3e:	481e      	ldr	r0, [pc, #120]	@ (8001fb8 <_Z41__static_initialization_and_destruction_0v+0xe0>)
 8001f40:	f7ff ff38 	bl	8001db4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_BL(&htim4, &htim8, TIM_CHANNEL_4, GPIOB, GPIO_PIN_15, 5, 200, 0);
 8001f44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8001f70 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f52:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f56:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8001f90 <_Z41__static_initialization_and_destruction_0v+0xb8>
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001f9c <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001f5e:	4917      	ldr	r1, [pc, #92]	@ (8001fbc <_Z41__static_initialization_and_destruction_0v+0xe4>)
 8001f60:	4817      	ldr	r0, [pc, #92]	@ (8001fc0 <_Z41__static_initialization_and_destruction_0v+0xe8>)
 8001f62:	f7ff ff27 	bl	8001db4 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	f3af 8000 	nop.w
	...
 8001f7c:	40690000 	.word	0x40690000
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40120000 	.word	0x40120000
 8001f88:	00000000 	.word	0x00000000
 8001f8c:	40590000 	.word	0x40590000
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40140000 	.word	0x40140000
 8001f98:	40020400 	.word	0x40020400
 8001f9c:	200055e4 	.word	0x200055e4
 8001fa0:	2000547c 	.word	0x2000547c
 8001fa4:	20000a54 	.word	0x20000a54
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	200054c4 	.word	0x200054c4
 8001fb0:	20000aa4 	.word	0x20000aa4
 8001fb4:	2000550c 	.word	0x2000550c
 8001fb8:	20000af4 	.word	0x20000af4
 8001fbc:	20005554 	.word	0x20005554
 8001fc0:	20000b44 	.word	0x20000b44

08001fc4 <_GLOBAL__sub_I_Motor_FR>:
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	f7ff ff86 	bl	8001ed8 <_Z41__static_initialization_and_destruction_0v>
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <uros_init+0x58>)
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	4b14      	ldr	r3, [pc, #80]	@ (800202c <uros_init+0x5c>)
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4b14      	ldr	r3, [pc, #80]	@ (8002030 <uros_init+0x60>)
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <uros_init+0x64>)
 8001fe2:	4915      	ldr	r1, [pc, #84]	@ (8002038 <uros_init+0x68>)
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f00e fd6d 	bl	8010ac4 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00e f981 	bl	80102f4 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <uros_init+0x6c>)
 8001ff4:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <uros_init+0x70>)
 8001ff8:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <uros_init+0x74>)
 8001ffc:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <uros_init+0x78>)
 8002000:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4618      	mov	r0, r3
 8002006:	f00e f983 	bl	8010310 <rcutils_set_default_allocator>
 800200a:	4603      	mov	r3, r0
 800200c:	f083 0301 	eor.w	r3, r3, #1
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 8002016:	2140      	movs	r1, #64	@ 0x40
 8002018:	480c      	ldr	r0, [pc, #48]	@ (800204c <uros_init+0x7c>)
 800201a:	f01a f8ed 	bl	801c1f8 <iprintf>
  }
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	08002b8d 	.word	0x08002b8d
 800202c:	08002b25 	.word	0x08002b25
 8002030:	08002b05 	.word	0x08002b05
 8002034:	08002ad9 	.word	0x08002ad9
 8002038:	2000562c 	.word	0x2000562c
 800203c:	0800346d 	.word	0x0800346d
 8002040:	080034b1 	.word	0x080034b1
 8002044:	080034e9 	.word	0x080034e9
 8002048:	08003555 	.word	0x08003555
 800204c:	0801d330 	.word	0x0801d330

08002050 <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  switch (status) {
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <uros_agent_status_check+0x4c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d81c      	bhi.n	8002096 <uros_agent_status_check+0x46>
 800205c:	a201      	add	r2, pc, #4	@ (adr r2, 8002064 <uros_agent_status_check+0x14>)
 800205e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002062:	bf00      	nop
 8002064:	08002079 	.word	0x08002079
 8002068:	0800207f 	.word	0x0800207f
 800206c:	08002085 	.word	0x08002085
 8002070:	0800208b 	.word	0x0800208b
 8002074:	08002091 	.word	0x08002091
    case AGENT_WAITING:
      handle_state_agent_waiting();
 8002078:	f000 f812 	bl	80020a0 <handle_state_agent_waiting>
      break;
 800207c:	e00c      	b.n	8002098 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 800207e:	f000 f821 	bl	80020c4 <handle_state_agent_available>
      break;
 8002082:	e009      	b.n	8002098 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 8002084:	f000 f82c 	bl	80020e0 <handle_state_agent_connected>
      break;
 8002088:	e006      	b.n	8002098 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 800208a:	f000 f85b 	bl	8002144 <handle_state_agent_trying>
      break;
 800208e:	e003      	b.n	8002098 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 8002090:	f000 f882 	bl	8002198 <handle_state_agent_disconnected>
      break;
 8002094:	e000      	b.n	8002098 <uros_agent_status_check+0x48>
    default:
      break;
 8002096:	bf00      	nop
  }
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000fb8 	.word	0x20000fb8

080020a0 <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 80020a4:	210a      	movs	r1, #10
 80020a6:	2064      	movs	r0, #100	@ 0x64
 80020a8:	f00e fd22 	bl	8010af0 <rmw_uros_ping_agent>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <handle_state_agent_waiting+0x16>
 80020b2:	2201      	movs	r2, #1
 80020b4:	e000      	b.n	80020b8 <handle_state_agent_waiting+0x18>
 80020b6:	2200      	movs	r2, #0
 80020b8:	4b01      	ldr	r3, [pc, #4]	@ (80020c0 <handle_state_agent_waiting+0x20>)
 80020ba:	701a      	strb	r2, [r3, #0]
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000fb8 	.word	0x20000fb8

080020c4 <handle_state_agent_available>:
void handle_state_agent_available(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  uros_create_entities();
 80020c8:	f000 f872 	bl	80021b0 <uros_create_entities>
  status = AGENT_CONNECTED;
 80020cc:	4b02      	ldr	r3, [pc, #8]	@ (80020d8 <handle_state_agent_available+0x14>)
 80020ce:	2202      	movs	r2, #2
 80020d0:	701a      	strb	r2, [r3, #0]
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000fb8 	.word	0x20000fb8
 80020dc:	00000000 	.word	0x00000000

080020e0 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 80020e4:	2105      	movs	r1, #5
 80020e6:	2014      	movs	r0, #20
 80020e8:	f00e fd02 	bl	8010af0 <rmw_uros_ping_agent>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bf0c      	ite	eq
 80020f2:	2301      	moveq	r3, #1
 80020f4:	2300      	movne	r3, #0
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(50));
 80020fc:	a30f      	add	r3, pc, #60	@ (adr r3, 800213c <handle_state_agent_connected+0x5c>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	480b      	ldr	r0, [pc, #44]	@ (8002130 <handle_state_agent_connected+0x50>)
 8002104:	f00d ff82 	bl	801000c <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 8002108:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <handle_state_agent_connected+0x54>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 800210e:	e00b      	b.n	8002128 <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <handle_state_agent_connected+0x54>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <handle_state_agent_connected+0x54>)
 8002118:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <handle_state_agent_connected+0x54>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b04      	cmp	r3, #4
 8002120:	dd02      	ble.n	8002128 <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8002122:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <handle_state_agent_connected+0x58>)
 8002124:	2203      	movs	r2, #3
 8002126:	701a      	strb	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}
 800212c:	f3af 8000 	nop.w
 8002130:	20000f30 	.word	0x20000f30
 8002134:	20000fbc 	.word	0x20000fbc
 8002138:	20000fb8 	.word	0x20000fb8
 800213c:	02faf080 	.word	0x02faf080
 8002140:	00000000 	.word	0x00000000

08002144 <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8002148:	210a      	movs	r1, #10
 800214a:	2032      	movs	r0, #50	@ 0x32
 800214c:	f00e fcd0 	bl	8010af0 <rmw_uros_ping_agent>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf0c      	ite	eq
 8002156:	2301      	moveq	r3, #1
 8002158:	2300      	movne	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <handle_state_agent_trying+0x4c>)
 8002162:	2202      	movs	r2, #2
 8002164:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8002166:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <handle_state_agent_trying+0x50>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 800216c:	e00e      	b.n	800218c <handle_state_agent_trying+0x48>
    ping_fail_count++;
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <handle_state_agent_trying+0x50>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <handle_state_agent_trying+0x50>)
 8002176:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <handle_state_agent_trying+0x50>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b04      	cmp	r3, #4
 800217e:	dd05      	ble.n	800218c <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <handle_state_agent_trying+0x4c>)
 8002182:	2204      	movs	r2, #4
 8002184:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 8002186:	4b03      	ldr	r3, [pc, #12]	@ (8002194 <handle_state_agent_trying+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000fb8 	.word	0x20000fb8
 8002194:	20000fbc 	.word	0x20000fbc

08002198 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 800219c:	f000 f93e 	bl	800241c <uros_destroy_entities>
  status = AGENT_WAITING;
 80021a0:	4b02      	ldr	r3, [pc, #8]	@ (80021ac <handle_state_agent_disconnected+0x14>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000fb8 	.word	0x20000fb8

080021b0 <uros_create_entities>:


void uros_create_entities(void) {
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af02      	add	r7, sp, #8
  // 重置积分变量
  last_cmd_vel_time = 0;
 80021b6:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <uros_create_entities+0x200>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
  last_cmd_arm_time = 0;
 80021bc:	4b7d      	ldr	r3, [pc, #500]	@ (80023b4 <uros_create_entities+0x204>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
  current_yaw = 0.0f;
 80021c2:	4b7d      	ldr	r3, [pc, #500]	@ (80023b8 <uros_create_entities+0x208>)
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

  allocator = rcl_get_default_allocator();
 80021ca:	4c7c      	ldr	r4, [pc, #496]	@ (80023bc <uros_create_entities+0x20c>)
 80021cc:	463b      	mov	r3, r7
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00e f8bc 	bl	801034c <rcutils_get_default_allocator>
 80021d4:	4625      	mov	r5, r4
 80021d6:	463c      	mov	r4, r7
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 80021e0:	f00c f8ac 	bl	800e33c <rcl_get_zero_initialized_init_options>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a76      	ldr	r2, [pc, #472]	@ (80023c0 <uros_create_entities+0x210>)
 80021e8:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 80021ea:	4b74      	ldr	r3, [pc, #464]	@ (80023bc <uros_create_entities+0x20c>)
 80021ec:	466c      	mov	r4, sp
 80021ee:	f103 020c 	add.w	r2, r3, #12
 80021f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021f6:	e884 0003 	stmia.w	r4, {r0, r1}
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	4870      	ldr	r0, [pc, #448]	@ (80023c0 <uros_create_entities+0x210>)
 80021fe:	f00c f89f 	bl	800e340 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 8002202:	2100      	movs	r1, #0
 8002204:	486e      	ldr	r0, [pc, #440]	@ (80023c0 <uros_create_entities+0x210>)
 8002206:	f00c f997 	bl	800e538 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 800220a:	4b6c      	ldr	r3, [pc, #432]	@ (80023bc <uros_create_entities+0x20c>)
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	4b6c      	ldr	r3, [pc, #432]	@ (80023c0 <uros_create_entities+0x210>)
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	486b      	ldr	r0, [pc, #428]	@ (80023c4 <uros_create_entities+0x214>)
 8002216:	f00d ff33 	bl	8010080 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 800221a:	4869      	ldr	r0, [pc, #420]	@ (80023c0 <uros_create_entities+0x210>)
 800221c:	f00c f8f6 	bl	800e40c <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8002220:	4b68      	ldr	r3, [pc, #416]	@ (80023c4 <uros_create_entities+0x214>)
 8002222:	4a69      	ldr	r2, [pc, #420]	@ (80023c8 <uros_create_entities+0x218>)
 8002224:	4969      	ldr	r1, [pc, #420]	@ (80023cc <uros_create_entities+0x21c>)
 8002226:	486a      	ldr	r0, [pc, #424]	@ (80023d0 <uros_create_entities+0x220>)
 8002228:	f00d ff88 	bl	801013c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 800222c:	f00b fefe 	bl	800e02c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002230:	4602      	mov	r2, r0
 8002232:	4b68      	ldr	r3, [pc, #416]	@ (80023d4 <uros_create_entities+0x224>)
 8002234:	4966      	ldr	r1, [pc, #408]	@ (80023d0 <uros_create_entities+0x220>)
 8002236:	4868      	ldr	r0, [pc, #416]	@ (80023d8 <uros_create_entities+0x228>)
 8002238:	f00d ffbc 	bl	80101b4 <rclc_publisher_init_default>
    &pose_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
    "robot/pose");
  pose_msg.pose.pose.position.x = 830.0;
 800223c:	4967      	ldr	r1, [pc, #412]	@ (80023dc <uros_create_entities+0x22c>)
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	4b67      	ldr	r3, [pc, #412]	@ (80023e0 <uros_create_entities+0x230>)
 8002244:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = 6160.0;
 8002248:	4964      	ldr	r1, [pc, #400]	@ (80023dc <uros_create_entities+0x22c>)
 800224a:	a355      	add	r3, pc, #340	@ (adr r3, 80023a0 <uros_create_entities+0x1f0>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.position.z = 0.0;
 8002254:	4961      	ldr	r1, [pc, #388]	@ (80023dc <uros_create_entities+0x22c>)
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  pose_msg.pose.pose.orientation.x = 0.0;
 8002262:	495e      	ldr	r1, [pc, #376]	@ (80023dc <uros_create_entities+0x22c>)
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  pose_msg.pose.pose.orientation.y = 0.0;
 8002270:	495a      	ldr	r1, [pc, #360]	@ (80023dc <uros_create_entities+0x22c>)
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  pose_msg.pose.pose.orientation.z = 0.0;
 800227e:	4957      	ldr	r1, [pc, #348]	@ (80023dc <uros_create_entities+0x22c>)
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.pose.pose.orientation.w = 0.0;
 800228c:	4953      	ldr	r1, [pc, #332]	@ (80023dc <uros_create_entities+0x22c>)
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 800229a:	f00f ffdf 	bl	801225c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b50      	ldr	r3, [pc, #320]	@ (80023e4 <uros_create_entities+0x234>)
 80022a2:	494b      	ldr	r1, [pc, #300]	@ (80023d0 <uros_create_entities+0x220>)
 80022a4:	4850      	ldr	r0, [pc, #320]	@ (80023e8 <uros_create_entities+0x238>)
 80022a6:	f00d ff85 	bl	80101b4 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 80022aa:	4b50      	ldr	r3, [pc, #320]	@ (80023ec <uros_create_entities+0x23c>)
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022b0:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80022b2:	4849      	ldr	r0, [pc, #292]	@ (80023d8 <uros_create_entities+0x228>)
 80022b4:	f00c fc38 	bl	800eb28 <rcl_publisher_get_rmw_handle>
 80022b8:	4603      	mov	r3, r0
 80022ba:	210a      	movs	r1, #10
 80022bc:	4618      	mov	r0, r3
 80022be:	f00f fc17 	bl	8011af0 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&pose_pub),
    10);

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80022c2:	4849      	ldr	r0, [pc, #292]	@ (80023e8 <uros_create_entities+0x238>)
 80022c4:	f00c fc30 	bl	800eb28 <rcl_publisher_get_rmw_handle>
 80022c8:	4603      	mov	r3, r0
 80022ca:	210a      	movs	r1, #10
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00f fc0f 	bl	8011af0 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for command velocity
 80022d2:	f00a f9e1 	bl	800c698 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b45      	ldr	r3, [pc, #276]	@ (80023f0 <uros_create_entities+0x240>)
 80022da:	493d      	ldr	r1, [pc, #244]	@ (80023d0 <uros_create_entities+0x220>)
 80022dc:	4845      	ldr	r0, [pc, #276]	@ (80023f4 <uros_create_entities+0x244>)
 80022de:	f00d ff9d 	bl	801021c <rclc_subscription_init_default>
    &cmd_vel_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "robot/cmd_vel");
  cmd_vel_msg.linear.x = 0.0;
 80022e2:	4945      	ldr	r1, [pc, #276]	@ (80023f8 <uros_create_entities+0x248>)
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c1 2300 	strd	r2, r3, [r1]
  cmd_vel_msg.linear.y = 0.0;
 80022f0:	4941      	ldr	r1, [pc, #260]	@ (80023f8 <uros_create_entities+0x248>)
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
  cmd_vel_msg.linear.z = 0.0;
 80022fe:	493e      	ldr	r1, [pc, #248]	@ (80023f8 <uros_create_entities+0x248>)
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9c1 2304 	strd	r2, r3, [r1, #16]
  cmd_vel_msg.angular.x = 0.0;
 800230c:	493a      	ldr	r1, [pc, #232]	@ (80023f8 <uros_create_entities+0x248>)
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9c1 2306 	strd	r2, r3, [r1, #24]
  cmd_vel_msg.angular.y = 0.0;
 800231a:	4937      	ldr	r1, [pc, #220]	@ (80023f8 <uros_create_entities+0x248>)
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9c1 2308 	strd	r2, r3, [r1, #32]
  cmd_vel_msg.angular.z = 0.0;
 8002328:	4933      	ldr	r1, [pc, #204]	@ (80023f8 <uros_create_entities+0x248>)
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8002336:	f00f ff91 	bl	801225c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800233a:	4602      	mov	r2, r0
 800233c:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <uros_create_entities+0x24c>)
 800233e:	4924      	ldr	r1, [pc, #144]	@ (80023d0 <uros_create_entities+0x220>)
 8002340:	482f      	ldr	r0, [pc, #188]	@ (8002400 <uros_create_entities+0x250>)
 8002342:	f00d ff6b 	bl	801021c <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <uros_create_entities+0x254>)
 8002348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800234c:	601a      	str	r2, [r3, #0]


  rclc_timer_init_default(&pose_pub_timer, &support, RCL_MS_TO_NS(50), pose_pub_timer_cb);
 800234e:	4b2e      	ldr	r3, [pc, #184]	@ (8002408 <uros_create_entities+0x258>)
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	a315      	add	r3, pc, #84	@ (adr r3, 80023a8 <uros_create_entities+0x1f8>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	491a      	ldr	r1, [pc, #104]	@ (80023c4 <uros_create_entities+0x214>)
 800235a:	482c      	ldr	r0, [pc, #176]	@ (800240c <uros_create_entities+0x25c>)
 800235c:	f00d ff92 	bl	8010284 <rclc_timer_init_default>

  
  rclc_executor_init(&executor, &support.context, 3, &allocator); // Create executor (1 timer + 2 subscriptions)
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <uros_create_entities+0x20c>)
 8002362:	2203      	movs	r2, #3
 8002364:	4917      	ldr	r1, [pc, #92]	@ (80023c4 <uros_create_entities+0x214>)
 8002366:	482a      	ldr	r0, [pc, #168]	@ (8002410 <uros_create_entities+0x260>)
 8002368:	f00d fb62 	bl	800fa30 <rclc_executor_init>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_sub_cb, ON_NEW_DATA); // Add subscriber to executor
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <uros_create_entities+0x264>)
 8002372:	4a21      	ldr	r2, [pc, #132]	@ (80023f8 <uros_create_entities+0x248>)
 8002374:	491f      	ldr	r1, [pc, #124]	@ (80023f4 <uros_create_entities+0x244>)
 8002376:	4826      	ldr	r0, [pc, #152]	@ (8002410 <uros_create_entities+0x260>)
 8002378:	f00d fbfe 	bl	800fb78 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <uros_create_entities+0x268>)
 8002382:	4a20      	ldr	r2, [pc, #128]	@ (8002404 <uros_create_entities+0x254>)
 8002384:	491e      	ldr	r1, [pc, #120]	@ (8002400 <uros_create_entities+0x250>)
 8002386:	4822      	ldr	r0, [pc, #136]	@ (8002410 <uros_create_entities+0x260>)
 8002388:	f00d fbf6 	bl	800fb78 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pose_pub_timer); // Add timer to executor
 800238c:	491f      	ldr	r1, [pc, #124]	@ (800240c <uros_create_entities+0x25c>)
 800238e:	4820      	ldr	r0, [pc, #128]	@ (8002410 <uros_create_entities+0x260>)
 8002390:	f00d fc26 	bl	800fbe0 <rclc_executor_add_timer>
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bdb0      	pop	{r4, r5, r7, pc}
 800239c:	f3af 8000 	nop.w
 80023a0:	00000000 	.word	0x00000000
 80023a4:	40b81000 	.word	0x40b81000
 80023a8:	02faf080 	.word	0x02faf080
 80023ac:	00000000 	.word	0x00000000
 80023b0:	20000ecc 	.word	0x20000ecc
 80023b4:	20000ed0 	.word	0x20000ed0
 80023b8:	20000ed4 	.word	0x20000ed4
 80023bc:	20000f0c 	.word	0x20000f0c
 80023c0:	20000f28 	.word	0x20000f28
 80023c4:	20000ed8 	.word	0x20000ed8
 80023c8:	0801d358 	.word	0x0801d358
 80023cc:	0801d35c 	.word	0x0801d35c
 80023d0:	20000f20 	.word	0x20000f20
 80023d4:	0801d368 	.word	0x0801d368
 80023d8:	20000bb0 	.word	0x20000bb0
 80023dc:	20000bb8 	.word	0x20000bb8
 80023e0:	4089f000 	.word	0x4089f000
 80023e4:	0801d374 	.word	0x0801d374
 80023e8:	20000eb8 	.word	0x20000eb8
 80023ec:	20000ebc 	.word	0x20000ebc
 80023f0:	0801d388 	.word	0x0801d388
 80023f4:	20000e80 	.word	0x20000e80
 80023f8:	20000e88 	.word	0x20000e88
 80023fc:	0801d398 	.word	0x0801d398
 8002400:	20000ec0 	.word	0x20000ec0
 8002404:	20000ec4 	.word	0x20000ec4
 8002408:	08002571 	.word	0x08002571
 800240c:	20000ec8 	.word	0x20000ec8
 8002410:	20000f30 	.word	0x20000f30
 8002414:	08002495 	.word	0x08002495
 8002418:	080025d1 	.word	0x080025d1

0800241c <uros_destroy_entities>:
void uros_destroy_entities(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8002422:	4814      	ldr	r0, [pc, #80]	@ (8002474 <uros_destroy_entities+0x58>)
 8002424:	f00b ff10 	bl	800e248 <rcl_context_get_rmw_context>
 8002428:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 800242a:	2100      	movs	r1, #0
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f00f fb67 	bl	8011b00 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&pose_pub, &node);
 8002432:	4911      	ldr	r1, [pc, #68]	@ (8002478 <uros_destroy_entities+0x5c>)
 8002434:	4811      	ldr	r0, [pc, #68]	@ (800247c <uros_destroy_entities+0x60>)
 8002436:	f00c faf9 	bl	800ea2c <rcl_publisher_fini>
  rcl_publisher_fini(&arm_pub, &node);
 800243a:	490f      	ldr	r1, [pc, #60]	@ (8002478 <uros_destroy_entities+0x5c>)
 800243c:	4810      	ldr	r0, [pc, #64]	@ (8002480 <uros_destroy_entities+0x64>)
 800243e:	f00c faf5 	bl	800ea2c <rcl_publisher_fini>

  // Destroy subscriber
  rcl_subscription_fini(&cmd_vel_sub, &node);
 8002442:	490d      	ldr	r1, [pc, #52]	@ (8002478 <uros_destroy_entities+0x5c>)
 8002444:	480f      	ldr	r0, [pc, #60]	@ (8002484 <uros_destroy_entities+0x68>)
 8002446:	f00c fc45 	bl	800ecd4 <rcl_subscription_fini>
  rcl_subscription_fini(&cmd_arm_sub, &node);
 800244a:	490b      	ldr	r1, [pc, #44]	@ (8002478 <uros_destroy_entities+0x5c>)
 800244c:	480e      	ldr	r0, [pc, #56]	@ (8002488 <uros_destroy_entities+0x6c>)
 800244e:	f00c fc41 	bl	800ecd4 <rcl_subscription_fini>

  rcl_timer_fini(&pose_pub_timer);
 8002452:	480e      	ldr	r0, [pc, #56]	@ (800248c <uros_destroy_entities+0x70>)
 8002454:	f00c fe72 	bl	800f13c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 8002458:	480d      	ldr	r0, [pc, #52]	@ (8002490 <uros_destroy_entities+0x74>)
 800245a:	f00d fb59 	bl	800fb10 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 800245e:	4806      	ldr	r0, [pc, #24]	@ (8002478 <uros_destroy_entities+0x5c>)
 8002460:	f00c f9c2 	bl	800e7e8 <rcl_node_fini>
  rclc_support_fini(&support);
 8002464:	4803      	ldr	r0, [pc, #12]	@ (8002474 <uros_destroy_entities+0x58>)
 8002466:	f00d fe3f 	bl	80100e8 <rclc_support_fini>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000ed8 	.word	0x20000ed8
 8002478:	20000f20 	.word	0x20000f20
 800247c:	20000bb0 	.word	0x20000bb0
 8002480:	20000eb8 	.word	0x20000eb8
 8002484:	20000e80 	.word	0x20000e80
 8002488:	20000ec0 	.word	0x20000ec0
 800248c:	20000ec8 	.word	0x20000ec8
 8002490:	20000f30 	.word	0x20000f30

08002494 <cmd_vel_sub_cb>:

void cmd_vel_sub_cb(const void* msgin) {
 8002494:	b4b0      	push	{r4, r5, r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	60fb      	str	r3, [r7, #12]
  
  // 检查消息指针是否有效
  if (msg == NULL) {
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01e      	beq.n	80024e4 <cmd_vel_sub_cb+0x50>
    return;
  }
  
  cmd_vel_msg = *msg;
 80024a6:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <cmd_vel_sub_cb+0x5c>)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4614      	mov	r4, r2
 80024ac:	461d      	mov	r5, r3
 80024ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  vx = cmd_vel_msg.linear.x;
 80024be:	4b0c      	ldr	r3, [pc, #48]	@ (80024f0 <cmd_vel_sub_cb+0x5c>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	490b      	ldr	r1, [pc, #44]	@ (80024f4 <cmd_vel_sub_cb+0x60>)
 80024c6:	e9c1 2300 	strd	r2, r3, [r1]
  vy = cmd_vel_msg.linear.y;
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <cmd_vel_sub_cb+0x5c>)
 80024cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024d0:	4909      	ldr	r1, [pc, #36]	@ (80024f8 <cmd_vel_sub_cb+0x64>)
 80024d2:	e9c1 2300 	strd	r2, r3, [r1]
  vz = cmd_vel_msg.angular.z;
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <cmd_vel_sub_cb+0x5c>)
 80024d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80024dc:	4907      	ldr	r1, [pc, #28]	@ (80024fc <cmd_vel_sub_cb+0x68>)
 80024de:	e9c1 2300 	strd	r2, r3, [r1]
 80024e2:	e000      	b.n	80024e6 <cmd_vel_sub_cb+0x52>
    return;
 80024e4:	bf00      	nop
//
////	  rcl_publish(&pose_pub, &pose_msg, NULL);
//  }
//
//  last_cmd_vel_time = current_time;
}
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bcb0      	pop	{r4, r5, r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000e88 	.word	0x20000e88
 80024f4:	20000b98 	.word	0x20000b98
 80024f8:	20000ba0 	.word	0x20000ba0
 80024fc:	20000ba8 	.word	0x20000ba8

08002500 <update_pose>:

void update_pose(double pos_x, double pos_y, double pos_z, double vel_x, double vel_y, double vel_z){
 8002500:	b480      	push	{r7}
 8002502:	b08d      	sub	sp, #52	@ 0x34
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
 800250a:	ed87 1b08 	vstr	d1, [r7, #32]
 800250e:	ed87 2b06 	vstr	d2, [r7, #24]
 8002512:	ed87 3b04 	vstr	d3, [r7, #16]
 8002516:	ed87 4b02 	vstr	d4, [r7, #8]
 800251a:	ed87 5b00 	vstr	d5, [r7]
  pose_msg.pose.pose.position.x = pos_x;
 800251e:	4912      	ldr	r1, [pc, #72]	@ (8002568 <update_pose+0x68>)
 8002520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002524:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = pos_y;
 8002528:	490f      	ldr	r1, [pc, #60]	@ (8002568 <update_pose+0x68>)
 800252a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800252e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.orientation.z = pos_z;
 8002532:	490d      	ldr	r1, [pc, #52]	@ (8002568 <update_pose+0x68>)
 8002534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002538:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.twist.twist.linear.x = vel_x;
 800253c:	490a      	ldr	r1, [pc, #40]	@ (8002568 <update_pose+0x68>)
 800253e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002542:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
  pose_msg.twist.twist.linear.y = vel_y;
 8002546:	4908      	ldr	r1, [pc, #32]	@ (8002568 <update_pose+0x68>)
 8002548:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800254c:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
  pose_msg.twist.twist.angular.z = vel_z;
 8002550:	4905      	ldr	r1, [pc, #20]	@ (8002568 <update_pose+0x68>)
 8002552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002556:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
}
 800255a:	bf00      	nop
 800255c:	3734      	adds	r7, #52	@ 0x34
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000bb8 	.word	0x20000bb8
 800256c:	00000000 	.word	0x00000000

08002570 <pose_pub_timer_cb>:


void pose_pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	e9c7 2300 	strd	r2, r3, [r7]
  // 更新时间戳
//  uint32_t current_tick = HAL_GetTick();
//  pose_msg.header.stamp.sec = current_tick / 1000;
//  pose_msg.header.stamp.nanosec = (current_tick % 1000) * 1000000;
  
  int64_t time_ns = rmw_uros_epoch_nanos();
 800257c:	f00f faaa 	bl	8011ad4 <rmw_uros_epoch_nanos>
 8002580:	e9c7 0104 	strd	r0, r1, [r7, #16]
  pose_msg.header.stamp.sec = time_ns / 1000000000LL;
 8002584:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002588:	a30d      	add	r3, pc, #52	@ (adr r3, 80025c0 <pose_pub_timer_cb+0x50>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe fac5 	bl	8000b1c <__aeabi_ldivmod>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <pose_pub_timer_cb+0x58>)
 8002598:	601a      	str	r2, [r3, #0]
  pose_msg.header.stamp.nanosec = time_ns % 1000000000LL;
 800259a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800259e:	a308      	add	r3, pc, #32	@ (adr r3, 80025c0 <pose_pub_timer_cb+0x50>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fe faba 	bl	8000b1c <__aeabi_ldivmod>
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <pose_pub_timer_cb+0x58>)
 80025aa:	605a      	str	r2, [r3, #4]
//  rcl_ret_t ret = rcl_publish(&pose_pub, &pose_msg, NULL);
  rcl_publish(&pose_pub, &pose_msg, NULL);
 80025ac:	2200      	movs	r2, #0
 80025ae:	4906      	ldr	r1, [pc, #24]	@ (80025c8 <pose_pub_timer_cb+0x58>)
 80025b0:	4806      	ldr	r0, [pc, #24]	@ (80025cc <pose_pub_timer_cb+0x5c>)
 80025b2:	f00c fa95 	bl	800eae0 <rcl_publish>
  // 可选：添加调试信息（如果需要的话）
  // printf("Published pose: x=%.2f, y=%.2f, yaw=%.2f, ret=%d\n", 
  //        pose_msg.pose.pose.position.x, 
  //        pose_msg.pose.pose.position.y, 
  //        current_yaw, ret);
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	3b9aca00 	.word	0x3b9aca00
 80025c4:	00000000 	.word	0x00000000
 80025c8:	20000bb8 	.word	0x20000bb8
 80025cc:	20000bb0 	.word	0x20000bb0

080025d0 <cmd_arm_sub_cb>:

void cmd_arm_sub_cb(const void* msgin) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 80025dc:	4a12      	ldr	r2, [pc, #72]	@ (8002628 <cmd_arm_sub_cb+0x58>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6013      	str	r3, [r2, #0]
  uint32_t current_time = HAL_GetTick();
 80025e4:	f001 fe4a 	bl	800427c <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]

  if(arm_msg.data != cmd_arm_msg.data) {
 80025ea:	4b10      	ldr	r3, [pc, #64]	@ (800262c <cmd_arm_sub_cb+0x5c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <cmd_arm_sub_cb+0x58>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d010      	beq.n	8002618 <cmd_arm_sub_cb+0x48>
    if(current_time - last_cmd_arm_time > 2000) {
 80025f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <cmd_arm_sub_cb+0x60>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002602:	d90c      	bls.n	800261e <cmd_arm_sub_cb+0x4e>
      arm_msg = cmd_arm_msg;
 8002604:	4a09      	ldr	r2, [pc, #36]	@ (800262c <cmd_arm_sub_cb+0x5c>)
 8002606:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <cmd_arm_sub_cb+0x58>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6013      	str	r3, [r2, #0]
      rcl_publish(&arm_pub, &arm_msg, NULL);
 800260c:	2200      	movs	r2, #0
 800260e:	4907      	ldr	r1, [pc, #28]	@ (800262c <cmd_arm_sub_cb+0x5c>)
 8002610:	4808      	ldr	r0, [pc, #32]	@ (8002634 <cmd_arm_sub_cb+0x64>)
 8002612:	f00c fa65 	bl	800eae0 <rcl_publish>
    }
  }
  else{
    last_cmd_arm_time = current_time;
  }
}
 8002616:	e002      	b.n	800261e <cmd_arm_sub_cb+0x4e>
    last_cmd_arm_time = current_time;
 8002618:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <cmd_arm_sub_cb+0x60>)
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6013      	str	r3, [r2, #0]
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000ec4 	.word	0x20000ec4
 800262c:	20000ebc 	.word	0x20000ebc
 8002630:	20000ed0 	.word	0x20000ed0
 8002634:	20000eb8 	.word	0x20000eb8

08002638 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002644:	f008 fb9c 	bl	800ad80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002648:	4b5a      	ldr	r3, [pc, #360]	@ (80027b4 <pvPortMallocMicroROS+0x17c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002650:	f000 f986 	bl	8002960 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002654:	4b58      	ldr	r3, [pc, #352]	@ (80027b8 <pvPortMallocMicroROS+0x180>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	f040 8090 	bne.w	8002782 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01e      	beq.n	80026a6 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002668:	2208      	movs	r2, #8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f023 0307 	bic.w	r3, r3, #7
 8002680:	3308      	adds	r3, #8
 8002682:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	e7fd      	b.n	80026a2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d06a      	beq.n	8002782 <pvPortMallocMicroROS+0x14a>
 80026ac:	4b43      	ldr	r3, [pc, #268]	@ (80027bc <pvPortMallocMicroROS+0x184>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d865      	bhi.n	8002782 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80026b6:	4b42      	ldr	r3, [pc, #264]	@ (80027c0 <pvPortMallocMicroROS+0x188>)
 80026b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80026ba:	4b41      	ldr	r3, [pc, #260]	@ (80027c0 <pvPortMallocMicroROS+0x188>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026c0:	e004      	b.n	80026cc <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d903      	bls.n	80026de <pvPortMallocMicroROS+0xa6>
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f1      	bne.n	80026c2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80026de:	4b35      	ldr	r3, [pc, #212]	@ (80027b4 <pvPortMallocMicroROS+0x17c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d04c      	beq.n	8002782 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2208      	movs	r2, #8
 80026ee:	4413      	add	r3, r2
 80026f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	1ad2      	subs	r2, r2, r3
 8002702:	2308      	movs	r3, #8
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	429a      	cmp	r2, r3
 8002708:	d920      	bls.n	800274c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800270a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4413      	add	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	613b      	str	r3, [r7, #16]
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002746:	69b8      	ldr	r0, [r7, #24]
 8002748:	f000 f96c 	bl	8002a24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <pvPortMallocMicroROS+0x184>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	4a19      	ldr	r2, [pc, #100]	@ (80027bc <pvPortMallocMicroROS+0x184>)
 8002758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <pvPortMallocMicroROS+0x184>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <pvPortMallocMicroROS+0x18c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d203      	bcs.n	800276e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <pvPortMallocMicroROS+0x184>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <pvPortMallocMicroROS+0x18c>)
 800276c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b11      	ldr	r3, [pc, #68]	@ (80027b8 <pvPortMallocMicroROS+0x180>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	431a      	orrs	r2, r3
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002782:	f008 fb0b 	bl	800ad9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002794:	f383 8811 	msr	BASEPRI, r3
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	f3bf 8f4f 	dsb	sy
 80027a0:	60fb      	str	r3, [r7, #12]
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80027a8:	69fb      	ldr	r3, [r7, #28]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3728      	adds	r7, #40	@ 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20004bc8 	.word	0x20004bc8
 80027b8:	20004bd4 	.word	0x20004bd4
 80027bc:	20004bcc 	.word	0x20004bcc
 80027c0:	20004bc0 	.word	0x20004bc0
 80027c4:	20004bd0 	.word	0x20004bd0

080027c8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04a      	beq.n	8002870 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80027da:	2308      	movs	r3, #8
 80027dc:	425b      	negs	r3, r3
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	4b22      	ldr	r3, [pc, #136]	@ (8002878 <vPortFreeMicroROS+0xb0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10b      	bne.n	800280e <vPortFreeMicroROS+0x46>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	60fb      	str	r3, [r7, #12]
}
 8002808:	bf00      	nop
 800280a:	bf00      	nop
 800280c:	e7fd      	b.n	800280a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00b      	beq.n	800282e <vPortFreeMicroROS+0x66>
	__asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	60bb      	str	r3, [r7, #8]
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	e7fd      	b.n	800282a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <vPortFreeMicroROS+0xb0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4013      	ands	r3, r2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d019      	beq.n	8002870 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d115      	bne.n	8002870 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <vPortFreeMicroROS+0xb0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002854:	f008 fa94 	bl	800ad80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <vPortFreeMicroROS+0xb4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4413      	add	r3, r2
 8002862:	4a06      	ldr	r2, [pc, #24]	@ (800287c <vPortFreeMicroROS+0xb4>)
 8002864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002866:	6938      	ldr	r0, [r7, #16]
 8002868:	f000 f8dc 	bl	8002a24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800286c:	f008 fa96 	bl	800ad9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20004bd4 	.word	0x20004bd4
 800287c:	20004bcc 	.word	0x20004bcc

08002880 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800288c:	2308      	movs	r3, #8
 800288e:	425b      	negs	r3, r3
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4413      	add	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <getBlockSize+0x38>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]

	return count;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20004bd4 	.word	0x20004bd4

080028bc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80028c6:	f008 fa5b 	bl	800ad80 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f7ff feb4 	bl	8002638 <pvPortMallocMicroROS>
 80028d0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <pvPortReallocMicroROS+0x4c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d014      	beq.n	8002908 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffce 	bl	8002880 <getBlockSize>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2208      	movs	r2, #8
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d201      	bcs.n	80028f8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	68b8      	ldr	r0, [r7, #8]
 80028fe:	f019 feca 	bl	801c696 <memcpy>

		vPortFreeMicroROS(pv);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff ff60 	bl	80027c8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002908:	f008 fa48 	bl	800ad9c <xTaskResumeAll>

	return newmem;
 800290c:	68bb      	ldr	r3, [r7, #8]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002920:	f008 fa2e 	bl	800ad80 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800292e:	6978      	ldr	r0, [r7, #20]
 8002930:	f7ff fe82 	bl	8002638 <pvPortMallocMicroROS>
 8002934:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	613b      	str	r3, [r7, #16]

  	while(count--)
 800293a:	e004      	b.n	8002946 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	613a      	str	r2, [r7, #16]
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	1e5a      	subs	r2, r3, #1
 800294a:	617a      	str	r2, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f5      	bne.n	800293c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002950:	f008 fa24 	bl	800ad9c <xTaskResumeAll>
  	return mem;
 8002954:	68fb      	ldr	r3, [r7, #12]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002966:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800296a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800296c:	4b27      	ldr	r3, [pc, #156]	@ (8002a0c <prvHeapInit+0xac>)
 800296e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3307      	adds	r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0307 	bic.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a0c <prvHeapInit+0xac>)
 8002990:	4413      	add	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002998:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <prvHeapInit+0xb0>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800299e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <prvHeapInit+0xb0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	4413      	add	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80029ac:	2208      	movs	r2, #8
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <prvHeapInit+0xb4>)
 80029c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <prvHeapInit+0xb4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <prvHeapInit+0xb4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	1ad2      	subs	r2, r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <prvHeapInit+0xb4>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <prvHeapInit+0xb8>)
 80029ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <prvHeapInit+0xbc>)
 80029f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029f8:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <prvHeapInit+0xc0>)
 80029fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	20000fc0 	.word	0x20000fc0
 8002a10:	20004bc0 	.word	0x20004bc0
 8002a14:	20004bc8 	.word	0x20004bc8
 8002a18:	20004bd0 	.word	0x20004bd0
 8002a1c:	20004bcc 	.word	0x20004bcc
 8002a20:	20004bd4 	.word	0x20004bd4

08002a24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a2c:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <prvInsertBlockIntoFreeList+0xac>)
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e002      	b.n	8002a38 <prvInsertBlockIntoFreeList+0x14>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d8f7      	bhi.n	8002a32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d108      	bne.n	8002a66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	441a      	add	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d118      	bne.n	8002aac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <prvInsertBlockIntoFreeList+0xb0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d00d      	beq.n	8002aa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	441a      	add	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e008      	b.n	8002ab4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <prvInsertBlockIntoFreeList+0xb0>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e003      	b.n	8002ab4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d002      	beq.n	8002ac2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20004bc0 	.word	0x20004bc0
 8002ad4:	20004bc8 	.word	0x20004bc8

08002ad8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ae6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ae8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002aec:	4904      	ldr	r1, [pc, #16]	@ (8002b00 <cubemx_transport_open+0x28>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f005 fe22 	bl	8008738 <HAL_UART_Receive_DMA>
    return true;
 8002af4:	2301      	movs	r3, #1
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20004bd8 	.word	0x20004bd8

08002b04 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b12:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f005 fe34 	bl	8008782 <HAL_UART_DMAStop>
    return true;
 8002b1a:	2301      	movs	r3, #1
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b38:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d11c      	bne.n	8002b80 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f005 fd76 	bl	8008640 <HAL_UART_Transmit_DMA>
 8002b54:	4603      	mov	r3, r0
 8002b56:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b58:	e002      	b.n	8002b60 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f007 f8ce 	bl	8009cfc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <cubemx_transport_write+0x4e>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d1f3      	bne.n	8002b5a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <cubemx_transport_write+0x58>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	e002      	b.n	8002b82 <cubemx_transport_write+0x5e>
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002b80:	2300      	movs	r3, #0
    }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
 8002b98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ba0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba6:	b672      	cpsid	i
}
 8002ba8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <cubemx_transport_read+0x9c>)
 8002bb8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bba:	b662      	cpsie	i
}
 8002bbc:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f007 f899 	bl	8009cfc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002bca:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <cubemx_transport_read+0xa0>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <cubemx_transport_read+0x9c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d103      	bne.n	8002bde <cubemx_transport_read+0x52>
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dbe3      	blt.n	8002ba6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002be2:	e011      	b.n	8002c08 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002be4:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <cubemx_transport_read+0xa0>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	440b      	add	r3, r1
 8002bee:	4910      	ldr	r1, [pc, #64]	@ (8002c30 <cubemx_transport_read+0xa4>)
 8002bf0:	5c8a      	ldrb	r2, [r1, r2]
 8002bf2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <cubemx_transport_read+0xa0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <cubemx_transport_read+0xa0>)
 8002c00:	6013      	str	r3, [r2, #0]
        wrote++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <cubemx_transport_read+0xa0>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <cubemx_transport_read+0x9c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d003      	beq.n	8002c1c <cubemx_transport_read+0x90>
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3e3      	bcc.n	8002be4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200053dc 	.word	0x200053dc
 8002c2c:	200053d8 	.word	0x200053d8
 8002c30:	20004bd8 	.word	0x20004bd8

08002c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c38:	f001 faea 	bl	8004210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c3c:	f000 f82a 	bl	8002c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c40:	f000 fba4 	bl	800338c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c44:	f000 fb7a 	bl	800333c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c48:	f000 fb4e 	bl	80032e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002c4c:	f000 f902 	bl	8002e54 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c50:	f000 f958 	bl	8002f04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c54:	f000 f9aa 	bl	8002fac <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c58:	f000 f9fc 	bl	8003054 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c5c:	f000 fa4e 	bl	80030fc <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c60:	f000 fa9a 	bl	8003198 <MX_TIM8_Init>
  MX_ADC1_Init();
 8002c64:	f000 f876 	bl	8002d54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c68:	f000 f8c6 	bl	8002df8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c6c:	f006 ff6a 	bl	8009b44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c70:	4a05      	ldr	r2, [pc, #20]	@ (8002c88 <main+0x54>)
 8002c72:	2100      	movs	r1, #0
 8002c74:	4805      	ldr	r0, [pc, #20]	@ (8002c8c <main+0x58>)
 8002c76:	f006 ffaf 	bl	8009bd8 <osThreadNew>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <main+0x5c>)
 8002c7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002c80:	f006 ff84 	bl	8009b8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <main+0x50>
 8002c88:	0801d3f0 	.word	0x0801d3f0
 8002c8c:	080040ad 	.word	0x080040ad
 8002c90:	20005734 	.word	0x20005734

08002c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b094      	sub	sp, #80	@ 0x50
 8002c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9a:	f107 031c 	add.w	r3, r7, #28
 8002c9e:	2234      	movs	r2, #52	@ 0x34
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f019 fc2e 	bl	801c504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	4b23      	ldr	r3, [pc, #140]	@ (8002d4c <SystemClock_Config+0xb8>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	4a22      	ldr	r2, [pc, #136]	@ (8002d4c <SystemClock_Config+0xb8>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cc8:	4b20      	ldr	r3, [pc, #128]	@ (8002d4c <SystemClock_Config+0xb8>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <SystemClock_Config+0xbc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d50 <SystemClock_Config+0xbc>)
 8002ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <SystemClock_Config+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 f805 	bl	8006d18 <HAL_RCC_OscConfig>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002d14:	f000 fba4 	bl	8003460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d18:	230f      	movs	r3, #15
 8002d1a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d2c:	f107 0308 	add.w	r3, r7, #8
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fcfa 	bl	800672c <HAL_RCC_ClockConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002d3e:	f000 fb8f 	bl	8003460 <Error_Handler>
  }
}
 8002d42:	bf00      	nop
 8002d44:	3750      	adds	r7, #80	@ 0x50
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000

08002d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d66:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d68:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <MX_ADC1_Init+0x9c>)
 8002d6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d72:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d78:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d84:	4b19      	ldr	r3, [pc, #100]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d8c:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d94:	4a17      	ldr	r2, [pc, #92]	@ (8002df4 <MX_ADC1_Init+0xa0>)
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002da4:	4b11      	ldr	r3, [pc, #68]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002db2:	480e      	ldr	r0, [pc, #56]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002db4:	f001 fa6e 	bl	8004294 <HAL_ADC_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002dbe:	f000 fb4f 	bl	8003460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dce:	463b      	mov	r3, r7
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4806      	ldr	r0, [pc, #24]	@ (8002dec <MX_ADC1_Init+0x98>)
 8002dd4:	f001 faa2 	bl	800431c <HAL_ADC_ConfigChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002dde:	f000 fb3f 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200053e0 	.word	0x200053e0
 8002df0:	40012000 	.word	0x40012000
 8002df4:	0f000001 	.word	0x0f000001

08002df8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002dfe:	4a13      	ldr	r2, [pc, #76]	@ (8002e4c <MX_I2C1_Init+0x54>)
 8002e00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e02:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <MX_I2C1_Init+0x58>)
 8002e06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e22:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e28:	4b07      	ldr	r3, [pc, #28]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e34:	4804      	ldr	r0, [pc, #16]	@ (8002e48 <MX_I2C1_Init+0x50>)
 8002e36:	f002 fc25 	bl	8005684 <HAL_I2C_Init>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e40:	f000 fb0e 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20005428 	.word	0x20005428
 8002e4c:	40005400 	.word	0x40005400
 8002e50:	000186a0 	.word	0x000186a0

08002e54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	@ 0x30
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	2224      	movs	r2, #36	@ 0x24
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f019 fb4e 	bl	801c504 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e70:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e72:	4a23      	ldr	r2, [pc, #140]	@ (8002f00 <MX_TIM1_Init+0xac>)
 8002e74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e76:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e96:	4b19      	ldr	r3, [pc, #100]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	480d      	ldr	r0, [pc, #52]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002ec8:	f004 fb9c 	bl	8007604 <HAL_TIM_Encoder_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002ed2:	f000 fac5 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4806      	ldr	r0, [pc, #24]	@ (8002efc <MX_TIM1_Init+0xa8>)
 8002ee4:	f005 fa7a 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002eee:	f000 fab7 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ef2:	bf00      	nop
 8002ef4:	3730      	adds	r7, #48	@ 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000547c 	.word	0x2000547c
 8002f00:	40010000 	.word	0x40010000

08002f04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	@ 0x30
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	2224      	movs	r2, #36	@ 0x24
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f019 faf6 	bl	801c504 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f20:	4b21      	ldr	r3, [pc, #132]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f28:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f34:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f50:	2301      	movs	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f60:	2301      	movs	r3, #1
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f6c:	f107 030c 	add.w	r3, r7, #12
 8002f70:	4619      	mov	r1, r3
 8002f72:	480d      	ldr	r0, [pc, #52]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f74:	f004 fb46 	bl	8007604 <HAL_TIM_Encoder_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002f7e:	f000 fa6f 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4806      	ldr	r0, [pc, #24]	@ (8002fa8 <MX_TIM2_Init+0xa4>)
 8002f90:	f005 fa24 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f9a:	f000 fa61 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	3730      	adds	r7, #48	@ 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200054c4 	.word	0x200054c4

08002fac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08c      	sub	sp, #48	@ 0x30
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fb2:	f107 030c 	add.w	r3, r7, #12
 8002fb6:	2224      	movs	r2, #36	@ 0x24
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f019 faa2 	bl	801c504 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fc8:	4b20      	ldr	r3, [pc, #128]	@ (800304c <MX_TIM3_Init+0xa0>)
 8002fca:	4a21      	ldr	r2, [pc, #132]	@ (8003050 <MX_TIM3_Init+0xa4>)
 8002fcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fce:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <MX_TIM3_Init+0xa0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <MX_TIM3_Init+0xa0>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	@ (800304c <MX_TIM3_Init+0xa0>)
 8002fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <MX_TIM3_Init+0xa0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe8:	4b18      	ldr	r3, [pc, #96]	@ (800304c <MX_TIM3_Init+0xa0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003006:	2301      	movs	r3, #1
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800300a:	2300      	movs	r3, #0
 800300c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4619      	mov	r1, r3
 8003018:	480c      	ldr	r0, [pc, #48]	@ (800304c <MX_TIM3_Init+0xa0>)
 800301a:	f004 faf3 	bl	8007604 <HAL_TIM_Encoder_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003024:	f000 fa1c 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	@ (800304c <MX_TIM3_Init+0xa0>)
 8003036:	f005 f9d1 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003040:	f000 fa0e 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3730      	adds	r7, #48	@ 0x30
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	2000550c 	.word	0x2000550c
 8003050:	40000400 	.word	0x40000400

08003054 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	@ 0x30
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f019 fa4e 	bl	801c504 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 8003072:	4a21      	ldr	r2, [pc, #132]	@ (80030f8 <MX_TIM4_Init+0xa4>)
 8003074:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003076:	4b1f      	ldr	r3, [pc, #124]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b1d      	ldr	r3, [pc, #116]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 8003084:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003088:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308a:	4b1a      	ldr	r3, [pc, #104]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 8003092:	2200      	movs	r2, #0
 8003094:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003096:	2303      	movs	r3, #3
 8003098:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800309a:	2300      	movs	r3, #0
 800309c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800309e:	2301      	movs	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030ae:	2301      	movs	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80030ba:	f107 030c 	add.w	r3, r7, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	480c      	ldr	r0, [pc, #48]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 80030c2:	f004 fa9f 	bl	8007604 <HAL_TIM_Encoder_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80030cc:	f000 f9c8 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030d8:	1d3b      	adds	r3, r7, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	4805      	ldr	r0, [pc, #20]	@ (80030f4 <MX_TIM4_Init+0xa0>)
 80030de:	f005 f97d 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80030e8:	f000 f9ba 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030ec:	bf00      	nop
 80030ee:	3730      	adds	r7, #48	@ 0x30
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20005554 	.word	0x20005554
 80030f8:	40000800 	.word	0x40000800

080030fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003110:	463b      	mov	r3, r7
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003118:	4b1d      	ldr	r3, [pc, #116]	@ (8003190 <MX_TIM5_Init+0x94>)
 800311a:	4a1e      	ldr	r2, [pc, #120]	@ (8003194 <MX_TIM5_Init+0x98>)
 800311c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 800311e:	4b1c      	ldr	r3, [pc, #112]	@ (8003190 <MX_TIM5_Init+0x94>)
 8003120:	220f      	movs	r2, #15
 8003122:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b1a      	ldr	r3, [pc, #104]	@ (8003190 <MX_TIM5_Init+0x94>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800312a:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <MX_TIM5_Init+0x94>)
 800312c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003130:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b17      	ldr	r3, [pc, #92]	@ (8003190 <MX_TIM5_Init+0x94>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003138:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <MX_TIM5_Init+0x94>)
 800313a:	2200      	movs	r2, #0
 800313c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800313e:	4814      	ldr	r0, [pc, #80]	@ (8003190 <MX_TIM5_Init+0x94>)
 8003140:	f004 f888 	bl	8007254 <HAL_TIM_Base_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800314a:	f000 f989 	bl	8003460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	4619      	mov	r1, r3
 800315a:	480d      	ldr	r0, [pc, #52]	@ (8003190 <MX_TIM5_Init+0x94>)
 800315c:	f004 fd38 	bl	8007bd0 <HAL_TIM_ConfigClockSource>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003166:	f000 f97b 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003172:	463b      	mov	r3, r7
 8003174:	4619      	mov	r1, r3
 8003176:	4806      	ldr	r0, [pc, #24]	@ (8003190 <MX_TIM5_Init+0x94>)
 8003178:	f005 f930 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003182:	f000 f96d 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000559c 	.word	0x2000559c
 8003194:	40000c00 	.word	0x40000c00

08003198 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b092      	sub	sp, #72	@ 0x48
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
 80031b8:	615a      	str	r2, [r3, #20]
 80031ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	2220      	movs	r2, #32
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f019 f99e 	bl	801c504 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031c8:	4b45      	ldr	r3, [pc, #276]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031ca:	4a46      	ldr	r2, [pc, #280]	@ (80032e4 <MX_TIM8_Init+0x14c>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80031ce:	4b44      	ldr	r3, [pc, #272]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031d0:	22b3      	movs	r2, #179	@ 0xb3
 80031d2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d4:	4b42      	ldr	r3, [pc, #264]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80031da:	4b41      	ldr	r3, [pc, #260]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e2:	4b3f      	ldr	r3, [pc, #252]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031e8:	4b3d      	ldr	r3, [pc, #244]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ee:	4b3c      	ldr	r3, [pc, #240]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80031f4:	483a      	ldr	r0, [pc, #232]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80031f6:	f004 f8ed 	bl	80073d4 <HAL_TIM_PWM_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003200:	f000 f92e 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003204:	2300      	movs	r3, #0
 8003206:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003208:	2300      	movs	r3, #0
 800320a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800320c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003210:	4619      	mov	r1, r3
 8003212:	4833      	ldr	r0, [pc, #204]	@ (80032e0 <MX_TIM8_Init+0x148>)
 8003214:	f005 f8e2 	bl	80083dc <HAL_TIMEx_MasterConfigSynchronization>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800321e:	f000 f91f 	bl	8003460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003222:	2360      	movs	r3, #96	@ 0x60
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003232:	2300      	movs	r3, #0
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800323e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003242:	2200      	movs	r2, #0
 8003244:	4619      	mov	r1, r3
 8003246:	4826      	ldr	r0, [pc, #152]	@ (80032e0 <MX_TIM8_Init+0x148>)
 8003248:	f004 fc00 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003252:	f000 f905 	bl	8003460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325a:	2204      	movs	r2, #4
 800325c:	4619      	mov	r1, r3
 800325e:	4820      	ldr	r0, [pc, #128]	@ (80032e0 <MX_TIM8_Init+0x148>)
 8003260:	f004 fbf4 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800326a:	f000 f8f9 	bl	8003460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800326e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003272:	2208      	movs	r2, #8
 8003274:	4619      	mov	r1, r3
 8003276:	481a      	ldr	r0, [pc, #104]	@ (80032e0 <MX_TIM8_Init+0x148>)
 8003278:	f004 fbe8 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003282:	f000 f8ed 	bl	8003460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800328a:	220c      	movs	r2, #12
 800328c:	4619      	mov	r1, r3
 800328e:	4814      	ldr	r0, [pc, #80]	@ (80032e0 <MX_TIM8_Init+0x148>)
 8003290:	f004 fbdc 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800329a:	f000 f8e1 	bl	8003460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	4619      	mov	r1, r3
 80032c0:	4807      	ldr	r0, [pc, #28]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80032c2:	f005 f907 	bl	80084d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80032cc:	f000 f8c8 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80032d0:	4803      	ldr	r0, [pc, #12]	@ (80032e0 <MX_TIM8_Init+0x148>)
 80032d2:	f000 fc57 	bl	8003b84 <HAL_TIM_MspPostInit>

}
 80032d6:	bf00      	nop
 80032d8:	3748      	adds	r7, #72	@ 0x48
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200055e4 	.word	0x200055e4
 80032e4:	40010400 	.word	0x40010400

080032e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032ec:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 80032ee:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <MX_USART2_UART_Init+0x50>)
 80032f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032f2:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 80032f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800330c:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 800330e:	220c      	movs	r2, #12
 8003310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003318:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_USART2_UART_Init+0x4c>)
 8003320:	f005 f93e 	bl	80085a0 <HAL_UART_Init>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800332a:	f000 f899 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000562c 	.word	0x2000562c
 8003338:	40004400 	.word	0x40004400

0800333c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <MX_DMA_Init+0x4c>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	4a0f      	ldr	r2, [pc, #60]	@ (8003388 <MX_DMA_Init+0x4c>)
 800334c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003350:	6313      	str	r3, [r2, #48]	@ 0x30
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <MX_DMA_Init+0x4c>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	2105      	movs	r1, #5
 8003362:	2010      	movs	r0, #16
 8003364:	f001 fac0 	bl	80048e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003368:	2010      	movs	r0, #16
 800336a:	f001 fad9 	bl	8004920 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2105      	movs	r1, #5
 8003372:	2011      	movs	r0, #17
 8003374:	f001 fab8 	bl	80048e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003378:	2011      	movs	r0, #17
 800337a:	f001 fad1 	bl	8004920 <HAL_NVIC_EnableIRQ>

}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800

0800338c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b088      	sub	sp, #32
 8003390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b2:	4b28      	ldr	r3, [pc, #160]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	4a23      	ldr	r2, [pc, #140]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ce:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <MX_GPIO_Init+0xc8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80033fc:	4816      	ldr	r0, [pc, #88]	@ (8003458 <MX_GPIO_Init+0xcc>)
 80033fe:	f002 f927 	bl	8005650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003408:	4814      	ldr	r0, [pc, #80]	@ (800345c <MX_GPIO_Init+0xd0>)
 800340a:	f002 f921 	bl	8005650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800340e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8003412:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003414:	2301      	movs	r3, #1
 8003416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	4619      	mov	r1, r3
 8003426:	480c      	ldr	r0, [pc, #48]	@ (8003458 <MX_GPIO_Init+0xcc>)
 8003428:	f001 fe8a 	bl	8005140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800342c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003432:	2301      	movs	r3, #1
 8003434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 030c 	add.w	r3, r7, #12
 8003442:	4619      	mov	r1, r3
 8003444:	4805      	ldr	r0, [pc, #20]	@ (800345c <MX_GPIO_Init+0xd0>)
 8003446:	f001 fe7b 	bl	8005140 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800344a:	bf00      	nop
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800
 8003458:	40020400 	.word	0x40020400
 800345c:	40020000 	.word	0x40020000

08003460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <Error_Handler+0x8>

0800346c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003476:	4b0c      	ldr	r3, [pc, #48]	@ (80034a8 <microros_allocate+0x3c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	461a      	mov	r2, r3
 8003482:	4b09      	ldr	r3, [pc, #36]	@ (80034a8 <microros_allocate+0x3c>)
 8003484:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003486:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <microros_allocate+0x40>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4413      	add	r3, r2
 8003490:	461a      	mov	r2, r3
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <microros_allocate+0x40>)
 8003494:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff f8ce 	bl	8002638 <pvPortMallocMicroROS>
 800349c:	4603      	mov	r3, r0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20008674 	.word	0x20008674
 80034ac:	20008678 	.word	0x20008678

080034b0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00c      	beq.n	80034da <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff f9dd 	bl	8002880 <getBlockSize>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4a06      	ldr	r2, [pc, #24]	@ (80034e4 <microros_deallocate+0x34>)
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b04      	ldr	r3, [pc, #16]	@ (80034e4 <microros_deallocate+0x34>)
 80034d2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff f977 	bl	80027c8 <vPortFreeMicroROS>
  }
}
 80034da:	bf00      	nop
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20008678 	.word	0x20008678

080034e8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80034f4:	4b15      	ldr	r3, [pc, #84]	@ (800354c <microros_reallocate+0x64>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	4413      	add	r3, r2
 80034fe:	461a      	mov	r2, r3
 8003500:	4b12      	ldr	r3, [pc, #72]	@ (800354c <microros_reallocate+0x64>)
 8003502:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003504:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <microros_reallocate+0x68>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	461a      	mov	r2, r3
 8003510:	4b0f      	ldr	r3, [pc, #60]	@ (8003550 <microros_reallocate+0x68>)
 8003512:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	f7ff f88c 	bl	8002638 <pvPortMallocMicroROS>
 8003520:	4603      	mov	r3, r0
 8003522:	e00e      	b.n	8003542 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff f9ab 	bl	8002880 <getBlockSize>
 800352a:	4603      	mov	r3, r0
 800352c:	4a08      	ldr	r2, [pc, #32]	@ (8003550 <microros_reallocate+0x68>)
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	461a      	mov	r2, r3
 8003534:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <microros_reallocate+0x68>)
 8003536:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff f9be 	bl	80028bc <pvPortReallocMicroROS>
 8003540:	4603      	mov	r3, r0
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20008674 	.word	0x20008674
 8003550:	20008678 	.word	0x20008678

08003554 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	4a0c      	ldr	r2, [pc, #48]	@ (800359c <microros_zero_allocate+0x48>)
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	4413      	add	r3, r2
 800356e:	461a      	mov	r2, r3
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <microros_zero_allocate+0x48>)
 8003572:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	4a08      	ldr	r2, [pc, #32]	@ (80035a0 <microros_zero_allocate+0x4c>)
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4413      	add	r3, r2
 8003582:	461a      	mov	r2, r3
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <microros_zero_allocate+0x4c>)
 8003586:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff f9c3 	bl	8002916 <pvPortCallocMicroROS>
 8003590:	4603      	mov	r3, r0
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20008674 	.word	0x20008674
 80035a0:	20008678 	.word	0x20008678
 80035a4:	00000000 	.word	0x00000000

080035a8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80035a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	a320      	add	r3, pc, #128	@ (adr r3, 8003640 <UTILS_NanosecondsToTimespec+0x98>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fd faaa 	bl	8000b1c <__aeabi_ldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80035d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003640 <UTILS_NanosecondsToTimespec+0x98>)
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f7fd fa9e 	bl	8000b1c <__aeabi_ldivmod>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da20      	bge.n	800362e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a11      	ldr	r2, [pc, #68]	@ (8003638 <UTILS_NanosecondsToTimespec+0x90>)
 80035f2:	fb82 1203 	smull	r1, r2, r2, r3
 80035f6:	1712      	asrs	r2, r2, #28
 80035f8:	17db      	asrs	r3, r3, #31
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	3301      	adds	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	6979      	ldr	r1, [r7, #20]
 8003608:	17c8      	asrs	r0, r1, #31
 800360a:	460c      	mov	r4, r1
 800360c:	4605      	mov	r5, r0
 800360e:	ebb2 0804 	subs.w	r8, r2, r4
 8003612:	eb63 0905 	sbc.w	r9, r3, r5
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4906      	ldr	r1, [pc, #24]	@ (800363c <UTILS_NanosecondsToTimespec+0x94>)
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]
    }
}
 800362e:	bf00      	nop
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003638:	44b82fa1 	.word	0x44b82fa1
 800363c:	3b9aca00 	.word	0x3b9aca00
 8003640:	3b9aca00 	.word	0x3b9aca00
 8003644:	00000000 	.word	0x00000000

08003648 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800364c:	b08e      	sub	sp, #56	@ 0x38
 800364e:	af00      	add	r7, sp, #0
 8003650:	6278      	str	r0, [r7, #36]	@ 0x24
 8003652:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003654:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003658:	2300      	movs	r3, #0
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 0300 	mov.w	r3, #0
 8003666:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800366a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800366e:	4618      	mov	r0, r3
 8003670:	f007 fe10 	bl	800b294 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003676:	17da      	asrs	r2, r3, #31
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	61fa      	str	r2, [r7, #28]
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	f04f 0300 	mov.w	r3, #0
 8003684:	69b9      	ldr	r1, [r7, #24]
 8003686:	000b      	movs	r3, r1
 8003688:	2200      	movs	r2, #0
 800368a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2200      	movs	r2, #0
 8003692:	461c      	mov	r4, r3
 8003694:	4615      	mov	r5, r2
 8003696:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800369a:	1911      	adds	r1, r2, r4
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	416b      	adcs	r3, r5
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80036aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	f04f 0400 	mov.w	r4, #0
 80036b6:	f04f 0500 	mov.w	r5, #0
 80036ba:	015d      	lsls	r5, r3, #5
 80036bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80036c0:	0154      	lsls	r4, r2, #5
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	ebb2 0800 	subs.w	r8, r2, r0
 80036ca:	eb63 0901 	sbc.w	r9, r3, r1
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80036da:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80036de:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80036e2:	4690      	mov	r8, r2
 80036e4:	4699      	mov	r9, r3
 80036e6:	eb18 0a00 	adds.w	sl, r8, r0
 80036ea:	eb49 0b01 	adc.w	fp, r9, r1
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036fa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036fe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003702:	ebb2 040a 	subs.w	r4, r2, sl
 8003706:	603c      	str	r4, [r7, #0]
 8003708:	eb63 030b 	sbc.w	r3, r3, fp
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003712:	4623      	mov	r3, r4
 8003714:	181b      	adds	r3, r3, r0
 8003716:	613b      	str	r3, [r7, #16]
 8003718:	462b      	mov	r3, r5
 800371a:	eb41 0303 	adc.w	r3, r1, r3
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003726:	f7ff ff3f 	bl	80035a8 <UTILS_NanosecondsToTimespec>

    return 0;
 800372a:	2300      	movs	r3, #0
 800372c:	4618      	mov	r0, r3
 800372e:	3738      	adds	r7, #56	@ 0x38
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_MspInit+0x54>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	4a11      	ldr	r2, [pc, #68]	@ (800378c <HAL_MspInit+0x54>)
 8003748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800374c:	6453      	str	r3, [r2, #68]	@ 0x44
 800374e:	4b0f      	ldr	r3, [pc, #60]	@ (800378c <HAL_MspInit+0x54>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	603b      	str	r3, [r7, #0]
 800375e:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_MspInit+0x54>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a0a      	ldr	r2, [pc, #40]	@ (800378c <HAL_MspInit+0x54>)
 8003764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_MspInit+0x54>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003776:	2200      	movs	r2, #0
 8003778:	210f      	movs	r1, #15
 800377a:	f06f 0001 	mvn.w	r0, #1
 800377e:	f001 f8b3 	bl	80048e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a24      	ldr	r2, [pc, #144]	@ (8003840 <HAL_ADC_MspInit+0xb0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d141      	bne.n	8003836 <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	4b23      	ldr	r3, [pc, #140]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	4a22      	ldr	r2, [pc, #136]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037c2:	4b20      	ldr	r3, [pc, #128]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b19      	ldr	r3, [pc, #100]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	4b15      	ldr	r3, [pc, #84]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	4a14      	ldr	r2, [pc, #80]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <HAL_ADC_MspInit+0xb4>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003806:	233f      	movs	r3, #63	@ 0x3f
 8003808:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800380a:	2303      	movs	r3, #3
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4619      	mov	r1, r3
 8003818:	480b      	ldr	r0, [pc, #44]	@ (8003848 <HAL_ADC_MspInit+0xb8>)
 800381a:	f001 fc91 	bl	8005140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800381e:	2301      	movs	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003822:	2303      	movs	r3, #3
 8003824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382a:	f107 0314 	add.w	r3, r7, #20
 800382e:	4619      	mov	r1, r3
 8003830:	4806      	ldr	r0, [pc, #24]	@ (800384c <HAL_ADC_MspInit+0xbc>)
 8003832:	f001 fc85 	bl	8005140 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003836:	bf00      	nop
 8003838:	3728      	adds	r7, #40	@ 0x28
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40012000 	.word	0x40012000
 8003844:	40023800 	.word	0x40023800
 8003848:	40020800 	.word	0x40020800
 800384c:	40020000 	.word	0x40020000

08003850 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_I2C_MspInit+0x84>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12c      	bne.n	80038cc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <HAL_I2C_MspInit+0x88>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4a17      	ldr	r2, [pc, #92]	@ (80038d8 <HAL_I2C_MspInit+0x88>)
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	6313      	str	r3, [r2, #48]	@ 0x30
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <HAL_I2C_MspInit+0x88>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800388e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003894:	2312      	movs	r3, #18
 8003896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389c:	2303      	movs	r3, #3
 800389e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80038a0:	2304      	movs	r3, #4
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4619      	mov	r1, r3
 80038aa:	480c      	ldr	r0, [pc, #48]	@ (80038dc <HAL_I2C_MspInit+0x8c>)
 80038ac:	f001 fc48 	bl	8005140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	4b08      	ldr	r3, [pc, #32]	@ (80038d8 <HAL_I2C_MspInit+0x88>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	4a07      	ldr	r2, [pc, #28]	@ (80038d8 <HAL_I2C_MspInit+0x88>)
 80038ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038be:	6413      	str	r3, [r2, #64]	@ 0x40
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <HAL_I2C_MspInit+0x88>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80038cc:	bf00      	nop
 80038ce:	3728      	adds	r7, #40	@ 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40005400 	.word	0x40005400
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020400 	.word	0x40020400

080038e0 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0b      	ldr	r2, [pc, #44]	@ (800391c <HAL_I2C_MspDeInit+0x3c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d10f      	bne.n	8003912 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80038f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <HAL_I2C_MspDeInit+0x40>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003920 <HAL_I2C_MspDeInit+0x40>)
 80038f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038fc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80038fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003902:	4808      	ldr	r0, [pc, #32]	@ (8003924 <HAL_I2C_MspDeInit+0x44>)
 8003904:	f001 fdb0 	bl	8005468 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003908:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800390c:	4805      	ldr	r0, [pc, #20]	@ (8003924 <HAL_I2C_MspDeInit+0x44>)
 800390e:	f001 fdab 	bl	8005468 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40005400 	.word	0x40005400
 8003920:	40023800 	.word	0x40023800
 8003924:	40020400 	.word	0x40020400

08003928 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b090      	sub	sp, #64	@ 0x40
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a64      	ldr	r2, [pc, #400]	@ (8003ad8 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d12d      	bne.n	80039a6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800394e:	4b63      	ldr	r3, [pc, #396]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	4a62      	ldr	r2, [pc, #392]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6453      	str	r3, [r2, #68]	@ 0x44
 800395a:	4b60      	ldr	r3, [pc, #384]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003964:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
 800396a:	4b5c      	ldr	r3, [pc, #368]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	4a5b      	ldr	r2, [pc, #364]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6313      	str	r3, [r2, #48]	@ 0x30
 8003976:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003982:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003994:	2301      	movs	r3, #1
 8003996:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800399c:	4619      	mov	r1, r3
 800399e:	4850      	ldr	r0, [pc, #320]	@ (8003ae0 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80039a0:	f001 fbce 	bl	8005140 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80039a4:	e094      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ae:	d12c      	bne.n	8003a0a <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039b0:	2300      	movs	r3, #0
 80039b2:	623b      	str	r3, [r7, #32]
 80039b4:	4b49      	ldr	r3, [pc, #292]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b8:	4a48      	ldr	r2, [pc, #288]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	6413      	str	r3, [r2, #64]	@ 0x40
 80039c0:	4b46      	ldr	r3, [pc, #280]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	4b42      	ldr	r3, [pc, #264]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d4:	4a41      	ldr	r2, [pc, #260]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6313      	str	r3, [r2, #48]	@ 0x30
 80039dc:	4b3f      	ldr	r3, [pc, #252]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80039e8:	2322      	movs	r3, #34	@ 0x22
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ec:	2302      	movs	r3, #2
 80039ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039f8:	2301      	movs	r3, #1
 80039fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a00:	4619      	mov	r1, r3
 8003a02:	4837      	ldr	r0, [pc, #220]	@ (8003ae0 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003a04:	f001 fb9c 	bl	8005140 <HAL_GPIO_Init>
}
 8003a08:	e062      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a35      	ldr	r2, [pc, #212]	@ (8003ae4 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d12c      	bne.n	8003a6e <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	4b30      	ldr	r3, [pc, #192]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a24:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	61bb      	str	r3, [r7, #24]
 8003a2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	4b29      	ldr	r3, [pc, #164]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	4a28      	ldr	r2, [pc, #160]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a40:	4b26      	ldr	r3, [pc, #152]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a4c:	23c0      	movs	r3, #192	@ 0xc0
 8003a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a64:	4619      	mov	r1, r3
 8003a66:	481e      	ldr	r0, [pc, #120]	@ (8003ae0 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003a68:	f001 fb6a 	bl	8005140 <HAL_GPIO_Init>
}
 8003a6c:	e030      	b.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae8 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d12b      	bne.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	4a16      	ldr	r2, [pc, #88]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	4a0f      	ldr	r2, [pc, #60]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ab0:	23c0      	movs	r3, #192	@ 0xc0
 8003ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4808      	ldr	r0, [pc, #32]	@ (8003aec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003acc:	f001 fb38 	bl	8005140 <HAL_GPIO_Init>
}
 8003ad0:	bf00      	nop
 8003ad2:	3740      	adds	r7, #64	@ 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40020400 	.word	0x40020400

08003af0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0e      	ldr	r2, [pc, #56]	@ (8003b38 <HAL_TIM_Base_MspInit+0x48>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d115      	bne.n	8003b2e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <HAL_TIM_Base_MspInit+0x4c>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b3c <HAL_TIM_Base_MspInit+0x4c>)
 8003b0c:	f043 0308 	orr.w	r3, r3, #8
 8003b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b12:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <HAL_TIM_Base_MspInit+0x4c>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2105      	movs	r1, #5
 8003b22:	2032      	movs	r0, #50	@ 0x32
 8003b24:	f000 fee0 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b28:	2032      	movs	r0, #50	@ 0x32
 8003b2a:	f000 fef9 	bl	8004920 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40023800 	.word	0x40023800

08003b40 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b7c <HAL_TIM_PWM_MspInit+0x3c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10d      	bne.n	8003b6e <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <HAL_TIM_PWM_MspInit+0x40>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_TIM_PWM_MspInit+0x40>)
 8003b5c:	f043 0302 	orr.w	r3, r3, #2
 8003b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b62:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <HAL_TIM_PWM_MspInit+0x40>)
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010400 	.word	0x40010400
 8003b80:	40023800 	.word	0x40023800

08003b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <HAL_TIM_MspPostInit+0x68>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d11e      	bne.n	8003be4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <HAL_TIM_MspPostInit+0x6c>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <HAL_TIM_MspPostInit+0x6c>)
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_TIM_MspPostInit+0x6c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003bc2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003bc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4805      	ldr	r0, [pc, #20]	@ (8003bf4 <HAL_TIM_MspPostInit+0x70>)
 8003be0:	f001 faae 	bl	8005140 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003be4:	bf00      	nop
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40010400 	.word	0x40010400
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020800 	.word	0x40020800

08003bf8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	@ 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a4d      	ldr	r2, [pc, #308]	@ (8003d4c <HAL_UART_MspInit+0x154>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	f040 8093 	bne.w	8003d42 <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <HAL_UART_MspInit+0x158>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	4a4a      	ldr	r2, [pc, #296]	@ (8003d50 <HAL_UART_MspInit+0x158>)
 8003c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c2c:	4b48      	ldr	r3, [pc, #288]	@ (8003d50 <HAL_UART_MspInit+0x158>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4b44      	ldr	r3, [pc, #272]	@ (8003d50 <HAL_UART_MspInit+0x158>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c40:	4a43      	ldr	r2, [pc, #268]	@ (8003d50 <HAL_UART_MspInit+0x158>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c48:	4b41      	ldr	r3, [pc, #260]	@ (8003d50 <HAL_UART_MspInit+0x158>)
 8003c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c54:	230c      	movs	r3, #12
 8003c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c64:	2307      	movs	r3, #7
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4839      	ldr	r0, [pc, #228]	@ (8003d54 <HAL_UART_MspInit+0x15c>)
 8003c70:	f001 fa66 	bl	8005140 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003c74:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c76:	4a39      	ldr	r2, [pc, #228]	@ (8003d5c <HAL_UART_MspInit+0x164>)
 8003c78:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003c7a:	4b37      	ldr	r3, [pc, #220]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c7c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c80:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c82:	4b35      	ldr	r3, [pc, #212]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c88:	4b33      	ldr	r3, [pc, #204]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c8e:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c90:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c94:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c96:	4b30      	ldr	r3, [pc, #192]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003caa:	4b2b      	ldr	r3, [pc, #172]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003cac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003cb0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb2:	4b29      	ldr	r3, [pc, #164]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003cb8:	4827      	ldr	r0, [pc, #156]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003cba:	f000 fe3f 	bl	800493c <HAL_DMA_Init>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003cc4:	f7ff fbcc 	bl	8003460 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a23      	ldr	r2, [pc, #140]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cce:	4a22      	ldr	r2, [pc, #136]	@ (8003d58 <HAL_UART_MspInit+0x160>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003cd4:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003cd6:	4a23      	ldr	r2, [pc, #140]	@ (8003d64 <HAL_UART_MspInit+0x16c>)
 8003cd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003cda:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003cdc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003ce0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003ce4:	2240      	movs	r2, #64	@ 0x40
 8003ce6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cee:	4b1c      	ldr	r3, [pc, #112]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d08:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003d0a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d10:	4b13      	ldr	r3, [pc, #76]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003d16:	4812      	ldr	r0, [pc, #72]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003d18:	f000 fe10 	bl	800493c <HAL_DMA_Init>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003d22:	f7ff fb9d 	bl	8003460 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <HAL_UART_MspInit+0x168>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2105      	movs	r1, #5
 8003d36:	2026      	movs	r0, #38	@ 0x26
 8003d38:	f000 fdd6 	bl	80048e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d3c:	2026      	movs	r0, #38	@ 0x26
 8003d3e:	f000 fdef 	bl	8004920 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003d42:	bf00      	nop
 8003d44:	3728      	adds	r7, #40	@ 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40004400 	.word	0x40004400
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40020000 	.word	0x40020000
 8003d58:	20005674 	.word	0x20005674
 8003d5c:	40026088 	.word	0x40026088
 8003d60:	200056d4 	.word	0x200056d4
 8003d64:	400260a0 	.word	0x400260a0

08003d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	@ 0x38
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	4b33      	ldr	r3, [pc, #204]	@ (8003e4c <HAL_InitTick+0xe4>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	4a32      	ldr	r2, [pc, #200]	@ (8003e4c <HAL_InitTick+0xe4>)
 8003d82:	f043 0310 	orr.w	r3, r3, #16
 8003d86:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d88:	4b30      	ldr	r3, [pc, #192]	@ (8003e4c <HAL_InitTick+0xe4>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d94:	f107 0210 	add.w	r2, r7, #16
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 fdde 	bl	8006960 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003dae:	f002 fdaf 	bl	8006910 <HAL_RCC_GetPCLK1Freq>
 8003db2:	6378      	str	r0, [r7, #52]	@ 0x34
 8003db4:	e004      	b.n	8003dc0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003db6:	f002 fdab 	bl	8006910 <HAL_RCC_GetPCLK1Freq>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc2:	4a23      	ldr	r2, [pc, #140]	@ (8003e50 <HAL_InitTick+0xe8>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003dce:	4b21      	ldr	r3, [pc, #132]	@ (8003e54 <HAL_InitTick+0xec>)
 8003dd0:	4a21      	ldr	r2, [pc, #132]	@ (8003e58 <HAL_InitTick+0xf0>)
 8003dd2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e54 <HAL_InitTick+0xec>)
 8003dd6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dda:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <HAL_InitTick+0xec>)
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003de2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <HAL_InitTick+0xec>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <HAL_InitTick+0xec>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dee:	4b19      	ldr	r3, [pc, #100]	@ (8003e54 <HAL_InitTick+0xec>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003df4:	4817      	ldr	r0, [pc, #92]	@ (8003e54 <HAL_InitTick+0xec>)
 8003df6:	f003 fa2d 	bl	8007254 <HAL_TIM_Base_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003e00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11b      	bne.n	8003e40 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003e08:	4812      	ldr	r0, [pc, #72]	@ (8003e54 <HAL_InitTick+0xec>)
 8003e0a:	f003 fa73 	bl	80072f4 <HAL_TIM_Base_Start_IT>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003e14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d111      	bne.n	8003e40 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e1c:	2036      	movs	r0, #54	@ 0x36
 8003e1e:	f000 fd7f 	bl	8004920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b0f      	cmp	r3, #15
 8003e26:	d808      	bhi.n	8003e3a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003e28:	2200      	movs	r2, #0
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	2036      	movs	r0, #54	@ 0x36
 8003e2e:	f000 fd5b 	bl	80048e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e32:	4a0a      	ldr	r2, [pc, #40]	@ (8003e5c <HAL_InitTick+0xf4>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	e002      	b.n	8003e40 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3738      	adds	r7, #56	@ 0x38
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	431bde83 	.word	0x431bde83
 8003e54:	2000867c 	.word	0x2000867c
 8003e58:	40001000 	.word	0x40001000
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <NMI_Handler+0x4>

08003e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <HardFault_Handler+0x4>

08003e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e74:	bf00      	nop
 8003e76:	e7fd      	b.n	8003e74 <MemManage_Handler+0x4>

08003e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e7c:	bf00      	nop
 8003e7e:	e7fd      	b.n	8003e7c <BusFault_Handler+0x4>

08003e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e84:	bf00      	nop
 8003e86:	e7fd      	b.n	8003e84 <UsageFault_Handler+0x4>

08003e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e9c:	4802      	ldr	r0, [pc, #8]	@ (8003ea8 <DMA1_Stream5_IRQHandler+0x10>)
 8003e9e:	f000 fee5 	bl	8004c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20005674 	.word	0x20005674

08003eac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003eb0:	4802      	ldr	r0, [pc, #8]	@ (8003ebc <DMA1_Stream6_IRQHandler+0x10>)
 8003eb2:	f000 fedb 	bl	8004c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200056d4 	.word	0x200056d4

08003ec0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ec4:	4802      	ldr	r0, [pc, #8]	@ (8003ed0 <USART2_IRQHandler+0x10>)
 8003ec6:	f004 fcdb 	bl	8008880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000562c 	.word	0x2000562c

08003ed4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ed8:	4802      	ldr	r0, [pc, #8]	@ (8003ee4 <TIM5_IRQHandler+0x10>)
 8003eda:	f003 fcc7 	bl	800786c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	2000559c 	.word	0x2000559c

08003ee8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003eec:	4802      	ldr	r0, [pc, #8]	@ (8003ef8 <TIM6_DAC_IRQHandler+0x10>)
 8003eee:	f003 fcbd 	bl	800786c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000867c 	.word	0x2000867c

08003efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  return 1;
 8003f00:	2301      	movs	r3, #1
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_kill>:

int _kill(int pid, int sig)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f16:	f018 fb89 	bl	801c62c <__errno>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2216      	movs	r2, #22
 8003f1e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_exit>:

void _exit (int status)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ffe7 	bl	8003f0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <_exit+0x12>

08003f42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b086      	sub	sp, #24
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e00a      	b.n	8003f6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f54:	f3af 8000 	nop.w
 8003f58:	4601      	mov	r1, r0
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	60ba      	str	r2, [r7, #8]
 8003f60:	b2ca      	uxtb	r2, r1
 8003f62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3301      	adds	r3, #1
 8003f68:	617b      	str	r3, [r7, #20]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	dbf0      	blt.n	8003f54 <_read+0x12>
  }

  return len;
 8003f72:	687b      	ldr	r3, [r7, #4]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e009      	b.n	8003fa2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	60ba      	str	r2, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	dbf1      	blt.n	8003f8e <_write+0x12>
  }
  return len;
 8003faa:	687b      	ldr	r3, [r7, #4]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_close>:

int _close(int file)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fdc:	605a      	str	r2, [r3, #4]
  return 0;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <_isatty>:

int _isatty(int file)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ff4:	2301      	movs	r3, #1
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004024:	4a14      	ldr	r2, [pc, #80]	@ (8004078 <_sbrk+0x5c>)
 8004026:	4b15      	ldr	r3, [pc, #84]	@ (800407c <_sbrk+0x60>)
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004030:	4b13      	ldr	r3, [pc, #76]	@ (8004080 <_sbrk+0x64>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004038:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <_sbrk+0x64>)
 800403a:	4a12      	ldr	r2, [pc, #72]	@ (8004084 <_sbrk+0x68>)
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800403e:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <_sbrk+0x64>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d207      	bcs.n	800405c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800404c:	f018 faee 	bl	801c62c <__errno>
 8004050:	4603      	mov	r3, r0
 8004052:	220c      	movs	r2, #12
 8004054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800405a:	e009      	b.n	8004070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800405c:	4b08      	ldr	r3, [pc, #32]	@ (8004080 <_sbrk+0x64>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004062:	4b07      	ldr	r3, [pc, #28]	@ (8004080 <_sbrk+0x64>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	4a05      	ldr	r2, [pc, #20]	@ (8004080 <_sbrk+0x64>)
 800406c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20020000 	.word	0x20020000
 800407c:	00000400 	.word	0x00000400
 8004080:	200086c8 	.word	0x200086c8
 8004084:	20011ce8 	.word	0x20011ce8

08004088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800408c:	4b06      	ldr	r3, [pc, #24]	@ (80040a8 <SystemInit+0x20>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <SystemInit+0x20>)
 8004094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <StartDefaultTask>:
//TimerHandle_t xTimer;

//void motorTimerCallback(TimerHandle_t xTimer);

void StartDefaultTask(void *argument)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
//    xTimer = xTimerCreate("MotorTimer", pdMS_TO_TICKS(1), pdTRUE, (void *)0, motorTimerCallback);
//    xTimerStart(xTimer, 0);
//    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	HAL_TIM_Base_Start_IT(&htim5);
 80040b4:	4808      	ldr	r0, [pc, #32]	@ (80040d8 <StartDefaultTask+0x2c>)
 80040b6:	f003 f91d 	bl	80072f4 <HAL_TIM_Base_Start_IT>
	uros_init();
 80040ba:	f7fd ff89 	bl	8001fd0 <uros_init>
    motor_init();
 80040be:	f7fd fee7 	bl	8001e90 <motor_init>
    pinpoint_init();
 80040c2:	f7fd f953 	bl	800136c <pinpoint_init>
//    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
//    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
    uros_init();
 80040c6:	f7fd ff83 	bl	8001fd0 <uros_init>
//    trace_init();

    for(;;)
    {
        uros_agent_status_check();
 80040ca:	f7fd ffc1 	bl	8002050 <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 80040ce:	2032      	movs	r0, #50	@ 0x32
 80040d0:	f005 fe14 	bl	8009cfc <osDelay>
        uros_agent_status_check();
 80040d4:	bf00      	nop
 80040d6:	e7f8      	b.n	80040ca <StartDefaultTask+0x1e>
 80040d8:	2000559c 	.word	0x2000559c

080040dc <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a27      	ldr	r2, [pc, #156]	@ (8004188 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d140      	bne.n	8004170 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		sec++;
 80040ee:	4b27      	ldr	r3, [pc, #156]	@ (800418c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a25      	ldr	r2, [pc, #148]	@ (800418c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80040f6:	6013      	str	r3, [r2, #0]
		tct++;
 80040f8:	4b25      	ldr	r3, [pc, #148]	@ (8004190 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	4a24      	ldr	r2, [pc, #144]	@ (8004190 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004100:	6013      	str	r3, [r2, #0]
//		chassis_monitor();
		chassis_set_speed(vx, vy, vz);
 8004102:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004104:	ed93 7b00 	vldr	d7, [r3]
 8004108:	4b23      	ldr	r3, [pc, #140]	@ (8004198 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800410a:	ed93 6b00 	vldr	d6, [r3]
 800410e:	4b23      	ldr	r3, [pc, #140]	@ (800419c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004110:	ed93 5b00 	vldr	d5, [r3]
 8004114:	eeb0 2a45 	vmov.f32	s4, s10
 8004118:	eef0 2a65 	vmov.f32	s5, s11
 800411c:	eeb0 1a46 	vmov.f32	s2, s12
 8004120:	eef0 1a66 	vmov.f32	s3, s13
 8004124:	eeb0 0a47 	vmov.f32	s0, s14
 8004128:	eef0 0a67 	vmov.f32	s1, s15
 800412c:	f7fd fc2a 	bl	8001984 <chassis_set_speed>
		update_pinpoint_pose();
 8004130:	f7fd f942 	bl	80013b8 <update_pinpoint_pose>
		update_pose(pos_x, pos_y, pos_z, vel_x, vel_y, vel_z);
 8004134:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004136:	ed93 7b00 	vldr	d7, [r3]
 800413a:	4b1a      	ldr	r3, [pc, #104]	@ (80041a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800413c:	ed93 6b00 	vldr	d6, [r3]
 8004140:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004142:	ed93 2b00 	vldr	d2, [r3]
 8004146:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004148:	ed93 3b00 	vldr	d3, [r3]
 800414c:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800414e:	ed93 4b00 	vldr	d4, [r3]
 8004152:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004154:	ed93 5b00 	vldr	d5, [r3]
 8004158:	eeb0 1a46 	vmov.f32	s2, s12
 800415c:	eef0 1a66 	vmov.f32	s3, s13
 8004160:	eeb0 0a47 	vmov.f32	s0, s14
 8004164:	eef0 0a67 	vmov.f32	s1, s15
 8004168:	f7fe f9ca 	bl	8002500 <update_pose>
		pinpoint_monitor();
 800416c:	f7fd f90c 	bl	8001388 <pinpoint_monitor>
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	@ (80041b8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d101      	bne.n	800417e <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_IncTick();
 800417a:	f000 f86b 	bl	8004254 <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40000c00 	.word	0x40000c00
 800418c:	200086cc 	.word	0x200086cc
 8004190:	200086d0 	.word	0x200086d0
 8004194:	20000b98 	.word	0x20000b98
 8004198:	20000ba0 	.word	0x20000ba0
 800419c:	20000ba8 	.word	0x20000ba8
 80041a0:	200009c0 	.word	0x200009c0
 80041a4:	200009c8 	.word	0x200009c8
 80041a8:	200009d0 	.word	0x200009d0
 80041ac:	200009d8 	.word	0x200009d8
 80041b0:	200009e0 	.word	0x200009e0
 80041b4:	200009e8 	.word	0x200009e8
 80041b8:	40001000 	.word	0x40001000

080041bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80041f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80041c0:	f7ff ff62 	bl	8004088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041c4:	480c      	ldr	r0, [pc, #48]	@ (80041f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041c6:	490d      	ldr	r1, [pc, #52]	@ (80041fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004200 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041cc:	e002      	b.n	80041d4 <LoopCopyDataInit>

080041ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041d2:	3304      	adds	r3, #4

080041d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041d8:	d3f9      	bcc.n	80041ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041da:	4a0a      	ldr	r2, [pc, #40]	@ (8004204 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80041dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004208 <LoopFillZerobss+0x22>)
  movs r3, #0
 80041de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041e0:	e001      	b.n	80041e6 <LoopFillZerobss>

080041e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041e4:	3204      	adds	r2, #4

080041e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041e8:	d3fb      	bcc.n	80041e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80041ea:	f018 fa25 	bl	801c638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041ee:	f7fe fd21 	bl	8002c34 <main>
  bx  lr    
 80041f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041fc:	2000095c 	.word	0x2000095c
  ldr r2, =_sidata
 8004200:	0801e9c0 	.word	0x0801e9c0
  ldr r2, =_sbss
 8004204:	20000960 	.word	0x20000960
  ldr r4, =_ebss
 8004208:	20011ce8 	.word	0x20011ce8

0800420c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800420c:	e7fe      	b.n	800420c <ADC_IRQHandler>
	...

08004210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004214:	4b0e      	ldr	r3, [pc, #56]	@ (8004250 <HAL_Init+0x40>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0d      	ldr	r2, [pc, #52]	@ (8004250 <HAL_Init+0x40>)
 800421a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800421e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004220:	4b0b      	ldr	r3, [pc, #44]	@ (8004250 <HAL_Init+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <HAL_Init+0x40>)
 8004226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800422a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800422c:	4b08      	ldr	r3, [pc, #32]	@ (8004250 <HAL_Init+0x40>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a07      	ldr	r2, [pc, #28]	@ (8004250 <HAL_Init+0x40>)
 8004232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004238:	2003      	movs	r0, #3
 800423a:	f000 fb4a 	bl	80048d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800423e:	200f      	movs	r0, #15
 8004240:	f7ff fd92 	bl	8003d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004244:	f7ff fa78 	bl	8003738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023c00 	.word	0x40023c00

08004254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <HAL_IncTick+0x20>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_IncTick+0x24>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	4a04      	ldr	r2, [pc, #16]	@ (8004278 <HAL_IncTick+0x24>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000010 	.word	0x20000010
 8004278:	200086d4 	.word	0x200086d4

0800427c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return uwTick;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_GetTick+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	200086d4 	.word	0x200086d4

08004294 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e033      	b.n	8004312 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff fa6c 	bl	8003790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d118      	bne.n	8004304 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042da:	f023 0302 	bic.w	r3, r3, #2
 80042de:	f043 0202 	orr.w	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f94a 	bl	8004580 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	f043 0201 	orr.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	641a      	str	r2, [r3, #64]	@ 0x40
 8004302:	e001      	b.n	8004308 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x1c>
 8004334:	2302      	movs	r3, #2
 8004336:	e113      	b.n	8004560 <HAL_ADC_ConfigChannel+0x244>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b09      	cmp	r3, #9
 8004346:	d925      	bls.n	8004394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	4613      	mov	r3, r2
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	3b1e      	subs	r3, #30
 800435e:	2207      	movs	r2, #7
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43da      	mvns	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	400a      	ands	r2, r1
 800436c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68d9      	ldr	r1, [r3, #12]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	4618      	mov	r0, r3
 8004380:	4603      	mov	r3, r0
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4403      	add	r3, r0
 8004386:	3b1e      	subs	r3, #30
 8004388:	409a      	lsls	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	60da      	str	r2, [r3, #12]
 8004392:	e022      	b.n	80043da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	461a      	mov	r2, r3
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	2207      	movs	r2, #7
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43da      	mvns	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	400a      	ands	r2, r1
 80043b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6919      	ldr	r1, [r3, #16]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4618      	mov	r0, r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	4403      	add	r3, r0
 80043d0:	409a      	lsls	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d824      	bhi.n	800442c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	3b05      	subs	r3, #5
 80043f4:	221f      	movs	r2, #31
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	400a      	ands	r2, r1
 8004402:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	4618      	mov	r0, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	3b05      	subs	r3, #5
 800441e:	fa00 f203 	lsl.w	r2, r0, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	635a      	str	r2, [r3, #52]	@ 0x34
 800442a:	e04c      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b0c      	cmp	r3, #12
 8004432:	d824      	bhi.n	800447e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	3b23      	subs	r3, #35	@ 0x23
 8004446:	221f      	movs	r2, #31
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43da      	mvns	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	400a      	ands	r2, r1
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	4618      	mov	r0, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	3b23      	subs	r3, #35	@ 0x23
 8004470:	fa00 f203 	lsl.w	r2, r0, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
 800447c:	e023      	b.n	80044c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	3b41      	subs	r3, #65	@ 0x41
 8004490:	221f      	movs	r2, #31
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43da      	mvns	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	400a      	ands	r2, r1
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4618      	mov	r0, r3
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	3b41      	subs	r3, #65	@ 0x41
 80044ba:	fa00 f203 	lsl.w	r2, r0, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044c6:	4b29      	ldr	r3, [pc, #164]	@ (800456c <HAL_ADC_ConfigChannel+0x250>)
 80044c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <HAL_ADC_ConfigChannel+0x254>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d10f      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1d8>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b12      	cmp	r3, #18
 80044da:	d10b      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004570 <HAL_ADC_ConfigChannel+0x254>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d12b      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x23a>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1c      	ldr	r2, [pc, #112]	@ (8004574 <HAL_ADC_ConfigChannel+0x258>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <HAL_ADC_ConfigChannel+0x1f4>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b11      	cmp	r3, #17
 800450e:	d122      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a11      	ldr	r2, [pc, #68]	@ (8004574 <HAL_ADC_ConfigChannel+0x258>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004532:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_ADC_ConfigChannel+0x25c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a11      	ldr	r2, [pc, #68]	@ (800457c <HAL_ADC_ConfigChannel+0x260>)
 8004538:	fba2 2303 	umull	r2, r3, r2, r3
 800453c:	0c9a      	lsrs	r2, r3, #18
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004548:	e002      	b.n	8004550 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	3b01      	subs	r3, #1
 800454e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f9      	bne.n	800454a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40012300 	.word	0x40012300
 8004570:	40012000 	.word	0x40012000
 8004574:	10000012 	.word	0x10000012
 8004578:	20000008 	.word	0x20000008
 800457c:	431bde83 	.word	0x431bde83

08004580 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004588:	4b79      	ldr	r3, [pc, #484]	@ (8004770 <ADC_Init+0x1f0>)
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6859      	ldr	r1, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004612:	4a58      	ldr	r2, [pc, #352]	@ (8004774 <ADC_Init+0x1f4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004626:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	e00f      	b.n	800467e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800466c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800467c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0202 	bic.w	r2, r2, #2
 800468c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	7e1b      	ldrb	r3, [r3, #24]
 8004698:	005a      	lsls	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01b      	beq.n	80046e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d6:	3b01      	subs	r3, #1
 80046d8:	035a      	lsls	r2, r3, #13
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e007      	b.n	80046f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	3b01      	subs	r3, #1
 8004710:	051a      	lsls	r2, r3, #20
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004728:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6899      	ldr	r1, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004736:	025a      	lsls	r2, r3, #9
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6899      	ldr	r1, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	029a      	lsls	r2, r3, #10
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40012300 	.word	0x40012300
 8004774:	0f000001 	.word	0x0f000001

08004778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004788:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004794:	4013      	ands	r3, r2
 8004796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80047a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047aa:	4a04      	ldr	r2, [pc, #16]	@ (80047bc <__NVIC_SetPriorityGrouping+0x44>)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	60d3      	str	r3, [r2, #12]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	e000ed00 	.word	0xe000ed00

080047c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <__NVIC_GetPriorityGrouping+0x18>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	0a1b      	lsrs	r3, r3, #8
 80047ca:	f003 0307 	and.w	r3, r3, #7
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	e000ed00 	.word	0xe000ed00

080047dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	db0b      	blt.n	8004806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	f003 021f 	and.w	r2, r3, #31
 80047f4:	4907      	ldr	r1, [pc, #28]	@ (8004814 <__NVIC_EnableIRQ+0x38>)
 80047f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	2001      	movs	r0, #1
 80047fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	e000e100 	.word	0xe000e100

08004818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	4603      	mov	r3, r0
 8004820:	6039      	str	r1, [r7, #0]
 8004822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	db0a      	blt.n	8004842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	b2da      	uxtb	r2, r3
 8004830:	490c      	ldr	r1, [pc, #48]	@ (8004864 <__NVIC_SetPriority+0x4c>)
 8004832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	440b      	add	r3, r1
 800483c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004840:	e00a      	b.n	8004858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	4908      	ldr	r1, [pc, #32]	@ (8004868 <__NVIC_SetPriority+0x50>)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3b04      	subs	r3, #4
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	440b      	add	r3, r1
 8004856:	761a      	strb	r2, [r3, #24]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000e100 	.word	0xe000e100
 8004868:	e000ed00 	.word	0xe000ed00

0800486c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	@ 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f1c3 0307 	rsb	r3, r3, #7
 8004886:	2b04      	cmp	r3, #4
 8004888:	bf28      	it	cs
 800488a:	2304      	movcs	r3, #4
 800488c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3304      	adds	r3, #4
 8004892:	2b06      	cmp	r3, #6
 8004894:	d902      	bls.n	800489c <NVIC_EncodePriority+0x30>
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3b03      	subs	r3, #3
 800489a:	e000      	b.n	800489e <NVIC_EncodePriority+0x32>
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	401a      	ands	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa01 f303 	lsl.w	r3, r1, r3
 80048be:	43d9      	mvns	r1, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c4:	4313      	orrs	r3, r2
         );
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3724      	adds	r7, #36	@ 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ff4c 	bl	8004778 <__NVIC_SetPriorityGrouping>
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048fa:	f7ff ff61 	bl	80047c0 <__NVIC_GetPriorityGrouping>
 80048fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f7ff ffb1 	bl	800486c <NVIC_EncodePriority>
 800490a:	4602      	mov	r2, r0
 800490c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004910:	4611      	mov	r1, r2
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff ff80 	bl	8004818 <__NVIC_SetPriority>
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff54 	bl	80047dc <__NVIC_EnableIRQ>
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004948:	f7ff fc98 	bl	800427c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e099      	b.n	8004a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004978:	e00f      	b.n	800499a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800497a:	f7ff fc7f 	bl	800427c <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b05      	cmp	r3, #5
 8004986:	d908      	bls.n	800499a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e078      	b.n	8004a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e8      	bne.n	800497a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <HAL_DMA_Init+0x158>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d107      	bne.n	8004a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fc:	4313      	orrs	r3, r2
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f023 0307 	bic.w	r3, r3, #7
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d117      	bne.n	8004a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00e      	beq.n	8004a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fb01 	bl	8005048 <DMA_CheckFifoParam>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2240      	movs	r2, #64	@ 0x40
 8004a50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e016      	b.n	8004a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fab8 	bl	8004fdc <DMA_CalcBaseAndBitshift>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a74:	223f      	movs	r2, #63	@ 0x3f
 8004a76:	409a      	lsls	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	f010803f 	.word	0xf010803f

08004a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_DMA_Start_IT+0x26>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e040      	b.n	8004b40 <HAL_DMA_Start_IT+0xa8>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d12f      	bne.n	8004b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fa4a 	bl	8004f80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af0:	223f      	movs	r2, #63	@ 0x3f
 8004af2:	409a      	lsls	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0216 	orr.w	r2, r2, #22
 8004b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0208 	orr.w	r2, r2, #8
 8004b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	e005      	b.n	8004b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b56:	f7ff fb91 	bl	800427c <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d008      	beq.n	8004b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2280      	movs	r2, #128	@ 0x80
 8004b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e052      	b.n	8004c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0216 	bic.w	r2, r2, #22
 8004b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	695a      	ldr	r2, [r3, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <HAL_DMA_Abort+0x62>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0208 	bic.w	r2, r2, #8
 8004bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0201 	bic.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bca:	e013      	b.n	8004bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bcc:	f7ff fb56 	bl	800427c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d90c      	bls.n	8004bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2203      	movs	r2, #3
 8004be4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e015      	b.n	8004c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e4      	bne.n	8004bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c06:	223f      	movs	r2, #63	@ 0x3f
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d004      	beq.n	8004c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2280      	movs	r2, #128	@ 0x80
 8004c40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00c      	b.n	8004c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2205      	movs	r2, #5
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c78:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb4 <HAL_DMA_IRQHandler+0x248>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a8e      	ldr	r2, [pc, #568]	@ (8004eb8 <HAL_DMA_IRQHandler+0x24c>)
 8004c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c82:	0a9b      	lsrs	r3, r3, #10
 8004c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c96:	2208      	movs	r2, #8
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01a      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	f043 0201 	orr.w	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cdc:	2201      	movs	r2, #1
 8004cde:	409a      	lsls	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00b      	beq.n	8004d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d06:	f043 0202 	orr.w	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d12:	2204      	movs	r2, #4
 8004d14:	409a      	lsls	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d012      	beq.n	8004d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	2204      	movs	r2, #4
 8004d32:	409a      	lsls	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	f043 0204 	orr.w	r2, r3, #4
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	2210      	movs	r2, #16
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d043      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d03c      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	2210      	movs	r2, #16
 8004d68:	409a      	lsls	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d108      	bne.n	8004d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d024      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	4798      	blx	r3
 8004d9a:	e01f      	b.n	8004ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
 8004dac:	e016      	b.n	8004ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d107      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0208 	bic.w	r2, r2, #8
 8004dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de0:	2220      	movs	r2, #32
 8004de2:	409a      	lsls	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 808f 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8087 	beq.w	8004f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e02:	2220      	movs	r2, #32
 8004e04:	409a      	lsls	r2, r3
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b05      	cmp	r3, #5
 8004e14:	d136      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0216 	bic.w	r2, r2, #22
 8004e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695a      	ldr	r2, [r3, #20]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <HAL_DMA_IRQHandler+0x1da>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d007      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0208 	bic.w	r2, r2, #8
 8004e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	223f      	movs	r2, #63	@ 0x3f
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d07e      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
        }
        return;
 8004e82:	e079      	b.n	8004f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d01d      	beq.n	8004ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10d      	bne.n	8004ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d031      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
 8004eb0:	e02c      	b.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
 8004eb2:	bf00      	nop
 8004eb4:	20000008 	.word	0x20000008
 8004eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d023      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
 8004ecc:	e01e      	b.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10f      	bne.n	8004efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0210 	bic.w	r2, r2, #16
 8004eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d032      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d022      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2205      	movs	r2, #5
 8004f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d307      	bcc.n	8004f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f2      	bne.n	8004f38 <HAL_DMA_IRQHandler+0x2cc>
 8004f52:	e000      	b.n	8004f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
 8004f76:	e000      	b.n	8004f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f78:	bf00      	nop
    }
  }
}
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	d108      	bne.n	8004fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fbe:	e007      	b.n	8004fd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	60da      	str	r2, [r3, #12]
}
 8004fd0:	bf00      	nop
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3b10      	subs	r3, #16
 8004fec:	4a14      	ldr	r2, [pc, #80]	@ (8005040 <DMA_CalcBaseAndBitshift+0x64>)
 8004fee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ff6:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <DMA_CalcBaseAndBitshift+0x68>)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	461a      	mov	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b03      	cmp	r3, #3
 8005008:	d909      	bls.n	800501e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	659a      	str	r2, [r3, #88]	@ 0x58
 800501c:	e007      	b.n	800502e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	aaaaaaab 	.word	0xaaaaaaab
 8005044:	0801d42c 	.word	0x0801d42c

08005048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d11f      	bne.n	80050a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d856      	bhi.n	8005116 <DMA_CheckFifoParam+0xce>
 8005068:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <DMA_CheckFifoParam+0x28>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005081 	.word	0x08005081
 8005074:	08005093 	.word	0x08005093
 8005078:	08005081 	.word	0x08005081
 800507c:	08005117 	.word	0x08005117
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d046      	beq.n	800511a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005090:	e043      	b.n	800511a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800509a:	d140      	bne.n	800511e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a0:	e03d      	b.n	800511e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050aa:	d121      	bne.n	80050f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d837      	bhi.n	8005122 <DMA_CheckFifoParam+0xda>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <DMA_CheckFifoParam+0x70>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050c9 	.word	0x080050c9
 80050bc:	080050cf 	.word	0x080050cf
 80050c0:	080050c9 	.word	0x080050c9
 80050c4:	080050e1 	.word	0x080050e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	73fb      	strb	r3, [r7, #15]
      break;
 80050cc:	e030      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d025      	beq.n	8005126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050de:	e022      	b.n	8005126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050e8:	d11f      	bne.n	800512a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ee:	e01c      	b.n	800512a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d903      	bls.n	80050fe <DMA_CheckFifoParam+0xb6>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b03      	cmp	r3, #3
 80050fa:	d003      	beq.n	8005104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050fc:	e018      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
      break;
 8005102:	e015      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      break;
 8005114:	e00b      	b.n	800512e <DMA_CheckFifoParam+0xe6>
      break;
 8005116:	bf00      	nop
 8005118:	e00a      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 800511a:	bf00      	nop
 800511c:	e008      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 800511e:	bf00      	nop
 8005120:	e006      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 8005122:	bf00      	nop
 8005124:	e004      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 8005126:	bf00      	nop
 8005128:	e002      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;   
 800512a:	bf00      	nop
 800512c:	e000      	b.n	8005130 <DMA_CheckFifoParam+0xe8>
      break;
 800512e:	bf00      	nop
    }
  } 
  
  return status; 
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop

08005140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	@ 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005152:	2300      	movs	r3, #0
 8005154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005156:	2300      	movs	r3, #0
 8005158:	61fb      	str	r3, [r7, #28]
 800515a:	e165      	b.n	8005428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800515c:	2201      	movs	r2, #1
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	429a      	cmp	r2, r3
 8005176:	f040 8154 	bne.w	8005422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b01      	cmp	r3, #1
 8005184:	d005      	beq.n	8005192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800518e:	2b02      	cmp	r3, #2
 8005190:	d130      	bne.n	80051f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051c8:	2201      	movs	r2, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	091b      	lsrs	r3, r3, #4
 80051de:	f003 0201 	and.w	r2, r3, #1
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0303 	and.w	r3, r3, #3
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	d017      	beq.n	8005230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	2203      	movs	r2, #3
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43db      	mvns	r3, r3
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4013      	ands	r3, r2
 8005216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4313      	orrs	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d123      	bne.n	8005284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	08da      	lsrs	r2, r3, #3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3208      	adds	r2, #8
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	220f      	movs	r2, #15
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	08da      	lsrs	r2, r3, #3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3208      	adds	r2, #8
 800527e:	69b9      	ldr	r1, [r7, #24]
 8005280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	2203      	movs	r2, #3
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43db      	mvns	r3, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4013      	ands	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0203 	and.w	r2, r3, #3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 80ae 	beq.w	8005422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005440 <HAL_GPIO_Init+0x300>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005440 <HAL_GPIO_Init+0x300>)
 80052d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052d6:	4b5a      	ldr	r3, [pc, #360]	@ (8005440 <HAL_GPIO_Init+0x300>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052e2:	4a58      	ldr	r2, [pc, #352]	@ (8005444 <HAL_GPIO_Init+0x304>)
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	3302      	adds	r3, #2
 80052ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	220f      	movs	r2, #15
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	4013      	ands	r3, r2
 8005304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4f      	ldr	r2, [pc, #316]	@ (8005448 <HAL_GPIO_Init+0x308>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d025      	beq.n	800535a <HAL_GPIO_Init+0x21a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a4e      	ldr	r2, [pc, #312]	@ (800544c <HAL_GPIO_Init+0x30c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <HAL_GPIO_Init+0x216>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a4d      	ldr	r2, [pc, #308]	@ (8005450 <HAL_GPIO_Init+0x310>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d019      	beq.n	8005352 <HAL_GPIO_Init+0x212>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a4c      	ldr	r2, [pc, #304]	@ (8005454 <HAL_GPIO_Init+0x314>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_GPIO_Init+0x20e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a4b      	ldr	r2, [pc, #300]	@ (8005458 <HAL_GPIO_Init+0x318>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00d      	beq.n	800534a <HAL_GPIO_Init+0x20a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a4a      	ldr	r2, [pc, #296]	@ (800545c <HAL_GPIO_Init+0x31c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <HAL_GPIO_Init+0x206>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a49      	ldr	r2, [pc, #292]	@ (8005460 <HAL_GPIO_Init+0x320>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d101      	bne.n	8005342 <HAL_GPIO_Init+0x202>
 800533e:	2306      	movs	r3, #6
 8005340:	e00c      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005342:	2307      	movs	r3, #7
 8005344:	e00a      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005346:	2305      	movs	r3, #5
 8005348:	e008      	b.n	800535c <HAL_GPIO_Init+0x21c>
 800534a:	2304      	movs	r3, #4
 800534c:	e006      	b.n	800535c <HAL_GPIO_Init+0x21c>
 800534e:	2303      	movs	r3, #3
 8005350:	e004      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005352:	2302      	movs	r3, #2
 8005354:	e002      	b.n	800535c <HAL_GPIO_Init+0x21c>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_GPIO_Init+0x21c>
 800535a:	2300      	movs	r3, #0
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	f002 0203 	and.w	r2, r2, #3
 8005362:	0092      	lsls	r2, r2, #2
 8005364:	4093      	lsls	r3, r2
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800536c:	4935      	ldr	r1, [pc, #212]	@ (8005444 <HAL_GPIO_Init+0x304>)
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	089b      	lsrs	r3, r3, #2
 8005372:	3302      	adds	r3, #2
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537a:	4b3a      	ldr	r3, [pc, #232]	@ (8005464 <HAL_GPIO_Init+0x324>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	43db      	mvns	r3, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4013      	ands	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800539e:	4a31      	ldr	r2, [pc, #196]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053c8:	4a26      	ldr	r2, [pc, #152]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053ce:	4b25      	ldr	r3, [pc, #148]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <HAL_GPIO_Init+0x324>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	43db      	mvns	r3, r3
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	4013      	ands	r3, r2
 8005406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800541c:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <HAL_GPIO_Init+0x324>)
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3301      	adds	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b0f      	cmp	r3, #15
 800542c:	f67f ae96 	bls.w	800515c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	3724      	adds	r7, #36	@ 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40023800 	.word	0x40023800
 8005444:	40013800 	.word	0x40013800
 8005448:	40020000 	.word	0x40020000
 800544c:	40020400 	.word	0x40020400
 8005450:	40020800 	.word	0x40020800
 8005454:	40020c00 	.word	0x40020c00
 8005458:	40021000 	.word	0x40021000
 800545c:	40021400 	.word	0x40021400
 8005460:	40021800 	.word	0x40021800
 8005464:	40013c00 	.word	0x40013c00

08005468 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800547a:	2300      	movs	r3, #0
 800547c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e0c7      	b.n	8005614 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005484:	2201      	movs	r2, #1
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	4013      	ands	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	429a      	cmp	r2, r3
 800549c:	f040 80b7 	bne.w	800560e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80054a0:	4a62      	ldr	r2, [pc, #392]	@ (800562c <HAL_GPIO_DeInit+0x1c4>)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	089b      	lsrs	r3, r3, #2
 80054a6:	3302      	adds	r3, #2
 80054a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	220f      	movs	r2, #15
 80054b8:	fa02 f303 	lsl.w	r3, r2, r3
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	4013      	ands	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a5a      	ldr	r2, [pc, #360]	@ (8005630 <HAL_GPIO_DeInit+0x1c8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d025      	beq.n	8005516 <HAL_GPIO_DeInit+0xae>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a59      	ldr	r2, [pc, #356]	@ (8005634 <HAL_GPIO_DeInit+0x1cc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01f      	beq.n	8005512 <HAL_GPIO_DeInit+0xaa>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a58      	ldr	r2, [pc, #352]	@ (8005638 <HAL_GPIO_DeInit+0x1d0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d019      	beq.n	800550e <HAL_GPIO_DeInit+0xa6>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a57      	ldr	r2, [pc, #348]	@ (800563c <HAL_GPIO_DeInit+0x1d4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_GPIO_DeInit+0xa2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a56      	ldr	r2, [pc, #344]	@ (8005640 <HAL_GPIO_DeInit+0x1d8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00d      	beq.n	8005506 <HAL_GPIO_DeInit+0x9e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a55      	ldr	r2, [pc, #340]	@ (8005644 <HAL_GPIO_DeInit+0x1dc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d007      	beq.n	8005502 <HAL_GPIO_DeInit+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a54      	ldr	r2, [pc, #336]	@ (8005648 <HAL_GPIO_DeInit+0x1e0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d101      	bne.n	80054fe <HAL_GPIO_DeInit+0x96>
 80054fa:	2306      	movs	r3, #6
 80054fc:	e00c      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 80054fe:	2307      	movs	r3, #7
 8005500:	e00a      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 8005502:	2305      	movs	r3, #5
 8005504:	e008      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 8005506:	2304      	movs	r3, #4
 8005508:	e006      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 800550a:	2303      	movs	r3, #3
 800550c:	e004      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 800550e:	2302      	movs	r3, #2
 8005510:	e002      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_GPIO_DeInit+0xb0>
 8005516:	2300      	movs	r3, #0
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	f002 0203 	and.w	r2, r2, #3
 800551e:	0092      	lsls	r2, r2, #2
 8005520:	4093      	lsls	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d132      	bne.n	800558e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005528:	4b48      	ldr	r3, [pc, #288]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	43db      	mvns	r3, r3
 8005530:	4946      	ldr	r1, [pc, #280]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 8005532:	4013      	ands	r3, r2
 8005534:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005536:	4b45      	ldr	r3, [pc, #276]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	43db      	mvns	r3, r3
 800553e:	4943      	ldr	r1, [pc, #268]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 8005540:	4013      	ands	r3, r2
 8005542:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005544:	4b41      	ldr	r3, [pc, #260]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	43db      	mvns	r3, r3
 800554c:	493f      	ldr	r1, [pc, #252]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 800554e:	4013      	ands	r3, r2
 8005550:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005552:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	43db      	mvns	r3, r3
 800555a:	493c      	ldr	r1, [pc, #240]	@ (800564c <HAL_GPIO_DeInit+0x1e4>)
 800555c:	4013      	ands	r3, r2
 800555e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	220f      	movs	r2, #15
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005570:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <HAL_GPIO_DeInit+0x1c4>)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	089b      	lsrs	r3, r3, #2
 8005576:	3302      	adds	r3, #2
 8005578:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	43da      	mvns	r2, r3
 8005580:	482a      	ldr	r0, [pc, #168]	@ (800562c <HAL_GPIO_DeInit+0x1c4>)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	089b      	lsrs	r3, r3, #2
 8005586:	400a      	ands	r2, r1
 8005588:	3302      	adds	r3, #2
 800558a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	2103      	movs	r1, #3
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	08da      	lsrs	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3208      	adds	r2, #8
 80055ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	220f      	movs	r2, #15
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43db      	mvns	r3, r3
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	08d2      	lsrs	r2, r2, #3
 80055c4:	4019      	ands	r1, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	3208      	adds	r2, #8
 80055ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	2103      	movs	r1, #3
 80055d8:	fa01 f303 	lsl.w	r3, r1, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	401a      	ands	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	2101      	movs	r1, #1
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	401a      	ands	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	2103      	movs	r1, #3
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	43db      	mvns	r3, r3
 8005608:	401a      	ands	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	3301      	adds	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b0f      	cmp	r3, #15
 8005618:	f67f af34 	bls.w	8005484 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40013800 	.word	0x40013800
 8005630:	40020000 	.word	0x40020000
 8005634:	40020400 	.word	0x40020400
 8005638:	40020800 	.word	0x40020800
 800563c:	40020c00 	.word	0x40020c00
 8005640:	40021000 	.word	0x40021000
 8005644:	40021400 	.word	0x40021400
 8005648:	40021800 	.word	0x40021800
 800564c:	40013c00 	.word	0x40013c00

08005650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	807b      	strh	r3, [r7, #2]
 800565c:	4613      	mov	r3, r2
 800565e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005660:	787b      	ldrb	r3, [r7, #1]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800566c:	e003      	b.n	8005676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800566e:	887b      	ldrh	r3, [r7, #2]
 8005670:	041a      	lsls	r2, r3, #16
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	619a      	str	r2, [r3, #24]
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e12b      	b.n	80058ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fe f8d0 	bl	8003850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2224      	movs	r2, #36	@ 0x24
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056e8:	f001 f912 	bl	8006910 <HAL_RCC_GetPCLK1Freq>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4a81      	ldr	r2, [pc, #516]	@ (80058f8 <HAL_I2C_Init+0x274>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d807      	bhi.n	8005708 <HAL_I2C_Init+0x84>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a80      	ldr	r2, [pc, #512]	@ (80058fc <HAL_I2C_Init+0x278>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bf94      	ite	ls
 8005700:	2301      	movls	r3, #1
 8005702:	2300      	movhi	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e006      	b.n	8005716 <HAL_I2C_Init+0x92>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a7d      	ldr	r2, [pc, #500]	@ (8005900 <HAL_I2C_Init+0x27c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	bf94      	ite	ls
 8005710:	2301      	movls	r3, #1
 8005712:	2300      	movhi	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0e7      	b.n	80058ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4a78      	ldr	r2, [pc, #480]	@ (8005904 <HAL_I2C_Init+0x280>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	0c9b      	lsrs	r3, r3, #18
 8005728:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4a6a      	ldr	r2, [pc, #424]	@ (80058f8 <HAL_I2C_Init+0x274>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d802      	bhi.n	8005758 <HAL_I2C_Init+0xd4>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3301      	adds	r3, #1
 8005756:	e009      	b.n	800576c <HAL_I2C_Init+0xe8>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	4a69      	ldr	r2, [pc, #420]	@ (8005908 <HAL_I2C_Init+0x284>)
 8005764:	fba2 2303 	umull	r2, r3, r2, r3
 8005768:	099b      	lsrs	r3, r3, #6
 800576a:	3301      	adds	r3, #1
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	430b      	orrs	r3, r1
 8005772:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800577e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	495c      	ldr	r1, [pc, #368]	@ (80058f8 <HAL_I2C_Init+0x274>)
 8005788:	428b      	cmp	r3, r1
 800578a:	d819      	bhi.n	80057c0 <HAL_I2C_Init+0x13c>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	1e59      	subs	r1, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	fbb1 f3f3 	udiv	r3, r1, r3
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80057a0:	400b      	ands	r3, r1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_I2C_Init+0x138>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1e59      	subs	r1, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b4:	3301      	adds	r3, #1
 80057b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ba:	e051      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 80057bc:	2304      	movs	r3, #4
 80057be:	e04f      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_I2C_Init+0x168>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1e58      	subs	r0, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6859      	ldr	r1, [r3, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	440b      	add	r3, r1
 80057d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf0c      	ite	eq
 80057e4:	2301      	moveq	r3, #1
 80057e6:	2300      	movne	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	e012      	b.n	8005812 <HAL_I2C_Init+0x18e>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1e58      	subs	r0, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	0099      	lsls	r1, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005802:	3301      	adds	r3, #1
 8005804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_I2C_Init+0x196>
 8005816:	2301      	movs	r3, #1
 8005818:	e022      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10e      	bne.n	8005840 <HAL_I2C_Init+0x1bc>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	1e58      	subs	r0, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6859      	ldr	r1, [r3, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	440b      	add	r3, r1
 8005830:	fbb0 f3f3 	udiv	r3, r0, r3
 8005834:	3301      	adds	r3, #1
 8005836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583e:	e00f      	b.n	8005860 <HAL_I2C_Init+0x1dc>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	1e58      	subs	r0, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	0099      	lsls	r1, r3, #2
 8005850:	440b      	add	r3, r1
 8005852:	fbb0 f3f3 	udiv	r3, r0, r3
 8005856:	3301      	adds	r3, #1
 8005858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800585c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	6809      	ldr	r1, [r1, #0]
 8005864:	4313      	orrs	r3, r2
 8005866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800588e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6911      	ldr	r1, [r2, #16]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68d2      	ldr	r2, [r2, #12]
 800589a:	4311      	orrs	r1, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	430b      	orrs	r3, r1
 80058a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0201 	orr.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	000186a0 	.word	0x000186a0
 80058fc:	001e847f 	.word	0x001e847f
 8005900:	003d08ff 	.word	0x003d08ff
 8005904:	431bde83 	.word	0x431bde83
 8005908:	10624dd3 	.word	0x10624dd3

0800590c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e021      	b.n	8005962 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2224      	movs	r2, #36	@ 0x24
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fd ffd2 	bl	80038e0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	461a      	mov	r2, r3
 800597a:	4603      	mov	r3, r0
 800597c:	817b      	strh	r3, [r7, #10]
 800597e:	460b      	mov	r3, r1
 8005980:	813b      	strh	r3, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005986:	f7fe fc79 	bl	800427c <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b20      	cmp	r3, #32
 8005996:	f040 80d9 	bne.w	8005b4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	2319      	movs	r3, #25
 80059a0:	2201      	movs	r2, #1
 80059a2:	496d      	ldr	r1, [pc, #436]	@ (8005b58 <HAL_I2C_Mem_Write+0x1ec>)
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fc8b 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80059b0:	2302      	movs	r3, #2
 80059b2:	e0cc      	b.n	8005b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_I2C_Mem_Write+0x56>
 80059be:	2302      	movs	r3, #2
 80059c0:	e0c5      	b.n	8005b4e <HAL_I2C_Mem_Write+0x1e2>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d007      	beq.n	80059e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2221      	movs	r2, #33	@ 0x21
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2240      	movs	r2, #64	@ 0x40
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a4d      	ldr	r2, [pc, #308]	@ (8005b5c <HAL_I2C_Mem_Write+0x1f0>)
 8005a28:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a2a:	88f8      	ldrh	r0, [r7, #6]
 8005a2c:	893a      	ldrh	r2, [r7, #8]
 8005a2e:	8979      	ldrh	r1, [r7, #10]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	4603      	mov	r3, r0
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fac2 	bl	8005fc4 <I2C_RequestMemoryWrite>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d052      	beq.n	8005aec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e081      	b.n	8005b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 fd50 	bl	80064f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00d      	beq.n	8005a76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d107      	bne.n	8005a72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e06b      	b.n	8005b4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d11b      	bne.n	8005aec <HAL_I2C_Mem_Write+0x180>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d017      	beq.n	8005aec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1aa      	bne.n	8005a4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fd43 	bl	8006584 <I2C_WaitOnBTFFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00d      	beq.n	8005b20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d107      	bne.n	8005b1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e016      	b.n	8005b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	00100002 	.word	0x00100002
 8005b5c:	ffff0000 	.word	0xffff0000

08005b60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08c      	sub	sp, #48	@ 0x30
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	4608      	mov	r0, r1
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	817b      	strh	r3, [r7, #10]
 8005b72:	460b      	mov	r3, r1
 8005b74:	813b      	strh	r3, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b7a:	f7fe fb7f 	bl	800427c <HAL_GetTick>
 8005b7e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	f040 8214 	bne.w	8005fb6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	2319      	movs	r3, #25
 8005b94:	2201      	movs	r2, #1
 8005b96:	497b      	ldr	r1, [pc, #492]	@ (8005d84 <HAL_I2C_Mem_Read+0x224>)
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fb91 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d001      	beq.n	8005ba8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e207      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_I2C_Mem_Read+0x56>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e200      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d007      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2222      	movs	r2, #34	@ 0x22
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2240      	movs	r2, #64	@ 0x40
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a5b      	ldr	r2, [pc, #364]	@ (8005d88 <HAL_I2C_Mem_Read+0x228>)
 8005c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c1e:	88f8      	ldrh	r0, [r7, #6]
 8005c20:	893a      	ldrh	r2, [r7, #8]
 8005c22:	8979      	ldrh	r1, [r7, #10]
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	9301      	str	r3, [sp, #4]
 8005c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fa5e 	bl	80060f0 <I2C_RequestMemoryRead>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e1bc      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d113      	bne.n	8005c6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	623b      	str	r3, [r7, #32]
 8005c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e190      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d11b      	bne.n	8005cae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	61fb      	str	r3, [r7, #28]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	e170      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d11b      	bne.n	8005cee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	e150      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d04:	e144      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0a:	2b03      	cmp	r3, #3
 8005d0c:	f200 80f1 	bhi.w	8005ef2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d123      	bne.n	8005d60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fc79 	bl	8006614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e145      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d5e:	e117      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d14e      	bne.n	8005e06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	2200      	movs	r2, #0
 8005d70:	4906      	ldr	r1, [pc, #24]	@ (8005d8c <HAL_I2C_Mem_Read+0x22c>)
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 faa4 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e11a      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
 8005d82:	bf00      	nop
 8005d84:	00100002 	.word	0x00100002
 8005d88:	ffff0000 	.word	0xffff0000
 8005d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e04:	e0c4      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	496c      	ldr	r1, [pc, #432]	@ (8005fc0 <HAL_I2C_Mem_Read+0x460>)
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fa55 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0cb      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3a:	b2d2      	uxtb	r2, r2
 8005e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4955      	ldr	r1, [pc, #340]	@ (8005fc0 <HAL_I2C_Mem_Read+0x460>)
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fa27 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e09d      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ef0:	e04e      	b.n	8005f90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 fb8c 	bl	8006614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e058      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b04      	cmp	r3, #4
 8005f44:	d124      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d107      	bne.n	8005f5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f47f aeb6 	bne.w	8005d06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e000      	b.n	8005fb8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005fb6:	2302      	movs	r3, #2
  }
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3728      	adds	r7, #40	@ 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	00010004 	.word	0x00010004

08005fc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	4608      	mov	r0, r1
 8005fce:	4611      	mov	r1, r2
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	817b      	strh	r3, [r7, #10]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	813b      	strh	r3, [r7, #8]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f960 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006014:	d103      	bne.n	800601e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800601c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e05f      	b.n	80060e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006022:	897b      	ldrh	r3, [r7, #10]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	6a3a      	ldr	r2, [r7, #32]
 8006036:	492d      	ldr	r1, [pc, #180]	@ (80060ec <I2C_RequestMemoryWrite+0x128>)
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f9bb 	bl	80063b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e04c      	b.n	80060e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006048:	2300      	movs	r3, #0
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800605e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006060:	6a39      	ldr	r1, [r7, #32]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fa46 	bl	80064f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	2b04      	cmp	r3, #4
 8006074:	d107      	bne.n	8006086 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e02b      	b.n	80060e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006090:	893b      	ldrh	r3, [r7, #8]
 8006092:	b2da      	uxtb	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	611a      	str	r2, [r3, #16]
 800609a:	e021      	b.n	80060e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800609c:	893b      	ldrh	r3, [r7, #8]
 800609e:	0a1b      	lsrs	r3, r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ac:	6a39      	ldr	r1, [r7, #32]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fa20 	bl	80064f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d107      	bne.n	80060d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e005      	b.n	80060e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d6:	893b      	ldrh	r3, [r7, #8]
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	00010002 	.word	0x00010002

080060f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	4608      	mov	r0, r1
 80060fa:	4611      	mov	r1, r2
 80060fc:	461a      	mov	r2, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	460b      	mov	r3, r1
 8006104:	813b      	strh	r3, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006118:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	2200      	movs	r2, #0
 8006132:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f8c2 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00d      	beq.n	800615e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800614c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006150:	d103      	bne.n	800615a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006158:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0aa      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800615e:	897b      	ldrh	r3, [r7, #10]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800616c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	4952      	ldr	r1, [pc, #328]	@ (80062bc <I2C_RequestMemoryRead+0x1cc>)
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f91d 	bl	80063b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e097      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800619a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619c:	6a39      	ldr	r1, [r7, #32]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f9a8 	bl	80064f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00d      	beq.n	80061c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d107      	bne.n	80061c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e076      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061c6:	88fb      	ldrh	r3, [r7, #6]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d105      	bne.n	80061d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061cc:	893b      	ldrh	r3, [r7, #8]
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	611a      	str	r2, [r3, #16]
 80061d6:	e021      	b.n	800621c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061d8:	893b      	ldrh	r3, [r7, #8]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	b29b      	uxth	r3, r3
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e8:	6a39      	ldr	r1, [r7, #32]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f982 	bl	80064f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00d      	beq.n	8006212 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d107      	bne.n	800620e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800620c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e050      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006212:	893b      	ldrh	r3, [r7, #8]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800621c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621e:	6a39      	ldr	r1, [r7, #32]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f967 	bl	80064f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	2b04      	cmp	r3, #4
 8006232:	d107      	bne.n	8006244 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006242:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e035      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006256:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2200      	movs	r2, #0
 8006260:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f82b 	bl	80062c0 <I2C_WaitOnFlagUntilTimeout>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800627e:	d103      	bne.n	8006288 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006286:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e013      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800628c:	897b      	ldrh	r3, [r7, #10]
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	4906      	ldr	r1, [pc, #24]	@ (80062bc <I2C_RequestMemoryRead+0x1cc>)
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f886 	bl	80063b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d001      	beq.n	80062b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	00010002 	.word	0x00010002

080062c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d0:	e048      	b.n	8006364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062d8:	d044      	beq.n	8006364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062da:	f7fd ffcf 	bl	800427c <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d139      	bne.n	8006364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	0c1b      	lsrs	r3, r3, #16
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10d      	bne.n	8006316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	43da      	mvns	r2, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	e00c      	b.n	8006330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	43da      	mvns	r2, r3
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4013      	ands	r3, r2
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	bf0c      	ite	eq
 8006328:	2301      	moveq	r3, #1
 800632a:	2300      	movne	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	79fb      	ldrb	r3, [r7, #7]
 8006332:	429a      	cmp	r2, r3
 8006334:	d116      	bne.n	8006364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2220      	movs	r2, #32
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e023      	b.n	80063ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	0c1b      	lsrs	r3, r3, #16
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10d      	bne.n	800638a <I2C_WaitOnFlagUntilTimeout+0xca>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	43da      	mvns	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4013      	ands	r3, r2
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf0c      	ite	eq
 8006380:	2301      	moveq	r3, #1
 8006382:	2300      	movne	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	e00c      	b.n	80063a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	43da      	mvns	r2, r3
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4013      	ands	r3, r2
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	bf0c      	ite	eq
 800639c:	2301      	moveq	r3, #1
 800639e:	2300      	movne	r3, #0
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	461a      	mov	r2, r3
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d093      	beq.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c2:	e071      	b.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063d2:	d123      	bne.n	800641c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e067      	b.n	80064ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006422:	d041      	beq.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006424:	f7fd ff2a 	bl	800427c <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d136      	bne.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	0c1b      	lsrs	r3, r3, #16
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10c      	bne.n	800645e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	43da      	mvns	r2, r3
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	4013      	ands	r3, r2
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	bf14      	ite	ne
 8006456:	2301      	movne	r3, #1
 8006458:	2300      	moveq	r3, #0
 800645a:	b2db      	uxtb	r3, r3
 800645c:	e00b      	b.n	8006476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	43da      	mvns	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4013      	ands	r3, r2
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2301      	movne	r3, #1
 8006472:	2300      	moveq	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d016      	beq.n	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006494:	f043 0220 	orr.w	r2, r3, #32
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e021      	b.n	80064ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	0c1b      	lsrs	r3, r3, #16
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d10c      	bne.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	43da      	mvns	r2, r3
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4013      	ands	r3, r2
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	e00b      	b.n	80064e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	43da      	mvns	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4013      	ands	r3, r2
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f47f af6d 	bne.w	80063c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006500:	e034      	b.n	800656c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f8e3 	bl	80066ce <I2C_IsAcknowledgeFailed>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e034      	b.n	800657c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006518:	d028      	beq.n	800656c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fd feaf 	bl	800427c <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d11d      	bne.n	800656c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800653a:	2b80      	cmp	r3, #128	@ 0x80
 800653c:	d016      	beq.n	800656c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006558:	f043 0220 	orr.w	r2, r3, #32
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e007      	b.n	800657c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006576:	2b80      	cmp	r3, #128	@ 0x80
 8006578:	d1c3      	bne.n	8006502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006590:	e034      	b.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f89b 	bl	80066ce <I2C_IsAcknowledgeFailed>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e034      	b.n	800660c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065a8:	d028      	beq.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065aa:	f7fd fe67 	bl	800427c <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11d      	bne.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d016      	beq.n	80065fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	f043 0220 	orr.w	r2, r3, #32
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e007      	b.n	800660c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b04      	cmp	r3, #4
 8006608:	d1c3      	bne.n	8006592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006620:	e049      	b.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b10      	cmp	r3, #16
 800662e:	d119      	bne.n	8006664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0210 	mvn.w	r2, #16
 8006638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e030      	b.n	80066c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006664:	f7fd fe0a 	bl	800427c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	429a      	cmp	r2, r3
 8006672:	d302      	bcc.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d11d      	bne.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006684:	2b40      	cmp	r3, #64	@ 0x40
 8006686:	d016      	beq.n	80066b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	f043 0220 	orr.w	r2, r3, #32
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e007      	b.n	80066c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c0:	2b40      	cmp	r3, #64	@ 0x40
 80066c2:	d1ae      	bne.n	8006622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e4:	d11b      	bne.n	800671e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670a:	f043 0204 	orr.w	r2, r3, #4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0cc      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006740:	4b68      	ldr	r3, [pc, #416]	@ (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d90c      	bls.n	8006768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674e:	4b65      	ldr	r3, [pc, #404]	@ (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006756:	4b63      	ldr	r3, [pc, #396]	@ (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d001      	beq.n	8006768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0b8      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d020      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006780:	4b59      	ldr	r3, [pc, #356]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4a58      	ldr	r2, [pc, #352]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800678a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006798:	4b53      	ldr	r3, [pc, #332]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4a52      	ldr	r2, [pc, #328]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067a4:	4b50      	ldr	r3, [pc, #320]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	494d      	ldr	r1, [pc, #308]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d044      	beq.n	800684c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d107      	bne.n	80067da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ca:	4b47      	ldr	r3, [pc, #284]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d119      	bne.n	800680a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e07f      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d003      	beq.n	80067ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ea:	4b3f      	ldr	r3, [pc, #252]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e06f      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fa:	4b3b      	ldr	r3, [pc, #236]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e067      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680a:	4b37      	ldr	r3, [pc, #220]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f023 0203 	bic.w	r2, r3, #3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4934      	ldr	r1, [pc, #208]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	4313      	orrs	r3, r2
 800681a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800681c:	f7fd fd2e 	bl	800427c <HAL_GetTick>
 8006820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006822:	e00a      	b.n	800683a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006824:	f7fd fd2a 	bl	800427c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e04f      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683a:	4b2b      	ldr	r3, [pc, #172]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 020c 	and.w	r2, r3, #12
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	429a      	cmp	r2, r3
 800684a:	d1eb      	bne.n	8006824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800684c:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d20c      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b22      	ldr	r3, [pc, #136]	@ (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b20      	ldr	r3, [pc, #128]	@ (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d001      	beq.n	8006874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e032      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006880:	4b19      	ldr	r3, [pc, #100]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4916      	ldr	r1, [pc, #88]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800689e:	4b12      	ldr	r3, [pc, #72]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	490e      	ldr	r1, [pc, #56]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068b2:	f000 f887 	bl	80069c4 <HAL_RCC_GetSysClockFreq>
 80068b6:	4602      	mov	r2, r0
 80068b8:	4b0b      	ldr	r3, [pc, #44]	@ (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	091b      	lsrs	r3, r3, #4
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	490a      	ldr	r1, [pc, #40]	@ (80068ec <HAL_RCC_ClockConfig+0x1c0>)
 80068c4:	5ccb      	ldrb	r3, [r1, r3]
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	4a09      	ldr	r2, [pc, #36]	@ (80068f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068ce:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fd fa48 	bl	8003d68 <HAL_InitTick>

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023c00 	.word	0x40023c00
 80068e8:	40023800 	.word	0x40023800
 80068ec:	0801d414 	.word	0x0801d414
 80068f0:	20000008 	.word	0x20000008
 80068f4:	2000000c 	.word	0x2000000c

080068f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f8:	b480      	push	{r7}
 80068fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068fc:	4b03      	ldr	r3, [pc, #12]	@ (800690c <HAL_RCC_GetHCLKFreq+0x14>)
 80068fe:	681b      	ldr	r3, [r3, #0]
}
 8006900:	4618      	mov	r0, r3
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	20000008 	.word	0x20000008

08006910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006914:	f7ff fff0 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	0a9b      	lsrs	r3, r3, #10
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4903      	ldr	r1, [pc, #12]	@ (8006934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800692c:	4618      	mov	r0, r3
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40023800 	.word	0x40023800
 8006934:	0801d424 	.word	0x0801d424

08006938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800693c:	f7ff ffdc 	bl	80068f8 <HAL_RCC_GetHCLKFreq>
 8006940:	4602      	mov	r2, r0
 8006942:	4b05      	ldr	r3, [pc, #20]	@ (8006958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	0b5b      	lsrs	r3, r3, #13
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4903      	ldr	r1, [pc, #12]	@ (800695c <HAL_RCC_GetPCLK2Freq+0x24>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40023800 	.word	0x40023800
 800695c:	0801d424 	.word	0x0801d424

08006960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	220f      	movs	r2, #15
 800696e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006970:	4b12      	ldr	r3, [pc, #72]	@ (80069bc <HAL_RCC_GetClockConfig+0x5c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0203 	and.w	r2, r3, #3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800697c:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <HAL_RCC_GetClockConfig+0x5c>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006988:	4b0c      	ldr	r3, [pc, #48]	@ (80069bc <HAL_RCC_GetClockConfig+0x5c>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <HAL_RCC_GetClockConfig+0x5c>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	08db      	lsrs	r3, r3, #3
 800699a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069a2:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <HAL_RCC_GetClockConfig+0x60>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 020f 	and.w	r2, r3, #15
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	601a      	str	r2, [r3, #0]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40023800 	.word	0x40023800
 80069c0:	40023c00 	.word	0x40023c00

080069c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b0a6      	sub	sp, #152	@ 0x98
 80069ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069ea:	4bc8      	ldr	r3, [pc, #800]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b0c      	cmp	r3, #12
 80069f4:	f200 817e 	bhi.w	8006cf4 <HAL_RCC_GetSysClockFreq+0x330>
 80069f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006a00 <HAL_RCC_GetSysClockFreq+0x3c>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a35 	.word	0x08006a35
 8006a04:	08006cf5 	.word	0x08006cf5
 8006a08:	08006cf5 	.word	0x08006cf5
 8006a0c:	08006cf5 	.word	0x08006cf5
 8006a10:	08006a3d 	.word	0x08006a3d
 8006a14:	08006cf5 	.word	0x08006cf5
 8006a18:	08006cf5 	.word	0x08006cf5
 8006a1c:	08006cf5 	.word	0x08006cf5
 8006a20:	08006a45 	.word	0x08006a45
 8006a24:	08006cf5 	.word	0x08006cf5
 8006a28:	08006cf5 	.word	0x08006cf5
 8006a2c:	08006cf5 	.word	0x08006cf5
 8006a30:	08006baf 	.word	0x08006baf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a34:	4bb6      	ldr	r3, [pc, #728]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006a3a:	e15f      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a3c:	4bb5      	ldr	r3, [pc, #724]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x350>)
 8006a3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006a42:	e15b      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a44:	4bb1      	ldr	r3, [pc, #708]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a50:	4bae      	ldr	r3, [pc, #696]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d031      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a5c:	4bab      	ldr	r3, [pc, #684]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	099b      	lsrs	r3, r3, #6
 8006a62:	2200      	movs	r2, #0
 8006a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a70:	2300      	movs	r3, #0
 8006a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a74:	4ba7      	ldr	r3, [pc, #668]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x350>)
 8006a76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006a7a:	462a      	mov	r2, r5
 8006a7c:	fb03 f202 	mul.w	r2, r3, r2
 8006a80:	2300      	movs	r3, #0
 8006a82:	4621      	mov	r1, r4
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	4aa2      	ldr	r2, [pc, #648]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x350>)
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	fba1 1202 	umull	r1, r2, r1, r2
 8006a92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a94:	460a      	mov	r2, r1
 8006a96:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006a98:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aa6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006aa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006aac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006ab0:	f7fa f884 	bl	8000bbc <__aeabi_uldivmod>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4613      	mov	r3, r2
 8006aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006abe:	e064      	b.n	8006b8a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ac0:	4b92      	ldr	r3, [pc, #584]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	099b      	lsrs	r3, r3, #6
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aca:	657a      	str	r2, [r7, #84]	@ 0x54
 8006acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ad2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006adc:	4622      	mov	r2, r4
 8006ade:	462b      	mov	r3, r5
 8006ae0:	f04f 0000 	mov.w	r0, #0
 8006ae4:	f04f 0100 	mov.w	r1, #0
 8006ae8:	0159      	lsls	r1, r3, #5
 8006aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aee:	0150      	lsls	r0, r2, #5
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	4621      	mov	r1, r4
 8006af6:	1a51      	subs	r1, r2, r1
 8006af8:	6139      	str	r1, [r7, #16]
 8006afa:	4629      	mov	r1, r5
 8006afc:	eb63 0301 	sbc.w	r3, r3, r1
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	f04f 0300 	mov.w	r3, #0
 8006b0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b0e:	4659      	mov	r1, fp
 8006b10:	018b      	lsls	r3, r1, #6
 8006b12:	4651      	mov	r1, sl
 8006b14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b18:	4651      	mov	r1, sl
 8006b1a:	018a      	lsls	r2, r1, #6
 8006b1c:	4651      	mov	r1, sl
 8006b1e:	ebb2 0801 	subs.w	r8, r2, r1
 8006b22:	4659      	mov	r1, fp
 8006b24:	eb63 0901 	sbc.w	r9, r3, r1
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b3c:	4690      	mov	r8, r2
 8006b3e:	4699      	mov	r9, r3
 8006b40:	4623      	mov	r3, r4
 8006b42:	eb18 0303 	adds.w	r3, r8, r3
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	462b      	mov	r3, r5
 8006b4a:	eb49 0303 	adc.w	r3, r9, r3
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	028b      	lsls	r3, r1, #10
 8006b60:	4621      	mov	r1, r4
 8006b62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b66:	4621      	mov	r1, r4
 8006b68:	028a      	lsls	r2, r1, #10
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b72:	2200      	movs	r2, #0
 8006b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b7c:	f7fa f81e 	bl	8000bbc <__aeabi_uldivmod>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4613      	mov	r3, r2
 8006b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b8a:	4b60      	ldr	r3, [pc, #384]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	0c1b      	lsrs	r3, r3, #16
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	3301      	adds	r3, #1
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8006b9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006bac:	e0a6      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bae:	4b57      	ldr	r3, [pc, #348]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bba:	4b54      	ldr	r3, [pc, #336]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02a      	beq.n	8006c1c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bc6:	4b51      	ldr	r3, [pc, #324]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	099b      	lsrs	r3, r3, #6
 8006bcc:	2200      	movs	r2, #0
 8006bce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4b4e      	ldr	r3, [pc, #312]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x350>)
 8006bdc:	fb03 f201 	mul.w	r2, r3, r1
 8006be0:	2300      	movs	r3, #0
 8006be2:	fb00 f303 	mul.w	r3, r0, r3
 8006be6:	4413      	add	r3, r2
 8006be8:	4a4a      	ldr	r2, [pc, #296]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x350>)
 8006bea:	fba0 1202 	umull	r1, r2, r0, r2
 8006bee:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	673a      	str	r2, [r7, #112]	@ 0x70
 8006bf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006bf6:	4413      	add	r3, r2
 8006bf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bfe:	2200      	movs	r2, #0
 8006c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c02:	637a      	str	r2, [r7, #52]	@ 0x34
 8006c04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006c08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006c0c:	f7f9 ffd6 	bl	8000bbc <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4613      	mov	r3, r2
 8006c16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c1a:	e05b      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	099b      	lsrs	r3, r3, #6
 8006c22:	2200      	movs	r2, #0
 8006c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	623b      	str	r3, [r7, #32]
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c38:	4642      	mov	r2, r8
 8006c3a:	464b      	mov	r3, r9
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	f04f 0100 	mov.w	r1, #0
 8006c44:	0159      	lsls	r1, r3, #5
 8006c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c4a:	0150      	lsls	r0, r2, #5
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4641      	mov	r1, r8
 8006c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c56:	4649      	mov	r1, r9
 8006c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c70:	ebb2 040a 	subs.w	r4, r2, sl
 8006c74:	eb63 050b 	sbc.w	r5, r3, fp
 8006c78:	f04f 0200 	mov.w	r2, #0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	00eb      	lsls	r3, r5, #3
 8006c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c86:	00e2      	lsls	r2, r4, #3
 8006c88:	4614      	mov	r4, r2
 8006c8a:	461d      	mov	r5, r3
 8006c8c:	4643      	mov	r3, r8
 8006c8e:	18e3      	adds	r3, r4, r3
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	464b      	mov	r3, r9
 8006c94:	eb45 0303 	adc.w	r3, r5, r3
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	f04f 0200 	mov.w	r2, #0
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	028b      	lsls	r3, r1, #10
 8006caa:	4621      	mov	r1, r4
 8006cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	028a      	lsls	r2, r1, #10
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	61fa      	str	r2, [r7, #28]
 8006cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cc6:	f7f9 ff79 	bl	8000bbc <__aeabi_uldivmod>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4613      	mov	r3, r2
 8006cd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <HAL_RCC_GetSysClockFreq+0x348>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	0f1b      	lsrs	r3, r3, #28
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8006ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ce6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006cf2:	e003      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006cf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3798      	adds	r7, #152	@ 0x98
 8006d04:	46bd      	mov	sp, r7
 8006d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40023800 	.word	0x40023800
 8006d10:	00f42400 	.word	0x00f42400
 8006d14:	017d7840 	.word	0x017d7840

08006d18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e28d      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8083 	beq.w	8006e3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d38:	4b94      	ldr	r3, [pc, #592]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 030c 	and.w	r3, r3, #12
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d019      	beq.n	8006d78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006d44:	4b91      	ldr	r3, [pc, #580]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 030c 	and.w	r3, r3, #12
        || \
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d106      	bne.n	8006d5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006d50:	4b8e      	ldr	r3, [pc, #568]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d5c:	d00c      	beq.n	8006d78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006d66:	2b0c      	cmp	r3, #12
 8006d68:	d112      	bne.n	8006d90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d6a:	4b88      	ldr	r3, [pc, #544]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d76:	d10b      	bne.n	8006d90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d78:	4b84      	ldr	r3, [pc, #528]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d05b      	beq.n	8006e3c <HAL_RCC_OscConfig+0x124>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d157      	bne.n	8006e3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e25a      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d98:	d106      	bne.n	8006da8 <HAL_RCC_OscConfig+0x90>
 8006d9a:	4b7c      	ldr	r3, [pc, #496]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a7b      	ldr	r2, [pc, #492]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e01d      	b.n	8006de4 <HAL_RCC_OscConfig+0xcc>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCC_OscConfig+0xb4>
 8006db2:	4b76      	ldr	r3, [pc, #472]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a75      	ldr	r2, [pc, #468]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	4b73      	ldr	r3, [pc, #460]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a72      	ldr	r2, [pc, #456]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e00b      	b.n	8006de4 <HAL_RCC_OscConfig+0xcc>
 8006dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a6e      	ldr	r2, [pc, #440]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a6b      	ldr	r2, [pc, #428]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d013      	beq.n	8006e14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dec:	f7fd fa46 	bl	800427c <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df4:	f7fd fa42 	bl	800427c <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b64      	cmp	r3, #100	@ 0x64
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e21f      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e06:	4b61      	ldr	r3, [pc, #388]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f0      	beq.n	8006df4 <HAL_RCC_OscConfig+0xdc>
 8006e12:	e014      	b.n	8006e3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fd fa32 	bl	800427c <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7fd fa2e 	bl	800427c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	@ 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e20b      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e2e:	4b57      	ldr	r3, [pc, #348]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x104>
 8006e3a:	e000      	b.n	8006e3e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d06f      	beq.n	8006f2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006e4a:	4b50      	ldr	r3, [pc, #320]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d017      	beq.n	8006e86 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006e56:	4b4d      	ldr	r3, [pc, #308]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d105      	bne.n	8006e6e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006e62:	4b4a      	ldr	r3, [pc, #296]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e6e:	4b47      	ldr	r3, [pc, #284]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006e76:	2b0c      	cmp	r3, #12
 8006e78:	d11c      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e7a:	4b44      	ldr	r3, [pc, #272]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d116      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e86:	4b41      	ldr	r3, [pc, #260]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <HAL_RCC_OscConfig+0x186>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d001      	beq.n	8006e9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e1d3      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4937      	ldr	r1, [pc, #220]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eb2:	e03a      	b.n	8006f2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ebc:	4b34      	ldr	r3, [pc, #208]	@ (8006f90 <HAL_RCC_OscConfig+0x278>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec2:	f7fd f9db 	bl	800427c <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eca:	f7fd f9d7 	bl	800427c <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e1b4      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006edc:	4b2b      	ldr	r3, [pc, #172]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0f0      	beq.n	8006eca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee8:	4b28      	ldr	r3, [pc, #160]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	4925      	ldr	r1, [pc, #148]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	600b      	str	r3, [r1, #0]
 8006efc:	e015      	b.n	8006f2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006efe:	4b24      	ldr	r3, [pc, #144]	@ (8006f90 <HAL_RCC_OscConfig+0x278>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f04:	f7fd f9ba 	bl	800427c <HAL_GetTick>
 8006f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f0a:	e008      	b.n	8006f1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f0c:	f7fd f9b6 	bl	800427c <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e193      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0302 	and.w	r3, r3, #2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f0      	bne.n	8006f0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d036      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f3e:	4b15      	ldr	r3, [pc, #84]	@ (8006f94 <HAL_RCC_OscConfig+0x27c>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f44:	f7fd f99a 	bl	800427c <HAL_GetTick>
 8006f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4c:	f7fd f996 	bl	800427c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e173      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f8c <HAL_RCC_OscConfig+0x274>)
 8006f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x234>
 8006f6a:	e01b      	b.n	8006fa4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6c:	4b09      	ldr	r3, [pc, #36]	@ (8006f94 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f72:	f7fd f983 	bl	800427c <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f78:	e00e      	b.n	8006f98 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7a:	f7fd f97f 	bl	800427c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d907      	bls.n	8006f98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e15c      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	42470000 	.word	0x42470000
 8006f94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f98:	4b8a      	ldr	r3, [pc, #552]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8006f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1ea      	bne.n	8006f7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	f000 8097 	beq.w	80070e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fb6:	4b83      	ldr	r3, [pc, #524]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10f      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60bb      	str	r3, [r7, #8]
 8006fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fca:	4a7e      	ldr	r2, [pc, #504]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8006fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fda:	60bb      	str	r3, [r7, #8]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe2:	4b79      	ldr	r3, [pc, #484]	@ (80071c8 <HAL_RCC_OscConfig+0x4b0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d118      	bne.n	8007020 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fee:	4b76      	ldr	r3, [pc, #472]	@ (80071c8 <HAL_RCC_OscConfig+0x4b0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a75      	ldr	r2, [pc, #468]	@ (80071c8 <HAL_RCC_OscConfig+0x4b0>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ffa:	f7fd f93f 	bl	800427c <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007002:	f7fd f93b 	bl	800427c <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e118      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007014:	4b6c      	ldr	r3, [pc, #432]	@ (80071c8 <HAL_RCC_OscConfig+0x4b0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800701c:	2b00      	cmp	r3, #0
 800701e:	d0f0      	beq.n	8007002 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d106      	bne.n	8007036 <HAL_RCC_OscConfig+0x31e>
 8007028:	4b66      	ldr	r3, [pc, #408]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800702a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702c:	4a65      	ldr	r2, [pc, #404]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800702e:	f043 0301 	orr.w	r3, r3, #1
 8007032:	6713      	str	r3, [r2, #112]	@ 0x70
 8007034:	e01c      	b.n	8007070 <HAL_RCC_OscConfig+0x358>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b05      	cmp	r3, #5
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0x340>
 800703e:	4b61      	ldr	r3, [pc, #388]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	4a60      	ldr	r2, [pc, #384]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007044:	f043 0304 	orr.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	@ 0x70
 800704a:	4b5e      	ldr	r3, [pc, #376]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800704c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704e:	4a5d      	ldr	r2, [pc, #372]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007050:	f043 0301 	orr.w	r3, r3, #1
 8007054:	6713      	str	r3, [r2, #112]	@ 0x70
 8007056:	e00b      	b.n	8007070 <HAL_RCC_OscConfig+0x358>
 8007058:	4b5a      	ldr	r3, [pc, #360]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705c:	4a59      	ldr	r2, [pc, #356]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	6713      	str	r3, [r2, #112]	@ 0x70
 8007064:	4b57      	ldr	r3, [pc, #348]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007068:	4a56      	ldr	r2, [pc, #344]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800706a:	f023 0304 	bic.w	r3, r3, #4
 800706e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007078:	f7fd f900 	bl	800427c <HAL_GetTick>
 800707c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707e:	e00a      	b.n	8007096 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007080:	f7fd f8fc 	bl	800427c <HAL_GetTick>
 8007084:	4602      	mov	r2, r0
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e0d7      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007096:	4b4b      	ldr	r3, [pc, #300]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0ee      	beq.n	8007080 <HAL_RCC_OscConfig+0x368>
 80070a2:	e014      	b.n	80070ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a4:	f7fd f8ea 	bl	800427c <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ac:	f7fd f8e6 	bl	800427c <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e0c1      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c2:	4b40      	ldr	r3, [pc, #256]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1ee      	bne.n	80070ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d105      	bne.n	80070e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d4:	4b3b      	ldr	r3, [pc, #236]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d8:	4a3a      	ldr	r2, [pc, #232]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 80070da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 80ad 	beq.w	8007244 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070ea:	4b36      	ldr	r3, [pc, #216]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d060      	beq.n	80071b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d145      	bne.n	800718a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fe:	4b33      	ldr	r3, [pc, #204]	@ (80071cc <HAL_RCC_OscConfig+0x4b4>)
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007104:	f7fd f8ba 	bl	800427c <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800710a:	e008      	b.n	800711e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800710c:	f7fd f8b6 	bl	800427c <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d901      	bls.n	800711e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e093      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800711e:	4b29      	ldr	r3, [pc, #164]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1f0      	bne.n	800710c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69da      	ldr	r2, [r3, #28]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	431a      	orrs	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	019b      	lsls	r3, r3, #6
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	085b      	lsrs	r3, r3, #1
 8007142:	3b01      	subs	r3, #1
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714c:	061b      	lsls	r3, r3, #24
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	491b      	ldr	r1, [pc, #108]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 8007158:	4313      	orrs	r3, r2
 800715a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800715c:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <HAL_RCC_OscConfig+0x4b4>)
 800715e:	2201      	movs	r2, #1
 8007160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007162:	f7fd f88b 	bl	800427c <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007168:	e008      	b.n	800717c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800716a:	f7fd f887 	bl	800427c <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e064      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717c:	4b11      	ldr	r3, [pc, #68]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0f0      	beq.n	800716a <HAL_RCC_OscConfig+0x452>
 8007188:	e05c      	b.n	8007244 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800718a:	4b10      	ldr	r3, [pc, #64]	@ (80071cc <HAL_RCC_OscConfig+0x4b4>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fd f874 	bl	800427c <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007198:	f7fd f870 	bl	800427c <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e04d      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071aa:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <HAL_RCC_OscConfig+0x4ac>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x480>
 80071b6:	e045      	b.n	8007244 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d107      	bne.n	80071d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e040      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
 80071c4:	40023800 	.word	0x40023800
 80071c8:	40007000 	.word	0x40007000
 80071cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007250 <HAL_RCC_OscConfig+0x538>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d030      	beq.n	8007240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d129      	bne.n	8007240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d122      	bne.n	8007240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007200:	4013      	ands	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007206:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007208:	4293      	cmp	r3, r2
 800720a:	d119      	bne.n	8007240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	3b01      	subs	r3, #1
 800721a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800721c:	429a      	cmp	r2, r3
 800721e:	d10f      	bne.n	8007240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800722c:	429a      	cmp	r2, r3
 800722e:	d107      	bne.n	8007240 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800723c:	429a      	cmp	r2, r3
 800723e:	d001      	beq.n	8007244 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e000      	b.n	8007246 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40023800 	.word	0x40023800

08007254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e041      	b.n	80072ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d106      	bne.n	8007280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7fc fc38 	bl	8003af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3304      	adds	r3, #4
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f000 fd8c 	bl	8007db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e04e      	b.n	80073aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a23      	ldr	r2, [pc, #140]	@ (80073b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d022      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007336:	d01d      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1f      	ldr	r2, [pc, #124]	@ (80073bc <HAL_TIM_Base_Start_IT+0xc8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d018      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1e      	ldr	r2, [pc, #120]	@ (80073c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d013      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1c      	ldr	r2, [pc, #112]	@ (80073c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00e      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1b      	ldr	r2, [pc, #108]	@ (80073c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d009      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a19      	ldr	r2, [pc, #100]	@ (80073cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_TIM_Base_Start_IT+0x80>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d111      	bne.n	8007398 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d010      	beq.n	80073a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007396:	e007      	b.n	80073a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 0201 	orr.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40000400 	.word	0x40000400
 80073c0:	40000800 	.word	0x40000800
 80073c4:	40000c00 	.word	0x40000c00
 80073c8:	40010400 	.word	0x40010400
 80073cc:	40014000 	.word	0x40014000
 80073d0:	40001800 	.word	0x40001800

080073d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e041      	b.n	800746a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fc fba0 	bl	8003b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4610      	mov	r0, r2
 8007414:	f000 fccc 	bl	8007db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_TIM_PWM_Start+0x24>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e022      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b04      	cmp	r3, #4
 800749c:	d109      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x3e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	bf14      	ite	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	2300      	moveq	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e015      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_PWM_Start+0x58>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e008      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e07c      	b.n	80075e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x82>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074f4:	e013      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_PWM_Start+0x92>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007504:	e00b      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007514:	e003      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2201      	movs	r2, #1
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 ff32 	bl	8008390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2d      	ldr	r2, [pc, #180]	@ (80075e8 <HAL_TIM_PWM_Start+0x174>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d004      	beq.n	8007540 <HAL_TIM_PWM_Start+0xcc>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a2c      	ldr	r2, [pc, #176]	@ (80075ec <HAL_TIM_PWM_Start+0x178>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d101      	bne.n	8007544 <HAL_TIM_PWM_Start+0xd0>
 8007540:	2301      	movs	r3, #1
 8007542:	e000      	b.n	8007546 <HAL_TIM_PWM_Start+0xd2>
 8007544:	2300      	movs	r3, #0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d007      	beq.n	800755a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a22      	ldr	r2, [pc, #136]	@ (80075e8 <HAL_TIM_PWM_Start+0x174>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d022      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756c:	d01d      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1f      	ldr	r2, [pc, #124]	@ (80075f0 <HAL_TIM_PWM_Start+0x17c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d018      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1d      	ldr	r2, [pc, #116]	@ (80075f4 <HAL_TIM_PWM_Start+0x180>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d013      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1c      	ldr	r2, [pc, #112]	@ (80075f8 <HAL_TIM_PWM_Start+0x184>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d00e      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a16      	ldr	r2, [pc, #88]	@ (80075ec <HAL_TIM_PWM_Start+0x178>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d009      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	@ (80075fc <HAL_TIM_PWM_Start+0x188>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d004      	beq.n	80075aa <HAL_TIM_PWM_Start+0x136>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a16      	ldr	r2, [pc, #88]	@ (8007600 <HAL_TIM_PWM_Start+0x18c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d111      	bne.n	80075ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2b06      	cmp	r3, #6
 80075ba:	d010      	beq.n	80075de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075cc:	e007      	b.n	80075de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40010000 	.word	0x40010000
 80075ec:	40010400 	.word	0x40010400
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40014000 	.word	0x40014000
 8007600:	40001800 	.word	0x40001800

08007604 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e097      	b.n	8007748 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f7fc f97b 	bl	8003928 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2202      	movs	r2, #2
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007648:	f023 0307 	bic.w	r3, r3, #7
 800764c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3304      	adds	r3, #4
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f000 fba9 	bl	8007db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	4313      	orrs	r3, r2
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80076a4:	f023 030c 	bic.w	r3, r3, #12
 80076a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	69db      	ldr	r3, [r3, #28]
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	4313      	orrs	r3, r2
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	031b      	lsls	r3, r3, #12
 80076d4:	4313      	orrs	r3, r2
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	4313      	orrs	r3, r2
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007760:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007768:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007770:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007778:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d110      	bne.n	80077a2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d102      	bne.n	800778c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007786:	7b7b      	ldrb	r3, [r7, #13]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d001      	beq.n	8007790 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e069      	b.n	8007864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2202      	movs	r2, #2
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a0:	e031      	b.n	8007806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d110      	bne.n	80077ca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d102      	bne.n	80077b4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077ae:	7b3b      	ldrb	r3, [r7, #12]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d001      	beq.n	80077b8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e055      	b.n	8007864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077c8:	e01d      	b.n	8007806 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d108      	bne.n	80077e2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d105      	bne.n	80077e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077d6:	7b7b      	ldrb	r3, [r7, #13]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d102      	bne.n	80077e2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077dc:	7b3b      	ldrb	r3, [r7, #12]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e03e      	b.n	8007864 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2202      	movs	r2, #2
 80077f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <HAL_TIM_Encoder_Start+0xc4>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b04      	cmp	r3, #4
 8007810:	d008      	beq.n	8007824 <HAL_TIM_Encoder_Start+0xd4>
 8007812:	e00f      	b.n	8007834 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2201      	movs	r2, #1
 800781a:	2100      	movs	r1, #0
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fdb7 	bl	8008390 <TIM_CCxChannelCmd>
      break;
 8007822:	e016      	b.n	8007852 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2201      	movs	r2, #1
 800782a:	2104      	movs	r1, #4
 800782c:	4618      	mov	r0, r3
 800782e:	f000 fdaf 	bl	8008390 <TIM_CCxChannelCmd>
      break;
 8007832:	e00e      	b.n	8007852 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2201      	movs	r2, #1
 800783a:	2100      	movs	r1, #0
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fda7 	bl	8008390 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	2104      	movs	r1, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f000 fda0 	bl	8008390 <TIM_CCxChannelCmd>
      break;
 8007850:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0201 	orr.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d020      	beq.n	80078d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d01b      	beq.n	80078d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0202 	mvn.w	r2, #2
 80078a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa5b 	bl	8007d72 <HAL_TIM_IC_CaptureCallback>
 80078bc:	e005      	b.n	80078ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa4d 	bl	8007d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fa5e 	bl	8007d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d020      	beq.n	800791c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01b      	beq.n	800791c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f06f 0204 	mvn.w	r2, #4
 80078ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa35 	bl	8007d72 <HAL_TIM_IC_CaptureCallback>
 8007908:	e005      	b.n	8007916 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fa27 	bl	8007d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa38 	bl	8007d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d020      	beq.n	8007968 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01b      	beq.n	8007968 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f06f 0208 	mvn.w	r2, #8
 8007938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2204      	movs	r2, #4
 800793e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fa0f 	bl	8007d72 <HAL_TIM_IC_CaptureCallback>
 8007954:	e005      	b.n	8007962 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fa01 	bl	8007d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fa12 	bl	8007d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b00      	cmp	r3, #0
 8007970:	d020      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0310 	and.w	r3, r3, #16
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01b      	beq.n	80079b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0210 	mvn.w	r2, #16
 8007984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2208      	movs	r2, #8
 800798a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 f9e9 	bl	8007d72 <HAL_TIM_IC_CaptureCallback>
 80079a0:	e005      	b.n	80079ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f9db 	bl	8007d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9ec 	bl	8007d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00c      	beq.n	80079d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f06f 0201 	mvn.w	r2, #1
 80079d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fc fb82 	bl	80040dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00c      	beq.n	80079fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80079f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fdc8 	bl	800858c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00c      	beq.n	8007a20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f9bd 	bl	8007d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00c      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d007      	beq.n	8007a44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0220 	mvn.w	r2, #32
 8007a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fd9a 	bl	8008578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d101      	bne.n	8007a6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e0ae      	b.n	8007bc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b0c      	cmp	r3, #12
 8007a76:	f200 809f 	bhi.w	8007bb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007bb9 	.word	0x08007bb9
 8007a88:	08007bb9 	.word	0x08007bb9
 8007a8c:	08007bb9 	.word	0x08007bb9
 8007a90:	08007af5 	.word	0x08007af5
 8007a94:	08007bb9 	.word	0x08007bb9
 8007a98:	08007bb9 	.word	0x08007bb9
 8007a9c:	08007bb9 	.word	0x08007bb9
 8007aa0:	08007b37 	.word	0x08007b37
 8007aa4:	08007bb9 	.word	0x08007bb9
 8007aa8:	08007bb9 	.word	0x08007bb9
 8007aac:	08007bb9 	.word	0x08007bb9
 8007ab0:	08007b77 	.word	0x08007b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 fa1e 	bl	8007efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0208 	orr.w	r2, r2, #8
 8007ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0204 	bic.w	r2, r2, #4
 8007ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6999      	ldr	r1, [r3, #24]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	619a      	str	r2, [r3, #24]
      break;
 8007af2:	e064      	b.n	8007bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fa6e 	bl	8007fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6999      	ldr	r1, [r3, #24]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	021a      	lsls	r2, r3, #8
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	619a      	str	r2, [r3, #24]
      break;
 8007b34:	e043      	b.n	8007bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f000 fac3 	bl	80080c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f042 0208 	orr.w	r2, r2, #8
 8007b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69da      	ldr	r2, [r3, #28]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f022 0204 	bic.w	r2, r2, #4
 8007b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69d9      	ldr	r1, [r3, #28]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	61da      	str	r2, [r3, #28]
      break;
 8007b74:	e023      	b.n	8007bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fb17 	bl	80081b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69d9      	ldr	r1, [r3, #28]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	021a      	lsls	r2, r3, #8
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	61da      	str	r2, [r3, #28]
      break;
 8007bb6:	e002      	b.n	8007bbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d101      	bne.n	8007bec <HAL_TIM_ConfigClockSource+0x1c>
 8007be8:	2302      	movs	r3, #2
 8007bea:	e0b4      	b.n	8007d56 <HAL_TIM_ConfigClockSource+0x186>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c24:	d03e      	beq.n	8007ca4 <HAL_TIM_ConfigClockSource+0xd4>
 8007c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c2a:	f200 8087 	bhi.w	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c32:	f000 8086 	beq.w	8007d42 <HAL_TIM_ConfigClockSource+0x172>
 8007c36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c3a:	d87f      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c3c:	2b70      	cmp	r3, #112	@ 0x70
 8007c3e:	d01a      	beq.n	8007c76 <HAL_TIM_ConfigClockSource+0xa6>
 8007c40:	2b70      	cmp	r3, #112	@ 0x70
 8007c42:	d87b      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c44:	2b60      	cmp	r3, #96	@ 0x60
 8007c46:	d050      	beq.n	8007cea <HAL_TIM_ConfigClockSource+0x11a>
 8007c48:	2b60      	cmp	r3, #96	@ 0x60
 8007c4a:	d877      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c4c:	2b50      	cmp	r3, #80	@ 0x50
 8007c4e:	d03c      	beq.n	8007cca <HAL_TIM_ConfigClockSource+0xfa>
 8007c50:	2b50      	cmp	r3, #80	@ 0x50
 8007c52:	d873      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	d058      	beq.n	8007d0a <HAL_TIM_ConfigClockSource+0x13a>
 8007c58:	2b40      	cmp	r3, #64	@ 0x40
 8007c5a:	d86f      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c5c:	2b30      	cmp	r3, #48	@ 0x30
 8007c5e:	d064      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c60:	2b30      	cmp	r3, #48	@ 0x30
 8007c62:	d86b      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c64:	2b20      	cmp	r3, #32
 8007c66:	d060      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d867      	bhi.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05c      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	d05a      	beq.n	8007d2a <HAL_TIM_ConfigClockSource+0x15a>
 8007c74:	e062      	b.n	8007d3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c86:	f000 fb63 	bl	8008350 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	609a      	str	r2, [r3, #8]
      break;
 8007ca2:	e04f      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cb4:	f000 fb4c 	bl	8008350 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cc6:	609a      	str	r2, [r3, #8]
      break;
 8007cc8:	e03c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f000 fac0 	bl	800825c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2150      	movs	r1, #80	@ 0x50
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fb19 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007ce8:	e02c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f000 fadf 	bl	80082ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2160      	movs	r1, #96	@ 0x60
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fb09 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007d08:	e01c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d16:	461a      	mov	r2, r3
 8007d18:	f000 faa0 	bl	800825c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2140      	movs	r1, #64	@ 0x40
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 faf9 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007d28:	e00c      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4619      	mov	r1, r3
 8007d34:	4610      	mov	r0, r2
 8007d36:	f000 faf0 	bl	800831a <TIM_ITRx_SetConfig>
      break;
 8007d3a:	e003      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d40:	e000      	b.n	8007d44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
	...

08007db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a43      	ldr	r2, [pc, #268]	@ (8007ed0 <TIM_Base_SetConfig+0x120>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <TIM_Base_SetConfig+0x40>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dce:	d00f      	beq.n	8007df0 <TIM_Base_SetConfig+0x40>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a40      	ldr	r2, [pc, #256]	@ (8007ed4 <TIM_Base_SetConfig+0x124>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00b      	beq.n	8007df0 <TIM_Base_SetConfig+0x40>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a3f      	ldr	r2, [pc, #252]	@ (8007ed8 <TIM_Base_SetConfig+0x128>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d007      	beq.n	8007df0 <TIM_Base_SetConfig+0x40>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a3e      	ldr	r2, [pc, #248]	@ (8007edc <TIM_Base_SetConfig+0x12c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d003      	beq.n	8007df0 <TIM_Base_SetConfig+0x40>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a3d      	ldr	r2, [pc, #244]	@ (8007ee0 <TIM_Base_SetConfig+0x130>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d108      	bne.n	8007e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a32      	ldr	r2, [pc, #200]	@ (8007ed0 <TIM_Base_SetConfig+0x120>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d02b      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e10:	d027      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a2f      	ldr	r2, [pc, #188]	@ (8007ed4 <TIM_Base_SetConfig+0x124>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d023      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ed8 <TIM_Base_SetConfig+0x128>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d01f      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a2d      	ldr	r2, [pc, #180]	@ (8007edc <TIM_Base_SetConfig+0x12c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01b      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8007ee0 <TIM_Base_SetConfig+0x130>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d017      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2b      	ldr	r2, [pc, #172]	@ (8007ee4 <TIM_Base_SetConfig+0x134>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ee8 <TIM_Base_SetConfig+0x138>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a29      	ldr	r2, [pc, #164]	@ (8007eec <TIM_Base_SetConfig+0x13c>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a28      	ldr	r2, [pc, #160]	@ (8007ef0 <TIM_Base_SetConfig+0x140>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a27      	ldr	r2, [pc, #156]	@ (8007ef4 <TIM_Base_SetConfig+0x144>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a26      	ldr	r2, [pc, #152]	@ (8007ef8 <TIM_Base_SetConfig+0x148>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d108      	bne.n	8007e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a0e      	ldr	r2, [pc, #56]	@ (8007ed0 <TIM_Base_SetConfig+0x120>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d003      	beq.n	8007ea2 <TIM_Base_SetConfig+0xf2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a10      	ldr	r2, [pc, #64]	@ (8007ee0 <TIM_Base_SetConfig+0x130>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d103      	bne.n	8007eaa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	691a      	ldr	r2, [r3, #16]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f043 0204 	orr.w	r2, r3, #4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	40010000 	.word	0x40010000
 8007ed4:	40000400 	.word	0x40000400
 8007ed8:	40000800 	.word	0x40000800
 8007edc:	40000c00 	.word	0x40000c00
 8007ee0:	40010400 	.word	0x40010400
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800
 8007ef0:	40001800 	.word	0x40001800
 8007ef4:	40001c00 	.word	0x40001c00
 8007ef8:	40002000 	.word	0x40002000

08007efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f023 0201 	bic.w	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0303 	bic.w	r3, r3, #3
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f023 0302 	bic.w	r3, r3, #2
 8007f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a20      	ldr	r2, [pc, #128]	@ (8007fd4 <TIM_OC1_SetConfig+0xd8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_OC1_SetConfig+0x64>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd8 <TIM_OC1_SetConfig+0xdc>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10c      	bne.n	8007f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0308 	bic.w	r3, r3, #8
 8007f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	697a      	ldr	r2, [r7, #20]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f023 0304 	bic.w	r3, r3, #4
 8007f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	@ (8007fd4 <TIM_OC1_SetConfig+0xd8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC1_SetConfig+0x8e>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a14      	ldr	r2, [pc, #80]	@ (8007fd8 <TIM_OC1_SetConfig+0xdc>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d111      	bne.n	8007fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	621a      	str	r2, [r3, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	371c      	adds	r7, #28
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40010400 	.word	0x40010400

08007fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b087      	sub	sp, #28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	f023 0210 	bic.w	r2, r3, #16
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f023 0320 	bic.w	r3, r3, #32
 8008026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	011b      	lsls	r3, r3, #4
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a22      	ldr	r2, [pc, #136]	@ (80080c0 <TIM_OC2_SetConfig+0xe4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC2_SetConfig+0x68>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a21      	ldr	r2, [pc, #132]	@ (80080c4 <TIM_OC2_SetConfig+0xe8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d10d      	bne.n	8008060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800804a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800805e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a17      	ldr	r2, [pc, #92]	@ (80080c0 <TIM_OC2_SetConfig+0xe4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC2_SetConfig+0x94>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <TIM_OC2_SetConfig+0xe8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d113      	bne.n	8008098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800807e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4313      	orrs	r3, r2
 800808a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	621a      	str	r2, [r3, #32]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40010400 	.word	0x40010400

080080c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a21      	ldr	r2, [pc, #132]	@ (80081a8 <TIM_OC3_SetConfig+0xe0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d003      	beq.n	800812e <TIM_OC3_SetConfig+0x66>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a20      	ldr	r2, [pc, #128]	@ (80081ac <TIM_OC3_SetConfig+0xe4>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d10d      	bne.n	800814a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	4313      	orrs	r3, r2
 8008140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a16      	ldr	r2, [pc, #88]	@ (80081a8 <TIM_OC3_SetConfig+0xe0>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d003      	beq.n	800815a <TIM_OC3_SetConfig+0x92>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a15      	ldr	r2, [pc, #84]	@ (80081ac <TIM_OC3_SetConfig+0xe4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d113      	bne.n	8008182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	011b      	lsls	r3, r3, #4
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4313      	orrs	r3, r2
 8008174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	621a      	str	r2, [r3, #32]
}
 800819c:	bf00      	nop
 800819e:	371c      	adds	r7, #28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	40010000 	.word	0x40010000
 80081ac:	40010400 	.word	0x40010400

080081b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	031b      	lsls	r3, r3, #12
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a12      	ldr	r2, [pc, #72]	@ (8008254 <TIM_OC4_SetConfig+0xa4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d003      	beq.n	8008218 <TIM_OC4_SetConfig+0x68>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a11      	ldr	r2, [pc, #68]	@ (8008258 <TIM_OC4_SetConfig+0xa8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d109      	bne.n	800822c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800821e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	019b      	lsls	r3, r3, #6
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400

0800825c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f023 0201 	bic.w	r2, r3, #1
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f023 030a 	bic.w	r3, r3, #10
 8008298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	621a      	str	r2, [r3, #32]
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6a1b      	ldr	r3, [r3, #32]
 80082ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	f023 0210 	bic.w	r2, r3, #16
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	031b      	lsls	r3, r3, #12
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800831a:	b480      	push	{r7}
 800831c:	b085      	sub	sp, #20
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	f043 0307 	orr.w	r3, r3, #7
 800833c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	609a      	str	r2, [r3, #8]
}
 8008344:	bf00      	nop
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800836a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	021a      	lsls	r2, r3, #8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	431a      	orrs	r2, r3
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4313      	orrs	r3, r2
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	609a      	str	r2, [r3, #8]
}
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	2201      	movs	r2, #1
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a1a      	ldr	r2, [r3, #32]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	43db      	mvns	r3, r3
 80083b2:	401a      	ands	r2, r3
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1a      	ldr	r2, [r3, #32]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 031f 	and.w	r3, r3, #31
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	fa01 f303 	lsl.w	r3, r1, r3
 80083c8:	431a      	orrs	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d101      	bne.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e05a      	b.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800841a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a21      	ldr	r2, [pc, #132]	@ (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d022      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008440:	d01d      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a1d      	ldr	r2, [pc, #116]	@ (80084bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d018      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a1a      	ldr	r2, [pc, #104]	@ (80084c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d00e      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a18      	ldr	r2, [pc, #96]	@ (80084c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d009      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a17      	ldr	r2, [pc, #92]	@ (80084cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d10c      	bne.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4313      	orrs	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40010000 	.word	0x40010000
 80084bc:	40000400 	.word	0x40000400
 80084c0:	40000800 	.word	0x40000800
 80084c4:	40000c00 	.word	0x40000c00
 80084c8:	40010400 	.word	0x40010400
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40001800 	.word	0x40001800

080084d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d101      	bne.n	80084f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084ec:	2302      	movs	r3, #2
 80084ee:	e03d      	b.n	800856c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4313      	orrs	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4313      	orrs	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	4313      	orrs	r3, r2
 8008558:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e042      	b.n	8008638 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fb fb16 	bl	8003bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2224      	movs	r2, #36	@ 0x24
 80085d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	68da      	ldr	r2, [r3, #12]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fff5 	bl	80095d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695a      	ldr	r2, [r3, #20]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b08c      	sub	sp, #48	@ 0x30
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b20      	cmp	r3, #32
 8008658:	d162      	bne.n	8008720 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <HAL_UART_Transmit_DMA+0x26>
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d101      	bne.n	800866a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e05b      	b.n	8008722 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	88fa      	ldrh	r2, [r7, #6]
 8008674:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	88fa      	ldrh	r2, [r7, #6]
 800867a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2221      	movs	r2, #33	@ 0x21
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868e:	4a27      	ldr	r2, [pc, #156]	@ (800872c <HAL_UART_Transmit_DMA+0xec>)
 8008690:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008696:	4a26      	ldr	r2, [pc, #152]	@ (8008730 <HAL_UART_Transmit_DMA+0xf0>)
 8008698:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869e:	4a25      	ldr	r2, [pc, #148]	@ (8008734 <HAL_UART_Transmit_DMA+0xf4>)
 80086a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086a6:	2200      	movs	r2, #0
 80086a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80086aa:	f107 0308 	add.w	r3, r7, #8
 80086ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80086b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b6:	6819      	ldr	r1, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3304      	adds	r3, #4
 80086be:	461a      	mov	r2, r3
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	f7fc f9e9 	bl	8004a98 <HAL_DMA_Start_IT>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2210      	movs	r2, #16
 80086d0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e021      	b.n	8008722 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3314      	adds	r3, #20
 80086ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	617b      	str	r3, [r7, #20]
   return(result);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	3314      	adds	r3, #20
 8008706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008708:	627a      	str	r2, [r7, #36]	@ 0x24
 800870a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	6a39      	ldr	r1, [r7, #32]
 800870e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	61fb      	str	r3, [r7, #28]
   return(result);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e5      	bne.n	80086e8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	e000      	b.n	8008722 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008720:	2302      	movs	r3, #2
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3730      	adds	r7, #48	@ 0x30
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	08008e51 	.word	0x08008e51
 8008730:	08008eeb 	.word	0x08008eeb
 8008734:	0800906f 	.word	0x0800906f

08008738 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b20      	cmp	r3, #32
 8008750:	d112      	bne.n	8008778 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <HAL_UART_Receive_DMA+0x26>
 8008758:	88fb      	ldrh	r3, [r7, #6]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d101      	bne.n	8008762 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e00b      	b.n	800877a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	461a      	mov	r2, r3
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fcc8 	bl	8009104 <UART_Start_Receive_DMA>
 8008774:	4603      	mov	r3, r0
 8008776:	e000      	b.n	800877a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008778:	2302      	movs	r3, #2
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b090      	sub	sp, #64	@ 0x40
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800878a:	2300      	movs	r3, #0
 800878c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008798:	2b80      	cmp	r3, #128	@ 0x80
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b21      	cmp	r3, #33	@ 0x21
 80087ae:	d128      	bne.n	8008802 <HAL_UART_DMAStop+0x80>
 80087b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d025      	beq.n	8008802 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3314      	adds	r3, #20
 80087bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	623b      	str	r3, [r7, #32]
   return(result);
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3314      	adds	r3, #20
 80087d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80087d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e5      	bne.n	80087b6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fc f9a6 	bl	8004b48 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fd27 	bl	8009250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880c:	2b40      	cmp	r3, #64	@ 0x40
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b22      	cmp	r3, #34	@ 0x22
 8008822:	d128      	bne.n	8008876 <HAL_UART_DMAStop+0xf4>
 8008824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d025      	beq.n	8008876 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	60fb      	str	r3, [r7, #12]
   return(result);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008840:	637b      	str	r3, [r7, #52]	@ 0x34
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3314      	adds	r3, #20
 8008848:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800884a:	61fa      	str	r2, [r7, #28]
 800884c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	69b9      	ldr	r1, [r7, #24]
 8008850:	69fa      	ldr	r2, [r7, #28]
 8008852:	e841 2300 	strex	r3, r2, [r1]
 8008856:	617b      	str	r3, [r7, #20]
   return(result);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1e5      	bne.n	800882a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886a:	4618      	mov	r0, r3
 800886c:	f7fc f96c 	bl	8004b48 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 fd15 	bl	80092a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3740      	adds	r7, #64	@ 0x40
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b0ba      	sub	sp, #232	@ 0xe8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80088be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <HAL_UART_IRQHandler+0x66>
 80088d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d6:	f003 0320 	and.w	r3, r3, #32
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fdba 	bl	8009458 <UART_Receive_IT>
      return;
 80088e4:	e273      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80de 	beq.w	8008aac <HAL_UART_IRQHandler+0x22c>
 80088f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008900:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 80d1 	beq.w	8008aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800890a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00b      	beq.n	800892e <HAL_UART_IRQHandler+0xae>
 8008916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800891a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891e:	2b00      	cmp	r3, #0
 8008920:	d005      	beq.n	800892e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	f043 0201 	orr.w	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <HAL_UART_IRQHandler+0xd2>
 800893a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800894a:	f043 0202 	orr.w	r2, r3, #2
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_UART_IRQHandler+0xf6>
 800895e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896e:	f043 0204 	orr.w	r2, r3, #4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800897a:	f003 0308 	and.w	r3, r3, #8
 800897e:	2b00      	cmp	r3, #0
 8008980:	d011      	beq.n	80089a6 <HAL_UART_IRQHandler+0x126>
 8008982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d105      	bne.n	800899a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800898e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d005      	beq.n	80089a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899e:	f043 0208 	orr.w	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 820a 	beq.w	8008dc4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d008      	beq.n	80089ce <HAL_UART_IRQHandler+0x14e>
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c0:	f003 0320 	and.w	r3, r3, #32
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fd45 	bl	8009458 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d8:	2b40      	cmp	r3, #64	@ 0x40
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d103      	bne.n	80089fa <HAL_UART_IRQHandler+0x17a>
 80089f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d04f      	beq.n	8008a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fc50 	bl	80092a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a0a:	2b40      	cmp	r3, #64	@ 0x40
 8008a0c:	d141      	bne.n	8008a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3314      	adds	r3, #20
 8008a14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	3314      	adds	r3, #20
 8008a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1d9      	bne.n	8008a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d013      	beq.n	8008a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	4a8a      	ldr	r2, [pc, #552]	@ (8008c90 <HAL_UART_IRQHandler+0x410>)
 8008a68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fc f8da 	bl	8004c28 <HAL_DMA_Abort_IT>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d016      	beq.n	8008aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a84:	4610      	mov	r0, r2
 8008a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a88:	e00e      	b.n	8008aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9ca 	bl	8008e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	e00a      	b.n	8008aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f9c6 	bl	8008e24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	e006      	b.n	8008aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f9c2 	bl	8008e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008aa6:	e18d      	b.n	8008dc4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa8:	bf00      	nop
    return;
 8008aaa:	e18b      	b.n	8008dc4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	f040 8167 	bne.w	8008d84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	f000 8160 	beq.w	8008d84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac8:	f003 0310 	and.w	r3, r3, #16
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8159 	beq.w	8008d84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	60bb      	str	r3, [r7, #8]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60bb      	str	r3, [r7, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af2:	2b40      	cmp	r3, #64	@ 0x40
 8008af4:	f040 80ce 	bne.w	8008c94 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 80a9 	beq.w	8008c60 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b16:	429a      	cmp	r2, r3
 8008b18:	f080 80a2 	bcs.w	8008c60 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b2e:	f000 8088 	beq.w	8008c42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	330c      	adds	r3, #12
 8008b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008b5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1d9      	bne.n	8008b32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3314      	adds	r3, #20
 8008b84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b90:	f023 0301 	bic.w	r3, r3, #1
 8008b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3314      	adds	r3, #20
 8008b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ba2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ba6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e1      	bne.n	8008b7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3314      	adds	r3, #20
 8008bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008be0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008be4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008be6:	e841 2300 	strex	r3, r2, [r1]
 8008bea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e3      	bne.n	8008bba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c12:	f023 0310 	bic.w	r3, r3, #16
 8008c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	330c      	adds	r3, #12
 8008c20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e3      	bne.n	8008c00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fb ff83 	bl	8004b48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f8ed 	bl	8008e38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008c5e:	e0b3      	b.n	8008dc8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	f040 80ad 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c72:	69db      	ldr	r3, [r3, #28]
 8008c74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c78:	f040 80a6 	bne.w	8008dc8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 f8d5 	bl	8008e38 <HAL_UARTEx_RxEventCallback>
      return;
 8008c8e:	e09b      	b.n	8008dc8 <HAL_UART_IRQHandler+0x548>
 8008c90:	08009367 	.word	0x08009367
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 808e 	beq.w	8008dcc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8089 	beq.w	8008dcc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	330c      	adds	r3, #12
 8008cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ce0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e3      	bne.n	8008cba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3314      	adds	r3, #20
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	623b      	str	r3, [r7, #32]
   return(result);
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3314      	adds	r3, #20
 8008d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d16:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d1e:	e841 2300 	strex	r3, r2, [r1]
 8008d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d1e3      	bne.n	8008cf2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0310 	bic.w	r3, r3, #16
 8008d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d5c:	61fa      	str	r2, [r7, #28]
 8008d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	69b9      	ldr	r1, [r7, #24]
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	617b      	str	r3, [r7, #20]
   return(result);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e3      	bne.n	8008d38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2202      	movs	r2, #2
 8008d74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f85b 	bl	8008e38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d82:	e023      	b.n	8008dcc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <HAL_UART_IRQHandler+0x524>
 8008d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 faf3 	bl	8009388 <UART_Transmit_IT>
    return;
 8008da2:	e014      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00e      	beq.n	8008dce <HAL_UART_IRQHandler+0x54e>
 8008db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d008      	beq.n	8008dce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb33 	bl	8009428 <UART_EndTransmit_IT>
    return;
 8008dc2:	e004      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
    return;
 8008dc4:	bf00      	nop
 8008dc6:	e002      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
      return;
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <HAL_UART_IRQHandler+0x54e>
      return;
 8008dcc:	bf00      	nop
  }
}
 8008dce:	37e8      	adds	r7, #232	@ 0xe8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b083      	sub	sp, #12
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	460b      	mov	r3, r1
 8008e42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b090      	sub	sp, #64	@ 0x40
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d137      	bne.n	8008edc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6e:	2200      	movs	r2, #0
 8008e70:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3314      	adds	r3, #20
 8008e78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	623b      	str	r3, [r7, #32]
   return(result);
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3314      	adds	r3, #20
 8008e90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e92:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e5      	bne.n	8008e72 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	330c      	adds	r3, #12
 8008ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ec6:	61fa      	str	r2, [r7, #28]
 8008ec8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eca:	69b9      	ldr	r1, [r7, #24]
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	e841 2300 	strex	r3, r2, [r1]
 8008ed2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1e5      	bne.n	8008ea6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eda:	e002      	b.n	8008ee2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008edc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008ede:	f7ff ff79 	bl	8008dd4 <HAL_UART_TxCpltCallback>
}
 8008ee2:	bf00      	nop
 8008ee4:	3740      	adds	r7, #64	@ 0x40
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff ff75 	bl	8008de8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008efe:	bf00      	nop
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b09c      	sub	sp, #112	@ 0x70
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f12:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d172      	bne.n	8009008 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f24:	2200      	movs	r2, #0
 8008f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f48:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f4a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f50:	e841 2300 	strex	r3, r2, [r1]
 8008f54:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1e5      	bne.n	8008f28 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3314      	adds	r3, #20
 8008f62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f66:	e853 3f00 	ldrex	r3, [r3]
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6e:	f023 0301 	bic.w	r3, r3, #1
 8008f72:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3314      	adds	r3, #20
 8008f7a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f7c:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f7e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f84:	e841 2300 	strex	r3, r2, [r1]
 8008f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1e5      	bne.n	8008f5c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3314      	adds	r3, #20
 8008f96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3314      	adds	r3, #20
 8008fae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008fb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e5      	bne.n	8008f90 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d119      	bne.n	8009008 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0310 	bic.w	r3, r3, #16
 8008fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ff4:	61fa      	str	r2, [r7, #28]
 8008ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	69b9      	ldr	r1, [r7, #24]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	617b      	str	r3, [r7, #20]
   return(result);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e5      	bne.n	8008fd4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009008:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800900a:	2200      	movs	r2, #0
 800900c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800900e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009012:	2b01      	cmp	r3, #1
 8009014:	d106      	bne.n	8009024 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009018:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800901a:	4619      	mov	r1, r3
 800901c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800901e:	f7ff ff0b 	bl	8008e38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009022:	e002      	b.n	800902a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009024:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009026:	f7ff fee9 	bl	8008dfc <HAL_UART_RxCpltCallback>
}
 800902a:	bf00      	nop
 800902c:	3770      	adds	r7, #112	@ 0x70
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800903e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2201      	movs	r2, #1
 8009044:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800904a:	2b01      	cmp	r3, #1
 800904c:	d108      	bne.n	8009060 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	b29b      	uxth	r3, r3
 8009056:	4619      	mov	r1, r3
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f7ff feed 	bl	8008e38 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800905e:	e002      	b.n	8009066 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f7ff fed5 	bl	8008e10 <HAL_UART_RxHalfCpltCallback>
}
 8009066:	bf00      	nop
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908a:	2b80      	cmp	r3, #128	@ 0x80
 800908c:	bf0c      	ite	eq
 800908e:	2301      	moveq	r3, #1
 8009090:	2300      	movne	r3, #0
 8009092:	b2db      	uxtb	r3, r3
 8009094:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b21      	cmp	r3, #33	@ 0x21
 80090a0:	d108      	bne.n	80090b4 <UART_DMAError+0x46>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80090ae:	68b8      	ldr	r0, [r7, #8]
 80090b0:	f000 f8ce 	bl	8009250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	bf0c      	ite	eq
 80090c2:	2301      	moveq	r3, #1
 80090c4:	2300      	movne	r3, #0
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b22      	cmp	r3, #34	@ 0x22
 80090d4:	d108      	bne.n	80090e8 <UART_DMAError+0x7a>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2200      	movs	r2, #0
 80090e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80090e2:	68b8      	ldr	r0, [r7, #8]
 80090e4:	f000 f8dc 	bl	80092a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ec:	f043 0210 	orr.w	r2, r3, #16
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090f4:	68b8      	ldr	r0, [r7, #8]
 80090f6:	f7ff fe95 	bl	8008e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
	...

08009104 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b098      	sub	sp, #96	@ 0x60
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	4613      	mov	r3, r2
 8009110:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	88fa      	ldrh	r2, [r7, #6]
 800911c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2222      	movs	r2, #34	@ 0x22
 8009128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	4a44      	ldr	r2, [pc, #272]	@ (8009244 <UART_Start_Receive_DMA+0x140>)
 8009132:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009138:	4a43      	ldr	r2, [pc, #268]	@ (8009248 <UART_Start_Receive_DMA+0x144>)
 800913a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009140:	4a42      	ldr	r2, [pc, #264]	@ (800924c <UART_Start_Receive_DMA+0x148>)
 8009142:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009148:	2200      	movs	r2, #0
 800914a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3304      	adds	r3, #4
 800915c:	4619      	mov	r1, r3
 800915e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	88fb      	ldrh	r3, [r7, #6]
 8009164:	f7fb fc98 	bl	8004a98 <HAL_DMA_Start_IT>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2210      	movs	r2, #16
 8009172:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2220      	movs	r2, #32
 8009178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e05d      	b.n	800923c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009180:	2300      	movs	r3, #0
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d019      	beq.n	80091d2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	330c      	adds	r3, #12
 80091a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80091c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80091c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e5      	bne.n	800919e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3314      	adds	r3, #20
 80091d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e4:	f043 0301 	orr.w	r3, r3, #1
 80091e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3314      	adds	r3, #20
 80091f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80091f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80091f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e5      	bne.n	80091d2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	617b      	str	r3, [r7, #20]
   return(result);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800921c:	653b      	str	r3, [r7, #80]	@ 0x50
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3314      	adds	r3, #20
 8009224:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009226:	627a      	str	r2, [r7, #36]	@ 0x24
 8009228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6a39      	ldr	r1, [r7, #32]
 800922c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	61fb      	str	r3, [r7, #28]
   return(result);
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e5      	bne.n	8009206 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3760      	adds	r7, #96	@ 0x60
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	08008f07 	.word	0x08008f07
 8009248:	08009033 	.word	0x08009033
 800924c:	0800906f 	.word	0x0800906f

08009250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b089      	sub	sp, #36	@ 0x24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	60bb      	str	r3, [r7, #8]
   return(result);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800926e:	61fb      	str	r3, [r7, #28]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330c      	adds	r3, #12
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	61ba      	str	r2, [r7, #24]
 800927a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6979      	ldr	r1, [r7, #20]
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	613b      	str	r3, [r7, #16]
   return(result);
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e5      	bne.n	8009258 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2220      	movs	r2, #32
 8009290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009294:	bf00      	nop
 8009296:	3724      	adds	r7, #36	@ 0x24
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b095      	sub	sp, #84	@ 0x54
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	330c      	adds	r3, #12
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b2:	e853 3f00 	ldrex	r3, [r3]
 80092b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	330c      	adds	r3, #12
 80092c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80092ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e5      	bne.n	80092a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3314      	adds	r3, #20
 80092e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f023 0301 	bic.w	r3, r3, #1
 80092f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3314      	adds	r3, #20
 80092fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800930a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e5      	bne.n	80092dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009314:	2b01      	cmp	r3, #1
 8009316:	d119      	bne.n	800934c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	60bb      	str	r3, [r7, #8]
   return(result);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009338:	61ba      	str	r2, [r7, #24]
 800933a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6979      	ldr	r1, [r7, #20]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	613b      	str	r3, [r7, #16]
   return(result);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e5      	bne.n	8009318 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800935a:	bf00      	nop
 800935c:	3754      	adds	r7, #84	@ 0x54
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2200      	movs	r2, #0
 8009378:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fd52 	bl	8008e24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b21      	cmp	r3, #33	@ 0x21
 800939a:	d13e      	bne.n	800941a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093a4:	d114      	bne.n	80093d0 <UART_Transmit_IT+0x48>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d110      	bne.n	80093d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	1c9a      	adds	r2, r3, #2
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	621a      	str	r2, [r3, #32]
 80093ce:	e008      	b.n	80093e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	1c59      	adds	r1, r3, #1
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	6211      	str	r1, [r2, #32]
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4619      	mov	r1, r3
 80093f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d10f      	bne.n	8009416 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68da      	ldr	r2, [r3, #12]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009404:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009414:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	e000      	b.n	800941c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800941a:	2302      	movs	r3, #2
  }
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800943e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f7ff fcc3 	bl	8008dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b08c      	sub	sp, #48	@ 0x30
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009460:	2300      	movs	r3, #0
 8009462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009464:	2300      	movs	r3, #0
 8009466:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b22      	cmp	r3, #34	@ 0x22
 8009472:	f040 80aa 	bne.w	80095ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800947e:	d115      	bne.n	80094ac <UART_Receive_IT+0x54>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d111      	bne.n	80094ac <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	b29b      	uxth	r3, r3
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	b29a      	uxth	r2, r3
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a4:	1c9a      	adds	r2, r3, #2
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80094aa:	e024      	b.n	80094f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094ba:	d007      	beq.n	80094cc <UART_Receive_IT+0x74>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <UART_Receive_IT+0x82>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d106      	bne.n	80094da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d6:	701a      	strb	r2, [r3, #0]
 80094d8:	e008      	b.n	80094ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29b      	uxth	r3, r3
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	4619      	mov	r1, r3
 8009504:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009506:	2b00      	cmp	r3, #0
 8009508:	d15d      	bne.n	80095c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 0220 	bic.w	r2, r2, #32
 8009518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68da      	ldr	r2, [r3, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	695a      	ldr	r2, [r3, #20]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0201 	bic.w	r2, r2, #1
 8009538:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800954c:	2b01      	cmp	r3, #1
 800954e:	d135      	bne.n	80095bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	613b      	str	r3, [r7, #16]
   return(result);
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f023 0310 	bic.w	r3, r3, #16
 800956c:	627b      	str	r3, [r7, #36]	@ 0x24
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	330c      	adds	r3, #12
 8009574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009576:	623a      	str	r2, [r7, #32]
 8009578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	69f9      	ldr	r1, [r7, #28]
 800957c:	6a3a      	ldr	r2, [r7, #32]
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	61bb      	str	r3, [r7, #24]
   return(result);
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e5      	bne.n	8009556 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0310 	and.w	r3, r3, #16
 8009594:	2b10      	cmp	r3, #16
 8009596:	d10a      	bne.n	80095ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff fc3f 	bl	8008e38 <HAL_UARTEx_RxEventCallback>
 80095ba:	e002      	b.n	80095c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fc1d 	bl	8008dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	e002      	b.n	80095cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	e000      	b.n	80095cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80095ca:	2302      	movs	r3, #2
  }
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3730      	adds	r7, #48	@ 0x30
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095d8:	b0c0      	sub	sp, #256	@ 0x100
 80095da:	af00      	add	r7, sp, #0
 80095dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	68d9      	ldr	r1, [r3, #12]
 80095f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	ea40 0301 	orr.w	r3, r0, r1
 80095fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009602:	689a      	ldr	r2, [r3, #8]
 8009604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	431a      	orrs	r2, r3
 800960c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	431a      	orrs	r2, r3
 8009614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	4313      	orrs	r3, r2
 800961c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800962c:	f021 010c 	bic.w	r1, r1, #12
 8009630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800963a:	430b      	orrs	r3, r1
 800963c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800963e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800964a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800964e:	6999      	ldr	r1, [r3, #24]
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	ea40 0301 	orr.w	r3, r0, r1
 800965a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800965c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	4b8f      	ldr	r3, [pc, #572]	@ (80098a0 <UART_SetConfig+0x2cc>)
 8009664:	429a      	cmp	r2, r3
 8009666:	d005      	beq.n	8009674 <UART_SetConfig+0xa0>
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	4b8d      	ldr	r3, [pc, #564]	@ (80098a4 <UART_SetConfig+0x2d0>)
 8009670:	429a      	cmp	r2, r3
 8009672:	d104      	bne.n	800967e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009674:	f7fd f960 	bl	8006938 <HAL_RCC_GetPCLK2Freq>
 8009678:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800967c:	e003      	b.n	8009686 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800967e:	f7fd f947 	bl	8006910 <HAL_RCC_GetPCLK1Freq>
 8009682:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800968a:	69db      	ldr	r3, [r3, #28]
 800968c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009690:	f040 810c 	bne.w	80098ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009698:	2200      	movs	r2, #0
 800969a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800969e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80096a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80096a6:	4622      	mov	r2, r4
 80096a8:	462b      	mov	r3, r5
 80096aa:	1891      	adds	r1, r2, r2
 80096ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80096ae:	415b      	adcs	r3, r3
 80096b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80096b6:	4621      	mov	r1, r4
 80096b8:	eb12 0801 	adds.w	r8, r2, r1
 80096bc:	4629      	mov	r1, r5
 80096be:	eb43 0901 	adc.w	r9, r3, r1
 80096c2:	f04f 0200 	mov.w	r2, #0
 80096c6:	f04f 0300 	mov.w	r3, #0
 80096ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096d6:	4690      	mov	r8, r2
 80096d8:	4699      	mov	r9, r3
 80096da:	4623      	mov	r3, r4
 80096dc:	eb18 0303 	adds.w	r3, r8, r3
 80096e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096e4:	462b      	mov	r3, r5
 80096e6:	eb49 0303 	adc.w	r3, r9, r3
 80096ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80096fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009702:	460b      	mov	r3, r1
 8009704:	18db      	adds	r3, r3, r3
 8009706:	653b      	str	r3, [r7, #80]	@ 0x50
 8009708:	4613      	mov	r3, r2
 800970a:	eb42 0303 	adc.w	r3, r2, r3
 800970e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009710:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009714:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009718:	f7f7 fa50 	bl	8000bbc <__aeabi_uldivmod>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4b61      	ldr	r3, [pc, #388]	@ (80098a8 <UART_SetConfig+0x2d4>)
 8009722:	fba3 2302 	umull	r2, r3, r3, r2
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	011c      	lsls	r4, r3, #4
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972e:	2200      	movs	r2, #0
 8009730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009734:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009738:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	1891      	adds	r1, r2, r2
 8009742:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009744:	415b      	adcs	r3, r3
 8009746:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800974c:	4641      	mov	r1, r8
 800974e:	eb12 0a01 	adds.w	sl, r2, r1
 8009752:	4649      	mov	r1, r9
 8009754:	eb43 0b01 	adc.w	fp, r3, r1
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009764:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009768:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800976c:	4692      	mov	sl, r2
 800976e:	469b      	mov	fp, r3
 8009770:	4643      	mov	r3, r8
 8009772:	eb1a 0303 	adds.w	r3, sl, r3
 8009776:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800977a:	464b      	mov	r3, r9
 800977c:	eb4b 0303 	adc.w	r3, fp, r3
 8009780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009790:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009794:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009798:	460b      	mov	r3, r1
 800979a:	18db      	adds	r3, r3, r3
 800979c:	643b      	str	r3, [r7, #64]	@ 0x40
 800979e:	4613      	mov	r3, r2
 80097a0:	eb42 0303 	adc.w	r3, r2, r3
 80097a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80097a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80097aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80097ae:	f7f7 fa05 	bl	8000bbc <__aeabi_uldivmod>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	4b3b      	ldr	r3, [pc, #236]	@ (80098a8 <UART_SetConfig+0x2d4>)
 80097ba:	fba3 2301 	umull	r2, r3, r3, r1
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	2264      	movs	r2, #100	@ 0x64
 80097c2:	fb02 f303 	mul.w	r3, r2, r3
 80097c6:	1acb      	subs	r3, r1, r3
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80097ce:	4b36      	ldr	r3, [pc, #216]	@ (80098a8 <UART_SetConfig+0x2d4>)
 80097d0:	fba3 2302 	umull	r2, r3, r3, r2
 80097d4:	095b      	lsrs	r3, r3, #5
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80097dc:	441c      	add	r4, r3
 80097de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097e2:	2200      	movs	r2, #0
 80097e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80097ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80097f0:	4642      	mov	r2, r8
 80097f2:	464b      	mov	r3, r9
 80097f4:	1891      	adds	r1, r2, r2
 80097f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097f8:	415b      	adcs	r3, r3
 80097fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009800:	4641      	mov	r1, r8
 8009802:	1851      	adds	r1, r2, r1
 8009804:	6339      	str	r1, [r7, #48]	@ 0x30
 8009806:	4649      	mov	r1, r9
 8009808:	414b      	adcs	r3, r1
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009818:	4659      	mov	r1, fp
 800981a:	00cb      	lsls	r3, r1, #3
 800981c:	4651      	mov	r1, sl
 800981e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009822:	4651      	mov	r1, sl
 8009824:	00ca      	lsls	r2, r1, #3
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	4603      	mov	r3, r0
 800982c:	4642      	mov	r2, r8
 800982e:	189b      	adds	r3, r3, r2
 8009830:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009834:	464b      	mov	r3, r9
 8009836:	460a      	mov	r2, r1
 8009838:	eb42 0303 	adc.w	r3, r2, r3
 800983c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800984c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009854:	460b      	mov	r3, r1
 8009856:	18db      	adds	r3, r3, r3
 8009858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800985a:	4613      	mov	r3, r2
 800985c:	eb42 0303 	adc.w	r3, r2, r3
 8009860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009866:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800986a:	f7f7 f9a7 	bl	8000bbc <__aeabi_uldivmod>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <UART_SetConfig+0x2d4>)
 8009874:	fba3 1302 	umull	r1, r3, r3, r2
 8009878:	095b      	lsrs	r3, r3, #5
 800987a:	2164      	movs	r1, #100	@ 0x64
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	3332      	adds	r3, #50	@ 0x32
 8009886:	4a08      	ldr	r2, [pc, #32]	@ (80098a8 <UART_SetConfig+0x2d4>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	095b      	lsrs	r3, r3, #5
 800988e:	f003 0207 	and.w	r2, r3, #7
 8009892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4422      	add	r2, r4
 800989a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800989c:	e106      	b.n	8009aac <UART_SetConfig+0x4d8>
 800989e:	bf00      	nop
 80098a0:	40011000 	.word	0x40011000
 80098a4:	40011400 	.word	0x40011400
 80098a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80098ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80098be:	4642      	mov	r2, r8
 80098c0:	464b      	mov	r3, r9
 80098c2:	1891      	adds	r1, r2, r2
 80098c4:	6239      	str	r1, [r7, #32]
 80098c6:	415b      	adcs	r3, r3
 80098c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098ce:	4641      	mov	r1, r8
 80098d0:	1854      	adds	r4, r2, r1
 80098d2:	4649      	mov	r1, r9
 80098d4:	eb43 0501 	adc.w	r5, r3, r1
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	f04f 0300 	mov.w	r3, #0
 80098e0:	00eb      	lsls	r3, r5, #3
 80098e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098e6:	00e2      	lsls	r2, r4, #3
 80098e8:	4614      	mov	r4, r2
 80098ea:	461d      	mov	r5, r3
 80098ec:	4643      	mov	r3, r8
 80098ee:	18e3      	adds	r3, r4, r3
 80098f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098f4:	464b      	mov	r3, r9
 80098f6:	eb45 0303 	adc.w	r3, r5, r3
 80098fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800990a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	f04f 0300 	mov.w	r3, #0
 8009916:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800991a:	4629      	mov	r1, r5
 800991c:	008b      	lsls	r3, r1, #2
 800991e:	4621      	mov	r1, r4
 8009920:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009924:	4621      	mov	r1, r4
 8009926:	008a      	lsls	r2, r1, #2
 8009928:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800992c:	f7f7 f946 	bl	8000bbc <__aeabi_uldivmod>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4b60      	ldr	r3, [pc, #384]	@ (8009ab8 <UART_SetConfig+0x4e4>)
 8009936:	fba3 2302 	umull	r2, r3, r3, r2
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	011c      	lsls	r4, r3, #4
 800993e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009942:	2200      	movs	r2, #0
 8009944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009948:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800994c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009950:	4642      	mov	r2, r8
 8009952:	464b      	mov	r3, r9
 8009954:	1891      	adds	r1, r2, r2
 8009956:	61b9      	str	r1, [r7, #24]
 8009958:	415b      	adcs	r3, r3
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009960:	4641      	mov	r1, r8
 8009962:	1851      	adds	r1, r2, r1
 8009964:	6139      	str	r1, [r7, #16]
 8009966:	4649      	mov	r1, r9
 8009968:	414b      	adcs	r3, r1
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009978:	4659      	mov	r1, fp
 800997a:	00cb      	lsls	r3, r1, #3
 800997c:	4651      	mov	r1, sl
 800997e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009982:	4651      	mov	r1, sl
 8009984:	00ca      	lsls	r2, r1, #3
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4642      	mov	r2, r8
 800998e:	189b      	adds	r3, r3, r2
 8009990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009994:	464b      	mov	r3, r9
 8009996:	460a      	mov	r2, r1
 8009998:	eb42 0303 	adc.w	r3, r2, r3
 800999c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	f04f 0300 	mov.w	r3, #0
 80099b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80099b8:	4649      	mov	r1, r9
 80099ba:	008b      	lsls	r3, r1, #2
 80099bc:	4641      	mov	r1, r8
 80099be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099c2:	4641      	mov	r1, r8
 80099c4:	008a      	lsls	r2, r1, #2
 80099c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80099ca:	f7f7 f8f7 	bl	8000bbc <__aeabi_uldivmod>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4611      	mov	r1, r2
 80099d4:	4b38      	ldr	r3, [pc, #224]	@ (8009ab8 <UART_SetConfig+0x4e4>)
 80099d6:	fba3 2301 	umull	r2, r3, r3, r1
 80099da:	095b      	lsrs	r3, r3, #5
 80099dc:	2264      	movs	r2, #100	@ 0x64
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	1acb      	subs	r3, r1, r3
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	3332      	adds	r3, #50	@ 0x32
 80099e8:	4a33      	ldr	r2, [pc, #204]	@ (8009ab8 <UART_SetConfig+0x4e4>)
 80099ea:	fba2 2303 	umull	r2, r3, r2, r3
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099f4:	441c      	add	r4, r3
 80099f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099fa:	2200      	movs	r2, #0
 80099fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80099fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8009a00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	1891      	adds	r1, r2, r2
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	415b      	adcs	r3, r3
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a14:	4641      	mov	r1, r8
 8009a16:	1851      	adds	r1, r2, r1
 8009a18:	6039      	str	r1, [r7, #0]
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	414b      	adcs	r3, r1
 8009a1e:	607b      	str	r3, [r7, #4]
 8009a20:	f04f 0200 	mov.w	r2, #0
 8009a24:	f04f 0300 	mov.w	r3, #0
 8009a28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a2c:	4659      	mov	r1, fp
 8009a2e:	00cb      	lsls	r3, r1, #3
 8009a30:	4651      	mov	r1, sl
 8009a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a36:	4651      	mov	r1, sl
 8009a38:	00ca      	lsls	r2, r1, #3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	4642      	mov	r2, r8
 8009a42:	189b      	adds	r3, r3, r2
 8009a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a46:	464b      	mov	r3, r9
 8009a48:	460a      	mov	r2, r1
 8009a4a:	eb42 0303 	adc.w	r3, r2, r3
 8009a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a5c:	f04f 0200 	mov.w	r2, #0
 8009a60:	f04f 0300 	mov.w	r3, #0
 8009a64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009a68:	4649      	mov	r1, r9
 8009a6a:	008b      	lsls	r3, r1, #2
 8009a6c:	4641      	mov	r1, r8
 8009a6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a72:	4641      	mov	r1, r8
 8009a74:	008a      	lsls	r2, r1, #2
 8009a76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009a7a:	f7f7 f89f 	bl	8000bbc <__aeabi_uldivmod>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab8 <UART_SetConfig+0x4e4>)
 8009a84:	fba3 1302 	umull	r1, r3, r3, r2
 8009a88:	095b      	lsrs	r3, r3, #5
 8009a8a:	2164      	movs	r1, #100	@ 0x64
 8009a8c:	fb01 f303 	mul.w	r3, r1, r3
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	3332      	adds	r3, #50	@ 0x32
 8009a96:	4a08      	ldr	r2, [pc, #32]	@ (8009ab8 <UART_SetConfig+0x4e4>)
 8009a98:	fba2 2303 	umull	r2, r3, r2, r3
 8009a9c:	095b      	lsrs	r3, r3, #5
 8009a9e:	f003 020f 	and.w	r2, r3, #15
 8009aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4422      	add	r2, r4
 8009aaa:	609a      	str	r2, [r3, #8]
}
 8009aac:	bf00      	nop
 8009aae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ab8:	51eb851f 	.word	0x51eb851f

08009abc <__NVIC_SetPriority>:
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	db0a      	blt.n	8009ae6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	490c      	ldr	r1, [pc, #48]	@ (8009b08 <__NVIC_SetPriority+0x4c>)
 8009ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ada:	0112      	lsls	r2, r2, #4
 8009adc:	b2d2      	uxtb	r2, r2
 8009ade:	440b      	add	r3, r1
 8009ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ae4:	e00a      	b.n	8009afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4908      	ldr	r1, [pc, #32]	@ (8009b0c <__NVIC_SetPriority+0x50>)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	3b04      	subs	r3, #4
 8009af4:	0112      	lsls	r2, r2, #4
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	440b      	add	r3, r1
 8009afa:	761a      	strb	r2, [r3, #24]
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	e000e100 	.word	0xe000e100
 8009b0c:	e000ed00 	.word	0xe000ed00

08009b10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009b14:	4b05      	ldr	r3, [pc, #20]	@ (8009b2c <SysTick_Handler+0x1c>)
 8009b16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009b18:	f001 fd40 	bl	800b59c <xTaskGetSchedulerState>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d001      	beq.n	8009b26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009b22:	f002 fb39 	bl	800c198 <xPortSysTickHandler>
  }
}
 8009b26:	bf00      	nop
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	e000e010 	.word	0xe000e010

08009b30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b34:	2100      	movs	r1, #0
 8009b36:	f06f 0004 	mvn.w	r0, #4
 8009b3a:	f7ff ffbf 	bl	8009abc <__NVIC_SetPriority>
#endif
}
 8009b3e:	bf00      	nop
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b4a:	f3ef 8305 	mrs	r3, IPSR
 8009b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d003      	beq.n	8009b5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b56:	f06f 0305 	mvn.w	r3, #5
 8009b5a:	607b      	str	r3, [r7, #4]
 8009b5c:	e00c      	b.n	8009b78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b88 <osKernelInitialize+0x44>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d105      	bne.n	8009b72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b66:	4b08      	ldr	r3, [pc, #32]	@ (8009b88 <osKernelInitialize+0x44>)
 8009b68:	2201      	movs	r2, #1
 8009b6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	607b      	str	r3, [r7, #4]
 8009b70:	e002      	b.n	8009b78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b78:	687b      	ldr	r3, [r7, #4]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	200086d8 	.word	0x200086d8

08009b8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b92:	f3ef 8305 	mrs	r3, IPSR
 8009b96:	603b      	str	r3, [r7, #0]
  return(result);
 8009b98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d003      	beq.n	8009ba6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b9e:	f06f 0305 	mvn.w	r3, #5
 8009ba2:	607b      	str	r3, [r7, #4]
 8009ba4:	e010      	b.n	8009bc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd4 <osKernelStart+0x48>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d109      	bne.n	8009bc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009bae:	f7ff ffbf 	bl	8009b30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009bb2:	4b08      	ldr	r3, [pc, #32]	@ (8009bd4 <osKernelStart+0x48>)
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009bb8:	f001 f87a 	bl	800acb0 <vTaskStartScheduler>
      stat = osOK;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	607b      	str	r3, [r7, #4]
 8009bc0:	e002      	b.n	8009bc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009bc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009bc8:	687b      	ldr	r3, [r7, #4]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200086d8 	.word	0x200086d8

08009bd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08e      	sub	sp, #56	@ 0x38
 8009bdc:	af04      	add	r7, sp, #16
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009be4:	2300      	movs	r3, #0
 8009be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009be8:	f3ef 8305 	mrs	r3, IPSR
 8009bec:	617b      	str	r3, [r7, #20]
  return(result);
 8009bee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d17e      	bne.n	8009cf2 <osThreadNew+0x11a>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d07b      	beq.n	8009cf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009bfa:	2380      	movs	r3, #128	@ 0x80
 8009bfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009bfe:	2318      	movs	r3, #24
 8009c00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d045      	beq.n	8009c9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <osThreadNew+0x48>
        name = attr->name;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d008      	beq.n	8009c46 <osThreadNew+0x6e>
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	2b38      	cmp	r3, #56	@ 0x38
 8009c38:	d805      	bhi.n	8009c46 <osThreadNew+0x6e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <osThreadNew+0x72>
        return (NULL);
 8009c46:	2300      	movs	r3, #0
 8009c48:	e054      	b.n	8009cf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	089b      	lsrs	r3, r3, #2
 8009c58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00e      	beq.n	8009c80 <osThreadNew+0xa8>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	2b5b      	cmp	r3, #91	@ 0x5b
 8009c68:	d90a      	bls.n	8009c80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d006      	beq.n	8009c80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	695b      	ldr	r3, [r3, #20]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <osThreadNew+0xa8>
        mem = 1;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	e010      	b.n	8009ca2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10c      	bne.n	8009ca2 <osThreadNew+0xca>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d108      	bne.n	8009ca2 <osThreadNew+0xca>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d104      	bne.n	8009ca2 <osThreadNew+0xca>
          mem = 0;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61bb      	str	r3, [r7, #24]
 8009c9c:	e001      	b.n	8009ca2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d110      	bne.n	8009cca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009cb0:	9202      	str	r2, [sp, #8]
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	6a3a      	ldr	r2, [r7, #32]
 8009cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fe1a 	bl	800a8f8 <xTaskCreateStatic>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	e013      	b.n	8009cf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d110      	bne.n	8009cf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	f107 0310 	add.w	r3, r7, #16
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 fe68 	bl	800a9b8 <xTaskCreate>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d001      	beq.n	8009cf2 <osThreadNew+0x11a>
            hTask = NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009cf2:	693b      	ldr	r3, [r7, #16]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3728      	adds	r7, #40	@ 0x28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d04:	f3ef 8305 	mrs	r3, IPSR
 8009d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <osDelay+0x1c>
    stat = osErrorISR;
 8009d10:	f06f 0305 	mvn.w	r3, #5
 8009d14:	60fb      	str	r3, [r7, #12]
 8009d16:	e007      	b.n	8009d28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 ff8e 	bl	800ac44 <vTaskDelay>
    }
  }

  return (stat);
 8009d28:	68fb      	ldr	r3, [r7, #12]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a07      	ldr	r2, [pc, #28]	@ (8009d60 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4a06      	ldr	r2, [pc, #24]	@ (8009d64 <vApplicationGetIdleTaskMemory+0x30>)
 8009d4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2280      	movs	r2, #128	@ 0x80
 8009d50:	601a      	str	r2, [r3, #0]
}
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	200086dc 	.word	0x200086dc
 8009d64:	20008738 	.word	0x20008738

08009d68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4a07      	ldr	r2, [pc, #28]	@ (8009d94 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	4a06      	ldr	r2, [pc, #24]	@ (8009d98 <vApplicationGetTimerTaskMemory+0x30>)
 8009d7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d86:	601a      	str	r2, [r3, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	20008938 	.word	0x20008938
 8009d98:	20008994 	.word	0x20008994

08009d9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f103 0208 	add.w	r2, r3, #8
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009db4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f103 0208 	add.w	r2, r3, #8
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f103 0208 	add.w	r2, r3, #8
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009df6:	b480      	push	{r7}
 8009df8:	b085      	sub	sp, #20
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	689a      	ldr	r2, [r3, #8]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	601a      	str	r2, [r3, #0]
}
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e54:	d103      	bne.n	8009e5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	e00c      	b.n	8009e78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	3308      	adds	r3, #8
 8009e62:	60fb      	str	r3, [r7, #12]
 8009e64:	e002      	b.n	8009e6c <vListInsert+0x2e>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d2f6      	bcs.n	8009e66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6892      	ldr	r2, [r2, #8]
 8009ec6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6852      	ldr	r2, [r2, #4]
 8009ed0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d103      	bne.n	8009ee4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	1e5a      	subs	r2, r3, #1
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10b      	bne.n	8009f30 <xQueueGenericReset+0x2c>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	60bb      	str	r3, [r7, #8]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f30:	f002 f8a2 	bl	800c078 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f3c:	68f9      	ldr	r1, [r7, #12]
 8009f3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f40:	fb01 f303 	mul.w	r3, r1, r3
 8009f44:	441a      	add	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f60:	3b01      	subs	r3, #1
 8009f62:	68f9      	ldr	r1, [r7, #12]
 8009f64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f66:	fb01 f303 	mul.w	r3, r1, r3
 8009f6a:	441a      	add	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	22ff      	movs	r2, #255	@ 0xff
 8009f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	22ff      	movs	r2, #255	@ 0xff
 8009f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d114      	bne.n	8009fb0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01a      	beq.n	8009fc4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3310      	adds	r3, #16
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 f91a 	bl	800b1cc <xTaskRemoveFromEventList>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d012      	beq.n	8009fc4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd4 <xQueueGenericReset+0xd0>)
 8009fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	e009      	b.n	8009fc4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7ff fef1 	bl	8009d9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3324      	adds	r3, #36	@ 0x24
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7ff feec 	bl	8009d9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fc4:	f002 f88a 	bl	800c0dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fc8:	2301      	movs	r3, #1
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	e000ed04 	.word	0xe000ed04

08009fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b08e      	sub	sp, #56	@ 0x38
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10b      	bne.n	800a004 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ffe:	bf00      	nop
 800a000:	bf00      	nop
 800a002:	e7fd      	b.n	800a000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <xQueueGenericCreateStatic+0x56>
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <xQueueGenericCreateStatic+0x5a>
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <xQueueGenericCreateStatic+0x5c>
 800a032:	2300      	movs	r3, #0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10b      	bne.n	800a050 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	623b      	str	r3, [r7, #32]
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	e7fd      	b.n	800a04c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d102      	bne.n	800a05c <xQueueGenericCreateStatic+0x84>
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <xQueueGenericCreateStatic+0x88>
 800a05c:	2301      	movs	r3, #1
 800a05e:	e000      	b.n	800a062 <xQueueGenericCreateStatic+0x8a>
 800a060:	2300      	movs	r3, #0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	61fb      	str	r3, [r7, #28]
}
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
 800a07c:	e7fd      	b.n	800a07a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a07e:	2350      	movs	r3, #80	@ 0x50
 800a080:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b50      	cmp	r3, #80	@ 0x50
 800a086:	d00b      	beq.n	800a0a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	61bb      	str	r3, [r7, #24]
}
 800a09a:	bf00      	nop
 800a09c:	bf00      	nop
 800a09e:	e7fd      	b.n	800a09c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00d      	beq.n	800a0c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	68b9      	ldr	r1, [r7, #8]
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 f805 	bl	800a0d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3730      	adds	r7, #48	@ 0x30
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
 800a0de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	69ba      	ldr	r2, [r7, #24]
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	e002      	b.n	800a0f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a100:	2101      	movs	r1, #1
 800a102:	69b8      	ldr	r0, [r7, #24]
 800a104:	f7ff fefe 	bl	8009f04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a110:	bf00      	nop
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08e      	sub	sp, #56	@ 0x38
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a126:	2300      	movs	r3, #0
 800a128:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10b      	bne.n	800a14c <xQueueGenericSend+0x34>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a146:	bf00      	nop
 800a148:	bf00      	nop
 800a14a:	e7fd      	b.n	800a148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <xQueueGenericSend+0x42>
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <xQueueGenericSend+0x46>
 800a15a:	2301      	movs	r3, #1
 800a15c:	e000      	b.n	800a160 <xQueueGenericSend+0x48>
 800a15e:	2300      	movs	r3, #0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10b      	bne.n	800a17c <xQueueGenericSend+0x64>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d103      	bne.n	800a18a <xQueueGenericSend+0x72>
 800a182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <xQueueGenericSend+0x76>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e000      	b.n	800a190 <xQueueGenericSend+0x78>
 800a18e:	2300      	movs	r3, #0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d10b      	bne.n	800a1ac <xQueueGenericSend+0x94>
	__asm volatile
 800a194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a198:	f383 8811 	msr	BASEPRI, r3
 800a19c:	f3bf 8f6f 	isb	sy
 800a1a0:	f3bf 8f4f 	dsb	sy
 800a1a4:	623b      	str	r3, [r7, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	e7fd      	b.n	800a1a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1ac:	f001 f9f6 	bl	800b59c <xTaskGetSchedulerState>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d102      	bne.n	800a1bc <xQueueGenericSend+0xa4>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <xQueueGenericSend+0xa8>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <xQueueGenericSend+0xaa>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <xQueueGenericSend+0xc6>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	61fb      	str	r3, [r7, #28]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1de:	f001 ff4b 	bl	800c078 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d302      	bcc.n	800a1f4 <xQueueGenericSend+0xdc>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d129      	bne.n	800a248 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	68b9      	ldr	r1, [r7, #8]
 800a1f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1fa:	f000 fa0f 	bl	800a61c <prvCopyDataToQueue>
 800a1fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a204:	2b00      	cmp	r3, #0
 800a206:	d010      	beq.n	800a22a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	3324      	adds	r3, #36	@ 0x24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 ffdd 	bl	800b1cc <xTaskRemoveFromEventList>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d013      	beq.n	800a240 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a218:	4b3f      	ldr	r3, [pc, #252]	@ (800a318 <xQueueGenericSend+0x200>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	e00a      	b.n	800a240 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d007      	beq.n	800a240 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a230:	4b39      	ldr	r3, [pc, #228]	@ (800a318 <xQueueGenericSend+0x200>)
 800a232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a240:	f001 ff4c 	bl	800c0dc <vPortExitCritical>
				return pdPASS;
 800a244:	2301      	movs	r3, #1
 800a246:	e063      	b.n	800a310 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a24e:	f001 ff45 	bl	800c0dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a252:	2300      	movs	r3, #0
 800a254:	e05c      	b.n	800a310 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d106      	bne.n	800a26a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a25c:	f107 0314 	add.w	r3, r7, #20
 800a260:	4618      	mov	r0, r3
 800a262:	f001 f83f 	bl	800b2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a266:	2301      	movs	r3, #1
 800a268:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a26a:	f001 ff37 	bl	800c0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a26e:	f000 fd87 	bl	800ad80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a272:	f001 ff01 	bl	800c078 <vPortEnterCritical>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a282:	d103      	bne.n	800a28c <xQueueGenericSend+0x174>
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a292:	b25b      	sxtb	r3, r3
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a298:	d103      	bne.n	800a2a2 <xQueueGenericSend+0x18a>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2a2:	f001 ff1b 	bl	800c0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a6:	1d3a      	adds	r2, r7, #4
 800a2a8:	f107 0314 	add.w	r3, r7, #20
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 f82e 	bl	800b310 <xTaskCheckForTimeOut>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d124      	bne.n	800a304 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2bc:	f000 faa6 	bl	800a80c <prvIsQueueFull>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d018      	beq.n	800a2f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	3310      	adds	r3, #16
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 ff2a 	bl	800b128 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2d6:	f000 fa31 	bl	800a73c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2da:	f000 fd5f 	bl	800ad9c <xTaskResumeAll>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f47f af7c 	bne.w	800a1de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a318 <xQueueGenericSend+0x200>)
 800a2e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	e772      	b.n	800a1de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2fa:	f000 fa1f 	bl	800a73c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2fe:	f000 fd4d 	bl	800ad9c <xTaskResumeAll>
 800a302:	e76c      	b.n	800a1de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a306:	f000 fa19 	bl	800a73c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a30a:	f000 fd47 	bl	800ad9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a310:	4618      	mov	r0, r3
 800a312:	3738      	adds	r7, #56	@ 0x38
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b090      	sub	sp, #64	@ 0x40
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a338:	f383 8811 	msr	BASEPRI, r3
 800a33c:	f3bf 8f6f 	isb	sy
 800a340:	f3bf 8f4f 	dsb	sy
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a346:	bf00      	nop
 800a348:	bf00      	nop
 800a34a:	e7fd      	b.n	800a348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d103      	bne.n	800a35a <xQueueGenericSendFromISR+0x3e>
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d101      	bne.n	800a35e <xQueueGenericSendFromISR+0x42>
 800a35a:	2301      	movs	r3, #1
 800a35c:	e000      	b.n	800a360 <xQueueGenericSendFromISR+0x44>
 800a35e:	2300      	movs	r3, #0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d10b      	bne.n	800a37c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a376:	bf00      	nop
 800a378:	bf00      	nop
 800a37a:	e7fd      	b.n	800a378 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d103      	bne.n	800a38a <xQueueGenericSendFromISR+0x6e>
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a386:	2b01      	cmp	r3, #1
 800a388:	d101      	bne.n	800a38e <xQueueGenericSendFromISR+0x72>
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <xQueueGenericSendFromISR+0x74>
 800a38e:	2300      	movs	r3, #0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	623b      	str	r3, [r7, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	e7fd      	b.n	800a3a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3ac:	f001 ff44 	bl	800c238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3b0:	f3ef 8211 	mrs	r2, BASEPRI
 800a3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	61fa      	str	r2, [r7, #28]
 800a3c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d302      	bcc.n	800a3de <xQueueGenericSendFromISR+0xc2>
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d12f      	bne.n	800a43e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	68b9      	ldr	r1, [r7, #8]
 800a3f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3f4:	f000 f912 	bl	800a61c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a400:	d112      	bne.n	800a428 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d016      	beq.n	800a438 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40c:	3324      	adds	r3, #36	@ 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fedc 	bl	800b1cc <xTaskRemoveFromEventList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00e      	beq.n	800a438 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00b      	beq.n	800a438 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	601a      	str	r2, [r3, #0]
 800a426:	e007      	b.n	800a438 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a42c:	3301      	adds	r3, #1
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	b25a      	sxtb	r2, r3
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a438:	2301      	movs	r3, #1
 800a43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a43c:	e001      	b.n	800a442 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a444:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a44c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a450:	4618      	mov	r0, r3
 800a452:	3740      	adds	r7, #64	@ 0x40
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08c      	sub	sp, #48	@ 0x30
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a464:	2300      	movs	r3, #0
 800a466:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a46c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10b      	bne.n	800a48a <xQueueReceive+0x32>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	623b      	str	r3, [r7, #32]
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop
 800a488:	e7fd      	b.n	800a486 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d103      	bne.n	800a498 <xQueueReceive+0x40>
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <xQueueReceive+0x44>
 800a498:	2301      	movs	r3, #1
 800a49a:	e000      	b.n	800a49e <xQueueReceive+0x46>
 800a49c:	2300      	movs	r3, #0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10b      	bne.n	800a4ba <xQueueReceive+0x62>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	61fb      	str	r3, [r7, #28]
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
 800a4b8:	e7fd      	b.n	800a4b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ba:	f001 f86f 	bl	800b59c <xTaskGetSchedulerState>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d102      	bne.n	800a4ca <xQueueReceive+0x72>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <xQueueReceive+0x76>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e000      	b.n	800a4d0 <xQueueReceive+0x78>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <xQueueReceive+0x94>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	61bb      	str	r3, [r7, #24]
}
 800a4e6:	bf00      	nop
 800a4e8:	bf00      	nop
 800a4ea:	e7fd      	b.n	800a4e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ec:	f001 fdc4 	bl	800c078 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01f      	beq.n	800a53c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a500:	f000 f8f6 	bl	800a6f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a506:	1e5a      	subs	r2, r3, #1
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00f      	beq.n	800a534 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a516:	3310      	adds	r3, #16
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fe57 	bl	800b1cc <xTaskRemoveFromEventList>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d007      	beq.n	800a534 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a524:	4b3c      	ldr	r3, [pc, #240]	@ (800a618 <xQueueReceive+0x1c0>)
 800a526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a534:	f001 fdd2 	bl	800c0dc <vPortExitCritical>
				return pdPASS;
 800a538:	2301      	movs	r3, #1
 800a53a:	e069      	b.n	800a610 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d103      	bne.n	800a54a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a542:	f001 fdcb 	bl	800c0dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a546:	2300      	movs	r3, #0
 800a548:	e062      	b.n	800a610 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d106      	bne.n	800a55e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a550:	f107 0310 	add.w	r3, r7, #16
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fec5 	bl	800b2e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a55a:	2301      	movs	r3, #1
 800a55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a55e:	f001 fdbd 	bl	800c0dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a562:	f000 fc0d 	bl	800ad80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a566:	f001 fd87 	bl	800c078 <vPortEnterCritical>
 800a56a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a570:	b25b      	sxtb	r3, r3
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a576:	d103      	bne.n	800a580 <xQueueReceive+0x128>
 800a578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a582:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a586:	b25b      	sxtb	r3, r3
 800a588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a58c:	d103      	bne.n	800a596 <xQueueReceive+0x13e>
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	2200      	movs	r2, #0
 800a592:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a596:	f001 fda1 	bl	800c0dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a59a:	1d3a      	adds	r2, r7, #4
 800a59c:	f107 0310 	add.w	r3, r7, #16
 800a5a0:	4611      	mov	r1, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 feb4 	bl	800b310 <xTaskCheckForTimeOut>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d123      	bne.n	800a5f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5b0:	f000 f916 	bl	800a7e0 <prvIsQueueEmpty>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d017      	beq.n	800a5ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5bc:	3324      	adds	r3, #36	@ 0x24
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	4611      	mov	r1, r2
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fdb0 	bl	800b128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ca:	f000 f8b7 	bl	800a73c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ce:	f000 fbe5 	bl	800ad9c <xTaskResumeAll>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d189      	bne.n	800a4ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a618 <xQueueReceive+0x1c0>)
 800a5da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	e780      	b.n	800a4ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ec:	f000 f8a6 	bl	800a73c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5f0:	f000 fbd4 	bl	800ad9c <xTaskResumeAll>
 800a5f4:	e77a      	b.n	800a4ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f8:	f000 f8a0 	bl	800a73c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5fc:	f000 fbce 	bl	800ad9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a602:	f000 f8ed 	bl	800a7e0 <prvIsQueueEmpty>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f43f af6f 	beq.w	800a4ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a60e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a610:	4618      	mov	r0, r3
 800a612:	3730      	adds	r7, #48	@ 0x30
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	e000ed04 	.word	0xe000ed04

0800a61c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a630:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10d      	bne.n	800a656 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d14d      	bne.n	800a6de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 ffc6 	bl	800b5d8 <xTaskPriorityDisinherit>
 800a64c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	609a      	str	r2, [r3, #8]
 800a654:	e043      	b.n	800a6de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d119      	bne.n	800a690 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6858      	ldr	r0, [r3, #4]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a664:	461a      	mov	r2, r3
 800a666:	68b9      	ldr	r1, [r7, #8]
 800a668:	f012 f815 	bl	801c696 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	429a      	cmp	r2, r3
 800a684:	d32b      	bcc.n	800a6de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	605a      	str	r2, [r3, #4]
 800a68e:	e026      	b.n	800a6de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68d8      	ldr	r0, [r3, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a698:	461a      	mov	r2, r3
 800a69a:	68b9      	ldr	r1, [r7, #8]
 800a69c:	f011 fffb 	bl	801c696 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	441a      	add	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d207      	bcs.n	800a6cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	441a      	add	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d105      	bne.n	800a6de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	1c5a      	adds	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a6e6:	697b      	ldr	r3, [r7, #20]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d018      	beq.n	800a734 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70a:	441a      	add	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d303      	bcc.n	800a724 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68d9      	ldr	r1, [r3, #12]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a72c:	461a      	mov	r2, r3
 800a72e:	6838      	ldr	r0, [r7, #0]
 800a730:	f011 ffb1 	bl	801c696 <memcpy>
	}
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a744:	f001 fc98 	bl	800c078 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a74e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a750:	e011      	b.n	800a776 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	2b00      	cmp	r3, #0
 800a758:	d012      	beq.n	800a780 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	3324      	adds	r3, #36	@ 0x24
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 fd34 	bl	800b1cc <xTaskRemoveFromEventList>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a76a:	f000 fe35 	bl	800b3d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	3b01      	subs	r3, #1
 800a772:	b2db      	uxtb	r3, r3
 800a774:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dce9      	bgt.n	800a752 <prvUnlockQueue+0x16>
 800a77e:	e000      	b.n	800a782 <prvUnlockQueue+0x46>
					break;
 800a780:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	22ff      	movs	r2, #255	@ 0xff
 800a786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a78a:	f001 fca7 	bl	800c0dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a78e:	f001 fc73 	bl	800c078 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a798:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a79a:	e011      	b.n	800a7c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d012      	beq.n	800a7ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3310      	adds	r3, #16
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fd0f 	bl	800b1cc <xTaskRemoveFromEventList>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a7b4:	f000 fe10 	bl	800b3d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7b8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dce9      	bgt.n	800a79c <prvUnlockQueue+0x60>
 800a7c8:	e000      	b.n	800a7cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	22ff      	movs	r2, #255	@ 0xff
 800a7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a7d4:	f001 fc82 	bl	800c0dc <vPortExitCritical>
}
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7e8:	f001 fc46 	bl	800c078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d102      	bne.n	800a7fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	60fb      	str	r3, [r7, #12]
 800a7f8:	e001      	b.n	800a7fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7fe:	f001 fc6d 	bl	800c0dc <vPortExitCritical>

	return xReturn;
 800a802:	68fb      	ldr	r3, [r7, #12]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a814:	f001 fc30 	bl	800c078 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a820:	429a      	cmp	r2, r3
 800a822:	d102      	bne.n	800a82a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	60fb      	str	r3, [r7, #12]
 800a828:	e001      	b.n	800a82e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a82e:	f001 fc55 	bl	800c0dc <vPortExitCritical>

	return xReturn;
 800a832:	68fb      	ldr	r3, [r7, #12]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3710      	adds	r7, #16
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e014      	b.n	800a876 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a84c:	4a0f      	ldr	r2, [pc, #60]	@ (800a88c <vQueueAddToRegistry+0x50>)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10b      	bne.n	800a870 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a858:	490c      	ldr	r1, [pc, #48]	@ (800a88c <vQueueAddToRegistry+0x50>)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a862:	4a0a      	ldr	r2, [pc, #40]	@ (800a88c <vQueueAddToRegistry+0x50>)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	00db      	lsls	r3, r3, #3
 800a868:	4413      	add	r3, r2
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a86e:	e006      	b.n	800a87e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3301      	adds	r3, #1
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b07      	cmp	r3, #7
 800a87a:	d9e7      	bls.n	800a84c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	20008d94 	.word	0x20008d94

0800a890 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8a0:	f001 fbea 	bl	800c078 <vPortEnterCritical>
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8aa:	b25b      	sxtb	r3, r3
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8b0:	d103      	bne.n	800a8ba <vQueueWaitForMessageRestricted+0x2a>
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8c0:	b25b      	sxtb	r3, r3
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8c6:	d103      	bne.n	800a8d0 <vQueueWaitForMessageRestricted+0x40>
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8d0:	f001 fc04 	bl	800c0dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d106      	bne.n	800a8ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	3324      	adds	r3, #36	@ 0x24
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	68b9      	ldr	r1, [r7, #8]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fc45 	bl	800b174 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8ea:	6978      	ldr	r0, [r7, #20]
 800a8ec:	f7ff ff26 	bl	800a73c <prvUnlockQueue>
	}
 800a8f0:	bf00      	nop
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08e      	sub	sp, #56	@ 0x38
 800a8fc:	af04      	add	r7, sp, #16
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10b      	bne.n	800a924 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	623b      	str	r3, [r7, #32]
}
 800a91e:	bf00      	nop
 800a920:	bf00      	nop
 800a922:	e7fd      	b.n	800a920 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10b      	bne.n	800a942 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	61fb      	str	r3, [r7, #28]
}
 800a93c:	bf00      	nop
 800a93e:	bf00      	nop
 800a940:	e7fd      	b.n	800a93e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a942:	235c      	movs	r3, #92	@ 0x5c
 800a944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	2b5c      	cmp	r3, #92	@ 0x5c
 800a94a:	d00b      	beq.n	800a964 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	61bb      	str	r3, [r7, #24]
}
 800a95e:	bf00      	nop
 800a960:	bf00      	nop
 800a962:	e7fd      	b.n	800a960 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d01e      	beq.n	800a9aa <xTaskCreateStatic+0xb2>
 800a96c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d01b      	beq.n	800a9aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a97a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97e:	2202      	movs	r2, #2
 800a980:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a984:	2300      	movs	r3, #0
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98a:	9302      	str	r3, [sp, #8]
 800a98c:	f107 0314 	add.w	r3, r7, #20
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f850 	bl	800aa42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9a4:	f000 f8de 	bl	800ab64 <prvAddNewTaskToReadyList>
 800a9a8:	e001      	b.n	800a9ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9ae:	697b      	ldr	r3, [r7, #20]
	}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3728      	adds	r7, #40	@ 0x28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08c      	sub	sp, #48	@ 0x30
 800a9bc:	af04      	add	r7, sp, #16
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	603b      	str	r3, [r7, #0]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 fc75 	bl	800c2bc <pvPortMalloc>
 800a9d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00e      	beq.n	800a9f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9da:	205c      	movs	r0, #92	@ 0x5c
 800a9dc:	f001 fc6e 	bl	800c2bc <pvPortMalloc>
 800a9e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9ee:	e005      	b.n	800a9fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9f0:	6978      	ldr	r0, [r7, #20]
 800a9f2:	f001 fd31 	bl	800c458 <vPortFree>
 800a9f6:	e001      	b.n	800a9fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d017      	beq.n	800aa32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa0a:	88fa      	ldrh	r2, [r7, #6]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9303      	str	r3, [sp, #12]
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	9302      	str	r3, [sp, #8]
 800aa14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa16:	9301      	str	r3, [sp, #4]
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f80e 	bl	800aa42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa26:	69f8      	ldr	r0, [r7, #28]
 800aa28:	f000 f89c 	bl	800ab64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	61bb      	str	r3, [r7, #24]
 800aa30:	e002      	b.n	800aa38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa38:	69bb      	ldr	r3, [r7, #24]
	}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3720      	adds	r7, #32
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b088      	sub	sp, #32
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	60f8      	str	r0, [r7, #12]
 800aa4a:	60b9      	str	r1, [r7, #8]
 800aa4c:	607a      	str	r2, [r7, #4]
 800aa4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	461a      	mov	r2, r3
 800aa5a:	21a5      	movs	r1, #165	@ 0xa5
 800aa5c:	f011 fd52 	bl	801c504 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	f023 0307 	bic.w	r3, r3, #7
 800aa78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa7a:	69bb      	ldr	r3, [r7, #24]
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00b      	beq.n	800aa9c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	617b      	str	r3, [r7, #20]
}
 800aa96:	bf00      	nop
 800aa98:	bf00      	nop
 800aa9a:	e7fd      	b.n	800aa98 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01f      	beq.n	800aae2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	61fb      	str	r3, [r7, #28]
 800aaa6:	e012      	b.n	800aace <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	7819      	ldrb	r1, [r3, #0]
 800aab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	4413      	add	r3, r2
 800aab6:	3334      	adds	r3, #52	@ 0x34
 800aab8:	460a      	mov	r2, r1
 800aaba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	4413      	add	r3, r2
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	3301      	adds	r3, #1
 800aacc:	61fb      	str	r3, [r7, #28]
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	2b0f      	cmp	r3, #15
 800aad2:	d9e9      	bls.n	800aaa8 <prvInitialiseNewTask+0x66>
 800aad4:	e000      	b.n	800aad8 <prvInitialiseNewTask+0x96>
			{
				break;
 800aad6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aae0:	e003      	b.n	800aaea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	2b37      	cmp	r3, #55	@ 0x37
 800aaee:	d901      	bls.n	800aaf4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aaf0:	2337      	movs	r3, #55	@ 0x37
 800aaf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aaf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaf8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aafe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab02:	2200      	movs	r2, #0
 800ab04:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab08:	3304      	adds	r3, #4
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff f966 	bl	8009ddc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	3318      	adds	r3, #24
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff f961 	bl	8009ddc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab32:	2200      	movs	r2, #0
 800ab34:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	69b8      	ldr	r0, [r7, #24]
 800ab44:	f001 f966 	bl	800be14 <pxPortInitialiseStack>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab5a:	bf00      	nop
 800ab5c:	3720      	adds	r7, #32
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab6c:	f001 fa84 	bl	800c078 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab70:	4b2d      	ldr	r3, [pc, #180]	@ (800ac28 <prvAddNewTaskToReadyList+0xc4>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3301      	adds	r3, #1
 800ab76:	4a2c      	ldr	r2, [pc, #176]	@ (800ac28 <prvAddNewTaskToReadyList+0xc4>)
 800ab78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab7a:	4b2c      	ldr	r3, [pc, #176]	@ (800ac2c <prvAddNewTaskToReadyList+0xc8>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d109      	bne.n	800ab96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab82:	4a2a      	ldr	r2, [pc, #168]	@ (800ac2c <prvAddNewTaskToReadyList+0xc8>)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab88:	4b27      	ldr	r3, [pc, #156]	@ (800ac28 <prvAddNewTaskToReadyList+0xc4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d110      	bne.n	800abb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab90:	f000 fc46 	bl	800b420 <prvInitialiseTaskLists>
 800ab94:	e00d      	b.n	800abb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab96:	4b26      	ldr	r3, [pc, #152]	@ (800ac30 <prvAddNewTaskToReadyList+0xcc>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d109      	bne.n	800abb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab9e:	4b23      	ldr	r3, [pc, #140]	@ (800ac2c <prvAddNewTaskToReadyList+0xc8>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d802      	bhi.n	800abb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abac:	4a1f      	ldr	r2, [pc, #124]	@ (800ac2c <prvAddNewTaskToReadyList+0xc8>)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abb2:	4b20      	ldr	r3, [pc, #128]	@ (800ac34 <prvAddNewTaskToReadyList+0xd0>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3301      	adds	r3, #1
 800abb8:	4a1e      	ldr	r2, [pc, #120]	@ (800ac34 <prvAddNewTaskToReadyList+0xd0>)
 800abba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abbc:	4b1d      	ldr	r3, [pc, #116]	@ (800ac34 <prvAddNewTaskToReadyList+0xd0>)
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc8:	4b1b      	ldr	r3, [pc, #108]	@ (800ac38 <prvAddNewTaskToReadyList+0xd4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d903      	bls.n	800abd8 <prvAddNewTaskToReadyList+0x74>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	4a18      	ldr	r2, [pc, #96]	@ (800ac38 <prvAddNewTaskToReadyList+0xd4>)
 800abd6:	6013      	str	r3, [r2, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abdc:	4613      	mov	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	4a15      	ldr	r2, [pc, #84]	@ (800ac3c <prvAddNewTaskToReadyList+0xd8>)
 800abe6:	441a      	add	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3304      	adds	r3, #4
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f7ff f901 	bl	8009df6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abf4:	f001 fa72 	bl	800c0dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac30 <prvAddNewTaskToReadyList+0xcc>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00e      	beq.n	800ac1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac00:	4b0a      	ldr	r3, [pc, #40]	@ (800ac2c <prvAddNewTaskToReadyList+0xc8>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d207      	bcs.n	800ac1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ac40 <prvAddNewTaskToReadyList+0xdc>)
 800ac10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac14:	601a      	str	r2, [r3, #0]
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac1e:	bf00      	nop
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200092a8 	.word	0x200092a8
 800ac2c:	20008dd4 	.word	0x20008dd4
 800ac30:	200092b4 	.word	0x200092b4
 800ac34:	200092c4 	.word	0x200092c4
 800ac38:	200092b0 	.word	0x200092b0
 800ac3c:	20008dd8 	.word	0x20008dd8
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d018      	beq.n	800ac88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac56:	4b14      	ldr	r3, [pc, #80]	@ (800aca8 <vTaskDelay+0x64>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00b      	beq.n	800ac76 <vTaskDelay+0x32>
	__asm volatile
 800ac5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac62:	f383 8811 	msr	BASEPRI, r3
 800ac66:	f3bf 8f6f 	isb	sy
 800ac6a:	f3bf 8f4f 	dsb	sy
 800ac6e:	60bb      	str	r3, [r7, #8]
}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	e7fd      	b.n	800ac72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac76:	f000 f883 	bl	800ad80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fd1b 	bl	800b6b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac82:	f000 f88b 	bl	800ad9c <xTaskResumeAll>
 800ac86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d107      	bne.n	800ac9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ac8e:	4b07      	ldr	r3, [pc, #28]	@ (800acac <vTaskDelay+0x68>)
 800ac90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac9e:	bf00      	nop
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	200092d0 	.word	0x200092d0
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	@ 0x28
 800acb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acbe:	463a      	mov	r2, r7
 800acc0:	1d39      	adds	r1, r7, #4
 800acc2:	f107 0308 	add.w	r3, r7, #8
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7ff f834 	bl	8009d34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	9202      	str	r2, [sp, #8]
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	2300      	movs	r3, #0
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	2300      	movs	r3, #0
 800acdc:	460a      	mov	r2, r1
 800acde:	4922      	ldr	r1, [pc, #136]	@ (800ad68 <vTaskStartScheduler+0xb8>)
 800ace0:	4822      	ldr	r0, [pc, #136]	@ (800ad6c <vTaskStartScheduler+0xbc>)
 800ace2:	f7ff fe09 	bl	800a8f8 <xTaskCreateStatic>
 800ace6:	4603      	mov	r3, r0
 800ace8:	4a21      	ldr	r2, [pc, #132]	@ (800ad70 <vTaskStartScheduler+0xc0>)
 800acea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acec:	4b20      	ldr	r3, [pc, #128]	@ (800ad70 <vTaskStartScheduler+0xc0>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	e001      	b.n	800acfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d102      	bne.n	800ad0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad04:	f000 fd2c 	bl	800b760 <xTimerCreateTimerTask>
 800ad08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d116      	bne.n	800ad3e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	613b      	str	r3, [r7, #16]
}
 800ad22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad24:	4b13      	ldr	r3, [pc, #76]	@ (800ad74 <vTaskStartScheduler+0xc4>)
 800ad26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad2c:	4b12      	ldr	r3, [pc, #72]	@ (800ad78 <vTaskStartScheduler+0xc8>)
 800ad2e:	2201      	movs	r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad32:	4b12      	ldr	r3, [pc, #72]	@ (800ad7c <vTaskStartScheduler+0xcc>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad38:	f001 f8fa 	bl	800bf30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad3c:	e00f      	b.n	800ad5e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad44:	d10b      	bne.n	800ad5e <vTaskStartScheduler+0xae>
	__asm volatile
 800ad46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	60fb      	str	r3, [r7, #12]
}
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
 800ad5c:	e7fd      	b.n	800ad5a <vTaskStartScheduler+0xaa>
}
 800ad5e:	bf00      	nop
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	0801d3b4 	.word	0x0801d3b4
 800ad6c:	0800b3f1 	.word	0x0800b3f1
 800ad70:	200092cc 	.word	0x200092cc
 800ad74:	200092c8 	.word	0x200092c8
 800ad78:	200092b4 	.word	0x200092b4
 800ad7c:	200092ac 	.word	0x200092ac

0800ad80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad84:	4b04      	ldr	r3, [pc, #16]	@ (800ad98 <vTaskSuspendAll+0x18>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	4a03      	ldr	r2, [pc, #12]	@ (800ad98 <vTaskSuspendAll+0x18>)
 800ad8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad8e:	bf00      	nop
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr
 800ad98:	200092d0 	.word	0x200092d0

0800ad9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ada6:	2300      	movs	r3, #0
 800ada8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adaa:	4b42      	ldr	r3, [pc, #264]	@ (800aeb4 <xTaskResumeAll+0x118>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10b      	bne.n	800adca <xTaskResumeAll+0x2e>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	603b      	str	r3, [r7, #0]
}
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop
 800adc8:	e7fd      	b.n	800adc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800adca:	f001 f955 	bl	800c078 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adce:	4b39      	ldr	r3, [pc, #228]	@ (800aeb4 <xTaskResumeAll+0x118>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3b01      	subs	r3, #1
 800add4:	4a37      	ldr	r2, [pc, #220]	@ (800aeb4 <xTaskResumeAll+0x118>)
 800add6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add8:	4b36      	ldr	r3, [pc, #216]	@ (800aeb4 <xTaskResumeAll+0x118>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d162      	bne.n	800aea6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ade0:	4b35      	ldr	r3, [pc, #212]	@ (800aeb8 <xTaskResumeAll+0x11c>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d05e      	beq.n	800aea6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ade8:	e02f      	b.n	800ae4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adea:	4b34      	ldr	r3, [pc, #208]	@ (800aebc <xTaskResumeAll+0x120>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3318      	adds	r3, #24
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff f85a 	bl	8009eb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4618      	mov	r0, r3
 800ae02:	f7ff f855 	bl	8009eb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0a:	4b2d      	ldr	r3, [pc, #180]	@ (800aec0 <xTaskResumeAll+0x124>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d903      	bls.n	800ae1a <xTaskResumeAll+0x7e>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae16:	4a2a      	ldr	r2, [pc, #168]	@ (800aec0 <xTaskResumeAll+0x124>)
 800ae18:	6013      	str	r3, [r2, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae1e:	4613      	mov	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4a27      	ldr	r2, [pc, #156]	@ (800aec4 <xTaskResumeAll+0x128>)
 800ae28:	441a      	add	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f7fe ffe0 	bl	8009df6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae3a:	4b23      	ldr	r3, [pc, #140]	@ (800aec8 <xTaskResumeAll+0x12c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d302      	bcc.n	800ae4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ae44:	4b21      	ldr	r3, [pc, #132]	@ (800aecc <xTaskResumeAll+0x130>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae4a:	4b1c      	ldr	r3, [pc, #112]	@ (800aebc <xTaskResumeAll+0x120>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1cb      	bne.n	800adea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d001      	beq.n	800ae5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae58:	f000 fb80 	bl	800b55c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae5c:	4b1c      	ldr	r3, [pc, #112]	@ (800aed0 <xTaskResumeAll+0x134>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d010      	beq.n	800ae8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae68:	f000 f846 	bl	800aef8 <xTaskIncrementTick>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae72:	4b16      	ldr	r3, [pc, #88]	@ (800aecc <xTaskResumeAll+0x130>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f1      	bne.n	800ae68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ae84:	4b12      	ldr	r3, [pc, #72]	@ (800aed0 <xTaskResumeAll+0x134>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae8a:	4b10      	ldr	r3, [pc, #64]	@ (800aecc <xTaskResumeAll+0x130>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d009      	beq.n	800aea6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae92:	2301      	movs	r3, #1
 800ae94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae96:	4b0f      	ldr	r3, [pc, #60]	@ (800aed4 <xTaskResumeAll+0x138>)
 800ae98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae9c:	601a      	str	r2, [r3, #0]
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aea6:	f001 f919 	bl	800c0dc <vPortExitCritical>

	return xAlreadyYielded;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}
 800aeb4:	200092d0 	.word	0x200092d0
 800aeb8:	200092a8 	.word	0x200092a8
 800aebc:	20009268 	.word	0x20009268
 800aec0:	200092b0 	.word	0x200092b0
 800aec4:	20008dd8 	.word	0x20008dd8
 800aec8:	20008dd4 	.word	0x20008dd4
 800aecc:	200092bc 	.word	0x200092bc
 800aed0:	200092b8 	.word	0x200092b8
 800aed4:	e000ed04 	.word	0xe000ed04

0800aed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aede:	4b05      	ldr	r3, [pc, #20]	@ (800aef4 <xTaskGetTickCount+0x1c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aee4:	687b      	ldr	r3, [r7, #4]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	200092ac 	.word	0x200092ac

0800aef8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af02:	4b4f      	ldr	r3, [pc, #316]	@ (800b040 <xTaskIncrementTick+0x148>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f040 8090 	bne.w	800b02c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af0c:	4b4d      	ldr	r3, [pc, #308]	@ (800b044 <xTaskIncrementTick+0x14c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af14:	4a4b      	ldr	r2, [pc, #300]	@ (800b044 <xTaskIncrementTick+0x14c>)
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d121      	bne.n	800af64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800af20:	4b49      	ldr	r3, [pc, #292]	@ (800b048 <xTaskIncrementTick+0x150>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00b      	beq.n	800af42 <xTaskIncrementTick+0x4a>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	603b      	str	r3, [r7, #0]
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	e7fd      	b.n	800af3e <xTaskIncrementTick+0x46>
 800af42:	4b41      	ldr	r3, [pc, #260]	@ (800b048 <xTaskIncrementTick+0x150>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	4b40      	ldr	r3, [pc, #256]	@ (800b04c <xTaskIncrementTick+0x154>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a3e      	ldr	r2, [pc, #248]	@ (800b048 <xTaskIncrementTick+0x150>)
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	4a3e      	ldr	r2, [pc, #248]	@ (800b04c <xTaskIncrementTick+0x154>)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4b3e      	ldr	r3, [pc, #248]	@ (800b050 <xTaskIncrementTick+0x158>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3301      	adds	r3, #1
 800af5c:	4a3c      	ldr	r2, [pc, #240]	@ (800b050 <xTaskIncrementTick+0x158>)
 800af5e:	6013      	str	r3, [r2, #0]
 800af60:	f000 fafc 	bl	800b55c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af64:	4b3b      	ldr	r3, [pc, #236]	@ (800b054 <xTaskIncrementTick+0x15c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d349      	bcc.n	800b002 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af6e:	4b36      	ldr	r3, [pc, #216]	@ (800b048 <xTaskIncrementTick+0x150>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d104      	bne.n	800af82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af78:	4b36      	ldr	r3, [pc, #216]	@ (800b054 <xTaskIncrementTick+0x15c>)
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af7e:	601a      	str	r2, [r3, #0]
					break;
 800af80:	e03f      	b.n	800b002 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af82:	4b31      	ldr	r3, [pc, #196]	@ (800b048 <xTaskIncrementTick+0x150>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	429a      	cmp	r2, r3
 800af98:	d203      	bcs.n	800afa2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af9a:	4a2e      	ldr	r2, [pc, #184]	@ (800b054 <xTaskIncrementTick+0x15c>)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afa0:	e02f      	b.n	800b002 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7fe ff82 	bl	8009eb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d004      	beq.n	800afbe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	3318      	adds	r3, #24
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe ff79 	bl	8009eb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afc2:	4b25      	ldr	r3, [pc, #148]	@ (800b058 <xTaskIncrementTick+0x160>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d903      	bls.n	800afd2 <xTaskIncrementTick+0xda>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afce:	4a22      	ldr	r2, [pc, #136]	@ (800b058 <xTaskIncrementTick+0x160>)
 800afd0:	6013      	str	r3, [r2, #0]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4a1f      	ldr	r2, [pc, #124]	@ (800b05c <xTaskIncrementTick+0x164>)
 800afe0:	441a      	add	r2, r3
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	3304      	adds	r3, #4
 800afe6:	4619      	mov	r1, r3
 800afe8:	4610      	mov	r0, r2
 800afea:	f7fe ff04 	bl	8009df6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff2:	4b1b      	ldr	r3, [pc, #108]	@ (800b060 <xTaskIncrementTick+0x168>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff8:	429a      	cmp	r2, r3
 800affa:	d3b8      	bcc.n	800af6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800affc:	2301      	movs	r3, #1
 800affe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b000:	e7b5      	b.n	800af6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b002:	4b17      	ldr	r3, [pc, #92]	@ (800b060 <xTaskIncrementTick+0x168>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b008:	4914      	ldr	r1, [pc, #80]	@ (800b05c <xTaskIncrementTick+0x164>)
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	440b      	add	r3, r1
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d901      	bls.n	800b01e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b01a:	2301      	movs	r3, #1
 800b01c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b01e:	4b11      	ldr	r3, [pc, #68]	@ (800b064 <xTaskIncrementTick+0x16c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d007      	beq.n	800b036 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b026:	2301      	movs	r3, #1
 800b028:	617b      	str	r3, [r7, #20]
 800b02a:	e004      	b.n	800b036 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b02c:	4b0e      	ldr	r3, [pc, #56]	@ (800b068 <xTaskIncrementTick+0x170>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3301      	adds	r3, #1
 800b032:	4a0d      	ldr	r2, [pc, #52]	@ (800b068 <xTaskIncrementTick+0x170>)
 800b034:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b036:	697b      	ldr	r3, [r7, #20]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	200092d0 	.word	0x200092d0
 800b044:	200092ac 	.word	0x200092ac
 800b048:	20009260 	.word	0x20009260
 800b04c:	20009264 	.word	0x20009264
 800b050:	200092c0 	.word	0x200092c0
 800b054:	200092c8 	.word	0x200092c8
 800b058:	200092b0 	.word	0x200092b0
 800b05c:	20008dd8 	.word	0x20008dd8
 800b060:	20008dd4 	.word	0x20008dd4
 800b064:	200092bc 	.word	0x200092bc
 800b068:	200092b8 	.word	0x200092b8

0800b06c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b072:	4b28      	ldr	r3, [pc, #160]	@ (800b114 <vTaskSwitchContext+0xa8>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b07a:	4b27      	ldr	r3, [pc, #156]	@ (800b118 <vTaskSwitchContext+0xac>)
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b080:	e042      	b.n	800b108 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b082:	4b25      	ldr	r3, [pc, #148]	@ (800b118 <vTaskSwitchContext+0xac>)
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b088:	4b24      	ldr	r3, [pc, #144]	@ (800b11c <vTaskSwitchContext+0xb0>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	e011      	b.n	800b0b4 <vTaskSwitchContext+0x48>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10b      	bne.n	800b0ae <vTaskSwitchContext+0x42>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	607b      	str	r3, [r7, #4]
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	e7fd      	b.n	800b0aa <vTaskSwitchContext+0x3e>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	60fb      	str	r3, [r7, #12]
 800b0b4:	491a      	ldr	r1, [pc, #104]	@ (800b120 <vTaskSwitchContext+0xb4>)
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0e3      	beq.n	800b090 <vTaskSwitchContext+0x24>
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	4613      	mov	r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	4413      	add	r3, r2
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4a13      	ldr	r2, [pc, #76]	@ (800b120 <vTaskSwitchContext+0xb4>)
 800b0d4:	4413      	add	r3, r2
 800b0d6:	60bb      	str	r3, [r7, #8]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	605a      	str	r2, [r3, #4]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d104      	bne.n	800b0f8 <vTaskSwitchContext+0x8c>
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	605a      	str	r2, [r3, #4]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	4a09      	ldr	r2, [pc, #36]	@ (800b124 <vTaskSwitchContext+0xb8>)
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	4a06      	ldr	r2, [pc, #24]	@ (800b11c <vTaskSwitchContext+0xb0>)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6013      	str	r3, [r2, #0]
}
 800b108:	bf00      	nop
 800b10a:	3714      	adds	r7, #20
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	200092d0 	.word	0x200092d0
 800b118:	200092bc 	.word	0x200092bc
 800b11c:	200092b0 	.word	0x200092b0
 800b120:	20008dd8 	.word	0x20008dd8
 800b124:	20008dd4 	.word	0x20008dd4

0800b128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10b      	bne.n	800b150 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13c:	f383 8811 	msr	BASEPRI, r3
 800b140:	f3bf 8f6f 	isb	sy
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	60fb      	str	r3, [r7, #12]
}
 800b14a:	bf00      	nop
 800b14c:	bf00      	nop
 800b14e:	e7fd      	b.n	800b14c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b150:	4b07      	ldr	r3, [pc, #28]	@ (800b170 <vTaskPlaceOnEventList+0x48>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3318      	adds	r3, #24
 800b156:	4619      	mov	r1, r3
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7fe fe70 	bl	8009e3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b15e:	2101      	movs	r1, #1
 800b160:	6838      	ldr	r0, [r7, #0]
 800b162:	f000 faa9 	bl	800b6b8 <prvAddCurrentTaskToDelayedList>
}
 800b166:	bf00      	nop
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	20008dd4 	.word	0x20008dd4

0800b174 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10b      	bne.n	800b19e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	617b      	str	r3, [r7, #20]
}
 800b198:	bf00      	nop
 800b19a:	bf00      	nop
 800b19c:	e7fd      	b.n	800b19a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b19e:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3318      	adds	r3, #24
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f7fe fe25 	bl	8009df6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b1b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	68b8      	ldr	r0, [r7, #8]
 800b1bc:	f000 fa7c 	bl	800b6b8 <prvAddCurrentTaskToDelayedList>
	}
 800b1c0:	bf00      	nop
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	20008dd4 	.word	0x20008dd4

0800b1cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10b      	bne.n	800b1fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	60fb      	str	r3, [r7, #12]
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	e7fd      	b.n	800b1f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	3318      	adds	r3, #24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fe fe56 	bl	8009eb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b204:	4b1d      	ldr	r3, [pc, #116]	@ (800b27c <xTaskRemoveFromEventList+0xb0>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d11d      	bne.n	800b248 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3304      	adds	r3, #4
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe fe4d 	bl	8009eb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b21a:	4b19      	ldr	r3, [pc, #100]	@ (800b280 <xTaskRemoveFromEventList+0xb4>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d903      	bls.n	800b22a <xTaskRemoveFromEventList+0x5e>
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	4a16      	ldr	r2, [pc, #88]	@ (800b280 <xTaskRemoveFromEventList+0xb4>)
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4a13      	ldr	r2, [pc, #76]	@ (800b284 <xTaskRemoveFromEventList+0xb8>)
 800b238:	441a      	add	r2, r3
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	3304      	adds	r3, #4
 800b23e:	4619      	mov	r1, r3
 800b240:	4610      	mov	r0, r2
 800b242:	f7fe fdd8 	bl	8009df6 <vListInsertEnd>
 800b246:	e005      	b.n	800b254 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	3318      	adds	r3, #24
 800b24c:	4619      	mov	r1, r3
 800b24e:	480e      	ldr	r0, [pc, #56]	@ (800b288 <xTaskRemoveFromEventList+0xbc>)
 800b250:	f7fe fdd1 	bl	8009df6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b258:	4b0c      	ldr	r3, [pc, #48]	@ (800b28c <xTaskRemoveFromEventList+0xc0>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25e:	429a      	cmp	r2, r3
 800b260:	d905      	bls.n	800b26e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b262:	2301      	movs	r3, #1
 800b264:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b266:	4b0a      	ldr	r3, [pc, #40]	@ (800b290 <xTaskRemoveFromEventList+0xc4>)
 800b268:	2201      	movs	r2, #1
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e001      	b.n	800b272 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b272:	697b      	ldr	r3, [r7, #20]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3718      	adds	r7, #24
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	200092d0 	.word	0x200092d0
 800b280:	200092b0 	.word	0x200092b0
 800b284:	20008dd8 	.word	0x20008dd8
 800b288:	20009268 	.word	0x20009268
 800b28c:	20008dd4 	.word	0x20008dd4
 800b290:	200092bc 	.word	0x200092bc

0800b294 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	60fb      	str	r3, [r7, #12]
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop
 800b2b8:	e7fd      	b.n	800b2b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b2ba:	f000 fedd 	bl	800c078 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2be:	4b07      	ldr	r3, [pc, #28]	@ (800b2dc <vTaskSetTimeOutState+0x48>)
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b2c6:	4b06      	ldr	r3, [pc, #24]	@ (800b2e0 <vTaskSetTimeOutState+0x4c>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b2ce:	f000 ff05 	bl	800c0dc <vPortExitCritical>
}
 800b2d2:	bf00      	nop
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200092c0 	.word	0x200092c0
 800b2e0:	200092ac 	.word	0x200092ac

0800b2e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2ec:	4b06      	ldr	r3, [pc, #24]	@ (800b308 <vTaskInternalSetTimeOutState+0x24>)
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2f4:	4b05      	ldr	r3, [pc, #20]	@ (800b30c <vTaskInternalSetTimeOutState+0x28>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	605a      	str	r2, [r3, #4]
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	200092c0 	.word	0x200092c0
 800b30c:	200092ac 	.word	0x200092ac

0800b310 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10b      	bne.n	800b338 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	613b      	str	r3, [r7, #16]
}
 800b332:	bf00      	nop
 800b334:	bf00      	nop
 800b336:	e7fd      	b.n	800b334 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10b      	bne.n	800b356 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	60fb      	str	r3, [r7, #12]
}
 800b350:	bf00      	nop
 800b352:	bf00      	nop
 800b354:	e7fd      	b.n	800b352 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b356:	f000 fe8f 	bl	800c078 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b35a:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d0 <xTaskCheckForTimeOut+0xc0>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b372:	d102      	bne.n	800b37a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b374:	2300      	movs	r3, #0
 800b376:	61fb      	str	r3, [r7, #28]
 800b378:	e023      	b.n	800b3c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	4b15      	ldr	r3, [pc, #84]	@ (800b3d4 <xTaskCheckForTimeOut+0xc4>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d007      	beq.n	800b396 <xTaskCheckForTimeOut+0x86>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	69ba      	ldr	r2, [r7, #24]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d302      	bcc.n	800b396 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b390:	2301      	movs	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	e015      	b.n	800b3c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d20b      	bcs.n	800b3b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	1ad2      	subs	r2, r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7ff ff99 	bl	800b2e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61fb      	str	r3, [r7, #28]
 800b3b6:	e004      	b.n	800b3c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3c2:	f000 fe8b 	bl	800c0dc <vPortExitCritical>

	return xReturn;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	200092ac 	.word	0x200092ac
 800b3d4:	200092c0 	.word	0x200092c0

0800b3d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3dc:	4b03      	ldr	r3, [pc, #12]	@ (800b3ec <vTaskMissedYield+0x14>)
 800b3de:	2201      	movs	r2, #1
 800b3e0:	601a      	str	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	200092bc 	.word	0x200092bc

0800b3f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3f8:	f000 f852 	bl	800b4a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3fc:	4b06      	ldr	r3, [pc, #24]	@ (800b418 <prvIdleTask+0x28>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d9f9      	bls.n	800b3f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b404:	4b05      	ldr	r3, [pc, #20]	@ (800b41c <prvIdleTask+0x2c>)
 800b406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b414:	e7f0      	b.n	800b3f8 <prvIdleTask+0x8>
 800b416:	bf00      	nop
 800b418:	20008dd8 	.word	0x20008dd8
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
 800b42a:	e00c      	b.n	800b446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4a12      	ldr	r2, [pc, #72]	@ (800b480 <prvInitialiseTaskLists+0x60>)
 800b438:	4413      	add	r3, r2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe fcae 	bl	8009d9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3301      	adds	r3, #1
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b37      	cmp	r3, #55	@ 0x37
 800b44a:	d9ef      	bls.n	800b42c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b44c:	480d      	ldr	r0, [pc, #52]	@ (800b484 <prvInitialiseTaskLists+0x64>)
 800b44e:	f7fe fca5 	bl	8009d9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b452:	480d      	ldr	r0, [pc, #52]	@ (800b488 <prvInitialiseTaskLists+0x68>)
 800b454:	f7fe fca2 	bl	8009d9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b458:	480c      	ldr	r0, [pc, #48]	@ (800b48c <prvInitialiseTaskLists+0x6c>)
 800b45a:	f7fe fc9f 	bl	8009d9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b45e:	480c      	ldr	r0, [pc, #48]	@ (800b490 <prvInitialiseTaskLists+0x70>)
 800b460:	f7fe fc9c 	bl	8009d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b464:	480b      	ldr	r0, [pc, #44]	@ (800b494 <prvInitialiseTaskLists+0x74>)
 800b466:	f7fe fc99 	bl	8009d9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b46a:	4b0b      	ldr	r3, [pc, #44]	@ (800b498 <prvInitialiseTaskLists+0x78>)
 800b46c:	4a05      	ldr	r2, [pc, #20]	@ (800b484 <prvInitialiseTaskLists+0x64>)
 800b46e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b470:	4b0a      	ldr	r3, [pc, #40]	@ (800b49c <prvInitialiseTaskLists+0x7c>)
 800b472:	4a05      	ldr	r2, [pc, #20]	@ (800b488 <prvInitialiseTaskLists+0x68>)
 800b474:	601a      	str	r2, [r3, #0]
}
 800b476:	bf00      	nop
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20008dd8 	.word	0x20008dd8
 800b484:	20009238 	.word	0x20009238
 800b488:	2000924c 	.word	0x2000924c
 800b48c:	20009268 	.word	0x20009268
 800b490:	2000927c 	.word	0x2000927c
 800b494:	20009294 	.word	0x20009294
 800b498:	20009260 	.word	0x20009260
 800b49c:	20009264 	.word	0x20009264

0800b4a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4a6:	e019      	b.n	800b4dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4a8:	f000 fde6 	bl	800c078 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ac:	4b10      	ldr	r3, [pc, #64]	@ (800b4f0 <prvCheckTasksWaitingTermination+0x50>)
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fcf9 	bl	8009eb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4be:	4b0d      	ldr	r3, [pc, #52]	@ (800b4f4 <prvCheckTasksWaitingTermination+0x54>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4a0b      	ldr	r2, [pc, #44]	@ (800b4f4 <prvCheckTasksWaitingTermination+0x54>)
 800b4c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f8 <prvCheckTasksWaitingTermination+0x58>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	4a0a      	ldr	r2, [pc, #40]	@ (800b4f8 <prvCheckTasksWaitingTermination+0x58>)
 800b4d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4d2:	f000 fe03 	bl	800c0dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f810 	bl	800b4fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4dc:	4b06      	ldr	r3, [pc, #24]	@ (800b4f8 <prvCheckTasksWaitingTermination+0x58>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e1      	bne.n	800b4a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	2000927c 	.word	0x2000927c
 800b4f4:	200092a8 	.word	0x200092a8
 800b4f8:	20009290 	.word	0x20009290

0800b4fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d108      	bne.n	800b520 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b512:	4618      	mov	r0, r3
 800b514:	f000 ffa0 	bl	800c458 <vPortFree>
				vPortFree( pxTCB );
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 ff9d 	bl	800c458 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b51e:	e019      	b.n	800b554 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b526:	2b01      	cmp	r3, #1
 800b528:	d103      	bne.n	800b532 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 ff94 	bl	800c458 <vPortFree>
	}
 800b530:	e010      	b.n	800b554 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d00b      	beq.n	800b554 <prvDeleteTCB+0x58>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	60fb      	str	r3, [r7, #12]
}
 800b54e:	bf00      	nop
 800b550:	bf00      	nop
 800b552:	e7fd      	b.n	800b550 <prvDeleteTCB+0x54>
	}
 800b554:	bf00      	nop
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b562:	4b0c      	ldr	r3, [pc, #48]	@ (800b594 <prvResetNextTaskUnblockTime+0x38>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d104      	bne.n	800b576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b56c:	4b0a      	ldr	r3, [pc, #40]	@ (800b598 <prvResetNextTaskUnblockTime+0x3c>)
 800b56e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b574:	e008      	b.n	800b588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b576:	4b07      	ldr	r3, [pc, #28]	@ (800b594 <prvResetNextTaskUnblockTime+0x38>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	4a04      	ldr	r2, [pc, #16]	@ (800b598 <prvResetNextTaskUnblockTime+0x3c>)
 800b586:	6013      	str	r3, [r2, #0]
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	20009260 	.word	0x20009260
 800b598:	200092c8 	.word	0x200092c8

0800b59c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d0 <xTaskGetSchedulerState+0x34>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d102      	bne.n	800b5b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	e008      	b.n	800b5c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b0:	4b08      	ldr	r3, [pc, #32]	@ (800b5d4 <xTaskGetSchedulerState+0x38>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5b8:	2302      	movs	r3, #2
 800b5ba:	607b      	str	r3, [r7, #4]
 800b5bc:	e001      	b.n	800b5c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5c2:	687b      	ldr	r3, [r7, #4]
	}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	200092b4 	.word	0x200092b4
 800b5d4:	200092d0 	.word	0x200092d0

0800b5d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d058      	beq.n	800b6a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b6ac <xTaskPriorityDisinherit+0xd4>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	693a      	ldr	r2, [r7, #16]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d00b      	beq.n	800b610 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	60fb      	str	r3, [r7, #12]
}
 800b60a:	bf00      	nop
 800b60c:	bf00      	nop
 800b60e:	e7fd      	b.n	800b60c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10b      	bne.n	800b630 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61c:	f383 8811 	msr	BASEPRI, r3
 800b620:	f3bf 8f6f 	isb	sy
 800b624:	f3bf 8f4f 	dsb	sy
 800b628:	60bb      	str	r3, [r7, #8]
}
 800b62a:	bf00      	nop
 800b62c:	bf00      	nop
 800b62e:	e7fd      	b.n	800b62c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b634:	1e5a      	subs	r2, r3, #1
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b642:	429a      	cmp	r2, r3
 800b644:	d02c      	beq.n	800b6a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d128      	bne.n	800b6a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fc2c 	bl	8009eb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b664:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b670:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b0 <xTaskPriorityDisinherit+0xd8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	429a      	cmp	r2, r3
 800b676:	d903      	bls.n	800b680 <xTaskPriorityDisinherit+0xa8>
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b67c:	4a0c      	ldr	r2, [pc, #48]	@ (800b6b0 <xTaskPriorityDisinherit+0xd8>)
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4a09      	ldr	r2, [pc, #36]	@ (800b6b4 <xTaskPriorityDisinherit+0xdc>)
 800b68e:	441a      	add	r2, r3
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	3304      	adds	r3, #4
 800b694:	4619      	mov	r1, r3
 800b696:	4610      	mov	r0, r2
 800b698:	f7fe fbad 	bl	8009df6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b69c:	2301      	movs	r3, #1
 800b69e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6a0:	697b      	ldr	r3, [r7, #20]
	}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3718      	adds	r7, #24
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20008dd4 	.word	0x20008dd4
 800b6b0:	200092b0 	.word	0x200092b0
 800b6b4:	20008dd8 	.word	0x20008dd8

0800b6b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6c2:	4b21      	ldr	r3, [pc, #132]	@ (800b748 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6c8:	4b20      	ldr	r3, [pc, #128]	@ (800b74c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fbee 	bl	8009eb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6da:	d10a      	bne.n	800b6f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d007      	beq.n	800b6f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b74c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	3304      	adds	r3, #4
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4819      	ldr	r0, [pc, #100]	@ (800b750 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6ec:	f7fe fb83 	bl	8009df6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6f0:	e026      	b.n	800b740 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6fa:	4b14      	ldr	r3, [pc, #80]	@ (800b74c <prvAddCurrentTaskToDelayedList+0x94>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	429a      	cmp	r2, r3
 800b708:	d209      	bcs.n	800b71e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b70a:	4b12      	ldr	r3, [pc, #72]	@ (800b754 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	4b0f      	ldr	r3, [pc, #60]	@ (800b74c <prvAddCurrentTaskToDelayedList+0x94>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3304      	adds	r3, #4
 800b714:	4619      	mov	r1, r3
 800b716:	4610      	mov	r0, r2
 800b718:	f7fe fb91 	bl	8009e3e <vListInsert>
}
 800b71c:	e010      	b.n	800b740 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b71e:	4b0e      	ldr	r3, [pc, #56]	@ (800b758 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4b0a      	ldr	r3, [pc, #40]	@ (800b74c <prvAddCurrentTaskToDelayedList+0x94>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3304      	adds	r3, #4
 800b728:	4619      	mov	r1, r3
 800b72a:	4610      	mov	r0, r2
 800b72c:	f7fe fb87 	bl	8009e3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b730:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	429a      	cmp	r2, r3
 800b738:	d202      	bcs.n	800b740 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b73a:	4a08      	ldr	r2, [pc, #32]	@ (800b75c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	6013      	str	r3, [r2, #0]
}
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	200092ac 	.word	0x200092ac
 800b74c:	20008dd4 	.word	0x20008dd4
 800b750:	20009294 	.word	0x20009294
 800b754:	20009264 	.word	0x20009264
 800b758:	20009260 	.word	0x20009260
 800b75c:	200092c8 	.word	0x200092c8

0800b760 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08a      	sub	sp, #40	@ 0x28
 800b764:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b766:	2300      	movs	r3, #0
 800b768:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b76a:	f000 fb13 	bl	800bd94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b76e:	4b1d      	ldr	r3, [pc, #116]	@ (800b7e4 <xTimerCreateTimerTask+0x84>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d021      	beq.n	800b7ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b77e:	1d3a      	adds	r2, r7, #4
 800b780:	f107 0108 	add.w	r1, r7, #8
 800b784:	f107 030c 	add.w	r3, r7, #12
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fe faed 	bl	8009d68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	9202      	str	r2, [sp, #8]
 800b796:	9301      	str	r3, [sp, #4]
 800b798:	2302      	movs	r3, #2
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	2300      	movs	r3, #0
 800b79e:	460a      	mov	r2, r1
 800b7a0:	4911      	ldr	r1, [pc, #68]	@ (800b7e8 <xTimerCreateTimerTask+0x88>)
 800b7a2:	4812      	ldr	r0, [pc, #72]	@ (800b7ec <xTimerCreateTimerTask+0x8c>)
 800b7a4:	f7ff f8a8 	bl	800a8f8 <xTaskCreateStatic>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	4a11      	ldr	r2, [pc, #68]	@ (800b7f0 <xTimerCreateTimerTask+0x90>)
 800b7ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b7ae:	4b10      	ldr	r3, [pc, #64]	@ (800b7f0 <xTimerCreateTimerTask+0x90>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10b      	bne.n	800b7d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c4:	f383 8811 	msr	BASEPRI, r3
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	613b      	str	r3, [r7, #16]
}
 800b7d2:	bf00      	nop
 800b7d4:	bf00      	nop
 800b7d6:	e7fd      	b.n	800b7d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7d8:	697b      	ldr	r3, [r7, #20]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20009304 	.word	0x20009304
 800b7e8:	0801d3bc 	.word	0x0801d3bc
 800b7ec:	0800b92d 	.word	0x0800b92d
 800b7f0:	20009308 	.word	0x20009308

0800b7f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08a      	sub	sp, #40	@ 0x28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	607a      	str	r2, [r7, #4]
 800b800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b802:	2300      	movs	r3, #0
 800b804:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10b      	bne.n	800b824 <xTimerGenericCommand+0x30>
	__asm volatile
 800b80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b810:	f383 8811 	msr	BASEPRI, r3
 800b814:	f3bf 8f6f 	isb	sy
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	623b      	str	r3, [r7, #32]
}
 800b81e:	bf00      	nop
 800b820:	bf00      	nop
 800b822:	e7fd      	b.n	800b820 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b824:	4b19      	ldr	r3, [pc, #100]	@ (800b88c <xTimerGenericCommand+0x98>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d02a      	beq.n	800b882 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2b05      	cmp	r3, #5
 800b83c:	dc18      	bgt.n	800b870 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b83e:	f7ff fead 	bl	800b59c <xTaskGetSchedulerState>
 800b842:	4603      	mov	r3, r0
 800b844:	2b02      	cmp	r3, #2
 800b846:	d109      	bne.n	800b85c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b848:	4b10      	ldr	r3, [pc, #64]	@ (800b88c <xTimerGenericCommand+0x98>)
 800b84a:	6818      	ldr	r0, [r3, #0]
 800b84c:	f107 0110 	add.w	r1, r7, #16
 800b850:	2300      	movs	r3, #0
 800b852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b854:	f7fe fc60 	bl	800a118 <xQueueGenericSend>
 800b858:	6278      	str	r0, [r7, #36]	@ 0x24
 800b85a:	e012      	b.n	800b882 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b85c:	4b0b      	ldr	r3, [pc, #44]	@ (800b88c <xTimerGenericCommand+0x98>)
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	f107 0110 	add.w	r1, r7, #16
 800b864:	2300      	movs	r3, #0
 800b866:	2200      	movs	r2, #0
 800b868:	f7fe fc56 	bl	800a118 <xQueueGenericSend>
 800b86c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b86e:	e008      	b.n	800b882 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b870:	4b06      	ldr	r3, [pc, #24]	@ (800b88c <xTimerGenericCommand+0x98>)
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	f107 0110 	add.w	r1, r7, #16
 800b878:	2300      	movs	r3, #0
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	f7fe fd4e 	bl	800a31c <xQueueGenericSendFromISR>
 800b880:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b884:	4618      	mov	r0, r3
 800b886:	3728      	adds	r7, #40	@ 0x28
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20009304 	.word	0x20009304

0800b890 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af02      	add	r7, sp, #8
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89a:	4b23      	ldr	r3, [pc, #140]	@ (800b928 <prvProcessExpiredTimer+0x98>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	3304      	adds	r3, #4
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fb01 	bl	8009eb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8b4:	f003 0304 	and.w	r3, r3, #4
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d023      	beq.n	800b904 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	699a      	ldr	r2, [r3, #24]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	18d1      	adds	r1, r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	683a      	ldr	r2, [r7, #0]
 800b8c8:	6978      	ldr	r0, [r7, #20]
 800b8ca:	f000 f8d5 	bl	800ba78 <prvInsertTimerInActiveList>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d020      	beq.n	800b916 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	6978      	ldr	r0, [r7, #20]
 800b8e0:	f7ff ff88 	bl	800b7f4 <xTimerGenericCommand>
 800b8e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d114      	bne.n	800b916 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	60fb      	str	r3, [r7, #12]
}
 800b8fe:	bf00      	nop
 800b900:	bf00      	nop
 800b902:	e7fd      	b.n	800b900 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b90a:	f023 0301 	bic.w	r3, r3, #1
 800b90e:	b2da      	uxtb	r2, r3
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	6978      	ldr	r0, [r7, #20]
 800b91c:	4798      	blx	r3
}
 800b91e:	bf00      	nop
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	200092fc 	.word	0x200092fc

0800b92c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b934:	f107 0308 	add.w	r3, r7, #8
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 f859 	bl	800b9f0 <prvGetNextExpireTime>
 800b93e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	4619      	mov	r1, r3
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f805 	bl	800b954 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b94a:	f000 f8d7 	bl	800bafc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b94e:	bf00      	nop
 800b950:	e7f0      	b.n	800b934 <prvTimerTask+0x8>
	...

0800b954 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b95e:	f7ff fa0f 	bl	800ad80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b962:	f107 0308 	add.w	r3, r7, #8
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f866 	bl	800ba38 <prvSampleTimeNow>
 800b96c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d130      	bne.n	800b9d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10a      	bne.n	800b990 <prvProcessTimerOrBlockTask+0x3c>
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d806      	bhi.n	800b990 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b982:	f7ff fa0b 	bl	800ad9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b986:	68f9      	ldr	r1, [r7, #12]
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff ff81 	bl	800b890 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b98e:	e024      	b.n	800b9da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d008      	beq.n	800b9a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b996:	4b13      	ldr	r3, [pc, #76]	@ (800b9e4 <prvProcessTimerOrBlockTask+0x90>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <prvProcessTimerOrBlockTask+0x50>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e000      	b.n	800b9a6 <prvProcessTimerOrBlockTask+0x52>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b9a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e8 <prvProcessTimerOrBlockTask+0x94>)
 800b9aa:	6818      	ldr	r0, [r3, #0]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	f7fe ff6b 	bl	800a890 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b9ba:	f7ff f9ef 	bl	800ad9c <xTaskResumeAll>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b9c4:	4b09      	ldr	r3, [pc, #36]	@ (800b9ec <prvProcessTimerOrBlockTask+0x98>)
 800b9c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9ca:	601a      	str	r2, [r3, #0]
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	f3bf 8f6f 	isb	sy
}
 800b9d4:	e001      	b.n	800b9da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9d6:	f7ff f9e1 	bl	800ad9c <xTaskResumeAll>
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20009300 	.word	0x20009300
 800b9e8:	20009304 	.word	0x20009304
 800b9ec:	e000ed04 	.word	0xe000ed04

0800b9f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b085      	sub	sp, #20
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9f8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba34 <prvGetNextExpireTime+0x44>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <prvGetNextExpireTime+0x16>
 800ba02:	2201      	movs	r2, #1
 800ba04:	e000      	b.n	800ba08 <prvGetNextExpireTime+0x18>
 800ba06:	2200      	movs	r2, #0
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d105      	bne.n	800ba20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba14:	4b07      	ldr	r3, [pc, #28]	@ (800ba34 <prvGetNextExpireTime+0x44>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60fb      	str	r3, [r7, #12]
 800ba1e:	e001      	b.n	800ba24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba24:	68fb      	ldr	r3, [r7, #12]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3714      	adds	r7, #20
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	200092fc 	.word	0x200092fc

0800ba38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba40:	f7ff fa4a 	bl	800aed8 <xTaskGetTickCount>
 800ba44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba46:	4b0b      	ldr	r3, [pc, #44]	@ (800ba74 <prvSampleTimeNow+0x3c>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	68fa      	ldr	r2, [r7, #12]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d205      	bcs.n	800ba5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba50:	f000 f93a 	bl	800bcc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	e002      	b.n	800ba62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba62:	4a04      	ldr	r2, [pc, #16]	@ (800ba74 <prvSampleTimeNow+0x3c>)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba68:	68fb      	ldr	r3, [r7, #12]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	2000930c 	.word	0x2000930c

0800ba78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
 800ba84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d812      	bhi.n	800bac4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	699b      	ldr	r3, [r3, #24]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d302      	bcc.n	800bab2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800baac:	2301      	movs	r3, #1
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	e01b      	b.n	800baea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bab2:	4b10      	ldr	r3, [pc, #64]	@ (800baf4 <prvInsertTimerInActiveList+0x7c>)
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3304      	adds	r3, #4
 800baba:	4619      	mov	r1, r3
 800babc:	4610      	mov	r0, r2
 800babe:	f7fe f9be 	bl	8009e3e <vListInsert>
 800bac2:	e012      	b.n	800baea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d206      	bcs.n	800bada <prvInsertTimerInActiveList+0x62>
 800bacc:	68ba      	ldr	r2, [r7, #8]
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d302      	bcc.n	800bada <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bad4:	2301      	movs	r3, #1
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	e007      	b.n	800baea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bada:	4b07      	ldr	r3, [pc, #28]	@ (800baf8 <prvInsertTimerInActiveList+0x80>)
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3304      	adds	r3, #4
 800bae2:	4619      	mov	r1, r3
 800bae4:	4610      	mov	r0, r2
 800bae6:	f7fe f9aa 	bl	8009e3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800baea:	697b      	ldr	r3, [r7, #20]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	20009300 	.word	0x20009300
 800baf8:	200092fc 	.word	0x200092fc

0800bafc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08e      	sub	sp, #56	@ 0x38
 800bb00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb02:	e0ce      	b.n	800bca2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	da19      	bge.n	800bb3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb0a:	1d3b      	adds	r3, r7, #4
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10b      	bne.n	800bb2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	61fb      	str	r3, [r7, #28]
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	e7fd      	b.n	800bb2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb34:	6850      	ldr	r0, [r2, #4]
 800bb36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb38:	6892      	ldr	r2, [r2, #8]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f2c0 80ae 	blt.w	800bca2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4c:	695b      	ldr	r3, [r3, #20]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d004      	beq.n	800bb5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	3304      	adds	r3, #4
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe f9aa 	bl	8009eb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7ff ff6a 	bl	800ba38 <prvSampleTimeNow>
 800bb64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b09      	cmp	r3, #9
 800bb6a:	f200 8097 	bhi.w	800bc9c <prvProcessReceivedCommands+0x1a0>
 800bb6e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb74 <prvProcessReceivedCommands+0x78>)
 800bb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb74:	0800bb9d 	.word	0x0800bb9d
 800bb78:	0800bb9d 	.word	0x0800bb9d
 800bb7c:	0800bb9d 	.word	0x0800bb9d
 800bb80:	0800bc13 	.word	0x0800bc13
 800bb84:	0800bc27 	.word	0x0800bc27
 800bb88:	0800bc73 	.word	0x0800bc73
 800bb8c:	0800bb9d 	.word	0x0800bb9d
 800bb90:	0800bb9d 	.word	0x0800bb9d
 800bb94:	0800bc13 	.word	0x0800bc13
 800bb98:	0800bc27 	.word	0x0800bc27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bba2:	f043 0301 	orr.w	r3, r3, #1
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	18d1      	adds	r1, r2, r3
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbbc:	f7ff ff5c 	bl	800ba78 <prvInsertTimerInActiveList>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d06c      	beq.n	800bca0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d061      	beq.n	800bca0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	441a      	add	r2, r3
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	2100      	movs	r1, #0
 800bbec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbee:	f7ff fe01 	bl	800b7f4 <xTimerGenericCommand>
 800bbf2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d152      	bne.n	800bca0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bbfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfe:	f383 8811 	msr	BASEPRI, r3
 800bc02:	f3bf 8f6f 	isb	sy
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	61bb      	str	r3, [r7, #24]
}
 800bc0c:	bf00      	nop
 800bc0e:	bf00      	nop
 800bc10:	e7fd      	b.n	800bc0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc18:	f023 0301 	bic.w	r3, r3, #1
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc24:	e03d      	b.n	800bca2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc2c:	f043 0301 	orr.w	r3, r3, #1
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10b      	bne.n	800bc5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	617b      	str	r3, [r7, #20]
}
 800bc58:	bf00      	nop
 800bc5a:	bf00      	nop
 800bc5c:	e7fd      	b.n	800bc5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc60:	699a      	ldr	r2, [r3, #24]
 800bc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc64:	18d1      	adds	r1, r2, r3
 800bc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc6c:	f7ff ff04 	bl	800ba78 <prvInsertTimerInActiveList>
					break;
 800bc70:	e017      	b.n	800bca2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc78:	f003 0302 	and.w	r3, r3, #2
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d103      	bne.n	800bc88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bc80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc82:	f000 fbe9 	bl	800c458 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc86:	e00c      	b.n	800bca2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc8e:	f023 0301 	bic.w	r3, r3, #1
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc9a:	e002      	b.n	800bca2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bc9c:	bf00      	nop
 800bc9e:	e000      	b.n	800bca2 <prvProcessReceivedCommands+0x1a6>
					break;
 800bca0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bca2:	4b08      	ldr	r3, [pc, #32]	@ (800bcc4 <prvProcessReceivedCommands+0x1c8>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	1d39      	adds	r1, r7, #4
 800bca8:	2200      	movs	r2, #0
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7fe fbd4 	bl	800a458 <xQueueReceive>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f47f af26 	bne.w	800bb04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	3730      	adds	r7, #48	@ 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20009304 	.word	0x20009304

0800bcc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b088      	sub	sp, #32
 800bccc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcce:	e049      	b.n	800bd64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcd0:	4b2e      	ldr	r3, [pc, #184]	@ (800bd8c <prvSwitchTimerLists+0xc4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcda:	4b2c      	ldr	r3, [pc, #176]	@ (800bd8c <prvSwitchTimerLists+0xc4>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe f8e1 	bl	8009eb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcfc:	f003 0304 	and.w	r3, r3, #4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d02f      	beq.n	800bd64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd0e:	68ba      	ldr	r2, [r7, #8]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d90e      	bls.n	800bd34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd22:	4b1a      	ldr	r3, [pc, #104]	@ (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f7fe f886 	bl	8009e3e <vListInsert>
 800bd32:	e017      	b.n	800bd64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd34:	2300      	movs	r3, #0
 800bd36:	9300      	str	r3, [sp, #0]
 800bd38:	2300      	movs	r3, #0
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7ff fd58 	bl	800b7f4 <xTimerGenericCommand>
 800bd44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10b      	bne.n	800bd64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	603b      	str	r3, [r7, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	e7fd      	b.n	800bd60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd64:	4b09      	ldr	r3, [pc, #36]	@ (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1b0      	bne.n	800bcd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd6e:	4b07      	ldr	r3, [pc, #28]	@ (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd74:	4b06      	ldr	r3, [pc, #24]	@ (800bd90 <prvSwitchTimerLists+0xc8>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a04      	ldr	r2, [pc, #16]	@ (800bd8c <prvSwitchTimerLists+0xc4>)
 800bd7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd7c:	4a04      	ldr	r2, [pc, #16]	@ (800bd90 <prvSwitchTimerLists+0xc8>)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	6013      	str	r3, [r2, #0]
}
 800bd82:	bf00      	nop
 800bd84:	3718      	adds	r7, #24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	200092fc 	.word	0x200092fc
 800bd90:	20009300 	.word	0x20009300

0800bd94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd9a:	f000 f96d 	bl	800c078 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd9e:	4b15      	ldr	r3, [pc, #84]	@ (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d120      	bne.n	800bde8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bda6:	4814      	ldr	r0, [pc, #80]	@ (800bdf8 <prvCheckForValidListAndQueue+0x64>)
 800bda8:	f7fd fff8 	bl	8009d9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bdac:	4813      	ldr	r0, [pc, #76]	@ (800bdfc <prvCheckForValidListAndQueue+0x68>)
 800bdae:	f7fd fff5 	bl	8009d9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bdb2:	4b13      	ldr	r3, [pc, #76]	@ (800be00 <prvCheckForValidListAndQueue+0x6c>)
 800bdb4:	4a10      	ldr	r2, [pc, #64]	@ (800bdf8 <prvCheckForValidListAndQueue+0x64>)
 800bdb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bdb8:	4b12      	ldr	r3, [pc, #72]	@ (800be04 <prvCheckForValidListAndQueue+0x70>)
 800bdba:	4a10      	ldr	r2, [pc, #64]	@ (800bdfc <prvCheckForValidListAndQueue+0x68>)
 800bdbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	9300      	str	r3, [sp, #0]
 800bdc2:	4b11      	ldr	r3, [pc, #68]	@ (800be08 <prvCheckForValidListAndQueue+0x74>)
 800bdc4:	4a11      	ldr	r2, [pc, #68]	@ (800be0c <prvCheckForValidListAndQueue+0x78>)
 800bdc6:	2110      	movs	r1, #16
 800bdc8:	200a      	movs	r0, #10
 800bdca:	f7fe f905 	bl	8009fd8 <xQueueGenericCreateStatic>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	4a08      	ldr	r2, [pc, #32]	@ (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bdd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bdd4:	4b07      	ldr	r3, [pc, #28]	@ (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d005      	beq.n	800bde8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bddc:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <prvCheckForValidListAndQueue+0x60>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	490b      	ldr	r1, [pc, #44]	@ (800be10 <prvCheckForValidListAndQueue+0x7c>)
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fd2a 	bl	800a83c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bde8:	f000 f978 	bl	800c0dc <vPortExitCritical>
}
 800bdec:	bf00      	nop
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20009304 	.word	0x20009304
 800bdf8:	200092d4 	.word	0x200092d4
 800bdfc:	200092e8 	.word	0x200092e8
 800be00:	200092fc 	.word	0x200092fc
 800be04:	20009300 	.word	0x20009300
 800be08:	200093b0 	.word	0x200093b0
 800be0c:	20009310 	.word	0x20009310
 800be10:	0801d3c4 	.word	0x0801d3c4

0800be14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3b04      	subs	r3, #4
 800be24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3b04      	subs	r3, #4
 800be32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	f023 0201 	bic.w	r2, r3, #1
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3b04      	subs	r3, #4
 800be42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be44:	4a0c      	ldr	r2, [pc, #48]	@ (800be78 <pxPortInitialiseStack+0x64>)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3b14      	subs	r3, #20
 800be4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	3b04      	subs	r3, #4
 800be5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f06f 0202 	mvn.w	r2, #2
 800be62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3b20      	subs	r3, #32
 800be68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be6a:	68fb      	ldr	r3, [r7, #12]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	0800be7d 	.word	0x0800be7d

0800be7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be82:	2300      	movs	r3, #0
 800be84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be86:	4b13      	ldr	r3, [pc, #76]	@ (800bed4 <prvTaskExitError+0x58>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be8e:	d00b      	beq.n	800bea8 <prvTaskExitError+0x2c>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	60fb      	str	r3, [r7, #12]
}
 800bea2:	bf00      	nop
 800bea4:	bf00      	nop
 800bea6:	e7fd      	b.n	800bea4 <prvTaskExitError+0x28>
	__asm volatile
 800bea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beac:	f383 8811 	msr	BASEPRI, r3
 800beb0:	f3bf 8f6f 	isb	sy
 800beb4:	f3bf 8f4f 	dsb	sy
 800beb8:	60bb      	str	r3, [r7, #8]
}
 800beba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bebc:	bf00      	nop
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0fc      	beq.n	800bebe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bec4:	bf00      	nop
 800bec6:	bf00      	nop
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	20000014 	.word	0x20000014
	...

0800bee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bee0:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <pxCurrentTCBConst2>)
 800bee2:	6819      	ldr	r1, [r3, #0]
 800bee4:	6808      	ldr	r0, [r1, #0]
 800bee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	f380 8809 	msr	PSP, r0
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	4770      	bx	lr
 800befc:	f3af 8000 	nop.w

0800bf00 <pxCurrentTCBConst2>:
 800bf00:	20008dd4 	.word	0x20008dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf04:	bf00      	nop
 800bf06:	bf00      	nop

0800bf08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf08:	4808      	ldr	r0, [pc, #32]	@ (800bf2c <prvPortStartFirstTask+0x24>)
 800bf0a:	6800      	ldr	r0, [r0, #0]
 800bf0c:	6800      	ldr	r0, [r0, #0]
 800bf0e:	f380 8808 	msr	MSP, r0
 800bf12:	f04f 0000 	mov.w	r0, #0
 800bf16:	f380 8814 	msr	CONTROL, r0
 800bf1a:	b662      	cpsie	i
 800bf1c:	b661      	cpsie	f
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	df00      	svc	0
 800bf28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf2a:	bf00      	nop
 800bf2c:	e000ed08 	.word	0xe000ed08

0800bf30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf36:	4b47      	ldr	r3, [pc, #284]	@ (800c054 <xPortStartScheduler+0x124>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a47      	ldr	r2, [pc, #284]	@ (800c058 <xPortStartScheduler+0x128>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d10b      	bne.n	800bf58 <xPortStartScheduler+0x28>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	60fb      	str	r3, [r7, #12]
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	e7fd      	b.n	800bf54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf58:	4b3e      	ldr	r3, [pc, #248]	@ (800c054 <xPortStartScheduler+0x124>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a3f      	ldr	r2, [pc, #252]	@ (800c05c <xPortStartScheduler+0x12c>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d10b      	bne.n	800bf7a <xPortStartScheduler+0x4a>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	613b      	str	r3, [r7, #16]
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf7a:	4b39      	ldr	r3, [pc, #228]	@ (800c060 <xPortStartScheduler+0x130>)
 800bf7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	22ff      	movs	r2, #255	@ 0xff
 800bf8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	4b31      	ldr	r3, [pc, #196]	@ (800c064 <xPortStartScheduler+0x134>)
 800bfa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfa2:	4b31      	ldr	r3, [pc, #196]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfa4:	2207      	movs	r2, #7
 800bfa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfa8:	e009      	b.n	800bfbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bfaa:	4b2f      	ldr	r3, [pc, #188]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4a2d      	ldr	r2, [pc, #180]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bfb4:	78fb      	ldrb	r3, [r7, #3]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bfbe:	78fb      	ldrb	r3, [r7, #3]
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfc6:	2b80      	cmp	r3, #128	@ 0x80
 800bfc8:	d0ef      	beq.n	800bfaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfca:	4b27      	ldr	r3, [pc, #156]	@ (800c068 <xPortStartScheduler+0x138>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f1c3 0307 	rsb	r3, r3, #7
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	d00b      	beq.n	800bfee <xPortStartScheduler+0xbe>
	__asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	60bb      	str	r3, [r7, #8]
}
 800bfe8:	bf00      	nop
 800bfea:	bf00      	nop
 800bfec:	e7fd      	b.n	800bfea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfee:	4b1e      	ldr	r3, [pc, #120]	@ (800c068 <xPortStartScheduler+0x138>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	021b      	lsls	r3, r3, #8
 800bff4:	4a1c      	ldr	r2, [pc, #112]	@ (800c068 <xPortStartScheduler+0x138>)
 800bff6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bff8:	4b1b      	ldr	r3, [pc, #108]	@ (800c068 <xPortStartScheduler+0x138>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c000:	4a19      	ldr	r2, [pc, #100]	@ (800c068 <xPortStartScheduler+0x138>)
 800c002:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	b2da      	uxtb	r2, r3
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c00c:	4b17      	ldr	r3, [pc, #92]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a16      	ldr	r2, [pc, #88]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c012:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c016:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c018:	4b14      	ldr	r3, [pc, #80]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a13      	ldr	r2, [pc, #76]	@ (800c06c <xPortStartScheduler+0x13c>)
 800c01e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c022:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c024:	f000 f8da 	bl	800c1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c028:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <xPortStartScheduler+0x140>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c02e:	f000 f8f9 	bl	800c224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c032:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <xPortStartScheduler+0x144>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a0f      	ldr	r2, [pc, #60]	@ (800c074 <xPortStartScheduler+0x144>)
 800c038:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c03c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c03e:	f7ff ff63 	bl	800bf08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c042:	f7ff f813 	bl	800b06c <vTaskSwitchContext>
	prvTaskExitError();
 800c046:	f7ff ff19 	bl	800be7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	e000ed00 	.word	0xe000ed00
 800c058:	410fc271 	.word	0x410fc271
 800c05c:	410fc270 	.word	0x410fc270
 800c060:	e000e400 	.word	0xe000e400
 800c064:	20009400 	.word	0x20009400
 800c068:	20009404 	.word	0x20009404
 800c06c:	e000ed20 	.word	0xe000ed20
 800c070:	20000014 	.word	0x20000014
 800c074:	e000ef34 	.word	0xe000ef34

0800c078 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
}
 800c090:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c092:	4b10      	ldr	r3, [pc, #64]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	3301      	adds	r3, #1
 800c098:	4a0e      	ldr	r2, [pc, #56]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c09a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c09c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d4 <vPortEnterCritical+0x5c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d110      	bne.n	800c0c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d8 <vPortEnterCritical+0x60>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	603b      	str	r3, [r7, #0]
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	e7fd      	b.n	800c0c2 <vPortEnterCritical+0x4a>
	}
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	20000014 	.word	0x20000014
 800c0d8:	e000ed04 	.word	0xe000ed04

0800c0dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0e2:	4b12      	ldr	r3, [pc, #72]	@ (800c12c <vPortExitCritical+0x50>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d10b      	bne.n	800c102 <vPortExitCritical+0x26>
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	607b      	str	r3, [r7, #4]
}
 800c0fc:	bf00      	nop
 800c0fe:	bf00      	nop
 800c100:	e7fd      	b.n	800c0fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c102:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <vPortExitCritical+0x50>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3b01      	subs	r3, #1
 800c108:	4a08      	ldr	r2, [pc, #32]	@ (800c12c <vPortExitCritical+0x50>)
 800c10a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c10c:	4b07      	ldr	r3, [pc, #28]	@ (800c12c <vPortExitCritical+0x50>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d105      	bne.n	800c120 <vPortExitCritical+0x44>
 800c114:	2300      	movs	r3, #0
 800c116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f383 8811 	msr	BASEPRI, r3
}
 800c11e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	20000014 	.word	0x20000014

0800c130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c130:	f3ef 8009 	mrs	r0, PSP
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <pxCurrentTCBConst>)
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	f01e 0f10 	tst.w	lr, #16
 800c140:	bf08      	it	eq
 800c142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14a:	6010      	str	r0, [r2, #0]
 800c14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c150:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c154:	f380 8811 	msr	BASEPRI, r0
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f7fe ff84 	bl	800b06c <vTaskSwitchContext>
 800c164:	f04f 0000 	mov.w	r0, #0
 800c168:	f380 8811 	msr	BASEPRI, r0
 800c16c:	bc09      	pop	{r0, r3}
 800c16e:	6819      	ldr	r1, [r3, #0]
 800c170:	6808      	ldr	r0, [r1, #0]
 800c172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c176:	f01e 0f10 	tst.w	lr, #16
 800c17a:	bf08      	it	eq
 800c17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c180:	f380 8809 	msr	PSP, r0
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst>:
 800c190:	20008dd4 	.word	0x20008dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	607b      	str	r3, [r7, #4]
}
 800c1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c1b2:	f7fe fea1 	bl	800aef8 <xTaskIncrementTick>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d003      	beq.n	800c1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c1bc:	4b06      	ldr	r3, [pc, #24]	@ (800c1d8 <xPortSysTickHandler+0x40>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	f383 8811 	msr	BASEPRI, r3
}
 800c1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c214 <vPortSetupTimerInterrupt+0x38>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c218 <vPortSetupTimerInterrupt+0x3c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c21c <vPortSetupTimerInterrupt+0x40>)
 800c1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f6:	099b      	lsrs	r3, r3, #6
 800c1f8:	4a09      	ldr	r2, [pc, #36]	@ (800c220 <vPortSetupTimerInterrupt+0x44>)
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1fe:	4b04      	ldr	r3, [pc, #16]	@ (800c210 <vPortSetupTimerInterrupt+0x34>)
 800c200:	2207      	movs	r2, #7
 800c202:	601a      	str	r2, [r3, #0]
}
 800c204:	bf00      	nop
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	e000e010 	.word	0xe000e010
 800c214:	e000e018 	.word	0xe000e018
 800c218:	20000008 	.word	0x20000008
 800c21c:	10624dd3 	.word	0x10624dd3
 800c220:	e000e014 	.word	0xe000e014

0800c224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c224:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c234 <vPortEnableVFP+0x10>
 800c228:	6801      	ldr	r1, [r0, #0]
 800c22a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c22e:	6001      	str	r1, [r0, #0]
 800c230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c232:	bf00      	nop
 800c234:	e000ed88 	.word	0xe000ed88

0800c238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c23e:	f3ef 8305 	mrs	r3, IPSR
 800c242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b0f      	cmp	r3, #15
 800c248:	d915      	bls.n	800c276 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c24a:	4a18      	ldr	r2, [pc, #96]	@ (800c2ac <vPortValidateInterruptPriority+0x74>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	4413      	add	r3, r2
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c254:	4b16      	ldr	r3, [pc, #88]	@ (800c2b0 <vPortValidateInterruptPriority+0x78>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	7afa      	ldrb	r2, [r7, #11]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d20b      	bcs.n	800c276 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c262:	f383 8811 	msr	BASEPRI, r3
 800c266:	f3bf 8f6f 	isb	sy
 800c26a:	f3bf 8f4f 	dsb	sy
 800c26e:	607b      	str	r3, [r7, #4]
}
 800c270:	bf00      	nop
 800c272:	bf00      	nop
 800c274:	e7fd      	b.n	800c272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c276:	4b0f      	ldr	r3, [pc, #60]	@ (800c2b4 <vPortValidateInterruptPriority+0x7c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c27e:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b8 <vPortValidateInterruptPriority+0x80>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d90b      	bls.n	800c29e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	603b      	str	r3, [r7, #0]
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	e7fd      	b.n	800c29a <vPortValidateInterruptPriority+0x62>
	}
 800c29e:	bf00      	nop
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	e000e3f0 	.word	0xe000e3f0
 800c2b0:	20009400 	.word	0x20009400
 800c2b4:	e000ed0c 	.word	0xe000ed0c
 800c2b8:	20009404 	.word	0x20009404

0800c2bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b08a      	sub	sp, #40	@ 0x28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2c8:	f7fe fd5a 	bl	800ad80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800c440 <pvPortMalloc+0x184>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2d4:	f000 f924 	bl	800c520 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800c444 <pvPortMalloc+0x188>)
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4013      	ands	r3, r2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 8095 	bne.w	800c410 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01e      	beq.n	800c32a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c2ec:	2208      	movs	r2, #8
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d015      	beq.n	800c32a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f023 0307 	bic.w	r3, r3, #7
 800c304:	3308      	adds	r3, #8
 800c306:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00b      	beq.n	800c32a <pvPortMalloc+0x6e>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c316:	f383 8811 	msr	BASEPRI, r3
 800c31a:	f3bf 8f6f 	isb	sy
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	617b      	str	r3, [r7, #20]
}
 800c324:	bf00      	nop
 800c326:	bf00      	nop
 800c328:	e7fd      	b.n	800c326 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d06f      	beq.n	800c410 <pvPortMalloc+0x154>
 800c330:	4b45      	ldr	r3, [pc, #276]	@ (800c448 <pvPortMalloc+0x18c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d86a      	bhi.n	800c410 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c33a:	4b44      	ldr	r3, [pc, #272]	@ (800c44c <pvPortMalloc+0x190>)
 800c33c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c33e:	4b43      	ldr	r3, [pc, #268]	@ (800c44c <pvPortMalloc+0x190>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c344:	e004      	b.n	800c350 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	429a      	cmp	r2, r3
 800c358:	d903      	bls.n	800c362 <pvPortMalloc+0xa6>
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1f1      	bne.n	800c346 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c362:	4b37      	ldr	r3, [pc, #220]	@ (800c440 <pvPortMalloc+0x184>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c368:	429a      	cmp	r2, r3
 800c36a:	d051      	beq.n	800c410 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2208      	movs	r2, #8
 800c372:	4413      	add	r3, r2
 800c374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	1ad2      	subs	r2, r2, r3
 800c386:	2308      	movs	r3, #8
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d920      	bls.n	800c3d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c38e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4413      	add	r3, r2
 800c394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	f003 0307 	and.w	r3, r3, #7
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00b      	beq.n	800c3b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3a4:	f383 8811 	msr	BASEPRI, r3
 800c3a8:	f3bf 8f6f 	isb	sy
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	613b      	str	r3, [r7, #16]
}
 800c3b2:	bf00      	nop
 800c3b4:	bf00      	nop
 800c3b6:	e7fd      	b.n	800c3b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3ca:	69b8      	ldr	r0, [r7, #24]
 800c3cc:	f000 f90a 	bl	800c5e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	4a1b      	ldr	r2, [pc, #108]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3de:	4b1a      	ldr	r3, [pc, #104]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c450 <pvPortMalloc+0x194>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d203      	bcs.n	800c3f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3ea:	4b17      	ldr	r3, [pc, #92]	@ (800c448 <pvPortMalloc+0x18c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a18      	ldr	r2, [pc, #96]	@ (800c450 <pvPortMalloc+0x194>)
 800c3f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	4b13      	ldr	r3, [pc, #76]	@ (800c444 <pvPortMalloc+0x188>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	431a      	orrs	r2, r3
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c402:	2200      	movs	r2, #0
 800c404:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c406:	4b13      	ldr	r3, [pc, #76]	@ (800c454 <pvPortMalloc+0x198>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	3301      	adds	r3, #1
 800c40c:	4a11      	ldr	r2, [pc, #68]	@ (800c454 <pvPortMalloc+0x198>)
 800c40e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c410:	f7fe fcc4 	bl	800ad9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	f003 0307 	and.w	r3, r3, #7
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00b      	beq.n	800c436 <pvPortMalloc+0x17a>
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	60fb      	str	r3, [r7, #12]
}
 800c430:	bf00      	nop
 800c432:	bf00      	nop
 800c434:	e7fd      	b.n	800c432 <pvPortMalloc+0x176>
	return pvReturn;
 800c436:	69fb      	ldr	r3, [r7, #28]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3728      	adds	r7, #40	@ 0x28
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	2000d010 	.word	0x2000d010
 800c444:	2000d024 	.word	0x2000d024
 800c448:	2000d014 	.word	0x2000d014
 800c44c:	2000d008 	.word	0x2000d008
 800c450:	2000d018 	.word	0x2000d018
 800c454:	2000d01c 	.word	0x2000d01c

0800c458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d04f      	beq.n	800c50a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c46a:	2308      	movs	r3, #8
 800c46c:	425b      	negs	r3, r3
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	4413      	add	r3, r2
 800c472:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	4b25      	ldr	r3, [pc, #148]	@ (800c514 <vPortFree+0xbc>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4013      	ands	r3, r2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10b      	bne.n	800c49e <vPortFree+0x46>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	60fb      	str	r3, [r7, #12]
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	e7fd      	b.n	800c49a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00b      	beq.n	800c4be <vPortFree+0x66>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	60bb      	str	r3, [r7, #8]
}
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
 800c4bc:	e7fd      	b.n	800c4ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	685a      	ldr	r2, [r3, #4]
 800c4c2:	4b14      	ldr	r3, [pc, #80]	@ (800c514 <vPortFree+0xbc>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4013      	ands	r3, r2
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01e      	beq.n	800c50a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d11a      	bne.n	800c50a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c514 <vPortFree+0xbc>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	43db      	mvns	r3, r3
 800c4de:	401a      	ands	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4e4:	f7fe fc4c 	bl	800ad80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c518 <vPortFree+0xc0>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	4a09      	ldr	r2, [pc, #36]	@ (800c518 <vPortFree+0xc0>)
 800c4f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4f6:	6938      	ldr	r0, [r7, #16]
 800c4f8:	f000 f874 	bl	800c5e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4fc:	4b07      	ldr	r3, [pc, #28]	@ (800c51c <vPortFree+0xc4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	3301      	adds	r3, #1
 800c502:	4a06      	ldr	r2, [pc, #24]	@ (800c51c <vPortFree+0xc4>)
 800c504:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c506:	f7fe fc49 	bl	800ad9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c50a:	bf00      	nop
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	2000d024 	.word	0x2000d024
 800c518:	2000d014 	.word	0x2000d014
 800c51c:	2000d020 	.word	0x2000d020

0800c520 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c526:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c52a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c52c:	4b27      	ldr	r3, [pc, #156]	@ (800c5cc <prvHeapInit+0xac>)
 800c52e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f003 0307 	and.w	r3, r3, #7
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00c      	beq.n	800c554 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3307      	adds	r3, #7
 800c53e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f023 0307 	bic.w	r3, r3, #7
 800c546:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	4a1f      	ldr	r2, [pc, #124]	@ (800c5cc <prvHeapInit+0xac>)
 800c550:	4413      	add	r3, r2
 800c552:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c558:	4a1d      	ldr	r2, [pc, #116]	@ (800c5d0 <prvHeapInit+0xb0>)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c55e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5d0 <prvHeapInit+0xb0>)
 800c560:	2200      	movs	r2, #0
 800c562:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c56c:	2208      	movs	r2, #8
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1a9b      	subs	r3, r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f023 0307 	bic.w	r3, r3, #7
 800c57a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	4a15      	ldr	r2, [pc, #84]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c580:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c582:	4b14      	ldr	r3, [pc, #80]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2200      	movs	r2, #0
 800c588:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c58a:	4b12      	ldr	r3, [pc, #72]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68fa      	ldr	r2, [r7, #12]
 800c59a:	1ad2      	subs	r2, r2, r3
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d4 <prvHeapInit+0xb4>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c5d8 <prvHeapInit+0xb8>)
 800c5ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	4a09      	ldr	r2, [pc, #36]	@ (800c5dc <prvHeapInit+0xbc>)
 800c5b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5b8:	4b09      	ldr	r3, [pc, #36]	@ (800c5e0 <prvHeapInit+0xc0>)
 800c5ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c5be:	601a      	str	r2, [r3, #0]
}
 800c5c0:	bf00      	nop
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	20009408 	.word	0x20009408
 800c5d0:	2000d008 	.word	0x2000d008
 800c5d4:	2000d010 	.word	0x2000d010
 800c5d8:	2000d018 	.word	0x2000d018
 800c5dc:	2000d014 	.word	0x2000d014
 800c5e0:	2000d024 	.word	0x2000d024

0800c5e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5ec:	4b28      	ldr	r3, [pc, #160]	@ (800c690 <prvInsertBlockIntoFreeList+0xac>)
 800c5ee:	60fb      	str	r3, [r7, #12]
 800c5f0:	e002      	b.n	800c5f8 <prvInsertBlockIntoFreeList+0x14>
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	60fb      	str	r3, [r7, #12]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d8f7      	bhi.n	800c5f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	429a      	cmp	r2, r3
 800c612:	d108      	bne.n	800c626 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	685a      	ldr	r2, [r3, #4]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	441a      	add	r2, r3
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	68ba      	ldr	r2, [r7, #8]
 800c630:	441a      	add	r2, r3
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	429a      	cmp	r2, r3
 800c638:	d118      	bne.n	800c66c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	4b15      	ldr	r3, [pc, #84]	@ (800c694 <prvInsertBlockIntoFreeList+0xb0>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	429a      	cmp	r2, r3
 800c644:	d00d      	beq.n	800c662 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	441a      	add	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e008      	b.n	800c674 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c662:	4b0c      	ldr	r3, [pc, #48]	@ (800c694 <prvInsertBlockIntoFreeList+0xb0>)
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	601a      	str	r2, [r3, #0]
 800c66a:	e003      	b.n	800c674 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d002      	beq.n	800c682 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c682:	bf00      	nop
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	2000d008 	.word	0x2000d008
 800c694:	2000d010 	.word	0x2000d010

0800c698 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c698:	4b04      	ldr	r3, [pc, #16]	@ (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	b10a      	cbz	r2, 800c6a2 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800c69e:	4803      	ldr	r0, [pc, #12]	@ (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c6a0:	4770      	bx	lr
 800c6a2:	4a03      	ldr	r2, [pc, #12]	@ (800c6b0 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800c6a4:	4801      	ldr	r0, [pc, #4]	@ (800c6ac <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c6a6:	6812      	ldr	r2, [r2, #0]
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	4770      	bx	lr
 800c6ac:	20000020 	.word	0x20000020
 800c6b0:	2000030c 	.word	0x2000030c

0800c6b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c6b4:	4a02      	ldr	r2, [pc, #8]	@ (800c6c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800c6b6:	4b03      	ldr	r3, [pc, #12]	@ (800c6c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800c6b8:	6812      	ldr	r2, [r2, #0]
 800c6ba:	601a      	str	r2, [r3, #0]
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	2000030c 	.word	0x2000030c
 800c6c4:	20000020 	.word	0x20000020

0800c6c8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800c6c8:	f005 bf48 	b.w	801255c <geometry_msgs__msg__Twist__init>

0800c6cc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800c6cc:	f005 bf6a 	b.w	80125a4 <geometry_msgs__msg__Twist__fini>

0800c6d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c6d0:	b510      	push	{r4, lr}
 800c6d2:	f000 f819 	bl	800c708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c6d6:	4c07      	ldr	r4, [pc, #28]	@ (800c6f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800c6d8:	60e0      	str	r0, [r4, #12]
 800c6da:	f000 f815 	bl	800c708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c6de:	4b06      	ldr	r3, [pc, #24]	@ (800c6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c6e0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	b10a      	cbz	r2, 800c6ea <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800c6e6:	4804      	ldr	r0, [pc, #16]	@ (800c6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	4a04      	ldr	r2, [pc, #16]	@ (800c6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800c6ec:	4802      	ldr	r0, [pc, #8]	@ (800c6f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c6ee:	6812      	ldr	r2, [r2, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	bd10      	pop	{r4, pc}
 800c6f4:	2000002c 	.word	0x2000002c
 800c6f8:	200000a4 	.word	0x200000a4
 800c6fc:	20000310 	.word	0x20000310

0800c700 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800c700:	f005 bf5c 	b.w	80125bc <geometry_msgs__msg__Vector3__init>

0800c704 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800c704:	f005 bf5e 	b.w	80125c4 <geometry_msgs__msg__Vector3__fini>

0800c708 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c708:	4b04      	ldr	r3, [pc, #16]	@ (800c71c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	b10a      	cbz	r2, 800c712 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800c70e:	4803      	ldr	r0, [pc, #12]	@ (800c71c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c710:	4770      	bx	lr
 800c712:	4a03      	ldr	r2, [pc, #12]	@ (800c720 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800c714:	4801      	ldr	r0, [pc, #4]	@ (800c71c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c716:	6812      	ldr	r2, [r2, #0]
 800c718:	601a      	str	r2, [r3, #0]
 800c71a:	4770      	bx	lr
 800c71c:	20000164 	.word	0x20000164
 800c720:	20000310 	.word	0x20000310

0800c724 <get_serialized_size_geometry_msgs__msg__Twist>:
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	4604      	mov	r4, r0
 800c728:	b148      	cbz	r0, 800c73e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800c72a:	460d      	mov	r5, r1
 800c72c:	f000 f86e 	bl	800c80c <get_serialized_size_geometry_msgs__msg__Vector3>
 800c730:	4606      	mov	r6, r0
 800c732:	1829      	adds	r1, r5, r0
 800c734:	f104 0018 	add.w	r0, r4, #24
 800c738:	f000 f868 	bl	800c80c <get_serialized_size_geometry_msgs__msg__Vector3>
 800c73c:	4430      	add	r0, r6
 800c73e:	bd70      	pop	{r4, r5, r6, pc}

0800c740 <_Twist__cdr_deserialize>:
 800c740:	b570      	push	{r4, r5, r6, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	b189      	cbz	r1, 800c76a <_Twist__cdr_deserialize+0x2a>
 800c746:	4605      	mov	r5, r0
 800c748:	f000 f8ec 	bl	800c924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c74c:	6843      	ldr	r3, [r0, #4]
 800c74e:	4621      	mov	r1, r4
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	4628      	mov	r0, r5
 800c754:	4798      	blx	r3
 800c756:	f000 f8e5 	bl	800c924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c75a:	6843      	ldr	r3, [r0, #4]
 800c75c:	f104 0118 	add.w	r1, r4, #24
 800c760:	4628      	mov	r0, r5
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c768:	4718      	bx	r3
 800c76a:	4608      	mov	r0, r1
 800c76c:	bd70      	pop	{r4, r5, r6, pc}
 800c76e:	bf00      	nop

0800c770 <_Twist__cdr_serialize>:
 800c770:	b510      	push	{r4, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	9101      	str	r1, [sp, #4]
 800c776:	b190      	cbz	r0, 800c79e <_Twist__cdr_serialize+0x2e>
 800c778:	4604      	mov	r4, r0
 800c77a:	f000 f8d3 	bl	800c924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c77e:	6843      	ldr	r3, [r0, #4]
 800c780:	9901      	ldr	r1, [sp, #4]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	4620      	mov	r0, r4
 800c786:	4798      	blx	r3
 800c788:	f000 f8cc 	bl	800c924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c78c:	6843      	ldr	r3, [r0, #4]
 800c78e:	9901      	ldr	r1, [sp, #4]
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	f104 0018 	add.w	r0, r4, #24
 800c796:	b002      	add	sp, #8
 800c798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c79c:	4718      	bx	r3
 800c79e:	b002      	add	sp, #8
 800c7a0:	bd10      	pop	{r4, pc}
 800c7a2:	bf00      	nop

0800c7a4 <_Twist__get_serialized_size>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	b148      	cbz	r0, 800c7be <_Twist__get_serialized_size+0x1a>
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	f000 f82e 	bl	800c80c <get_serialized_size_geometry_msgs__msg__Vector3>
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	f104 0018 	add.w	r0, r4, #24
 800c7b8:	f000 f828 	bl	800c80c <get_serialized_size_geometry_msgs__msg__Vector3>
 800c7bc:	4428      	add	r0, r5
 800c7be:	bd38      	pop	{r3, r4, r5, pc}

0800c7c0 <_Twist__max_serialized_size>:
 800c7c0:	b510      	push	{r4, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	f10d 0007 	add.w	r0, sp, #7
 800c7cc:	f88d 3007 	strb.w	r3, [sp, #7]
 800c7d0:	f000 f88c 	bl	800c8ec <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	f10d 0007 	add.w	r0, sp, #7
 800c7dc:	f000 f886 	bl	800c8ec <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7e0:	4420      	add	r0, r4
 800c7e2:	b002      	add	sp, #8
 800c7e4:	bd10      	pop	{r4, pc}
 800c7e6:	bf00      	nop

0800c7e8 <max_serialized_size_geometry_msgs__msg__Twist>:
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	b570      	push	{r4, r5, r6, lr}
 800c7ec:	7003      	strb	r3, [r0, #0]
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	460e      	mov	r6, r1
 800c7f2:	f000 f87b 	bl	800c8ec <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	1831      	adds	r1, r6, r0
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	f000 f876 	bl	800c8ec <max_serialized_size_geometry_msgs__msg__Vector3>
 800c800:	4420      	add	r0, r4
 800c802:	bd70      	pop	{r4, r5, r6, pc}

0800c804 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c804:	4800      	ldr	r0, [pc, #0]	@ (800c808 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800c806:	4770      	bx	lr
 800c808:	20000170 	.word	0x20000170

0800c80c <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c80c:	b1b8      	cbz	r0, 800c83e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c80e:	b538      	push	{r3, r4, r5, lr}
 800c810:	460d      	mov	r5, r1
 800c812:	4628      	mov	r0, r5
 800c814:	2108      	movs	r1, #8
 800c816:	f001 fb9d 	bl	800df54 <ucdr_alignment>
 800c81a:	f105 0308 	add.w	r3, r5, #8
 800c81e:	181c      	adds	r4, r3, r0
 800c820:	2108      	movs	r1, #8
 800c822:	4620      	mov	r0, r4
 800c824:	f001 fb96 	bl	800df54 <ucdr_alignment>
 800c828:	3008      	adds	r0, #8
 800c82a:	4404      	add	r4, r0
 800c82c:	2108      	movs	r1, #8
 800c82e:	4620      	mov	r0, r4
 800c830:	f001 fb90 	bl	800df54 <ucdr_alignment>
 800c834:	f1c5 0508 	rsb	r5, r5, #8
 800c838:	4428      	add	r0, r5
 800c83a:	4420      	add	r0, r4
 800c83c:	bd38      	pop	{r3, r4, r5, pc}
 800c83e:	4770      	bx	lr

0800c840 <_Vector3__cdr_deserialize>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	460c      	mov	r4, r1
 800c844:	b171      	cbz	r1, 800c864 <_Vector3__cdr_deserialize+0x24>
 800c846:	4605      	mov	r5, r0
 800c848:	f001 f998 	bl	800db7c <ucdr_deserialize_double>
 800c84c:	f104 0108 	add.w	r1, r4, #8
 800c850:	4628      	mov	r0, r5
 800c852:	f001 f993 	bl	800db7c <ucdr_deserialize_double>
 800c856:	f104 0110 	add.w	r1, r4, #16
 800c85a:	4628      	mov	r0, r5
 800c85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c860:	f001 b98c 	b.w	800db7c <ucdr_deserialize_double>
 800c864:	4608      	mov	r0, r1
 800c866:	bd38      	pop	{r3, r4, r5, pc}

0800c868 <_Vector3__cdr_serialize>:
 800c868:	b198      	cbz	r0, 800c892 <_Vector3__cdr_serialize+0x2a>
 800c86a:	b538      	push	{r3, r4, r5, lr}
 800c86c:	ed90 0b00 	vldr	d0, [r0]
 800c870:	460d      	mov	r5, r1
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	f000 ffdf 	bl	800d838 <ucdr_serialize_double>
 800c87a:	ed94 0b02 	vldr	d0, [r4, #8]
 800c87e:	4628      	mov	r0, r5
 800c880:	f000 ffda 	bl	800d838 <ucdr_serialize_double>
 800c884:	ed94 0b04 	vldr	d0, [r4, #16]
 800c888:	4628      	mov	r0, r5
 800c88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c88e:	f000 bfd3 	b.w	800d838 <ucdr_serialize_double>
 800c892:	4770      	bx	lr

0800c894 <_Vector3__get_serialized_size>:
 800c894:	b198      	cbz	r0, 800c8be <_Vector3__get_serialized_size+0x2a>
 800c896:	b510      	push	{r4, lr}
 800c898:	2108      	movs	r1, #8
 800c89a:	2000      	movs	r0, #0
 800c89c:	f001 fb5a 	bl	800df54 <ucdr_alignment>
 800c8a0:	f100 0408 	add.w	r4, r0, #8
 800c8a4:	2108      	movs	r1, #8
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f001 fb54 	bl	800df54 <ucdr_alignment>
 800c8ac:	3008      	adds	r0, #8
 800c8ae:	4404      	add	r4, r0
 800c8b0:	2108      	movs	r1, #8
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f001 fb4e 	bl	800df54 <ucdr_alignment>
 800c8b8:	3008      	adds	r0, #8
 800c8ba:	4420      	add	r0, r4
 800c8bc:	bd10      	pop	{r4, pc}
 800c8be:	4770      	bx	lr

0800c8c0 <_Vector3__max_serialized_size>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	2108      	movs	r1, #8
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	f001 fb45 	bl	800df54 <ucdr_alignment>
 800c8ca:	f100 0508 	add.w	r5, r0, #8
 800c8ce:	2108      	movs	r1, #8
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f001 fb3f 	bl	800df54 <ucdr_alignment>
 800c8d6:	f100 0408 	add.w	r4, r0, #8
 800c8da:	442c      	add	r4, r5
 800c8dc:	2108      	movs	r1, #8
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 fb38 	bl	800df54 <ucdr_alignment>
 800c8e4:	3008      	adds	r0, #8
 800c8e6:	4420      	add	r0, r4
 800c8e8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ea:	bf00      	nop

0800c8ec <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c8ec:	b570      	push	{r4, r5, r6, lr}
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	7003      	strb	r3, [r0, #0]
 800c8f4:	2108      	movs	r1, #8
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f001 fb2c 	bl	800df54 <ucdr_alignment>
 800c8fc:	f104 0508 	add.w	r5, r4, #8
 800c900:	1946      	adds	r6, r0, r5
 800c902:	2108      	movs	r1, #8
 800c904:	4630      	mov	r0, r6
 800c906:	f001 fb25 	bl	800df54 <ucdr_alignment>
 800c90a:	f100 0508 	add.w	r5, r0, #8
 800c90e:	4435      	add	r5, r6
 800c910:	2108      	movs	r1, #8
 800c912:	4628      	mov	r0, r5
 800c914:	f001 fb1e 	bl	800df54 <ucdr_alignment>
 800c918:	f1c4 0408 	rsb	r4, r4, #8
 800c91c:	4420      	add	r0, r4
 800c91e:	4428      	add	r0, r5
 800c920:	bd70      	pop	{r4, r5, r6, pc}
 800c922:	bf00      	nop

0800c924 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c924:	4800      	ldr	r0, [pc, #0]	@ (800c928 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c926:	4770      	bx	lr
 800c928:	20000198 	.word	0x20000198

0800c92c <ucdr_serialize_bool>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	460d      	mov	r5, r1
 800c930:	2101      	movs	r1, #1
 800c932:	4604      	mov	r4, r0
 800c934:	f001 fac2 	bl	800debc <ucdr_check_final_buffer_behavior>
 800c938:	b148      	cbz	r0, 800c94e <ucdr_serialize_bool+0x22>
 800c93a:	68a3      	ldr	r3, [r4, #8]
 800c93c:	701d      	strb	r5, [r3, #0]
 800c93e:	68a2      	ldr	r2, [r4, #8]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	2101      	movs	r1, #1
 800c944:	440a      	add	r2, r1
 800c946:	440b      	add	r3, r1
 800c948:	60a2      	str	r2, [r4, #8]
 800c94a:	6123      	str	r3, [r4, #16]
 800c94c:	7561      	strb	r1, [r4, #21]
 800c94e:	7da0      	ldrb	r0, [r4, #22]
 800c950:	f080 0001 	eor.w	r0, r0, #1
 800c954:	bd38      	pop	{r3, r4, r5, pc}
 800c956:	bf00      	nop

0800c958 <ucdr_deserialize_bool>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	460d      	mov	r5, r1
 800c95c:	2101      	movs	r1, #1
 800c95e:	4604      	mov	r4, r0
 800c960:	f001 faac 	bl	800debc <ucdr_check_final_buffer_behavior>
 800c964:	b160      	cbz	r0, 800c980 <ucdr_deserialize_bool+0x28>
 800c966:	68a2      	ldr	r2, [r4, #8]
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c96e:	3900      	subs	r1, #0
 800c970:	bf18      	it	ne
 800c972:	2101      	movne	r1, #1
 800c974:	7029      	strb	r1, [r5, #0]
 800c976:	3301      	adds	r3, #1
 800c978:	2101      	movs	r1, #1
 800c97a:	60a2      	str	r2, [r4, #8]
 800c97c:	6123      	str	r3, [r4, #16]
 800c97e:	7561      	strb	r1, [r4, #21]
 800c980:	7da0      	ldrb	r0, [r4, #22]
 800c982:	f080 0001 	eor.w	r0, r0, #1
 800c986:	bd38      	pop	{r3, r4, r5, pc}

0800c988 <ucdr_serialize_uint8_t>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	460d      	mov	r5, r1
 800c98c:	2101      	movs	r1, #1
 800c98e:	4604      	mov	r4, r0
 800c990:	f001 fa94 	bl	800debc <ucdr_check_final_buffer_behavior>
 800c994:	b148      	cbz	r0, 800c9aa <ucdr_serialize_uint8_t+0x22>
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	701d      	strb	r5, [r3, #0]
 800c99a:	68a2      	ldr	r2, [r4, #8]
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	2101      	movs	r1, #1
 800c9a0:	440a      	add	r2, r1
 800c9a2:	440b      	add	r3, r1
 800c9a4:	60a2      	str	r2, [r4, #8]
 800c9a6:	6123      	str	r3, [r4, #16]
 800c9a8:	7561      	strb	r1, [r4, #21]
 800c9aa:	7da0      	ldrb	r0, [r4, #22]
 800c9ac:	f080 0001 	eor.w	r0, r0, #1
 800c9b0:	bd38      	pop	{r3, r4, r5, pc}
 800c9b2:	bf00      	nop

0800c9b4 <ucdr_deserialize_uint8_t>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	460d      	mov	r5, r1
 800c9b8:	2101      	movs	r1, #1
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	f001 fa7e 	bl	800debc <ucdr_check_final_buffer_behavior>
 800c9c0:	b150      	cbz	r0, 800c9d8 <ucdr_deserialize_uint8_t+0x24>
 800c9c2:	68a3      	ldr	r3, [r4, #8]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	702b      	strb	r3, [r5, #0]
 800c9c8:	68a2      	ldr	r2, [r4, #8]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	2101      	movs	r1, #1
 800c9ce:	440a      	add	r2, r1
 800c9d0:	440b      	add	r3, r1
 800c9d2:	60a2      	str	r2, [r4, #8]
 800c9d4:	6123      	str	r3, [r4, #16]
 800c9d6:	7561      	strb	r1, [r4, #21]
 800c9d8:	7da0      	ldrb	r0, [r4, #22]
 800c9da:	f080 0001 	eor.w	r0, r0, #1
 800c9de:	bd38      	pop	{r3, r4, r5, pc}

0800c9e0 <ucdr_serialize_uint16_t>:
 800c9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	2102      	movs	r1, #2
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c9f0:	f001 fab8 	bl	800df64 <ucdr_buffer_alignment>
 800c9f4:	4601      	mov	r1, r0
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	7d67      	ldrb	r7, [r4, #21]
 800c9fa:	f001 faf7 	bl	800dfec <ucdr_advance_buffer>
 800c9fe:	2102      	movs	r1, #2
 800ca00:	4620      	mov	r0, r4
 800ca02:	f001 fa4f 	bl	800dea4 <ucdr_check_buffer_available_for>
 800ca06:	bb78      	cbnz	r0, 800ca68 <ucdr_serialize_uint16_t+0x88>
 800ca08:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca0c:	42ab      	cmp	r3, r5
 800ca0e:	d926      	bls.n	800ca5e <ucdr_serialize_uint16_t+0x7e>
 800ca10:	1b5e      	subs	r6, r3, r5
 800ca12:	60a3      	str	r3, [r4, #8]
 800ca14:	6923      	ldr	r3, [r4, #16]
 800ca16:	f1c6 0802 	rsb	r8, r6, #2
 800ca1a:	4433      	add	r3, r6
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	4641      	mov	r1, r8
 800ca20:	4620      	mov	r0, r4
 800ca22:	f001 fa4b 	bl	800debc <ucdr_check_final_buffer_behavior>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d03b      	beq.n	800caa2 <ucdr_serialize_uint16_t+0xc2>
 800ca2a:	7d23      	ldrb	r3, [r4, #20]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d04a      	beq.n	800cac6 <ucdr_serialize_uint16_t+0xe6>
 800ca30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca34:	702b      	strb	r3, [r5, #0]
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	d040      	beq.n	800cabc <ucdr_serialize_uint16_t+0xdc>
 800ca3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca3e:	706b      	strb	r3, [r5, #1]
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	68a2      	ldr	r2, [r4, #8]
 800ca44:	7da0      	ldrb	r0, [r4, #22]
 800ca46:	3302      	adds	r3, #2
 800ca48:	1b9e      	subs	r6, r3, r6
 800ca4a:	4442      	add	r2, r8
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	f080 0001 	eor.w	r0, r0, #1
 800ca52:	60a2      	str	r2, [r4, #8]
 800ca54:	6126      	str	r6, [r4, #16]
 800ca56:	7563      	strb	r3, [r4, #21]
 800ca58:	b002      	add	sp, #8
 800ca5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5e:	2102      	movs	r1, #2
 800ca60:	4620      	mov	r0, r4
 800ca62:	f001 fa2b 	bl	800debc <ucdr_check_final_buffer_behavior>
 800ca66:	b190      	cbz	r0, 800ca8e <ucdr_serialize_uint16_t+0xae>
 800ca68:	7d23      	ldrb	r3, [r4, #20]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	68a3      	ldr	r3, [r4, #8]
 800ca6e:	d014      	beq.n	800ca9a <ucdr_serialize_uint16_t+0xba>
 800ca70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	68a3      	ldr	r3, [r4, #8]
 800ca78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca7c:	705a      	strb	r2, [r3, #1]
 800ca7e:	68a2      	ldr	r2, [r4, #8]
 800ca80:	6923      	ldr	r3, [r4, #16]
 800ca82:	3202      	adds	r2, #2
 800ca84:	3302      	adds	r3, #2
 800ca86:	2102      	movs	r1, #2
 800ca88:	60a2      	str	r2, [r4, #8]
 800ca8a:	6123      	str	r3, [r4, #16]
 800ca8c:	7561      	strb	r1, [r4, #21]
 800ca8e:	7da0      	ldrb	r0, [r4, #22]
 800ca90:	f080 0001 	eor.w	r0, r0, #1
 800ca94:	b002      	add	sp, #8
 800ca96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca9e:	801a      	strh	r2, [r3, #0]
 800caa0:	e7ed      	b.n	800ca7e <ucdr_serialize_uint16_t+0x9e>
 800caa2:	68a2      	ldr	r2, [r4, #8]
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	7da0      	ldrb	r0, [r4, #22]
 800caa8:	7567      	strb	r7, [r4, #21]
 800caaa:	1b92      	subs	r2, r2, r6
 800caac:	1b9b      	subs	r3, r3, r6
 800caae:	f080 0001 	eor.w	r0, r0, #1
 800cab2:	60a2      	str	r2, [r4, #8]
 800cab4:	6123      	str	r3, [r4, #16]
 800cab6:	b002      	add	sp, #8
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	68a3      	ldr	r3, [r4, #8]
 800cabe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	e7bc      	b.n	800ca40 <ucdr_serialize_uint16_t+0x60>
 800cac6:	4628      	mov	r0, r5
 800cac8:	f10d 0506 	add.w	r5, sp, #6
 800cacc:	4629      	mov	r1, r5
 800cace:	4632      	mov	r2, r6
 800cad0:	f00f fde1 	bl	801c696 <memcpy>
 800cad4:	68a0      	ldr	r0, [r4, #8]
 800cad6:	4642      	mov	r2, r8
 800cad8:	19a9      	adds	r1, r5, r6
 800cada:	f00f fddc 	bl	801c696 <memcpy>
 800cade:	e7af      	b.n	800ca40 <ucdr_serialize_uint16_t+0x60>

0800cae0 <ucdr_serialize_endian_uint16_t>:
 800cae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cae4:	b083      	sub	sp, #12
 800cae6:	460d      	mov	r5, r1
 800cae8:	2102      	movs	r1, #2
 800caea:	4604      	mov	r4, r0
 800caec:	f8ad 2006 	strh.w	r2, [sp, #6]
 800caf0:	f001 fa38 	bl	800df64 <ucdr_buffer_alignment>
 800caf4:	4601      	mov	r1, r0
 800caf6:	4620      	mov	r0, r4
 800caf8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cafc:	f001 fa76 	bl	800dfec <ucdr_advance_buffer>
 800cb00:	2102      	movs	r1, #2
 800cb02:	4620      	mov	r0, r4
 800cb04:	f001 f9ce 	bl	800dea4 <ucdr_check_buffer_available_for>
 800cb08:	bb70      	cbnz	r0, 800cb68 <ucdr_serialize_endian_uint16_t+0x88>
 800cb0a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb0e:	42be      	cmp	r6, r7
 800cb10:	d925      	bls.n	800cb5e <ucdr_serialize_endian_uint16_t+0x7e>
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	60a6      	str	r6, [r4, #8]
 800cb16:	1bf6      	subs	r6, r6, r7
 800cb18:	4433      	add	r3, r6
 800cb1a:	f1c6 0902 	rsb	r9, r6, #2
 800cb1e:	6123      	str	r3, [r4, #16]
 800cb20:	4649      	mov	r1, r9
 800cb22:	4620      	mov	r0, r4
 800cb24:	f001 f9ca 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d039      	beq.n	800cba0 <ucdr_serialize_endian_uint16_t+0xc0>
 800cb2c:	2d01      	cmp	r5, #1
 800cb2e:	d04a      	beq.n	800cbc6 <ucdr_serialize_endian_uint16_t+0xe6>
 800cb30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb34:	703b      	strb	r3, [r7, #0]
 800cb36:	2e00      	cmp	r6, #0
 800cb38:	d040      	beq.n	800cbbc <ucdr_serialize_endian_uint16_t+0xdc>
 800cb3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb3e:	707b      	strb	r3, [r7, #1]
 800cb40:	6923      	ldr	r3, [r4, #16]
 800cb42:	68a2      	ldr	r2, [r4, #8]
 800cb44:	7da0      	ldrb	r0, [r4, #22]
 800cb46:	3302      	adds	r3, #2
 800cb48:	444a      	add	r2, r9
 800cb4a:	1b9b      	subs	r3, r3, r6
 800cb4c:	2102      	movs	r1, #2
 800cb4e:	f080 0001 	eor.w	r0, r0, #1
 800cb52:	60a2      	str	r2, [r4, #8]
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	7561      	strb	r1, [r4, #21]
 800cb58:	b003      	add	sp, #12
 800cb5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb5e:	2102      	movs	r1, #2
 800cb60:	4620      	mov	r0, r4
 800cb62:	f001 f9ab 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cb66:	b188      	cbz	r0, 800cb8c <ucdr_serialize_endian_uint16_t+0xac>
 800cb68:	2d01      	cmp	r5, #1
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	d014      	beq.n	800cb98 <ucdr_serialize_endian_uint16_t+0xb8>
 800cb6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb72:	701a      	strb	r2, [r3, #0]
 800cb74:	68a3      	ldr	r3, [r4, #8]
 800cb76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb7a:	705a      	strb	r2, [r3, #1]
 800cb7c:	68a2      	ldr	r2, [r4, #8]
 800cb7e:	6923      	ldr	r3, [r4, #16]
 800cb80:	3202      	adds	r2, #2
 800cb82:	3302      	adds	r3, #2
 800cb84:	2102      	movs	r1, #2
 800cb86:	60a2      	str	r2, [r4, #8]
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	7561      	strb	r1, [r4, #21]
 800cb8c:	7da0      	ldrb	r0, [r4, #22]
 800cb8e:	f080 0001 	eor.w	r0, r0, #1
 800cb92:	b003      	add	sp, #12
 800cb94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb9c:	801a      	strh	r2, [r3, #0]
 800cb9e:	e7ed      	b.n	800cb7c <ucdr_serialize_endian_uint16_t+0x9c>
 800cba0:	68a2      	ldr	r2, [r4, #8]
 800cba2:	6923      	ldr	r3, [r4, #16]
 800cba4:	7da0      	ldrb	r0, [r4, #22]
 800cba6:	f884 8015 	strb.w	r8, [r4, #21]
 800cbaa:	1b92      	subs	r2, r2, r6
 800cbac:	1b9b      	subs	r3, r3, r6
 800cbae:	f080 0001 	eor.w	r0, r0, #1
 800cbb2:	60a2      	str	r2, [r4, #8]
 800cbb4:	6123      	str	r3, [r4, #16]
 800cbb6:	b003      	add	sp, #12
 800cbb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbbc:	68a3      	ldr	r3, [r4, #8]
 800cbbe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	e7bc      	b.n	800cb40 <ucdr_serialize_endian_uint16_t+0x60>
 800cbc6:	f10d 0506 	add.w	r5, sp, #6
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4632      	mov	r2, r6
 800cbce:	4638      	mov	r0, r7
 800cbd0:	f00f fd61 	bl	801c696 <memcpy>
 800cbd4:	68a0      	ldr	r0, [r4, #8]
 800cbd6:	464a      	mov	r2, r9
 800cbd8:	19a9      	adds	r1, r5, r6
 800cbda:	f00f fd5c 	bl	801c696 <memcpy>
 800cbde:	e7af      	b.n	800cb40 <ucdr_serialize_endian_uint16_t+0x60>

0800cbe0 <ucdr_deserialize_uint16_t>:
 800cbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe4:	460d      	mov	r5, r1
 800cbe6:	2102      	movs	r1, #2
 800cbe8:	4604      	mov	r4, r0
 800cbea:	f001 f9bb 	bl	800df64 <ucdr_buffer_alignment>
 800cbee:	4601      	mov	r1, r0
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cbf6:	f001 f9f9 	bl	800dfec <ucdr_advance_buffer>
 800cbfa:	2102      	movs	r1, #2
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f001 f951 	bl	800dea4 <ucdr_check_buffer_available_for>
 800cc02:	bb60      	cbnz	r0, 800cc5e <ucdr_deserialize_uint16_t+0x7e>
 800cc04:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cc08:	42be      	cmp	r6, r7
 800cc0a:	d923      	bls.n	800cc54 <ucdr_deserialize_uint16_t+0x74>
 800cc0c:	6923      	ldr	r3, [r4, #16]
 800cc0e:	60a6      	str	r6, [r4, #8]
 800cc10:	1bf6      	subs	r6, r6, r7
 800cc12:	4433      	add	r3, r6
 800cc14:	f1c6 0902 	rsb	r9, r6, #2
 800cc18:	6123      	str	r3, [r4, #16]
 800cc1a:	4649      	mov	r1, r9
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f001 f94d 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cc22:	2800      	cmp	r0, #0
 800cc24:	d034      	beq.n	800cc90 <ucdr_deserialize_uint16_t+0xb0>
 800cc26:	7d23      	ldrb	r3, [r4, #20]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d042      	beq.n	800ccb2 <ucdr_deserialize_uint16_t+0xd2>
 800cc2c:	787b      	ldrb	r3, [r7, #1]
 800cc2e:	702b      	strb	r3, [r5, #0]
 800cc30:	2e00      	cmp	r6, #0
 800cc32:	d03a      	beq.n	800ccaa <ucdr_deserialize_uint16_t+0xca>
 800cc34:	783b      	ldrb	r3, [r7, #0]
 800cc36:	706b      	strb	r3, [r5, #1]
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	68a2      	ldr	r2, [r4, #8]
 800cc3c:	7da0      	ldrb	r0, [r4, #22]
 800cc3e:	2102      	movs	r1, #2
 800cc40:	3302      	adds	r3, #2
 800cc42:	444a      	add	r2, r9
 800cc44:	1b9b      	subs	r3, r3, r6
 800cc46:	7561      	strb	r1, [r4, #21]
 800cc48:	60a2      	str	r2, [r4, #8]
 800cc4a:	6123      	str	r3, [r4, #16]
 800cc4c:	f080 0001 	eor.w	r0, r0, #1
 800cc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc54:	2102      	movs	r1, #2
 800cc56:	4620      	mov	r0, r4
 800cc58:	f001 f930 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cc5c:	b180      	cbz	r0, 800cc80 <ucdr_deserialize_uint16_t+0xa0>
 800cc5e:	7d23      	ldrb	r3, [r4, #20]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	d011      	beq.n	800cc8a <ucdr_deserialize_uint16_t+0xaa>
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	702b      	strb	r3, [r5, #0]
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	706b      	strb	r3, [r5, #1]
 800cc70:	68a2      	ldr	r2, [r4, #8]
 800cc72:	6923      	ldr	r3, [r4, #16]
 800cc74:	3202      	adds	r2, #2
 800cc76:	3302      	adds	r3, #2
 800cc78:	2102      	movs	r1, #2
 800cc7a:	60a2      	str	r2, [r4, #8]
 800cc7c:	6123      	str	r3, [r4, #16]
 800cc7e:	7561      	strb	r1, [r4, #21]
 800cc80:	7da0      	ldrb	r0, [r4, #22]
 800cc82:	f080 0001 	eor.w	r0, r0, #1
 800cc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	802b      	strh	r3, [r5, #0]
 800cc8e:	e7ef      	b.n	800cc70 <ucdr_deserialize_uint16_t+0x90>
 800cc90:	68a2      	ldr	r2, [r4, #8]
 800cc92:	6923      	ldr	r3, [r4, #16]
 800cc94:	7da0      	ldrb	r0, [r4, #22]
 800cc96:	f884 8015 	strb.w	r8, [r4, #21]
 800cc9a:	1b92      	subs	r2, r2, r6
 800cc9c:	1b9b      	subs	r3, r3, r6
 800cc9e:	60a2      	str	r2, [r4, #8]
 800cca0:	6123      	str	r3, [r4, #16]
 800cca2:	f080 0001 	eor.w	r0, r0, #1
 800cca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccaa:	68a3      	ldr	r3, [r4, #8]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	706b      	strb	r3, [r5, #1]
 800ccb0:	e7c2      	b.n	800cc38 <ucdr_deserialize_uint16_t+0x58>
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	4632      	mov	r2, r6
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	f00f fced 	bl	801c696 <memcpy>
 800ccbc:	68a1      	ldr	r1, [r4, #8]
 800ccbe:	464a      	mov	r2, r9
 800ccc0:	19a8      	adds	r0, r5, r6
 800ccc2:	f00f fce8 	bl	801c696 <memcpy>
 800ccc6:	e7b7      	b.n	800cc38 <ucdr_deserialize_uint16_t+0x58>

0800ccc8 <ucdr_deserialize_endian_uint16_t>:
 800ccc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cccc:	460e      	mov	r6, r1
 800ccce:	2102      	movs	r1, #2
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	4615      	mov	r5, r2
 800ccd4:	f001 f946 	bl	800df64 <ucdr_buffer_alignment>
 800ccd8:	4601      	mov	r1, r0
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cce0:	f001 f984 	bl	800dfec <ucdr_advance_buffer>
 800cce4:	2102      	movs	r1, #2
 800cce6:	4620      	mov	r0, r4
 800cce8:	f001 f8dc 	bl	800dea4 <ucdr_check_buffer_available_for>
 800ccec:	bb70      	cbnz	r0, 800cd4c <ucdr_deserialize_endian_uint16_t+0x84>
 800ccee:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ccf2:	4547      	cmp	r7, r8
 800ccf4:	d925      	bls.n	800cd42 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ccf6:	6923      	ldr	r3, [r4, #16]
 800ccf8:	60a7      	str	r7, [r4, #8]
 800ccfa:	eba7 0708 	sub.w	r7, r7, r8
 800ccfe:	443b      	add	r3, r7
 800cd00:	f1c7 0a02 	rsb	sl, r7, #2
 800cd04:	6123      	str	r3, [r4, #16]
 800cd06:	4651      	mov	r1, sl
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f001 f8d7 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d034      	beq.n	800cd7c <ucdr_deserialize_endian_uint16_t+0xb4>
 800cd12:	2e01      	cmp	r6, #1
 800cd14:	d043      	beq.n	800cd9e <ucdr_deserialize_endian_uint16_t+0xd6>
 800cd16:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cd1a:	702b      	strb	r3, [r5, #0]
 800cd1c:	2f00      	cmp	r7, #0
 800cd1e:	d03a      	beq.n	800cd96 <ucdr_deserialize_endian_uint16_t+0xce>
 800cd20:	f898 3000 	ldrb.w	r3, [r8]
 800cd24:	706b      	strb	r3, [r5, #1]
 800cd26:	6923      	ldr	r3, [r4, #16]
 800cd28:	68a2      	ldr	r2, [r4, #8]
 800cd2a:	7da0      	ldrb	r0, [r4, #22]
 800cd2c:	2102      	movs	r1, #2
 800cd2e:	3302      	adds	r3, #2
 800cd30:	4452      	add	r2, sl
 800cd32:	1bdb      	subs	r3, r3, r7
 800cd34:	7561      	strb	r1, [r4, #21]
 800cd36:	60a2      	str	r2, [r4, #8]
 800cd38:	6123      	str	r3, [r4, #16]
 800cd3a:	f080 0001 	eor.w	r0, r0, #1
 800cd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd42:	2102      	movs	r1, #2
 800cd44:	4620      	mov	r0, r4
 800cd46:	f001 f8b9 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cd4a:	b178      	cbz	r0, 800cd6c <ucdr_deserialize_endian_uint16_t+0xa4>
 800cd4c:	2e01      	cmp	r6, #1
 800cd4e:	68a3      	ldr	r3, [r4, #8]
 800cd50:	d011      	beq.n	800cd76 <ucdr_deserialize_endian_uint16_t+0xae>
 800cd52:	785b      	ldrb	r3, [r3, #1]
 800cd54:	702b      	strb	r3, [r5, #0]
 800cd56:	68a3      	ldr	r3, [r4, #8]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	706b      	strb	r3, [r5, #1]
 800cd5c:	68a2      	ldr	r2, [r4, #8]
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	3202      	adds	r2, #2
 800cd62:	3302      	adds	r3, #2
 800cd64:	2102      	movs	r1, #2
 800cd66:	60a2      	str	r2, [r4, #8]
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	7561      	strb	r1, [r4, #21]
 800cd6c:	7da0      	ldrb	r0, [r4, #22]
 800cd6e:	f080 0001 	eor.w	r0, r0, #1
 800cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	802b      	strh	r3, [r5, #0]
 800cd7a:	e7ef      	b.n	800cd5c <ucdr_deserialize_endian_uint16_t+0x94>
 800cd7c:	68a2      	ldr	r2, [r4, #8]
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	7da0      	ldrb	r0, [r4, #22]
 800cd82:	f884 9015 	strb.w	r9, [r4, #21]
 800cd86:	1bd2      	subs	r2, r2, r7
 800cd88:	1bdb      	subs	r3, r3, r7
 800cd8a:	60a2      	str	r2, [r4, #8]
 800cd8c:	6123      	str	r3, [r4, #16]
 800cd8e:	f080 0001 	eor.w	r0, r0, #1
 800cd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd96:	68a3      	ldr	r3, [r4, #8]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	706b      	strb	r3, [r5, #1]
 800cd9c:	e7c3      	b.n	800cd26 <ucdr_deserialize_endian_uint16_t+0x5e>
 800cd9e:	4641      	mov	r1, r8
 800cda0:	463a      	mov	r2, r7
 800cda2:	4628      	mov	r0, r5
 800cda4:	f00f fc77 	bl	801c696 <memcpy>
 800cda8:	68a1      	ldr	r1, [r4, #8]
 800cdaa:	4652      	mov	r2, sl
 800cdac:	19e8      	adds	r0, r5, r7
 800cdae:	f00f fc72 	bl	801c696 <memcpy>
 800cdb2:	e7b8      	b.n	800cd26 <ucdr_deserialize_endian_uint16_t+0x5e>

0800cdb4 <ucdr_serialize_uint32_t>:
 800cdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb8:	b082      	sub	sp, #8
 800cdba:	4604      	mov	r4, r0
 800cdbc:	9101      	str	r1, [sp, #4]
 800cdbe:	2104      	movs	r1, #4
 800cdc0:	f001 f8d0 	bl	800df64 <ucdr_buffer_alignment>
 800cdc4:	4601      	mov	r1, r0
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	7d67      	ldrb	r7, [r4, #21]
 800cdca:	f001 f90f 	bl	800dfec <ucdr_advance_buffer>
 800cdce:	2104      	movs	r1, #4
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f001 f867 	bl	800dea4 <ucdr_check_buffer_available_for>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d139      	bne.n	800ce4e <ucdr_serialize_uint32_t+0x9a>
 800cdda:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cdde:	42ab      	cmp	r3, r5
 800cde0:	d930      	bls.n	800ce44 <ucdr_serialize_uint32_t+0x90>
 800cde2:	1b5e      	subs	r6, r3, r5
 800cde4:	60a3      	str	r3, [r4, #8]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	f1c6 0804 	rsb	r8, r6, #4
 800cdec:	4433      	add	r3, r6
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	4641      	mov	r1, r8
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f001 f862 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d04c      	beq.n	800ce96 <ucdr_serialize_uint32_t+0xe2>
 800cdfc:	7d23      	ldrb	r3, [r4, #20]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d063      	beq.n	800ceca <ucdr_serialize_uint32_t+0x116>
 800ce02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ce06:	702b      	strb	r3, [r5, #0]
 800ce08:	2e00      	cmp	r6, #0
 800ce0a:	d051      	beq.n	800ceb0 <ucdr_serialize_uint32_t+0xfc>
 800ce0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ce10:	706b      	strb	r3, [r5, #1]
 800ce12:	2e01      	cmp	r6, #1
 800ce14:	d050      	beq.n	800ceb8 <ucdr_serialize_uint32_t+0x104>
 800ce16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ce1a:	70ab      	strb	r3, [r5, #2]
 800ce1c:	2e02      	cmp	r6, #2
 800ce1e:	d04f      	beq.n	800cec0 <ucdr_serialize_uint32_t+0x10c>
 800ce20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce24:	70eb      	strb	r3, [r5, #3]
 800ce26:	6923      	ldr	r3, [r4, #16]
 800ce28:	68a2      	ldr	r2, [r4, #8]
 800ce2a:	7da0      	ldrb	r0, [r4, #22]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	1b9e      	subs	r6, r3, r6
 800ce30:	4442      	add	r2, r8
 800ce32:	2304      	movs	r3, #4
 800ce34:	f080 0001 	eor.w	r0, r0, #1
 800ce38:	60a2      	str	r2, [r4, #8]
 800ce3a:	6126      	str	r6, [r4, #16]
 800ce3c:	7563      	strb	r3, [r4, #21]
 800ce3e:	b002      	add	sp, #8
 800ce40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce44:	2104      	movs	r1, #4
 800ce46:	4620      	mov	r0, r4
 800ce48:	f001 f838 	bl	800debc <ucdr_check_final_buffer_behavior>
 800ce4c:	b1d0      	cbz	r0, 800ce84 <ucdr_serialize_uint32_t+0xd0>
 800ce4e:	7d23      	ldrb	r3, [r4, #20]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	68a3      	ldr	r3, [r4, #8]
 800ce54:	d01c      	beq.n	800ce90 <ucdr_serialize_uint32_t+0xdc>
 800ce56:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce5a:	701a      	strb	r2, [r3, #0]
 800ce5c:	68a3      	ldr	r3, [r4, #8]
 800ce5e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce62:	705a      	strb	r2, [r3, #1]
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce6a:	709a      	strb	r2, [r3, #2]
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce72:	70da      	strb	r2, [r3, #3]
 800ce74:	68a2      	ldr	r2, [r4, #8]
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	3204      	adds	r2, #4
 800ce7a:	3304      	adds	r3, #4
 800ce7c:	2104      	movs	r1, #4
 800ce7e:	60a2      	str	r2, [r4, #8]
 800ce80:	6123      	str	r3, [r4, #16]
 800ce82:	7561      	strb	r1, [r4, #21]
 800ce84:	7da0      	ldrb	r0, [r4, #22]
 800ce86:	f080 0001 	eor.w	r0, r0, #1
 800ce8a:	b002      	add	sp, #8
 800ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce90:	9a01      	ldr	r2, [sp, #4]
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	e7ee      	b.n	800ce74 <ucdr_serialize_uint32_t+0xc0>
 800ce96:	68a2      	ldr	r2, [r4, #8]
 800ce98:	6923      	ldr	r3, [r4, #16]
 800ce9a:	7da0      	ldrb	r0, [r4, #22]
 800ce9c:	7567      	strb	r7, [r4, #21]
 800ce9e:	1b92      	subs	r2, r2, r6
 800cea0:	1b9b      	subs	r3, r3, r6
 800cea2:	f080 0001 	eor.w	r0, r0, #1
 800cea6:	60a2      	str	r2, [r4, #8]
 800cea8:	6123      	str	r3, [r4, #16]
 800ceaa:	b002      	add	sp, #8
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	68a3      	ldr	r3, [r4, #8]
 800ceb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ceb6:	701a      	strb	r2, [r3, #0]
 800ceb8:	68a3      	ldr	r3, [r4, #8]
 800ceba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cebe:	701a      	strb	r2, [r3, #0]
 800cec0:	68a3      	ldr	r3, [r4, #8]
 800cec2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cec6:	701a      	strb	r2, [r3, #0]
 800cec8:	e7ad      	b.n	800ce26 <ucdr_serialize_uint32_t+0x72>
 800ceca:	4628      	mov	r0, r5
 800cecc:	ad01      	add	r5, sp, #4
 800cece:	4629      	mov	r1, r5
 800ced0:	4632      	mov	r2, r6
 800ced2:	f00f fbe0 	bl	801c696 <memcpy>
 800ced6:	68a0      	ldr	r0, [r4, #8]
 800ced8:	4642      	mov	r2, r8
 800ceda:	19a9      	adds	r1, r5, r6
 800cedc:	f00f fbdb 	bl	801c696 <memcpy>
 800cee0:	e7a1      	b.n	800ce26 <ucdr_serialize_uint32_t+0x72>
 800cee2:	bf00      	nop

0800cee4 <ucdr_serialize_endian_uint32_t>:
 800cee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cee8:	b083      	sub	sp, #12
 800ceea:	460d      	mov	r5, r1
 800ceec:	2104      	movs	r1, #4
 800ceee:	4604      	mov	r4, r0
 800cef0:	9201      	str	r2, [sp, #4]
 800cef2:	f001 f837 	bl	800df64 <ucdr_buffer_alignment>
 800cef6:	4601      	mov	r1, r0
 800cef8:	4620      	mov	r0, r4
 800cefa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cefe:	f001 f875 	bl	800dfec <ucdr_advance_buffer>
 800cf02:	2104      	movs	r1, #4
 800cf04:	4620      	mov	r0, r4
 800cf06:	f000 ffcd 	bl	800dea4 <ucdr_check_buffer_available_for>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d138      	bne.n	800cf80 <ucdr_serialize_endian_uint32_t+0x9c>
 800cf0e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cf12:	42b7      	cmp	r7, r6
 800cf14:	d92f      	bls.n	800cf76 <ucdr_serialize_endian_uint32_t+0x92>
 800cf16:	6923      	ldr	r3, [r4, #16]
 800cf18:	60a7      	str	r7, [r4, #8]
 800cf1a:	1bbf      	subs	r7, r7, r6
 800cf1c:	443b      	add	r3, r7
 800cf1e:	f1c7 0904 	rsb	r9, r7, #4
 800cf22:	6123      	str	r3, [r4, #16]
 800cf24:	4649      	mov	r1, r9
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 ffc8 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d04a      	beq.n	800cfc6 <ucdr_serialize_endian_uint32_t+0xe2>
 800cf30:	2d01      	cmp	r5, #1
 800cf32:	d063      	beq.n	800cffc <ucdr_serialize_endian_uint32_t+0x118>
 800cf34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf38:	7033      	strb	r3, [r6, #0]
 800cf3a:	2f00      	cmp	r7, #0
 800cf3c:	d051      	beq.n	800cfe2 <ucdr_serialize_endian_uint32_t+0xfe>
 800cf3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf42:	7073      	strb	r3, [r6, #1]
 800cf44:	2f01      	cmp	r7, #1
 800cf46:	d050      	beq.n	800cfea <ucdr_serialize_endian_uint32_t+0x106>
 800cf48:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf4c:	70b3      	strb	r3, [r6, #2]
 800cf4e:	2f02      	cmp	r7, #2
 800cf50:	d04f      	beq.n	800cff2 <ucdr_serialize_endian_uint32_t+0x10e>
 800cf52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf56:	70f3      	strb	r3, [r6, #3]
 800cf58:	6923      	ldr	r3, [r4, #16]
 800cf5a:	68a2      	ldr	r2, [r4, #8]
 800cf5c:	7da0      	ldrb	r0, [r4, #22]
 800cf5e:	3304      	adds	r3, #4
 800cf60:	444a      	add	r2, r9
 800cf62:	1bdb      	subs	r3, r3, r7
 800cf64:	2104      	movs	r1, #4
 800cf66:	f080 0001 	eor.w	r0, r0, #1
 800cf6a:	60a2      	str	r2, [r4, #8]
 800cf6c:	6123      	str	r3, [r4, #16]
 800cf6e:	7561      	strb	r1, [r4, #21]
 800cf70:	b003      	add	sp, #12
 800cf72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf76:	2104      	movs	r1, #4
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 ff9f 	bl	800debc <ucdr_check_final_buffer_behavior>
 800cf7e:	b1c8      	cbz	r0, 800cfb4 <ucdr_serialize_endian_uint32_t+0xd0>
 800cf80:	2d01      	cmp	r5, #1
 800cf82:	68a3      	ldr	r3, [r4, #8]
 800cf84:	d01c      	beq.n	800cfc0 <ucdr_serialize_endian_uint32_t+0xdc>
 800cf86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cf8a:	701a      	strb	r2, [r3, #0]
 800cf8c:	68a3      	ldr	r3, [r4, #8]
 800cf8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf92:	705a      	strb	r2, [r3, #1]
 800cf94:	68a3      	ldr	r3, [r4, #8]
 800cf96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf9a:	709a      	strb	r2, [r3, #2]
 800cf9c:	68a3      	ldr	r3, [r4, #8]
 800cf9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfa2:	70da      	strb	r2, [r3, #3]
 800cfa4:	68a2      	ldr	r2, [r4, #8]
 800cfa6:	6923      	ldr	r3, [r4, #16]
 800cfa8:	3204      	adds	r2, #4
 800cfaa:	3304      	adds	r3, #4
 800cfac:	2104      	movs	r1, #4
 800cfae:	60a2      	str	r2, [r4, #8]
 800cfb0:	6123      	str	r3, [r4, #16]
 800cfb2:	7561      	strb	r1, [r4, #21]
 800cfb4:	7da0      	ldrb	r0, [r4, #22]
 800cfb6:	f080 0001 	eor.w	r0, r0, #1
 800cfba:	b003      	add	sp, #12
 800cfbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc0:	9a01      	ldr	r2, [sp, #4]
 800cfc2:	601a      	str	r2, [r3, #0]
 800cfc4:	e7ee      	b.n	800cfa4 <ucdr_serialize_endian_uint32_t+0xc0>
 800cfc6:	68a2      	ldr	r2, [r4, #8]
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	7da0      	ldrb	r0, [r4, #22]
 800cfcc:	f884 8015 	strb.w	r8, [r4, #21]
 800cfd0:	1bd2      	subs	r2, r2, r7
 800cfd2:	1bdb      	subs	r3, r3, r7
 800cfd4:	f080 0001 	eor.w	r0, r0, #1
 800cfd8:	60a2      	str	r2, [r4, #8]
 800cfda:	6123      	str	r3, [r4, #16]
 800cfdc:	b003      	add	sp, #12
 800cfde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfe2:	68a3      	ldr	r3, [r4, #8]
 800cfe4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cff0:	701a      	strb	r2, [r3, #0]
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cff8:	701a      	strb	r2, [r3, #0]
 800cffa:	e7ad      	b.n	800cf58 <ucdr_serialize_endian_uint32_t+0x74>
 800cffc:	ad01      	add	r5, sp, #4
 800cffe:	4629      	mov	r1, r5
 800d000:	463a      	mov	r2, r7
 800d002:	4630      	mov	r0, r6
 800d004:	f00f fb47 	bl	801c696 <memcpy>
 800d008:	68a0      	ldr	r0, [r4, #8]
 800d00a:	464a      	mov	r2, r9
 800d00c:	19e9      	adds	r1, r5, r7
 800d00e:	f00f fb42 	bl	801c696 <memcpy>
 800d012:	e7a1      	b.n	800cf58 <ucdr_serialize_endian_uint32_t+0x74>

0800d014 <ucdr_deserialize_uint32_t>:
 800d014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d018:	460d      	mov	r5, r1
 800d01a:	2104      	movs	r1, #4
 800d01c:	4604      	mov	r4, r0
 800d01e:	f000 ffa1 	bl	800df64 <ucdr_buffer_alignment>
 800d022:	4601      	mov	r1, r0
 800d024:	4620      	mov	r0, r4
 800d026:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d02a:	f000 ffdf 	bl	800dfec <ucdr_advance_buffer>
 800d02e:	2104      	movs	r1, #4
 800d030:	4620      	mov	r0, r4
 800d032:	f000 ff37 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d036:	2800      	cmp	r0, #0
 800d038:	d138      	bne.n	800d0ac <ucdr_deserialize_uint32_t+0x98>
 800d03a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d03e:	42b7      	cmp	r7, r6
 800d040:	d92f      	bls.n	800d0a2 <ucdr_deserialize_uint32_t+0x8e>
 800d042:	6923      	ldr	r3, [r4, #16]
 800d044:	60a7      	str	r7, [r4, #8]
 800d046:	1bbf      	subs	r7, r7, r6
 800d048:	443b      	add	r3, r7
 800d04a:	f1c7 0904 	rsb	r9, r7, #4
 800d04e:	6123      	str	r3, [r4, #16]
 800d050:	4649      	mov	r1, r9
 800d052:	4620      	mov	r0, r4
 800d054:	f000 ff32 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d058:	2800      	cmp	r0, #0
 800d05a:	d046      	beq.n	800d0ea <ucdr_deserialize_uint32_t+0xd6>
 800d05c:	7d23      	ldrb	r3, [r4, #20]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d05c      	beq.n	800d11c <ucdr_deserialize_uint32_t+0x108>
 800d062:	78f3      	ldrb	r3, [r6, #3]
 800d064:	702b      	strb	r3, [r5, #0]
 800d066:	2f00      	cmp	r7, #0
 800d068:	d04c      	beq.n	800d104 <ucdr_deserialize_uint32_t+0xf0>
 800d06a:	78b3      	ldrb	r3, [r6, #2]
 800d06c:	706b      	strb	r3, [r5, #1]
 800d06e:	2f01      	cmp	r7, #1
 800d070:	f105 0302 	add.w	r3, r5, #2
 800d074:	d04a      	beq.n	800d10c <ucdr_deserialize_uint32_t+0xf8>
 800d076:	7873      	ldrb	r3, [r6, #1]
 800d078:	70ab      	strb	r3, [r5, #2]
 800d07a:	2f02      	cmp	r7, #2
 800d07c:	f105 0303 	add.w	r3, r5, #3
 800d080:	d048      	beq.n	800d114 <ucdr_deserialize_uint32_t+0x100>
 800d082:	7833      	ldrb	r3, [r6, #0]
 800d084:	70eb      	strb	r3, [r5, #3]
 800d086:	6923      	ldr	r3, [r4, #16]
 800d088:	68a2      	ldr	r2, [r4, #8]
 800d08a:	7da0      	ldrb	r0, [r4, #22]
 800d08c:	2104      	movs	r1, #4
 800d08e:	3304      	adds	r3, #4
 800d090:	444a      	add	r2, r9
 800d092:	1bdb      	subs	r3, r3, r7
 800d094:	7561      	strb	r1, [r4, #21]
 800d096:	60a2      	str	r2, [r4, #8]
 800d098:	6123      	str	r3, [r4, #16]
 800d09a:	f080 0001 	eor.w	r0, r0, #1
 800d09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a2:	2104      	movs	r1, #4
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 ff09 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d0aa:	b1b0      	cbz	r0, 800d0da <ucdr_deserialize_uint32_t+0xc6>
 800d0ac:	7d23      	ldrb	r3, [r4, #20]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	68a3      	ldr	r3, [r4, #8]
 800d0b2:	d017      	beq.n	800d0e4 <ucdr_deserialize_uint32_t+0xd0>
 800d0b4:	78db      	ldrb	r3, [r3, #3]
 800d0b6:	702b      	strb	r3, [r5, #0]
 800d0b8:	68a3      	ldr	r3, [r4, #8]
 800d0ba:	789b      	ldrb	r3, [r3, #2]
 800d0bc:	706b      	strb	r3, [r5, #1]
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	785b      	ldrb	r3, [r3, #1]
 800d0c2:	70ab      	strb	r3, [r5, #2]
 800d0c4:	68a3      	ldr	r3, [r4, #8]
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	70eb      	strb	r3, [r5, #3]
 800d0ca:	68a2      	ldr	r2, [r4, #8]
 800d0cc:	6923      	ldr	r3, [r4, #16]
 800d0ce:	3204      	adds	r2, #4
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	2104      	movs	r1, #4
 800d0d4:	60a2      	str	r2, [r4, #8]
 800d0d6:	6123      	str	r3, [r4, #16]
 800d0d8:	7561      	strb	r1, [r4, #21]
 800d0da:	7da0      	ldrb	r0, [r4, #22]
 800d0dc:	f080 0001 	eor.w	r0, r0, #1
 800d0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	e7ef      	b.n	800d0ca <ucdr_deserialize_uint32_t+0xb6>
 800d0ea:	68a2      	ldr	r2, [r4, #8]
 800d0ec:	6923      	ldr	r3, [r4, #16]
 800d0ee:	7da0      	ldrb	r0, [r4, #22]
 800d0f0:	f884 8015 	strb.w	r8, [r4, #21]
 800d0f4:	1bd2      	subs	r2, r2, r7
 800d0f6:	1bdb      	subs	r3, r3, r7
 800d0f8:	60a2      	str	r2, [r4, #8]
 800d0fa:	6123      	str	r3, [r4, #16]
 800d0fc:	f080 0001 	eor.w	r0, r0, #1
 800d100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d104:	68a3      	ldr	r3, [r4, #8]
 800d106:	789b      	ldrb	r3, [r3, #2]
 800d108:	706b      	strb	r3, [r5, #1]
 800d10a:	1cab      	adds	r3, r5, #2
 800d10c:	68a2      	ldr	r2, [r4, #8]
 800d10e:	7852      	ldrb	r2, [r2, #1]
 800d110:	f803 2b01 	strb.w	r2, [r3], #1
 800d114:	68a2      	ldr	r2, [r4, #8]
 800d116:	7812      	ldrb	r2, [r2, #0]
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	e7b4      	b.n	800d086 <ucdr_deserialize_uint32_t+0x72>
 800d11c:	4631      	mov	r1, r6
 800d11e:	463a      	mov	r2, r7
 800d120:	4628      	mov	r0, r5
 800d122:	f00f fab8 	bl	801c696 <memcpy>
 800d126:	68a1      	ldr	r1, [r4, #8]
 800d128:	464a      	mov	r2, r9
 800d12a:	19e8      	adds	r0, r5, r7
 800d12c:	f00f fab3 	bl	801c696 <memcpy>
 800d130:	e7a9      	b.n	800d086 <ucdr_deserialize_uint32_t+0x72>
 800d132:	bf00      	nop

0800d134 <ucdr_deserialize_endian_uint32_t>:
 800d134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d138:	460e      	mov	r6, r1
 800d13a:	2104      	movs	r1, #4
 800d13c:	4604      	mov	r4, r0
 800d13e:	4615      	mov	r5, r2
 800d140:	f000 ff10 	bl	800df64 <ucdr_buffer_alignment>
 800d144:	4601      	mov	r1, r0
 800d146:	4620      	mov	r0, r4
 800d148:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d14c:	f000 ff4e 	bl	800dfec <ucdr_advance_buffer>
 800d150:	2104      	movs	r1, #4
 800d152:	4620      	mov	r0, r4
 800d154:	f000 fea6 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d158:	2800      	cmp	r0, #0
 800d15a:	d13c      	bne.n	800d1d6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d15c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d160:	42bb      	cmp	r3, r7
 800d162:	d933      	bls.n	800d1cc <ucdr_deserialize_endian_uint32_t+0x98>
 800d164:	eba3 0807 	sub.w	r8, r3, r7
 800d168:	60a3      	str	r3, [r4, #8]
 800d16a:	6923      	ldr	r3, [r4, #16]
 800d16c:	f1c8 0a04 	rsb	sl, r8, #4
 800d170:	4443      	add	r3, r8
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	4651      	mov	r1, sl
 800d176:	4620      	mov	r0, r4
 800d178:	f000 fea0 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d048      	beq.n	800d212 <ucdr_deserialize_endian_uint32_t+0xde>
 800d180:	2e01      	cmp	r6, #1
 800d182:	d061      	beq.n	800d248 <ucdr_deserialize_endian_uint32_t+0x114>
 800d184:	78fb      	ldrb	r3, [r7, #3]
 800d186:	702b      	strb	r3, [r5, #0]
 800d188:	f1b8 0f00 	cmp.w	r8, #0
 800d18c:	d050      	beq.n	800d230 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d18e:	78bb      	ldrb	r3, [r7, #2]
 800d190:	706b      	strb	r3, [r5, #1]
 800d192:	f1b8 0f01 	cmp.w	r8, #1
 800d196:	f105 0302 	add.w	r3, r5, #2
 800d19a:	d04d      	beq.n	800d238 <ucdr_deserialize_endian_uint32_t+0x104>
 800d19c:	787b      	ldrb	r3, [r7, #1]
 800d19e:	70ab      	strb	r3, [r5, #2]
 800d1a0:	f1b8 0f02 	cmp.w	r8, #2
 800d1a4:	f105 0303 	add.w	r3, r5, #3
 800d1a8:	d04a      	beq.n	800d240 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d1aa:	783b      	ldrb	r3, [r7, #0]
 800d1ac:	70eb      	strb	r3, [r5, #3]
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	68a2      	ldr	r2, [r4, #8]
 800d1b2:	7da0      	ldrb	r0, [r4, #22]
 800d1b4:	2104      	movs	r1, #4
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4452      	add	r2, sl
 800d1ba:	eba3 0308 	sub.w	r3, r3, r8
 800d1be:	7561      	strb	r1, [r4, #21]
 800d1c0:	60a2      	str	r2, [r4, #8]
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	f080 0001 	eor.w	r0, r0, #1
 800d1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1cc:	2104      	movs	r1, #4
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f000 fe74 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d1d4:	b1a8      	cbz	r0, 800d202 <ucdr_deserialize_endian_uint32_t+0xce>
 800d1d6:	2e01      	cmp	r6, #1
 800d1d8:	68a3      	ldr	r3, [r4, #8]
 800d1da:	d017      	beq.n	800d20c <ucdr_deserialize_endian_uint32_t+0xd8>
 800d1dc:	78db      	ldrb	r3, [r3, #3]
 800d1de:	702b      	strb	r3, [r5, #0]
 800d1e0:	68a3      	ldr	r3, [r4, #8]
 800d1e2:	789b      	ldrb	r3, [r3, #2]
 800d1e4:	706b      	strb	r3, [r5, #1]
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	785b      	ldrb	r3, [r3, #1]
 800d1ea:	70ab      	strb	r3, [r5, #2]
 800d1ec:	68a3      	ldr	r3, [r4, #8]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	70eb      	strb	r3, [r5, #3]
 800d1f2:	68a2      	ldr	r2, [r4, #8]
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	3204      	adds	r2, #4
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	2104      	movs	r1, #4
 800d1fc:	60a2      	str	r2, [r4, #8]
 800d1fe:	6123      	str	r3, [r4, #16]
 800d200:	7561      	strb	r1, [r4, #21]
 800d202:	7da0      	ldrb	r0, [r4, #22]
 800d204:	f080 0001 	eor.w	r0, r0, #1
 800d208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	602b      	str	r3, [r5, #0]
 800d210:	e7ef      	b.n	800d1f2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d212:	68a2      	ldr	r2, [r4, #8]
 800d214:	6923      	ldr	r3, [r4, #16]
 800d216:	7da0      	ldrb	r0, [r4, #22]
 800d218:	f884 9015 	strb.w	r9, [r4, #21]
 800d21c:	eba2 0208 	sub.w	r2, r2, r8
 800d220:	eba3 0308 	sub.w	r3, r3, r8
 800d224:	60a2      	str	r2, [r4, #8]
 800d226:	6123      	str	r3, [r4, #16]
 800d228:	f080 0001 	eor.w	r0, r0, #1
 800d22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d230:	68a3      	ldr	r3, [r4, #8]
 800d232:	789b      	ldrb	r3, [r3, #2]
 800d234:	706b      	strb	r3, [r5, #1]
 800d236:	1cab      	adds	r3, r5, #2
 800d238:	68a2      	ldr	r2, [r4, #8]
 800d23a:	7852      	ldrb	r2, [r2, #1]
 800d23c:	f803 2b01 	strb.w	r2, [r3], #1
 800d240:	68a2      	ldr	r2, [r4, #8]
 800d242:	7812      	ldrb	r2, [r2, #0]
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	e7b2      	b.n	800d1ae <ucdr_deserialize_endian_uint32_t+0x7a>
 800d248:	4639      	mov	r1, r7
 800d24a:	4642      	mov	r2, r8
 800d24c:	4628      	mov	r0, r5
 800d24e:	f00f fa22 	bl	801c696 <memcpy>
 800d252:	68a1      	ldr	r1, [r4, #8]
 800d254:	4652      	mov	r2, sl
 800d256:	eb05 0008 	add.w	r0, r5, r8
 800d25a:	f00f fa1c 	bl	801c696 <memcpy>
 800d25e:	e7a6      	b.n	800d1ae <ucdr_deserialize_endian_uint32_t+0x7a>

0800d260 <ucdr_serialize_uint64_t>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	2108      	movs	r1, #8
 800d266:	b082      	sub	sp, #8
 800d268:	4604      	mov	r4, r0
 800d26a:	e9cd 2300 	strd	r2, r3, [sp]
 800d26e:	f000 fe79 	bl	800df64 <ucdr_buffer_alignment>
 800d272:	4601      	mov	r1, r0
 800d274:	4620      	mov	r0, r4
 800d276:	7d67      	ldrb	r7, [r4, #21]
 800d278:	f000 feb8 	bl	800dfec <ucdr_advance_buffer>
 800d27c:	2108      	movs	r1, #8
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 fe10 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d284:	2800      	cmp	r0, #0
 800d286:	d14e      	bne.n	800d326 <ucdr_serialize_uint64_t+0xc6>
 800d288:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d28c:	42ab      	cmp	r3, r5
 800d28e:	d945      	bls.n	800d31c <ucdr_serialize_uint64_t+0xbc>
 800d290:	1b5e      	subs	r6, r3, r5
 800d292:	60a3      	str	r3, [r4, #8]
 800d294:	6923      	ldr	r3, [r4, #16]
 800d296:	f1c6 0808 	rsb	r8, r6, #8
 800d29a:	4433      	add	r3, r6
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	4641      	mov	r1, r8
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f000 fe0b 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d074      	beq.n	800d394 <ucdr_serialize_uint64_t+0x134>
 800d2aa:	7d23      	ldrb	r3, [r4, #20]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	f000 809b 	beq.w	800d3e8 <ucdr_serialize_uint64_t+0x188>
 800d2b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2b6:	702b      	strb	r3, [r5, #0]
 800d2b8:	2e00      	cmp	r6, #0
 800d2ba:	d078      	beq.n	800d3ae <ucdr_serialize_uint64_t+0x14e>
 800d2bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2c0:	706b      	strb	r3, [r5, #1]
 800d2c2:	2e01      	cmp	r6, #1
 800d2c4:	d077      	beq.n	800d3b6 <ucdr_serialize_uint64_t+0x156>
 800d2c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2ca:	70ab      	strb	r3, [r5, #2]
 800d2cc:	2e02      	cmp	r6, #2
 800d2ce:	d076      	beq.n	800d3be <ucdr_serialize_uint64_t+0x15e>
 800d2d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d2d4:	70eb      	strb	r3, [r5, #3]
 800d2d6:	2e03      	cmp	r6, #3
 800d2d8:	d075      	beq.n	800d3c6 <ucdr_serialize_uint64_t+0x166>
 800d2da:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d2de:	712b      	strb	r3, [r5, #4]
 800d2e0:	2e04      	cmp	r6, #4
 800d2e2:	d074      	beq.n	800d3ce <ucdr_serialize_uint64_t+0x16e>
 800d2e4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d2e8:	716b      	strb	r3, [r5, #5]
 800d2ea:	2e05      	cmp	r6, #5
 800d2ec:	d073      	beq.n	800d3d6 <ucdr_serialize_uint64_t+0x176>
 800d2ee:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d2f2:	71ab      	strb	r3, [r5, #6]
 800d2f4:	2e06      	cmp	r6, #6
 800d2f6:	d072      	beq.n	800d3de <ucdr_serialize_uint64_t+0x17e>
 800d2f8:	f89d 3000 	ldrb.w	r3, [sp]
 800d2fc:	71eb      	strb	r3, [r5, #7]
 800d2fe:	6923      	ldr	r3, [r4, #16]
 800d300:	68a2      	ldr	r2, [r4, #8]
 800d302:	7da0      	ldrb	r0, [r4, #22]
 800d304:	3308      	adds	r3, #8
 800d306:	1b9e      	subs	r6, r3, r6
 800d308:	4442      	add	r2, r8
 800d30a:	2308      	movs	r3, #8
 800d30c:	f080 0001 	eor.w	r0, r0, #1
 800d310:	60a2      	str	r2, [r4, #8]
 800d312:	6126      	str	r6, [r4, #16]
 800d314:	7563      	strb	r3, [r4, #21]
 800d316:	b002      	add	sp, #8
 800d318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d31c:	2108      	movs	r1, #8
 800d31e:	4620      	mov	r0, r4
 800d320:	f000 fdcc 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d324:	b350      	cbz	r0, 800d37c <ucdr_serialize_uint64_t+0x11c>
 800d326:	7d23      	ldrb	r3, [r4, #20]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d02d      	beq.n	800d388 <ucdr_serialize_uint64_t+0x128>
 800d32c:	68a3      	ldr	r3, [r4, #8]
 800d32e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d332:	701a      	strb	r2, [r3, #0]
 800d334:	68a3      	ldr	r3, [r4, #8]
 800d336:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d33a:	705a      	strb	r2, [r3, #1]
 800d33c:	68a3      	ldr	r3, [r4, #8]
 800d33e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d342:	709a      	strb	r2, [r3, #2]
 800d344:	68a3      	ldr	r3, [r4, #8]
 800d346:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d34a:	70da      	strb	r2, [r3, #3]
 800d34c:	68a3      	ldr	r3, [r4, #8]
 800d34e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d352:	711a      	strb	r2, [r3, #4]
 800d354:	68a3      	ldr	r3, [r4, #8]
 800d356:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d35a:	715a      	strb	r2, [r3, #5]
 800d35c:	68a3      	ldr	r3, [r4, #8]
 800d35e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d362:	719a      	strb	r2, [r3, #6]
 800d364:	68a3      	ldr	r3, [r4, #8]
 800d366:	f89d 2000 	ldrb.w	r2, [sp]
 800d36a:	71da      	strb	r2, [r3, #7]
 800d36c:	68a2      	ldr	r2, [r4, #8]
 800d36e:	6923      	ldr	r3, [r4, #16]
 800d370:	3208      	adds	r2, #8
 800d372:	3308      	adds	r3, #8
 800d374:	2108      	movs	r1, #8
 800d376:	60a2      	str	r2, [r4, #8]
 800d378:	6123      	str	r3, [r4, #16]
 800d37a:	7561      	strb	r1, [r4, #21]
 800d37c:	7da0      	ldrb	r0, [r4, #22]
 800d37e:	f080 0001 	eor.w	r0, r0, #1
 800d382:	b002      	add	sp, #8
 800d384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d388:	466b      	mov	r3, sp
 800d38a:	cb03      	ldmia	r3!, {r0, r1}
 800d38c:	68a3      	ldr	r3, [r4, #8]
 800d38e:	6018      	str	r0, [r3, #0]
 800d390:	6059      	str	r1, [r3, #4]
 800d392:	e7eb      	b.n	800d36c <ucdr_serialize_uint64_t+0x10c>
 800d394:	68a2      	ldr	r2, [r4, #8]
 800d396:	6923      	ldr	r3, [r4, #16]
 800d398:	7da0      	ldrb	r0, [r4, #22]
 800d39a:	7567      	strb	r7, [r4, #21]
 800d39c:	1b92      	subs	r2, r2, r6
 800d39e:	1b9b      	subs	r3, r3, r6
 800d3a0:	f080 0001 	eor.w	r0, r0, #1
 800d3a4:	60a2      	str	r2, [r4, #8]
 800d3a6:	6123      	str	r3, [r4, #16]
 800d3a8:	b002      	add	sp, #8
 800d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	68a3      	ldr	r3, [r4, #8]
 800d3b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d3d4:	701a      	strb	r2, [r3, #0]
 800d3d6:	68a3      	ldr	r3, [r4, #8]
 800d3d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d3dc:	701a      	strb	r2, [r3, #0]
 800d3de:	68a3      	ldr	r3, [r4, #8]
 800d3e0:	f89d 2000 	ldrb.w	r2, [sp]
 800d3e4:	701a      	strb	r2, [r3, #0]
 800d3e6:	e78a      	b.n	800d2fe <ucdr_serialize_uint64_t+0x9e>
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	466d      	mov	r5, sp
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4632      	mov	r2, r6
 800d3f0:	f00f f951 	bl	801c696 <memcpy>
 800d3f4:	68a0      	ldr	r0, [r4, #8]
 800d3f6:	4642      	mov	r2, r8
 800d3f8:	19a9      	adds	r1, r5, r6
 800d3fa:	f00f f94c 	bl	801c696 <memcpy>
 800d3fe:	e77e      	b.n	800d2fe <ucdr_serialize_uint64_t+0x9e>

0800d400 <ucdr_serialize_int16_t>:
 800d400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d404:	b082      	sub	sp, #8
 800d406:	460b      	mov	r3, r1
 800d408:	2102      	movs	r1, #2
 800d40a:	4604      	mov	r4, r0
 800d40c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d410:	f000 fda8 	bl	800df64 <ucdr_buffer_alignment>
 800d414:	4601      	mov	r1, r0
 800d416:	4620      	mov	r0, r4
 800d418:	7d67      	ldrb	r7, [r4, #21]
 800d41a:	f000 fde7 	bl	800dfec <ucdr_advance_buffer>
 800d41e:	2102      	movs	r1, #2
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fd3f 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d426:	bb78      	cbnz	r0, 800d488 <ucdr_serialize_int16_t+0x88>
 800d428:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d42c:	42ab      	cmp	r3, r5
 800d42e:	d926      	bls.n	800d47e <ucdr_serialize_int16_t+0x7e>
 800d430:	1b5e      	subs	r6, r3, r5
 800d432:	60a3      	str	r3, [r4, #8]
 800d434:	6923      	ldr	r3, [r4, #16]
 800d436:	f1c6 0802 	rsb	r8, r6, #2
 800d43a:	4433      	add	r3, r6
 800d43c:	6123      	str	r3, [r4, #16]
 800d43e:	4641      	mov	r1, r8
 800d440:	4620      	mov	r0, r4
 800d442:	f000 fd3b 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d446:	2800      	cmp	r0, #0
 800d448:	d03b      	beq.n	800d4c2 <ucdr_serialize_int16_t+0xc2>
 800d44a:	7d23      	ldrb	r3, [r4, #20]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d04a      	beq.n	800d4e6 <ucdr_serialize_int16_t+0xe6>
 800d450:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d454:	702b      	strb	r3, [r5, #0]
 800d456:	2e00      	cmp	r6, #0
 800d458:	d040      	beq.n	800d4dc <ucdr_serialize_int16_t+0xdc>
 800d45a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d45e:	706b      	strb	r3, [r5, #1]
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	68a2      	ldr	r2, [r4, #8]
 800d464:	7da0      	ldrb	r0, [r4, #22]
 800d466:	3302      	adds	r3, #2
 800d468:	1b9e      	subs	r6, r3, r6
 800d46a:	4442      	add	r2, r8
 800d46c:	2302      	movs	r3, #2
 800d46e:	f080 0001 	eor.w	r0, r0, #1
 800d472:	60a2      	str	r2, [r4, #8]
 800d474:	6126      	str	r6, [r4, #16]
 800d476:	7563      	strb	r3, [r4, #21]
 800d478:	b002      	add	sp, #8
 800d47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d47e:	2102      	movs	r1, #2
 800d480:	4620      	mov	r0, r4
 800d482:	f000 fd1b 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d486:	b190      	cbz	r0, 800d4ae <ucdr_serialize_int16_t+0xae>
 800d488:	7d23      	ldrb	r3, [r4, #20]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	68a3      	ldr	r3, [r4, #8]
 800d48e:	d014      	beq.n	800d4ba <ucdr_serialize_int16_t+0xba>
 800d490:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d494:	701a      	strb	r2, [r3, #0]
 800d496:	68a3      	ldr	r3, [r4, #8]
 800d498:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d49c:	705a      	strb	r2, [r3, #1]
 800d49e:	68a2      	ldr	r2, [r4, #8]
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	3202      	adds	r2, #2
 800d4a4:	3302      	adds	r3, #2
 800d4a6:	2102      	movs	r1, #2
 800d4a8:	60a2      	str	r2, [r4, #8]
 800d4aa:	6123      	str	r3, [r4, #16]
 800d4ac:	7561      	strb	r1, [r4, #21]
 800d4ae:	7da0      	ldrb	r0, [r4, #22]
 800d4b0:	f080 0001 	eor.w	r0, r0, #1
 800d4b4:	b002      	add	sp, #8
 800d4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d4be:	801a      	strh	r2, [r3, #0]
 800d4c0:	e7ed      	b.n	800d49e <ucdr_serialize_int16_t+0x9e>
 800d4c2:	68a2      	ldr	r2, [r4, #8]
 800d4c4:	6923      	ldr	r3, [r4, #16]
 800d4c6:	7da0      	ldrb	r0, [r4, #22]
 800d4c8:	7567      	strb	r7, [r4, #21]
 800d4ca:	1b92      	subs	r2, r2, r6
 800d4cc:	1b9b      	subs	r3, r3, r6
 800d4ce:	f080 0001 	eor.w	r0, r0, #1
 800d4d2:	60a2      	str	r2, [r4, #8]
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	b002      	add	sp, #8
 800d4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4dc:	68a3      	ldr	r3, [r4, #8]
 800d4de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4e2:	701a      	strb	r2, [r3, #0]
 800d4e4:	e7bc      	b.n	800d460 <ucdr_serialize_int16_t+0x60>
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f10d 0506 	add.w	r5, sp, #6
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	f00f f8d1 	bl	801c696 <memcpy>
 800d4f4:	68a0      	ldr	r0, [r4, #8]
 800d4f6:	4642      	mov	r2, r8
 800d4f8:	19a9      	adds	r1, r5, r6
 800d4fa:	f00f f8cc 	bl	801c696 <memcpy>
 800d4fe:	e7af      	b.n	800d460 <ucdr_serialize_int16_t+0x60>

0800d500 <ucdr_deserialize_int16_t>:
 800d500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d504:	460d      	mov	r5, r1
 800d506:	2102      	movs	r1, #2
 800d508:	4604      	mov	r4, r0
 800d50a:	f000 fd2b 	bl	800df64 <ucdr_buffer_alignment>
 800d50e:	4601      	mov	r1, r0
 800d510:	4620      	mov	r0, r4
 800d512:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d516:	f000 fd69 	bl	800dfec <ucdr_advance_buffer>
 800d51a:	2102      	movs	r1, #2
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fcc1 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d522:	bb60      	cbnz	r0, 800d57e <ucdr_deserialize_int16_t+0x7e>
 800d524:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d528:	42be      	cmp	r6, r7
 800d52a:	d923      	bls.n	800d574 <ucdr_deserialize_int16_t+0x74>
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	60a6      	str	r6, [r4, #8]
 800d530:	1bf6      	subs	r6, r6, r7
 800d532:	4433      	add	r3, r6
 800d534:	f1c6 0902 	rsb	r9, r6, #2
 800d538:	6123      	str	r3, [r4, #16]
 800d53a:	4649      	mov	r1, r9
 800d53c:	4620      	mov	r0, r4
 800d53e:	f000 fcbd 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d542:	2800      	cmp	r0, #0
 800d544:	d034      	beq.n	800d5b0 <ucdr_deserialize_int16_t+0xb0>
 800d546:	7d23      	ldrb	r3, [r4, #20]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d042      	beq.n	800d5d2 <ucdr_deserialize_int16_t+0xd2>
 800d54c:	787b      	ldrb	r3, [r7, #1]
 800d54e:	702b      	strb	r3, [r5, #0]
 800d550:	2e00      	cmp	r6, #0
 800d552:	d03a      	beq.n	800d5ca <ucdr_deserialize_int16_t+0xca>
 800d554:	783b      	ldrb	r3, [r7, #0]
 800d556:	706b      	strb	r3, [r5, #1]
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	68a2      	ldr	r2, [r4, #8]
 800d55c:	7da0      	ldrb	r0, [r4, #22]
 800d55e:	2102      	movs	r1, #2
 800d560:	3302      	adds	r3, #2
 800d562:	444a      	add	r2, r9
 800d564:	1b9b      	subs	r3, r3, r6
 800d566:	7561      	strb	r1, [r4, #21]
 800d568:	60a2      	str	r2, [r4, #8]
 800d56a:	6123      	str	r3, [r4, #16]
 800d56c:	f080 0001 	eor.w	r0, r0, #1
 800d570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d574:	2102      	movs	r1, #2
 800d576:	4620      	mov	r0, r4
 800d578:	f000 fca0 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d57c:	b180      	cbz	r0, 800d5a0 <ucdr_deserialize_int16_t+0xa0>
 800d57e:	7d23      	ldrb	r3, [r4, #20]
 800d580:	2b01      	cmp	r3, #1
 800d582:	68a3      	ldr	r3, [r4, #8]
 800d584:	d011      	beq.n	800d5aa <ucdr_deserialize_int16_t+0xaa>
 800d586:	785b      	ldrb	r3, [r3, #1]
 800d588:	702b      	strb	r3, [r5, #0]
 800d58a:	68a3      	ldr	r3, [r4, #8]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	706b      	strb	r3, [r5, #1]
 800d590:	68a2      	ldr	r2, [r4, #8]
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	3202      	adds	r2, #2
 800d596:	3302      	adds	r3, #2
 800d598:	2102      	movs	r1, #2
 800d59a:	60a2      	str	r2, [r4, #8]
 800d59c:	6123      	str	r3, [r4, #16]
 800d59e:	7561      	strb	r1, [r4, #21]
 800d5a0:	7da0      	ldrb	r0, [r4, #22]
 800d5a2:	f080 0001 	eor.w	r0, r0, #1
 800d5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	802b      	strh	r3, [r5, #0]
 800d5ae:	e7ef      	b.n	800d590 <ucdr_deserialize_int16_t+0x90>
 800d5b0:	68a2      	ldr	r2, [r4, #8]
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	7da0      	ldrb	r0, [r4, #22]
 800d5b6:	f884 8015 	strb.w	r8, [r4, #21]
 800d5ba:	1b92      	subs	r2, r2, r6
 800d5bc:	1b9b      	subs	r3, r3, r6
 800d5be:	60a2      	str	r2, [r4, #8]
 800d5c0:	6123      	str	r3, [r4, #16]
 800d5c2:	f080 0001 	eor.w	r0, r0, #1
 800d5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	706b      	strb	r3, [r5, #1]
 800d5d0:	e7c2      	b.n	800d558 <ucdr_deserialize_int16_t+0x58>
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f00f f85d 	bl	801c696 <memcpy>
 800d5dc:	68a1      	ldr	r1, [r4, #8]
 800d5de:	464a      	mov	r2, r9
 800d5e0:	19a8      	adds	r0, r5, r6
 800d5e2:	f00f f858 	bl	801c696 <memcpy>
 800d5e6:	e7b7      	b.n	800d558 <ucdr_deserialize_int16_t+0x58>

0800d5e8 <ucdr_serialize_int32_t>:
 800d5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	9101      	str	r1, [sp, #4]
 800d5f2:	2104      	movs	r1, #4
 800d5f4:	f000 fcb6 	bl	800df64 <ucdr_buffer_alignment>
 800d5f8:	4601      	mov	r1, r0
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	7d67      	ldrb	r7, [r4, #21]
 800d5fe:	f000 fcf5 	bl	800dfec <ucdr_advance_buffer>
 800d602:	2104      	movs	r1, #4
 800d604:	4620      	mov	r0, r4
 800d606:	f000 fc4d 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d60a:	2800      	cmp	r0, #0
 800d60c:	d139      	bne.n	800d682 <ucdr_serialize_int32_t+0x9a>
 800d60e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d612:	42ab      	cmp	r3, r5
 800d614:	d930      	bls.n	800d678 <ucdr_serialize_int32_t+0x90>
 800d616:	1b5e      	subs	r6, r3, r5
 800d618:	60a3      	str	r3, [r4, #8]
 800d61a:	6923      	ldr	r3, [r4, #16]
 800d61c:	f1c6 0804 	rsb	r8, r6, #4
 800d620:	4433      	add	r3, r6
 800d622:	6123      	str	r3, [r4, #16]
 800d624:	4641      	mov	r1, r8
 800d626:	4620      	mov	r0, r4
 800d628:	f000 fc48 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d04c      	beq.n	800d6ca <ucdr_serialize_int32_t+0xe2>
 800d630:	7d23      	ldrb	r3, [r4, #20]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d063      	beq.n	800d6fe <ucdr_serialize_int32_t+0x116>
 800d636:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d63a:	702b      	strb	r3, [r5, #0]
 800d63c:	2e00      	cmp	r6, #0
 800d63e:	d051      	beq.n	800d6e4 <ucdr_serialize_int32_t+0xfc>
 800d640:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d644:	706b      	strb	r3, [r5, #1]
 800d646:	2e01      	cmp	r6, #1
 800d648:	d050      	beq.n	800d6ec <ucdr_serialize_int32_t+0x104>
 800d64a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d64e:	70ab      	strb	r3, [r5, #2]
 800d650:	2e02      	cmp	r6, #2
 800d652:	d04f      	beq.n	800d6f4 <ucdr_serialize_int32_t+0x10c>
 800d654:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d658:	70eb      	strb	r3, [r5, #3]
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	68a2      	ldr	r2, [r4, #8]
 800d65e:	7da0      	ldrb	r0, [r4, #22]
 800d660:	3304      	adds	r3, #4
 800d662:	1b9e      	subs	r6, r3, r6
 800d664:	4442      	add	r2, r8
 800d666:	2304      	movs	r3, #4
 800d668:	f080 0001 	eor.w	r0, r0, #1
 800d66c:	60a2      	str	r2, [r4, #8]
 800d66e:	6126      	str	r6, [r4, #16]
 800d670:	7563      	strb	r3, [r4, #21]
 800d672:	b002      	add	sp, #8
 800d674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d678:	2104      	movs	r1, #4
 800d67a:	4620      	mov	r0, r4
 800d67c:	f000 fc1e 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d680:	b1d0      	cbz	r0, 800d6b8 <ucdr_serialize_int32_t+0xd0>
 800d682:	7d23      	ldrb	r3, [r4, #20]
 800d684:	2b01      	cmp	r3, #1
 800d686:	68a3      	ldr	r3, [r4, #8]
 800d688:	d01c      	beq.n	800d6c4 <ucdr_serialize_int32_t+0xdc>
 800d68a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d68e:	701a      	strb	r2, [r3, #0]
 800d690:	68a3      	ldr	r3, [r4, #8]
 800d692:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d696:	705a      	strb	r2, [r3, #1]
 800d698:	68a3      	ldr	r3, [r4, #8]
 800d69a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d69e:	709a      	strb	r2, [r3, #2]
 800d6a0:	68a3      	ldr	r3, [r4, #8]
 800d6a2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6a6:	70da      	strb	r2, [r3, #3]
 800d6a8:	68a2      	ldr	r2, [r4, #8]
 800d6aa:	6923      	ldr	r3, [r4, #16]
 800d6ac:	3204      	adds	r2, #4
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	2104      	movs	r1, #4
 800d6b2:	60a2      	str	r2, [r4, #8]
 800d6b4:	6123      	str	r3, [r4, #16]
 800d6b6:	7561      	strb	r1, [r4, #21]
 800d6b8:	7da0      	ldrb	r0, [r4, #22]
 800d6ba:	f080 0001 	eor.w	r0, r0, #1
 800d6be:	b002      	add	sp, #8
 800d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c4:	9a01      	ldr	r2, [sp, #4]
 800d6c6:	601a      	str	r2, [r3, #0]
 800d6c8:	e7ee      	b.n	800d6a8 <ucdr_serialize_int32_t+0xc0>
 800d6ca:	68a2      	ldr	r2, [r4, #8]
 800d6cc:	6923      	ldr	r3, [r4, #16]
 800d6ce:	7da0      	ldrb	r0, [r4, #22]
 800d6d0:	7567      	strb	r7, [r4, #21]
 800d6d2:	1b92      	subs	r2, r2, r6
 800d6d4:	1b9b      	subs	r3, r3, r6
 800d6d6:	f080 0001 	eor.w	r0, r0, #1
 800d6da:	60a2      	str	r2, [r4, #8]
 800d6dc:	6123      	str	r3, [r4, #16]
 800d6de:	b002      	add	sp, #8
 800d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e4:	68a3      	ldr	r3, [r4, #8]
 800d6e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	68a3      	ldr	r3, [r4, #8]
 800d6ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6f2:	701a      	strb	r2, [r3, #0]
 800d6f4:	68a3      	ldr	r3, [r4, #8]
 800d6f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	e7ad      	b.n	800d65a <ucdr_serialize_int32_t+0x72>
 800d6fe:	4628      	mov	r0, r5
 800d700:	ad01      	add	r5, sp, #4
 800d702:	4629      	mov	r1, r5
 800d704:	4632      	mov	r2, r6
 800d706:	f00e ffc6 	bl	801c696 <memcpy>
 800d70a:	68a0      	ldr	r0, [r4, #8]
 800d70c:	4642      	mov	r2, r8
 800d70e:	19a9      	adds	r1, r5, r6
 800d710:	f00e ffc1 	bl	801c696 <memcpy>
 800d714:	e7a1      	b.n	800d65a <ucdr_serialize_int32_t+0x72>
 800d716:	bf00      	nop

0800d718 <ucdr_deserialize_int32_t>:
 800d718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d71c:	460d      	mov	r5, r1
 800d71e:	2104      	movs	r1, #4
 800d720:	4604      	mov	r4, r0
 800d722:	f000 fc1f 	bl	800df64 <ucdr_buffer_alignment>
 800d726:	4601      	mov	r1, r0
 800d728:	4620      	mov	r0, r4
 800d72a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d72e:	f000 fc5d 	bl	800dfec <ucdr_advance_buffer>
 800d732:	2104      	movs	r1, #4
 800d734:	4620      	mov	r0, r4
 800d736:	f000 fbb5 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d73a:	2800      	cmp	r0, #0
 800d73c:	d138      	bne.n	800d7b0 <ucdr_deserialize_int32_t+0x98>
 800d73e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d742:	42b7      	cmp	r7, r6
 800d744:	d92f      	bls.n	800d7a6 <ucdr_deserialize_int32_t+0x8e>
 800d746:	6923      	ldr	r3, [r4, #16]
 800d748:	60a7      	str	r7, [r4, #8]
 800d74a:	1bbf      	subs	r7, r7, r6
 800d74c:	443b      	add	r3, r7
 800d74e:	f1c7 0904 	rsb	r9, r7, #4
 800d752:	6123      	str	r3, [r4, #16]
 800d754:	4649      	mov	r1, r9
 800d756:	4620      	mov	r0, r4
 800d758:	f000 fbb0 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d046      	beq.n	800d7ee <ucdr_deserialize_int32_t+0xd6>
 800d760:	7d23      	ldrb	r3, [r4, #20]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d05c      	beq.n	800d820 <ucdr_deserialize_int32_t+0x108>
 800d766:	78f3      	ldrb	r3, [r6, #3]
 800d768:	702b      	strb	r3, [r5, #0]
 800d76a:	2f00      	cmp	r7, #0
 800d76c:	d04c      	beq.n	800d808 <ucdr_deserialize_int32_t+0xf0>
 800d76e:	78b3      	ldrb	r3, [r6, #2]
 800d770:	706b      	strb	r3, [r5, #1]
 800d772:	2f01      	cmp	r7, #1
 800d774:	f105 0302 	add.w	r3, r5, #2
 800d778:	d04a      	beq.n	800d810 <ucdr_deserialize_int32_t+0xf8>
 800d77a:	7873      	ldrb	r3, [r6, #1]
 800d77c:	70ab      	strb	r3, [r5, #2]
 800d77e:	2f02      	cmp	r7, #2
 800d780:	f105 0303 	add.w	r3, r5, #3
 800d784:	d048      	beq.n	800d818 <ucdr_deserialize_int32_t+0x100>
 800d786:	7833      	ldrb	r3, [r6, #0]
 800d788:	70eb      	strb	r3, [r5, #3]
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	68a2      	ldr	r2, [r4, #8]
 800d78e:	7da0      	ldrb	r0, [r4, #22]
 800d790:	2104      	movs	r1, #4
 800d792:	3304      	adds	r3, #4
 800d794:	444a      	add	r2, r9
 800d796:	1bdb      	subs	r3, r3, r7
 800d798:	7561      	strb	r1, [r4, #21]
 800d79a:	60a2      	str	r2, [r4, #8]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	f080 0001 	eor.w	r0, r0, #1
 800d7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a6:	2104      	movs	r1, #4
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 fb87 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d7ae:	b1b0      	cbz	r0, 800d7de <ucdr_deserialize_int32_t+0xc6>
 800d7b0:	7d23      	ldrb	r3, [r4, #20]
 800d7b2:	2b01      	cmp	r3, #1
 800d7b4:	68a3      	ldr	r3, [r4, #8]
 800d7b6:	d017      	beq.n	800d7e8 <ucdr_deserialize_int32_t+0xd0>
 800d7b8:	78db      	ldrb	r3, [r3, #3]
 800d7ba:	702b      	strb	r3, [r5, #0]
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	789b      	ldrb	r3, [r3, #2]
 800d7c0:	706b      	strb	r3, [r5, #1]
 800d7c2:	68a3      	ldr	r3, [r4, #8]
 800d7c4:	785b      	ldrb	r3, [r3, #1]
 800d7c6:	70ab      	strb	r3, [r5, #2]
 800d7c8:	68a3      	ldr	r3, [r4, #8]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	70eb      	strb	r3, [r5, #3]
 800d7ce:	68a2      	ldr	r2, [r4, #8]
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	3204      	adds	r2, #4
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	2104      	movs	r1, #4
 800d7d8:	60a2      	str	r2, [r4, #8]
 800d7da:	6123      	str	r3, [r4, #16]
 800d7dc:	7561      	strb	r1, [r4, #21]
 800d7de:	7da0      	ldrb	r0, [r4, #22]
 800d7e0:	f080 0001 	eor.w	r0, r0, #1
 800d7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	602b      	str	r3, [r5, #0]
 800d7ec:	e7ef      	b.n	800d7ce <ucdr_deserialize_int32_t+0xb6>
 800d7ee:	68a2      	ldr	r2, [r4, #8]
 800d7f0:	6923      	ldr	r3, [r4, #16]
 800d7f2:	7da0      	ldrb	r0, [r4, #22]
 800d7f4:	f884 8015 	strb.w	r8, [r4, #21]
 800d7f8:	1bd2      	subs	r2, r2, r7
 800d7fa:	1bdb      	subs	r3, r3, r7
 800d7fc:	60a2      	str	r2, [r4, #8]
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	f080 0001 	eor.w	r0, r0, #1
 800d804:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d808:	68a3      	ldr	r3, [r4, #8]
 800d80a:	789b      	ldrb	r3, [r3, #2]
 800d80c:	706b      	strb	r3, [r5, #1]
 800d80e:	1cab      	adds	r3, r5, #2
 800d810:	68a2      	ldr	r2, [r4, #8]
 800d812:	7852      	ldrb	r2, [r2, #1]
 800d814:	f803 2b01 	strb.w	r2, [r3], #1
 800d818:	68a2      	ldr	r2, [r4, #8]
 800d81a:	7812      	ldrb	r2, [r2, #0]
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	e7b4      	b.n	800d78a <ucdr_deserialize_int32_t+0x72>
 800d820:	4631      	mov	r1, r6
 800d822:	463a      	mov	r2, r7
 800d824:	4628      	mov	r0, r5
 800d826:	f00e ff36 	bl	801c696 <memcpy>
 800d82a:	68a1      	ldr	r1, [r4, #8]
 800d82c:	464a      	mov	r2, r9
 800d82e:	19e8      	adds	r0, r5, r7
 800d830:	f00e ff31 	bl	801c696 <memcpy>
 800d834:	e7a9      	b.n	800d78a <ucdr_deserialize_int32_t+0x72>
 800d836:	bf00      	nop

0800d838 <ucdr_serialize_double>:
 800d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83c:	2108      	movs	r1, #8
 800d83e:	b082      	sub	sp, #8
 800d840:	4604      	mov	r4, r0
 800d842:	ed8d 0b00 	vstr	d0, [sp]
 800d846:	f000 fb8d 	bl	800df64 <ucdr_buffer_alignment>
 800d84a:	4601      	mov	r1, r0
 800d84c:	4620      	mov	r0, r4
 800d84e:	7d67      	ldrb	r7, [r4, #21]
 800d850:	f000 fbcc 	bl	800dfec <ucdr_advance_buffer>
 800d854:	2108      	movs	r1, #8
 800d856:	4620      	mov	r0, r4
 800d858:	f000 fb24 	bl	800dea4 <ucdr_check_buffer_available_for>
 800d85c:	2800      	cmp	r0, #0
 800d85e:	d14e      	bne.n	800d8fe <ucdr_serialize_double+0xc6>
 800d860:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d864:	42ab      	cmp	r3, r5
 800d866:	d945      	bls.n	800d8f4 <ucdr_serialize_double+0xbc>
 800d868:	1b5e      	subs	r6, r3, r5
 800d86a:	60a3      	str	r3, [r4, #8]
 800d86c:	6923      	ldr	r3, [r4, #16]
 800d86e:	f1c6 0808 	rsb	r8, r6, #8
 800d872:	4433      	add	r3, r6
 800d874:	6123      	str	r3, [r4, #16]
 800d876:	4641      	mov	r1, r8
 800d878:	4620      	mov	r0, r4
 800d87a:	f000 fb1f 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d074      	beq.n	800d96c <ucdr_serialize_double+0x134>
 800d882:	7d23      	ldrb	r3, [r4, #20]
 800d884:	2b01      	cmp	r3, #1
 800d886:	f000 809b 	beq.w	800d9c0 <ucdr_serialize_double+0x188>
 800d88a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d88e:	702b      	strb	r3, [r5, #0]
 800d890:	2e00      	cmp	r6, #0
 800d892:	d078      	beq.n	800d986 <ucdr_serialize_double+0x14e>
 800d894:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d898:	706b      	strb	r3, [r5, #1]
 800d89a:	2e01      	cmp	r6, #1
 800d89c:	d077      	beq.n	800d98e <ucdr_serialize_double+0x156>
 800d89e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d8a2:	70ab      	strb	r3, [r5, #2]
 800d8a4:	2e02      	cmp	r6, #2
 800d8a6:	d076      	beq.n	800d996 <ucdr_serialize_double+0x15e>
 800d8a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d8ac:	70eb      	strb	r3, [r5, #3]
 800d8ae:	2e03      	cmp	r6, #3
 800d8b0:	d075      	beq.n	800d99e <ucdr_serialize_double+0x166>
 800d8b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d8b6:	712b      	strb	r3, [r5, #4]
 800d8b8:	2e04      	cmp	r6, #4
 800d8ba:	d074      	beq.n	800d9a6 <ucdr_serialize_double+0x16e>
 800d8bc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d8c0:	716b      	strb	r3, [r5, #5]
 800d8c2:	2e05      	cmp	r6, #5
 800d8c4:	d073      	beq.n	800d9ae <ucdr_serialize_double+0x176>
 800d8c6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d8ca:	71ab      	strb	r3, [r5, #6]
 800d8cc:	2e06      	cmp	r6, #6
 800d8ce:	d072      	beq.n	800d9b6 <ucdr_serialize_double+0x17e>
 800d8d0:	f89d 3000 	ldrb.w	r3, [sp]
 800d8d4:	71eb      	strb	r3, [r5, #7]
 800d8d6:	6923      	ldr	r3, [r4, #16]
 800d8d8:	68a2      	ldr	r2, [r4, #8]
 800d8da:	7da0      	ldrb	r0, [r4, #22]
 800d8dc:	3308      	adds	r3, #8
 800d8de:	1b9e      	subs	r6, r3, r6
 800d8e0:	4442      	add	r2, r8
 800d8e2:	2308      	movs	r3, #8
 800d8e4:	f080 0001 	eor.w	r0, r0, #1
 800d8e8:	60a2      	str	r2, [r4, #8]
 800d8ea:	6126      	str	r6, [r4, #16]
 800d8ec:	7563      	strb	r3, [r4, #21]
 800d8ee:	b002      	add	sp, #8
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	2108      	movs	r1, #8
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f000 fae0 	bl	800debc <ucdr_check_final_buffer_behavior>
 800d8fc:	b350      	cbz	r0, 800d954 <ucdr_serialize_double+0x11c>
 800d8fe:	7d23      	ldrb	r3, [r4, #20]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d02d      	beq.n	800d960 <ucdr_serialize_double+0x128>
 800d904:	68a3      	ldr	r3, [r4, #8]
 800d906:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d90a:	701a      	strb	r2, [r3, #0]
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d912:	705a      	strb	r2, [r3, #1]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d91a:	709a      	strb	r2, [r3, #2]
 800d91c:	68a3      	ldr	r3, [r4, #8]
 800d91e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d922:	70da      	strb	r2, [r3, #3]
 800d924:	68a3      	ldr	r3, [r4, #8]
 800d926:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d92a:	711a      	strb	r2, [r3, #4]
 800d92c:	68a3      	ldr	r3, [r4, #8]
 800d92e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d932:	715a      	strb	r2, [r3, #5]
 800d934:	68a3      	ldr	r3, [r4, #8]
 800d936:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d93a:	719a      	strb	r2, [r3, #6]
 800d93c:	68a3      	ldr	r3, [r4, #8]
 800d93e:	f89d 2000 	ldrb.w	r2, [sp]
 800d942:	71da      	strb	r2, [r3, #7]
 800d944:	68a2      	ldr	r2, [r4, #8]
 800d946:	6923      	ldr	r3, [r4, #16]
 800d948:	3208      	adds	r2, #8
 800d94a:	3308      	adds	r3, #8
 800d94c:	2108      	movs	r1, #8
 800d94e:	60a2      	str	r2, [r4, #8]
 800d950:	6123      	str	r3, [r4, #16]
 800d952:	7561      	strb	r1, [r4, #21]
 800d954:	7da0      	ldrb	r0, [r4, #22]
 800d956:	f080 0001 	eor.w	r0, r0, #1
 800d95a:	b002      	add	sp, #8
 800d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d960:	466b      	mov	r3, sp
 800d962:	cb03      	ldmia	r3!, {r0, r1}
 800d964:	68a3      	ldr	r3, [r4, #8]
 800d966:	6018      	str	r0, [r3, #0]
 800d968:	6059      	str	r1, [r3, #4]
 800d96a:	e7eb      	b.n	800d944 <ucdr_serialize_double+0x10c>
 800d96c:	68a2      	ldr	r2, [r4, #8]
 800d96e:	6923      	ldr	r3, [r4, #16]
 800d970:	7da0      	ldrb	r0, [r4, #22]
 800d972:	7567      	strb	r7, [r4, #21]
 800d974:	1b92      	subs	r2, r2, r6
 800d976:	1b9b      	subs	r3, r3, r6
 800d978:	f080 0001 	eor.w	r0, r0, #1
 800d97c:	60a2      	str	r2, [r4, #8]
 800d97e:	6123      	str	r3, [r4, #16]
 800d980:	b002      	add	sp, #8
 800d982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d98c:	701a      	strb	r2, [r3, #0]
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	68a3      	ldr	r3, [r4, #8]
 800d998:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	68a3      	ldr	r3, [r4, #8]
 800d9a0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d9a4:	701a      	strb	r2, [r3, #0]
 800d9a6:	68a3      	ldr	r3, [r4, #8]
 800d9a8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9ac:	701a      	strb	r2, [r3, #0]
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	f89d 2000 	ldrb.w	r2, [sp]
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	e78a      	b.n	800d8d6 <ucdr_serialize_double+0x9e>
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	466d      	mov	r5, sp
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	f00e fe65 	bl	801c696 <memcpy>
 800d9cc:	68a0      	ldr	r0, [r4, #8]
 800d9ce:	4642      	mov	r2, r8
 800d9d0:	19a9      	adds	r1, r5, r6
 800d9d2:	f00e fe60 	bl	801c696 <memcpy>
 800d9d6:	e77e      	b.n	800d8d6 <ucdr_serialize_double+0x9e>

0800d9d8 <ucdr_serialize_endian_double>:
 800d9d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9dc:	460e      	mov	r6, r1
 800d9de:	b083      	sub	sp, #12
 800d9e0:	2108      	movs	r1, #8
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	ed8d 0b00 	vstr	d0, [sp]
 800d9e8:	f000 fabc 	bl	800df64 <ucdr_buffer_alignment>
 800d9ec:	4601      	mov	r1, r0
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9f4:	f000 fafa 	bl	800dfec <ucdr_advance_buffer>
 800d9f8:	2108      	movs	r1, #8
 800d9fa:	4620      	mov	r0, r4
 800d9fc:	f000 fa52 	bl	800dea4 <ucdr_check_buffer_available_for>
 800da00:	2800      	cmp	r0, #0
 800da02:	d14d      	bne.n	800daa0 <ucdr_serialize_endian_double+0xc8>
 800da04:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800da08:	42bd      	cmp	r5, r7
 800da0a:	d944      	bls.n	800da96 <ucdr_serialize_endian_double+0xbe>
 800da0c:	6923      	ldr	r3, [r4, #16]
 800da0e:	60a5      	str	r5, [r4, #8]
 800da10:	1bed      	subs	r5, r5, r7
 800da12:	442b      	add	r3, r5
 800da14:	f1c5 0908 	rsb	r9, r5, #8
 800da18:	6123      	str	r3, [r4, #16]
 800da1a:	4649      	mov	r1, r9
 800da1c:	4620      	mov	r0, r4
 800da1e:	f000 fa4d 	bl	800debc <ucdr_check_final_buffer_behavior>
 800da22:	2800      	cmp	r0, #0
 800da24:	d072      	beq.n	800db0c <ucdr_serialize_endian_double+0x134>
 800da26:	2e01      	cmp	r6, #1
 800da28:	f000 809b 	beq.w	800db62 <ucdr_serialize_endian_double+0x18a>
 800da2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da30:	703b      	strb	r3, [r7, #0]
 800da32:	2d00      	cmp	r5, #0
 800da34:	d078      	beq.n	800db28 <ucdr_serialize_endian_double+0x150>
 800da36:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da3a:	707b      	strb	r3, [r7, #1]
 800da3c:	2d01      	cmp	r5, #1
 800da3e:	d077      	beq.n	800db30 <ucdr_serialize_endian_double+0x158>
 800da40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da44:	70bb      	strb	r3, [r7, #2]
 800da46:	2d02      	cmp	r5, #2
 800da48:	d076      	beq.n	800db38 <ucdr_serialize_endian_double+0x160>
 800da4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da4e:	70fb      	strb	r3, [r7, #3]
 800da50:	2d03      	cmp	r5, #3
 800da52:	d075      	beq.n	800db40 <ucdr_serialize_endian_double+0x168>
 800da54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da58:	713b      	strb	r3, [r7, #4]
 800da5a:	2d04      	cmp	r5, #4
 800da5c:	d074      	beq.n	800db48 <ucdr_serialize_endian_double+0x170>
 800da5e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800da62:	717b      	strb	r3, [r7, #5]
 800da64:	2d05      	cmp	r5, #5
 800da66:	d073      	beq.n	800db50 <ucdr_serialize_endian_double+0x178>
 800da68:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800da6c:	71bb      	strb	r3, [r7, #6]
 800da6e:	2d06      	cmp	r5, #6
 800da70:	d072      	beq.n	800db58 <ucdr_serialize_endian_double+0x180>
 800da72:	f89d 3000 	ldrb.w	r3, [sp]
 800da76:	71fb      	strb	r3, [r7, #7]
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	68a2      	ldr	r2, [r4, #8]
 800da7c:	7da0      	ldrb	r0, [r4, #22]
 800da7e:	3308      	adds	r3, #8
 800da80:	1b5d      	subs	r5, r3, r5
 800da82:	444a      	add	r2, r9
 800da84:	2308      	movs	r3, #8
 800da86:	f080 0001 	eor.w	r0, r0, #1
 800da8a:	60a2      	str	r2, [r4, #8]
 800da8c:	6125      	str	r5, [r4, #16]
 800da8e:	7563      	strb	r3, [r4, #21]
 800da90:	b003      	add	sp, #12
 800da92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da96:	2108      	movs	r1, #8
 800da98:	4620      	mov	r0, r4
 800da9a:	f000 fa0f 	bl	800debc <ucdr_check_final_buffer_behavior>
 800da9e:	b348      	cbz	r0, 800daf4 <ucdr_serialize_endian_double+0x11c>
 800daa0:	2e01      	cmp	r6, #1
 800daa2:	d02d      	beq.n	800db00 <ucdr_serialize_endian_double+0x128>
 800daa4:	68a3      	ldr	r3, [r4, #8]
 800daa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800daaa:	701a      	strb	r2, [r3, #0]
 800daac:	68a3      	ldr	r3, [r4, #8]
 800daae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dab2:	705a      	strb	r2, [r3, #1]
 800dab4:	68a3      	ldr	r3, [r4, #8]
 800dab6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800daba:	709a      	strb	r2, [r3, #2]
 800dabc:	68a3      	ldr	r3, [r4, #8]
 800dabe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dac2:	70da      	strb	r2, [r3, #3]
 800dac4:	68a3      	ldr	r3, [r4, #8]
 800dac6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800daca:	711a      	strb	r2, [r3, #4]
 800dacc:	68a3      	ldr	r3, [r4, #8]
 800dace:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dad2:	715a      	strb	r2, [r3, #5]
 800dad4:	68a3      	ldr	r3, [r4, #8]
 800dad6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dada:	719a      	strb	r2, [r3, #6]
 800dadc:	68a3      	ldr	r3, [r4, #8]
 800dade:	f89d 2000 	ldrb.w	r2, [sp]
 800dae2:	71da      	strb	r2, [r3, #7]
 800dae4:	68a2      	ldr	r2, [r4, #8]
 800dae6:	6923      	ldr	r3, [r4, #16]
 800dae8:	3208      	adds	r2, #8
 800daea:	3308      	adds	r3, #8
 800daec:	2108      	movs	r1, #8
 800daee:	60a2      	str	r2, [r4, #8]
 800daf0:	6123      	str	r3, [r4, #16]
 800daf2:	7561      	strb	r1, [r4, #21]
 800daf4:	7da0      	ldrb	r0, [r4, #22]
 800daf6:	f080 0001 	eor.w	r0, r0, #1
 800dafa:	b003      	add	sp, #12
 800dafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db00:	466b      	mov	r3, sp
 800db02:	cb03      	ldmia	r3!, {r0, r1}
 800db04:	68a3      	ldr	r3, [r4, #8]
 800db06:	6018      	str	r0, [r3, #0]
 800db08:	6059      	str	r1, [r3, #4]
 800db0a:	e7eb      	b.n	800dae4 <ucdr_serialize_endian_double+0x10c>
 800db0c:	68a2      	ldr	r2, [r4, #8]
 800db0e:	6923      	ldr	r3, [r4, #16]
 800db10:	7da0      	ldrb	r0, [r4, #22]
 800db12:	f884 8015 	strb.w	r8, [r4, #21]
 800db16:	1b52      	subs	r2, r2, r5
 800db18:	1b5b      	subs	r3, r3, r5
 800db1a:	f080 0001 	eor.w	r0, r0, #1
 800db1e:	60a2      	str	r2, [r4, #8]
 800db20:	6123      	str	r3, [r4, #16]
 800db22:	b003      	add	sp, #12
 800db24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db2e:	701a      	strb	r2, [r3, #0]
 800db30:	68a3      	ldr	r3, [r4, #8]
 800db32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db3e:	701a      	strb	r2, [r3, #0]
 800db40:	68a3      	ldr	r3, [r4, #8]
 800db42:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800db46:	701a      	strb	r2, [r3, #0]
 800db48:	68a3      	ldr	r3, [r4, #8]
 800db4a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800db4e:	701a      	strb	r2, [r3, #0]
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	f89d 2000 	ldrb.w	r2, [sp]
 800db5e:	701a      	strb	r2, [r3, #0]
 800db60:	e78a      	b.n	800da78 <ucdr_serialize_endian_double+0xa0>
 800db62:	466e      	mov	r6, sp
 800db64:	4631      	mov	r1, r6
 800db66:	462a      	mov	r2, r5
 800db68:	4638      	mov	r0, r7
 800db6a:	f00e fd94 	bl	801c696 <memcpy>
 800db6e:	68a0      	ldr	r0, [r4, #8]
 800db70:	464a      	mov	r2, r9
 800db72:	1971      	adds	r1, r6, r5
 800db74:	f00e fd8f 	bl	801c696 <memcpy>
 800db78:	e77e      	b.n	800da78 <ucdr_serialize_endian_double+0xa0>
 800db7a:	bf00      	nop

0800db7c <ucdr_deserialize_double>:
 800db7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db80:	460d      	mov	r5, r1
 800db82:	2108      	movs	r1, #8
 800db84:	4604      	mov	r4, r0
 800db86:	f000 f9ed 	bl	800df64 <ucdr_buffer_alignment>
 800db8a:	4601      	mov	r1, r0
 800db8c:	4620      	mov	r0, r4
 800db8e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db92:	f000 fa2b 	bl	800dfec <ucdr_advance_buffer>
 800db96:	2108      	movs	r1, #8
 800db98:	4620      	mov	r0, r4
 800db9a:	f000 f983 	bl	800dea4 <ucdr_check_buffer_available_for>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d151      	bne.n	800dc46 <ucdr_deserialize_double+0xca>
 800dba2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dba6:	42be      	cmp	r6, r7
 800dba8:	d948      	bls.n	800dc3c <ucdr_deserialize_double+0xc0>
 800dbaa:	6923      	ldr	r3, [r4, #16]
 800dbac:	60a6      	str	r6, [r4, #8]
 800dbae:	1bf6      	subs	r6, r6, r7
 800dbb0:	4433      	add	r3, r6
 800dbb2:	f1c6 0808 	rsb	r8, r6, #8
 800dbb6:	6123      	str	r3, [r4, #16]
 800dbb8:	4641      	mov	r1, r8
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f000 f97e 	bl	800debc <ucdr_check_final_buffer_behavior>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d06d      	beq.n	800dca0 <ucdr_deserialize_double+0x124>
 800dbc4:	7d23      	ldrb	r3, [r4, #20]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	f000 8093 	beq.w	800dcf2 <ucdr_deserialize_double+0x176>
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	702b      	strb	r3, [r5, #0]
 800dbd0:	2e00      	cmp	r6, #0
 800dbd2:	d072      	beq.n	800dcba <ucdr_deserialize_double+0x13e>
 800dbd4:	79bb      	ldrb	r3, [r7, #6]
 800dbd6:	706b      	strb	r3, [r5, #1]
 800dbd8:	2e01      	cmp	r6, #1
 800dbda:	f105 0302 	add.w	r3, r5, #2
 800dbde:	d070      	beq.n	800dcc2 <ucdr_deserialize_double+0x146>
 800dbe0:	797b      	ldrb	r3, [r7, #5]
 800dbe2:	70ab      	strb	r3, [r5, #2]
 800dbe4:	2e02      	cmp	r6, #2
 800dbe6:	f105 0303 	add.w	r3, r5, #3
 800dbea:	d06e      	beq.n	800dcca <ucdr_deserialize_double+0x14e>
 800dbec:	793b      	ldrb	r3, [r7, #4]
 800dbee:	70eb      	strb	r3, [r5, #3]
 800dbf0:	2e03      	cmp	r6, #3
 800dbf2:	f105 0304 	add.w	r3, r5, #4
 800dbf6:	d06c      	beq.n	800dcd2 <ucdr_deserialize_double+0x156>
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	712b      	strb	r3, [r5, #4]
 800dbfc:	2e04      	cmp	r6, #4
 800dbfe:	f105 0305 	add.w	r3, r5, #5
 800dc02:	d06a      	beq.n	800dcda <ucdr_deserialize_double+0x15e>
 800dc04:	78bb      	ldrb	r3, [r7, #2]
 800dc06:	716b      	strb	r3, [r5, #5]
 800dc08:	2e05      	cmp	r6, #5
 800dc0a:	f105 0306 	add.w	r3, r5, #6
 800dc0e:	d068      	beq.n	800dce2 <ucdr_deserialize_double+0x166>
 800dc10:	787b      	ldrb	r3, [r7, #1]
 800dc12:	71ab      	strb	r3, [r5, #6]
 800dc14:	2e06      	cmp	r6, #6
 800dc16:	f105 0307 	add.w	r3, r5, #7
 800dc1a:	d066      	beq.n	800dcea <ucdr_deserialize_double+0x16e>
 800dc1c:	783b      	ldrb	r3, [r7, #0]
 800dc1e:	71eb      	strb	r3, [r5, #7]
 800dc20:	6923      	ldr	r3, [r4, #16]
 800dc22:	68a2      	ldr	r2, [r4, #8]
 800dc24:	7da0      	ldrb	r0, [r4, #22]
 800dc26:	3308      	adds	r3, #8
 800dc28:	1b9e      	subs	r6, r3, r6
 800dc2a:	2308      	movs	r3, #8
 800dc2c:	4442      	add	r2, r8
 800dc2e:	7563      	strb	r3, [r4, #21]
 800dc30:	60a2      	str	r2, [r4, #8]
 800dc32:	6126      	str	r6, [r4, #16]
 800dc34:	f080 0001 	eor.w	r0, r0, #1
 800dc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3c:	2108      	movs	r1, #8
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 f93c 	bl	800debc <ucdr_check_final_buffer_behavior>
 800dc44:	b310      	cbz	r0, 800dc8c <ucdr_deserialize_double+0x110>
 800dc46:	7d23      	ldrb	r3, [r4, #20]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	68a3      	ldr	r3, [r4, #8]
 800dc4c:	d023      	beq.n	800dc96 <ucdr_deserialize_double+0x11a>
 800dc4e:	79db      	ldrb	r3, [r3, #7]
 800dc50:	702b      	strb	r3, [r5, #0]
 800dc52:	68a3      	ldr	r3, [r4, #8]
 800dc54:	799b      	ldrb	r3, [r3, #6]
 800dc56:	706b      	strb	r3, [r5, #1]
 800dc58:	68a3      	ldr	r3, [r4, #8]
 800dc5a:	795b      	ldrb	r3, [r3, #5]
 800dc5c:	70ab      	strb	r3, [r5, #2]
 800dc5e:	68a3      	ldr	r3, [r4, #8]
 800dc60:	791b      	ldrb	r3, [r3, #4]
 800dc62:	70eb      	strb	r3, [r5, #3]
 800dc64:	68a3      	ldr	r3, [r4, #8]
 800dc66:	78db      	ldrb	r3, [r3, #3]
 800dc68:	712b      	strb	r3, [r5, #4]
 800dc6a:	68a3      	ldr	r3, [r4, #8]
 800dc6c:	789b      	ldrb	r3, [r3, #2]
 800dc6e:	716b      	strb	r3, [r5, #5]
 800dc70:	68a3      	ldr	r3, [r4, #8]
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	71ab      	strb	r3, [r5, #6]
 800dc76:	68a3      	ldr	r3, [r4, #8]
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	71eb      	strb	r3, [r5, #7]
 800dc7c:	68a2      	ldr	r2, [r4, #8]
 800dc7e:	6923      	ldr	r3, [r4, #16]
 800dc80:	3208      	adds	r2, #8
 800dc82:	3308      	adds	r3, #8
 800dc84:	2108      	movs	r1, #8
 800dc86:	60a2      	str	r2, [r4, #8]
 800dc88:	6123      	str	r3, [r4, #16]
 800dc8a:	7561      	strb	r1, [r4, #21]
 800dc8c:	7da0      	ldrb	r0, [r4, #22]
 800dc8e:	f080 0001 	eor.w	r0, r0, #1
 800dc92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	606b      	str	r3, [r5, #4]
 800dc9c:	602a      	str	r2, [r5, #0]
 800dc9e:	e7ed      	b.n	800dc7c <ucdr_deserialize_double+0x100>
 800dca0:	68a2      	ldr	r2, [r4, #8]
 800dca2:	6923      	ldr	r3, [r4, #16]
 800dca4:	7da0      	ldrb	r0, [r4, #22]
 800dca6:	f884 9015 	strb.w	r9, [r4, #21]
 800dcaa:	1b92      	subs	r2, r2, r6
 800dcac:	1b9b      	subs	r3, r3, r6
 800dcae:	60a2      	str	r2, [r4, #8]
 800dcb0:	6123      	str	r3, [r4, #16]
 800dcb2:	f080 0001 	eor.w	r0, r0, #1
 800dcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcba:	68a3      	ldr	r3, [r4, #8]
 800dcbc:	799b      	ldrb	r3, [r3, #6]
 800dcbe:	706b      	strb	r3, [r5, #1]
 800dcc0:	1cab      	adds	r3, r5, #2
 800dcc2:	68a2      	ldr	r2, [r4, #8]
 800dcc4:	7952      	ldrb	r2, [r2, #5]
 800dcc6:	f803 2b01 	strb.w	r2, [r3], #1
 800dcca:	68a2      	ldr	r2, [r4, #8]
 800dccc:	7912      	ldrb	r2, [r2, #4]
 800dcce:	f803 2b01 	strb.w	r2, [r3], #1
 800dcd2:	68a2      	ldr	r2, [r4, #8]
 800dcd4:	78d2      	ldrb	r2, [r2, #3]
 800dcd6:	f803 2b01 	strb.w	r2, [r3], #1
 800dcda:	68a2      	ldr	r2, [r4, #8]
 800dcdc:	7892      	ldrb	r2, [r2, #2]
 800dcde:	f803 2b01 	strb.w	r2, [r3], #1
 800dce2:	68a2      	ldr	r2, [r4, #8]
 800dce4:	7852      	ldrb	r2, [r2, #1]
 800dce6:	f803 2b01 	strb.w	r2, [r3], #1
 800dcea:	68a2      	ldr	r2, [r4, #8]
 800dcec:	7812      	ldrb	r2, [r2, #0]
 800dcee:	701a      	strb	r2, [r3, #0]
 800dcf0:	e796      	b.n	800dc20 <ucdr_deserialize_double+0xa4>
 800dcf2:	4639      	mov	r1, r7
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f00e fccd 	bl	801c696 <memcpy>
 800dcfc:	68a1      	ldr	r1, [r4, #8]
 800dcfe:	4642      	mov	r2, r8
 800dd00:	19a8      	adds	r0, r5, r6
 800dd02:	f00e fcc8 	bl	801c696 <memcpy>
 800dd06:	e78b      	b.n	800dc20 <ucdr_deserialize_double+0xa4>

0800dd08 <ucdr_deserialize_endian_double>:
 800dd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd0c:	460f      	mov	r7, r1
 800dd0e:	2108      	movs	r1, #8
 800dd10:	4604      	mov	r4, r0
 800dd12:	4615      	mov	r5, r2
 800dd14:	f000 f926 	bl	800df64 <ucdr_buffer_alignment>
 800dd18:	4601      	mov	r1, r0
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dd20:	f000 f964 	bl	800dfec <ucdr_advance_buffer>
 800dd24:	2108      	movs	r1, #8
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 f8bc 	bl	800dea4 <ucdr_check_buffer_available_for>
 800dd2c:	2800      	cmp	r0, #0
 800dd2e:	d159      	bne.n	800dde4 <ucdr_deserialize_endian_double+0xdc>
 800dd30:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800dd34:	4546      	cmp	r6, r8
 800dd36:	d950      	bls.n	800ddda <ucdr_deserialize_endian_double+0xd2>
 800dd38:	6923      	ldr	r3, [r4, #16]
 800dd3a:	60a6      	str	r6, [r4, #8]
 800dd3c:	eba6 0608 	sub.w	r6, r6, r8
 800dd40:	4433      	add	r3, r6
 800dd42:	f1c6 0a08 	rsb	sl, r6, #8
 800dd46:	6123      	str	r3, [r4, #16]
 800dd48:	4651      	mov	r1, sl
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f000 f8b6 	bl	800debc <ucdr_check_final_buffer_behavior>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d073      	beq.n	800de3c <ucdr_deserialize_endian_double+0x134>
 800dd54:	2f01      	cmp	r7, #1
 800dd56:	f000 809a 	beq.w	800de8e <ucdr_deserialize_endian_double+0x186>
 800dd5a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800dd5e:	702b      	strb	r3, [r5, #0]
 800dd60:	2e00      	cmp	r6, #0
 800dd62:	d078      	beq.n	800de56 <ucdr_deserialize_endian_double+0x14e>
 800dd64:	f898 3006 	ldrb.w	r3, [r8, #6]
 800dd68:	706b      	strb	r3, [r5, #1]
 800dd6a:	2e01      	cmp	r6, #1
 800dd6c:	f105 0302 	add.w	r3, r5, #2
 800dd70:	d075      	beq.n	800de5e <ucdr_deserialize_endian_double+0x156>
 800dd72:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dd76:	70ab      	strb	r3, [r5, #2]
 800dd78:	2e02      	cmp	r6, #2
 800dd7a:	f105 0303 	add.w	r3, r5, #3
 800dd7e:	d072      	beq.n	800de66 <ucdr_deserialize_endian_double+0x15e>
 800dd80:	f898 3004 	ldrb.w	r3, [r8, #4]
 800dd84:	70eb      	strb	r3, [r5, #3]
 800dd86:	2e03      	cmp	r6, #3
 800dd88:	f105 0304 	add.w	r3, r5, #4
 800dd8c:	d06f      	beq.n	800de6e <ucdr_deserialize_endian_double+0x166>
 800dd8e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800dd92:	712b      	strb	r3, [r5, #4]
 800dd94:	2e04      	cmp	r6, #4
 800dd96:	f105 0305 	add.w	r3, r5, #5
 800dd9a:	d06c      	beq.n	800de76 <ucdr_deserialize_endian_double+0x16e>
 800dd9c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dda0:	716b      	strb	r3, [r5, #5]
 800dda2:	2e05      	cmp	r6, #5
 800dda4:	f105 0306 	add.w	r3, r5, #6
 800dda8:	d069      	beq.n	800de7e <ucdr_deserialize_endian_double+0x176>
 800ddaa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ddae:	71ab      	strb	r3, [r5, #6]
 800ddb0:	2e06      	cmp	r6, #6
 800ddb2:	f105 0307 	add.w	r3, r5, #7
 800ddb6:	d066      	beq.n	800de86 <ucdr_deserialize_endian_double+0x17e>
 800ddb8:	f898 3000 	ldrb.w	r3, [r8]
 800ddbc:	71eb      	strb	r3, [r5, #7]
 800ddbe:	6923      	ldr	r3, [r4, #16]
 800ddc0:	68a2      	ldr	r2, [r4, #8]
 800ddc2:	7da0      	ldrb	r0, [r4, #22]
 800ddc4:	3308      	adds	r3, #8
 800ddc6:	1b9e      	subs	r6, r3, r6
 800ddc8:	2308      	movs	r3, #8
 800ddca:	4452      	add	r2, sl
 800ddcc:	7563      	strb	r3, [r4, #21]
 800ddce:	60a2      	str	r2, [r4, #8]
 800ddd0:	6126      	str	r6, [r4, #16]
 800ddd2:	f080 0001 	eor.w	r0, r0, #1
 800ddd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddda:	2108      	movs	r1, #8
 800dddc:	4620      	mov	r0, r4
 800ddde:	f000 f86d 	bl	800debc <ucdr_check_final_buffer_behavior>
 800dde2:	b308      	cbz	r0, 800de28 <ucdr_deserialize_endian_double+0x120>
 800dde4:	2f01      	cmp	r7, #1
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	d023      	beq.n	800de32 <ucdr_deserialize_endian_double+0x12a>
 800ddea:	79db      	ldrb	r3, [r3, #7]
 800ddec:	702b      	strb	r3, [r5, #0]
 800ddee:	68a3      	ldr	r3, [r4, #8]
 800ddf0:	799b      	ldrb	r3, [r3, #6]
 800ddf2:	706b      	strb	r3, [r5, #1]
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	795b      	ldrb	r3, [r3, #5]
 800ddf8:	70ab      	strb	r3, [r5, #2]
 800ddfa:	68a3      	ldr	r3, [r4, #8]
 800ddfc:	791b      	ldrb	r3, [r3, #4]
 800ddfe:	70eb      	strb	r3, [r5, #3]
 800de00:	68a3      	ldr	r3, [r4, #8]
 800de02:	78db      	ldrb	r3, [r3, #3]
 800de04:	712b      	strb	r3, [r5, #4]
 800de06:	68a3      	ldr	r3, [r4, #8]
 800de08:	789b      	ldrb	r3, [r3, #2]
 800de0a:	716b      	strb	r3, [r5, #5]
 800de0c:	68a3      	ldr	r3, [r4, #8]
 800de0e:	785b      	ldrb	r3, [r3, #1]
 800de10:	71ab      	strb	r3, [r5, #6]
 800de12:	68a3      	ldr	r3, [r4, #8]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	71eb      	strb	r3, [r5, #7]
 800de18:	68a2      	ldr	r2, [r4, #8]
 800de1a:	6923      	ldr	r3, [r4, #16]
 800de1c:	3208      	adds	r2, #8
 800de1e:	3308      	adds	r3, #8
 800de20:	2108      	movs	r1, #8
 800de22:	60a2      	str	r2, [r4, #8]
 800de24:	6123      	str	r3, [r4, #16]
 800de26:	7561      	strb	r1, [r4, #21]
 800de28:	7da0      	ldrb	r0, [r4, #22]
 800de2a:	f080 0001 	eor.w	r0, r0, #1
 800de2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	606b      	str	r3, [r5, #4]
 800de38:	602a      	str	r2, [r5, #0]
 800de3a:	e7ed      	b.n	800de18 <ucdr_deserialize_endian_double+0x110>
 800de3c:	68a2      	ldr	r2, [r4, #8]
 800de3e:	6923      	ldr	r3, [r4, #16]
 800de40:	7da0      	ldrb	r0, [r4, #22]
 800de42:	f884 9015 	strb.w	r9, [r4, #21]
 800de46:	1b92      	subs	r2, r2, r6
 800de48:	1b9b      	subs	r3, r3, r6
 800de4a:	60a2      	str	r2, [r4, #8]
 800de4c:	6123      	str	r3, [r4, #16]
 800de4e:	f080 0001 	eor.w	r0, r0, #1
 800de52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de56:	68a3      	ldr	r3, [r4, #8]
 800de58:	799b      	ldrb	r3, [r3, #6]
 800de5a:	706b      	strb	r3, [r5, #1]
 800de5c:	1cab      	adds	r3, r5, #2
 800de5e:	68a2      	ldr	r2, [r4, #8]
 800de60:	7952      	ldrb	r2, [r2, #5]
 800de62:	f803 2b01 	strb.w	r2, [r3], #1
 800de66:	68a2      	ldr	r2, [r4, #8]
 800de68:	7912      	ldrb	r2, [r2, #4]
 800de6a:	f803 2b01 	strb.w	r2, [r3], #1
 800de6e:	68a2      	ldr	r2, [r4, #8]
 800de70:	78d2      	ldrb	r2, [r2, #3]
 800de72:	f803 2b01 	strb.w	r2, [r3], #1
 800de76:	68a2      	ldr	r2, [r4, #8]
 800de78:	7892      	ldrb	r2, [r2, #2]
 800de7a:	f803 2b01 	strb.w	r2, [r3], #1
 800de7e:	68a2      	ldr	r2, [r4, #8]
 800de80:	7852      	ldrb	r2, [r2, #1]
 800de82:	f803 2b01 	strb.w	r2, [r3], #1
 800de86:	68a2      	ldr	r2, [r4, #8]
 800de88:	7812      	ldrb	r2, [r2, #0]
 800de8a:	701a      	strb	r2, [r3, #0]
 800de8c:	e797      	b.n	800ddbe <ucdr_deserialize_endian_double+0xb6>
 800de8e:	4641      	mov	r1, r8
 800de90:	4632      	mov	r2, r6
 800de92:	4628      	mov	r0, r5
 800de94:	f00e fbff 	bl	801c696 <memcpy>
 800de98:	68a1      	ldr	r1, [r4, #8]
 800de9a:	4652      	mov	r2, sl
 800de9c:	19a8      	adds	r0, r5, r6
 800de9e:	f00e fbfa 	bl	801c696 <memcpy>
 800dea2:	e78c      	b.n	800ddbe <ucdr_deserialize_endian_double+0xb6>

0800dea4 <ucdr_check_buffer_available_for>:
 800dea4:	7d83      	ldrb	r3, [r0, #22]
 800dea6:	b93b      	cbnz	r3, 800deb8 <ucdr_check_buffer_available_for+0x14>
 800dea8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800deac:	4419      	add	r1, r3
 800deae:	4288      	cmp	r0, r1
 800deb0:	bf34      	ite	cc
 800deb2:	2000      	movcc	r0, #0
 800deb4:	2001      	movcs	r0, #1
 800deb6:	4770      	bx	lr
 800deb8:	2000      	movs	r0, #0
 800deba:	4770      	bx	lr

0800debc <ucdr_check_final_buffer_behavior>:
 800debc:	7d83      	ldrb	r3, [r0, #22]
 800debe:	b943      	cbnz	r3, 800ded2 <ucdr_check_final_buffer_behavior+0x16>
 800dec0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800dec4:	4291      	cmp	r1, r2
 800dec6:	b510      	push	{r4, lr}
 800dec8:	4604      	mov	r4, r0
 800deca:	d205      	bcs.n	800ded8 <ucdr_check_final_buffer_behavior+0x1c>
 800decc:	2301      	movs	r3, #1
 800dece:	4618      	mov	r0, r3
 800ded0:	bd10      	pop	{r4, pc}
 800ded2:	2300      	movs	r3, #0
 800ded4:	4618      	mov	r0, r3
 800ded6:	4770      	bx	lr
 800ded8:	6982      	ldr	r2, [r0, #24]
 800deda:	b13a      	cbz	r2, 800deec <ucdr_check_final_buffer_behavior+0x30>
 800dedc:	69c1      	ldr	r1, [r0, #28]
 800dede:	4790      	blx	r2
 800dee0:	f080 0301 	eor.w	r3, r0, #1
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	75a0      	strb	r0, [r4, #22]
 800dee8:	4618      	mov	r0, r3
 800deea:	bd10      	pop	{r4, pc}
 800deec:	2001      	movs	r0, #1
 800deee:	75a0      	strb	r0, [r4, #22]
 800def0:	e7fa      	b.n	800dee8 <ucdr_check_final_buffer_behavior+0x2c>
 800def2:	bf00      	nop

0800def4 <ucdr_set_on_full_buffer_callback>:
 800def4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800def8:	4770      	bx	lr
 800defa:	bf00      	nop

0800defc <ucdr_init_buffer_origin_offset_endian>:
 800defc:	b410      	push	{r4}
 800defe:	9c01      	ldr	r4, [sp, #4]
 800df00:	6001      	str	r1, [r0, #0]
 800df02:	440a      	add	r2, r1
 800df04:	6042      	str	r2, [r0, #4]
 800df06:	190a      	adds	r2, r1, r4
 800df08:	441c      	add	r4, r3
 800df0a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800df0e:	6082      	str	r2, [r0, #8]
 800df10:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800df14:	7503      	strb	r3, [r0, #20]
 800df16:	2200      	movs	r2, #0
 800df18:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800df1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df20:	7542      	strb	r2, [r0, #21]
 800df22:	7582      	strb	r2, [r0, #22]
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop

0800df28 <ucdr_init_buffer_origin_offset>:
 800df28:	b510      	push	{r4, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	9c04      	ldr	r4, [sp, #16]
 800df2e:	9400      	str	r4, [sp, #0]
 800df30:	2401      	movs	r4, #1
 800df32:	9401      	str	r4, [sp, #4]
 800df34:	f7ff ffe2 	bl	800defc <ucdr_init_buffer_origin_offset_endian>
 800df38:	b002      	add	sp, #8
 800df3a:	bd10      	pop	{r4, pc}

0800df3c <ucdr_init_buffer_origin>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	2400      	movs	r4, #0
 800df42:	9400      	str	r4, [sp, #0]
 800df44:	f7ff fff0 	bl	800df28 <ucdr_init_buffer_origin_offset>
 800df48:	b002      	add	sp, #8
 800df4a:	bd10      	pop	{r4, pc}

0800df4c <ucdr_init_buffer>:
 800df4c:	2300      	movs	r3, #0
 800df4e:	f7ff bff5 	b.w	800df3c <ucdr_init_buffer_origin>
 800df52:	bf00      	nop

0800df54 <ucdr_alignment>:
 800df54:	fbb0 f3f1 	udiv	r3, r0, r1
 800df58:	fb03 0011 	mls	r0, r3, r1, r0
 800df5c:	1a08      	subs	r0, r1, r0
 800df5e:	3901      	subs	r1, #1
 800df60:	4008      	ands	r0, r1
 800df62:	4770      	bx	lr

0800df64 <ucdr_buffer_alignment>:
 800df64:	7d43      	ldrb	r3, [r0, #21]
 800df66:	428b      	cmp	r3, r1
 800df68:	d208      	bcs.n	800df7c <ucdr_buffer_alignment+0x18>
 800df6a:	6900      	ldr	r0, [r0, #16]
 800df6c:	fbb0 f3f1 	udiv	r3, r0, r1
 800df70:	fb01 0013 	mls	r0, r1, r3, r0
 800df74:	1a08      	subs	r0, r1, r0
 800df76:	3901      	subs	r1, #1
 800df78:	4008      	ands	r0, r1
 800df7a:	4770      	bx	lr
 800df7c:	2000      	movs	r0, #0
 800df7e:	4770      	bx	lr

0800df80 <ucdr_align_to>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4604      	mov	r4, r0
 800df84:	460d      	mov	r5, r1
 800df86:	f7ff ffed 	bl	800df64 <ucdr_buffer_alignment>
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	6921      	ldr	r1, [r4, #16]
 800df8e:	7565      	strb	r5, [r4, #21]
 800df90:	181a      	adds	r2, r3, r0
 800df92:	6863      	ldr	r3, [r4, #4]
 800df94:	4293      	cmp	r3, r2
 800df96:	4408      	add	r0, r1
 800df98:	bf28      	it	cs
 800df9a:	4613      	movcs	r3, r2
 800df9c:	6120      	str	r0, [r4, #16]
 800df9e:	60a3      	str	r3, [r4, #8]
 800dfa0:	bd38      	pop	{r3, r4, r5, pc}
 800dfa2:	bf00      	nop

0800dfa4 <ucdr_buffer_length>:
 800dfa4:	6882      	ldr	r2, [r0, #8]
 800dfa6:	6800      	ldr	r0, [r0, #0]
 800dfa8:	1a10      	subs	r0, r2, r0
 800dfaa:	4770      	bx	lr

0800dfac <ucdr_buffer_remaining>:
 800dfac:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800dfb0:	1a10      	subs	r0, r2, r0
 800dfb2:	4770      	bx	lr

0800dfb4 <ucdr_check_final_buffer_behavior_array>:
 800dfb4:	b538      	push	{r3, r4, r5, lr}
 800dfb6:	7d83      	ldrb	r3, [r0, #22]
 800dfb8:	b963      	cbnz	r3, 800dfd4 <ucdr_check_final_buffer_behavior_array+0x20>
 800dfba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	d308      	bcc.n	800dfd8 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfc6:	b139      	cbz	r1, 800dfd8 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfc8:	6983      	ldr	r3, [r0, #24]
 800dfca:	b163      	cbz	r3, 800dfe6 <ucdr_check_final_buffer_behavior_array+0x32>
 800dfcc:	69c1      	ldr	r1, [r0, #28]
 800dfce:	4798      	blx	r3
 800dfd0:	75a0      	strb	r0, [r4, #22]
 800dfd2:	b108      	cbz	r0, 800dfd8 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	bd38      	pop	{r3, r4, r5, pc}
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f7ff ffe7 	bl	800dfac <ucdr_buffer_remaining>
 800dfde:	42a8      	cmp	r0, r5
 800dfe0:	bf28      	it	cs
 800dfe2:	4628      	movcs	r0, r5
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	7583      	strb	r3, [r0, #22]
 800dfea:	e7f3      	b.n	800dfd4 <ucdr_check_final_buffer_behavior_array+0x20>

0800dfec <ucdr_advance_buffer>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4604      	mov	r4, r0
 800dff0:	460d      	mov	r5, r1
 800dff2:	f7ff ff57 	bl	800dea4 <ucdr_check_buffer_available_for>
 800dff6:	b178      	cbz	r0, 800e018 <ucdr_advance_buffer+0x2c>
 800dff8:	6923      	ldr	r3, [r4, #16]
 800dffa:	68a2      	ldr	r2, [r4, #8]
 800dffc:	442b      	add	r3, r5
 800dffe:	6123      	str	r3, [r4, #16]
 800e000:	2301      	movs	r3, #1
 800e002:	442a      	add	r2, r5
 800e004:	7563      	strb	r3, [r4, #21]
 800e006:	60a2      	str	r2, [r4, #8]
 800e008:	bd38      	pop	{r3, r4, r5, pc}
 800e00a:	68a2      	ldr	r2, [r4, #8]
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	4402      	add	r2, r0
 800e010:	4403      	add	r3, r0
 800e012:	1a2d      	subs	r5, r5, r0
 800e014:	60a2      	str	r2, [r4, #8]
 800e016:	6123      	str	r3, [r4, #16]
 800e018:	4629      	mov	r1, r5
 800e01a:	2201      	movs	r2, #1
 800e01c:	4620      	mov	r0, r4
 800e01e:	f7ff ffc9 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 800e022:	2800      	cmp	r0, #0
 800e024:	d1f1      	bne.n	800e00a <ucdr_advance_buffer+0x1e>
 800e026:	2301      	movs	r3, #1
 800e028:	7563      	strb	r3, [r4, #21]
 800e02a:	bd38      	pop	{r3, r4, r5, pc}

0800e02c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e02c:	4b04      	ldr	r3, [pc, #16]	@ (800e040 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	b10a      	cbz	r2, 800e036 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800e032:	4803      	ldr	r0, [pc, #12]	@ (800e040 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e034:	4770      	bx	lr
 800e036:	4a03      	ldr	r2, [pc, #12]	@ (800e044 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800e038:	4801      	ldr	r0, [pc, #4]	@ (800e040 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e03a:	6812      	ldr	r2, [r2, #0]
 800e03c:	601a      	str	r2, [r3, #0]
 800e03e:	4770      	bx	lr
 800e040:	200001c8 	.word	0x200001c8
 800e044:	2000030c 	.word	0x2000030c

0800e048 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e048:	4a02      	ldr	r2, [pc, #8]	@ (800e054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800e04a:	4b03      	ldr	r3, [pc, #12]	@ (800e058 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800e04c:	6812      	ldr	r2, [r2, #0]
 800e04e:	601a      	str	r2, [r3, #0]
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop
 800e054:	2000030c 	.word	0x2000030c
 800e058:	200001c8 	.word	0x200001c8

0800e05c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800e05c:	f008 bc74 	b.w	8016948 <nav_msgs__msg__Odometry__init>

0800e060 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800e060:	f008 bcc8 	b.w	80169f4 <nav_msgs__msg__Odometry__fini>

0800e064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e064:	b510      	push	{r4, lr}
 800e066:	f004 f915 	bl	8012294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e06a:	4c0a      	ldr	r4, [pc, #40]	@ (800e094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800e06c:	60e0      	str	r0, [r4, #12]
 800e06e:	f004 fac9 	bl	8012604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e072:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e076:	f004 faf9 	bl	801266c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e07a:	4b07      	ldr	r3, [pc, #28]	@ (800e098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e07c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	b10a      	cbz	r2, 800e088 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800e084:	4804      	ldr	r0, [pc, #16]	@ (800e098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e086:	bd10      	pop	{r4, pc}
 800e088:	4a04      	ldr	r2, [pc, #16]	@ (800e09c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800e08a:	4803      	ldr	r0, [pc, #12]	@ (800e098 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e08c:	6812      	ldr	r2, [r2, #0]
 800e08e:	601a      	str	r2, [r3, #0]
 800e090:	bd10      	pop	{r4, pc}
 800e092:	bf00      	nop
 800e094:	200001d4 	.word	0x200001d4
 800e098:	200002c4 	.word	0x200002c4
 800e09c:	20000310 	.word	0x20000310

0800e0a0 <get_serialized_size_nav_msgs__msg__Odometry>:
 800e0a0:	b5d0      	push	{r4, r6, r7, lr}
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	b1c0      	cbz	r0, 800e0d8 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800e0a6:	460f      	mov	r7, r1
 800e0a8:	f004 f92a 	bl	8012300 <get_serialized_size_std_msgs__msg__Header>
 800e0ac:	183e      	adds	r6, r7, r0
 800e0ae:	2104      	movs	r1, #4
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f7ff ff4f 	bl	800df54 <ucdr_alignment>
 800e0b6:	69a3      	ldr	r3, [r4, #24]
 800e0b8:	3305      	adds	r3, #5
 800e0ba:	4403      	add	r3, r0
 800e0bc:	441e      	add	r6, r3
 800e0be:	4631      	mov	r1, r6
 800e0c0:	f104 0020 	add.w	r0, r4, #32
 800e0c4:	f004 fae8 	bl	8012698 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e0c8:	4406      	add	r6, r0
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e0d0:	f004 fb52 	bl	8012778 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e0d4:	1bc0      	subs	r0, r0, r7
 800e0d6:	4430      	add	r0, r6
 800e0d8:	bdd0      	pop	{r4, r6, r7, pc}
 800e0da:	bf00      	nop

0800e0dc <_Odometry__cdr_deserialize>:
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	460c      	mov	r4, r1
 800e0e0:	b082      	sub	sp, #8
 800e0e2:	b351      	cbz	r1, 800e13a <_Odometry__cdr_deserialize+0x5e>
 800e0e4:	4605      	mov	r5, r0
 800e0e6:	f004 f98d 	bl	8012404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e0ea:	6843      	ldr	r3, [r0, #4]
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	4798      	blx	r3
 800e0f4:	69e6      	ldr	r6, [r4, #28]
 800e0f6:	6961      	ldr	r1, [r4, #20]
 800e0f8:	ab01      	add	r3, sp, #4
 800e0fa:	4632      	mov	r2, r6
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f004 fd93 	bl	8012c28 <ucdr_deserialize_sequence_char>
 800e102:	b9a8      	cbnz	r0, 800e130 <_Odometry__cdr_deserialize+0x54>
 800e104:	9a01      	ldr	r2, [sp, #4]
 800e106:	4296      	cmp	r6, r2
 800e108:	d31a      	bcc.n	800e140 <_Odometry__cdr_deserialize+0x64>
 800e10a:	f004 fb31 	bl	8012770 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e10e:	6843      	ldr	r3, [r0, #4]
 800e110:	f104 0120 	add.w	r1, r4, #32
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	4628      	mov	r0, r5
 800e118:	4798      	blx	r3
 800e11a:	f004 fb99 	bl	8012850 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e11e:	6843      	ldr	r3, [r0, #4]
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800e126:	4628      	mov	r0, r5
 800e128:	b002      	add	sp, #8
 800e12a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e12e:	4718      	bx	r3
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	b103      	cbz	r3, 800e136 <_Odometry__cdr_deserialize+0x5a>
 800e134:	3b01      	subs	r3, #1
 800e136:	61a3      	str	r3, [r4, #24]
 800e138:	e7e7      	b.n	800e10a <_Odometry__cdr_deserialize+0x2e>
 800e13a:	4608      	mov	r0, r1
 800e13c:	b002      	add	sp, #8
 800e13e:	bd70      	pop	{r4, r5, r6, pc}
 800e140:	2101      	movs	r1, #1
 800e142:	75a8      	strb	r0, [r5, #22]
 800e144:	7569      	strb	r1, [r5, #21]
 800e146:	61a0      	str	r0, [r4, #24]
 800e148:	4628      	mov	r0, r5
 800e14a:	f7ff ff19 	bl	800df80 <ucdr_align_to>
 800e14e:	9901      	ldr	r1, [sp, #4]
 800e150:	4628      	mov	r0, r5
 800e152:	f7ff ff4b 	bl	800dfec <ucdr_advance_buffer>
 800e156:	e7d8      	b.n	800e10a <_Odometry__cdr_deserialize+0x2e>

0800e158 <_Odometry__cdr_serialize>:
 800e158:	b348      	cbz	r0, 800e1ae <_Odometry__cdr_serialize+0x56>
 800e15a:	b570      	push	{r4, r5, r6, lr}
 800e15c:	4604      	mov	r4, r0
 800e15e:	460e      	mov	r6, r1
 800e160:	f004 f950 	bl	8012404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e164:	6843      	ldr	r3, [r0, #4]
 800e166:	4631      	mov	r1, r6
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	4620      	mov	r0, r4
 800e16c:	4798      	blx	r3
 800e16e:	6965      	ldr	r5, [r4, #20]
 800e170:	b1d5      	cbz	r5, 800e1a8 <_Odometry__cdr_serialize+0x50>
 800e172:	4628      	mov	r0, r5
 800e174:	f7f2 f856 	bl	8000224 <strlen>
 800e178:	1c42      	adds	r2, r0, #1
 800e17a:	4629      	mov	r1, r5
 800e17c:	61a0      	str	r0, [r4, #24]
 800e17e:	4630      	mov	r0, r6
 800e180:	f004 fd40 	bl	8012c04 <ucdr_serialize_sequence_char>
 800e184:	f004 faf4 	bl	8012770 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e188:	6843      	ldr	r3, [r0, #4]
 800e18a:	4631      	mov	r1, r6
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	f104 0020 	add.w	r0, r4, #32
 800e192:	4798      	blx	r3
 800e194:	f004 fb5c 	bl	8012850 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e198:	6843      	ldr	r3, [r0, #4]
 800e19a:	4631      	mov	r1, r6
 800e19c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1a6:	4718      	bx	r3
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	e7e5      	b.n	800e17a <_Odometry__cdr_serialize+0x22>
 800e1ae:	4770      	bx	lr

0800e1b0 <_Odometry__max_serialized_size>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	f10d 0007 	add.w	r0, sp, #7
 800e1bc:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1c0:	f004 f916 	bl	80123f0 <max_serialized_size_std_msgs__msg__Header>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	f10d 0007 	add.w	r0, sp, #7
 800e1ce:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1d2:	f004 fabd 	bl	8012750 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e1d6:	4404      	add	r4, r0
 800e1d8:	4621      	mov	r1, r4
 800e1da:	f10d 0007 	add.w	r0, sp, #7
 800e1de:	f004 fb27 	bl	8012830 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e1e2:	4420      	add	r0, r4
 800e1e4:	b002      	add	sp, #8
 800e1e6:	bd10      	pop	{r4, pc}

0800e1e8 <_Odometry__get_serialized_size>:
 800e1e8:	b5d0      	push	{r4, r6, r7, lr}
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	b1b8      	cbz	r0, 800e21e <_Odometry__get_serialized_size+0x36>
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	f004 f886 	bl	8012300 <get_serialized_size_std_msgs__msg__Header>
 800e1f4:	2104      	movs	r1, #4
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	f7ff feac 	bl	800df54 <ucdr_alignment>
 800e1fc:	69a3      	ldr	r3, [r4, #24]
 800e1fe:	1d5a      	adds	r2, r3, #5
 800e200:	19d3      	adds	r3, r2, r7
 800e202:	4606      	mov	r6, r0
 800e204:	441e      	add	r6, r3
 800e206:	4631      	mov	r1, r6
 800e208:	f104 0020 	add.w	r0, r4, #32
 800e20c:	f004 fa44 	bl	8012698 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e210:	4406      	add	r6, r0
 800e212:	4631      	mov	r1, r6
 800e214:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e218:	f004 faae 	bl	8012778 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e21c:	4430      	add	r0, r6
 800e21e:	bdd0      	pop	{r4, r6, r7, pc}

0800e220 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e220:	4800      	ldr	r0, [pc, #0]	@ (800e224 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800e222:	4770      	bx	lr
 800e224:	200002d0 	.word	0x200002d0

0800e228 <rcl_get_zero_initialized_context>:
 800e228:	4a03      	ldr	r2, [pc, #12]	@ (800e238 <rcl_get_zero_initialized_context+0x10>)
 800e22a:	4603      	mov	r3, r0
 800e22c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e230:	e883 0003 	stmia.w	r3, {r0, r1}
 800e234:	4618      	mov	r0, r3
 800e236:	4770      	bx	lr
 800e238:	0801ddbc 	.word	0x0801ddbc

0800e23c <rcl_context_is_valid>:
 800e23c:	b118      	cbz	r0, 800e246 <rcl_context_is_valid+0xa>
 800e23e:	6840      	ldr	r0, [r0, #4]
 800e240:	3800      	subs	r0, #0
 800e242:	bf18      	it	ne
 800e244:	2001      	movne	r0, #1
 800e246:	4770      	bx	lr

0800e248 <rcl_context_get_rmw_context>:
 800e248:	b110      	cbz	r0, 800e250 <rcl_context_get_rmw_context+0x8>
 800e24a:	6800      	ldr	r0, [r0, #0]
 800e24c:	b100      	cbz	r0, 800e250 <rcl_context_get_rmw_context+0x8>
 800e24e:	3028      	adds	r0, #40	@ 0x28
 800e250:	4770      	bx	lr
 800e252:	bf00      	nop

0800e254 <__cleanup_context>:
 800e254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e258:	4606      	mov	r6, r0
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	2300      	movs	r3, #0
 800e25e:	6073      	str	r3, [r6, #4]
 800e260:	2800      	cmp	r0, #0
 800e262:	d049      	beq.n	800e2f8 <__cleanup_context+0xa4>
 800e264:	6947      	ldr	r7, [r0, #20]
 800e266:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e26a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e26e:	b137      	cbz	r7, 800e27e <__cleanup_context+0x2a>
 800e270:	3014      	adds	r0, #20
 800e272:	f000 f8cb 	bl	800e40c <rcl_init_options_fini>
 800e276:	4607      	mov	r7, r0
 800e278:	2800      	cmp	r0, #0
 800e27a:	d144      	bne.n	800e306 <__cleanup_context+0xb2>
 800e27c:	6830      	ldr	r0, [r6, #0]
 800e27e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e280:	b143      	cbz	r3, 800e294 <__cleanup_context+0x40>
 800e282:	3028      	adds	r0, #40	@ 0x28
 800e284:	f002 ff3a 	bl	80110fc <rmw_context_fini>
 800e288:	b118      	cbz	r0, 800e292 <__cleanup_context+0x3e>
 800e28a:	2f00      	cmp	r7, #0
 800e28c:	d03e      	beq.n	800e30c <__cleanup_context+0xb8>
 800e28e:	f002 f94b 	bl	8010528 <rcutils_reset_error>
 800e292:	6830      	ldr	r0, [r6, #0]
 800e294:	6a03      	ldr	r3, [r0, #32]
 800e296:	b1db      	cbz	r3, 800e2d0 <__cleanup_context+0x7c>
 800e298:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e29c:	2a01      	cmp	r2, #1
 800e29e:	f17c 0100 	sbcs.w	r1, ip, #0
 800e2a2:	db11      	blt.n	800e2c8 <__cleanup_context+0x74>
 800e2a4:	2400      	movs	r4, #0
 800e2a6:	4625      	mov	r5, r4
 800e2a8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	b1b8      	cbz	r0, 800e2e0 <__cleanup_context+0x8c>
 800e2b0:	47c0      	blx	r8
 800e2b2:	6833      	ldr	r3, [r6, #0]
 800e2b4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e2b8:	3401      	adds	r4, #1
 800e2ba:	f145 0500 	adc.w	r5, r5, #0
 800e2be:	4294      	cmp	r4, r2
 800e2c0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	dbef      	blt.n	800e2a8 <__cleanup_context+0x54>
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	47c0      	blx	r8
 800e2ce:	6830      	ldr	r0, [r6, #0]
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	47c0      	blx	r8
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e9c6 3300 	strd	r3, r3, [r6]
 800e2da:	4638      	mov	r0, r7
 800e2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2e0:	3401      	adds	r4, #1
 800e2e2:	f145 0500 	adc.w	r5, r5, #0
 800e2e6:	4294      	cmp	r4, r2
 800e2e8:	eb75 010c 	sbcs.w	r1, r5, ip
 800e2ec:	dbdc      	blt.n	800e2a8 <__cleanup_context+0x54>
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	47c0      	blx	r8
 800e2f4:	6830      	ldr	r0, [r6, #0]
 800e2f6:	e7eb      	b.n	800e2d0 <__cleanup_context+0x7c>
 800e2f8:	4607      	mov	r7, r0
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	e9c6 3300 	strd	r3, r3, [r6]
 800e300:	4638      	mov	r0, r7
 800e302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e306:	f002 f90f 	bl	8010528 <rcutils_reset_error>
 800e30a:	e7b7      	b.n	800e27c <__cleanup_context+0x28>
 800e30c:	f008 fc16 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800e310:	4607      	mov	r7, r0
 800e312:	e7bc      	b.n	800e28e <__cleanup_context+0x3a>

0800e314 <rcl_context_fini>:
 800e314:	b178      	cbz	r0, 800e336 <rcl_context_fini+0x22>
 800e316:	b510      	push	{r4, lr}
 800e318:	4604      	mov	r4, r0
 800e31a:	6800      	ldr	r0, [r0, #0]
 800e31c:	b150      	cbz	r0, 800e334 <rcl_context_fini+0x20>
 800e31e:	6863      	ldr	r3, [r4, #4]
 800e320:	b93b      	cbnz	r3, 800e332 <rcl_context_fini+0x1e>
 800e322:	f002 f821 	bl	8010368 <rcutils_allocator_is_valid>
 800e326:	b120      	cbz	r0, 800e332 <rcl_context_fini+0x1e>
 800e328:	4620      	mov	r0, r4
 800e32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e32e:	f7ff bf91 	b.w	800e254 <__cleanup_context>
 800e332:	200b      	movs	r0, #11
 800e334:	bd10      	pop	{r4, pc}
 800e336:	200b      	movs	r0, #11
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop

0800e33c <rcl_get_zero_initialized_init_options>:
 800e33c:	2000      	movs	r0, #0
 800e33e:	4770      	bx	lr

0800e340 <rcl_init_options_init>:
 800e340:	b084      	sub	sp, #16
 800e342:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e344:	b097      	sub	sp, #92	@ 0x5c
 800e346:	ae1d      	add	r6, sp, #116	@ 0x74
 800e348:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d058      	beq.n	800e402 <rcl_init_options_init+0xc2>
 800e350:	6803      	ldr	r3, [r0, #0]
 800e352:	4605      	mov	r5, r0
 800e354:	b133      	cbz	r3, 800e364 <rcl_init_options_init+0x24>
 800e356:	2464      	movs	r4, #100	@ 0x64
 800e358:	4620      	mov	r0, r4
 800e35a:	b017      	add	sp, #92	@ 0x5c
 800e35c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e360:	b004      	add	sp, #16
 800e362:	4770      	bx	lr
 800e364:	4630      	mov	r0, r6
 800e366:	f001 ffff 	bl	8010368 <rcutils_allocator_is_valid>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d049      	beq.n	800e402 <rcl_init_options_init+0xc2>
 800e36e:	46b4      	mov	ip, r6
 800e370:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e374:	ac11      	add	r4, sp, #68	@ 0x44
 800e376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e378:	f8dc 3000 	ldr.w	r3, [ip]
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e380:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e382:	2050      	movs	r0, #80	@ 0x50
 800e384:	4798      	blx	r3
 800e386:	4604      	mov	r4, r0
 800e388:	6028      	str	r0, [r5, #0]
 800e38a:	2800      	cmp	r0, #0
 800e38c:	d03b      	beq.n	800e406 <rcl_init_options_init+0xc6>
 800e38e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e392:	4686      	mov	lr, r0
 800e394:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e398:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e39c:	f8dc 3000 	ldr.w	r3, [ip]
 800e3a0:	f8ce 3000 	str.w	r3, [lr]
 800e3a4:	a802      	add	r0, sp, #8
 800e3a6:	f002 fa83 	bl	80108b0 <rmw_get_zero_initialized_init_options>
 800e3aa:	f10d 0e08 	add.w	lr, sp, #8
 800e3ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3b2:	f104 0c18 	add.w	ip, r4, #24
 800e3b6:	682f      	ldr	r7, [r5, #0]
 800e3b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e3d0:	ac20      	add	r4, sp, #128	@ 0x80
 800e3d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e3d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e3da:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e3de:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e3e2:	f107 0018 	add.w	r0, r7, #24
 800e3e6:	f002 fbcd 	bl	8010b84 <rmw_init_options_init>
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d0b3      	beq.n	800e358 <rcl_init_options_init+0x18>
 800e3f0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e3f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e3f4:	6828      	ldr	r0, [r5, #0]
 800e3f6:	4798      	blx	r3
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f008 fb9f 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800e3fe:	4604      	mov	r4, r0
 800e400:	e7aa      	b.n	800e358 <rcl_init_options_init+0x18>
 800e402:	240b      	movs	r4, #11
 800e404:	e7a8      	b.n	800e358 <rcl_init_options_init+0x18>
 800e406:	240a      	movs	r4, #10
 800e408:	e7a6      	b.n	800e358 <rcl_init_options_init+0x18>
 800e40a:	bf00      	nop

0800e40c <rcl_init_options_fini>:
 800e40c:	b530      	push	{r4, r5, lr}
 800e40e:	b087      	sub	sp, #28
 800e410:	b1f0      	cbz	r0, 800e450 <rcl_init_options_fini+0x44>
 800e412:	6803      	ldr	r3, [r0, #0]
 800e414:	4604      	mov	r4, r0
 800e416:	b1db      	cbz	r3, 800e450 <rcl_init_options_fini+0x44>
 800e418:	469c      	mov	ip, r3
 800e41a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e41e:	f10d 0e04 	add.w	lr, sp, #4
 800e422:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e426:	f8dc 3000 	ldr.w	r3, [ip]
 800e42a:	f8ce 3000 	str.w	r3, [lr]
 800e42e:	a801      	add	r0, sp, #4
 800e430:	f001 ff9a 	bl	8010368 <rcutils_allocator_is_valid>
 800e434:	b160      	cbz	r0, 800e450 <rcl_init_options_fini+0x44>
 800e436:	6820      	ldr	r0, [r4, #0]
 800e438:	3018      	adds	r0, #24
 800e43a:	f002 fc79 	bl	8010d30 <rmw_init_options_fini>
 800e43e:	4605      	mov	r5, r0
 800e440:	b950      	cbnz	r0, 800e458 <rcl_init_options_fini+0x4c>
 800e442:	6820      	ldr	r0, [r4, #0]
 800e444:	9b02      	ldr	r3, [sp, #8]
 800e446:	9905      	ldr	r1, [sp, #20]
 800e448:	4798      	blx	r3
 800e44a:	4628      	mov	r0, r5
 800e44c:	b007      	add	sp, #28
 800e44e:	bd30      	pop	{r4, r5, pc}
 800e450:	250b      	movs	r5, #11
 800e452:	4628      	mov	r0, r5
 800e454:	b007      	add	sp, #28
 800e456:	bd30      	pop	{r4, r5, pc}
 800e458:	f008 fb70 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800e45c:	4605      	mov	r5, r0
 800e45e:	e7f8      	b.n	800e452 <rcl_init_options_fini+0x46>

0800e460 <rcl_init_options_copy>:
 800e460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e464:	b094      	sub	sp, #80	@ 0x50
 800e466:	2800      	cmp	r0, #0
 800e468:	d058      	beq.n	800e51c <rcl_init_options_copy+0xbc>
 800e46a:	4604      	mov	r4, r0
 800e46c:	6800      	ldr	r0, [r0, #0]
 800e46e:	2800      	cmp	r0, #0
 800e470:	d054      	beq.n	800e51c <rcl_init_options_copy+0xbc>
 800e472:	460e      	mov	r6, r1
 800e474:	f001 ff78 	bl	8010368 <rcutils_allocator_is_valid>
 800e478:	2800      	cmp	r0, #0
 800e47a:	d04f      	beq.n	800e51c <rcl_init_options_copy+0xbc>
 800e47c:	2e00      	cmp	r6, #0
 800e47e:	d04d      	beq.n	800e51c <rcl_init_options_copy+0xbc>
 800e480:	6833      	ldr	r3, [r6, #0]
 800e482:	b123      	cbz	r3, 800e48e <rcl_init_options_copy+0x2e>
 800e484:	2464      	movs	r4, #100	@ 0x64
 800e486:	4620      	mov	r0, r4
 800e488:	b014      	add	sp, #80	@ 0x50
 800e48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48e:	6827      	ldr	r7, [r4, #0]
 800e490:	46bc      	mov	ip, r7
 800e492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e496:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e49a:	f8dc 3000 	ldr.w	r3, [ip]
 800e49e:	f8d7 8000 	ldr.w	r8, [r7]
 800e4a2:	602b      	str	r3, [r5, #0]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	2050      	movs	r0, #80	@ 0x50
 800e4a8:	47c0      	blx	r8
 800e4aa:	4605      	mov	r5, r0
 800e4ac:	6030      	str	r0, [r6, #0]
 800e4ae:	b3d0      	cbz	r0, 800e526 <rcl_init_options_copy+0xc6>
 800e4b0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e4b4:	4686      	mov	lr, r0
 800e4b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e4ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e4be:	f8dc 3000 	ldr.w	r3, [ip]
 800e4c2:	f8ce 3000 	str.w	r3, [lr]
 800e4c6:	4668      	mov	r0, sp
 800e4c8:	f002 f9f2 	bl	80108b0 <rmw_get_zero_initialized_init_options>
 800e4cc:	46ee      	mov	lr, sp
 800e4ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4d2:	f105 0c18 	add.w	ip, r5, #24
 800e4d6:	6824      	ldr	r4, [r4, #0]
 800e4d8:	6835      	ldr	r5, [r6, #0]
 800e4da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4ee:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e4f2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e4f6:	f104 0018 	add.w	r0, r4, #24
 800e4fa:	f105 0118 	add.w	r1, r5, #24
 800e4fe:	f002 fba3 	bl	8010c48 <rmw_init_options_copy>
 800e502:	4604      	mov	r4, r0
 800e504:	2800      	cmp	r0, #0
 800e506:	d0be      	beq.n	800e486 <rcl_init_options_copy+0x26>
 800e508:	f001 fff8 	bl	80104fc <rcutils_get_error_string>
 800e50c:	f002 f80c 	bl	8010528 <rcutils_reset_error>
 800e510:	4630      	mov	r0, r6
 800e512:	f7ff ff7b 	bl	800e40c <rcl_init_options_fini>
 800e516:	b140      	cbz	r0, 800e52a <rcl_init_options_copy+0xca>
 800e518:	4604      	mov	r4, r0
 800e51a:	e7b4      	b.n	800e486 <rcl_init_options_copy+0x26>
 800e51c:	240b      	movs	r4, #11
 800e51e:	4620      	mov	r0, r4
 800e520:	b014      	add	sp, #80	@ 0x50
 800e522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e526:	240a      	movs	r4, #10
 800e528:	e7ad      	b.n	800e486 <rcl_init_options_copy+0x26>
 800e52a:	4620      	mov	r0, r4
 800e52c:	b014      	add	sp, #80	@ 0x50
 800e52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e532:	f008 bb03 	b.w	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800e536:	bf00      	nop

0800e538 <rcl_init_options_set_domain_id>:
 800e538:	b120      	cbz	r0, 800e544 <rcl_init_options_set_domain_id+0xc>
 800e53a:	6803      	ldr	r3, [r0, #0]
 800e53c:	b113      	cbz	r3, 800e544 <rcl_init_options_set_domain_id+0xc>
 800e53e:	6259      	str	r1, [r3, #36]	@ 0x24
 800e540:	2000      	movs	r0, #0
 800e542:	4770      	bx	lr
 800e544:	200b      	movs	r0, #11
 800e546:	4770      	bx	lr

0800e548 <rcl_get_zero_initialized_node>:
 800e548:	4a03      	ldr	r2, [pc, #12]	@ (800e558 <rcl_get_zero_initialized_node+0x10>)
 800e54a:	4603      	mov	r3, r0
 800e54c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e550:	e883 0003 	stmia.w	r3, {r0, r1}
 800e554:	4618      	mov	r0, r3
 800e556:	4770      	bx	lr
 800e558:	0801ddc4 	.word	0x0801ddc4

0800e55c <rcl_node_init>:
 800e55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e560:	b0a9      	sub	sp, #164	@ 0xa4
 800e562:	4604      	mov	r4, r0
 800e564:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800e568:	a823      	add	r0, sp, #140	@ 0x8c
 800e56a:	460e      	mov	r6, r1
 800e56c:	4615      	mov	r5, r2
 800e56e:	461f      	mov	r7, r3
 800e570:	f008 fbd4 	bl	8016d1c <rcl_guard_condition_get_default_options>
 800e574:	f1b8 0f00 	cmp.w	r8, #0
 800e578:	f000 80e6 	beq.w	800e748 <rcl_node_init+0x1ec>
 800e57c:	4640      	mov	r0, r8
 800e57e:	f001 fef3 	bl	8010368 <rcutils_allocator_is_valid>
 800e582:	2800      	cmp	r0, #0
 800e584:	f000 80e0 	beq.w	800e748 <rcl_node_init+0x1ec>
 800e588:	2e00      	cmp	r6, #0
 800e58a:	f000 80dd 	beq.w	800e748 <rcl_node_init+0x1ec>
 800e58e:	2d00      	cmp	r5, #0
 800e590:	f000 80da 	beq.w	800e748 <rcl_node_init+0x1ec>
 800e594:	2c00      	cmp	r4, #0
 800e596:	f000 80d7 	beq.w	800e748 <rcl_node_init+0x1ec>
 800e59a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e59e:	f1b9 0f00 	cmp.w	r9, #0
 800e5a2:	f040 80fd 	bne.w	800e7a0 <rcl_node_init+0x244>
 800e5a6:	2f00      	cmp	r7, #0
 800e5a8:	f000 80ce 	beq.w	800e748 <rcl_node_init+0x1ec>
 800e5ac:	4638      	mov	r0, r7
 800e5ae:	f7ff fe45 	bl	800e23c <rcl_context_is_valid>
 800e5b2:	4682      	mov	sl, r0
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f000 80cd 	beq.w	800e754 <rcl_node_init+0x1f8>
 800e5ba:	464a      	mov	r2, r9
 800e5bc:	a922      	add	r1, sp, #136	@ 0x88
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800e5c4:	f002 fa20 	bl	8010a08 <rmw_validate_node_name>
 800e5c8:	4681      	mov	r9, r0
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	f040 80be 	bne.w	800e74c <rcl_node_init+0x1f0>
 800e5d0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f040 80f0 	bne.w	800e7b8 <rcl_node_init+0x25c>
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f7f1 fe23 	bl	8000224 <strlen>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f040 80bb 	bne.w	800e75a <rcl_node_init+0x1fe>
 800e5e4:	4d7c      	ldr	r5, [pc, #496]	@ (800e7d8 <rcl_node_init+0x27c>)
 800e5e6:	a922      	add	r1, sp, #136	@ 0x88
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f002 f9ee 	bl	80109cc <rmw_validate_namespace>
 800e5f0:	4681      	mov	r9, r0
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f040 80aa 	bne.w	800e74c <rcl_node_init+0x1f0>
 800e5f8:	4682      	mov	sl, r0
 800e5fa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f040 80e0 	bne.w	800e7c2 <rcl_node_init+0x266>
 800e602:	f8d8 3000 	ldr.w	r3, [r8]
 800e606:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e60a:	2078      	movs	r0, #120	@ 0x78
 800e60c:	4798      	blx	r3
 800e60e:	4681      	mov	r9, r0
 800e610:	6060      	str	r0, [r4, #4]
 800e612:	2800      	cmp	r0, #0
 800e614:	f000 80ca 	beq.w	800e7ac <rcl_node_init+0x250>
 800e618:	2200      	movs	r2, #0
 800e61a:	2300      	movs	r3, #0
 800e61c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800e620:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800e624:	a808      	add	r0, sp, #32
 800e626:	f000 f939 	bl	800e89c <rcl_node_get_default_options>
 800e62a:	a908      	add	r1, sp, #32
 800e62c:	4648      	mov	r0, r9
 800e62e:	2268      	movs	r2, #104	@ 0x68
 800e630:	f00e f831 	bl	801c696 <memcpy>
 800e634:	6861      	ldr	r1, [r4, #4]
 800e636:	6027      	str	r7, [r4, #0]
 800e638:	4640      	mov	r0, r8
 800e63a:	f000 f93d 	bl	800e8b8 <rcl_node_options_copy>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d158      	bne.n	800e6f4 <rcl_node_init+0x198>
 800e642:	4628      	mov	r0, r5
 800e644:	f7f1 fdee 	bl	8000224 <strlen>
 800e648:	4428      	add	r0, r5
 800e64a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e64e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e652:	2b2f      	cmp	r3, #47	@ 0x2f
 800e654:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	bf0c      	ite	eq
 800e65c:	4b5f      	ldreq	r3, [pc, #380]	@ (800e7dc <rcl_node_init+0x280>)
 800e65e:	4b60      	ldrne	r3, [pc, #384]	@ (800e7e0 <rcl_node_init+0x284>)
 800e660:	9302      	str	r3, [sp, #8]
 800e662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e66c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e670:	f001 ff76 	bl	8010560 <rcutils_format_string_limit>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800e67a:	6818      	ldr	r0, [r3, #0]
 800e67c:	4631      	mov	r1, r6
 800e67e:	3028      	adds	r0, #40	@ 0x28
 800e680:	462a      	mov	r2, r5
 800e682:	6866      	ldr	r6, [r4, #4]
 800e684:	f002 fde6 	bl	8011254 <rmw_create_node>
 800e688:	6863      	ldr	r3, [r4, #4]
 800e68a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800e68c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e68e:	2800      	cmp	r0, #0
 800e690:	d032      	beq.n	800e6f8 <rcl_node_init+0x19c>
 800e692:	f002 fe73 	bl	801137c <rmw_node_get_graph_guard_condition>
 800e696:	4681      	mov	r9, r0
 800e698:	b360      	cbz	r0, 800e6f4 <rcl_node_init+0x198>
 800e69a:	f8d8 3000 	ldr.w	r3, [r8]
 800e69e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e6a2:	6866      	ldr	r6, [r4, #4]
 800e6a4:	2008      	movs	r0, #8
 800e6a6:	4798      	blx	r3
 800e6a8:	6863      	ldr	r3, [r4, #4]
 800e6aa:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800e6ac:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800e6b0:	f1bb 0f00 	cmp.w	fp, #0
 800e6b4:	d020      	beq.n	800e6f8 <rcl_node_init+0x19c>
 800e6b6:	a806      	add	r0, sp, #24
 800e6b8:	f008 fa54 	bl	8016b64 <rcl_get_zero_initialized_guard_condition>
 800e6bc:	a806      	add	r0, sp, #24
 800e6be:	c803      	ldmia	r0, {r0, r1}
 800e6c0:	6863      	ldr	r3, [r4, #4]
 800e6c2:	46c4      	mov	ip, r8
 800e6c4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800e6c8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e6cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6d0:	ae23      	add	r6, sp, #140	@ 0x8c
 800e6d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e6d4:	f8dc 3000 	ldr.w	r3, [ip]
 800e6d8:	6033      	str	r3, [r6, #0]
 800e6da:	ab28      	add	r3, sp, #160	@ 0xa0
 800e6dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e6e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e6e4:	4649      	mov	r1, r9
 800e6e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6e8:	463a      	mov	r2, r7
 800e6ea:	4670      	mov	r0, lr
 800e6ec:	f008 fa90 	bl	8016c10 <rcl_guard_condition_init_from_rmw>
 800e6f0:	4681      	mov	r9, r0
 800e6f2:	b328      	cbz	r0, 800e740 <rcl_node_init+0x1e4>
 800e6f4:	6863      	ldr	r3, [r4, #4]
 800e6f6:	b1f3      	cbz	r3, 800e736 <rcl_node_init+0x1da>
 800e6f8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e6fa:	b128      	cbz	r0, 800e708 <rcl_node_init+0x1ac>
 800e6fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e700:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e704:	4798      	blx	r3
 800e706:	6863      	ldr	r3, [r4, #4]
 800e708:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e70a:	b110      	cbz	r0, 800e712 <rcl_node_init+0x1b6>
 800e70c:	f002 fdba 	bl	8011284 <rmw_destroy_node>
 800e710:	6863      	ldr	r3, [r4, #4]
 800e712:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e714:	b148      	cbz	r0, 800e72a <rcl_node_init+0x1ce>
 800e716:	f008 fadb 	bl	8016cd0 <rcl_guard_condition_fini>
 800e71a:	6863      	ldr	r3, [r4, #4]
 800e71c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e720:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e722:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e726:	4798      	blx	r3
 800e728:	6863      	ldr	r3, [r4, #4]
 800e72a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e72e:	4618      	mov	r0, r3
 800e730:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e734:	4798      	blx	r3
 800e736:	2300      	movs	r3, #0
 800e738:	e9c4 3300 	strd	r3, r3, [r4]
 800e73c:	f04f 0901 	mov.w	r9, #1
 800e740:	f1ba 0f00 	cmp.w	sl, #0
 800e744:	d125      	bne.n	800e792 <rcl_node_init+0x236>
 800e746:	e001      	b.n	800e74c <rcl_node_init+0x1f0>
 800e748:	f04f 090b 	mov.w	r9, #11
 800e74c:	4648      	mov	r0, r9
 800e74e:	b029      	add	sp, #164	@ 0xa4
 800e750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e754:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800e758:	e7f8      	b.n	800e74c <rcl_node_init+0x1f0>
 800e75a:	782b      	ldrb	r3, [r5, #0]
 800e75c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e75e:	f43f af42 	beq.w	800e5e6 <rcl_node_init+0x8a>
 800e762:	9503      	str	r5, [sp, #12]
 800e764:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7e4 <rcl_node_init+0x288>)
 800e76c:	9302      	str	r3, [sp, #8]
 800e76e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e778:	f001 fef2 	bl	8010560 <rcutils_format_string_limit>
 800e77c:	4605      	mov	r5, r0
 800e77e:	b340      	cbz	r0, 800e7d2 <rcl_node_init+0x276>
 800e780:	2200      	movs	r2, #0
 800e782:	a922      	add	r1, sp, #136	@ 0x88
 800e784:	9222      	str	r2, [sp, #136]	@ 0x88
 800e786:	f002 f921 	bl	80109cc <rmw_validate_namespace>
 800e78a:	4681      	mov	r9, r0
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f43f af34 	beq.w	800e5fa <rcl_node_init+0x9e>
 800e792:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e796:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e79a:	4628      	mov	r0, r5
 800e79c:	4798      	blx	r3
 800e79e:	e7d5      	b.n	800e74c <rcl_node_init+0x1f0>
 800e7a0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800e7a4:	4648      	mov	r0, r9
 800e7a6:	b029      	add	sp, #164	@ 0xa4
 800e7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ac:	f04f 090a 	mov.w	r9, #10
 800e7b0:	f1ba 0f00 	cmp.w	sl, #0
 800e7b4:	d1ed      	bne.n	800e792 <rcl_node_init+0x236>
 800e7b6:	e7c9      	b.n	800e74c <rcl_node_init+0x1f0>
 800e7b8:	f002 f978 	bl	8010aac <rmw_node_name_validation_result_string>
 800e7bc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800e7c0:	e7c4      	b.n	800e74c <rcl_node_init+0x1f0>
 800e7c2:	f002 f915 	bl	80109f0 <rmw_namespace_validation_result_string>
 800e7c6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800e7ca:	f1ba 0f00 	cmp.w	sl, #0
 800e7ce:	d1e0      	bne.n	800e792 <rcl_node_init+0x236>
 800e7d0:	e7bc      	b.n	800e74c <rcl_node_init+0x1f0>
 800e7d2:	f04f 090a 	mov.w	r9, #10
 800e7d6:	e7b9      	b.n	800e74c <rcl_node_init+0x1f0>
 800e7d8:	0801d6ac 	.word	0x0801d6ac
 800e7dc:	0801d6b4 	.word	0x0801d6b4
 800e7e0:	0801d6bc 	.word	0x0801d6bc
 800e7e4:	0801d6b0 	.word	0x0801d6b0

0800e7e8 <rcl_node_fini>:
 800e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ea:	b320      	cbz	r0, 800e836 <rcl_node_fini+0x4e>
 800e7ec:	6845      	ldr	r5, [r0, #4]
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	b1fd      	cbz	r5, 800e832 <rcl_node_fini+0x4a>
 800e7f2:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800e7f4:	686f      	ldr	r7, [r5, #4]
 800e7f6:	692e      	ldr	r6, [r5, #16]
 800e7f8:	f002 fd44 	bl	8011284 <rmw_destroy_node>
 800e7fc:	6863      	ldr	r3, [r4, #4]
 800e7fe:	4605      	mov	r5, r0
 800e800:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e802:	f008 fa65 	bl	8016cd0 <rcl_guard_condition_fini>
 800e806:	ea55 0300 	orrs.w	r3, r5, r0
 800e80a:	6863      	ldr	r3, [r4, #4]
 800e80c:	4631      	mov	r1, r6
 800e80e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e810:	bf14      	ite	ne
 800e812:	2501      	movne	r5, #1
 800e814:	2500      	moveq	r5, #0
 800e816:	47b8      	blx	r7
 800e818:	6863      	ldr	r3, [r4, #4]
 800e81a:	4631      	mov	r1, r6
 800e81c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800e81e:	47b8      	blx	r7
 800e820:	6863      	ldr	r3, [r4, #4]
 800e822:	4631      	mov	r1, r6
 800e824:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e826:	47b8      	blx	r7
 800e828:	6860      	ldr	r0, [r4, #4]
 800e82a:	4631      	mov	r1, r6
 800e82c:	47b8      	blx	r7
 800e82e:	2300      	movs	r3, #0
 800e830:	6063      	str	r3, [r4, #4]
 800e832:	4628      	mov	r0, r5
 800e834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e836:	25c8      	movs	r5, #200	@ 0xc8
 800e838:	4628      	mov	r0, r5
 800e83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e83c <rcl_node_is_valid_except_context>:
 800e83c:	b128      	cbz	r0, 800e84a <rcl_node_is_valid_except_context+0xe>
 800e83e:	6840      	ldr	r0, [r0, #4]
 800e840:	b118      	cbz	r0, 800e84a <rcl_node_is_valid_except_context+0xe>
 800e842:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e844:	3800      	subs	r0, #0
 800e846:	bf18      	it	ne
 800e848:	2001      	movne	r0, #1
 800e84a:	4770      	bx	lr

0800e84c <rcl_node_is_valid>:
 800e84c:	b130      	cbz	r0, 800e85c <rcl_node_is_valid+0x10>
 800e84e:	6843      	ldr	r3, [r0, #4]
 800e850:	b123      	cbz	r3, 800e85c <rcl_node_is_valid+0x10>
 800e852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e854:	b113      	cbz	r3, 800e85c <rcl_node_is_valid+0x10>
 800e856:	6800      	ldr	r0, [r0, #0]
 800e858:	f7ff bcf0 	b.w	800e23c <rcl_context_is_valid>
 800e85c:	2000      	movs	r0, #0
 800e85e:	4770      	bx	lr

0800e860 <rcl_node_get_name>:
 800e860:	b120      	cbz	r0, 800e86c <rcl_node_get_name+0xc>
 800e862:	6840      	ldr	r0, [r0, #4]
 800e864:	b110      	cbz	r0, 800e86c <rcl_node_get_name+0xc>
 800e866:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e868:	b100      	cbz	r0, 800e86c <rcl_node_get_name+0xc>
 800e86a:	6880      	ldr	r0, [r0, #8]
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop

0800e870 <rcl_node_get_namespace>:
 800e870:	b120      	cbz	r0, 800e87c <rcl_node_get_namespace+0xc>
 800e872:	6840      	ldr	r0, [r0, #4]
 800e874:	b110      	cbz	r0, 800e87c <rcl_node_get_namespace+0xc>
 800e876:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e878:	b100      	cbz	r0, 800e87c <rcl_node_get_namespace+0xc>
 800e87a:	68c0      	ldr	r0, [r0, #12]
 800e87c:	4770      	bx	lr
 800e87e:	bf00      	nop

0800e880 <rcl_node_get_options>:
 800e880:	b128      	cbz	r0, 800e88e <rcl_node_get_options+0xe>
 800e882:	6840      	ldr	r0, [r0, #4]
 800e884:	b118      	cbz	r0, 800e88e <rcl_node_get_options+0xe>
 800e886:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800e888:	2b00      	cmp	r3, #0
 800e88a:	bf08      	it	eq
 800e88c:	2000      	moveq	r0, #0
 800e88e:	4770      	bx	lr

0800e890 <rcl_node_get_rmw_handle>:
 800e890:	b110      	cbz	r0, 800e898 <rcl_node_get_rmw_handle+0x8>
 800e892:	6840      	ldr	r0, [r0, #4]
 800e894:	b100      	cbz	r0, 800e898 <rcl_node_get_rmw_handle+0x8>
 800e896:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e898:	4770      	bx	lr
 800e89a:	bf00      	nop

0800e89c <rcl_node_get_default_options>:
 800e89c:	b510      	push	{r4, lr}
 800e89e:	2268      	movs	r2, #104	@ 0x68
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	f00d fe2e 	bl	801c504 <memset>
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f001 fd4f 	bl	801034c <rcutils_get_default_allocator>
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	7523      	strb	r3, [r4, #20]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	bd10      	pop	{r4, pc}
 800e8b6:	bf00      	nop

0800e8b8 <rcl_node_options_copy>:
 800e8b8:	b1d0      	cbz	r0, 800e8f0 <rcl_node_options_copy+0x38>
 800e8ba:	b570      	push	{r4, r5, r6, lr}
 800e8bc:	460c      	mov	r4, r1
 800e8be:	b1a9      	cbz	r1, 800e8ec <rcl_node_options_copy+0x34>
 800e8c0:	4288      	cmp	r0, r1
 800e8c2:	4684      	mov	ip, r0
 800e8c4:	d012      	beq.n	800e8ec <rcl_node_options_copy+0x34>
 800e8c6:	4605      	mov	r5, r0
 800e8c8:	8a86      	ldrh	r6, [r0, #20]
 800e8ca:	468e      	mov	lr, r1
 800e8cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8d2:	682b      	ldr	r3, [r5, #0]
 800e8d4:	f8ce 3000 	str.w	r3, [lr]
 800e8d8:	f10c 0118 	add.w	r1, ip, #24
 800e8dc:	2250      	movs	r2, #80	@ 0x50
 800e8de:	82a6      	strh	r6, [r4, #20]
 800e8e0:	f104 0018 	add.w	r0, r4, #24
 800e8e4:	f00d fed7 	bl	801c696 <memcpy>
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
 800e8ec:	200b      	movs	r0, #11
 800e8ee:	bd70      	pop	{r4, r5, r6, pc}
 800e8f0:	200b      	movs	r0, #11
 800e8f2:	4770      	bx	lr

0800e8f4 <rcl_get_zero_initialized_publisher>:
 800e8f4:	4b01      	ldr	r3, [pc, #4]	@ (800e8fc <rcl_get_zero_initialized_publisher+0x8>)
 800e8f6:	6818      	ldr	r0, [r3, #0]
 800e8f8:	4770      	bx	lr
 800e8fa:	bf00      	nop
 800e8fc:	0801ddcc 	.word	0x0801ddcc

0800e900 <rcl_publisher_init>:
 800e900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e904:	b088      	sub	sp, #32
 800e906:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e908:	2d00      	cmp	r5, #0
 800e90a:	d069      	beq.n	800e9e0 <rcl_publisher_init+0xe0>
 800e90c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e910:	4604      	mov	r4, r0
 800e912:	4648      	mov	r0, r9
 800e914:	460e      	mov	r6, r1
 800e916:	4690      	mov	r8, r2
 800e918:	461f      	mov	r7, r3
 800e91a:	f001 fd25 	bl	8010368 <rcutils_allocator_is_valid>
 800e91e:	2800      	cmp	r0, #0
 800e920:	d05e      	beq.n	800e9e0 <rcl_publisher_init+0xe0>
 800e922:	2c00      	cmp	r4, #0
 800e924:	d05c      	beq.n	800e9e0 <rcl_publisher_init+0xe0>
 800e926:	f8d4 a000 	ldr.w	sl, [r4]
 800e92a:	f1ba 0f00 	cmp.w	sl, #0
 800e92e:	d004      	beq.n	800e93a <rcl_publisher_init+0x3a>
 800e930:	2764      	movs	r7, #100	@ 0x64
 800e932:	4638      	mov	r0, r7
 800e934:	b008      	add	sp, #32
 800e936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e93a:	4630      	mov	r0, r6
 800e93c:	f7ff ff86 	bl	800e84c <rcl_node_is_valid>
 800e940:	2800      	cmp	r0, #0
 800e942:	d052      	beq.n	800e9ea <rcl_publisher_init+0xea>
 800e944:	f1b8 0f00 	cmp.w	r8, #0
 800e948:	d04a      	beq.n	800e9e0 <rcl_publisher_init+0xe0>
 800e94a:	2f00      	cmp	r7, #0
 800e94c:	d048      	beq.n	800e9e0 <rcl_publisher_init+0xe0>
 800e94e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e952:	aa07      	add	r2, sp, #28
 800e954:	9205      	str	r2, [sp, #20]
 800e956:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e95a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e95e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e962:	f8cd a01c 	str.w	sl, [sp, #28]
 800e966:	4639      	mov	r1, r7
 800e968:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e96c:	4630      	mov	r0, r6
 800e96e:	f008 fb35 	bl	8016fdc <rcl_node_resolve_name>
 800e972:	4607      	mov	r7, r0
 800e974:	2800      	cmp	r0, #0
 800e976:	d14f      	bne.n	800ea18 <rcl_publisher_init+0x118>
 800e978:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e97a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e97c:	20c8      	movs	r0, #200	@ 0xc8
 800e97e:	4798      	blx	r3
 800e980:	6020      	str	r0, [r4, #0]
 800e982:	2800      	cmp	r0, #0
 800e984:	d04e      	beq.n	800ea24 <rcl_publisher_init+0x124>
 800e986:	4630      	mov	r0, r6
 800e988:	f7ff ff82 	bl	800e890 <rcl_node_get_rmw_handle>
 800e98c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	9a07      	ldr	r2, [sp, #28]
 800e994:	6827      	ldr	r7, [r4, #0]
 800e996:	462b      	mov	r3, r5
 800e998:	4641      	mov	r1, r8
 800e99a:	f002 fd59 	bl	8011450 <rmw_create_publisher>
 800e99e:	6823      	ldr	r3, [r4, #0]
 800e9a0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e9a4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e9a8:	b370      	cbz	r0, 800ea08 <rcl_publisher_init+0x108>
 800e9aa:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e9ae:	f002 fe2d 	bl	801160c <rmw_publisher_get_actual_qos>
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	4607      	mov	r7, r0
 800e9b6:	b9d0      	cbnz	r0, 800e9ee <rcl_publisher_init+0xee>
 800e9b8:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e9bc:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	2270      	movs	r2, #112	@ 0x70
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f00d fe66 	bl	801c696 <memcpy>
 800e9ca:	6832      	ldr	r2, [r6, #0]
 800e9cc:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e9d0:	9807      	ldr	r0, [sp, #28]
 800e9d2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e9d4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e9d6:	4798      	blx	r3
 800e9d8:	4638      	mov	r0, r7
 800e9da:	b008      	add	sp, #32
 800e9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e0:	270b      	movs	r7, #11
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	b008      	add	sp, #32
 800e9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ea:	27c8      	movs	r7, #200	@ 0xc8
 800e9ec:	e7a1      	b.n	800e932 <rcl_publisher_init+0x32>
 800e9ee:	b18b      	cbz	r3, 800ea14 <rcl_publisher_init+0x114>
 800e9f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e9f4:	b142      	cbz	r2, 800ea08 <rcl_publisher_init+0x108>
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	f7ff ff4a 	bl	800e890 <rcl_node_get_rmw_handle>
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ea02:	f002 fe13 	bl	801162c <rmw_destroy_publisher>
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ea0a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	4790      	blx	r2
 800ea10:	2300      	movs	r3, #0
 800ea12:	6023      	str	r3, [r4, #0]
 800ea14:	2701      	movs	r7, #1
 800ea16:	e7db      	b.n	800e9d0 <rcl_publisher_init+0xd0>
 800ea18:	2867      	cmp	r0, #103	@ 0x67
 800ea1a:	d0d9      	beq.n	800e9d0 <rcl_publisher_init+0xd0>
 800ea1c:	2869      	cmp	r0, #105	@ 0x69
 800ea1e:	d003      	beq.n	800ea28 <rcl_publisher_init+0x128>
 800ea20:	280a      	cmp	r0, #10
 800ea22:	d1f7      	bne.n	800ea14 <rcl_publisher_init+0x114>
 800ea24:	270a      	movs	r7, #10
 800ea26:	e7d3      	b.n	800e9d0 <rcl_publisher_init+0xd0>
 800ea28:	2767      	movs	r7, #103	@ 0x67
 800ea2a:	e7d1      	b.n	800e9d0 <rcl_publisher_init+0xd0>

0800ea2c <rcl_publisher_fini>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	b300      	cbz	r0, 800ea72 <rcl_publisher_fini+0x46>
 800ea30:	4604      	mov	r4, r0
 800ea32:	4608      	mov	r0, r1
 800ea34:	460d      	mov	r5, r1
 800ea36:	f7ff ff01 	bl	800e83c <rcl_node_is_valid_except_context>
 800ea3a:	b1f0      	cbz	r0, 800ea7a <rcl_publisher_fini+0x4e>
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	b1ab      	cbz	r3, 800ea6c <rcl_publisher_fini+0x40>
 800ea40:	4628      	mov	r0, r5
 800ea42:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800ea44:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800ea46:	f7ff ff23 	bl	800e890 <rcl_node_get_rmw_handle>
 800ea4a:	b1c8      	cbz	r0, 800ea80 <rcl_publisher_fini+0x54>
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ea52:	f002 fdeb 	bl	801162c <rmw_destroy_publisher>
 800ea56:	4603      	mov	r3, r0
 800ea58:	4629      	mov	r1, r5
 800ea5a:	6820      	ldr	r0, [r4, #0]
 800ea5c:	1e1d      	subs	r5, r3, #0
 800ea5e:	bf18      	it	ne
 800ea60:	2501      	movne	r5, #1
 800ea62:	47b0      	blx	r6
 800ea64:	2300      	movs	r3, #0
 800ea66:	6023      	str	r3, [r4, #0]
 800ea68:	4628      	mov	r0, r5
 800ea6a:	bd70      	pop	{r4, r5, r6, pc}
 800ea6c:	461d      	mov	r5, r3
 800ea6e:	4628      	mov	r0, r5
 800ea70:	bd70      	pop	{r4, r5, r6, pc}
 800ea72:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800ea76:	4628      	mov	r0, r5
 800ea78:	bd70      	pop	{r4, r5, r6, pc}
 800ea7a:	25c8      	movs	r5, #200	@ 0xc8
 800ea7c:	4628      	mov	r0, r5
 800ea7e:	bd70      	pop	{r4, r5, r6, pc}
 800ea80:	250b      	movs	r5, #11
 800ea82:	e7f1      	b.n	800ea68 <rcl_publisher_fini+0x3c>

0800ea84 <rcl_publisher_get_default_options>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	4d14      	ldr	r5, [pc, #80]	@ (800ead8 <rcl_publisher_get_default_options+0x54>)
 800ea88:	4914      	ldr	r1, [pc, #80]	@ (800eadc <rcl_publisher_get_default_options+0x58>)
 800ea8a:	b088      	sub	sp, #32
 800ea8c:	4604      	mov	r4, r0
 800ea8e:	2250      	movs	r2, #80	@ 0x50
 800ea90:	4628      	mov	r0, r5
 800ea92:	f00d fe00 	bl	801c696 <memcpy>
 800ea96:	a802      	add	r0, sp, #8
 800ea98:	f001 fc58 	bl	801034c <rcutils_get_default_allocator>
 800ea9c:	f10d 0c08 	add.w	ip, sp, #8
 800eaa0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eaa4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800eaa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eaac:	466e      	mov	r6, sp
 800eaae:	f8dc 3000 	ldr.w	r3, [ip]
 800eab2:	f8ce 3000 	str.w	r3, [lr]
 800eab6:	4630      	mov	r0, r6
 800eab8:	f001 ff0a 	bl	80108d0 <rmw_get_default_publisher_options>
 800eabc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eac0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800eac4:	e883 0003 	stmia.w	r3, {r0, r1}
 800eac8:	2270      	movs	r2, #112	@ 0x70
 800eaca:	4629      	mov	r1, r5
 800eacc:	4620      	mov	r0, r4
 800eace:	f00d fde2 	bl	801c696 <memcpy>
 800ead2:	4620      	mov	r0, r4
 800ead4:	b008      	add	sp, #32
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	2000d028 	.word	0x2000d028
 800eadc:	0801ddd0 	.word	0x0801ddd0

0800eae0 <rcl_publish>:
 800eae0:	b1f8      	cbz	r0, 800eb22 <rcl_publish+0x42>
 800eae2:	6803      	ldr	r3, [r0, #0]
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	4604      	mov	r4, r0
 800eae8:	b1b3      	cbz	r3, 800eb18 <rcl_publish+0x38>
 800eaea:	4616      	mov	r6, r2
 800eaec:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eaf0:	b192      	cbz	r2, 800eb18 <rcl_publish+0x38>
 800eaf2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eaf6:	460d      	mov	r5, r1
 800eaf8:	f7ff fba0 	bl	800e23c <rcl_context_is_valid>
 800eafc:	b160      	cbz	r0, 800eb18 <rcl_publish+0x38>
 800eafe:	6823      	ldr	r3, [r4, #0]
 800eb00:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eb04:	b140      	cbz	r0, 800eb18 <rcl_publish+0x38>
 800eb06:	b155      	cbz	r5, 800eb1e <rcl_publish+0x3e>
 800eb08:	4632      	mov	r2, r6
 800eb0a:	4629      	mov	r1, r5
 800eb0c:	f002 fc40 	bl	8011390 <rmw_publish>
 800eb10:	3800      	subs	r0, #0
 800eb12:	bf18      	it	ne
 800eb14:	2001      	movne	r0, #1
 800eb16:	bd70      	pop	{r4, r5, r6, pc}
 800eb18:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eb1c:	bd70      	pop	{r4, r5, r6, pc}
 800eb1e:	200b      	movs	r0, #11
 800eb20:	bd70      	pop	{r4, r5, r6, pc}
 800eb22:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eb26:	4770      	bx	lr

0800eb28 <rcl_publisher_get_rmw_handle>:
 800eb28:	b118      	cbz	r0, 800eb32 <rcl_publisher_get_rmw_handle+0xa>
 800eb2a:	6800      	ldr	r0, [r0, #0]
 800eb2c:	b108      	cbz	r0, 800eb32 <rcl_publisher_get_rmw_handle+0xa>
 800eb2e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800eb32:	4770      	bx	lr

0800eb34 <rcl_publisher_is_valid>:
 800eb34:	b1a0      	cbz	r0, 800eb60 <rcl_publisher_is_valid+0x2c>
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	b510      	push	{r4, lr}
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	b173      	cbz	r3, 800eb5c <rcl_publisher_is_valid+0x28>
 800eb3e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eb42:	b15a      	cbz	r2, 800eb5c <rcl_publisher_is_valid+0x28>
 800eb44:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eb48:	f7ff fb78 	bl	800e23c <rcl_context_is_valid>
 800eb4c:	b130      	cbz	r0, 800eb5c <rcl_publisher_is_valid+0x28>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eb54:	3800      	subs	r0, #0
 800eb56:	bf18      	it	ne
 800eb58:	2001      	movne	r0, #1
 800eb5a:	bd10      	pop	{r4, pc}
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	bd10      	pop	{r4, pc}
 800eb60:	2000      	movs	r0, #0
 800eb62:	4770      	bx	lr

0800eb64 <rcl_publisher_is_valid_except_context>:
 800eb64:	b130      	cbz	r0, 800eb74 <rcl_publisher_is_valid_except_context+0x10>
 800eb66:	6800      	ldr	r0, [r0, #0]
 800eb68:	b120      	cbz	r0, 800eb74 <rcl_publisher_is_valid_except_context+0x10>
 800eb6a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800eb6e:	3800      	subs	r0, #0
 800eb70:	bf18      	it	ne
 800eb72:	2001      	movne	r0, #1
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop

0800eb78 <rcl_get_zero_initialized_subscription>:
 800eb78:	4b01      	ldr	r3, [pc, #4]	@ (800eb80 <rcl_get_zero_initialized_subscription+0x8>)
 800eb7a:	6818      	ldr	r0, [r3, #0]
 800eb7c:	4770      	bx	lr
 800eb7e:	bf00      	nop
 800eb80:	0801de20 	.word	0x0801de20

0800eb84 <rcl_subscription_init>:
 800eb84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb88:	b089      	sub	sp, #36	@ 0x24
 800eb8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800eb8c:	b1d6      	cbz	r6, 800ebc4 <rcl_subscription_init+0x40>
 800eb8e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800eb92:	4604      	mov	r4, r0
 800eb94:	4648      	mov	r0, r9
 800eb96:	460d      	mov	r5, r1
 800eb98:	4690      	mov	r8, r2
 800eb9a:	461f      	mov	r7, r3
 800eb9c:	f001 fbe4 	bl	8010368 <rcutils_allocator_is_valid>
 800eba0:	b180      	cbz	r0, 800ebc4 <rcl_subscription_init+0x40>
 800eba2:	b17c      	cbz	r4, 800ebc4 <rcl_subscription_init+0x40>
 800eba4:	4628      	mov	r0, r5
 800eba6:	f7ff fe51 	bl	800e84c <rcl_node_is_valid>
 800ebaa:	2800      	cmp	r0, #0
 800ebac:	d054      	beq.n	800ec58 <rcl_subscription_init+0xd4>
 800ebae:	f1b8 0f00 	cmp.w	r8, #0
 800ebb2:	d007      	beq.n	800ebc4 <rcl_subscription_init+0x40>
 800ebb4:	b137      	cbz	r7, 800ebc4 <rcl_subscription_init+0x40>
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	b14b      	cbz	r3, 800ebce <rcl_subscription_init+0x4a>
 800ebba:	2764      	movs	r7, #100	@ 0x64
 800ebbc:	4638      	mov	r0, r7
 800ebbe:	b009      	add	sp, #36	@ 0x24
 800ebc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebc4:	270b      	movs	r7, #11
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	b009      	add	sp, #36	@ 0x24
 800ebca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebce:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ebd2:	aa07      	add	r2, sp, #28
 800ebd4:	9205      	str	r2, [sp, #20]
 800ebd6:	9307      	str	r3, [sp, #28]
 800ebd8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ebdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebe0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ebe4:	4639      	mov	r1, r7
 800ebe6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ebea:	4628      	mov	r0, r5
 800ebec:	f008 f9f6 	bl	8016fdc <rcl_node_resolve_name>
 800ebf0:	4607      	mov	r7, r0
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d15f      	bne.n	800ecb6 <rcl_subscription_init+0x132>
 800ebf6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800ebfa:	21c8      	movs	r1, #200	@ 0xc8
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	4798      	blx	r3
 800ec00:	6020      	str	r0, [r4, #0]
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d05d      	beq.n	800ecc2 <rcl_subscription_init+0x13e>
 800ec06:	4628      	mov	r0, r5
 800ec08:	f7ff fe42 	bl	800e890 <rcl_node_get_rmw_handle>
 800ec0c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	9a07      	ldr	r2, [sp, #28]
 800ec14:	6827      	ldr	r7, [r4, #0]
 800ec16:	4641      	mov	r1, r8
 800ec18:	4633      	mov	r3, r6
 800ec1a:	f002 fd9d 	bl	8011758 <rmw_create_subscription>
 800ec1e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800ec22:	6827      	ldr	r7, [r4, #0]
 800ec24:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800ec28:	b348      	cbz	r0, 800ec7e <rcl_subscription_init+0xfa>
 800ec2a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ec2e:	f002 fe75 	bl	801191c <rmw_subscription_get_actual_qos>
 800ec32:	4607      	mov	r7, r0
 800ec34:	b9a8      	cbnz	r0, 800ec62 <rcl_subscription_init+0xde>
 800ec36:	6820      	ldr	r0, [r4, #0]
 800ec38:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ec3c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ec40:	2270      	movs	r2, #112	@ 0x70
 800ec42:	4631      	mov	r1, r6
 800ec44:	f00d fd27 	bl	801c696 <memcpy>
 800ec48:	9807      	ldr	r0, [sp, #28]
 800ec4a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ec4c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ec4e:	4798      	blx	r3
 800ec50:	4638      	mov	r0, r7
 800ec52:	b009      	add	sp, #36	@ 0x24
 800ec54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec58:	27c8      	movs	r7, #200	@ 0xc8
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	b009      	add	sp, #36	@ 0x24
 800ec5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec62:	6827      	ldr	r7, [r4, #0]
 800ec64:	b32f      	cbz	r7, 800ecb2 <rcl_subscription_init+0x12e>
 800ec66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ec6a:	b14b      	cbz	r3, 800ec80 <rcl_subscription_init+0xfc>
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f7ff fe0f 	bl	800e890 <rcl_node_get_rmw_handle>
 800ec72:	6823      	ldr	r3, [r4, #0]
 800ec74:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ec78:	f002 fe60 	bl	801193c <rmw_destroy_subscription>
 800ec7c:	6827      	ldr	r7, [r4, #0]
 800ec7e:	b197      	cbz	r7, 800eca6 <rcl_subscription_init+0x122>
 800ec80:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800ec84:	4628      	mov	r0, r5
 800ec86:	f001 fb6f 	bl	8010368 <rcutils_allocator_is_valid>
 800ec8a:	b158      	cbz	r0, 800eca4 <rcl_subscription_init+0x120>
 800ec8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec8e:	b148      	cbz	r0, 800eca4 <rcl_subscription_init+0x120>
 800ec90:	4629      	mov	r1, r5
 800ec92:	f001 fe25 	bl	80108e0 <rmw_subscription_content_filter_options_fini>
 800ec96:	4605      	mov	r5, r0
 800ec98:	b9b8      	cbnz	r0, 800ecca <rcl_subscription_init+0x146>
 800ec9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec9c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ec9e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800eca0:	4798      	blx	r3
 800eca2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800eca4:	6827      	ldr	r7, [r4, #0]
 800eca6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800eca8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ecaa:	4638      	mov	r0, r7
 800ecac:	4798      	blx	r3
 800ecae:	2300      	movs	r3, #0
 800ecb0:	6023      	str	r3, [r4, #0]
 800ecb2:	2701      	movs	r7, #1
 800ecb4:	e7c8      	b.n	800ec48 <rcl_subscription_init+0xc4>
 800ecb6:	2867      	cmp	r0, #103	@ 0x67
 800ecb8:	d0c6      	beq.n	800ec48 <rcl_subscription_init+0xc4>
 800ecba:	2869      	cmp	r0, #105	@ 0x69
 800ecbc:	d003      	beq.n	800ecc6 <rcl_subscription_init+0x142>
 800ecbe:	280a      	cmp	r0, #10
 800ecc0:	d1f7      	bne.n	800ecb2 <rcl_subscription_init+0x12e>
 800ecc2:	270a      	movs	r7, #10
 800ecc4:	e7c0      	b.n	800ec48 <rcl_subscription_init+0xc4>
 800ecc6:	2767      	movs	r7, #103	@ 0x67
 800ecc8:	e7be      	b.n	800ec48 <rcl_subscription_init+0xc4>
 800ecca:	f007 ff37 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800ecce:	6827      	ldr	r7, [r4, #0]
 800ecd0:	e7e9      	b.n	800eca6 <rcl_subscription_init+0x122>
 800ecd2:	bf00      	nop

0800ecd4 <rcl_subscription_fini>:
 800ecd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecd8:	2800      	cmp	r0, #0
 800ecda:	d039      	beq.n	800ed50 <rcl_subscription_fini+0x7c>
 800ecdc:	4604      	mov	r4, r0
 800ecde:	4608      	mov	r0, r1
 800ece0:	460d      	mov	r5, r1
 800ece2:	f7ff fdab 	bl	800e83c <rcl_node_is_valid_except_context>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d037      	beq.n	800ed5a <rcl_subscription_fini+0x86>
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	b363      	cbz	r3, 800ed48 <rcl_subscription_fini+0x74>
 800ecee:	4628      	mov	r0, r5
 800ecf0:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800ecf2:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800ecf6:	f7ff fdcb 	bl	800e890 <rcl_node_get_rmw_handle>
 800ecfa:	b390      	cbz	r0, 800ed62 <rcl_subscription_fini+0x8e>
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ed02:	f002 fe1b 	bl	801193c <rmw_destroy_subscription>
 800ed06:	6826      	ldr	r6, [r4, #0]
 800ed08:	1e05      	subs	r5, r0, #0
 800ed0a:	bf18      	it	ne
 800ed0c:	2501      	movne	r5, #1
 800ed0e:	b37e      	cbz	r6, 800ed70 <rcl_subscription_fini+0x9c>
 800ed10:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800ed14:	4648      	mov	r0, r9
 800ed16:	f001 fb27 	bl	8010368 <rcutils_allocator_is_valid>
 800ed1a:	b358      	cbz	r0, 800ed74 <rcl_subscription_fini+0xa0>
 800ed1c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800ed1e:	b150      	cbz	r0, 800ed36 <rcl_subscription_fini+0x62>
 800ed20:	4649      	mov	r1, r9
 800ed22:	f001 fddd 	bl	80108e0 <rmw_subscription_content_filter_options_fini>
 800ed26:	4681      	mov	r9, r0
 800ed28:	b9e8      	cbnz	r0, 800ed66 <rcl_subscription_fini+0x92>
 800ed2a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ed2c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ed2e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800ed30:	4798      	blx	r3
 800ed32:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800ed36:	6826      	ldr	r6, [r4, #0]
 800ed38:	4630      	mov	r0, r6
 800ed3a:	4641      	mov	r1, r8
 800ed3c:	47b8      	blx	r7
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	4628      	mov	r0, r5
 800ed44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed48:	461d      	mov	r5, r3
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed50:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800ed54:	4628      	mov	r0, r5
 800ed56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5a:	25c8      	movs	r5, #200	@ 0xc8
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed62:	250b      	movs	r5, #11
 800ed64:	e7f1      	b.n	800ed4a <rcl_subscription_fini+0x76>
 800ed66:	f007 fee9 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800ed6a:	6826      	ldr	r6, [r4, #0]
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d0e3      	beq.n	800ed38 <rcl_subscription_fini+0x64>
 800ed70:	2501      	movs	r5, #1
 800ed72:	e7e1      	b.n	800ed38 <rcl_subscription_fini+0x64>
 800ed74:	6826      	ldr	r6, [r4, #0]
 800ed76:	2501      	movs	r5, #1
 800ed78:	e7de      	b.n	800ed38 <rcl_subscription_fini+0x64>
 800ed7a:	bf00      	nop

0800ed7c <rcl_subscription_get_default_options>:
 800ed7c:	b570      	push	{r4, r5, r6, lr}
 800ed7e:	4d14      	ldr	r5, [pc, #80]	@ (800edd0 <rcl_subscription_get_default_options+0x54>)
 800ed80:	4914      	ldr	r1, [pc, #80]	@ (800edd4 <rcl_subscription_get_default_options+0x58>)
 800ed82:	b08a      	sub	sp, #40	@ 0x28
 800ed84:	4604      	mov	r4, r0
 800ed86:	2250      	movs	r2, #80	@ 0x50
 800ed88:	4628      	mov	r0, r5
 800ed8a:	f00d fc84 	bl	801c696 <memcpy>
 800ed8e:	a804      	add	r0, sp, #16
 800ed90:	f001 fadc 	bl	801034c <rcutils_get_default_allocator>
 800ed94:	f10d 0c10 	add.w	ip, sp, #16
 800ed98:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed9c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800eda0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eda4:	466e      	mov	r6, sp
 800eda6:	f8dc 3000 	ldr.w	r3, [ip]
 800edaa:	f8ce 3000 	str.w	r3, [lr]
 800edae:	4630      	mov	r0, r6
 800edb0:	f001 fdb0 	bl	8010914 <rmw_get_default_subscription_options>
 800edb4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800edb8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800edbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800edc0:	2270      	movs	r2, #112	@ 0x70
 800edc2:	4629      	mov	r1, r5
 800edc4:	4620      	mov	r0, r4
 800edc6:	f00d fc66 	bl	801c696 <memcpy>
 800edca:	4620      	mov	r0, r4
 800edcc:	b00a      	add	sp, #40	@ 0x28
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	2000d098 	.word	0x2000d098
 800edd4:	0801de28 	.word	0x0801de28

0800edd8 <rcl_take>:
 800edd8:	2800      	cmp	r0, #0
 800edda:	d04a      	beq.n	800ee72 <rcl_take+0x9a>
 800eddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ede0:	4604      	mov	r4, r0
 800ede2:	6800      	ldr	r0, [r0, #0]
 800ede4:	b0a4      	sub	sp, #144	@ 0x90
 800ede6:	2800      	cmp	r0, #0
 800ede8:	d03b      	beq.n	800ee62 <rcl_take+0x8a>
 800edea:	461f      	mov	r7, r3
 800edec:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d036      	beq.n	800ee62 <rcl_take+0x8a>
 800edf4:	460e      	mov	r6, r1
 800edf6:	2900      	cmp	r1, #0
 800edf8:	d039      	beq.n	800ee6e <rcl_take+0x96>
 800edfa:	4615      	mov	r5, r2
 800edfc:	2a00      	cmp	r2, #0
 800edfe:	d03c      	beq.n	800ee7a <rcl_take+0xa2>
 800ee00:	a802      	add	r0, sp, #8
 800ee02:	f001 fd8d 	bl	8010920 <rmw_get_zero_initialized_message_info>
 800ee06:	f10d 0c08 	add.w	ip, sp, #8
 800ee0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee0e:	46ae      	mov	lr, r5
 800ee10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee20:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee24:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800ee28:	f04f 0800 	mov.w	r8, #0
 800ee2c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800ee30:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800ee34:	6822      	ldr	r2, [r4, #0]
 800ee36:	462b      	mov	r3, r5
 800ee38:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800ee3c:	9700      	str	r7, [sp, #0]
 800ee3e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800ee42:	4631      	mov	r1, r6
 800ee44:	f002 fdda 	bl	80119fc <rmw_take_with_info>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	b9c0      	cbnz	r0, 800ee7e <rcl_take+0xa6>
 800ee4c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800ee50:	f240 1291 	movw	r2, #401	@ 0x191
 800ee54:	2900      	cmp	r1, #0
 800ee56:	bf08      	it	eq
 800ee58:	4613      	moveq	r3, r2
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	b024      	add	sp, #144	@ 0x90
 800ee5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee62:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ee66:	4618      	mov	r0, r3
 800ee68:	b024      	add	sp, #144	@ 0x90
 800ee6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6e:	230b      	movs	r3, #11
 800ee70:	e7f3      	b.n	800ee5a <rcl_take+0x82>
 800ee72:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ee76:	4618      	mov	r0, r3
 800ee78:	4770      	bx	lr
 800ee7a:	ad14      	add	r5, sp, #80	@ 0x50
 800ee7c:	e7c0      	b.n	800ee00 <rcl_take+0x28>
 800ee7e:	f007 fe5d 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 800ee82:	4603      	mov	r3, r0
 800ee84:	e7e9      	b.n	800ee5a <rcl_take+0x82>
 800ee86:	bf00      	nop

0800ee88 <rcl_subscription_get_rmw_handle>:
 800ee88:	b118      	cbz	r0, 800ee92 <rcl_subscription_get_rmw_handle+0xa>
 800ee8a:	6800      	ldr	r0, [r0, #0]
 800ee8c:	b108      	cbz	r0, 800ee92 <rcl_subscription_get_rmw_handle+0xa>
 800ee8e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ee92:	4770      	bx	lr

0800ee94 <rcl_subscription_is_valid>:
 800ee94:	b130      	cbz	r0, 800eea4 <rcl_subscription_is_valid+0x10>
 800ee96:	6800      	ldr	r0, [r0, #0]
 800ee98:	b120      	cbz	r0, 800eea4 <rcl_subscription_is_valid+0x10>
 800ee9a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ee9e:	3800      	subs	r0, #0
 800eea0:	bf18      	it	ne
 800eea2:	2001      	movne	r0, #1
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop

0800eea8 <_rcl_timer_time_jump>:
 800eea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeac:	4605      	mov	r5, r0
 800eeae:	b084      	sub	sp, #16
 800eeb0:	4614      	mov	r4, r2
 800eeb2:	b131      	cbz	r1, 800eec2 <_rcl_timer_time_jump+0x1a>
 800eeb4:	7803      	ldrb	r3, [r0, #0]
 800eeb6:	3b02      	subs	r3, #2
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d93f      	bls.n	800ef3c <_rcl_timer_time_jump+0x94>
 800eebc:	b004      	add	sp, #16
 800eebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec2:	6813      	ldr	r3, [r2, #0]
 800eec4:	a902      	add	r1, sp, #8
 800eec6:	6818      	ldr	r0, [r3, #0]
 800eec8:	f008 fa5a 	bl	8017380 <rcl_clock_get_now>
 800eecc:	2800      	cmp	r0, #0
 800eece:	d1f5      	bne.n	800eebc <_rcl_timer_time_jump+0x14>
 800eed0:	6820      	ldr	r0, [r4, #0]
 800eed2:	2105      	movs	r1, #5
 800eed4:	3020      	adds	r0, #32
 800eed6:	f001 fa55 	bl	8010384 <__atomic_load_8>
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	4681      	mov	r9, r0
 800eede:	4688      	mov	r8, r1
 800eee0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800eee4:	2105      	movs	r1, #5
 800eee6:	f001 fa4d 	bl	8010384 <__atomic_load_8>
 800eeea:	4607      	mov	r7, r0
 800eeec:	6820      	ldr	r0, [r4, #0]
 800eeee:	460e      	mov	r6, r1
 800eef0:	3018      	adds	r0, #24
 800eef2:	2105      	movs	r1, #5
 800eef4:	f001 fa46 	bl	8010384 <__atomic_load_8>
 800eef8:	782b      	ldrb	r3, [r5, #0]
 800eefa:	9a02      	ldr	r2, [sp, #8]
 800eefc:	3b02      	subs	r3, #2
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	460d      	mov	r5, r1
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	4682      	mov	sl, r0
 800ef06:	d937      	bls.n	800ef78 <_rcl_timer_time_jump+0xd0>
 800ef08:	42ba      	cmp	r2, r7
 800ef0a:	eb73 0106 	sbcs.w	r1, r3, r6
 800ef0e:	da5f      	bge.n	800efd0 <_rcl_timer_time_jump+0x128>
 800ef10:	454a      	cmp	r2, r9
 800ef12:	eb73 0108 	sbcs.w	r1, r3, r8
 800ef16:	dad1      	bge.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef18:	6820      	ldr	r0, [r4, #0]
 800ef1a:	eb1a 0202 	adds.w	r2, sl, r2
 800ef1e:	eb43 0305 	adc.w	r3, r3, r5
 800ef22:	2505      	movs	r5, #5
 800ef24:	3028      	adds	r0, #40	@ 0x28
 800ef26:	9500      	str	r5, [sp, #0]
 800ef28:	f001 fa62 	bl	80103f0 <__atomic_store_8>
 800ef2c:	6820      	ldr	r0, [r4, #0]
 800ef2e:	9500      	str	r5, [sp, #0]
 800ef30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef34:	3020      	adds	r0, #32
 800ef36:	f001 fa5b 	bl	80103f0 <__atomic_store_8>
 800ef3a:	e7bf      	b.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef3c:	6813      	ldr	r3, [r2, #0]
 800ef3e:	a902      	add	r1, sp, #8
 800ef40:	6818      	ldr	r0, [r3, #0]
 800ef42:	f008 fa1d 	bl	8017380 <rcl_clock_get_now>
 800ef46:	2800      	cmp	r0, #0
 800ef48:	d1b8      	bne.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	d0b4      	beq.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef52:	6820      	ldr	r0, [r4, #0]
 800ef54:	2105      	movs	r1, #5
 800ef56:	3028      	adds	r0, #40	@ 0x28
 800ef58:	f001 fa14 	bl	8010384 <__atomic_load_8>
 800ef5c:	9d02      	ldr	r5, [sp, #8]
 800ef5e:	9b03      	ldr	r3, [sp, #12]
 800ef60:	4602      	mov	r2, r0
 800ef62:	6820      	ldr	r0, [r4, #0]
 800ef64:	1b52      	subs	r2, r2, r5
 800ef66:	f04f 0405 	mov.w	r4, #5
 800ef6a:	9400      	str	r4, [sp, #0]
 800ef6c:	eb61 0303 	sbc.w	r3, r1, r3
 800ef70:	3030      	adds	r0, #48	@ 0x30
 800ef72:	f001 fa3d 	bl	80103f0 <__atomic_store_8>
 800ef76:	e7a1      	b.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	d09f      	beq.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef7c:	6820      	ldr	r0, [r4, #0]
 800ef7e:	f04f 0805 	mov.w	r8, #5
 800ef82:	2300      	movs	r3, #0
 800ef84:	f8cd 8000 	str.w	r8, [sp]
 800ef88:	3030      	adds	r0, #48	@ 0x30
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f001 fa66 	bl	801045c <__atomic_exchange_8>
 800ef90:	ea51 0300 	orrs.w	r3, r1, r0
 800ef94:	4606      	mov	r6, r0
 800ef96:	460f      	mov	r7, r1
 800ef98:	d090      	beq.n	800eebc <_rcl_timer_time_jump+0x14>
 800ef9a:	9a02      	ldr	r2, [sp, #8]
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	f8cd 8000 	str.w	r8, [sp]
 800efa2:	1a12      	subs	r2, r2, r0
 800efa4:	6820      	ldr	r0, [r4, #0]
 800efa6:	eb63 0301 	sbc.w	r3, r3, r1
 800efaa:	eb12 020a 	adds.w	r2, r2, sl
 800efae:	eb43 0305 	adc.w	r3, r3, r5
 800efb2:	3028      	adds	r0, #40	@ 0x28
 800efb4:	f001 fa1c 	bl	80103f0 <__atomic_store_8>
 800efb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efbc:	f8cd 8000 	str.w	r8, [sp]
 800efc0:	6820      	ldr	r0, [r4, #0]
 800efc2:	1b92      	subs	r2, r2, r6
 800efc4:	eb63 0307 	sbc.w	r3, r3, r7
 800efc8:	3020      	adds	r0, #32
 800efca:	f001 fa11 	bl	80103f0 <__atomic_store_8>
 800efce:	e775      	b.n	800eebc <_rcl_timer_time_jump+0x14>
 800efd0:	6820      	ldr	r0, [r4, #0]
 800efd2:	3008      	adds	r0, #8
 800efd4:	f007 febe 	bl	8016d54 <rcl_trigger_guard_condition>
 800efd8:	e770      	b.n	800eebc <_rcl_timer_time_jump+0x14>
 800efda:	bf00      	nop

0800efdc <rcl_get_zero_initialized_timer>:
 800efdc:	4b01      	ldr	r3, [pc, #4]	@ (800efe4 <rcl_get_zero_initialized_timer+0x8>)
 800efde:	6818      	ldr	r0, [r3, #0]
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	0801de78 	.word	0x0801de78

0800efe8 <rcl_timer_init>:
 800efe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efec:	b0aa      	sub	sp, #168	@ 0xa8
 800efee:	4604      	mov	r4, r0
 800eff0:	a835      	add	r0, sp, #212	@ 0xd4
 800eff2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800eff6:	460d      	mov	r5, r1
 800eff8:	4692      	mov	sl, r2
 800effa:	f001 f9b5 	bl	8010368 <rcutils_allocator_is_valid>
 800effe:	2800      	cmp	r0, #0
 800f000:	d064      	beq.n	800f0cc <rcl_timer_init+0xe4>
 800f002:	2c00      	cmp	r4, #0
 800f004:	d062      	beq.n	800f0cc <rcl_timer_init+0xe4>
 800f006:	2d00      	cmp	r5, #0
 800f008:	d060      	beq.n	800f0cc <rcl_timer_init+0xe4>
 800f00a:	2f00      	cmp	r7, #0
 800f00c:	db5e      	blt.n	800f0cc <rcl_timer_init+0xe4>
 800f00e:	6823      	ldr	r3, [r4, #0]
 800f010:	b123      	cbz	r3, 800f01c <rcl_timer_init+0x34>
 800f012:	2664      	movs	r6, #100	@ 0x64
 800f014:	4630      	mov	r0, r6
 800f016:	b02a      	add	sp, #168	@ 0xa8
 800f018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f01c:	a908      	add	r1, sp, #32
 800f01e:	4628      	mov	r0, r5
 800f020:	f008 f9ae 	bl	8017380 <rcl_clock_get_now>
 800f024:	4606      	mov	r6, r0
 800f026:	2800      	cmp	r0, #0
 800f028:	d1f4      	bne.n	800f014 <rcl_timer_init+0x2c>
 800f02a:	ae06      	add	r6, sp, #24
 800f02c:	4630      	mov	r0, r6
 800f02e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800f032:	f007 fd97 	bl	8016b64 <rcl_get_zero_initialized_guard_condition>
 800f036:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f03a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800f03e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f040:	e889 0003 	stmia.w	r9, {r0, r1}
 800f044:	4630      	mov	r0, r6
 800f046:	f007 fe69 	bl	8016d1c <rcl_guard_condition_get_default_options>
 800f04a:	ab0d      	add	r3, sp, #52	@ 0x34
 800f04c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f050:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f054:	4651      	mov	r1, sl
 800f056:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f05a:	4648      	mov	r0, r9
 800f05c:	f007 fd8c 	bl	8016b78 <rcl_guard_condition_init>
 800f060:	4606      	mov	r6, r0
 800f062:	2800      	cmp	r0, #0
 800f064:	d1d6      	bne.n	800f014 <rcl_timer_init+0x2c>
 800f066:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d033      	beq.n	800f0d6 <rcl_timer_init+0xee>
 800f06e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800f070:	911a      	str	r1, [sp, #104]	@ 0x68
 800f072:	4642      	mov	r2, r8
 800f074:	463b      	mov	r3, r7
 800f076:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800f07a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f07e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f130 <rcl_timer_init+0x148>
 800f082:	eb12 0008 	adds.w	r0, r2, r8
 800f086:	eb47 0103 	adc.w	r1, r7, r3
 800f08a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800f08e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800f092:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800f096:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800f09a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f09e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800f0a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f0a6:	f8de 3000 	ldr.w	r3, [lr]
 800f0aa:	f8cc 3000 	str.w	r3, [ip]
 800f0ae:	f04f 0a00 	mov.w	sl, #0
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800f0b8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800f0ba:	2050      	movs	r0, #80	@ 0x50
 800f0bc:	4798      	blx	r3
 800f0be:	6020      	str	r0, [r4, #0]
 800f0c0:	b358      	cbz	r0, 800f11a <rcl_timer_init+0x132>
 800f0c2:	2250      	movs	r2, #80	@ 0x50
 800f0c4:	a916      	add	r1, sp, #88	@ 0x58
 800f0c6:	f00d fae6 	bl	801c696 <memcpy>
 800f0ca:	e7a3      	b.n	800f014 <rcl_timer_init+0x2c>
 800f0cc:	260b      	movs	r6, #11
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	b02a      	add	sp, #168	@ 0xa8
 800f0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0d6:	2001      	movs	r0, #1
 800f0d8:	2100      	movs	r1, #0
 800f0da:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800f0de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0e2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f0e6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800f0ea:	4a13      	ldr	r2, [pc, #76]	@ (800f138 <rcl_timer_init+0x150>)
 800f0ec:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f0f0:	9405      	str	r4, [sp, #20]
 800f0f2:	9204      	str	r2, [sp, #16]
 800f0f4:	ab12      	add	r3, sp, #72	@ 0x48
 800f0f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0f8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f0fc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f100:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800f104:	4628      	mov	r0, r5
 800f106:	f008 f947 	bl	8017398 <rcl_clock_add_jump_callback>
 800f10a:	4682      	mov	sl, r0
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d0ae      	beq.n	800f06e <rcl_timer_init+0x86>
 800f110:	4648      	mov	r0, r9
 800f112:	f007 fddd 	bl	8016cd0 <rcl_guard_condition_fini>
 800f116:	4656      	mov	r6, sl
 800f118:	e77c      	b.n	800f014 <rcl_timer_init+0x2c>
 800f11a:	4648      	mov	r0, r9
 800f11c:	f007 fdd8 	bl	8016cd0 <rcl_guard_condition_fini>
 800f120:	4905      	ldr	r1, [pc, #20]	@ (800f138 <rcl_timer_init+0x150>)
 800f122:	4622      	mov	r2, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f008 f999 	bl	801745c <rcl_clock_remove_jump_callback>
 800f12a:	260a      	movs	r6, #10
 800f12c:	e772      	b.n	800f014 <rcl_timer_init+0x2c>
 800f12e:	bf00      	nop
	...
 800f138:	0800eea9 	.word	0x0800eea9

0800f13c <rcl_timer_fini>:
 800f13c:	b310      	cbz	r0, 800f184 <rcl_timer_fini+0x48>
 800f13e:	6803      	ldr	r3, [r0, #0]
 800f140:	b570      	push	{r4, r5, r6, lr}
 800f142:	4604      	mov	r4, r0
 800f144:	b1b3      	cbz	r3, 800f174 <rcl_timer_fini+0x38>
 800f146:	f3bf 8f5b 	dmb	ish
 800f14a:	2201      	movs	r2, #1
 800f14c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f150:	f3bf 8f5b 	dmb	ish
 800f154:	6803      	ldr	r3, [r0, #0]
 800f156:	6818      	ldr	r0, [r3, #0]
 800f158:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f15a:	7802      	ldrb	r2, [r0, #0]
 800f15c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800f15e:	2a01      	cmp	r2, #1
 800f160:	d00a      	beq.n	800f178 <rcl_timer_fini+0x3c>
 800f162:	f103 0008 	add.w	r0, r3, #8
 800f166:	f007 fdb3 	bl	8016cd0 <rcl_guard_condition_fini>
 800f16a:	6820      	ldr	r0, [r4, #0]
 800f16c:	4631      	mov	r1, r6
 800f16e:	47a8      	blx	r5
 800f170:	2300      	movs	r3, #0
 800f172:	6023      	str	r3, [r4, #0]
 800f174:	2000      	movs	r0, #0
 800f176:	bd70      	pop	{r4, r5, r6, pc}
 800f178:	4903      	ldr	r1, [pc, #12]	@ (800f188 <rcl_timer_fini+0x4c>)
 800f17a:	4622      	mov	r2, r4
 800f17c:	f008 f96e 	bl	801745c <rcl_clock_remove_jump_callback>
 800f180:	6823      	ldr	r3, [r4, #0]
 800f182:	e7ee      	b.n	800f162 <rcl_timer_fini+0x26>
 800f184:	2000      	movs	r0, #0
 800f186:	4770      	bx	lr
 800f188:	0800eea9 	.word	0x0800eea9

0800f18c <rcl_timer_call>:
 800f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f190:	b087      	sub	sp, #28
 800f192:	2800      	cmp	r0, #0
 800f194:	d06d      	beq.n	800f272 <rcl_timer_call+0xe6>
 800f196:	6803      	ldr	r3, [r0, #0]
 800f198:	4604      	mov	r4, r0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d063      	beq.n	800f266 <rcl_timer_call+0xda>
 800f19e:	f3bf 8f5b 	dmb	ish
 800f1a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1a6:	f3bf 8f5b 	dmb	ish
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d150      	bne.n	800f250 <rcl_timer_call+0xc4>
 800f1ae:	6803      	ldr	r3, [r0, #0]
 800f1b0:	a904      	add	r1, sp, #16
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	f008 f8e4 	bl	8017380 <rcl_clock_get_now>
 800f1b8:	4605      	mov	r5, r0
 800f1ba:	2800      	cmp	r0, #0
 800f1bc:	d14a      	bne.n	800f254 <rcl_timer_call+0xc8>
 800f1be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	db4a      	blt.n	800f25c <rcl_timer_call+0xd0>
 800f1c6:	6820      	ldr	r0, [r4, #0]
 800f1c8:	f04f 0a05 	mov.w	sl, #5
 800f1cc:	f8cd a000 	str.w	sl, [sp]
 800f1d0:	3020      	adds	r0, #32
 800f1d2:	f001 f943 	bl	801045c <__atomic_exchange_8>
 800f1d6:	6823      	ldr	r3, [r4, #0]
 800f1d8:	f3bf 8f5b 	dmb	ish
 800f1dc:	4680      	mov	r8, r0
 800f1de:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f1e2:	f3bf 8f5b 	dmb	ish
 800f1e6:	6820      	ldr	r0, [r4, #0]
 800f1e8:	4689      	mov	r9, r1
 800f1ea:	3028      	adds	r0, #40	@ 0x28
 800f1ec:	4651      	mov	r1, sl
 800f1ee:	f001 f8c9 	bl	8010384 <__atomic_load_8>
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	6820      	ldr	r0, [r4, #0]
 800f1f6:	460f      	mov	r7, r1
 800f1f8:	3018      	adds	r0, #24
 800f1fa:	4651      	mov	r1, sl
 800f1fc:	f001 f8c2 	bl	8010384 <__atomic_load_8>
 800f200:	1836      	adds	r6, r6, r0
 800f202:	4602      	mov	r2, r0
 800f204:	4682      	mov	sl, r0
 800f206:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800f20a:	eb47 0701 	adc.w	r7, r7, r1
 800f20e:	4286      	cmp	r6, r0
 800f210:	460b      	mov	r3, r1
 800f212:	eb77 010c 	sbcs.w	r1, r7, ip
 800f216:	da04      	bge.n	800f222 <rcl_timer_call+0x96>
 800f218:	ea53 0102 	orrs.w	r1, r3, r2
 800f21c:	d12e      	bne.n	800f27c <rcl_timer_call+0xf0>
 800f21e:	4606      	mov	r6, r0
 800f220:	4667      	mov	r7, ip
 800f222:	6820      	ldr	r0, [r4, #0]
 800f224:	2105      	movs	r1, #5
 800f226:	4632      	mov	r2, r6
 800f228:	463b      	mov	r3, r7
 800f22a:	3028      	adds	r0, #40	@ 0x28
 800f22c:	9100      	str	r1, [sp, #0]
 800f22e:	f001 f8df 	bl	80103f0 <__atomic_store_8>
 800f232:	f1bb 0f00 	cmp.w	fp, #0
 800f236:	d00d      	beq.n	800f254 <rcl_timer_call+0xc8>
 800f238:	9a04      	ldr	r2, [sp, #16]
 800f23a:	9b05      	ldr	r3, [sp, #20]
 800f23c:	ebb2 0208 	subs.w	r2, r2, r8
 800f240:	4620      	mov	r0, r4
 800f242:	eb63 0309 	sbc.w	r3, r3, r9
 800f246:	47d8      	blx	fp
 800f248:	4628      	mov	r0, r5
 800f24a:	b007      	add	sp, #28
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f250:	f240 3521 	movw	r5, #801	@ 0x321
 800f254:	4628      	mov	r0, r5
 800f256:	b007      	add	sp, #28
 800f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25c:	2501      	movs	r5, #1
 800f25e:	4628      	mov	r0, r5
 800f260:	b007      	add	sp, #28
 800f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f266:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f26a:	4628      	mov	r0, r5
 800f26c:	b007      	add	sp, #28
 800f26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f272:	250b      	movs	r5, #11
 800f274:	4628      	mov	r0, r5
 800f276:	b007      	add	sp, #28
 800f278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27c:	1b80      	subs	r0, r0, r6
 800f27e:	eb6c 0107 	sbc.w	r1, ip, r7
 800f282:	3801      	subs	r0, #1
 800f284:	f161 0100 	sbc.w	r1, r1, #0
 800f288:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f28c:	f7f1 fc46 	bl	8000b1c <__aeabi_ldivmod>
 800f290:	9b02      	ldr	r3, [sp, #8]
 800f292:	3001      	adds	r0, #1
 800f294:	f141 0100 	adc.w	r1, r1, #0
 800f298:	fb00 f303 	mul.w	r3, r0, r3
 800f29c:	fb01 330a 	mla	r3, r1, sl, r3
 800f2a0:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f2a4:	1986      	adds	r6, r0, r6
 800f2a6:	4453      	add	r3, sl
 800f2a8:	eb43 0707 	adc.w	r7, r3, r7
 800f2ac:	e7b9      	b.n	800f222 <rcl_timer_call+0x96>
 800f2ae:	bf00      	nop

0800f2b0 <rcl_timer_is_ready>:
 800f2b0:	b570      	push	{r4, r5, r6, lr}
 800f2b2:	b082      	sub	sp, #8
 800f2b4:	b378      	cbz	r0, 800f316 <rcl_timer_is_ready+0x66>
 800f2b6:	6803      	ldr	r3, [r0, #0]
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	b383      	cbz	r3, 800f31e <rcl_timer_is_ready+0x6e>
 800f2bc:	460d      	mov	r5, r1
 800f2be:	b351      	cbz	r1, 800f316 <rcl_timer_is_ready+0x66>
 800f2c0:	f3bf 8f5b 	dmb	ish
 800f2c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f2c8:	f3bf 8f5b 	dmb	ish
 800f2cc:	b953      	cbnz	r3, 800f2e4 <rcl_timer_is_ready+0x34>
 800f2ce:	6803      	ldr	r3, [r0, #0]
 800f2d0:	4669      	mov	r1, sp
 800f2d2:	6818      	ldr	r0, [r3, #0]
 800f2d4:	f008 f854 	bl	8017380 <rcl_clock_get_now>
 800f2d8:	4606      	mov	r6, r0
 800f2da:	b140      	cbz	r0, 800f2ee <rcl_timer_is_ready+0x3e>
 800f2dc:	f240 3321 	movw	r3, #801	@ 0x321
 800f2e0:	4298      	cmp	r0, r3
 800f2e2:	d101      	bne.n	800f2e8 <rcl_timer_is_ready+0x38>
 800f2e4:	2600      	movs	r6, #0
 800f2e6:	702e      	strb	r6, [r5, #0]
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	b002      	add	sp, #8
 800f2ec:	bd70      	pop	{r4, r5, r6, pc}
 800f2ee:	6820      	ldr	r0, [r4, #0]
 800f2f0:	2105      	movs	r1, #5
 800f2f2:	3028      	adds	r0, #40	@ 0x28
 800f2f4:	f001 f846 	bl	8010384 <__atomic_load_8>
 800f2f8:	9b00      	ldr	r3, [sp, #0]
 800f2fa:	1ac0      	subs	r0, r0, r3
 800f2fc:	9b01      	ldr	r3, [sp, #4]
 800f2fe:	eb61 0103 	sbc.w	r1, r1, r3
 800f302:	2801      	cmp	r0, #1
 800f304:	f171 0300 	sbcs.w	r3, r1, #0
 800f308:	bfb4      	ite	lt
 800f30a:	2301      	movlt	r3, #1
 800f30c:	2300      	movge	r3, #0
 800f30e:	4630      	mov	r0, r6
 800f310:	702b      	strb	r3, [r5, #0]
 800f312:	b002      	add	sp, #8
 800f314:	bd70      	pop	{r4, r5, r6, pc}
 800f316:	260b      	movs	r6, #11
 800f318:	4630      	mov	r0, r6
 800f31a:	b002      	add	sp, #8
 800f31c:	bd70      	pop	{r4, r5, r6, pc}
 800f31e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f322:	e7e1      	b.n	800f2e8 <rcl_timer_is_ready+0x38>

0800f324 <rcl_timer_get_time_until_next_call>:
 800f324:	b570      	push	{r4, r5, r6, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	b330      	cbz	r0, 800f378 <rcl_timer_get_time_until_next_call+0x54>
 800f32a:	6803      	ldr	r3, [r0, #0]
 800f32c:	4604      	mov	r4, r0
 800f32e:	b33b      	cbz	r3, 800f380 <rcl_timer_get_time_until_next_call+0x5c>
 800f330:	460d      	mov	r5, r1
 800f332:	b309      	cbz	r1, 800f378 <rcl_timer_get_time_until_next_call+0x54>
 800f334:	f3bf 8f5b 	dmb	ish
 800f338:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f33c:	f3bf 8f5b 	dmb	ish
 800f340:	b9ab      	cbnz	r3, 800f36e <rcl_timer_get_time_until_next_call+0x4a>
 800f342:	6803      	ldr	r3, [r0, #0]
 800f344:	4669      	mov	r1, sp
 800f346:	6818      	ldr	r0, [r3, #0]
 800f348:	f008 f81a 	bl	8017380 <rcl_clock_get_now>
 800f34c:	4606      	mov	r6, r0
 800f34e:	b958      	cbnz	r0, 800f368 <rcl_timer_get_time_until_next_call+0x44>
 800f350:	6820      	ldr	r0, [r4, #0]
 800f352:	2105      	movs	r1, #5
 800f354:	3028      	adds	r0, #40	@ 0x28
 800f356:	f001 f815 	bl	8010384 <__atomic_load_8>
 800f35a:	9b00      	ldr	r3, [sp, #0]
 800f35c:	1ac0      	subs	r0, r0, r3
 800f35e:	9b01      	ldr	r3, [sp, #4]
 800f360:	6028      	str	r0, [r5, #0]
 800f362:	eb61 0103 	sbc.w	r1, r1, r3
 800f366:	6069      	str	r1, [r5, #4]
 800f368:	4630      	mov	r0, r6
 800f36a:	b002      	add	sp, #8
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	f240 3621 	movw	r6, #801	@ 0x321
 800f372:	4630      	mov	r0, r6
 800f374:	b002      	add	sp, #8
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	260b      	movs	r6, #11
 800f37a:	4630      	mov	r0, r6
 800f37c:	b002      	add	sp, #8
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
 800f380:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f384:	e7f0      	b.n	800f368 <rcl_timer_get_time_until_next_call+0x44>
 800f386:	bf00      	nop

0800f388 <rcl_timer_get_guard_condition>:
 800f388:	b130      	cbz	r0, 800f398 <rcl_timer_get_guard_condition+0x10>
 800f38a:	6800      	ldr	r0, [r0, #0]
 800f38c:	b120      	cbz	r0, 800f398 <rcl_timer_get_guard_condition+0x10>
 800f38e:	68c3      	ldr	r3, [r0, #12]
 800f390:	b10b      	cbz	r3, 800f396 <rcl_timer_get_guard_condition+0xe>
 800f392:	3008      	adds	r0, #8
 800f394:	4770      	bx	lr
 800f396:	4618      	mov	r0, r3
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop

0800f39c <_rclc_check_for_new_data>:
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d046      	beq.n	800f42e <_rclc_check_for_new_data+0x92>
 800f3a0:	b510      	push	{r4, lr}
 800f3a2:	7802      	ldrb	r2, [r0, #0]
 800f3a4:	b084      	sub	sp, #16
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2a0a      	cmp	r2, #10
 800f3aa:	d842      	bhi.n	800f432 <_rclc_check_for_new_data+0x96>
 800f3ac:	e8df f002 	tbb	[pc, r2]
 800f3b0:	14181212 	.word	0x14181212
 800f3b4:	06060614 	.word	0x06060614
 800f3b8:	2e1a      	.short	0x2e1a
 800f3ba:	16          	.byte	0x16
 800f3bb:	00          	.byte	0x00
 800f3bc:	6a0a      	ldr	r2, [r1, #32]
 800f3be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f3c0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	1a12      	subs	r2, r2, r0
 800f3c8:	bf18      	it	ne
 800f3ca:	2201      	movne	r2, #1
 800f3cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f3d0:	b004      	add	sp, #16
 800f3d2:	bd10      	pop	{r4, pc}
 800f3d4:	680a      	ldr	r2, [r1, #0]
 800f3d6:	e7f2      	b.n	800f3be <_rclc_check_for_new_data+0x22>
 800f3d8:	698a      	ldr	r2, [r1, #24]
 800f3da:	e7f0      	b.n	800f3be <_rclc_check_for_new_data+0x22>
 800f3dc:	688a      	ldr	r2, [r1, #8]
 800f3de:	e7ee      	b.n	800f3be <_rclc_check_for_new_data+0x22>
 800f3e0:	690a      	ldr	r2, [r1, #16]
 800f3e2:	e7ec      	b.n	800f3be <_rclc_check_for_new_data+0x22>
 800f3e4:	685c      	ldr	r4, [r3, #4]
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f3ec:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f3f0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f3f4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f3fe:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f402:	f104 0110 	add.w	r1, r4, #16
 800f406:	f008 fff7 	bl	80183f8 <rcl_action_client_wait_set_get_entities_ready>
 800f40a:	e7e1      	b.n	800f3d0 <_rclc_check_for_new_data+0x34>
 800f40c:	685c      	ldr	r4, [r3, #4]
 800f40e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f412:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f416:	e9cd 3200 	strd	r3, r2, [sp]
 800f41a:	4608      	mov	r0, r1
 800f41c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f420:	f104 0220 	add.w	r2, r4, #32
 800f424:	f104 0110 	add.w	r1, r4, #16
 800f428:	f009 f9fe 	bl	8018828 <rcl_action_server_wait_set_get_entities_ready>
 800f42c:	e7d0      	b.n	800f3d0 <_rclc_check_for_new_data+0x34>
 800f42e:	200b      	movs	r0, #11
 800f430:	4770      	bx	lr
 800f432:	2001      	movs	r0, #1
 800f434:	e7cc      	b.n	800f3d0 <_rclc_check_for_new_data+0x34>
 800f436:	bf00      	nop

0800f438 <_rclc_take_new_data>:
 800f438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f43a:	b09b      	sub	sp, #108	@ 0x6c
 800f43c:	2800      	cmp	r0, #0
 800f43e:	f000 8088 	beq.w	800f552 <_rclc_take_new_data+0x11a>
 800f442:	7803      	ldrb	r3, [r0, #0]
 800f444:	4604      	mov	r4, r0
 800f446:	2b0a      	cmp	r3, #10
 800f448:	f200 8167 	bhi.w	800f71a <_rclc_take_new_data+0x2e2>
 800f44c:	e8df f003 	tbb	[pc, r3]
 800f450:	44152d2d 	.word	0x44152d2d
 800f454:	19191944 	.word	0x19191944
 800f458:	065a      	.short	0x065a
 800f45a:	15          	.byte	0x15
 800f45b:	00          	.byte	0x00
 800f45c:	6840      	ldr	r0, [r0, #4]
 800f45e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f040 80b2 	bne.w	800f5cc <_rclc_take_new_data+0x194>
 800f468:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f040 80e4 	bne.w	800f63a <_rclc_take_new_data+0x202>
 800f472:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f476:	2b00      	cmp	r3, #0
 800f478:	d16f      	bne.n	800f55a <_rclc_take_new_data+0x122>
 800f47a:	2500      	movs	r5, #0
 800f47c:	4628      	mov	r0, r5
 800f47e:	b01b      	add	sp, #108	@ 0x6c
 800f480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f482:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f484:	6a0b      	ldr	r3, [r1, #32]
 800f486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0f5      	beq.n	800f47a <_rclc_take_new_data+0x42>
 800f48e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f492:	f104 0110 	add.w	r1, r4, #16
 800f496:	f007 fe4f 	bl	8017138 <rcl_take_request>
 800f49a:	4605      	mov	r5, r0
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d0ec      	beq.n	800f47a <_rclc_take_new_data+0x42>
 800f4a0:	f240 2359 	movw	r3, #601	@ 0x259
 800f4a4:	4298      	cmp	r0, r3
 800f4a6:	d013      	beq.n	800f4d0 <_rclc_take_new_data+0x98>
 800f4a8:	e029      	b.n	800f4fe <_rclc_take_new_data+0xc6>
 800f4aa:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f4ac:	680b      	ldr	r3, [r1, #0]
 800f4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d0e1      	beq.n	800f47a <_rclc_take_new_data+0x42>
 800f4b6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	aa0a      	add	r2, sp, #40	@ 0x28
 800f4be:	f7ff fc8b 	bl	800edd8 <rcl_take>
 800f4c2:	4605      	mov	r5, r0
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d0d9      	beq.n	800f47c <_rclc_take_new_data+0x44>
 800f4c8:	f240 1391 	movw	r3, #401	@ 0x191
 800f4cc:	4298      	cmp	r0, r3
 800f4ce:	d116      	bne.n	800f4fe <_rclc_take_new_data+0xc6>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f4d6:	e7d1      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f4d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f4da:	698b      	ldr	r3, [r1, #24]
 800f4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d0ca      	beq.n	800f47a <_rclc_take_new_data+0x42>
 800f4e4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f4e8:	f104 0110 	add.w	r1, r4, #16
 800f4ec:	f007 fad4 	bl	8016a98 <rcl_take_response>
 800f4f0:	4605      	mov	r5, r0
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d0c1      	beq.n	800f47a <_rclc_take_new_data+0x42>
 800f4f6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f4fa:	4298      	cmp	r0, r3
 800f4fc:	d0be      	beq.n	800f47c <_rclc_take_new_data+0x44>
 800f4fe:	f001 f813 	bl	8010528 <rcutils_reset_error>
 800f502:	e7bb      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f504:	6840      	ldr	r0, [r0, #4]
 800f506:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d17d      	bne.n	800f60a <_rclc_take_new_data+0x1d2>
 800f50e:	69c3      	ldr	r3, [r0, #28]
 800f510:	b11b      	cbz	r3, 800f51a <_rclc_take_new_data+0xe2>
 800f512:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f516:	2b00      	cmp	r3, #0
 800f518:	d144      	bne.n	800f5a4 <_rclc_take_new_data+0x16c>
 800f51a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f040 80ac 	bne.w	800f67c <_rclc_take_new_data+0x244>
 800f524:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0a6      	beq.n	800f47a <_rclc_take_new_data+0x42>
 800f52c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f52e:	a90a      	add	r1, sp, #40	@ 0x28
 800f530:	3010      	adds	r0, #16
 800f532:	f008 fe39 	bl	80181a8 <rcl_action_take_result_response>
 800f536:	4605      	mov	r5, r0
 800f538:	2800      	cmp	r0, #0
 800f53a:	d1e0      	bne.n	800f4fe <_rclc_take_new_data+0xc6>
 800f53c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f540:	6860      	ldr	r0, [r4, #4]
 800f542:	f009 fa95 	bl	8018a70 <rclc_action_find_handle_by_result_request_sequence_number>
 800f546:	2800      	cmp	r0, #0
 800f548:	d098      	beq.n	800f47c <_rclc_take_new_data+0x44>
 800f54a:	2301      	movs	r3, #1
 800f54c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f550:	e794      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f552:	250b      	movs	r5, #11
 800f554:	4628      	mov	r0, r5
 800f556:	b01b      	add	sp, #108	@ 0x6c
 800f558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f55a:	ae04      	add	r6, sp, #16
 800f55c:	aa0a      	add	r2, sp, #40	@ 0x28
 800f55e:	3010      	adds	r0, #16
 800f560:	4631      	mov	r1, r6
 800f562:	f009 f895 	bl	8018690 <rcl_action_take_cancel_request>
 800f566:	4605      	mov	r5, r0
 800f568:	2800      	cmp	r0, #0
 800f56a:	d1c8      	bne.n	800f4fe <_rclc_take_new_data+0xc6>
 800f56c:	6860      	ldr	r0, [r4, #4]
 800f56e:	a90a      	add	r1, sp, #40	@ 0x28
 800f570:	f009 fa3c 	bl	80189ec <rclc_action_find_goal_handle_by_uuid>
 800f574:	4607      	mov	r7, r0
 800f576:	2800      	cmp	r0, #0
 800f578:	f000 80bb 	beq.w	800f6f2 <_rclc_take_new_data+0x2ba>
 800f57c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f580:	2101      	movs	r1, #1
 800f582:	f009 f9bd 	bl	8018900 <rcl_action_transition_goal_state>
 800f586:	2803      	cmp	r0, #3
 800f588:	4684      	mov	ip, r0
 800f58a:	f040 80a7 	bne.w	800f6dc <_rclc_take_new_data+0x2a4>
 800f58e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f590:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f596:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f59a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f59e:	f887 c008 	strb.w	ip, [r7, #8]
 800f5a2:	e76b      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f5a4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f5a6:	3010      	adds	r0, #16
 800f5a8:	f008 fe7e 	bl	80182a8 <rcl_action_take_feedback>
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	d1a5      	bne.n	800f4fe <_rclc_take_new_data+0xc6>
 800f5b2:	6860      	ldr	r0, [r4, #4]
 800f5b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f5b6:	f009 fa19 	bl	80189ec <rclc_action_find_goal_handle_by_uuid>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	f000 80a3 	beq.w	800f708 <_rclc_take_new_data+0x2d0>
 800f5c2:	2201      	movs	r2, #1
 800f5c4:	6860      	ldr	r0, [r4, #4]
 800f5c6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f5ca:	e7a6      	b.n	800f51a <_rclc_take_new_data+0xe2>
 800f5cc:	f009 f9e8 	bl	80189a0 <rclc_action_take_goal_handle>
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	6860      	ldr	r0, [r4, #4]
 800f5d4:	2e00      	cmp	r6, #0
 800f5d6:	f43f af47 	beq.w	800f468 <_rclc_take_new_data+0x30>
 800f5da:	6070      	str	r0, [r6, #4]
 800f5dc:	69f2      	ldr	r2, [r6, #28]
 800f5de:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800f5e2:	3010      	adds	r0, #16
 800f5e4:	f008 ff9c 	bl	8018520 <rcl_action_take_goal_request>
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	f040 808e 	bne.w	800f70c <_rclc_take_new_data+0x2d4>
 800f5f0:	69f7      	ldr	r7, [r6, #28]
 800f5f2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f5f4:	7235      	strb	r5, [r6, #8]
 800f5f6:	f8c6 0009 	str.w	r0, [r6, #9]
 800f5fa:	f8c6 100d 	str.w	r1, [r6, #13]
 800f5fe:	6860      	ldr	r0, [r4, #4]
 800f600:	f8c6 2011 	str.w	r2, [r6, #17]
 800f604:	f8c6 3015 	str.w	r3, [r6, #21]
 800f608:	e72e      	b.n	800f468 <_rclc_take_new_data+0x30>
 800f60a:	aa04      	add	r2, sp, #16
 800f60c:	a90a      	add	r1, sp, #40	@ 0x28
 800f60e:	3010      	adds	r0, #16
 800f610:	f008 fd52 	bl	80180b8 <rcl_action_take_goal_response>
 800f614:	4605      	mov	r5, r0
 800f616:	2800      	cmp	r0, #0
 800f618:	f47f af71 	bne.w	800f4fe <_rclc_take_new_data+0xc6>
 800f61c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f620:	6860      	ldr	r0, [r4, #4]
 800f622:	f009 fa13 	bl	8018a4c <rclc_action_find_handle_by_goal_request_sequence_number>
 800f626:	b130      	cbz	r0, 800f636 <_rclc_take_new_data+0x1fe>
 800f628:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f62c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f630:	2201      	movs	r2, #1
 800f632:	f880 2020 	strb.w	r2, [r0, #32]
 800f636:	6860      	ldr	r0, [r4, #4]
 800f638:	e769      	b.n	800f50e <_rclc_take_new_data+0xd6>
 800f63a:	aa04      	add	r2, sp, #16
 800f63c:	3010      	adds	r0, #16
 800f63e:	a90a      	add	r1, sp, #40	@ 0x28
 800f640:	f008 ffe6 	bl	8018610 <rcl_action_take_result_request>
 800f644:	4605      	mov	r5, r0
 800f646:	2800      	cmp	r0, #0
 800f648:	f47f af59 	bne.w	800f4fe <_rclc_take_new_data+0xc6>
 800f64c:	6860      	ldr	r0, [r4, #4]
 800f64e:	a904      	add	r1, sp, #16
 800f650:	f009 f9cc 	bl	80189ec <rclc_action_find_goal_handle_by_uuid>
 800f654:	4607      	mov	r7, r0
 800f656:	b160      	cbz	r0, 800f672 <_rclc_take_new_data+0x23a>
 800f658:	ad0a      	add	r5, sp, #40	@ 0x28
 800f65a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800f65e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f660:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f662:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f666:	f04f 0c02 	mov.w	ip, #2
 800f66a:	e886 0003 	stmia.w	r6, {r0, r1}
 800f66e:	f887 c008 	strb.w	ip, [r7, #8]
 800f672:	6860      	ldr	r0, [r4, #4]
 800f674:	2300      	movs	r3, #0
 800f676:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800f67a:	e6fa      	b.n	800f472 <_rclc_take_new_data+0x3a>
 800f67c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800f680:	a90a      	add	r1, sp, #40	@ 0x28
 800f682:	3010      	adds	r0, #16
 800f684:	f008 fdd0 	bl	8018228 <rcl_action_take_cancel_response>
 800f688:	4605      	mov	r5, r0
 800f68a:	2800      	cmp	r0, #0
 800f68c:	f47f af37 	bne.w	800f4fe <_rclc_take_new_data+0xc6>
 800f690:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f694:	6860      	ldr	r0, [r4, #4]
 800f696:	f009 f9fd 	bl	8018a94 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800f69a:	4606      	mov	r6, r0
 800f69c:	6860      	ldr	r0, [r4, #4]
 800f69e:	2e00      	cmp	r6, #0
 800f6a0:	f43f af40 	beq.w	800f524 <_rclc_take_new_data+0xec>
 800f6a4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f6a6:	2701      	movs	r7, #1
 800f6a8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f43f af3a 	beq.w	800f524 <_rclc_take_new_data+0xec>
 800f6b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f6b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800f6b6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f6ba:	f009 f997 	bl	80189ec <rclc_action_find_goal_handle_by_uuid>
 800f6be:	b138      	cbz	r0, 800f6d0 <_rclc_take_new_data+0x298>
 800f6c0:	6860      	ldr	r0, [r4, #4]
 800f6c2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f6c4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800f6c8:	3501      	adds	r5, #1
 800f6ca:	42ab      	cmp	r3, r5
 800f6cc:	d8f0      	bhi.n	800f6b0 <_rclc_take_new_data+0x278>
 800f6ce:	e729      	b.n	800f524 <_rclc_take_new_data+0xec>
 800f6d0:	6860      	ldr	r0, [r4, #4]
 800f6d2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f6d4:	3501      	adds	r5, #1
 800f6d6:	42ab      	cmp	r3, r5
 800f6d8:	d8ea      	bhi.n	800f6b0 <_rclc_take_new_data+0x278>
 800f6da:	e723      	b.n	800f524 <_rclc_take_new_data+0xec>
 800f6dc:	ab06      	add	r3, sp, #24
 800f6de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f6e4:	2103      	movs	r1, #3
 800f6e6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f6ea:	6860      	ldr	r0, [r4, #4]
 800f6ec:	f009 fa48 	bl	8018b80 <rclc_action_server_goal_cancel_reject>
 800f6f0:	e6c4      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f6f2:	ab06      	add	r3, sp, #24
 800f6f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6f6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f6fa:	2102      	movs	r1, #2
 800f6fc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f700:	6860      	ldr	r0, [r4, #4]
 800f702:	f009 fa3d 	bl	8018b80 <rclc_action_server_goal_cancel_reject>
 800f706:	e6b9      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f708:	6860      	ldr	r0, [r4, #4]
 800f70a:	e706      	b.n	800f51a <_rclc_take_new_data+0xe2>
 800f70c:	6860      	ldr	r0, [r4, #4]
 800f70e:	4631      	mov	r1, r6
 800f710:	f009 f956 	bl	80189c0 <rclc_action_remove_used_goal_handle>
 800f714:	f000 ff08 	bl	8010528 <rcutils_reset_error>
 800f718:	e6b0      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f71a:	2501      	movs	r5, #1
 800f71c:	e6ae      	b.n	800f47c <_rclc_take_new_data+0x44>
 800f71e:	bf00      	nop

0800f720 <_rclc_execute.part.0>:
 800f720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f722:	7803      	ldrb	r3, [r0, #0]
 800f724:	b087      	sub	sp, #28
 800f726:	4604      	mov	r4, r0
 800f728:	2b0a      	cmp	r3, #10
 800f72a:	f200 8136 	bhi.w	800f99a <_rclc_execute.part.0+0x27a>
 800f72e:	e8df f003 	tbb	[pc, r3]
 800f732:	435e      	.short	0x435e
 800f734:	06a1664f 	.word	0x06a1664f
 800f738:	6c1e0606 	.word	0x6c1e0606
 800f73c:	59          	.byte	0x59
 800f73d:	00          	.byte	0x00
 800f73e:	2b06      	cmp	r3, #6
 800f740:	f000 8122 	beq.w	800f988 <_rclc_execute.part.0+0x268>
 800f744:	2b07      	cmp	r3, #7
 800f746:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f748:	f040 8118 	bne.w	800f97c <_rclc_execute.part.0+0x25c>
 800f74c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f750:	6880      	ldr	r0, [r0, #8]
 800f752:	4798      	blx	r3
 800f754:	f104 0110 	add.w	r1, r4, #16
 800f758:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f75a:	6860      	ldr	r0, [r4, #4]
 800f75c:	f007 fd2c 	bl	80171b8 <rcl_send_response>
 800f760:	2800      	cmp	r0, #0
 800f762:	d033      	beq.n	800f7cc <_rclc_execute.part.0+0xac>
 800f764:	9005      	str	r0, [sp, #20]
 800f766:	f000 fedf 	bl	8010528 <rcutils_reset_error>
 800f76a:	9805      	ldr	r0, [sp, #20]
 800f76c:	e02e      	b.n	800f7cc <_rclc_execute.part.0+0xac>
 800f76e:	6840      	ldr	r0, [r0, #4]
 800f770:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f774:	2b00      	cmp	r3, #0
 800f776:	f000 8086 	beq.w	800f886 <_rclc_execute.part.0+0x166>
 800f77a:	2600      	movs	r6, #0
 800f77c:	2701      	movs	r7, #1
 800f77e:	e004      	b.n	800f78a <_rclc_execute.part.0+0x6a>
 800f780:	f009 f8e8 	bl	8018954 <rclc_action_send_result_request>
 800f784:	b998      	cbnz	r0, 800f7ae <_rclc_execute.part.0+0x8e>
 800f786:	722f      	strb	r7, [r5, #8]
 800f788:	6860      	ldr	r0, [r4, #4]
 800f78a:	f009 f995 	bl	8018ab8 <rclc_action_find_first_handle_with_goal_response>
 800f78e:	4605      	mov	r5, r0
 800f790:	2800      	cmp	r0, #0
 800f792:	d077      	beq.n	800f884 <_rclc_execute.part.0+0x164>
 800f794:	6863      	ldr	r3, [r4, #4]
 800f796:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f798:	699b      	ldr	r3, [r3, #24]
 800f79a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f79e:	f885 6020 	strb.w	r6, [r5, #32]
 800f7a2:	4798      	blx	r3
 800f7a4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f7a8:	4628      	mov	r0, r5
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d1e8      	bne.n	800f780 <_rclc_execute.part.0+0x60>
 800f7ae:	6860      	ldr	r0, [r4, #4]
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	f009 f905 	bl	80189c0 <rclc_action_remove_used_goal_handle>
 800f7b6:	e7e7      	b.n	800f788 <_rclc_execute.part.0+0x68>
 800f7b8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800f7bc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800f7c0:	2d00      	cmp	r5, #0
 800f7c2:	f000 80c9 	beq.w	800f958 <_rclc_execute.part.0+0x238>
 800f7c6:	6880      	ldr	r0, [r0, #8]
 800f7c8:	4798      	blx	r3
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	b007      	add	sp, #28
 800f7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7d0:	6840      	ldr	r0, [r0, #4]
 800f7d2:	f7ff fcdb 	bl	800f18c <rcl_timer_call>
 800f7d6:	f240 3321 	movw	r3, #801	@ 0x321
 800f7da:	4298      	cmp	r0, r3
 800f7dc:	d004      	beq.n	800f7e8 <_rclc_execute.part.0+0xc8>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d0f4      	beq.n	800f7cc <_rclc_execute.part.0+0xac>
 800f7e2:	e7bf      	b.n	800f764 <_rclc_execute.part.0+0x44>
 800f7e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f7e6:	4798      	blx	r3
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	b007      	add	sp, #28
 800f7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ee:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800f7f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f7f4:	b925      	cbnz	r5, 800f800 <_rclc_execute.part.0+0xe0>
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	4798      	blx	r3
 800f7fa:	4628      	mov	r0, r5
 800f7fc:	e7e6      	b.n	800f7cc <_rclc_execute.part.0+0xac>
 800f7fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f800:	68a0      	ldr	r0, [r4, #8]
 800f802:	4798      	blx	r3
 800f804:	2000      	movs	r0, #0
 800f806:	b007      	add	sp, #28
 800f808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f80a:	6840      	ldr	r0, [r0, #4]
 800f80c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f810:	bb3b      	cbnz	r3, 800f862 <_rclc_execute.part.0+0x142>
 800f812:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d07b      	beq.n	800f912 <_rclc_execute.part.0+0x1f2>
 800f81a:	f640 0634 	movw	r6, #2100	@ 0x834
 800f81e:	2701      	movs	r7, #1
 800f820:	e007      	b.n	800f832 <_rclc_execute.part.0+0x112>
 800f822:	4628      	mov	r0, r5
 800f824:	f009 f960 	bl	8018ae8 <rclc_action_server_response_goal_request>
 800f828:	6860      	ldr	r0, [r4, #4]
 800f82a:	4629      	mov	r1, r5
 800f82c:	f009 f8c8 	bl	80189c0 <rclc_action_remove_used_goal_handle>
 800f830:	6860      	ldr	r0, [r4, #4]
 800f832:	2100      	movs	r1, #0
 800f834:	f009 f8f2 	bl	8018a1c <rclc_action_find_first_handle_by_status>
 800f838:	4605      	mov	r5, r0
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d066      	beq.n	800f90c <_rclc_execute.part.0+0x1ec>
 800f83e:	6863      	ldr	r3, [r4, #4]
 800f840:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f842:	699b      	ldr	r3, [r3, #24]
 800f844:	4798      	blx	r3
 800f846:	42b0      	cmp	r0, r6
 800f848:	f04f 0100 	mov.w	r1, #0
 800f84c:	d1e9      	bne.n	800f822 <_rclc_execute.part.0+0x102>
 800f84e:	2101      	movs	r1, #1
 800f850:	4628      	mov	r0, r5
 800f852:	f009 f949 	bl	8018ae8 <rclc_action_server_response_goal_request>
 800f856:	722f      	strb	r7, [r5, #8]
 800f858:	e7ea      	b.n	800f830 <_rclc_execute.part.0+0x110>
 800f85a:	6848      	ldr	r0, [r1, #4]
 800f85c:	f009 f8b0 	bl	80189c0 <rclc_action_remove_used_goal_handle>
 800f860:	6860      	ldr	r0, [r4, #4]
 800f862:	f009 f8e7 	bl	8018a34 <rclc_action_find_first_terminated_handle>
 800f866:	4601      	mov	r1, r0
 800f868:	2800      	cmp	r0, #0
 800f86a:	d1f6      	bne.n	800f85a <_rclc_execute.part.0+0x13a>
 800f86c:	6860      	ldr	r0, [r4, #4]
 800f86e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f872:	e7ce      	b.n	800f812 <_rclc_execute.part.0+0xf2>
 800f874:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f876:	6880      	ldr	r0, [r0, #8]
 800f878:	f104 0110 	add.w	r1, r4, #16
 800f87c:	4798      	blx	r3
 800f87e:	2000      	movs	r0, #0
 800f880:	b007      	add	sp, #28
 800f882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f884:	6860      	ldr	r0, [r4, #4]
 800f886:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f88a:	b18b      	cbz	r3, 800f8b0 <_rclc_execute.part.0+0x190>
 800f88c:	68c5      	ldr	r5, [r0, #12]
 800f88e:	b32d      	cbz	r5, 800f8dc <_rclc_execute.part.0+0x1bc>
 800f890:	2600      	movs	r6, #0
 800f892:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f896:	b143      	cbz	r3, 800f8aa <_rclc_execute.part.0+0x18a>
 800f898:	69c3      	ldr	r3, [r0, #28]
 800f89a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f89e:	b123      	cbz	r3, 800f8aa <_rclc_execute.part.0+0x18a>
 800f8a0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f8a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	4798      	blx	r3
 800f8a8:	6860      	ldr	r0, [r4, #4]
 800f8aa:	682d      	ldr	r5, [r5, #0]
 800f8ac:	2d00      	cmp	r5, #0
 800f8ae:	d1f0      	bne.n	800f892 <_rclc_execute.part.0+0x172>
 800f8b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f8b4:	b193      	cbz	r3, 800f8dc <_rclc_execute.part.0+0x1bc>
 800f8b6:	68c5      	ldr	r5, [r0, #12]
 800f8b8:	b185      	cbz	r5, 800f8dc <_rclc_execute.part.0+0x1bc>
 800f8ba:	2600      	movs	r6, #0
 800f8bc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f8c0:	b14b      	cbz	r3, 800f8d6 <_rclc_execute.part.0+0x1b6>
 800f8c2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f8c4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f8c8:	b12b      	cbz	r3, 800f8d6 <_rclc_execute.part.0+0x1b6>
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f8d0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f8d2:	4798      	blx	r3
 800f8d4:	6860      	ldr	r0, [r4, #4]
 800f8d6:	682d      	ldr	r5, [r5, #0]
 800f8d8:	2d00      	cmp	r5, #0
 800f8da:	d1ef      	bne.n	800f8bc <_rclc_execute.part.0+0x19c>
 800f8dc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d081      	beq.n	800f7e8 <_rclc_execute.part.0+0xc8>
 800f8e4:	2700      	movs	r7, #0
 800f8e6:	e00b      	b.n	800f900 <_rclc_execute.part.0+0x1e0>
 800f8e8:	6863      	ldr	r3, [r4, #4]
 800f8ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f8ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f8ee:	6a1e      	ldr	r6, [r3, #32]
 800f8f0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f8f4:	47b0      	blx	r6
 800f8f6:	6860      	ldr	r0, [r4, #4]
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f009 f861 	bl	80189c0 <rclc_action_remove_used_goal_handle>
 800f8fe:	6860      	ldr	r0, [r4, #4]
 800f900:	f009 f8e6 	bl	8018ad0 <rclc_action_find_first_handle_with_result_response>
 800f904:	4605      	mov	r5, r0
 800f906:	2800      	cmp	r0, #0
 800f908:	d1ee      	bne.n	800f8e8 <_rclc_execute.part.0+0x1c8>
 800f90a:	e76d      	b.n	800f7e8 <_rclc_execute.part.0+0xc8>
 800f90c:	6860      	ldr	r0, [r4, #4]
 800f90e:	f880 5020 	strb.w	r5, [r0, #32]
 800f912:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f916:	2b00      	cmp	r3, #0
 800f918:	f43f af66 	beq.w	800f7e8 <_rclc_execute.part.0+0xc8>
 800f91c:	68c5      	ldr	r5, [r0, #12]
 800f91e:	b1b5      	cbz	r5, 800f94e <_rclc_execute.part.0+0x22e>
 800f920:	2602      	movs	r6, #2
 800f922:	e001      	b.n	800f928 <_rclc_execute.part.0+0x208>
 800f924:	682d      	ldr	r5, [r5, #0]
 800f926:	b195      	cbz	r5, 800f94e <_rclc_execute.part.0+0x22e>
 800f928:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f92c:	2b03      	cmp	r3, #3
 800f92e:	d1f9      	bne.n	800f924 <_rclc_execute.part.0+0x204>
 800f930:	69c3      	ldr	r3, [r0, #28]
 800f932:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f934:	4628      	mov	r0, r5
 800f936:	4798      	blx	r3
 800f938:	4603      	mov	r3, r0
 800f93a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f93e:	4628      	mov	r0, r5
 800f940:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f944:	b163      	cbz	r3, 800f960 <_rclc_execute.part.0+0x240>
 800f946:	f009 f8ef 	bl	8018b28 <rclc_action_server_goal_cancel_accept>
 800f94a:	6860      	ldr	r0, [r4, #4]
 800f94c:	e7ea      	b.n	800f924 <_rclc_execute.part.0+0x204>
 800f94e:	2300      	movs	r3, #0
 800f950:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f954:	4618      	mov	r0, r3
 800f956:	e739      	b.n	800f7cc <_rclc_execute.part.0+0xac>
 800f958:	4628      	mov	r0, r5
 800f95a:	4798      	blx	r3
 800f95c:	4628      	mov	r0, r5
 800f95e:	e735      	b.n	800f7cc <_rclc_execute.part.0+0xac>
 800f960:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f962:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f966:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f96e:	6860      	ldr	r0, [r4, #4]
 800f970:	2101      	movs	r1, #1
 800f972:	f009 f905 	bl	8018b80 <rclc_action_server_goal_cancel_reject>
 800f976:	722e      	strb	r6, [r5, #8]
 800f978:	6860      	ldr	r0, [r4, #4]
 800f97a:	e7d3      	b.n	800f924 <_rclc_execute.part.0+0x204>
 800f97c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f97e:	6880      	ldr	r0, [r0, #8]
 800f980:	4798      	blx	r3
 800f982:	f104 0110 	add.w	r1, r4, #16
 800f986:	e6e7      	b.n	800f758 <_rclc_execute.part.0+0x38>
 800f988:	f100 0110 	add.w	r1, r0, #16
 800f98c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f98e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f990:	6880      	ldr	r0, [r0, #8]
 800f992:	9105      	str	r1, [sp, #20]
 800f994:	4798      	blx	r3
 800f996:	9905      	ldr	r1, [sp, #20]
 800f998:	e6de      	b.n	800f758 <_rclc_execute.part.0+0x38>
 800f99a:	2001      	movs	r0, #1
 800f99c:	e716      	b.n	800f7cc <_rclc_execute.part.0+0xac>
 800f99e:	bf00      	nop

0800f9a0 <rclc_executor_trigger_any>:
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d03f      	beq.n	800fa24 <rclc_executor_trigger_any+0x84>
 800f9a4:	2900      	cmp	r1, #0
 800f9a6:	d03e      	beq.n	800fa26 <rclc_executor_trigger_any+0x86>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d037      	beq.n	800fa24 <rclc_executor_trigger_any+0x84>
 800f9b4:	b430      	push	{r4, r5}
 800f9b6:	f893 c000 	ldrb.w	ip, [r3]
 800f9ba:	f1bc 0f08 	cmp.w	ip, #8
 800f9be:	d11e      	bne.n	800f9fe <rclc_executor_trigger_any+0x5e>
 800f9c0:	685c      	ldr	r4, [r3, #4]
 800f9c2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f9c4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f9c8:	d105      	bne.n	800f9d6 <rclc_executor_trigger_any+0x36>
 800f9ca:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f9ce:	b910      	cbnz	r0, 800f9d6 <rclc_executor_trigger_any+0x36>
 800f9d0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f9d4:	b128      	cbz	r0, 800f9e2 <rclc_executor_trigger_any+0x42>
 800f9d6:	bc30      	pop	{r4, r5}
 800f9d8:	4770      	bx	lr
 800f9da:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f9de:	2800      	cmp	r0, #0
 800f9e0:	d1f9      	bne.n	800f9d6 <rclc_executor_trigger_any+0x36>
 800f9e2:	3201      	adds	r2, #1
 800f9e4:	4291      	cmp	r1, r2
 800f9e6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f9ea:	d018      	beq.n	800fa1e <rclc_executor_trigger_any+0x7e>
 800f9ec:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d0f0      	beq.n	800f9d6 <rclc_executor_trigger_any+0x36>
 800f9f4:	f893 c000 	ldrb.w	ip, [r3]
 800f9f8:	f1bc 0f08 	cmp.w	ip, #8
 800f9fc:	d0e0      	beq.n	800f9c0 <rclc_executor_trigger_any+0x20>
 800f9fe:	f1bc 0f09 	cmp.w	ip, #9
 800fa02:	d1ea      	bne.n	800f9da <rclc_executor_trigger_any+0x3a>
 800fa04:	685c      	ldr	r4, [r3, #4]
 800fa06:	6a25      	ldr	r5, [r4, #32]
 800fa08:	2d00      	cmp	r5, #0
 800fa0a:	d1e4      	bne.n	800f9d6 <rclc_executor_trigger_any+0x36>
 800fa0c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d1e0      	bne.n	800f9d6 <rclc_executor_trigger_any+0x36>
 800fa14:	3201      	adds	r2, #1
 800fa16:	4291      	cmp	r1, r2
 800fa18:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800fa1c:	d1e6      	bne.n	800f9ec <rclc_executor_trigger_any+0x4c>
 800fa1e:	2000      	movs	r0, #0
 800fa20:	bc30      	pop	{r4, r5}
 800fa22:	4770      	bx	lr
 800fa24:	4770      	bx	lr
 800fa26:	4608      	mov	r0, r1
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	0000      	movs	r0, r0
	...

0800fa30 <rclc_executor_init>:
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d05f      	beq.n	800faf4 <rclc_executor_init+0xc4>
 800fa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa38:	460c      	mov	r4, r1
 800fa3a:	b0b0      	sub	sp, #192	@ 0xc0
 800fa3c:	2900      	cmp	r1, #0
 800fa3e:	d051      	beq.n	800fae4 <rclc_executor_init+0xb4>
 800fa40:	4605      	mov	r5, r0
 800fa42:	4618      	mov	r0, r3
 800fa44:	4616      	mov	r6, r2
 800fa46:	461f      	mov	r7, r3
 800fa48:	f000 fc8e 	bl	8010368 <rcutils_allocator_is_valid>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d049      	beq.n	800fae4 <rclc_executor_init+0xb4>
 800fa50:	2e00      	cmp	r6, #0
 800fa52:	d047      	beq.n	800fae4 <rclc_executor_init+0xb4>
 800fa54:	492c      	ldr	r1, [pc, #176]	@ (800fb08 <rclc_executor_init+0xd8>)
 800fa56:	2288      	movs	r2, #136	@ 0x88
 800fa58:	a80e      	add	r0, sp, #56	@ 0x38
 800fa5a:	f00c fe1c 	bl	801c696 <memcpy>
 800fa5e:	a90e      	add	r1, sp, #56	@ 0x38
 800fa60:	2288      	movs	r2, #136	@ 0x88
 800fa62:	4628      	mov	r0, r5
 800fa64:	f00c fe17 	bl	801c696 <memcpy>
 800fa68:	602c      	str	r4, [r5, #0]
 800fa6a:	4668      	mov	r0, sp
 800fa6c:	60ae      	str	r6, [r5, #8]
 800fa6e:	466c      	mov	r4, sp
 800fa70:	f007 fd52 	bl	8017518 <rcl_get_zero_initialized_wait_set>
 800fa74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa76:	f105 0c14 	add.w	ip, r5, #20
 800fa7a:	f8d7 8000 	ldr.w	r8, [r7]
 800fa7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa8e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fb00 <rclc_executor_init+0xd0>
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	f8cc 3000 	str.w	r3, [ip]
 800fa98:	6939      	ldr	r1, [r7, #16]
 800fa9a:	612f      	str	r7, [r5, #16]
 800fa9c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800faa0:	01b0      	lsls	r0, r6, #6
 800faa2:	47c0      	blx	r8
 800faa4:	6068      	str	r0, [r5, #4]
 800faa6:	b338      	cbz	r0, 800faf8 <rclc_executor_init+0xc8>
 800faa8:	2400      	movs	r4, #0
 800faaa:	e000      	b.n	800faae <rclc_executor_init+0x7e>
 800faac:	6868      	ldr	r0, [r5, #4]
 800faae:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800fab2:	4631      	mov	r1, r6
 800fab4:	3401      	adds	r4, #1
 800fab6:	f000 facb 	bl	8010050 <rclc_executor_handle_init>
 800faba:	42a6      	cmp	r6, r4
 800fabc:	d1f6      	bne.n	800faac <rclc_executor_init+0x7c>
 800fabe:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800fac2:	f000 fab9 	bl	8010038 <rclc_executor_handle_counters_zero_init>
 800fac6:	4a11      	ldr	r2, [pc, #68]	@ (800fb0c <rclc_executor_init+0xdc>)
 800fac8:	686b      	ldr	r3, [r5, #4]
 800faca:	2000      	movs	r0, #0
 800facc:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800fad0:	b163      	cbz	r3, 800faec <rclc_executor_init+0xbc>
 800fad2:	692b      	ldr	r3, [r5, #16]
 800fad4:	b153      	cbz	r3, 800faec <rclc_executor_init+0xbc>
 800fad6:	68ab      	ldr	r3, [r5, #8]
 800fad8:	b143      	cbz	r3, 800faec <rclc_executor_init+0xbc>
 800fada:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800fade:	b030      	add	sp, #192	@ 0xc0
 800fae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fae4:	200b      	movs	r0, #11
 800fae6:	b030      	add	sp, #192	@ 0xc0
 800fae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faec:	4618      	mov	r0, r3
 800faee:	b030      	add	sp, #192	@ 0xc0
 800faf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf4:	200b      	movs	r0, #11
 800faf6:	4770      	bx	lr
 800faf8:	200a      	movs	r0, #10
 800fafa:	e7f4      	b.n	800fae6 <rclc_executor_init+0xb6>
 800fafc:	f3af 8000 	nop.w
 800fb00:	3b9aca00 	.word	0x3b9aca00
 800fb04:	00000000 	.word	0x00000000
 800fb08:	0801de80 	.word	0x0801de80
 800fb0c:	0800f9a1 	.word	0x0800f9a1

0800fb10 <rclc_executor_fini>:
 800fb10:	b308      	cbz	r0, 800fb56 <rclc_executor_fini+0x46>
 800fb12:	b538      	push	{r3, r4, r5, lr}
 800fb14:	4604      	mov	r4, r0
 800fb16:	6840      	ldr	r0, [r0, #4]
 800fb18:	b1d8      	cbz	r0, 800fb52 <rclc_executor_fini+0x42>
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	b1cb      	cbz	r3, 800fb52 <rclc_executor_fini+0x42>
 800fb1e:	68a2      	ldr	r2, [r4, #8]
 800fb20:	b1ba      	cbz	r2, 800fb52 <rclc_executor_fini+0x42>
 800fb22:	6919      	ldr	r1, [r3, #16]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	4798      	blx	r3
 800fb28:	2300      	movs	r3, #0
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	2100      	movs	r1, #0
 800fb2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fb32:	6063      	str	r3, [r4, #4]
 800fb34:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800fb38:	f104 0514 	add.w	r5, r4, #20
 800fb3c:	f000 fa7c 	bl	8010038 <rclc_executor_handle_counters_zero_init>
 800fb40:	4628      	mov	r0, r5
 800fb42:	f007 fcfd 	bl	8017540 <rcl_wait_set_is_valid>
 800fb46:	b940      	cbnz	r0, 800fb5a <rclc_executor_fini+0x4a>
 800fb48:	a309      	add	r3, pc, #36	@ (adr r3, 800fb70 <rclc_executor_fini+0x60>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800fb52:	2000      	movs	r0, #0
 800fb54:	bd38      	pop	{r3, r4, r5, pc}
 800fb56:	2000      	movs	r0, #0
 800fb58:	4770      	bx	lr
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f007 fcf6 	bl	801754c <rcl_wait_set_fini>
 800fb60:	2800      	cmp	r0, #0
 800fb62:	d0f1      	beq.n	800fb48 <rclc_executor_fini+0x38>
 800fb64:	f000 fce0 	bl	8010528 <rcutils_reset_error>
 800fb68:	e7ee      	b.n	800fb48 <rclc_executor_fini+0x38>
 800fb6a:	bf00      	nop
 800fb6c:	f3af 8000 	nop.w
 800fb70:	3b9aca00 	.word	0x3b9aca00
 800fb74:	00000000 	.word	0x00000000

0800fb78 <rclc_executor_add_subscription>:
 800fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb7a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800fb7e:	b338      	cbz	r0, 800fbd0 <rclc_executor_add_subscription+0x58>
 800fb80:	b331      	cbz	r1, 800fbd0 <rclc_executor_add_subscription+0x58>
 800fb82:	b32a      	cbz	r2, 800fbd0 <rclc_executor_add_subscription+0x58>
 800fb84:	b323      	cbz	r3, 800fbd0 <rclc_executor_add_subscription+0x58>
 800fb86:	4604      	mov	r4, r0
 800fb88:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800fb8c:	42a8      	cmp	r0, r5
 800fb8e:	d301      	bcc.n	800fb94 <rclc_executor_add_subscription+0x1c>
 800fb90:	2001      	movs	r0, #1
 800fb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb94:	6866      	ldr	r6, [r4, #4]
 800fb96:	0187      	lsls	r7, r0, #6
 800fb98:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	55f5      	strb	r5, [r6, r7]
 800fba0:	3001      	adds	r0, #1
 800fba2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800fba6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800fbaa:	2301      	movs	r3, #1
 800fbac:	f104 0514 	add.w	r5, r4, #20
 800fbb0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800fbb4:	f88c e001 	strb.w	lr, [ip, #1]
 800fbb8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800fbbc:	60e0      	str	r0, [r4, #12]
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	f007 fcbe 	bl	8017540 <rcl_wait_set_is_valid>
 800fbc4:	b930      	cbnz	r0, 800fbd4 <rclc_executor_add_subscription+0x5c>
 800fbc6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800fbc8:	3301      	adds	r3, #1
 800fbca:	2000      	movs	r0, #0
 800fbcc:	64a3      	str	r3, [r4, #72]	@ 0x48
 800fbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd0:	200b      	movs	r0, #11
 800fbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd4:	4628      	mov	r0, r5
 800fbd6:	f007 fcb9 	bl	801754c <rcl_wait_set_fini>
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	d0f3      	beq.n	800fbc6 <rclc_executor_add_subscription+0x4e>
 800fbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbe0 <rclc_executor_add_timer>:
 800fbe0:	b300      	cbz	r0, 800fc24 <rclc_executor_add_timer+0x44>
 800fbe2:	b1f9      	cbz	r1, 800fc24 <rclc_executor_add_timer+0x44>
 800fbe4:	b538      	push	{r3, r4, r5, lr}
 800fbe6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800fbea:	4293      	cmp	r3, r2
 800fbec:	4604      	mov	r4, r0
 800fbee:	d301      	bcc.n	800fbf4 <rclc_executor_add_timer+0x14>
 800fbf0:	2001      	movs	r0, #1
 800fbf2:	bd38      	pop	{r3, r4, r5, pc}
 800fbf4:	6840      	ldr	r0, [r0, #4]
 800fbf6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800fbfa:	019d      	lsls	r5, r3, #6
 800fbfc:	6051      	str	r1, [r2, #4]
 800fbfe:	2102      	movs	r1, #2
 800fc00:	5341      	strh	r1, [r0, r5]
 800fc02:	3301      	adds	r3, #1
 800fc04:	2000      	movs	r0, #0
 800fc06:	2101      	movs	r1, #1
 800fc08:	f104 0514 	add.w	r5, r4, #20
 800fc0c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800fc0e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800fc10:	4628      	mov	r0, r5
 800fc12:	60e3      	str	r3, [r4, #12]
 800fc14:	f007 fc94 	bl	8017540 <rcl_wait_set_is_valid>
 800fc18:	b930      	cbnz	r0, 800fc28 <rclc_executor_add_timer+0x48>
 800fc1a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	2000      	movs	r0, #0
 800fc20:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800fc22:	bd38      	pop	{r3, r4, r5, pc}
 800fc24:	200b      	movs	r0, #11
 800fc26:	4770      	bx	lr
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f007 fc8f 	bl	801754c <rcl_wait_set_fini>
 800fc2e:	2800      	cmp	r0, #0
 800fc30:	d0f3      	beq.n	800fc1a <rclc_executor_add_timer+0x3a>
 800fc32:	bd38      	pop	{r3, r4, r5, pc}

0800fc34 <rclc_executor_prepare>:
 800fc34:	2800      	cmp	r0, #0
 800fc36:	d044      	beq.n	800fcc2 <rclc_executor_prepare+0x8e>
 800fc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc3a:	f100 0514 	add.w	r5, r0, #20
 800fc3e:	b09b      	sub	sp, #108	@ 0x6c
 800fc40:	4604      	mov	r4, r0
 800fc42:	4628      	mov	r0, r5
 800fc44:	f007 fc7c 	bl	8017540 <rcl_wait_set_is_valid>
 800fc48:	b110      	cbz	r0, 800fc50 <rclc_executor_prepare+0x1c>
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	b01b      	add	sp, #108	@ 0x6c
 800fc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc50:	4628      	mov	r0, r5
 800fc52:	f007 fc7b 	bl	801754c <rcl_wait_set_fini>
 800fc56:	2800      	cmp	r0, #0
 800fc58:	d130      	bne.n	800fcbc <rclc_executor_prepare+0x88>
 800fc5a:	a80c      	add	r0, sp, #48	@ 0x30
 800fc5c:	f007 fc5c 	bl	8017518 <rcl_get_zero_initialized_wait_set>
 800fc60:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800fc64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc68:	46ae      	mov	lr, r5
 800fc6a:	6927      	ldr	r7, [r4, #16]
 800fc6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc80:	f8dc 3000 	ldr.w	r3, [ip]
 800fc84:	f8ce 3000 	str.w	r3, [lr]
 800fc88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fc8a:	ae04      	add	r6, sp, #16
 800fc8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	6822      	ldr	r2, [r4, #0]
 800fc92:	6033      	str	r3, [r6, #0]
 800fc94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc96:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800fc98:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fc9c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800fca0:	e9cd 2100 	strd	r2, r1, [sp]
 800fca4:	4628      	mov	r0, r5
 800fca6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800fca8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fcaa:	f007 ff4d 	bl	8017b48 <rcl_wait_set_init>
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d0cc      	beq.n	800fc4c <rclc_executor_prepare+0x18>
 800fcb2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fcb4:	f000 fc38 	bl	8010528 <rcutils_reset_error>
 800fcb8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fcba:	e7c7      	b.n	800fc4c <rclc_executor_prepare+0x18>
 800fcbc:	f000 fc34 	bl	8010528 <rcutils_reset_error>
 800fcc0:	e7cb      	b.n	800fc5a <rclc_executor_prepare+0x26>
 800fcc2:	200b      	movs	r0, #11
 800fcc4:	4770      	bx	lr
 800fcc6:	bf00      	nop

0800fcc8 <rclc_executor_spin_some.part.0>:
 800fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fccc:	f100 0614 	add.w	r6, r0, #20
 800fcd0:	b083      	sub	sp, #12
 800fcd2:	4691      	mov	r9, r2
 800fcd4:	4698      	mov	r8, r3
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	f7ff ffac 	bl	800fc34 <rclc_executor_prepare>
 800fcdc:	4630      	mov	r0, r6
 800fcde:	f007 fd01 	bl	80176e4 <rcl_wait_set_clear>
 800fce2:	4607      	mov	r7, r0
 800fce4:	2800      	cmp	r0, #0
 800fce6:	f040 80ed 	bne.w	800fec4 <rclc_executor_spin_some.part.0+0x1fc>
 800fcea:	68ab      	ldr	r3, [r5, #8]
 800fcec:	4604      	mov	r4, r0
 800fcee:	b303      	cbz	r3, 800fd32 <rclc_executor_spin_some.part.0+0x6a>
 800fcf0:	6869      	ldr	r1, [r5, #4]
 800fcf2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800fcf6:	01a2      	lsls	r2, r4, #6
 800fcf8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800fcfc:	b1cb      	cbz	r3, 800fd32 <rclc_executor_spin_some.part.0+0x6a>
 800fcfe:	5c8b      	ldrb	r3, [r1, r2]
 800fd00:	2b0a      	cmp	r3, #10
 800fd02:	f200 80d8 	bhi.w	800feb6 <rclc_executor_spin_some.part.0+0x1ee>
 800fd06:	e8df f003 	tbb	[pc, r3]
 800fd0a:	9c9c      	.short	0x9c9c
 800fd0c:	068c8ca7 	.word	0x068c8ca7
 800fd10:	bdc90606 	.word	0xbdc90606
 800fd14:	b2          	.byte	0xb2
 800fd15:	00          	.byte	0x00
 800fd16:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fd1a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fd1e:	4630      	mov	r0, r6
 800fd20:	f008 f828 	bl	8017d74 <rcl_wait_set_add_service>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	f040 8086 	bne.w	800fe36 <rclc_executor_spin_some.part.0+0x16e>
 800fd2a:	68ab      	ldr	r3, [r5, #8]
 800fd2c:	3401      	adds	r4, #1
 800fd2e:	429c      	cmp	r4, r3
 800fd30:	d3de      	bcc.n	800fcf0 <rclc_executor_spin_some.part.0+0x28>
 800fd32:	4643      	mov	r3, r8
 800fd34:	464a      	mov	r2, r9
 800fd36:	4630      	mov	r0, r6
 800fd38:	f008 f84a 	bl	8017dd0 <rcl_wait>
 800fd3c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 80c7 	beq.w	800fed4 <rclc_executor_spin_some.part.0+0x20c>
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	f040 80b5 	bne.w	800feb6 <rclc_executor_spin_some.part.0+0x1ee>
 800fd4c:	68ab      	ldr	r3, [r5, #8]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	f000 8159 	beq.w	8010006 <rclc_executor_spin_some.part.0+0x33e>
 800fd54:	2400      	movs	r4, #0
 800fd56:	46a0      	mov	r8, r4
 800fd58:	f240 1991 	movw	r9, #401	@ 0x191
 800fd5c:	e00a      	b.n	800fd74 <rclc_executor_spin_some.part.0+0xac>
 800fd5e:	f7ff fb1d 	bl	800f39c <_rclc_check_for_new_data>
 800fd62:	4604      	mov	r4, r0
 800fd64:	b110      	cbz	r0, 800fd6c <rclc_executor_spin_some.part.0+0xa4>
 800fd66:	4548      	cmp	r0, r9
 800fd68:	f040 80b2 	bne.w	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fd6c:	68ab      	ldr	r3, [r5, #8]
 800fd6e:	4598      	cmp	r8, r3
 800fd70:	f080 8126 	bcs.w	800ffc0 <rclc_executor_spin_some.part.0+0x2f8>
 800fd74:	686a      	ldr	r2, [r5, #4]
 800fd76:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800fd80:	f108 0801 	add.w	r8, r8, #1
 800fd84:	f1bc 0f00 	cmp.w	ip, #0
 800fd88:	d1e9      	bne.n	800fd5e <rclc_executor_spin_some.part.0+0x96>
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	4610      	mov	r0, r2
 800fd8e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800fd92:	4798      	blx	r3
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f000 809b 	beq.w	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fd9a:	68ab      	ldr	r3, [r5, #8]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 8097 	beq.w	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fda2:	f04f 0800 	mov.w	r8, #0
 800fda6:	f240 1991 	movw	r9, #401	@ 0x191
 800fdaa:	e009      	b.n	800fdc0 <rclc_executor_spin_some.part.0+0xf8>
 800fdac:	f7ff fb44 	bl	800f438 <_rclc_take_new_data>
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	b110      	cbz	r0, 800fdba <rclc_executor_spin_some.part.0+0xf2>
 800fdb4:	4548      	cmp	r0, r9
 800fdb6:	f040 808b 	bne.w	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fdba:	68ab      	ldr	r3, [r5, #8]
 800fdbc:	4598      	cmp	r8, r3
 800fdbe:	d209      	bcs.n	800fdd4 <rclc_executor_spin_some.part.0+0x10c>
 800fdc0:	6868      	ldr	r0, [r5, #4]
 800fdc2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800fdc6:	4631      	mov	r1, r6
 800fdc8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800fdcc:	f108 0801 	add.w	r8, r8, #1
 800fdd0:	2a00      	cmp	r2, #0
 800fdd2:	d1eb      	bne.n	800fdac <rclc_executor_spin_some.part.0+0xe4>
 800fdd4:	2600      	movs	r6, #0
 800fdd6:	b97b      	cbnz	r3, 800fdf8 <rclc_executor_spin_some.part.0+0x130>
 800fdd8:	e07a      	b.n	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fdda:	f812 200c 	ldrb.w	r2, [r2, ip]
 800fdde:	2a08      	cmp	r2, #8
 800fde0:	f000 80fd 	beq.w	800ffde <rclc_executor_spin_some.part.0+0x316>
 800fde4:	2a09      	cmp	r2, #9
 800fde6:	f000 80ef 	beq.w	800ffc8 <rclc_executor_spin_some.part.0+0x300>
 800fdea:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800fdee:	b98a      	cbnz	r2, 800fe14 <rclc_executor_spin_some.part.0+0x14c>
 800fdf0:	3601      	adds	r6, #1
 800fdf2:	429e      	cmp	r6, r3
 800fdf4:	d262      	bcs.n	800febc <rclc_executor_spin_some.part.0+0x1f4>
 800fdf6:	2400      	movs	r4, #0
 800fdf8:	686a      	ldr	r2, [r5, #4]
 800fdfa:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800fdfe:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800fe02:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800fe06:	2900      	cmp	r1, #0
 800fe08:	d062      	beq.n	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fe0a:	7841      	ldrb	r1, [r0, #1]
 800fe0c:	2900      	cmp	r1, #0
 800fe0e:	d0e4      	beq.n	800fdda <rclc_executor_spin_some.part.0+0x112>
 800fe10:	2901      	cmp	r1, #1
 800fe12:	d1ed      	bne.n	800fdf0 <rclc_executor_spin_some.part.0+0x128>
 800fe14:	f7ff fc84 	bl	800f720 <_rclc_execute.part.0>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	f040 80b6 	bne.w	800ff8a <rclc_executor_spin_some.part.0+0x2c2>
 800fe1e:	68ab      	ldr	r3, [r5, #8]
 800fe20:	e7e6      	b.n	800fdf0 <rclc_executor_spin_some.part.0+0x128>
 800fe22:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe26:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f007 ff76 	bl	8017d1c <rcl_wait_set_add_client>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	f43f af7a 	beq.w	800fd2a <rclc_executor_spin_some.part.0+0x62>
 800fe36:	9001      	str	r0, [sp, #4]
 800fe38:	f000 fb76 	bl	8010528 <rcutils_reset_error>
 800fe3c:	9801      	ldr	r0, [sp, #4]
 800fe3e:	4607      	mov	r7, r0
 800fe40:	e03c      	b.n	800febc <rclc_executor_spin_some.part.0+0x1f4>
 800fe42:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe46:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe4a:	4630      	mov	r0, r6
 800fe4c:	f007 fc1e 	bl	801768c <rcl_wait_set_add_subscription>
 800fe50:	2800      	cmp	r0, #0
 800fe52:	f43f af6a 	beq.w	800fd2a <rclc_executor_spin_some.part.0+0x62>
 800fe56:	e7ee      	b.n	800fe36 <rclc_executor_spin_some.part.0+0x16e>
 800fe58:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe5c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe60:	4630      	mov	r0, r6
 800fe62:	f007 ff2b 	bl	8017cbc <rcl_wait_set_add_timer>
 800fe66:	2800      	cmp	r0, #0
 800fe68:	f43f af5f 	beq.w	800fd2a <rclc_executor_spin_some.part.0+0x62>
 800fe6c:	e7e3      	b.n	800fe36 <rclc_executor_spin_some.part.0+0x16e>
 800fe6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe72:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe76:	4630      	mov	r0, r6
 800fe78:	f007 fef4 	bl	8017c64 <rcl_wait_set_add_guard_condition>
 800fe7c:	2800      	cmp	r0, #0
 800fe7e:	f43f af54 	beq.w	800fd2a <rclc_executor_spin_some.part.0+0x62>
 800fe82:	e7d8      	b.n	800fe36 <rclc_executor_spin_some.part.0+0x16e>
 800fe84:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe88:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe8c:	3110      	adds	r1, #16
 800fe8e:	4630      	mov	r0, r6
 800fe90:	f008 fc76 	bl	8018780 <rcl_action_wait_set_add_action_server>
 800fe94:	2800      	cmp	r0, #0
 800fe96:	f43f af48 	beq.w	800fd2a <rclc_executor_spin_some.part.0+0x62>
 800fe9a:	e7cc      	b.n	800fe36 <rclc_executor_spin_some.part.0+0x16e>
 800fe9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fea0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fea4:	3110      	adds	r1, #16
 800fea6:	2300      	movs	r3, #0
 800fea8:	4630      	mov	r0, r6
 800feaa:	f008 fa41 	bl	8018330 <rcl_action_wait_set_add_action_client>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f43f af3b 	beq.w	800fd2a <rclc_executor_spin_some.part.0+0x62>
 800feb4:	e7bf      	b.n	800fe36 <rclc_executor_spin_some.part.0+0x16e>
 800feb6:	f000 fb37 	bl	8010528 <rcutils_reset_error>
 800feba:	2701      	movs	r7, #1
 800febc:	4638      	mov	r0, r7
 800febe:	b003      	add	sp, #12
 800fec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec4:	f000 fb30 	bl	8010528 <rcutils_reset_error>
 800fec8:	4638      	mov	r0, r7
 800feca:	b003      	add	sp, #12
 800fecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed0:	4627      	mov	r7, r4
 800fed2:	e7f3      	b.n	800febc <rclc_executor_spin_some.part.0+0x1f4>
 800fed4:	68ab      	ldr	r3, [r5, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 8092 	beq.w	8010000 <rclc_executor_spin_some.part.0+0x338>
 800fedc:	2400      	movs	r4, #0
 800fede:	46a0      	mov	r8, r4
 800fee0:	f240 1991 	movw	r9, #401	@ 0x191
 800fee4:	e008      	b.n	800fef8 <rclc_executor_spin_some.part.0+0x230>
 800fee6:	f7ff fa59 	bl	800f39c <_rclc_check_for_new_data>
 800feea:	4604      	mov	r4, r0
 800feec:	b108      	cbz	r0, 800fef2 <rclc_executor_spin_some.part.0+0x22a>
 800feee:	4548      	cmp	r0, r9
 800fef0:	d1ee      	bne.n	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800fef2:	68ab      	ldr	r3, [r5, #8]
 800fef4:	4598      	cmp	r8, r3
 800fef6:	d265      	bcs.n	800ffc4 <rclc_executor_spin_some.part.0+0x2fc>
 800fef8:	686a      	ldr	r2, [r5, #4]
 800fefa:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800fefe:	4631      	mov	r1, r6
 800ff00:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800ff04:	f108 0801 	add.w	r8, r8, #1
 800ff08:	f1bc 0f00 	cmp.w	ip, #0
 800ff0c:	d1eb      	bne.n	800fee6 <rclc_executor_spin_some.part.0+0x21e>
 800ff0e:	4619      	mov	r1, r3
 800ff10:	4610      	mov	r0, r2
 800ff12:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800ff16:	4798      	blx	r3
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d0d9      	beq.n	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800ff1c:	68ab      	ldr	r3, [r5, #8]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0d6      	beq.n	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800ff22:	f04f 0800 	mov.w	r8, #0
 800ff26:	f240 1991 	movw	r9, #401	@ 0x191
 800ff2a:	f240 2a59 	movw	sl, #601	@ 0x259
 800ff2e:	e00e      	b.n	800ff4e <rclc_executor_spin_some.part.0+0x286>
 800ff30:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ff34:	2b08      	cmp	r3, #8
 800ff36:	d033      	beq.n	800ffa0 <rclc_executor_spin_some.part.0+0x2d8>
 800ff38:	2b09      	cmp	r3, #9
 800ff3a:	d028      	beq.n	800ff8e <rclc_executor_spin_some.part.0+0x2c6>
 800ff3c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ff40:	b9fb      	cbnz	r3, 800ff82 <rclc_executor_spin_some.part.0+0x2ba>
 800ff42:	68ab      	ldr	r3, [r5, #8]
 800ff44:	f108 0801 	add.w	r8, r8, #1
 800ff48:	4598      	cmp	r8, r3
 800ff4a:	d2b7      	bcs.n	800febc <rclc_executor_spin_some.part.0+0x1f4>
 800ff4c:	2400      	movs	r4, #0
 800ff4e:	6868      	ldr	r0, [r5, #4]
 800ff50:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ff54:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ff58:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d0b7      	beq.n	800fed0 <rclc_executor_spin_some.part.0+0x208>
 800ff60:	4631      	mov	r1, r6
 800ff62:	f7ff fa69 	bl	800f438 <_rclc_take_new_data>
 800ff66:	b118      	cbz	r0, 800ff70 <rclc_executor_spin_some.part.0+0x2a8>
 800ff68:	4548      	cmp	r0, r9
 800ff6a:	d001      	beq.n	800ff70 <rclc_executor_spin_some.part.0+0x2a8>
 800ff6c:	4550      	cmp	r0, sl
 800ff6e:	d10c      	bne.n	800ff8a <rclc_executor_spin_some.part.0+0x2c2>
 800ff70:	686b      	ldr	r3, [r5, #4]
 800ff72:	eb13 000b 	adds.w	r0, r3, fp
 800ff76:	d021      	beq.n	800ffbc <rclc_executor_spin_some.part.0+0x2f4>
 800ff78:	7842      	ldrb	r2, [r0, #1]
 800ff7a:	2a00      	cmp	r2, #0
 800ff7c:	d0d8      	beq.n	800ff30 <rclc_executor_spin_some.part.0+0x268>
 800ff7e:	2a01      	cmp	r2, #1
 800ff80:	d1df      	bne.n	800ff42 <rclc_executor_spin_some.part.0+0x27a>
 800ff82:	f7ff fbcd 	bl	800f720 <_rclc_execute.part.0>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	d0db      	beq.n	800ff42 <rclc_executor_spin_some.part.0+0x27a>
 800ff8a:	4607      	mov	r7, r0
 800ff8c:	e796      	b.n	800febc <rclc_executor_spin_some.part.0+0x1f4>
 800ff8e:	6843      	ldr	r3, [r0, #4]
 800ff90:	6a1a      	ldr	r2, [r3, #32]
 800ff92:	2a00      	cmp	r2, #0
 800ff94:	d1f5      	bne.n	800ff82 <rclc_executor_spin_some.part.0+0x2ba>
 800ff96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d0d1      	beq.n	800ff42 <rclc_executor_spin_some.part.0+0x27a>
 800ff9e:	e7f0      	b.n	800ff82 <rclc_executor_spin_some.part.0+0x2ba>
 800ffa0:	6843      	ldr	r3, [r0, #4]
 800ffa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ffa4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800ffa8:	d1eb      	bne.n	800ff82 <rclc_executor_spin_some.part.0+0x2ba>
 800ffaa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ffae:	2a00      	cmp	r2, #0
 800ffb0:	d1e7      	bne.n	800ff82 <rclc_executor_spin_some.part.0+0x2ba>
 800ffb2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d0c3      	beq.n	800ff42 <rclc_executor_spin_some.part.0+0x27a>
 800ffba:	e7e2      	b.n	800ff82 <rclc_executor_spin_some.part.0+0x2ba>
 800ffbc:	270b      	movs	r7, #11
 800ffbe:	e77d      	b.n	800febc <rclc_executor_spin_some.part.0+0x1f4>
 800ffc0:	686a      	ldr	r2, [r5, #4]
 800ffc2:	e6e2      	b.n	800fd8a <rclc_executor_spin_some.part.0+0xc2>
 800ffc4:	686a      	ldr	r2, [r5, #4]
 800ffc6:	e7a2      	b.n	800ff0e <rclc_executor_spin_some.part.0+0x246>
 800ffc8:	6842      	ldr	r2, [r0, #4]
 800ffca:	6a11      	ldr	r1, [r2, #32]
 800ffcc:	2900      	cmp	r1, #0
 800ffce:	f47f af21 	bne.w	800fe14 <rclc_executor_spin_some.part.0+0x14c>
 800ffd2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ffd6:	2a00      	cmp	r2, #0
 800ffd8:	f43f af0a 	beq.w	800fdf0 <rclc_executor_spin_some.part.0+0x128>
 800ffdc:	e71a      	b.n	800fe14 <rclc_executor_spin_some.part.0+0x14c>
 800ffde:	6842      	ldr	r2, [r0, #4]
 800ffe0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ffe2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ffe6:	f47f af15 	bne.w	800fe14 <rclc_executor_spin_some.part.0+0x14c>
 800ffea:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ffee:	2900      	cmp	r1, #0
 800fff0:	f47f af10 	bne.w	800fe14 <rclc_executor_spin_some.part.0+0x14c>
 800fff4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800fff8:	2a00      	cmp	r2, #0
 800fffa:	f43f aef9 	beq.w	800fdf0 <rclc_executor_spin_some.part.0+0x128>
 800fffe:	e709      	b.n	800fe14 <rclc_executor_spin_some.part.0+0x14c>
 8010000:	686a      	ldr	r2, [r5, #4]
 8010002:	461c      	mov	r4, r3
 8010004:	e783      	b.n	800ff0e <rclc_executor_spin_some.part.0+0x246>
 8010006:	686a      	ldr	r2, [r5, #4]
 8010008:	461c      	mov	r4, r3
 801000a:	e6be      	b.n	800fd8a <rclc_executor_spin_some.part.0+0xc2>

0801000c <rclc_executor_spin_some>:
 801000c:	b190      	cbz	r0, 8010034 <rclc_executor_spin_some+0x28>
 801000e:	b570      	push	{r4, r5, r6, lr}
 8010010:	4604      	mov	r4, r0
 8010012:	6800      	ldr	r0, [r0, #0]
 8010014:	4616      	mov	r6, r2
 8010016:	461d      	mov	r5, r3
 8010018:	f7fe f910 	bl	800e23c <rcl_context_is_valid>
 801001c:	b130      	cbz	r0, 801002c <rclc_executor_spin_some+0x20>
 801001e:	4632      	mov	r2, r6
 8010020:	462b      	mov	r3, r5
 8010022:	4620      	mov	r0, r4
 8010024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010028:	f7ff be4e 	b.w	800fcc8 <rclc_executor_spin_some.part.0>
 801002c:	f000 fa7c 	bl	8010528 <rcutils_reset_error>
 8010030:	2001      	movs	r0, #1
 8010032:	bd70      	pop	{r4, r5, r6, pc}
 8010034:	200b      	movs	r0, #11
 8010036:	4770      	bx	lr

08010038 <rclc_executor_handle_counters_zero_init>:
 8010038:	b130      	cbz	r0, 8010048 <rclc_executor_handle_counters_zero_init+0x10>
 801003a:	b508      	push	{r3, lr}
 801003c:	2220      	movs	r2, #32
 801003e:	2100      	movs	r1, #0
 8010040:	f00c fa60 	bl	801c504 <memset>
 8010044:	2000      	movs	r0, #0
 8010046:	bd08      	pop	{r3, pc}
 8010048:	200b      	movs	r0, #11
 801004a:	4770      	bx	lr
 801004c:	0000      	movs	r0, r0
	...

08010050 <rclc_executor_handle_init>:
 8010050:	b168      	cbz	r0, 801006e <rclc_executor_handle_init+0x1e>
 8010052:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8010078 <rclc_executor_handle_init+0x28>
 8010056:	2300      	movs	r3, #0
 8010058:	220b      	movs	r2, #11
 801005a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 801005e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010062:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8010066:	8002      	strh	r2, [r0, #0]
 8010068:	8703      	strh	r3, [r0, #56]	@ 0x38
 801006a:	4618      	mov	r0, r3
 801006c:	4770      	bx	lr
 801006e:	200b      	movs	r0, #11
 8010070:	4770      	bx	lr
 8010072:	bf00      	nop
 8010074:	f3af 8000 	nop.w
	...

08010080 <rclc_support_init_with_options>:
 8010080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010084:	b083      	sub	sp, #12
 8010086:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010088:	b340      	cbz	r0, 80100dc <rclc_support_init_with_options+0x5c>
 801008a:	461d      	mov	r5, r3
 801008c:	b333      	cbz	r3, 80100dc <rclc_support_init_with_options+0x5c>
 801008e:	b32e      	cbz	r6, 80100dc <rclc_support_init_with_options+0x5c>
 8010090:	46e9      	mov	r9, sp
 8010092:	4604      	mov	r4, r0
 8010094:	4648      	mov	r0, r9
 8010096:	460f      	mov	r7, r1
 8010098:	4690      	mov	r8, r2
 801009a:	f7fe f8c5 	bl	800e228 <rcl_get_zero_initialized_context>
 801009e:	e899 0003 	ldmia.w	r9, {r0, r1}
 80100a2:	462a      	mov	r2, r5
 80100a4:	e884 0003 	stmia.w	r4, {r0, r1}
 80100a8:	4623      	mov	r3, r4
 80100aa:	4641      	mov	r1, r8
 80100ac:	4638      	mov	r0, r7
 80100ae:	f006 fe67 	bl	8016d80 <rcl_init>
 80100b2:	4605      	mov	r5, r0
 80100b4:	b960      	cbnz	r0, 80100d0 <rclc_support_init_with_options+0x50>
 80100b6:	60a6      	str	r6, [r4, #8]
 80100b8:	4632      	mov	r2, r6
 80100ba:	f104 010c 	add.w	r1, r4, #12
 80100be:	2003      	movs	r0, #3
 80100c0:	f007 f8b4 	bl	801722c <rcl_clock_init>
 80100c4:	4605      	mov	r5, r0
 80100c6:	b918      	cbnz	r0, 80100d0 <rclc_support_init_with_options+0x50>
 80100c8:	4628      	mov	r0, r5
 80100ca:	b003      	add	sp, #12
 80100cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100d0:	f000 fa2a 	bl	8010528 <rcutils_reset_error>
 80100d4:	4628      	mov	r0, r5
 80100d6:	b003      	add	sp, #12
 80100d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100dc:	250b      	movs	r5, #11
 80100de:	4628      	mov	r0, r5
 80100e0:	b003      	add	sp, #12
 80100e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e6:	bf00      	nop

080100e8 <rclc_support_fini>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	b320      	cbz	r0, 8010136 <rclc_support_fini+0x4e>
 80100ec:	4604      	mov	r4, r0
 80100ee:	300c      	adds	r0, #12
 80100f0:	f007 f914 	bl	801731c <rcl_clock_fini>
 80100f4:	4605      	mov	r5, r0
 80100f6:	b948      	cbnz	r0, 801010c <rclc_support_fini+0x24>
 80100f8:	4620      	mov	r0, r4
 80100fa:	f006 ff2f 	bl	8016f5c <rcl_shutdown>
 80100fe:	b968      	cbnz	r0, 801011c <rclc_support_fini+0x34>
 8010100:	4620      	mov	r0, r4
 8010102:	f7fe f907 	bl	800e314 <rcl_context_fini>
 8010106:	b988      	cbnz	r0, 801012c <rclc_support_fini+0x44>
 8010108:	4628      	mov	r0, r5
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	f000 fa0c 	bl	8010528 <rcutils_reset_error>
 8010110:	4620      	mov	r0, r4
 8010112:	2501      	movs	r5, #1
 8010114:	f006 ff22 	bl	8016f5c <rcl_shutdown>
 8010118:	2800      	cmp	r0, #0
 801011a:	d0f1      	beq.n	8010100 <rclc_support_fini+0x18>
 801011c:	f000 fa04 	bl	8010528 <rcutils_reset_error>
 8010120:	4620      	mov	r0, r4
 8010122:	2501      	movs	r5, #1
 8010124:	f7fe f8f6 	bl	800e314 <rcl_context_fini>
 8010128:	2800      	cmp	r0, #0
 801012a:	d0ed      	beq.n	8010108 <rclc_support_fini+0x20>
 801012c:	2501      	movs	r5, #1
 801012e:	f000 f9fb 	bl	8010528 <rcutils_reset_error>
 8010132:	4628      	mov	r0, r5
 8010134:	bd38      	pop	{r3, r4, r5, pc}
 8010136:	250b      	movs	r5, #11
 8010138:	4628      	mov	r0, r5
 801013a:	bd38      	pop	{r3, r4, r5, pc}

0801013c <rclc_node_init_default>:
 801013c:	b3b8      	cbz	r0, 80101ae <rclc_node_init_default+0x72>
 801013e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010142:	460d      	mov	r5, r1
 8010144:	b0a1      	sub	sp, #132	@ 0x84
 8010146:	b329      	cbz	r1, 8010194 <rclc_node_init_default+0x58>
 8010148:	4616      	mov	r6, r2
 801014a:	b31a      	cbz	r2, 8010194 <rclc_node_init_default+0x58>
 801014c:	461f      	mov	r7, r3
 801014e:	b30b      	cbz	r3, 8010194 <rclc_node_init_default+0x58>
 8010150:	f10d 0810 	add.w	r8, sp, #16
 8010154:	4604      	mov	r4, r0
 8010156:	4640      	mov	r0, r8
 8010158:	f7fe f9f6 	bl	800e548 <rcl_get_zero_initialized_node>
 801015c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010160:	f10d 0918 	add.w	r9, sp, #24
 8010164:	e884 0003 	stmia.w	r4, {r0, r1}
 8010168:	4648      	mov	r0, r9
 801016a:	f7fe fb97 	bl	800e89c <rcl_node_get_default_options>
 801016e:	4640      	mov	r0, r8
 8010170:	f7fe f9ea 	bl	800e548 <rcl_get_zero_initialized_node>
 8010174:	f8cd 9000 	str.w	r9, [sp]
 8010178:	e898 0003 	ldmia.w	r8, {r0, r1}
 801017c:	463b      	mov	r3, r7
 801017e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010182:	4632      	mov	r2, r6
 8010184:	4629      	mov	r1, r5
 8010186:	4620      	mov	r0, r4
 8010188:	f7fe f9e8 	bl	800e55c <rcl_node_init>
 801018c:	b930      	cbnz	r0, 801019c <rclc_node_init_default+0x60>
 801018e:	b021      	add	sp, #132	@ 0x84
 8010190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010194:	200b      	movs	r0, #11
 8010196:	b021      	add	sp, #132	@ 0x84
 8010198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801019c:	9003      	str	r0, [sp, #12]
 801019e:	f000 f9c3 	bl	8010528 <rcutils_reset_error>
 80101a2:	f000 f9c1 	bl	8010528 <rcutils_reset_error>
 80101a6:	9803      	ldr	r0, [sp, #12]
 80101a8:	b021      	add	sp, #132	@ 0x84
 80101aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101ae:	200b      	movs	r0, #11
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop

080101b4 <rclc_publisher_init_default>:
 80101b4:	b368      	cbz	r0, 8010212 <rclc_publisher_init_default+0x5e>
 80101b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ba:	460d      	mov	r5, r1
 80101bc:	b0a0      	sub	sp, #128	@ 0x80
 80101be:	b321      	cbz	r1, 801020a <rclc_publisher_init_default+0x56>
 80101c0:	4616      	mov	r6, r2
 80101c2:	b312      	cbz	r2, 801020a <rclc_publisher_init_default+0x56>
 80101c4:	461f      	mov	r7, r3
 80101c6:	b303      	cbz	r3, 801020a <rclc_publisher_init_default+0x56>
 80101c8:	4604      	mov	r4, r0
 80101ca:	f7fe fb93 	bl	800e8f4 <rcl_get_zero_initialized_publisher>
 80101ce:	f10d 0810 	add.w	r8, sp, #16
 80101d2:	6020      	str	r0, [r4, #0]
 80101d4:	4640      	mov	r0, r8
 80101d6:	f7fe fc55 	bl	800ea84 <rcl_publisher_get_default_options>
 80101da:	490f      	ldr	r1, [pc, #60]	@ (8010218 <rclc_publisher_init_default+0x64>)
 80101dc:	2250      	movs	r2, #80	@ 0x50
 80101de:	4640      	mov	r0, r8
 80101e0:	f00c fa59 	bl	801c696 <memcpy>
 80101e4:	f8cd 8000 	str.w	r8, [sp]
 80101e8:	463b      	mov	r3, r7
 80101ea:	4632      	mov	r2, r6
 80101ec:	4629      	mov	r1, r5
 80101ee:	4620      	mov	r0, r4
 80101f0:	f7fe fb86 	bl	800e900 <rcl_publisher_init>
 80101f4:	b910      	cbnz	r0, 80101fc <rclc_publisher_init_default+0x48>
 80101f6:	b020      	add	sp, #128	@ 0x80
 80101f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101fc:	9003      	str	r0, [sp, #12]
 80101fe:	f000 f993 	bl	8010528 <rcutils_reset_error>
 8010202:	9803      	ldr	r0, [sp, #12]
 8010204:	b020      	add	sp, #128	@ 0x80
 8010206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020a:	200b      	movs	r0, #11
 801020c:	b020      	add	sp, #128	@ 0x80
 801020e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010212:	200b      	movs	r0, #11
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	0801df08 	.word	0x0801df08

0801021c <rclc_subscription_init_default>:
 801021c:	b368      	cbz	r0, 801027a <rclc_subscription_init_default+0x5e>
 801021e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010222:	460d      	mov	r5, r1
 8010224:	b0a0      	sub	sp, #128	@ 0x80
 8010226:	b321      	cbz	r1, 8010272 <rclc_subscription_init_default+0x56>
 8010228:	4616      	mov	r6, r2
 801022a:	b312      	cbz	r2, 8010272 <rclc_subscription_init_default+0x56>
 801022c:	461f      	mov	r7, r3
 801022e:	b303      	cbz	r3, 8010272 <rclc_subscription_init_default+0x56>
 8010230:	4604      	mov	r4, r0
 8010232:	f7fe fca1 	bl	800eb78 <rcl_get_zero_initialized_subscription>
 8010236:	f10d 0810 	add.w	r8, sp, #16
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	4640      	mov	r0, r8
 801023e:	f7fe fd9d 	bl	800ed7c <rcl_subscription_get_default_options>
 8010242:	490f      	ldr	r1, [pc, #60]	@ (8010280 <rclc_subscription_init_default+0x64>)
 8010244:	2250      	movs	r2, #80	@ 0x50
 8010246:	4640      	mov	r0, r8
 8010248:	f00c fa25 	bl	801c696 <memcpy>
 801024c:	f8cd 8000 	str.w	r8, [sp]
 8010250:	463b      	mov	r3, r7
 8010252:	4632      	mov	r2, r6
 8010254:	4629      	mov	r1, r5
 8010256:	4620      	mov	r0, r4
 8010258:	f7fe fc94 	bl	800eb84 <rcl_subscription_init>
 801025c:	b910      	cbnz	r0, 8010264 <rclc_subscription_init_default+0x48>
 801025e:	b020      	add	sp, #128	@ 0x80
 8010260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010264:	9003      	str	r0, [sp, #12]
 8010266:	f000 f95f 	bl	8010528 <rcutils_reset_error>
 801026a:	9803      	ldr	r0, [sp, #12]
 801026c:	b020      	add	sp, #128	@ 0x80
 801026e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010272:	200b      	movs	r0, #11
 8010274:	b020      	add	sp, #128	@ 0x80
 8010276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801027a:	200b      	movs	r0, #11
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	0801df58 	.word	0x0801df58

08010284 <rclc_timer_init_default>:
 8010284:	b360      	cbz	r0, 80102e0 <rclc_timer_init_default+0x5c>
 8010286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801028a:	460e      	mov	r6, r1
 801028c:	b08a      	sub	sp, #40	@ 0x28
 801028e:	b319      	cbz	r1, 80102d8 <rclc_timer_init_default+0x54>
 8010290:	4690      	mov	r8, r2
 8010292:	461f      	mov	r7, r3
 8010294:	4605      	mov	r5, r0
 8010296:	f7fe fea1 	bl	800efdc <rcl_get_zero_initialized_timer>
 801029a:	68b4      	ldr	r4, [r6, #8]
 801029c:	6028      	str	r0, [r5, #0]
 801029e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102a0:	f10d 0c0c 	add.w	ip, sp, #12
 80102a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80102a8:	6823      	ldr	r3, [r4, #0]
 80102aa:	f8cc 3000 	str.w	r3, [ip]
 80102ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102b0:	9302      	str	r3, [sp, #8]
 80102b2:	e9cd 8700 	strd	r8, r7, [sp]
 80102b6:	4628      	mov	r0, r5
 80102b8:	4632      	mov	r2, r6
 80102ba:	f106 010c 	add.w	r1, r6, #12
 80102be:	f7fe fe93 	bl	800efe8 <rcl_timer_init>
 80102c2:	b910      	cbnz	r0, 80102ca <rclc_timer_init_default+0x46>
 80102c4:	b00a      	add	sp, #40	@ 0x28
 80102c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102ca:	9009      	str	r0, [sp, #36]	@ 0x24
 80102cc:	f000 f92c 	bl	8010528 <rcutils_reset_error>
 80102d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102d2:	b00a      	add	sp, #40	@ 0x28
 80102d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d8:	200b      	movs	r0, #11
 80102da:	b00a      	add	sp, #40	@ 0x28
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e0:	200b      	movs	r0, #11
 80102e2:	4770      	bx	lr

080102e4 <__default_zero_allocate>:
 80102e4:	f00b bc1e 	b.w	801bb24 <calloc>

080102e8 <__default_reallocate>:
 80102e8:	f00b bdbc 	b.w	801be64 <realloc>

080102ec <__default_deallocate>:
 80102ec:	f00b bc98 	b.w	801bc20 <free>

080102f0 <__default_allocate>:
 80102f0:	f00b bc8e 	b.w	801bc10 <malloc>

080102f4 <rcutils_get_zero_initialized_allocator>:
 80102f4:	b510      	push	{r4, lr}
 80102f6:	4c05      	ldr	r4, [pc, #20]	@ (801030c <rcutils_get_zero_initialized_allocator+0x18>)
 80102f8:	4686      	mov	lr, r0
 80102fa:	4684      	mov	ip, r0
 80102fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	f8cc 3000 	str.w	r3, [ip]
 8010308:	4670      	mov	r0, lr
 801030a:	bd10      	pop	{r4, pc}
 801030c:	0801dfa8 	.word	0x0801dfa8

08010310 <rcutils_set_default_allocator>:
 8010310:	b1a8      	cbz	r0, 801033e <rcutils_set_default_allocator+0x2e>
 8010312:	6802      	ldr	r2, [r0, #0]
 8010314:	b1a2      	cbz	r2, 8010340 <rcutils_set_default_allocator+0x30>
 8010316:	6841      	ldr	r1, [r0, #4]
 8010318:	b1a1      	cbz	r1, 8010344 <rcutils_set_default_allocator+0x34>
 801031a:	b410      	push	{r4}
 801031c:	68c4      	ldr	r4, [r0, #12]
 801031e:	b164      	cbz	r4, 801033a <rcutils_set_default_allocator+0x2a>
 8010320:	6880      	ldr	r0, [r0, #8]
 8010322:	b138      	cbz	r0, 8010334 <rcutils_set_default_allocator+0x24>
 8010324:	4b08      	ldr	r3, [pc, #32]	@ (8010348 <rcutils_set_default_allocator+0x38>)
 8010326:	601a      	str	r2, [r3, #0]
 8010328:	2200      	movs	r2, #0
 801032a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801032e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010332:	2001      	movs	r0, #1
 8010334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010338:	4770      	bx	lr
 801033a:	4620      	mov	r0, r4
 801033c:	e7fa      	b.n	8010334 <rcutils_set_default_allocator+0x24>
 801033e:	4770      	bx	lr
 8010340:	4610      	mov	r0, r2
 8010342:	4770      	bx	lr
 8010344:	4608      	mov	r0, r1
 8010346:	4770      	bx	lr
 8010348:	200002f8 	.word	0x200002f8

0801034c <rcutils_get_default_allocator>:
 801034c:	b510      	push	{r4, lr}
 801034e:	4c05      	ldr	r4, [pc, #20]	@ (8010364 <rcutils_get_default_allocator+0x18>)
 8010350:	4686      	mov	lr, r0
 8010352:	4684      	mov	ip, r0
 8010354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010356:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801035a:	6823      	ldr	r3, [r4, #0]
 801035c:	f8cc 3000 	str.w	r3, [ip]
 8010360:	4670      	mov	r0, lr
 8010362:	bd10      	pop	{r4, pc}
 8010364:	200002f8 	.word	0x200002f8

08010368 <rcutils_allocator_is_valid>:
 8010368:	b158      	cbz	r0, 8010382 <rcutils_allocator_is_valid+0x1a>
 801036a:	6803      	ldr	r3, [r0, #0]
 801036c:	b143      	cbz	r3, 8010380 <rcutils_allocator_is_valid+0x18>
 801036e:	6843      	ldr	r3, [r0, #4]
 8010370:	b133      	cbz	r3, 8010380 <rcutils_allocator_is_valid+0x18>
 8010372:	68c3      	ldr	r3, [r0, #12]
 8010374:	b123      	cbz	r3, 8010380 <rcutils_allocator_is_valid+0x18>
 8010376:	6880      	ldr	r0, [r0, #8]
 8010378:	3800      	subs	r0, #0
 801037a:	bf18      	it	ne
 801037c:	2001      	movne	r0, #1
 801037e:	4770      	bx	lr
 8010380:	4618      	mov	r0, r3
 8010382:	4770      	bx	lr

08010384 <__atomic_load_8>:
 8010384:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010388:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801038c:	4a15      	ldr	r2, [pc, #84]	@ (80103e4 <__atomic_load_8+0x60>)
 801038e:	4b16      	ldr	r3, [pc, #88]	@ (80103e8 <__atomic_load_8+0x64>)
 8010390:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010394:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010398:	fb02 f101 	mul.w	r1, r2, r1
 801039c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80103a0:	fba3 2301 	umull	r2, r3, r3, r1
 80103a4:	091b      	lsrs	r3, r3, #4
 80103a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80103aa:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80103ae:	b4d0      	push	{r4, r6, r7}
 80103b0:	4c0e      	ldr	r4, [pc, #56]	@ (80103ec <__atomic_load_8+0x68>)
 80103b2:	1ac9      	subs	r1, r1, r3
 80103b4:	1862      	adds	r2, r4, r1
 80103b6:	f04f 0c01 	mov.w	ip, #1
 80103ba:	e8d2 3f4f 	ldrexb	r3, [r2]
 80103be:	e8c2 cf46 	strexb	r6, ip, [r2]
 80103c2:	2e00      	cmp	r6, #0
 80103c4:	d1f9      	bne.n	80103ba <__atomic_load_8+0x36>
 80103c6:	f3bf 8f5b 	dmb	ish
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d1f4      	bne.n	80103ba <__atomic_load_8+0x36>
 80103d0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80103d4:	f3bf 8f5b 	dmb	ish
 80103d8:	5463      	strb	r3, [r4, r1]
 80103da:	4630      	mov	r0, r6
 80103dc:	4639      	mov	r1, r7
 80103de:	bcd0      	pop	{r4, r6, r7}
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	27d4eb2d 	.word	0x27d4eb2d
 80103e8:	b21642c9 	.word	0xb21642c9
 80103ec:	2000d108 	.word	0x2000d108

080103f0 <__atomic_store_8>:
 80103f0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80103f4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80103fe:	4c14      	ldr	r4, [pc, #80]	@ (8010450 <__atomic_store_8+0x60>)
 8010400:	4d14      	ldr	r5, [pc, #80]	@ (8010454 <__atomic_store_8+0x64>)
 8010402:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010406:	fb04 f101 	mul.w	r1, r4, r1
 801040a:	4c13      	ldr	r4, [pc, #76]	@ (8010458 <__atomic_store_8+0x68>)
 801040c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010410:	fba4 4e01 	umull	r4, lr, r4, r1
 8010414:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8010418:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801041c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8010420:	eba1 0e0e 	sub.w	lr, r1, lr
 8010424:	eb05 0c0e 	add.w	ip, r5, lr
 8010428:	f04f 0401 	mov.w	r4, #1
 801042c:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010430:	e8cc 4f46 	strexb	r6, r4, [ip]
 8010434:	2e00      	cmp	r6, #0
 8010436:	d1f9      	bne.n	801042c <__atomic_store_8+0x3c>
 8010438:	f3bf 8f5b 	dmb	ish
 801043c:	b2c9      	uxtb	r1, r1
 801043e:	2900      	cmp	r1, #0
 8010440:	d1f4      	bne.n	801042c <__atomic_store_8+0x3c>
 8010442:	e9c0 2300 	strd	r2, r3, [r0]
 8010446:	f3bf 8f5b 	dmb	ish
 801044a:	f805 100e 	strb.w	r1, [r5, lr]
 801044e:	bd70      	pop	{r4, r5, r6, pc}
 8010450:	27d4eb2d 	.word	0x27d4eb2d
 8010454:	2000d108 	.word	0x2000d108
 8010458:	b21642c9 	.word	0xb21642c9

0801045c <__atomic_exchange_8>:
 801045c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8010460:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8010464:	4916      	ldr	r1, [pc, #88]	@ (80104c0 <__atomic_exchange_8+0x64>)
 8010466:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801046a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801046e:	fb01 fc0c 	mul.w	ip, r1, ip
 8010472:	4914      	ldr	r1, [pc, #80]	@ (80104c4 <__atomic_exchange_8+0x68>)
 8010474:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8010478:	b570      	push	{r4, r5, r6, lr}
 801047a:	4605      	mov	r5, r0
 801047c:	fba1 010c 	umull	r0, r1, r1, ip
 8010480:	0909      	lsrs	r1, r1, #4
 8010482:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8010486:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801048a:	4e0f      	ldr	r6, [pc, #60]	@ (80104c8 <__atomic_exchange_8+0x6c>)
 801048c:	ebac 0c01 	sub.w	ip, ip, r1
 8010490:	eb06 010c 	add.w	r1, r6, ip
 8010494:	f04f 0e01 	mov.w	lr, #1
 8010498:	e8d1 4f4f 	ldrexb	r4, [r1]
 801049c:	e8c1 ef40 	strexb	r0, lr, [r1]
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1f9      	bne.n	8010498 <__atomic_exchange_8+0x3c>
 80104a4:	f3bf 8f5b 	dmb	ish
 80104a8:	b2e4      	uxtb	r4, r4
 80104aa:	2c00      	cmp	r4, #0
 80104ac:	d1f4      	bne.n	8010498 <__atomic_exchange_8+0x3c>
 80104ae:	e9d5 0100 	ldrd	r0, r1, [r5]
 80104b2:	e9c5 2300 	strd	r2, r3, [r5]
 80104b6:	f3bf 8f5b 	dmb	ish
 80104ba:	f806 400c 	strb.w	r4, [r6, ip]
 80104be:	bd70      	pop	{r4, r5, r6, pc}
 80104c0:	27d4eb2d 	.word	0x27d4eb2d
 80104c4:	b21642c9 	.word	0xb21642c9
 80104c8:	2000d108 	.word	0x2000d108

080104cc <rcutils_get_env>:
 80104cc:	b168      	cbz	r0, 80104ea <rcutils_get_env+0x1e>
 80104ce:	b510      	push	{r4, lr}
 80104d0:	460c      	mov	r4, r1
 80104d2:	b129      	cbz	r1, 80104e0 <rcutils_get_env+0x14>
 80104d4:	f00b fb54 	bl	801bb80 <getenv>
 80104d8:	b120      	cbz	r0, 80104e4 <rcutils_get_env+0x18>
 80104da:	6020      	str	r0, [r4, #0]
 80104dc:	2000      	movs	r0, #0
 80104de:	bd10      	pop	{r4, pc}
 80104e0:	4803      	ldr	r0, [pc, #12]	@ (80104f0 <rcutils_get_env+0x24>)
 80104e2:	bd10      	pop	{r4, pc}
 80104e4:	4b03      	ldr	r3, [pc, #12]	@ (80104f4 <rcutils_get_env+0x28>)
 80104e6:	6023      	str	r3, [r4, #0]
 80104e8:	bd10      	pop	{r4, pc}
 80104ea:	4803      	ldr	r0, [pc, #12]	@ (80104f8 <rcutils_get_env+0x2c>)
 80104ec:	4770      	bx	lr
 80104ee:	bf00      	nop
 80104f0:	0801d6e0 	.word	0x0801d6e0
 80104f4:	0801dc0c 	.word	0x0801dc0c
 80104f8:	0801d6c4 	.word	0x0801d6c4

080104fc <rcutils_get_error_string>:
 80104fc:	4b06      	ldr	r3, [pc, #24]	@ (8010518 <rcutils_get_error_string+0x1c>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	b13b      	cbz	r3, 8010512 <rcutils_get_error_string+0x16>
 8010502:	4b06      	ldr	r3, [pc, #24]	@ (801051c <rcutils_get_error_string+0x20>)
 8010504:	781a      	ldrb	r2, [r3, #0]
 8010506:	b90a      	cbnz	r2, 801050c <rcutils_get_error_string+0x10>
 8010508:	2201      	movs	r2, #1
 801050a:	701a      	strb	r2, [r3, #0]
 801050c:	4b04      	ldr	r3, [pc, #16]	@ (8010520 <rcutils_get_error_string+0x24>)
 801050e:	7818      	ldrb	r0, [r3, #0]
 8010510:	4770      	bx	lr
 8010512:	4b04      	ldr	r3, [pc, #16]	@ (8010524 <rcutils_get_error_string+0x28>)
 8010514:	7818      	ldrb	r0, [r3, #0]
 8010516:	4770      	bx	lr
 8010518:	2000d11f 	.word	0x2000d11f
 801051c:	2000d131 	.word	0x2000d131
 8010520:	2000d130 	.word	0x2000d130
 8010524:	0801d6fc 	.word	0x0801d6fc

08010528 <rcutils_reset_error>:
 8010528:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010548 <rcutils_reset_error+0x20>
 801052c:	4a08      	ldr	r2, [pc, #32]	@ (8010550 <rcutils_reset_error+0x28>)
 801052e:	4809      	ldr	r0, [pc, #36]	@ (8010554 <rcutils_reset_error+0x2c>)
 8010530:	4909      	ldr	r1, [pc, #36]	@ (8010558 <rcutils_reset_error+0x30>)
 8010532:	2300      	movs	r3, #0
 8010534:	8013      	strh	r3, [r2, #0]
 8010536:	ed82 7b02 	vstr	d7, [r2, #8]
 801053a:	4a08      	ldr	r2, [pc, #32]	@ (801055c <rcutils_reset_error+0x34>)
 801053c:	7003      	strb	r3, [r0, #0]
 801053e:	700b      	strb	r3, [r1, #0]
 8010540:	7013      	strb	r3, [r2, #0]
 8010542:	4770      	bx	lr
 8010544:	f3af 8000 	nop.w
	...
 8010550:	2000d120 	.word	0x2000d120
 8010554:	2000d131 	.word	0x2000d131
 8010558:	2000d130 	.word	0x2000d130
 801055c:	2000d11f 	.word	0x2000d11f

08010560 <rcutils_format_string_limit>:
 8010560:	b40f      	push	{r0, r1, r2, r3}
 8010562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010564:	b083      	sub	sp, #12
 8010566:	ac08      	add	r4, sp, #32
 8010568:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801056a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801056e:	b34e      	cbz	r6, 80105c4 <rcutils_format_string_limit+0x64>
 8010570:	a808      	add	r0, sp, #32
 8010572:	f7ff fef9 	bl	8010368 <rcutils_allocator_is_valid>
 8010576:	b328      	cbz	r0, 80105c4 <rcutils_format_string_limit+0x64>
 8010578:	2100      	movs	r1, #0
 801057a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801057c:	4632      	mov	r2, r6
 801057e:	4608      	mov	r0, r1
 8010580:	e9cd 3300 	strd	r3, r3, [sp]
 8010584:	f000 f8f4 	bl	8010770 <rcutils_vsnprintf>
 8010588:	1c43      	adds	r3, r0, #1
 801058a:	4605      	mov	r5, r0
 801058c:	d01a      	beq.n	80105c4 <rcutils_format_string_limit+0x64>
 801058e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010590:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010592:	1c47      	adds	r7, r0, #1
 8010594:	429f      	cmp	r7, r3
 8010596:	bf84      	itt	hi
 8010598:	461f      	movhi	r7, r3
 801059a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801059e:	4638      	mov	r0, r7
 80105a0:	9b08      	ldr	r3, [sp, #32]
 80105a2:	4798      	blx	r3
 80105a4:	4604      	mov	r4, r0
 80105a6:	b168      	cbz	r0, 80105c4 <rcutils_format_string_limit+0x64>
 80105a8:	9b01      	ldr	r3, [sp, #4]
 80105aa:	4632      	mov	r2, r6
 80105ac:	4639      	mov	r1, r7
 80105ae:	f000 f8df 	bl	8010770 <rcutils_vsnprintf>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	db02      	blt.n	80105bc <rcutils_format_string_limit+0x5c>
 80105b6:	2300      	movs	r3, #0
 80105b8:	5563      	strb	r3, [r4, r5]
 80105ba:	e004      	b.n	80105c6 <rcutils_format_string_limit+0x66>
 80105bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80105c0:	4620      	mov	r0, r4
 80105c2:	4798      	blx	r3
 80105c4:	2400      	movs	r4, #0
 80105c6:	4620      	mov	r0, r4
 80105c8:	b003      	add	sp, #12
 80105ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80105ce:	b004      	add	sp, #16
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop

080105d4 <rcutils_repl_str>:
 80105d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d8:	ed2d 8b02 	vpush	{d8}
 80105dc:	b087      	sub	sp, #28
 80105de:	4680      	mov	r8, r0
 80105e0:	4608      	mov	r0, r1
 80105e2:	f8cd 8004 	str.w	r8, [sp, #4]
 80105e6:	ee08 2a10 	vmov	s16, r2
 80105ea:	468a      	mov	sl, r1
 80105ec:	4699      	mov	r9, r3
 80105ee:	f7ef fe19 	bl	8000224 <strlen>
 80105f2:	2600      	movs	r6, #0
 80105f4:	4647      	mov	r7, r8
 80105f6:	9002      	str	r0, [sp, #8]
 80105f8:	46b3      	mov	fp, r6
 80105fa:	2510      	movs	r5, #16
 80105fc:	46b0      	mov	r8, r6
 80105fe:	e01d      	b.n	801063c <rcutils_repl_str+0x68>
 8010600:	f10b 0b01 	add.w	fp, fp, #1
 8010604:	455e      	cmp	r6, fp
 8010606:	d211      	bcs.n	801062c <rcutils_repl_str+0x58>
 8010608:	442e      	add	r6, r5
 801060a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801060e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010612:	00b1      	lsls	r1, r6, #2
 8010614:	4798      	blx	r3
 8010616:	2800      	cmp	r0, #0
 8010618:	f000 8088 	beq.w	801072c <rcutils_repl_str+0x158>
 801061c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010620:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010624:	4680      	mov	r8, r0
 8010626:	bf28      	it	cs
 8010628:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801062c:	9a01      	ldr	r2, [sp, #4]
 801062e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010632:	1aa2      	subs	r2, r4, r2
 8010634:	f843 2c04 	str.w	r2, [r3, #-4]
 8010638:	9b02      	ldr	r3, [sp, #8]
 801063a:	18e7      	adds	r7, r4, r3
 801063c:	4651      	mov	r1, sl
 801063e:	4638      	mov	r0, r7
 8010640:	f00b ff87 	bl	801c552 <strstr>
 8010644:	4604      	mov	r4, r0
 8010646:	4640      	mov	r0, r8
 8010648:	2c00      	cmp	r4, #0
 801064a:	d1d9      	bne.n	8010600 <rcutils_repl_str+0x2c>
 801064c:	46b8      	mov	r8, r7
 801064e:	4607      	mov	r7, r0
 8010650:	4640      	mov	r0, r8
 8010652:	f7ef fde7 	bl	8000224 <strlen>
 8010656:	9b01      	ldr	r3, [sp, #4]
 8010658:	eba8 0303 	sub.w	r3, r8, r3
 801065c:	181c      	adds	r4, r3, r0
 801065e:	9404      	str	r4, [sp, #16]
 8010660:	f1bb 0f00 	cmp.w	fp, #0
 8010664:	d04a      	beq.n	80106fc <rcutils_repl_str+0x128>
 8010666:	ee18 0a10 	vmov	r0, s16
 801066a:	f7ef fddb 	bl	8000224 <strlen>
 801066e:	9b02      	ldr	r3, [sp, #8]
 8010670:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010674:	1ac3      	subs	r3, r0, r3
 8010676:	fb0b 4303 	mla	r3, fp, r3, r4
 801067a:	461a      	mov	r2, r3
 801067c:	9305      	str	r3, [sp, #20]
 801067e:	4606      	mov	r6, r0
 8010680:	f8d9 3000 	ldr.w	r3, [r9]
 8010684:	1c50      	adds	r0, r2, #1
 8010686:	4798      	blx	r3
 8010688:	9003      	str	r0, [sp, #12]
 801068a:	2800      	cmp	r0, #0
 801068c:	d04f      	beq.n	801072e <rcutils_repl_str+0x15a>
 801068e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010692:	683a      	ldr	r2, [r7, #0]
 8010694:	4641      	mov	r1, r8
 8010696:	f00b fffe 	bl	801c696 <memcpy>
 801069a:	683d      	ldr	r5, [r7, #0]
 801069c:	9b03      	ldr	r3, [sp, #12]
 801069e:	9701      	str	r7, [sp, #4]
 80106a0:	46ba      	mov	sl, r7
 80106a2:	441d      	add	r5, r3
 80106a4:	9f02      	ldr	r7, [sp, #8]
 80106a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80106aa:	2401      	movs	r4, #1
 80106ac:	46d1      	mov	r9, sl
 80106ae:	ee18 aa10 	vmov	sl, s16
 80106b2:	e00a      	b.n	80106ca <rcutils_repl_str+0xf6>
 80106b4:	f8d9 5000 	ldr.w	r5, [r9]
 80106b8:	1aaa      	subs	r2, r5, r2
 80106ba:	1885      	adds	r5, r0, r2
 80106bc:	f00b ffeb 	bl	801c696 <memcpy>
 80106c0:	45a3      	cmp	fp, r4
 80106c2:	f104 0201 	add.w	r2, r4, #1
 80106c6:	d935      	bls.n	8010734 <rcutils_repl_str+0x160>
 80106c8:	4614      	mov	r4, r2
 80106ca:	4632      	mov	r2, r6
 80106cc:	4651      	mov	r1, sl
 80106ce:	4628      	mov	r0, r5
 80106d0:	f00b ffe1 	bl	801c696 <memcpy>
 80106d4:	f859 2b04 	ldr.w	r2, [r9], #4
 80106d8:	45a3      	cmp	fp, r4
 80106da:	443a      	add	r2, r7
 80106dc:	eb05 0006 	add.w	r0, r5, r6
 80106e0:	eb08 0102 	add.w	r1, r8, r2
 80106e4:	d1e6      	bne.n	80106b4 <rcutils_repl_str+0xe0>
 80106e6:	9b04      	ldr	r3, [sp, #16]
 80106e8:	1a9a      	subs	r2, r3, r2
 80106ea:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80106ee:	f00b ffd2 	bl	801c696 <memcpy>
 80106f2:	9a03      	ldr	r2, [sp, #12]
 80106f4:	9905      	ldr	r1, [sp, #20]
 80106f6:	2300      	movs	r3, #0
 80106f8:	5453      	strb	r3, [r2, r1]
 80106fa:	e00b      	b.n	8010714 <rcutils_repl_str+0x140>
 80106fc:	4620      	mov	r0, r4
 80106fe:	f8d9 3000 	ldr.w	r3, [r9]
 8010702:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010706:	3001      	adds	r0, #1
 8010708:	4798      	blx	r3
 801070a:	9003      	str	r0, [sp, #12]
 801070c:	b110      	cbz	r0, 8010714 <rcutils_repl_str+0x140>
 801070e:	9901      	ldr	r1, [sp, #4]
 8010710:	f00b ffb9 	bl	801c686 <strcpy>
 8010714:	4638      	mov	r0, r7
 8010716:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801071a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801071e:	4798      	blx	r3
 8010720:	9803      	ldr	r0, [sp, #12]
 8010722:	b007      	add	sp, #28
 8010724:	ecbd 8b02 	vpop	{d8}
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	4647      	mov	r7, r8
 801072e:	2300      	movs	r3, #0
 8010730:	9303      	str	r3, [sp, #12]
 8010732:	e7ef      	b.n	8010714 <rcutils_repl_str+0x140>
 8010734:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010738:	e7db      	b.n	80106f2 <rcutils_repl_str+0x11e>
 801073a:	bf00      	nop

0801073c <rcutils_snprintf>:
 801073c:	b40c      	push	{r2, r3}
 801073e:	b530      	push	{r4, r5, lr}
 8010740:	b083      	sub	sp, #12
 8010742:	ab06      	add	r3, sp, #24
 8010744:	f853 2b04 	ldr.w	r2, [r3], #4
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	b152      	cbz	r2, 8010762 <rcutils_snprintf+0x26>
 801074c:	b138      	cbz	r0, 801075e <rcutils_snprintf+0x22>
 801074e:	b141      	cbz	r1, 8010762 <rcutils_snprintf+0x26>
 8010750:	f00b fe0c 	bl	801c36c <vsniprintf>
 8010754:	b003      	add	sp, #12
 8010756:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801075a:	b002      	add	sp, #8
 801075c:	4770      	bx	lr
 801075e:	2900      	cmp	r1, #0
 8010760:	d0f6      	beq.n	8010750 <rcutils_snprintf+0x14>
 8010762:	f00b ff63 	bl	801c62c <__errno>
 8010766:	2316      	movs	r3, #22
 8010768:	6003      	str	r3, [r0, #0]
 801076a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801076e:	e7f1      	b.n	8010754 <rcutils_snprintf+0x18>

08010770 <rcutils_vsnprintf>:
 8010770:	b570      	push	{r4, r5, r6, lr}
 8010772:	b13a      	cbz	r2, 8010784 <rcutils_vsnprintf+0x14>
 8010774:	b120      	cbz	r0, 8010780 <rcutils_vsnprintf+0x10>
 8010776:	b129      	cbz	r1, 8010784 <rcutils_vsnprintf+0x14>
 8010778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801077c:	f00b bdf6 	b.w	801c36c <vsniprintf>
 8010780:	2900      	cmp	r1, #0
 8010782:	d0f9      	beq.n	8010778 <rcutils_vsnprintf+0x8>
 8010784:	f00b ff52 	bl	801c62c <__errno>
 8010788:	2316      	movs	r3, #22
 801078a:	6003      	str	r3, [r0, #0]
 801078c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010790:	bd70      	pop	{r4, r5, r6, pc}
 8010792:	bf00      	nop

08010794 <rcutils_strdup>:
 8010794:	b084      	sub	sp, #16
 8010796:	b570      	push	{r4, r5, r6, lr}
 8010798:	b082      	sub	sp, #8
 801079a:	ac07      	add	r4, sp, #28
 801079c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80107a0:	4605      	mov	r5, r0
 80107a2:	b1b0      	cbz	r0, 80107d2 <rcutils_strdup+0x3e>
 80107a4:	f7ef fd3e 	bl	8000224 <strlen>
 80107a8:	1c42      	adds	r2, r0, #1
 80107aa:	9b07      	ldr	r3, [sp, #28]
 80107ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80107ae:	9201      	str	r2, [sp, #4]
 80107b0:	4606      	mov	r6, r0
 80107b2:	4610      	mov	r0, r2
 80107b4:	4798      	blx	r3
 80107b6:	4604      	mov	r4, r0
 80107b8:	b128      	cbz	r0, 80107c6 <rcutils_strdup+0x32>
 80107ba:	9a01      	ldr	r2, [sp, #4]
 80107bc:	4629      	mov	r1, r5
 80107be:	f00b ff6a 	bl	801c696 <memcpy>
 80107c2:	2300      	movs	r3, #0
 80107c4:	55a3      	strb	r3, [r4, r6]
 80107c6:	4620      	mov	r0, r4
 80107c8:	b002      	add	sp, #8
 80107ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107ce:	b004      	add	sp, #16
 80107d0:	4770      	bx	lr
 80107d2:	4604      	mov	r4, r0
 80107d4:	e7f7      	b.n	80107c6 <rcutils_strdup+0x32>
 80107d6:	bf00      	nop

080107d8 <rcutils_strndup>:
 80107d8:	b082      	sub	sp, #8
 80107da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107dc:	ac06      	add	r4, sp, #24
 80107de:	e884 000c 	stmia.w	r4, {r2, r3}
 80107e2:	4605      	mov	r5, r0
 80107e4:	b188      	cbz	r0, 801080a <rcutils_strndup+0x32>
 80107e6:	1c4f      	adds	r7, r1, #1
 80107e8:	460e      	mov	r6, r1
 80107ea:	4638      	mov	r0, r7
 80107ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107ee:	4790      	blx	r2
 80107f0:	4604      	mov	r4, r0
 80107f2:	b128      	cbz	r0, 8010800 <rcutils_strndup+0x28>
 80107f4:	463a      	mov	r2, r7
 80107f6:	4629      	mov	r1, r5
 80107f8:	f00b ff4d 	bl	801c696 <memcpy>
 80107fc:	2300      	movs	r3, #0
 80107fe:	55a3      	strb	r3, [r4, r6]
 8010800:	4620      	mov	r0, r4
 8010802:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010806:	b002      	add	sp, #8
 8010808:	4770      	bx	lr
 801080a:	4604      	mov	r4, r0
 801080c:	e7f8      	b.n	8010800 <rcutils_strndup+0x28>
 801080e:	bf00      	nop

08010810 <rcutils_system_time_now>:
 8010810:	b308      	cbz	r0, 8010856 <rcutils_system_time_now+0x46>
 8010812:	b570      	push	{r4, r5, r6, lr}
 8010814:	b084      	sub	sp, #16
 8010816:	4604      	mov	r4, r0
 8010818:	4669      	mov	r1, sp
 801081a:	2001      	movs	r0, #1
 801081c:	f7f2 ff14 	bl	8003648 <clock_gettime>
 8010820:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010824:	2d00      	cmp	r5, #0
 8010826:	db13      	blt.n	8010850 <rcutils_system_time_now+0x40>
 8010828:	9902      	ldr	r1, [sp, #8]
 801082a:	2900      	cmp	r1, #0
 801082c:	db0d      	blt.n	801084a <rcutils_system_time_now+0x3a>
 801082e:	4e0b      	ldr	r6, [pc, #44]	@ (801085c <rcutils_system_time_now+0x4c>)
 8010830:	fba3 3206 	umull	r3, r2, r3, r6
 8010834:	185b      	adds	r3, r3, r1
 8010836:	fb06 2205 	mla	r2, r6, r5, r2
 801083a:	f04f 0000 	mov.w	r0, #0
 801083e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010842:	e9c4 3200 	strd	r3, r2, [r4]
 8010846:	b004      	add	sp, #16
 8010848:	bd70      	pop	{r4, r5, r6, pc}
 801084a:	ea53 0205 	orrs.w	r2, r3, r5
 801084e:	d1ee      	bne.n	801082e <rcutils_system_time_now+0x1e>
 8010850:	2002      	movs	r0, #2
 8010852:	b004      	add	sp, #16
 8010854:	bd70      	pop	{r4, r5, r6, pc}
 8010856:	200b      	movs	r0, #11
 8010858:	4770      	bx	lr
 801085a:	bf00      	nop
 801085c:	3b9aca00 	.word	0x3b9aca00

08010860 <rcutils_steady_time_now>:
 8010860:	b308      	cbz	r0, 80108a6 <rcutils_steady_time_now+0x46>
 8010862:	b570      	push	{r4, r5, r6, lr}
 8010864:	b084      	sub	sp, #16
 8010866:	4604      	mov	r4, r0
 8010868:	4669      	mov	r1, sp
 801086a:	2000      	movs	r0, #0
 801086c:	f7f2 feec 	bl	8003648 <clock_gettime>
 8010870:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010874:	2d00      	cmp	r5, #0
 8010876:	db13      	blt.n	80108a0 <rcutils_steady_time_now+0x40>
 8010878:	9902      	ldr	r1, [sp, #8]
 801087a:	2900      	cmp	r1, #0
 801087c:	db0d      	blt.n	801089a <rcutils_steady_time_now+0x3a>
 801087e:	4e0b      	ldr	r6, [pc, #44]	@ (80108ac <rcutils_steady_time_now+0x4c>)
 8010880:	fba3 3206 	umull	r3, r2, r3, r6
 8010884:	185b      	adds	r3, r3, r1
 8010886:	fb06 2205 	mla	r2, r6, r5, r2
 801088a:	f04f 0000 	mov.w	r0, #0
 801088e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010892:	e9c4 3200 	strd	r3, r2, [r4]
 8010896:	b004      	add	sp, #16
 8010898:	bd70      	pop	{r4, r5, r6, pc}
 801089a:	ea53 0205 	orrs.w	r2, r3, r5
 801089e:	d1ee      	bne.n	801087e <rcutils_steady_time_now+0x1e>
 80108a0:	2002      	movs	r0, #2
 80108a2:	b004      	add	sp, #16
 80108a4:	bd70      	pop	{r4, r5, r6, pc}
 80108a6:	200b      	movs	r0, #11
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	3b9aca00 	.word	0x3b9aca00

080108b0 <rmw_get_zero_initialized_init_options>:
 80108b0:	b510      	push	{r4, lr}
 80108b2:	2238      	movs	r2, #56	@ 0x38
 80108b4:	4604      	mov	r4, r0
 80108b6:	2100      	movs	r1, #0
 80108b8:	f00b fe24 	bl	801c504 <memset>
 80108bc:	f104 0010 	add.w	r0, r4, #16
 80108c0:	f000 f80a 	bl	80108d8 <rmw_get_default_security_options>
 80108c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108c8:	60e3      	str	r3, [r4, #12]
 80108ca:	4620      	mov	r0, r4
 80108cc:	bd10      	pop	{r4, pc}
 80108ce:	bf00      	nop

080108d0 <rmw_get_default_publisher_options>:
 80108d0:	2200      	movs	r2, #0
 80108d2:	6002      	str	r2, [r0, #0]
 80108d4:	7102      	strb	r2, [r0, #4]
 80108d6:	4770      	bx	lr

080108d8 <rmw_get_default_security_options>:
 80108d8:	2200      	movs	r2, #0
 80108da:	7002      	strb	r2, [r0, #0]
 80108dc:	6042      	str	r2, [r0, #4]
 80108de:	4770      	bx	lr

080108e0 <rmw_subscription_content_filter_options_fini>:
 80108e0:	b1b0      	cbz	r0, 8010910 <rmw_subscription_content_filter_options_fini+0x30>
 80108e2:	b538      	push	{r3, r4, r5, lr}
 80108e4:	4604      	mov	r4, r0
 80108e6:	4608      	mov	r0, r1
 80108e8:	460d      	mov	r5, r1
 80108ea:	f7ff fd3d 	bl	8010368 <rcutils_allocator_is_valid>
 80108ee:	b168      	cbz	r0, 801090c <rmw_subscription_content_filter_options_fini+0x2c>
 80108f0:	6820      	ldr	r0, [r4, #0]
 80108f2:	b120      	cbz	r0, 80108fe <rmw_subscription_content_filter_options_fini+0x1e>
 80108f4:	686b      	ldr	r3, [r5, #4]
 80108f6:	6929      	ldr	r1, [r5, #16]
 80108f8:	4798      	blx	r3
 80108fa:	2300      	movs	r3, #0
 80108fc:	6023      	str	r3, [r4, #0]
 80108fe:	1d20      	adds	r0, r4, #4
 8010900:	f008 f95e 	bl	8018bc0 <rcutils_string_array_fini>
 8010904:	3800      	subs	r0, #0
 8010906:	bf18      	it	ne
 8010908:	2001      	movne	r0, #1
 801090a:	bd38      	pop	{r3, r4, r5, pc}
 801090c:	200b      	movs	r0, #11
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	200b      	movs	r0, #11
 8010912:	4770      	bx	lr

08010914 <rmw_get_default_subscription_options>:
 8010914:	2200      	movs	r2, #0
 8010916:	e9c0 2200 	strd	r2, r2, [r0]
 801091a:	6082      	str	r2, [r0, #8]
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop

08010920 <rmw_get_zero_initialized_message_info>:
 8010920:	b510      	push	{r4, lr}
 8010922:	2240      	movs	r2, #64	@ 0x40
 8010924:	4604      	mov	r4, r0
 8010926:	2100      	movs	r1, #0
 8010928:	f00b fdec 	bl	801c504 <memset>
 801092c:	4620      	mov	r0, r4
 801092e:	bd10      	pop	{r4, pc}

08010930 <rmw_validate_namespace_with_size>:
 8010930:	b340      	cbz	r0, 8010984 <rmw_validate_namespace_with_size+0x54>
 8010932:	b570      	push	{r4, r5, r6, lr}
 8010934:	4614      	mov	r4, r2
 8010936:	b0c2      	sub	sp, #264	@ 0x108
 8010938:	b332      	cbz	r2, 8010988 <rmw_validate_namespace_with_size+0x58>
 801093a:	2901      	cmp	r1, #1
 801093c:	460d      	mov	r5, r1
 801093e:	461e      	mov	r6, r3
 8010940:	d102      	bne.n	8010948 <rmw_validate_namespace_with_size+0x18>
 8010942:	7803      	ldrb	r3, [r0, #0]
 8010944:	2b2f      	cmp	r3, #47	@ 0x2f
 8010946:	d012      	beq.n	801096e <rmw_validate_namespace_with_size+0x3e>
 8010948:	aa01      	add	r2, sp, #4
 801094a:	4669      	mov	r1, sp
 801094c:	f008 fb20 	bl	8018f90 <rmw_validate_full_topic_name>
 8010950:	b978      	cbnz	r0, 8010972 <rmw_validate_namespace_with_size+0x42>
 8010952:	9b00      	ldr	r3, [sp, #0]
 8010954:	b14b      	cbz	r3, 801096a <rmw_validate_namespace_with_size+0x3a>
 8010956:	2b07      	cmp	r3, #7
 8010958:	d007      	beq.n	801096a <rmw_validate_namespace_with_size+0x3a>
 801095a:	1e5a      	subs	r2, r3, #1
 801095c:	2a05      	cmp	r2, #5
 801095e:	d82b      	bhi.n	80109b8 <rmw_validate_namespace_with_size+0x88>
 8010960:	e8df f002 	tbb	[pc, r2]
 8010964:	1e212427 	.word	0x1e212427
 8010968:	141b      	.short	0x141b
 801096a:	2df5      	cmp	r5, #245	@ 0xf5
 801096c:	d803      	bhi.n	8010976 <rmw_validate_namespace_with_size+0x46>
 801096e:	2000      	movs	r0, #0
 8010970:	6020      	str	r0, [r4, #0]
 8010972:	b042      	add	sp, #264	@ 0x108
 8010974:	bd70      	pop	{r4, r5, r6, pc}
 8010976:	2307      	movs	r3, #7
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	2e00      	cmp	r6, #0
 801097c:	d0f9      	beq.n	8010972 <rmw_validate_namespace_with_size+0x42>
 801097e:	23f4      	movs	r3, #244	@ 0xf4
 8010980:	6033      	str	r3, [r6, #0]
 8010982:	e7f6      	b.n	8010972 <rmw_validate_namespace_with_size+0x42>
 8010984:	200b      	movs	r0, #11
 8010986:	4770      	bx	lr
 8010988:	200b      	movs	r0, #11
 801098a:	e7f2      	b.n	8010972 <rmw_validate_namespace_with_size+0x42>
 801098c:	2306      	movs	r3, #6
 801098e:	6023      	str	r3, [r4, #0]
 8010990:	2e00      	cmp	r6, #0
 8010992:	d0ee      	beq.n	8010972 <rmw_validate_namespace_with_size+0x42>
 8010994:	9b01      	ldr	r3, [sp, #4]
 8010996:	6033      	str	r3, [r6, #0]
 8010998:	e7eb      	b.n	8010972 <rmw_validate_namespace_with_size+0x42>
 801099a:	2305      	movs	r3, #5
 801099c:	6023      	str	r3, [r4, #0]
 801099e:	e7f7      	b.n	8010990 <rmw_validate_namespace_with_size+0x60>
 80109a0:	2304      	movs	r3, #4
 80109a2:	6023      	str	r3, [r4, #0]
 80109a4:	e7f4      	b.n	8010990 <rmw_validate_namespace_with_size+0x60>
 80109a6:	2303      	movs	r3, #3
 80109a8:	6023      	str	r3, [r4, #0]
 80109aa:	e7f1      	b.n	8010990 <rmw_validate_namespace_with_size+0x60>
 80109ac:	2302      	movs	r3, #2
 80109ae:	6023      	str	r3, [r4, #0]
 80109b0:	e7ee      	b.n	8010990 <rmw_validate_namespace_with_size+0x60>
 80109b2:	2301      	movs	r3, #1
 80109b4:	6023      	str	r3, [r4, #0]
 80109b6:	e7eb      	b.n	8010990 <rmw_validate_namespace_with_size+0x60>
 80109b8:	4a03      	ldr	r2, [pc, #12]	@ (80109c8 <rmw_validate_namespace_with_size+0x98>)
 80109ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80109be:	a802      	add	r0, sp, #8
 80109c0:	f7ff febc 	bl	801073c <rcutils_snprintf>
 80109c4:	2001      	movs	r0, #1
 80109c6:	e7d4      	b.n	8010972 <rmw_validate_namespace_with_size+0x42>
 80109c8:	0801d700 	.word	0x0801d700

080109cc <rmw_validate_namespace>:
 80109cc:	b168      	cbz	r0, 80109ea <rmw_validate_namespace+0x1e>
 80109ce:	b570      	push	{r4, r5, r6, lr}
 80109d0:	460d      	mov	r5, r1
 80109d2:	4616      	mov	r6, r2
 80109d4:	4604      	mov	r4, r0
 80109d6:	f7ef fc25 	bl	8000224 <strlen>
 80109da:	4633      	mov	r3, r6
 80109dc:	4601      	mov	r1, r0
 80109de:	462a      	mov	r2, r5
 80109e0:	4620      	mov	r0, r4
 80109e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109e6:	f7ff bfa3 	b.w	8010930 <rmw_validate_namespace_with_size>
 80109ea:	200b      	movs	r0, #11
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop

080109f0 <rmw_namespace_validation_result_string>:
 80109f0:	2807      	cmp	r0, #7
 80109f2:	bf9a      	itte	ls
 80109f4:	4b02      	ldrls	r3, [pc, #8]	@ (8010a00 <rmw_namespace_validation_result_string+0x10>)
 80109f6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80109fa:	4802      	ldrhi	r0, [pc, #8]	@ (8010a04 <rmw_namespace_validation_result_string+0x14>)
 80109fc:	4770      	bx	lr
 80109fe:	bf00      	nop
 8010a00:	0801dfbc 	.word	0x0801dfbc
 8010a04:	0801d750 	.word	0x0801d750

08010a08 <rmw_validate_node_name>:
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d03b      	beq.n	8010a84 <rmw_validate_node_name+0x7c>
 8010a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a10:	460d      	mov	r5, r1
 8010a12:	2900      	cmp	r1, #0
 8010a14:	d038      	beq.n	8010a88 <rmw_validate_node_name+0x80>
 8010a16:	4616      	mov	r6, r2
 8010a18:	4604      	mov	r4, r0
 8010a1a:	f7ef fc03 	bl	8000224 <strlen>
 8010a1e:	b1e0      	cbz	r0, 8010a5a <rmw_validate_node_name+0x52>
 8010a20:	1e63      	subs	r3, r4, #1
 8010a22:	eb03 0800 	add.w	r8, r3, r0
 8010a26:	f1c4 0101 	rsb	r1, r4, #1
 8010a2a:	18cf      	adds	r7, r1, r3
 8010a2c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010a30:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8010a34:	f02e 0c20 	bic.w	ip, lr, #32
 8010a38:	2a09      	cmp	r2, #9
 8010a3a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010a3e:	d914      	bls.n	8010a6a <rmw_validate_node_name+0x62>
 8010a40:	f1bc 0f19 	cmp.w	ip, #25
 8010a44:	d911      	bls.n	8010a6a <rmw_validate_node_name+0x62>
 8010a46:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010a4a:	d00e      	beq.n	8010a6a <rmw_validate_node_name+0x62>
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	602b      	str	r3, [r5, #0]
 8010a50:	b106      	cbz	r6, 8010a54 <rmw_validate_node_name+0x4c>
 8010a52:	6037      	str	r7, [r6, #0]
 8010a54:	2000      	movs	r0, #0
 8010a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	602b      	str	r3, [r5, #0]
 8010a5e:	2e00      	cmp	r6, #0
 8010a60:	d0f8      	beq.n	8010a54 <rmw_validate_node_name+0x4c>
 8010a62:	2000      	movs	r0, #0
 8010a64:	6030      	str	r0, [r6, #0]
 8010a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a6a:	4543      	cmp	r3, r8
 8010a6c:	d1dd      	bne.n	8010a2a <rmw_validate_node_name+0x22>
 8010a6e:	7822      	ldrb	r2, [r4, #0]
 8010a70:	4b0d      	ldr	r3, [pc, #52]	@ (8010aa8 <rmw_validate_node_name+0xa0>)
 8010a72:	5cd3      	ldrb	r3, [r2, r3]
 8010a74:	f013 0304 	ands.w	r3, r3, #4
 8010a78:	d110      	bne.n	8010a9c <rmw_validate_node_name+0x94>
 8010a7a:	28ff      	cmp	r0, #255	@ 0xff
 8010a7c:	d806      	bhi.n	8010a8c <rmw_validate_node_name+0x84>
 8010a7e:	602b      	str	r3, [r5, #0]
 8010a80:	4618      	mov	r0, r3
 8010a82:	e7e8      	b.n	8010a56 <rmw_validate_node_name+0x4e>
 8010a84:	200b      	movs	r0, #11
 8010a86:	4770      	bx	lr
 8010a88:	200b      	movs	r0, #11
 8010a8a:	e7e4      	b.n	8010a56 <rmw_validate_node_name+0x4e>
 8010a8c:	2204      	movs	r2, #4
 8010a8e:	602a      	str	r2, [r5, #0]
 8010a90:	2e00      	cmp	r6, #0
 8010a92:	d0df      	beq.n	8010a54 <rmw_validate_node_name+0x4c>
 8010a94:	22fe      	movs	r2, #254	@ 0xfe
 8010a96:	6032      	str	r2, [r6, #0]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	e7dc      	b.n	8010a56 <rmw_validate_node_name+0x4e>
 8010a9c:	2303      	movs	r3, #3
 8010a9e:	602b      	str	r3, [r5, #0]
 8010aa0:	2e00      	cmp	r6, #0
 8010aa2:	d1de      	bne.n	8010a62 <rmw_validate_node_name+0x5a>
 8010aa4:	e7d6      	b.n	8010a54 <rmw_validate_node_name+0x4c>
 8010aa6:	bf00      	nop
 8010aa8:	0801e897 	.word	0x0801e897

08010aac <rmw_node_name_validation_result_string>:
 8010aac:	2804      	cmp	r0, #4
 8010aae:	bf9a      	itte	ls
 8010ab0:	4b02      	ldrls	r3, [pc, #8]	@ (8010abc <rmw_node_name_validation_result_string+0x10>)
 8010ab2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010ab6:	4802      	ldrhi	r0, [pc, #8]	@ (8010ac0 <rmw_node_name_validation_result_string+0x14>)
 8010ab8:	4770      	bx	lr
 8010aba:	bf00      	nop
 8010abc:	0801dfdc 	.word	0x0801dfdc
 8010ac0:	0801d8f8 	.word	0x0801d8f8

08010ac4 <rmw_uros_set_custom_transport>:
 8010ac4:	b470      	push	{r4, r5, r6}
 8010ac6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010aca:	b162      	cbz	r2, 8010ae6 <rmw_uros_set_custom_transport+0x22>
 8010acc:	b15b      	cbz	r3, 8010ae6 <rmw_uros_set_custom_transport+0x22>
 8010ace:	b155      	cbz	r5, 8010ae6 <rmw_uros_set_custom_transport+0x22>
 8010ad0:	b14e      	cbz	r6, 8010ae6 <rmw_uros_set_custom_transport+0x22>
 8010ad2:	4c06      	ldr	r4, [pc, #24]	@ (8010aec <rmw_uros_set_custom_transport+0x28>)
 8010ad4:	7020      	strb	r0, [r4, #0]
 8010ad6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010ada:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010ade:	6166      	str	r6, [r4, #20]
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	bc70      	pop	{r4, r5, r6}
 8010ae4:	4770      	bx	lr
 8010ae6:	200b      	movs	r0, #11
 8010ae8:	bc70      	pop	{r4, r5, r6}
 8010aea:	4770      	bx	lr
 8010aec:	2000d134 	.word	0x2000d134

08010af0 <rmw_uros_ping_agent>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	4b22      	ldr	r3, [pc, #136]	@ (8010b7c <rmw_uros_ping_agent+0x8c>)
 8010af4:	7b1a      	ldrb	r2, [r3, #12]
 8010af6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010afa:	4605      	mov	r5, r0
 8010afc:	460e      	mov	r6, r1
 8010afe:	b10a      	cbz	r2, 8010b04 <rmw_uros_ping_agent+0x14>
 8010b00:	681c      	ldr	r4, [r3, #0]
 8010b02:	b9bc      	cbnz	r4, 8010b34 <rmw_uros_ping_agent+0x44>
 8010b04:	4b1e      	ldr	r3, [pc, #120]	@ (8010b80 <rmw_uros_ping_agent+0x90>)
 8010b06:	781a      	ldrb	r2, [r3, #0]
 8010b08:	6918      	ldr	r0, [r3, #16]
 8010b0a:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8010b0e:	685a      	ldr	r2, [r3, #4]
 8010b10:	92a3      	str	r2, [sp, #652]	@ 0x28c
 8010b12:	2100      	movs	r1, #0
 8010b14:	68da      	ldr	r2, [r3, #12]
 8010b16:	909c      	str	r0, [sp, #624]	@ 0x270
 8010b18:	6958      	ldr	r0, [r3, #20]
 8010b1a:	929b      	str	r2, [sp, #620]	@ 0x26c
 8010b1c:	689b      	ldr	r3, [r3, #8]
 8010b1e:	909d      	str	r0, [sp, #628]	@ 0x274
 8010b20:	466a      	mov	r2, sp
 8010b22:	4608      	mov	r0, r1
 8010b24:	939a      	str	r3, [sp, #616]	@ 0x268
 8010b26:	f000 ffbd 	bl	8011aa4 <rmw_uxrce_transport_init>
 8010b2a:	b198      	cbz	r0, 8010b54 <rmw_uros_ping_agent+0x64>
 8010b2c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b30:	bd70      	pop	{r4, r5, r6, pc}
 8010b32:	b9f0      	cbnz	r0, 8010b72 <rmw_uros_ping_agent+0x82>
 8010b34:	68a0      	ldr	r0, [r4, #8]
 8010b36:	4632      	mov	r2, r6
 8010b38:	4629      	mov	r1, r5
 8010b3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b3e:	f002 fbad 	bl	801329c <uxr_ping_agent_session>
 8010b42:	6864      	ldr	r4, [r4, #4]
 8010b44:	2c00      	cmp	r4, #0
 8010b46:	d1f4      	bne.n	8010b32 <rmw_uros_ping_agent+0x42>
 8010b48:	f080 0001 	eor.w	r0, r0, #1
 8010b4c:	b2c0      	uxtb	r0, r0
 8010b4e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b52:	bd70      	pop	{r4, r5, r6, pc}
 8010b54:	4632      	mov	r2, r6
 8010b56:	4629      	mov	r1, r5
 8010b58:	a89e      	add	r0, sp, #632	@ 0x278
 8010b5a:	f002 fbeb 	bl	8013334 <uxr_ping_agent_attempts>
 8010b5e:	4604      	mov	r4, r0
 8010b60:	4668      	mov	r0, sp
 8010b62:	f002 fb67 	bl	8013234 <uxr_close_custom_transport>
 8010b66:	f084 0001 	eor.w	r0, r4, #1
 8010b6a:	b2c0      	uxtb	r0, r0
 8010b6c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b70:	bd70      	pop	{r4, r5, r6, pc}
 8010b72:	2000      	movs	r0, #0
 8010b74:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b78:	bd70      	pop	{r4, r5, r6, pc}
 8010b7a:	bf00      	nop
 8010b7c:	20011a8c 	.word	0x20011a8c
 8010b80:	2000d134 	.word	0x2000d134

08010b84 <rmw_init_options_init>:
 8010b84:	b084      	sub	sp, #16
 8010b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b88:	b083      	sub	sp, #12
 8010b8a:	ad09      	add	r5, sp, #36	@ 0x24
 8010b8c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010b90:	b130      	cbz	r0, 8010ba0 <rmw_init_options_init+0x1c>
 8010b92:	4604      	mov	r4, r0
 8010b94:	4628      	mov	r0, r5
 8010b96:	f7ff fbe7 	bl	8010368 <rcutils_allocator_is_valid>
 8010b9a:	b108      	cbz	r0, 8010ba0 <rmw_init_options_init+0x1c>
 8010b9c:	68a6      	ldr	r6, [r4, #8]
 8010b9e:	b12e      	cbz	r6, 8010bac <rmw_init_options_init+0x28>
 8010ba0:	200b      	movs	r0, #11
 8010ba2:	b003      	add	sp, #12
 8010ba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ba8:	b004      	add	sp, #16
 8010baa:	4770      	bx	lr
 8010bac:	2200      	movs	r2, #0
 8010bae:	2300      	movs	r3, #0
 8010bb0:	e9c4 2300 	strd	r2, r3, [r4]
 8010bb4:	4b20      	ldr	r3, [pc, #128]	@ (8010c38 <rmw_init_options_init+0xb4>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	60a3      	str	r3, [r4, #8]
 8010bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010bbc:	f104 0c20 	add.w	ip, r4, #32
 8010bc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bc4:	466f      	mov	r7, sp
 8010bc6:	682b      	ldr	r3, [r5, #0]
 8010bc8:	f8cc 3000 	str.w	r3, [ip]
 8010bcc:	4638      	mov	r0, r7
 8010bce:	61e6      	str	r6, [r4, #28]
 8010bd0:	60e6      	str	r6, [r4, #12]
 8010bd2:	f7ff fe81 	bl	80108d8 <rmw_get_default_security_options>
 8010bd6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010bda:	f104 0310 	add.w	r3, r4, #16
 8010bde:	e883 0003 	stmia.w	r3, {r0, r1}
 8010be2:	2203      	movs	r2, #3
 8010be4:	4815      	ldr	r0, [pc, #84]	@ (8010c3c <rmw_init_options_init+0xb8>)
 8010be6:	4916      	ldr	r1, [pc, #88]	@ (8010c40 <rmw_init_options_init+0xbc>)
 8010be8:	7626      	strb	r6, [r4, #24]
 8010bea:	f001 f899 	bl	8011d20 <rmw_uxrce_init_init_options_impl_memory>
 8010bee:	4813      	ldr	r0, [pc, #76]	@ (8010c3c <rmw_init_options_init+0xb8>)
 8010bf0:	f008 fb2c 	bl	801924c <get_memory>
 8010bf4:	b1f0      	cbz	r0, 8010c34 <rmw_init_options_init+0xb0>
 8010bf6:	4a13      	ldr	r2, [pc, #76]	@ (8010c44 <rmw_init_options_init+0xc0>)
 8010bf8:	6883      	ldr	r3, [r0, #8]
 8010bfa:	6851      	ldr	r1, [r2, #4]
 8010bfc:	7810      	ldrb	r0, [r2, #0]
 8010bfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c00:	7418      	strb	r0, [r3, #16]
 8010c02:	6159      	str	r1, [r3, #20]
 8010c04:	68d1      	ldr	r1, [r2, #12]
 8010c06:	61d9      	str	r1, [r3, #28]
 8010c08:	6911      	ldr	r1, [r2, #16]
 8010c0a:	6219      	str	r1, [r3, #32]
 8010c0c:	6951      	ldr	r1, [r2, #20]
 8010c0e:	6892      	ldr	r2, [r2, #8]
 8010c10:	619a      	str	r2, [r3, #24]
 8010c12:	6259      	str	r1, [r3, #36]	@ 0x24
 8010c14:	f004 fc5c 	bl	80154d0 <uxr_nanos>
 8010c18:	f00b f8b8 	bl	801bd8c <srand>
 8010c1c:	f00b f8e4 	bl	801bde8 <rand>
 8010c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c22:	6298      	str	r0, [r3, #40]	@ 0x28
 8010c24:	2800      	cmp	r0, #0
 8010c26:	d0f9      	beq.n	8010c1c <rmw_init_options_init+0x98>
 8010c28:	2000      	movs	r0, #0
 8010c2a:	b003      	add	sp, #12
 8010c2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010c30:	b004      	add	sp, #16
 8010c32:	4770      	bx	lr
 8010c34:	2001      	movs	r0, #1
 8010c36:	e7b4      	b.n	8010ba2 <rmw_init_options_init+0x1e>
 8010c38:	0801e390 	.word	0x0801e390
 8010c3c:	20011a4c 	.word	0x20011a4c
 8010c40:	2000d2e8 	.word	0x2000d2e8
 8010c44:	2000d134 	.word	0x2000d134

08010c48 <rmw_init_options_copy>:
 8010c48:	b570      	push	{r4, r5, r6, lr}
 8010c4a:	b088      	sub	sp, #32
 8010c4c:	b160      	cbz	r0, 8010c68 <rmw_init_options_copy+0x20>
 8010c4e:	460d      	mov	r5, r1
 8010c50:	b151      	cbz	r1, 8010c68 <rmw_init_options_copy+0x20>
 8010c52:	4604      	mov	r4, r0
 8010c54:	6880      	ldr	r0, [r0, #8]
 8010c56:	b128      	cbz	r0, 8010c64 <rmw_init_options_copy+0x1c>
 8010c58:	4b33      	ldr	r3, [pc, #204]	@ (8010d28 <rmw_init_options_copy+0xe0>)
 8010c5a:	6819      	ldr	r1, [r3, #0]
 8010c5c:	f7ef fad8 	bl	8000210 <strcmp>
 8010c60:	2800      	cmp	r0, #0
 8010c62:	d154      	bne.n	8010d0e <rmw_init_options_copy+0xc6>
 8010c64:	68ab      	ldr	r3, [r5, #8]
 8010c66:	b11b      	cbz	r3, 8010c70 <rmw_init_options_copy+0x28>
 8010c68:	240b      	movs	r4, #11
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	b008      	add	sp, #32
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}
 8010c70:	4623      	mov	r3, r4
 8010c72:	462a      	mov	r2, r5
 8010c74:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8010c78:	f8d3 c000 	ldr.w	ip, [r3]
 8010c7c:	6858      	ldr	r0, [r3, #4]
 8010c7e:	6899      	ldr	r1, [r3, #8]
 8010c80:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010c84:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010c88:	3310      	adds	r3, #16
 8010c8a:	42b3      	cmp	r3, r6
 8010c8c:	f8c2 c000 	str.w	ip, [r2]
 8010c90:	6050      	str	r0, [r2, #4]
 8010c92:	6091      	str	r1, [r2, #8]
 8010c94:	f102 0210 	add.w	r2, r2, #16
 8010c98:	d1ee      	bne.n	8010c78 <rmw_init_options_copy+0x30>
 8010c9a:	6819      	ldr	r1, [r3, #0]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	6053      	str	r3, [r2, #4]
 8010ca0:	6011      	str	r1, [r2, #0]
 8010ca2:	f104 0e20 	add.w	lr, r4, #32
 8010ca6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010caa:	f10d 0c0c 	add.w	ip, sp, #12
 8010cae:	4666      	mov	r6, ip
 8010cb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cb4:	f8de 3000 	ldr.w	r3, [lr]
 8010cb8:	f8cc 3000 	str.w	r3, [ip]
 8010cbc:	4630      	mov	r0, r6
 8010cbe:	f7ff fb53 	bl	8010368 <rcutils_allocator_is_valid>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	d0d0      	beq.n	8010c68 <rmw_init_options_copy+0x20>
 8010cc6:	ab08      	add	r3, sp, #32
 8010cc8:	e913 0003 	ldmdb	r3, {r0, r1}
 8010ccc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010cd0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010cd4:	69e0      	ldr	r0, [r4, #28]
 8010cd6:	f7ff fd5d 	bl	8010794 <rcutils_strdup>
 8010cda:	61e8      	str	r0, [r5, #28]
 8010cdc:	69e3      	ldr	r3, [r4, #28]
 8010cde:	b103      	cbz	r3, 8010ce2 <rmw_init_options_copy+0x9a>
 8010ce0:	b1f8      	cbz	r0, 8010d22 <rmw_init_options_copy+0xda>
 8010ce2:	4812      	ldr	r0, [pc, #72]	@ (8010d2c <rmw_init_options_copy+0xe4>)
 8010ce4:	f008 fab2 	bl	801924c <get_memory>
 8010ce8:	b1a8      	cbz	r0, 8010d16 <rmw_init_options_copy+0xce>
 8010cea:	6883      	ldr	r3, [r0, #8]
 8010cec:	636b      	str	r3, [r5, #52]	@ 0x34
 8010cee:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010cf0:	f102 0c10 	add.w	ip, r2, #16
 8010cf4:	f103 0510 	add.w	r5, r3, #16
 8010cf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cfe:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010d02:	2400      	movs	r4, #0
 8010d04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010d08:	4620      	mov	r0, r4
 8010d0a:	b008      	add	sp, #32
 8010d0c:	bd70      	pop	{r4, r5, r6, pc}
 8010d0e:	240c      	movs	r4, #12
 8010d10:	4620      	mov	r0, r4
 8010d12:	b008      	add	sp, #32
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
 8010d16:	9b04      	ldr	r3, [sp, #16]
 8010d18:	9907      	ldr	r1, [sp, #28]
 8010d1a:	69e8      	ldr	r0, [r5, #28]
 8010d1c:	4798      	blx	r3
 8010d1e:	2401      	movs	r4, #1
 8010d20:	e7a3      	b.n	8010c6a <rmw_init_options_copy+0x22>
 8010d22:	240a      	movs	r4, #10
 8010d24:	e7a1      	b.n	8010c6a <rmw_init_options_copy+0x22>
 8010d26:	bf00      	nop
 8010d28:	0801e390 	.word	0x0801e390
 8010d2c:	20011a4c 	.word	0x20011a4c

08010d30 <rmw_init_options_fini>:
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d041      	beq.n	8010db8 <rmw_init_options_fini+0x88>
 8010d34:	b510      	push	{r4, lr}
 8010d36:	4604      	mov	r4, r0
 8010d38:	b08e      	sub	sp, #56	@ 0x38
 8010d3a:	3020      	adds	r0, #32
 8010d3c:	f7ff fb14 	bl	8010368 <rcutils_allocator_is_valid>
 8010d40:	b380      	cbz	r0, 8010da4 <rmw_init_options_fini+0x74>
 8010d42:	68a0      	ldr	r0, [r4, #8]
 8010d44:	b120      	cbz	r0, 8010d50 <rmw_init_options_fini+0x20>
 8010d46:	4b1e      	ldr	r3, [pc, #120]	@ (8010dc0 <rmw_init_options_fini+0x90>)
 8010d48:	6819      	ldr	r1, [r3, #0]
 8010d4a:	f7ef fa61 	bl	8000210 <strcmp>
 8010d4e:	bb88      	cbnz	r0, 8010db4 <rmw_init_options_fini+0x84>
 8010d50:	4b1c      	ldr	r3, [pc, #112]	@ (8010dc4 <rmw_init_options_fini+0x94>)
 8010d52:	6819      	ldr	r1, [r3, #0]
 8010d54:	b351      	cbz	r1, 8010dac <rmw_init_options_fini+0x7c>
 8010d56:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010d58:	e001      	b.n	8010d5e <rmw_init_options_fini+0x2e>
 8010d5a:	6849      	ldr	r1, [r1, #4]
 8010d5c:	b331      	cbz	r1, 8010dac <rmw_init_options_fini+0x7c>
 8010d5e:	688b      	ldr	r3, [r1, #8]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d1fa      	bne.n	8010d5a <rmw_init_options_fini+0x2a>
 8010d64:	4817      	ldr	r0, [pc, #92]	@ (8010dc4 <rmw_init_options_fini+0x94>)
 8010d66:	f008 fa81 	bl	801926c <put_memory>
 8010d6a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010d6e:	69e0      	ldr	r0, [r4, #28]
 8010d70:	4798      	blx	r3
 8010d72:	4668      	mov	r0, sp
 8010d74:	f7ff fd9c 	bl	80108b0 <rmw_get_zero_initialized_init_options>
 8010d78:	46ee      	mov	lr, sp
 8010d7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d7e:	46a4      	mov	ip, r4
 8010d80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d94:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d98:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4618      	mov	r0, r3
 8010da0:	b00e      	add	sp, #56	@ 0x38
 8010da2:	bd10      	pop	{r4, pc}
 8010da4:	230b      	movs	r3, #11
 8010da6:	4618      	mov	r0, r3
 8010da8:	b00e      	add	sp, #56	@ 0x38
 8010daa:	bd10      	pop	{r4, pc}
 8010dac:	2301      	movs	r3, #1
 8010dae:	4618      	mov	r0, r3
 8010db0:	b00e      	add	sp, #56	@ 0x38
 8010db2:	bd10      	pop	{r4, pc}
 8010db4:	230c      	movs	r3, #12
 8010db6:	e7f2      	b.n	8010d9e <rmw_init_options_fini+0x6e>
 8010db8:	230b      	movs	r3, #11
 8010dba:	4618      	mov	r0, r3
 8010dbc:	4770      	bx	lr
 8010dbe:	bf00      	nop
 8010dc0:	0801e390 	.word	0x0801e390
 8010dc4:	20011a4c 	.word	0x20011a4c

08010dc8 <rmw_init>:
 8010dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dcc:	b083      	sub	sp, #12
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	f000 80d3 	beq.w	8010f7a <rmw_init+0x1b2>
 8010dd4:	460e      	mov	r6, r1
 8010dd6:	2900      	cmp	r1, #0
 8010dd8:	f000 80cf 	beq.w	8010f7a <rmw_init+0x1b2>
 8010ddc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010dde:	4605      	mov	r5, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f000 80ca 	beq.w	8010f7a <rmw_init+0x1b2>
 8010de6:	4b78      	ldr	r3, [pc, #480]	@ (8010fc8 <rmw_init+0x200>)
 8010de8:	6880      	ldr	r0, [r0, #8]
 8010dea:	681f      	ldr	r7, [r3, #0]
 8010dec:	b128      	cbz	r0, 8010dfa <rmw_init+0x32>
 8010dee:	4639      	mov	r1, r7
 8010df0:	f7ef fa0e 	bl	8000210 <strcmp>
 8010df4:	2800      	cmp	r0, #0
 8010df6:	f040 80ca 	bne.w	8010f8e <rmw_init+0x1c6>
 8010dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dfe:	4c73      	ldr	r4, [pc, #460]	@ (8010fcc <rmw_init+0x204>)
 8010e00:	4973      	ldr	r1, [pc, #460]	@ (8010fd0 <rmw_init+0x208>)
 8010e02:	4874      	ldr	r0, [pc, #464]	@ (8010fd4 <rmw_init+0x20c>)
 8010e04:	60b7      	str	r7, [r6, #8]
 8010e06:	e9c6 2300 	strd	r2, r3, [r6]
 8010e0a:	68eb      	ldr	r3, [r5, #12]
 8010e0c:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010e0e:	2201      	movs	r2, #1
 8010e10:	f000 ff26 	bl	8011c60 <rmw_uxrce_init_session_memory>
 8010e14:	4620      	mov	r0, r4
 8010e16:	4970      	ldr	r1, [pc, #448]	@ (8010fd8 <rmw_init+0x210>)
 8010e18:	2204      	movs	r2, #4
 8010e1a:	f000 ff61 	bl	8011ce0 <rmw_uxrce_init_static_input_buffer_memory>
 8010e1e:	f04f 0800 	mov.w	r8, #0
 8010e22:	486c      	ldr	r0, [pc, #432]	@ (8010fd4 <rmw_init+0x20c>)
 8010e24:	f884 800d 	strb.w	r8, [r4, #13]
 8010e28:	f008 fa10 	bl	801924c <get_memory>
 8010e2c:	2800      	cmp	r0, #0
 8010e2e:	f000 80a9 	beq.w	8010f84 <rmw_init+0x1bc>
 8010e32:	6884      	ldr	r4, [r0, #8]
 8010e34:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010e36:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010e38:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010e3c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010e40:	9101      	str	r1, [sp, #4]
 8010e42:	6a00      	ldr	r0, [r0, #32]
 8010e44:	9000      	str	r0, [sp, #0]
 8010e46:	f104 0910 	add.w	r9, r4, #16
 8010e4a:	4661      	mov	r1, ip
 8010e4c:	4648      	mov	r0, r9
 8010e4e:	f002 f9af 	bl	80131b0 <uxr_set_custom_transport_callbacks>
 8010e52:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8010e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010e5a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8010e5e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8010e62:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010e66:	495d      	ldr	r1, [pc, #372]	@ (8010fdc <rmw_init+0x214>)
 8010e68:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010e6c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8010e70:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010e74:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010e78:	4859      	ldr	r0, [pc, #356]	@ (8010fe0 <rmw_init+0x218>)
 8010e7a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8010e7e:	2201      	movs	r2, #1
 8010e80:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8010e82:	f000 fecd 	bl	8011c20 <rmw_uxrce_init_node_memory>
 8010e86:	4957      	ldr	r1, [pc, #348]	@ (8010fe4 <rmw_init+0x21c>)
 8010e88:	4857      	ldr	r0, [pc, #348]	@ (8010fe8 <rmw_init+0x220>)
 8010e8a:	2205      	movs	r2, #5
 8010e8c:	f000 fea8 	bl	8011be0 <rmw_uxrce_init_subscription_memory>
 8010e90:	4956      	ldr	r1, [pc, #344]	@ (8010fec <rmw_init+0x224>)
 8010e92:	4857      	ldr	r0, [pc, #348]	@ (8010ff0 <rmw_init+0x228>)
 8010e94:	220a      	movs	r2, #10
 8010e96:	f000 fe83 	bl	8011ba0 <rmw_uxrce_init_publisher_memory>
 8010e9a:	4956      	ldr	r1, [pc, #344]	@ (8010ff4 <rmw_init+0x22c>)
 8010e9c:	4856      	ldr	r0, [pc, #344]	@ (8010ff8 <rmw_init+0x230>)
 8010e9e:	2201      	movs	r2, #1
 8010ea0:	f000 fe3e 	bl	8011b20 <rmw_uxrce_init_service_memory>
 8010ea4:	4955      	ldr	r1, [pc, #340]	@ (8010ffc <rmw_init+0x234>)
 8010ea6:	4856      	ldr	r0, [pc, #344]	@ (8011000 <rmw_init+0x238>)
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	f000 fe59 	bl	8011b60 <rmw_uxrce_init_client_memory>
 8010eae:	4955      	ldr	r1, [pc, #340]	@ (8011004 <rmw_init+0x23c>)
 8010eb0:	4855      	ldr	r0, [pc, #340]	@ (8011008 <rmw_init+0x240>)
 8010eb2:	220f      	movs	r2, #15
 8010eb4:	f000 fef4 	bl	8011ca0 <rmw_uxrce_init_topic_memory>
 8010eb8:	4954      	ldr	r1, [pc, #336]	@ (801100c <rmw_init+0x244>)
 8010eba:	4855      	ldr	r0, [pc, #340]	@ (8011010 <rmw_init+0x248>)
 8010ebc:	2203      	movs	r2, #3
 8010ebe:	f000 ff2f 	bl	8011d20 <rmw_uxrce_init_init_options_impl_memory>
 8010ec2:	4954      	ldr	r1, [pc, #336]	@ (8011014 <rmw_init+0x24c>)
 8010ec4:	4854      	ldr	r0, [pc, #336]	@ (8011018 <rmw_init+0x250>)
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	f000 ff4a 	bl	8011d60 <rmw_uxrce_init_wait_set_memory>
 8010ecc:	4953      	ldr	r1, [pc, #332]	@ (801101c <rmw_init+0x254>)
 8010ece:	4854      	ldr	r0, [pc, #336]	@ (8011020 <rmw_init+0x258>)
 8010ed0:	2204      	movs	r2, #4
 8010ed2:	f000 ff65 	bl	8011da0 <rmw_uxrce_init_guard_condition_memory>
 8010ed6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010ed8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8010eda:	4642      	mov	r2, r8
 8010edc:	f000 fde2 	bl	8011aa4 <rmw_uxrce_transport_init>
 8010ee0:	4607      	mov	r7, r0
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	d158      	bne.n	8010f98 <rmw_init+0x1d0>
 8010ee6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010ee8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010eec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010eee:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f002 fc94 	bl	8013820 <uxr_init_session>
 8010ef8:	494a      	ldr	r1, [pc, #296]	@ (8011024 <rmw_init+0x25c>)
 8010efa:	4622      	mov	r2, r4
 8010efc:	4628      	mov	r0, r5
 8010efe:	f002 fcb3 	bl	8013868 <uxr_set_topic_callback>
 8010f02:	4949      	ldr	r1, [pc, #292]	@ (8011028 <rmw_init+0x260>)
 8010f04:	463a      	mov	r2, r7
 8010f06:	4628      	mov	r0, r5
 8010f08:	f002 fcaa 	bl	8013860 <uxr_set_status_callback>
 8010f0c:	4947      	ldr	r1, [pc, #284]	@ (801102c <rmw_init+0x264>)
 8010f0e:	463a      	mov	r2, r7
 8010f10:	4628      	mov	r0, r5
 8010f12:	f002 fcad 	bl	8013870 <uxr_set_request_callback>
 8010f16:	4946      	ldr	r1, [pc, #280]	@ (8011030 <rmw_init+0x268>)
 8010f18:	463a      	mov	r2, r7
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	f002 fcac 	bl	8013878 <uxr_set_reply_callback>
 8010f20:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f24:	2304      	movs	r3, #4
 8010f26:	0092      	lsls	r2, r2, #2
 8010f28:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	f002 fce1 	bl	80138f4 <uxr_create_input_reliable_stream>
 8010f32:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f36:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010f3a:	0092      	lsls	r2, r2, #2
 8010f3c:	2304      	movs	r3, #4
 8010f3e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010f42:	4628      	mov	r0, r5
 8010f44:	f002 fcae 	bl	80138a4 <uxr_create_output_reliable_stream>
 8010f48:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f002 fccb 	bl	80138e8 <uxr_create_input_best_effort_stream>
 8010f52:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010f56:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010f5a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f5e:	3114      	adds	r1, #20
 8010f60:	4628      	mov	r0, r5
 8010f62:	f002 fc8d 	bl	8013880 <uxr_create_output_best_effort_stream>
 8010f66:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f003 fa42 	bl	80143f4 <uxr_create_session>
 8010f70:	b1f8      	cbz	r0, 8010fb2 <rmw_init+0x1ea>
 8010f72:	4638      	mov	r0, r7
 8010f74:	b003      	add	sp, #12
 8010f76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f7a:	270b      	movs	r7, #11
 8010f7c:	4638      	mov	r0, r7
 8010f7e:	b003      	add	sp, #12
 8010f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f84:	2701      	movs	r7, #1
 8010f86:	4638      	mov	r0, r7
 8010f88:	b003      	add	sp, #12
 8010f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f8e:	270c      	movs	r7, #12
 8010f90:	4638      	mov	r0, r7
 8010f92:	b003      	add	sp, #12
 8010f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f98:	4648      	mov	r0, r9
 8010f9a:	f002 f94b 	bl	8013234 <uxr_close_custom_transport>
 8010f9e:	480d      	ldr	r0, [pc, #52]	@ (8010fd4 <rmw_init+0x20c>)
 8010fa0:	4621      	mov	r1, r4
 8010fa2:	f008 f963 	bl	801926c <put_memory>
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8010fac:	b003      	add	sp, #12
 8010fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fb2:	4648      	mov	r0, r9
 8010fb4:	f002 f93e 	bl	8013234 <uxr_close_custom_transport>
 8010fb8:	4806      	ldr	r0, [pc, #24]	@ (8010fd4 <rmw_init+0x20c>)
 8010fba:	4621      	mov	r1, r4
 8010fbc:	f008 f956 	bl	801926c <put_memory>
 8010fc0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010fc2:	2701      	movs	r7, #1
 8010fc4:	e7d5      	b.n	8010f72 <rmw_init+0x1aa>
 8010fc6:	bf00      	nop
 8010fc8:	0801e390 	.word	0x0801e390
 8010fcc:	20011a9c 	.word	0x20011a9c
 8010fd0:	2000dd48 	.word	0x2000dd48
 8010fd4:	20011a8c 	.word	0x20011a8c
 8010fd8:	2000f2f0 	.word	0x2000f2f0
 8010fdc:	2000d36c 	.word	0x2000d36c
 8010fe0:	20011a5c 	.word	0x20011a5c
 8010fe4:	200113f0 	.word	0x200113f0
 8010fe8:	20011aac 	.word	0x20011aac
 8010fec:	2000d410 	.word	0x2000d410
 8010ff0:	20011a6c 	.word	0x20011a6c
 8010ff4:	2000dc80 	.word	0x2000dc80
 8010ff8:	20011a7c 	.word	0x20011a7c
 8010ffc:	2000d1a0 	.word	0x2000d1a0
 8011000:	2000d18c 	.word	0x2000d18c
 8011004:	20011828 	.word	0x20011828
 8011008:	20011abc 	.word	0x20011abc
 801100c:	2000d2e8 	.word	0x2000d2e8
 8011010:	20011a4c 	.word	0x20011a4c
 8011014:	200119cc 	.word	0x200119cc
 8011018:	20011acc 	.word	0x20011acc
 801101c:	2000d268 	.word	0x2000d268
 8011020:	20011a3c 	.word	0x20011a3c
 8011024:	08019085 	.word	0x08019085
 8011028:	0801907d 	.word	0x0801907d
 801102c:	0801911d 	.word	0x0801911d
 8011030:	080191b9 	.word	0x080191b9

08011034 <rmw_shutdown>:
 8011034:	b570      	push	{r4, r5, r6, lr}
 8011036:	b094      	sub	sp, #80	@ 0x50
 8011038:	2800      	cmp	r0, #0
 801103a:	d050      	beq.n	80110de <rmw_shutdown+0xaa>
 801103c:	4605      	mov	r5, r0
 801103e:	6880      	ldr	r0, [r0, #8]
 8011040:	b128      	cbz	r0, 801104e <rmw_shutdown+0x1a>
 8011042:	4b2b      	ldr	r3, [pc, #172]	@ (80110f0 <rmw_shutdown+0xbc>)
 8011044:	6819      	ldr	r1, [r3, #0]
 8011046:	f7ef f8e3 	bl	8000210 <strcmp>
 801104a:	2800      	cmp	r0, #0
 801104c:	d143      	bne.n	80110d6 <rmw_shutdown+0xa2>
 801104e:	4b29      	ldr	r3, [pc, #164]	@ (80110f4 <rmw_shutdown+0xc0>)
 8011050:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011052:	681c      	ldr	r4, [r3, #0]
 8011054:	2c00      	cmp	r4, #0
 8011056:	d046      	beq.n	80110e6 <rmw_shutdown+0xb2>
 8011058:	2600      	movs	r6, #0
 801105a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801105e:	6902      	ldr	r2, [r0, #16]
 8011060:	428a      	cmp	r2, r1
 8011062:	d024      	beq.n	80110ae <rmw_shutdown+0x7a>
 8011064:	2c00      	cmp	r4, #0
 8011066:	d1f8      	bne.n	801105a <rmw_shutdown+0x26>
 8011068:	b189      	cbz	r1, 801108e <rmw_shutdown+0x5a>
 801106a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801106e:	789b      	ldrb	r3, [r3, #2]
 8011070:	2b01      	cmp	r3, #1
 8011072:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011076:	bf14      	ite	ne
 8011078:	210a      	movne	r1, #10
 801107a:	2100      	moveq	r1, #0
 801107c:	f003 f992 	bl	80143a4 <uxr_delete_session_retries>
 8011080:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011082:	f000 fead 	bl	8011de0 <rmw_uxrce_fini_session_memory>
 8011086:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011088:	3010      	adds	r0, #16
 801108a:	f002 f8d3 	bl	8013234 <uxr_close_custom_transport>
 801108e:	2300      	movs	r3, #0
 8011090:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011092:	b1b6      	cbz	r6, 80110c2 <rmw_shutdown+0x8e>
 8011094:	4d18      	ldr	r5, [pc, #96]	@ (80110f8 <rmw_shutdown+0xc4>)
 8011096:	682c      	ldr	r4, [r5, #0]
 8011098:	b134      	cbz	r4, 80110a8 <rmw_shutdown+0x74>
 801109a:	4621      	mov	r1, r4
 801109c:	6864      	ldr	r4, [r4, #4]
 801109e:	4628      	mov	r0, r5
 80110a0:	f008 f8e4 	bl	801926c <put_memory>
 80110a4:	2c00      	cmp	r4, #0
 80110a6:	d1f8      	bne.n	801109a <rmw_shutdown+0x66>
 80110a8:	4630      	mov	r0, r6
 80110aa:	b014      	add	sp, #80	@ 0x50
 80110ac:	bd70      	pop	{r4, r5, r6, pc}
 80110ae:	3018      	adds	r0, #24
 80110b0:	f000 f8e8 	bl	8011284 <rmw_destroy_node>
 80110b4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80110b6:	4606      	mov	r6, r0
 80110b8:	2c00      	cmp	r4, #0
 80110ba:	d1ce      	bne.n	801105a <rmw_shutdown+0x26>
 80110bc:	2900      	cmp	r1, #0
 80110be:	d1d4      	bne.n	801106a <rmw_shutdown+0x36>
 80110c0:	e7e5      	b.n	801108e <rmw_shutdown+0x5a>
 80110c2:	4668      	mov	r0, sp
 80110c4:	f007 fed0 	bl	8018e68 <rmw_get_zero_initialized_context>
 80110c8:	2250      	movs	r2, #80	@ 0x50
 80110ca:	4669      	mov	r1, sp
 80110cc:	4628      	mov	r0, r5
 80110ce:	f00b fae2 	bl	801c696 <memcpy>
 80110d2:	2600      	movs	r6, #0
 80110d4:	e7de      	b.n	8011094 <rmw_shutdown+0x60>
 80110d6:	260c      	movs	r6, #12
 80110d8:	4630      	mov	r0, r6
 80110da:	b014      	add	sp, #80	@ 0x50
 80110dc:	bd70      	pop	{r4, r5, r6, pc}
 80110de:	260b      	movs	r6, #11
 80110e0:	4630      	mov	r0, r6
 80110e2:	b014      	add	sp, #80	@ 0x50
 80110e4:	bd70      	pop	{r4, r5, r6, pc}
 80110e6:	2900      	cmp	r1, #0
 80110e8:	d0eb      	beq.n	80110c2 <rmw_shutdown+0x8e>
 80110ea:	4626      	mov	r6, r4
 80110ec:	e7bd      	b.n	801106a <rmw_shutdown+0x36>
 80110ee:	bf00      	nop
 80110f0:	0801e390 	.word	0x0801e390
 80110f4:	20011a5c 	.word	0x20011a5c
 80110f8:	20011a9c 	.word	0x20011a9c

080110fc <rmw_context_fini>:
 80110fc:	4b17      	ldr	r3, [pc, #92]	@ (801115c <rmw_context_fini+0x60>)
 80110fe:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	681c      	ldr	r4, [r3, #0]
 8011104:	4605      	mov	r5, r0
 8011106:	b334      	cbz	r4, 8011156 <rmw_context_fini+0x5a>
 8011108:	2600      	movs	r6, #0
 801110a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801110e:	6902      	ldr	r2, [r0, #16]
 8011110:	428a      	cmp	r2, r1
 8011112:	d018      	beq.n	8011146 <rmw_context_fini+0x4a>
 8011114:	2c00      	cmp	r4, #0
 8011116:	d1f8      	bne.n	801110a <rmw_context_fini+0xe>
 8011118:	b189      	cbz	r1, 801113e <rmw_context_fini+0x42>
 801111a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801111e:	789b      	ldrb	r3, [r3, #2]
 8011120:	2b01      	cmp	r3, #1
 8011122:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011126:	bf14      	ite	ne
 8011128:	210a      	movne	r1, #10
 801112a:	2100      	moveq	r1, #0
 801112c:	f003 f93a 	bl	80143a4 <uxr_delete_session_retries>
 8011130:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011132:	f000 fe55 	bl	8011de0 <rmw_uxrce_fini_session_memory>
 8011136:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011138:	3010      	adds	r0, #16
 801113a:	f002 f87b 	bl	8013234 <uxr_close_custom_transport>
 801113e:	2300      	movs	r3, #0
 8011140:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011142:	4630      	mov	r0, r6
 8011144:	bd70      	pop	{r4, r5, r6, pc}
 8011146:	3018      	adds	r0, #24
 8011148:	f000 f89c 	bl	8011284 <rmw_destroy_node>
 801114c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801114e:	4606      	mov	r6, r0
 8011150:	2c00      	cmp	r4, #0
 8011152:	d1da      	bne.n	801110a <rmw_context_fini+0xe>
 8011154:	e7e0      	b.n	8011118 <rmw_context_fini+0x1c>
 8011156:	4626      	mov	r6, r4
 8011158:	e7de      	b.n	8011118 <rmw_context_fini+0x1c>
 801115a:	bf00      	nop
 801115c:	20011a5c 	.word	0x20011a5c

08011160 <create_node>:
 8011160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011164:	b083      	sub	sp, #12
 8011166:	2b00      	cmp	r3, #0
 8011168:	d05f      	beq.n	801122a <create_node+0xca>
 801116a:	4606      	mov	r6, r0
 801116c:	4835      	ldr	r0, [pc, #212]	@ (8011244 <create_node+0xe4>)
 801116e:	460f      	mov	r7, r1
 8011170:	4690      	mov	r8, r2
 8011172:	461d      	mov	r5, r3
 8011174:	f008 f86a 	bl	801924c <get_memory>
 8011178:	2800      	cmp	r0, #0
 801117a:	d056      	beq.n	801122a <create_node+0xca>
 801117c:	6884      	ldr	r4, [r0, #8]
 801117e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011180:	6123      	str	r3, [r4, #16]
 8011182:	f008 f8cb 	bl	801931c <rmw_get_implementation_identifier>
 8011186:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801118a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801118e:	f8c4 9020 	str.w	r9, [r4, #32]
 8011192:	4630      	mov	r0, r6
 8011194:	f7ef f846 	bl	8000224 <strlen>
 8011198:	1c42      	adds	r2, r0, #1
 801119a:	2a3c      	cmp	r2, #60	@ 0x3c
 801119c:	f104 0518 	add.w	r5, r4, #24
 80111a0:	d840      	bhi.n	8011224 <create_node+0xc4>
 80111a2:	4648      	mov	r0, r9
 80111a4:	4631      	mov	r1, r6
 80111a6:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80111aa:	f00b fa74 	bl	801c696 <memcpy>
 80111ae:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 80111b2:	4638      	mov	r0, r7
 80111b4:	f7ef f836 	bl	8000224 <strlen>
 80111b8:	1c42      	adds	r2, r0, #1
 80111ba:	2a3c      	cmp	r2, #60	@ 0x3c
 80111bc:	d832      	bhi.n	8011224 <create_node+0xc4>
 80111be:	4639      	mov	r1, r7
 80111c0:	4648      	mov	r0, r9
 80111c2:	f00b fa68 	bl	801c696 <memcpy>
 80111c6:	6923      	ldr	r3, [r4, #16]
 80111c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111cc:	2101      	movs	r1, #1
 80111ce:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80111d2:	1842      	adds	r2, r0, r1
 80111d4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80111d8:	f002 f830 	bl	801323c <uxr_object_id>
 80111dc:	6160      	str	r0, [r4, #20]
 80111de:	783b      	ldrb	r3, [r7, #0]
 80111e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80111e2:	d127      	bne.n	8011234 <create_node+0xd4>
 80111e4:	787b      	ldrb	r3, [r7, #1]
 80111e6:	bb2b      	cbnz	r3, 8011234 <create_node+0xd4>
 80111e8:	4a17      	ldr	r2, [pc, #92]	@ (8011248 <create_node+0xe8>)
 80111ea:	4818      	ldr	r0, [pc, #96]	@ (801124c <create_node+0xec>)
 80111ec:	4633      	mov	r3, r6
 80111ee:	213c      	movs	r1, #60	@ 0x3c
 80111f0:	f00b f814 	bl	801c21c <sniprintf>
 80111f4:	6920      	ldr	r0, [r4, #16]
 80111f6:	4915      	ldr	r1, [pc, #84]	@ (801124c <create_node+0xec>)
 80111f8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80111fc:	9100      	str	r1, [sp, #0]
 80111fe:	2106      	movs	r1, #6
 8011200:	9101      	str	r1, [sp, #4]
 8011202:	6811      	ldr	r1, [r2, #0]
 8011204:	6962      	ldr	r2, [r4, #20]
 8011206:	fa1f f388 	uxth.w	r3, r8
 801120a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801120e:	f001 fd9d 	bl	8012d4c <uxr_buffer_create_participant_bin>
 8011212:	4602      	mov	r2, r0
 8011214:	6920      	ldr	r0, [r4, #16]
 8011216:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801121a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801121e:	f000 ff55 	bl	80120cc <run_xrce_session>
 8011222:	b918      	cbnz	r0, 801122c <create_node+0xcc>
 8011224:	4628      	mov	r0, r5
 8011226:	f000 fde1 	bl	8011dec <rmw_uxrce_fini_node_memory>
 801122a:	2500      	movs	r5, #0
 801122c:	4628      	mov	r0, r5
 801122e:	b003      	add	sp, #12
 8011230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011234:	4a06      	ldr	r2, [pc, #24]	@ (8011250 <create_node+0xf0>)
 8011236:	9600      	str	r6, [sp, #0]
 8011238:	463b      	mov	r3, r7
 801123a:	213c      	movs	r1, #60	@ 0x3c
 801123c:	4803      	ldr	r0, [pc, #12]	@ (801124c <create_node+0xec>)
 801123e:	f00a ffed 	bl	801c21c <sniprintf>
 8011242:	e7d7      	b.n	80111f4 <create_node+0x94>
 8011244:	20011a5c 	.word	0x20011a5c
 8011248:	0801d9f4 	.word	0x0801d9f4
 801124c:	2000d150 	.word	0x2000d150
 8011250:	0801d6bc 	.word	0x0801d6bc

08011254 <rmw_create_node>:
 8011254:	b199      	cbz	r1, 801127e <rmw_create_node+0x2a>
 8011256:	780b      	ldrb	r3, [r1, #0]
 8011258:	468c      	mov	ip, r1
 801125a:	b183      	cbz	r3, 801127e <rmw_create_node+0x2a>
 801125c:	b410      	push	{r4}
 801125e:	4614      	mov	r4, r2
 8011260:	b14a      	cbz	r2, 8011276 <rmw_create_node+0x22>
 8011262:	7813      	ldrb	r3, [r2, #0]
 8011264:	b13b      	cbz	r3, 8011276 <rmw_create_node+0x22>
 8011266:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011268:	4603      	mov	r3, r0
 801126a:	4621      	mov	r1, r4
 801126c:	4660      	mov	r0, ip
 801126e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011272:	f7ff bf75 	b.w	8011160 <create_node>
 8011276:	2000      	movs	r0, #0
 8011278:	f85d 4b04 	ldr.w	r4, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	2000      	movs	r0, #0
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop

08011284 <rmw_destroy_node>:
 8011284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011286:	b328      	cbz	r0, 80112d4 <rmw_destroy_node+0x50>
 8011288:	4607      	mov	r7, r0
 801128a:	6800      	ldr	r0, [r0, #0]
 801128c:	b120      	cbz	r0, 8011298 <rmw_destroy_node+0x14>
 801128e:	4b36      	ldr	r3, [pc, #216]	@ (8011368 <rmw_destroy_node+0xe4>)
 8011290:	6819      	ldr	r1, [r3, #0]
 8011292:	f7ee ffbd 	bl	8000210 <strcmp>
 8011296:	b9e8      	cbnz	r0, 80112d4 <rmw_destroy_node+0x50>
 8011298:	687d      	ldr	r5, [r7, #4]
 801129a:	b1dd      	cbz	r5, 80112d4 <rmw_destroy_node+0x50>
 801129c:	4b33      	ldr	r3, [pc, #204]	@ (801136c <rmw_destroy_node+0xe8>)
 801129e:	681c      	ldr	r4, [r3, #0]
 80112a0:	2c00      	cmp	r4, #0
 80112a2:	d05f      	beq.n	8011364 <rmw_destroy_node+0xe0>
 80112a4:	2600      	movs	r6, #0
 80112a6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112aa:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 80112ae:	429d      	cmp	r5, r3
 80112b0:	d013      	beq.n	80112da <rmw_destroy_node+0x56>
 80112b2:	2c00      	cmp	r4, #0
 80112b4:	d1f7      	bne.n	80112a6 <rmw_destroy_node+0x22>
 80112b6:	4b2e      	ldr	r3, [pc, #184]	@ (8011370 <rmw_destroy_node+0xec>)
 80112b8:	681c      	ldr	r4, [r3, #0]
 80112ba:	b1c4      	cbz	r4, 80112ee <rmw_destroy_node+0x6a>
 80112bc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112c0:	6a0b      	ldr	r3, [r1, #32]
 80112c2:	429d      	cmp	r5, r3
 80112c4:	d1f9      	bne.n	80112ba <rmw_destroy_node+0x36>
 80112c6:	317c      	adds	r1, #124	@ 0x7c
 80112c8:	4638      	mov	r0, r7
 80112ca:	f000 fb37 	bl	801193c <rmw_destroy_subscription>
 80112ce:	2801      	cmp	r0, #1
 80112d0:	4606      	mov	r6, r0
 80112d2:	d1f2      	bne.n	80112ba <rmw_destroy_node+0x36>
 80112d4:	2601      	movs	r6, #1
 80112d6:	4630      	mov	r0, r6
 80112d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112da:	3184      	adds	r1, #132	@ 0x84
 80112dc:	4638      	mov	r0, r7
 80112de:	f000 f9a5 	bl	801162c <rmw_destroy_publisher>
 80112e2:	2801      	cmp	r0, #1
 80112e4:	4606      	mov	r6, r0
 80112e6:	d0f5      	beq.n	80112d4 <rmw_destroy_node+0x50>
 80112e8:	2c00      	cmp	r4, #0
 80112ea:	d1dc      	bne.n	80112a6 <rmw_destroy_node+0x22>
 80112ec:	e7e3      	b.n	80112b6 <rmw_destroy_node+0x32>
 80112ee:	4b21      	ldr	r3, [pc, #132]	@ (8011374 <rmw_destroy_node+0xf0>)
 80112f0:	681c      	ldr	r4, [r3, #0]
 80112f2:	b16c      	cbz	r4, 8011310 <rmw_destroy_node+0x8c>
 80112f4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112f8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112fa:	429d      	cmp	r5, r3
 80112fc:	d1f9      	bne.n	80112f2 <rmw_destroy_node+0x6e>
 80112fe:	317c      	adds	r1, #124	@ 0x7c
 8011300:	4638      	mov	r0, r7
 8011302:	f000 f9e5 	bl	80116d0 <rmw_destroy_service>
 8011306:	2801      	cmp	r0, #1
 8011308:	4606      	mov	r6, r0
 801130a:	d0e3      	beq.n	80112d4 <rmw_destroy_node+0x50>
 801130c:	2c00      	cmp	r4, #0
 801130e:	d1f1      	bne.n	80112f4 <rmw_destroy_node+0x70>
 8011310:	4b19      	ldr	r3, [pc, #100]	@ (8011378 <rmw_destroy_node+0xf4>)
 8011312:	681c      	ldr	r4, [r3, #0]
 8011314:	b16c      	cbz	r4, 8011332 <rmw_destroy_node+0xae>
 8011316:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801131a:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801131c:	429d      	cmp	r5, r3
 801131e:	d1f9      	bne.n	8011314 <rmw_destroy_node+0x90>
 8011320:	317c      	adds	r1, #124	@ 0x7c
 8011322:	4638      	mov	r0, r7
 8011324:	f007 ffb6 	bl	8019294 <rmw_destroy_client>
 8011328:	2801      	cmp	r0, #1
 801132a:	4606      	mov	r6, r0
 801132c:	d0d2      	beq.n	80112d4 <rmw_destroy_node+0x50>
 801132e:	2c00      	cmp	r4, #0
 8011330:	d1f1      	bne.n	8011316 <rmw_destroy_node+0x92>
 8011332:	6928      	ldr	r0, [r5, #16]
 8011334:	696a      	ldr	r2, [r5, #20]
 8011336:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801133a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801133e:	6819      	ldr	r1, [r3, #0]
 8011340:	f001 fcb8 	bl	8012cb4 <uxr_buffer_delete_entity>
 8011344:	4602      	mov	r2, r0
 8011346:	6928      	ldr	r0, [r5, #16]
 8011348:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801134c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011350:	f000 febc 	bl	80120cc <run_xrce_session>
 8011354:	2800      	cmp	r0, #0
 8011356:	bf08      	it	eq
 8011358:	2602      	moveq	r6, #2
 801135a:	4638      	mov	r0, r7
 801135c:	f000 fd46 	bl	8011dec <rmw_uxrce_fini_node_memory>
 8011360:	4630      	mov	r0, r6
 8011362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011364:	4626      	mov	r6, r4
 8011366:	e7a6      	b.n	80112b6 <rmw_destroy_node+0x32>
 8011368:	0801e390 	.word	0x0801e390
 801136c:	20011a6c 	.word	0x20011a6c
 8011370:	20011aac 	.word	0x20011aac
 8011374:	20011a7c 	.word	0x20011a7c
 8011378:	2000d18c 	.word	0x2000d18c

0801137c <rmw_node_get_graph_guard_condition>:
 801137c:	6843      	ldr	r3, [r0, #4]
 801137e:	6918      	ldr	r0, [r3, #16]
 8011380:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop

08011388 <flush_session>:
 8011388:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801138a:	f002 be99 	b.w	80140c0 <uxr_run_session_until_confirm_delivery>
 801138e:	bf00      	nop

08011390 <rmw_publish>:
 8011390:	2800      	cmp	r0, #0
 8011392:	d053      	beq.n	801143c <rmw_publish+0xac>
 8011394:	b570      	push	{r4, r5, r6, lr}
 8011396:	460d      	mov	r5, r1
 8011398:	b08e      	sub	sp, #56	@ 0x38
 801139a:	2900      	cmp	r1, #0
 801139c:	d04b      	beq.n	8011436 <rmw_publish+0xa6>
 801139e:	4604      	mov	r4, r0
 80113a0:	6800      	ldr	r0, [r0, #0]
 80113a2:	f000 ff13 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 80113a6:	2800      	cmp	r0, #0
 80113a8:	d045      	beq.n	8011436 <rmw_publish+0xa6>
 80113aa:	6866      	ldr	r6, [r4, #4]
 80113ac:	2e00      	cmp	r6, #0
 80113ae:	d042      	beq.n	8011436 <rmw_publish+0xa6>
 80113b0:	69b4      	ldr	r4, [r6, #24]
 80113b2:	4628      	mov	r0, r5
 80113b4:	6923      	ldr	r3, [r4, #16]
 80113b6:	4798      	blx	r3
 80113b8:	69f3      	ldr	r3, [r6, #28]
 80113ba:	9005      	str	r0, [sp, #20]
 80113bc:	b113      	cbz	r3, 80113c4 <rmw_publish+0x34>
 80113be:	a805      	add	r0, sp, #20
 80113c0:	4798      	blx	r3
 80113c2:	9805      	ldr	r0, [sp, #20]
 80113c4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113c8:	691b      	ldr	r3, [r3, #16]
 80113ca:	9000      	str	r0, [sp, #0]
 80113cc:	6972      	ldr	r2, [r6, #20]
 80113ce:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80113d0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80113d4:	ab06      	add	r3, sp, #24
 80113d6:	f004 f91b 	bl	8015610 <uxr_prepare_output_stream>
 80113da:	b1d8      	cbz	r0, 8011414 <rmw_publish+0x84>
 80113dc:	68a3      	ldr	r3, [r4, #8]
 80113de:	a906      	add	r1, sp, #24
 80113e0:	4628      	mov	r0, r5
 80113e2:	4798      	blx	r3
 80113e4:	6a33      	ldr	r3, [r6, #32]
 80113e6:	4604      	mov	r4, r0
 80113e8:	b10b      	cbz	r3, 80113ee <rmw_publish+0x5e>
 80113ea:	a806      	add	r0, sp, #24
 80113ec:	4798      	blx	r3
 80113ee:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80113f2:	2b01      	cmp	r3, #1
 80113f4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113f8:	d022      	beq.n	8011440 <rmw_publish+0xb0>
 80113fa:	6918      	ldr	r0, [r3, #16]
 80113fc:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80113fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011402:	f002 fe5d 	bl	80140c0 <uxr_run_session_until_confirm_delivery>
 8011406:	4020      	ands	r0, r4
 8011408:	b2c4      	uxtb	r4, r0
 801140a:	f084 0001 	eor.w	r0, r4, #1
 801140e:	b2c0      	uxtb	r0, r0
 8011410:	b00e      	add	sp, #56	@ 0x38
 8011412:	bd70      	pop	{r4, r5, r6, pc}
 8011414:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8011418:	6918      	ldr	r0, [r3, #16]
 801141a:	9b05      	ldr	r3, [sp, #20]
 801141c:	9300      	str	r3, [sp, #0]
 801141e:	4b0b      	ldr	r3, [pc, #44]	@ (801144c <rmw_publish+0xbc>)
 8011420:	9301      	str	r3, [sp, #4]
 8011422:	9602      	str	r6, [sp, #8]
 8011424:	6972      	ldr	r2, [r6, #20]
 8011426:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011428:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801142c:	ab06      	add	r3, sp, #24
 801142e:	f004 f91f 	bl	8015670 <uxr_prepare_output_stream_fragmented>
 8011432:	2800      	cmp	r0, #0
 8011434:	d1d2      	bne.n	80113dc <rmw_publish+0x4c>
 8011436:	2001      	movs	r0, #1
 8011438:	b00e      	add	sp, #56	@ 0x38
 801143a:	bd70      	pop	{r4, r5, r6, pc}
 801143c:	2001      	movs	r0, #1
 801143e:	4770      	bx	lr
 8011440:	6918      	ldr	r0, [r3, #16]
 8011442:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011446:	f002 fa7b 	bl	8013940 <uxr_flash_output_streams>
 801144a:	e7de      	b.n	801140a <rmw_publish+0x7a>
 801144c:	08011389 	.word	0x08011389

08011450 <rmw_create_publisher>:
 8011450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011454:	b087      	sub	sp, #28
 8011456:	2800      	cmp	r0, #0
 8011458:	f000 80cc 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 801145c:	460e      	mov	r6, r1
 801145e:	2900      	cmp	r1, #0
 8011460:	f000 80c8 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 8011464:	4604      	mov	r4, r0
 8011466:	6800      	ldr	r0, [r0, #0]
 8011468:	4615      	mov	r5, r2
 801146a:	4698      	mov	r8, r3
 801146c:	f000 feae 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 8011470:	2800      	cmp	r0, #0
 8011472:	f000 80bf 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 8011476:	2d00      	cmp	r5, #0
 8011478:	f000 80bc 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 801147c:	782b      	ldrb	r3, [r5, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	f000 80b8 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 8011484:	f1b8 0f00 	cmp.w	r8, #0
 8011488:	f000 80b4 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 801148c:	485c      	ldr	r0, [pc, #368]	@ (8011600 <rmw_create_publisher+0x1b0>)
 801148e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011492:	f007 fedb 	bl	801924c <get_memory>
 8011496:	2800      	cmp	r0, #0
 8011498:	f000 80ac 	beq.w	80115f4 <rmw_create_publisher+0x1a4>
 801149c:	6884      	ldr	r4, [r0, #8]
 801149e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 80114a2:	f007 ff3b 	bl	801931c <rmw_get_implementation_identifier>
 80114a6:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 80114aa:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 80114ae:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 80114b2:	4628      	mov	r0, r5
 80114b4:	f7ee feb6 	bl	8000224 <strlen>
 80114b8:	3001      	adds	r0, #1
 80114ba:	283c      	cmp	r0, #60	@ 0x3c
 80114bc:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80114c0:	f200 8091 	bhi.w	80115e6 <rmw_create_publisher+0x196>
 80114c4:	4a4f      	ldr	r2, [pc, #316]	@ (8011604 <rmw_create_publisher+0x1b4>)
 80114c6:	462b      	mov	r3, r5
 80114c8:	213c      	movs	r1, #60	@ 0x3c
 80114ca:	4650      	mov	r0, sl
 80114cc:	f00a fea6 	bl	801c21c <sniprintf>
 80114d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80114d6:	4641      	mov	r1, r8
 80114d8:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80114dc:	2250      	movs	r2, #80	@ 0x50
 80114de:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80114e2:	f00b f8d8 	bl	801c696 <memcpy>
 80114e6:	f898 3008 	ldrb.w	r3, [r8, #8]
 80114ea:	4947      	ldr	r1, [pc, #284]	@ (8011608 <rmw_create_publisher+0x1b8>)
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114f2:	bf0c      	ite	eq
 80114f4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80114f8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80114fc:	67a3      	str	r3, [r4, #120]	@ 0x78
 80114fe:	2300      	movs	r3, #0
 8011500:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011504:	4630      	mov	r0, r6
 8011506:	f000 fe6f 	bl	80121e8 <get_message_typesupport_handle>
 801150a:	2800      	cmp	r0, #0
 801150c:	d06b      	beq.n	80115e6 <rmw_create_publisher+0x196>
 801150e:	6842      	ldr	r2, [r0, #4]
 8011510:	61a2      	str	r2, [r4, #24]
 8011512:	2a00      	cmp	r2, #0
 8011514:	d067      	beq.n	80115e6 <rmw_create_publisher+0x196>
 8011516:	4629      	mov	r1, r5
 8011518:	4643      	mov	r3, r8
 801151a:	4648      	mov	r0, r9
 801151c:	f007 ff2c 	bl	8019378 <create_topic>
 8011520:	6260      	str	r0, [r4, #36]	@ 0x24
 8011522:	2800      	cmp	r0, #0
 8011524:	d063      	beq.n	80115ee <rmw_create_publisher+0x19e>
 8011526:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801152a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801152e:	2103      	movs	r1, #3
 8011530:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011534:	1c42      	adds	r2, r0, #1
 8011536:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801153a:	f001 fe7f 	bl	801323c <uxr_object_id>
 801153e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011542:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011546:	6120      	str	r0, [r4, #16]
 8011548:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801154c:	6910      	ldr	r0, [r2, #16]
 801154e:	2506      	movs	r5, #6
 8011550:	9500      	str	r5, [sp, #0]
 8011552:	6819      	ldr	r1, [r3, #0]
 8011554:	6922      	ldr	r2, [r4, #16]
 8011556:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801155a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801155e:	f001 fc5d 	bl	8012e1c <uxr_buffer_create_publisher_bin>
 8011562:	4602      	mov	r2, r0
 8011564:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011568:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801156c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011570:	f000 fdac 	bl	80120cc <run_xrce_session>
 8011574:	b3b8      	cbz	r0, 80115e6 <rmw_create_publisher+0x196>
 8011576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801157a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801157e:	2105      	movs	r1, #5
 8011580:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8011584:	1c42      	adds	r2, r0, #1
 8011586:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801158a:	f001 fe57 	bl	801323c <uxr_object_id>
 801158e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011592:	6160      	str	r0, [r4, #20]
 8011594:	691e      	ldr	r6, [r3, #16]
 8011596:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801159a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801159e:	f10d 0a10 	add.w	sl, sp, #16
 80115a2:	4641      	mov	r1, r8
 80115a4:	4650      	mov	r0, sl
 80115a6:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 80115aa:	f000 fdab 	bl	8012104 <convert_qos_profile>
 80115ae:	9503      	str	r5, [sp, #12]
 80115b0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80115b4:	9001      	str	r0, [sp, #4]
 80115b6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80115ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80115c4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80115c8:	f8d8 1000 	ldr.w	r1, [r8]
 80115cc:	4630      	mov	r0, r6
 80115ce:	f001 fc85 	bl	8012edc <uxr_buffer_create_datawriter_bin>
 80115d2:	4602      	mov	r2, r0
 80115d4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80115d8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80115dc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80115e0:	f000 fd74 	bl	80120cc <run_xrce_session>
 80115e4:	b938      	cbnz	r0, 80115f6 <rmw_create_publisher+0x1a6>
 80115e6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80115e8:	b108      	cbz	r0, 80115ee <rmw_create_publisher+0x19e>
 80115ea:	f000 fc6f 	bl	8011ecc <rmw_uxrce_fini_topic_memory>
 80115ee:	4638      	mov	r0, r7
 80115f0:	f000 fc14 	bl	8011e1c <rmw_uxrce_fini_publisher_memory>
 80115f4:	2700      	movs	r7, #0
 80115f6:	4638      	mov	r0, r7
 80115f8:	b007      	add	sp, #28
 80115fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115fe:	bf00      	nop
 8011600:	20011a6c 	.word	0x20011a6c
 8011604:	0801d9f4 	.word	0x0801d9f4
 8011608:	0801d528 	.word	0x0801d528

0801160c <rmw_publisher_get_actual_qos>:
 801160c:	b150      	cbz	r0, 8011624 <rmw_publisher_get_actual_qos+0x18>
 801160e:	b508      	push	{r3, lr}
 8011610:	460b      	mov	r3, r1
 8011612:	b149      	cbz	r1, 8011628 <rmw_publisher_get_actual_qos+0x1c>
 8011614:	6841      	ldr	r1, [r0, #4]
 8011616:	2250      	movs	r2, #80	@ 0x50
 8011618:	3128      	adds	r1, #40	@ 0x28
 801161a:	4618      	mov	r0, r3
 801161c:	f00b f83b 	bl	801c696 <memcpy>
 8011620:	2000      	movs	r0, #0
 8011622:	bd08      	pop	{r3, pc}
 8011624:	200b      	movs	r0, #11
 8011626:	4770      	bx	lr
 8011628:	200b      	movs	r0, #11
 801162a:	bd08      	pop	{r3, pc}

0801162c <rmw_destroy_publisher>:
 801162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162e:	b128      	cbz	r0, 801163c <rmw_destroy_publisher+0x10>
 8011630:	4604      	mov	r4, r0
 8011632:	6800      	ldr	r0, [r0, #0]
 8011634:	460d      	mov	r5, r1
 8011636:	f000 fdc9 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 801163a:	b910      	cbnz	r0, 8011642 <rmw_destroy_publisher+0x16>
 801163c:	2401      	movs	r4, #1
 801163e:	4620      	mov	r0, r4
 8011640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011642:	6863      	ldr	r3, [r4, #4]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d0f9      	beq.n	801163c <rmw_destroy_publisher+0x10>
 8011648:	2d00      	cmp	r5, #0
 801164a:	d0f7      	beq.n	801163c <rmw_destroy_publisher+0x10>
 801164c:	6828      	ldr	r0, [r5, #0]
 801164e:	f000 fdbd 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 8011652:	2800      	cmp	r0, #0
 8011654:	d0f2      	beq.n	801163c <rmw_destroy_publisher+0x10>
 8011656:	686c      	ldr	r4, [r5, #4]
 8011658:	2c00      	cmp	r4, #0
 801165a:	d0ef      	beq.n	801163c <rmw_destroy_publisher+0x10>
 801165c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801165e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8011662:	f007 fed9 	bl	8019418 <destroy_topic>
 8011666:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801166a:	6962      	ldr	r2, [r4, #20]
 801166c:	6918      	ldr	r0, [r3, #16]
 801166e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011672:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011676:	6819      	ldr	r1, [r3, #0]
 8011678:	f001 fb1c 	bl	8012cb4 <uxr_buffer_delete_entity>
 801167c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011680:	6922      	ldr	r2, [r4, #16]
 8011682:	691b      	ldr	r3, [r3, #16]
 8011684:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011688:	4604      	mov	r4, r0
 801168a:	6809      	ldr	r1, [r1, #0]
 801168c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011690:	f001 fb10 	bl	8012cb4 <uxr_buffer_delete_entity>
 8011694:	693e      	ldr	r6, [r7, #16]
 8011696:	4622      	mov	r2, r4
 8011698:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801169c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80116a0:	4604      	mov	r4, r0
 80116a2:	4630      	mov	r0, r6
 80116a4:	f000 fd12 	bl	80120cc <run_xrce_session>
 80116a8:	693e      	ldr	r6, [r7, #16]
 80116aa:	4622      	mov	r2, r4
 80116ac:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80116b0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80116b4:	4604      	mov	r4, r0
 80116b6:	4630      	mov	r0, r6
 80116b8:	f000 fd08 	bl	80120cc <run_xrce_session>
 80116bc:	b12c      	cbz	r4, 80116ca <rmw_destroy_publisher+0x9e>
 80116be:	b120      	cbz	r0, 80116ca <rmw_destroy_publisher+0x9e>
 80116c0:	2400      	movs	r4, #0
 80116c2:	4628      	mov	r0, r5
 80116c4:	f000 fbaa 	bl	8011e1c <rmw_uxrce_fini_publisher_memory>
 80116c8:	e7b9      	b.n	801163e <rmw_destroy_publisher+0x12>
 80116ca:	2402      	movs	r4, #2
 80116cc:	e7f9      	b.n	80116c2 <rmw_destroy_publisher+0x96>
 80116ce:	bf00      	nop

080116d0 <rmw_destroy_service>:
 80116d0:	b570      	push	{r4, r5, r6, lr}
 80116d2:	b128      	cbz	r0, 80116e0 <rmw_destroy_service+0x10>
 80116d4:	4604      	mov	r4, r0
 80116d6:	6800      	ldr	r0, [r0, #0]
 80116d8:	460d      	mov	r5, r1
 80116da:	f000 fd77 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 80116de:	b910      	cbnz	r0, 80116e6 <rmw_destroy_service+0x16>
 80116e0:	2401      	movs	r4, #1
 80116e2:	4620      	mov	r0, r4
 80116e4:	bd70      	pop	{r4, r5, r6, pc}
 80116e6:	6863      	ldr	r3, [r4, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d0f9      	beq.n	80116e0 <rmw_destroy_service+0x10>
 80116ec:	2d00      	cmp	r5, #0
 80116ee:	d0f7      	beq.n	80116e0 <rmw_destroy_service+0x10>
 80116f0:	6828      	ldr	r0, [r5, #0]
 80116f2:	f000 fd6b 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d0f2      	beq.n	80116e0 <rmw_destroy_service+0x10>
 80116fa:	686e      	ldr	r6, [r5, #4]
 80116fc:	2e00      	cmp	r6, #0
 80116fe:	d0ef      	beq.n	80116e0 <rmw_destroy_service+0x10>
 8011700:	6864      	ldr	r4, [r4, #4]
 8011702:	6932      	ldr	r2, [r6, #16]
 8011704:	6920      	ldr	r0, [r4, #16]
 8011706:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801170a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801170e:	6819      	ldr	r1, [r3, #0]
 8011710:	f001 ff02 	bl	8013518 <uxr_buffer_cancel_data>
 8011714:	4602      	mov	r2, r0
 8011716:	6920      	ldr	r0, [r4, #16]
 8011718:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801171c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011720:	f000 fcd4 	bl	80120cc <run_xrce_session>
 8011724:	6920      	ldr	r0, [r4, #16]
 8011726:	6932      	ldr	r2, [r6, #16]
 8011728:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801172c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011730:	6819      	ldr	r1, [r3, #0]
 8011732:	f001 fabf 	bl	8012cb4 <uxr_buffer_delete_entity>
 8011736:	4602      	mov	r2, r0
 8011738:	6920      	ldr	r0, [r4, #16]
 801173a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801173e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011742:	f000 fcc3 	bl	80120cc <run_xrce_session>
 8011746:	2800      	cmp	r0, #0
 8011748:	4628      	mov	r0, r5
 801174a:	bf14      	ite	ne
 801174c:	2400      	movne	r4, #0
 801174e:	2402      	moveq	r4, #2
 8011750:	f000 fb90 	bl	8011e74 <rmw_uxrce_fini_service_memory>
 8011754:	e7c5      	b.n	80116e2 <rmw_destroy_service+0x12>
 8011756:	bf00      	nop

08011758 <rmw_create_subscription>:
 8011758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801175c:	b08d      	sub	sp, #52	@ 0x34
 801175e:	2800      	cmp	r0, #0
 8011760:	f000 80d1 	beq.w	8011906 <rmw_create_subscription+0x1ae>
 8011764:	460e      	mov	r6, r1
 8011766:	2900      	cmp	r1, #0
 8011768:	f000 80cd 	beq.w	8011906 <rmw_create_subscription+0x1ae>
 801176c:	4604      	mov	r4, r0
 801176e:	6800      	ldr	r0, [r0, #0]
 8011770:	4615      	mov	r5, r2
 8011772:	4698      	mov	r8, r3
 8011774:	f000 fd2a 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 8011778:	2800      	cmp	r0, #0
 801177a:	f000 80c4 	beq.w	8011906 <rmw_create_subscription+0x1ae>
 801177e:	2d00      	cmp	r5, #0
 8011780:	f000 80c1 	beq.w	8011906 <rmw_create_subscription+0x1ae>
 8011784:	782b      	ldrb	r3, [r5, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	f000 80bd 	beq.w	8011906 <rmw_create_subscription+0x1ae>
 801178c:	f1b8 0f00 	cmp.w	r8, #0
 8011790:	f000 80b9 	beq.w	8011906 <rmw_create_subscription+0x1ae>
 8011794:	485e      	ldr	r0, [pc, #376]	@ (8011910 <rmw_create_subscription+0x1b8>)
 8011796:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801179a:	f007 fd57 	bl	801924c <get_memory>
 801179e:	4604      	mov	r4, r0
 80117a0:	2800      	cmp	r0, #0
 80117a2:	f000 80b1 	beq.w	8011908 <rmw_create_subscription+0x1b0>
 80117a6:	6887      	ldr	r7, [r0, #8]
 80117a8:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 80117ac:	f007 fdb6 	bl	801931c <rmw_get_implementation_identifier>
 80117b0:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 80117b4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80117b6:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 80117ba:	4628      	mov	r0, r5
 80117bc:	f7ee fd32 	bl	8000224 <strlen>
 80117c0:	3001      	adds	r0, #1
 80117c2:	283c      	cmp	r0, #60	@ 0x3c
 80117c4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80117c8:	f200 8096 	bhi.w	80118f8 <rmw_create_subscription+0x1a0>
 80117cc:	4a51      	ldr	r2, [pc, #324]	@ (8011914 <rmw_create_subscription+0x1bc>)
 80117ce:	462b      	mov	r3, r5
 80117d0:	213c      	movs	r1, #60	@ 0x3c
 80117d2:	4650      	mov	r0, sl
 80117d4:	f00a fd22 	bl	801c21c <sniprintf>
 80117d8:	4641      	mov	r1, r8
 80117da:	f8c7 9020 	str.w	r9, [r7, #32]
 80117de:	2250      	movs	r2, #80	@ 0x50
 80117e0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80117e4:	f00a ff57 	bl	801c696 <memcpy>
 80117e8:	494b      	ldr	r1, [pc, #300]	@ (8011918 <rmw_create_subscription+0x1c0>)
 80117ea:	4630      	mov	r0, r6
 80117ec:	f000 fcfc 	bl	80121e8 <get_message_typesupport_handle>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	f000 8081 	beq.w	80118f8 <rmw_create_subscription+0x1a0>
 80117f6:	6842      	ldr	r2, [r0, #4]
 80117f8:	61ba      	str	r2, [r7, #24]
 80117fa:	2a00      	cmp	r2, #0
 80117fc:	d07c      	beq.n	80118f8 <rmw_create_subscription+0x1a0>
 80117fe:	4629      	mov	r1, r5
 8011800:	4643      	mov	r3, r8
 8011802:	4648      	mov	r0, r9
 8011804:	f007 fdb8 	bl	8019378 <create_topic>
 8011808:	61f8      	str	r0, [r7, #28]
 801180a:	2800      	cmp	r0, #0
 801180c:	d078      	beq.n	8011900 <rmw_create_subscription+0x1a8>
 801180e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011816:	2104      	movs	r1, #4
 8011818:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801181c:	1c42      	adds	r2, r0, #1
 801181e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011822:	f001 fd0b 	bl	801323c <uxr_object_id>
 8011826:	6138      	str	r0, [r7, #16]
 8011828:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801182c:	2506      	movs	r5, #6
 801182e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011832:	9500      	str	r5, [sp, #0]
 8011834:	6819      	ldr	r1, [r3, #0]
 8011836:	693a      	ldr	r2, [r7, #16]
 8011838:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801183c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011840:	f001 fb1c 	bl	8012e7c <uxr_buffer_create_subscriber_bin>
 8011844:	4602      	mov	r2, r0
 8011846:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801184a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801184e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011852:	f000 fc3b 	bl	80120cc <run_xrce_session>
 8011856:	2800      	cmp	r0, #0
 8011858:	d04e      	beq.n	80118f8 <rmw_create_subscription+0x1a0>
 801185a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801185e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011862:	4629      	mov	r1, r5
 8011864:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011868:	1c42      	adds	r2, r0, #1
 801186a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801186e:	f001 fce5 	bl	801323c <uxr_object_id>
 8011872:	ae08      	add	r6, sp, #32
 8011874:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	6178      	str	r0, [r7, #20]
 801187c:	4641      	mov	r1, r8
 801187e:	4630      	mov	r0, r6
 8011880:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011884:	9305      	str	r3, [sp, #20]
 8011886:	f000 fc3d 	bl	8012104 <convert_qos_profile>
 801188a:	9503      	str	r5, [sp, #12]
 801188c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011890:	9b05      	ldr	r3, [sp, #20]
 8011892:	9001      	str	r0, [sp, #4]
 8011894:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011898:	691b      	ldr	r3, [r3, #16]
 801189a:	9300      	str	r3, [sp, #0]
 801189c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 80118a0:	f8db 1000 	ldr.w	r1, [fp]
 80118a4:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 80118a8:	f001 fb8e 	bl	8012fc8 <uxr_buffer_create_datareader_bin>
 80118ac:	4602      	mov	r2, r0
 80118ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80118b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80118b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80118ba:	f000 fc07 	bl	80120cc <run_xrce_session>
 80118be:	b1d8      	cbz	r0, 80118f8 <rmw_create_subscription+0x1a0>
 80118c0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80118c4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80118c8:	2b02      	cmp	r3, #2
 80118ca:	bf0c      	ite	eq
 80118cc:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80118d0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80118d4:	9307      	str	r3, [sp, #28]
 80118d6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80118da:	2200      	movs	r2, #0
 80118dc:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80118e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80118e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80118e6:	9300      	str	r3, [sp, #0]
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	9b07      	ldr	r3, [sp, #28]
 80118ec:	6809      	ldr	r1, [r1, #0]
 80118ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80118f2:	f001 fdd7 	bl	80134a4 <uxr_buffer_request_data>
 80118f6:	e007      	b.n	8011908 <rmw_create_subscription+0x1b0>
 80118f8:	69f8      	ldr	r0, [r7, #28]
 80118fa:	b108      	cbz	r0, 8011900 <rmw_create_subscription+0x1a8>
 80118fc:	f000 fae6 	bl	8011ecc <rmw_uxrce_fini_topic_memory>
 8011900:	4620      	mov	r0, r4
 8011902:	f000 faa1 	bl	8011e48 <rmw_uxrce_fini_subscription_memory>
 8011906:	2400      	movs	r4, #0
 8011908:	4620      	mov	r0, r4
 801190a:	b00d      	add	sp, #52	@ 0x34
 801190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011910:	20011aac 	.word	0x20011aac
 8011914:	0801d9f4 	.word	0x0801d9f4
 8011918:	0801d528 	.word	0x0801d528

0801191c <rmw_subscription_get_actual_qos>:
 801191c:	b150      	cbz	r0, 8011934 <rmw_subscription_get_actual_qos+0x18>
 801191e:	b508      	push	{r3, lr}
 8011920:	460b      	mov	r3, r1
 8011922:	b149      	cbz	r1, 8011938 <rmw_subscription_get_actual_qos+0x1c>
 8011924:	6841      	ldr	r1, [r0, #4]
 8011926:	2250      	movs	r2, #80	@ 0x50
 8011928:	3128      	adds	r1, #40	@ 0x28
 801192a:	4618      	mov	r0, r3
 801192c:	f00a feb3 	bl	801c696 <memcpy>
 8011930:	2000      	movs	r0, #0
 8011932:	bd08      	pop	{r3, pc}
 8011934:	200b      	movs	r0, #11
 8011936:	4770      	bx	lr
 8011938:	200b      	movs	r0, #11
 801193a:	bd08      	pop	{r3, pc}

0801193c <rmw_destroy_subscription>:
 801193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801193e:	b128      	cbz	r0, 801194c <rmw_destroy_subscription+0x10>
 8011940:	4604      	mov	r4, r0
 8011942:	6800      	ldr	r0, [r0, #0]
 8011944:	460d      	mov	r5, r1
 8011946:	f000 fc41 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 801194a:	b910      	cbnz	r0, 8011952 <rmw_destroy_subscription+0x16>
 801194c:	2401      	movs	r4, #1
 801194e:	4620      	mov	r0, r4
 8011950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011952:	6863      	ldr	r3, [r4, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d0f9      	beq.n	801194c <rmw_destroy_subscription+0x10>
 8011958:	2d00      	cmp	r5, #0
 801195a:	d0f7      	beq.n	801194c <rmw_destroy_subscription+0x10>
 801195c:	6828      	ldr	r0, [r5, #0]
 801195e:	f000 fc35 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 8011962:	2800      	cmp	r0, #0
 8011964:	d0f2      	beq.n	801194c <rmw_destroy_subscription+0x10>
 8011966:	686c      	ldr	r4, [r5, #4]
 8011968:	2c00      	cmp	r4, #0
 801196a:	d0ef      	beq.n	801194c <rmw_destroy_subscription+0x10>
 801196c:	6a26      	ldr	r6, [r4, #32]
 801196e:	6962      	ldr	r2, [r4, #20]
 8011970:	6930      	ldr	r0, [r6, #16]
 8011972:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011976:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801197a:	6819      	ldr	r1, [r3, #0]
 801197c:	f001 fdcc 	bl	8013518 <uxr_buffer_cancel_data>
 8011980:	4602      	mov	r2, r0
 8011982:	6930      	ldr	r0, [r6, #16]
 8011984:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011988:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801198c:	f000 fb9e 	bl	80120cc <run_xrce_session>
 8011990:	69e0      	ldr	r0, [r4, #28]
 8011992:	f007 fd41 	bl	8019418 <destroy_topic>
 8011996:	6a23      	ldr	r3, [r4, #32]
 8011998:	6962      	ldr	r2, [r4, #20]
 801199a:	6918      	ldr	r0, [r3, #16]
 801199c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80119a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80119a4:	6819      	ldr	r1, [r3, #0]
 80119a6:	f001 f985 	bl	8012cb4 <uxr_buffer_delete_entity>
 80119aa:	6a23      	ldr	r3, [r4, #32]
 80119ac:	6922      	ldr	r2, [r4, #16]
 80119ae:	691b      	ldr	r3, [r3, #16]
 80119b0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80119b4:	4604      	mov	r4, r0
 80119b6:	6809      	ldr	r1, [r1, #0]
 80119b8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80119bc:	f001 f97a 	bl	8012cb4 <uxr_buffer_delete_entity>
 80119c0:	6937      	ldr	r7, [r6, #16]
 80119c2:	4622      	mov	r2, r4
 80119c4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80119c8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80119cc:	4604      	mov	r4, r0
 80119ce:	4638      	mov	r0, r7
 80119d0:	f000 fb7c 	bl	80120cc <run_xrce_session>
 80119d4:	6936      	ldr	r6, [r6, #16]
 80119d6:	4622      	mov	r2, r4
 80119d8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80119dc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80119e0:	4604      	mov	r4, r0
 80119e2:	4630      	mov	r0, r6
 80119e4:	f000 fb72 	bl	80120cc <run_xrce_session>
 80119e8:	b12c      	cbz	r4, 80119f6 <rmw_destroy_subscription+0xba>
 80119ea:	b120      	cbz	r0, 80119f6 <rmw_destroy_subscription+0xba>
 80119ec:	2400      	movs	r4, #0
 80119ee:	4628      	mov	r0, r5
 80119f0:	f000 fa2a 	bl	8011e48 <rmw_uxrce_fini_subscription_memory>
 80119f4:	e7ab      	b.n	801194e <rmw_destroy_subscription+0x12>
 80119f6:	2402      	movs	r4, #2
 80119f8:	e7f9      	b.n	80119ee <rmw_destroy_subscription+0xb2>
 80119fa:	bf00      	nop

080119fc <rmw_take_with_info>:
 80119fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119fe:	4604      	mov	r4, r0
 8011a00:	6800      	ldr	r0, [r0, #0]
 8011a02:	b089      	sub	sp, #36	@ 0x24
 8011a04:	460f      	mov	r7, r1
 8011a06:	4615      	mov	r5, r2
 8011a08:	b128      	cbz	r0, 8011a16 <rmw_take_with_info+0x1a>
 8011a0a:	4b24      	ldr	r3, [pc, #144]	@ (8011a9c <rmw_take_with_info+0xa0>)
 8011a0c:	6819      	ldr	r1, [r3, #0]
 8011a0e:	f7ee fbff 	bl	8000210 <strcmp>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d13e      	bne.n	8011a94 <rmw_take_with_info+0x98>
 8011a16:	b305      	cbz	r5, 8011a5a <rmw_take_with_info+0x5e>
 8011a18:	6864      	ldr	r4, [r4, #4]
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	702b      	strb	r3, [r5, #0]
 8011a1e:	f000 fad7 	bl	8011fd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8011a22:	4620      	mov	r0, r4
 8011a24:	f000 faae 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a28:	4606      	mov	r6, r0
 8011a2a:	b1f0      	cbz	r0, 8011a6a <rmw_take_with_info+0x6e>
 8011a2c:	6881      	ldr	r1, [r0, #8]
 8011a2e:	4668      	mov	r0, sp
 8011a30:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011a34:	3110      	adds	r1, #16
 8011a36:	f7fc fa89 	bl	800df4c <ucdr_init_buffer>
 8011a3a:	69a3      	ldr	r3, [r4, #24]
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	4668      	mov	r0, sp
 8011a42:	4798      	blx	r3
 8011a44:	4631      	mov	r1, r6
 8011a46:	4604      	mov	r4, r0
 8011a48:	4815      	ldr	r0, [pc, #84]	@ (8011aa0 <rmw_take_with_info+0xa4>)
 8011a4a:	f007 fc0f 	bl	801926c <put_memory>
 8011a4e:	702c      	strb	r4, [r5, #0]
 8011a50:	f084 0001 	eor.w	r0, r4, #1
 8011a54:	b2c0      	uxtb	r0, r0
 8011a56:	b009      	add	sp, #36	@ 0x24
 8011a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a5a:	6864      	ldr	r4, [r4, #4]
 8011a5c:	f000 fab8 	bl	8011fd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8011a60:	4620      	mov	r0, r4
 8011a62:	f000 fa8f 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a66:	4605      	mov	r5, r0
 8011a68:	b910      	cbnz	r0, 8011a70 <rmw_take_with_info+0x74>
 8011a6a:	2001      	movs	r0, #1
 8011a6c:	b009      	add	sp, #36	@ 0x24
 8011a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a70:	68a9      	ldr	r1, [r5, #8]
 8011a72:	4668      	mov	r0, sp
 8011a74:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011a78:	3110      	adds	r1, #16
 8011a7a:	f7fc fa67 	bl	800df4c <ucdr_init_buffer>
 8011a7e:	69a3      	ldr	r3, [r4, #24]
 8011a80:	4639      	mov	r1, r7
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	4668      	mov	r0, sp
 8011a86:	4798      	blx	r3
 8011a88:	4629      	mov	r1, r5
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	4804      	ldr	r0, [pc, #16]	@ (8011aa0 <rmw_take_with_info+0xa4>)
 8011a8e:	f007 fbed 	bl	801926c <put_memory>
 8011a92:	e7dd      	b.n	8011a50 <rmw_take_with_info+0x54>
 8011a94:	200c      	movs	r0, #12
 8011a96:	b009      	add	sp, #36	@ 0x24
 8011a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	0801e390 	.word	0x0801e390
 8011aa0:	20011a9c 	.word	0x20011a9c

08011aa4 <rmw_uxrce_transport_init>:
 8011aa4:	b508      	push	{r3, lr}
 8011aa6:	b108      	cbz	r0, 8011aac <rmw_uxrce_transport_init+0x8>
 8011aa8:	f100 0210 	add.w	r2, r0, #16
 8011aac:	b139      	cbz	r1, 8011abe <rmw_uxrce_transport_init+0x1a>
 8011aae:	6949      	ldr	r1, [r1, #20]
 8011ab0:	4610      	mov	r0, r2
 8011ab2:	f001 fb8b 	bl	80131cc <uxr_init_custom_transport>
 8011ab6:	f080 0001 	eor.w	r0, r0, #1
 8011aba:	b2c0      	uxtb	r0, r0
 8011abc:	bd08      	pop	{r3, pc}
 8011abe:	4b04      	ldr	r3, [pc, #16]	@ (8011ad0 <rmw_uxrce_transport_init+0x2c>)
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	6859      	ldr	r1, [r3, #4]
 8011ac4:	f001 fb82 	bl	80131cc <uxr_init_custom_transport>
 8011ac8:	f080 0001 	eor.w	r0, r0, #1
 8011acc:	b2c0      	uxtb	r0, r0
 8011ace:	bd08      	pop	{r3, pc}
 8011ad0:	2000d134 	.word	0x2000d134

08011ad4 <rmw_uros_epoch_nanos>:
 8011ad4:	4b05      	ldr	r3, [pc, #20]	@ (8011aec <rmw_uros_epoch_nanos+0x18>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	b123      	cbz	r3, 8011ae4 <rmw_uros_epoch_nanos+0x10>
 8011ada:	6898      	ldr	r0, [r3, #8]
 8011adc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011ae0:	f001 bf24 	b.w	801392c <uxr_epoch_nanos>
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	4770      	bx	lr
 8011aea:	bf00      	nop
 8011aec:	20011a8c 	.word	0x20011a8c

08011af0 <rmw_uros_set_publisher_session_timeout>:
 8011af0:	b118      	cbz	r0, 8011afa <rmw_uros_set_publisher_session_timeout+0xa>
 8011af2:	6843      	ldr	r3, [r0, #4]
 8011af4:	2000      	movs	r0, #0
 8011af6:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8011af8:	4770      	bx	lr
 8011afa:	200b      	movs	r0, #11
 8011afc:	4770      	bx	lr
 8011afe:	bf00      	nop

08011b00 <rmw_uros_set_context_entity_destroy_session_timeout>:
 8011b00:	b160      	cbz	r0, 8011b1c <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 8011b02:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011b04:	2900      	cmp	r1, #0
 8011b06:	bfd4      	ite	le
 8011b08:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 8011b0c:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 8011b10:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 8011b14:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 8011b18:	2000      	movs	r0, #0
 8011b1a:	4770      	bx	lr
 8011b1c:	200b      	movs	r0, #11
 8011b1e:	4770      	bx	lr

08011b20 <rmw_uxrce_init_service_memory>:
 8011b20:	b1e2      	cbz	r2, 8011b5c <rmw_uxrce_init_service_memory+0x3c>
 8011b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b26:	7b05      	ldrb	r5, [r0, #12]
 8011b28:	4606      	mov	r6, r0
 8011b2a:	b9ad      	cbnz	r5, 8011b58 <rmw_uxrce_init_service_memory+0x38>
 8011b2c:	23c8      	movs	r3, #200	@ 0xc8
 8011b2e:	e9c0 5500 	strd	r5, r5, [r0]
 8011b32:	6083      	str	r3, [r0, #8]
 8011b34:	f240 1301 	movw	r3, #257	@ 0x101
 8011b38:	4617      	mov	r7, r2
 8011b3a:	8183      	strh	r3, [r0, #12]
 8011b3c:	460c      	mov	r4, r1
 8011b3e:	46a8      	mov	r8, r5
 8011b40:	4621      	mov	r1, r4
 8011b42:	4630      	mov	r0, r6
 8011b44:	3501      	adds	r5, #1
 8011b46:	f007 fb91 	bl	801926c <put_memory>
 8011b4a:	42af      	cmp	r7, r5
 8011b4c:	60a4      	str	r4, [r4, #8]
 8011b4e:	f884 800c 	strb.w	r8, [r4, #12]
 8011b52:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011b56:	d1f3      	bne.n	8011b40 <rmw_uxrce_init_service_memory+0x20>
 8011b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b5c:	4770      	bx	lr
 8011b5e:	bf00      	nop

08011b60 <rmw_uxrce_init_client_memory>:
 8011b60:	b1e2      	cbz	r2, 8011b9c <rmw_uxrce_init_client_memory+0x3c>
 8011b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b66:	7b05      	ldrb	r5, [r0, #12]
 8011b68:	4606      	mov	r6, r0
 8011b6a:	b9ad      	cbnz	r5, 8011b98 <rmw_uxrce_init_client_memory+0x38>
 8011b6c:	23c8      	movs	r3, #200	@ 0xc8
 8011b6e:	e9c0 5500 	strd	r5, r5, [r0]
 8011b72:	6083      	str	r3, [r0, #8]
 8011b74:	f240 1301 	movw	r3, #257	@ 0x101
 8011b78:	4617      	mov	r7, r2
 8011b7a:	8183      	strh	r3, [r0, #12]
 8011b7c:	460c      	mov	r4, r1
 8011b7e:	46a8      	mov	r8, r5
 8011b80:	4621      	mov	r1, r4
 8011b82:	4630      	mov	r0, r6
 8011b84:	3501      	adds	r5, #1
 8011b86:	f007 fb71 	bl	801926c <put_memory>
 8011b8a:	42af      	cmp	r7, r5
 8011b8c:	60a4      	str	r4, [r4, #8]
 8011b8e:	f884 800c 	strb.w	r8, [r4, #12]
 8011b92:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011b96:	d1f3      	bne.n	8011b80 <rmw_uxrce_init_client_memory+0x20>
 8011b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop

08011ba0 <rmw_uxrce_init_publisher_memory>:
 8011ba0:	b1e2      	cbz	r2, 8011bdc <rmw_uxrce_init_publisher_memory+0x3c>
 8011ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba6:	7b05      	ldrb	r5, [r0, #12]
 8011ba8:	4606      	mov	r6, r0
 8011baa:	b9ad      	cbnz	r5, 8011bd8 <rmw_uxrce_init_publisher_memory+0x38>
 8011bac:	23d8      	movs	r3, #216	@ 0xd8
 8011bae:	e9c0 5500 	strd	r5, r5, [r0]
 8011bb2:	6083      	str	r3, [r0, #8]
 8011bb4:	f240 1301 	movw	r3, #257	@ 0x101
 8011bb8:	4617      	mov	r7, r2
 8011bba:	8183      	strh	r3, [r0, #12]
 8011bbc:	460c      	mov	r4, r1
 8011bbe:	46a8      	mov	r8, r5
 8011bc0:	4621      	mov	r1, r4
 8011bc2:	4630      	mov	r0, r6
 8011bc4:	3501      	adds	r5, #1
 8011bc6:	f007 fb51 	bl	801926c <put_memory>
 8011bca:	42af      	cmp	r7, r5
 8011bcc:	60a4      	str	r4, [r4, #8]
 8011bce:	f884 800c 	strb.w	r8, [r4, #12]
 8011bd2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011bd6:	d1f3      	bne.n	8011bc0 <rmw_uxrce_init_publisher_memory+0x20>
 8011bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bdc:	4770      	bx	lr
 8011bde:	bf00      	nop

08011be0 <rmw_uxrce_init_subscription_memory>:
 8011be0:	b1e2      	cbz	r2, 8011c1c <rmw_uxrce_init_subscription_memory+0x3c>
 8011be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011be6:	7b05      	ldrb	r5, [r0, #12]
 8011be8:	4606      	mov	r6, r0
 8011bea:	b9ad      	cbnz	r5, 8011c18 <rmw_uxrce_init_subscription_memory+0x38>
 8011bec:	23d8      	movs	r3, #216	@ 0xd8
 8011bee:	e9c0 5500 	strd	r5, r5, [r0]
 8011bf2:	6083      	str	r3, [r0, #8]
 8011bf4:	f240 1301 	movw	r3, #257	@ 0x101
 8011bf8:	4617      	mov	r7, r2
 8011bfa:	8183      	strh	r3, [r0, #12]
 8011bfc:	460c      	mov	r4, r1
 8011bfe:	46a8      	mov	r8, r5
 8011c00:	4621      	mov	r1, r4
 8011c02:	4630      	mov	r0, r6
 8011c04:	3501      	adds	r5, #1
 8011c06:	f007 fb31 	bl	801926c <put_memory>
 8011c0a:	42af      	cmp	r7, r5
 8011c0c:	60a4      	str	r4, [r4, #8]
 8011c0e:	f884 800c 	strb.w	r8, [r4, #12]
 8011c12:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011c16:	d1f3      	bne.n	8011c00 <rmw_uxrce_init_subscription_memory+0x20>
 8011c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c1c:	4770      	bx	lr
 8011c1e:	bf00      	nop

08011c20 <rmw_uxrce_init_node_memory>:
 8011c20:	b1e2      	cbz	r2, 8011c5c <rmw_uxrce_init_node_memory+0x3c>
 8011c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c26:	7b05      	ldrb	r5, [r0, #12]
 8011c28:	4606      	mov	r6, r0
 8011c2a:	b9ad      	cbnz	r5, 8011c58 <rmw_uxrce_init_node_memory+0x38>
 8011c2c:	23a4      	movs	r3, #164	@ 0xa4
 8011c2e:	e9c0 5500 	strd	r5, r5, [r0]
 8011c32:	6083      	str	r3, [r0, #8]
 8011c34:	f240 1301 	movw	r3, #257	@ 0x101
 8011c38:	4617      	mov	r7, r2
 8011c3a:	8183      	strh	r3, [r0, #12]
 8011c3c:	460c      	mov	r4, r1
 8011c3e:	46a8      	mov	r8, r5
 8011c40:	4621      	mov	r1, r4
 8011c42:	4630      	mov	r0, r6
 8011c44:	3501      	adds	r5, #1
 8011c46:	f007 fb11 	bl	801926c <put_memory>
 8011c4a:	42af      	cmp	r7, r5
 8011c4c:	60a4      	str	r4, [r4, #8]
 8011c4e:	f884 800c 	strb.w	r8, [r4, #12]
 8011c52:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011c56:	d1f3      	bne.n	8011c40 <rmw_uxrce_init_node_memory+0x20>
 8011c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop

08011c60 <rmw_uxrce_init_session_memory>:
 8011c60:	b1ea      	cbz	r2, 8011c9e <rmw_uxrce_init_session_memory+0x3e>
 8011c62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c66:	7b05      	ldrb	r5, [r0, #12]
 8011c68:	4606      	mov	r6, r0
 8011c6a:	b9b5      	cbnz	r5, 8011c9a <rmw_uxrce_init_session_memory+0x3a>
 8011c6c:	e9c0 5500 	strd	r5, r5, [r0]
 8011c70:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011c74:	f240 1301 	movw	r3, #257	@ 0x101
 8011c78:	4617      	mov	r7, r2
 8011c7a:	f8c0 8008 	str.w	r8, [r0, #8]
 8011c7e:	460c      	mov	r4, r1
 8011c80:	8183      	strh	r3, [r0, #12]
 8011c82:	46a9      	mov	r9, r5
 8011c84:	4621      	mov	r1, r4
 8011c86:	4630      	mov	r0, r6
 8011c88:	3501      	adds	r5, #1
 8011c8a:	f007 faef 	bl	801926c <put_memory>
 8011c8e:	42af      	cmp	r7, r5
 8011c90:	60a4      	str	r4, [r4, #8]
 8011c92:	f884 900c 	strb.w	r9, [r4, #12]
 8011c96:	4444      	add	r4, r8
 8011c98:	d1f4      	bne.n	8011c84 <rmw_uxrce_init_session_memory+0x24>
 8011c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c9e:	4770      	bx	lr

08011ca0 <rmw_uxrce_init_topic_memory>:
 8011ca0:	b1e2      	cbz	r2, 8011cdc <rmw_uxrce_init_topic_memory+0x3c>
 8011ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca6:	7b05      	ldrb	r5, [r0, #12]
 8011ca8:	4606      	mov	r6, r0
 8011caa:	b9ad      	cbnz	r5, 8011cd8 <rmw_uxrce_init_topic_memory+0x38>
 8011cac:	231c      	movs	r3, #28
 8011cae:	e9c0 5500 	strd	r5, r5, [r0]
 8011cb2:	6083      	str	r3, [r0, #8]
 8011cb4:	f240 1301 	movw	r3, #257	@ 0x101
 8011cb8:	4617      	mov	r7, r2
 8011cba:	8183      	strh	r3, [r0, #12]
 8011cbc:	460c      	mov	r4, r1
 8011cbe:	46a8      	mov	r8, r5
 8011cc0:	4621      	mov	r1, r4
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	3501      	adds	r5, #1
 8011cc6:	f007 fad1 	bl	801926c <put_memory>
 8011cca:	42af      	cmp	r7, r5
 8011ccc:	60a4      	str	r4, [r4, #8]
 8011cce:	f884 800c 	strb.w	r8, [r4, #12]
 8011cd2:	f104 041c 	add.w	r4, r4, #28
 8011cd6:	d1f3      	bne.n	8011cc0 <rmw_uxrce_init_topic_memory+0x20>
 8011cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop

08011ce0 <rmw_uxrce_init_static_input_buffer_memory>:
 8011ce0:	b1ea      	cbz	r2, 8011d1e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce6:	7b05      	ldrb	r5, [r0, #12]
 8011ce8:	4606      	mov	r6, r0
 8011cea:	b9b5      	cbnz	r5, 8011d1a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011cec:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011cf0:	e9c0 5500 	strd	r5, r5, [r0]
 8011cf4:	6083      	str	r3, [r0, #8]
 8011cf6:	f240 1301 	movw	r3, #257	@ 0x101
 8011cfa:	4617      	mov	r7, r2
 8011cfc:	8183      	strh	r3, [r0, #12]
 8011cfe:	460c      	mov	r4, r1
 8011d00:	46a8      	mov	r8, r5
 8011d02:	4621      	mov	r1, r4
 8011d04:	4630      	mov	r0, r6
 8011d06:	3501      	adds	r5, #1
 8011d08:	f007 fab0 	bl	801926c <put_memory>
 8011d0c:	42af      	cmp	r7, r5
 8011d0e:	60a4      	str	r4, [r4, #8]
 8011d10:	f884 800c 	strb.w	r8, [r4, #12]
 8011d14:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011d18:	d1f3      	bne.n	8011d02 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d1e:	4770      	bx	lr

08011d20 <rmw_uxrce_init_init_options_impl_memory>:
 8011d20:	b1e2      	cbz	r2, 8011d5c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d26:	7b05      	ldrb	r5, [r0, #12]
 8011d28:	4606      	mov	r6, r0
 8011d2a:	b9ad      	cbnz	r5, 8011d58 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011d2c:	232c      	movs	r3, #44	@ 0x2c
 8011d2e:	e9c0 5500 	strd	r5, r5, [r0]
 8011d32:	6083      	str	r3, [r0, #8]
 8011d34:	f240 1301 	movw	r3, #257	@ 0x101
 8011d38:	4617      	mov	r7, r2
 8011d3a:	8183      	strh	r3, [r0, #12]
 8011d3c:	460c      	mov	r4, r1
 8011d3e:	46a8      	mov	r8, r5
 8011d40:	4621      	mov	r1, r4
 8011d42:	4630      	mov	r0, r6
 8011d44:	3501      	adds	r5, #1
 8011d46:	f007 fa91 	bl	801926c <put_memory>
 8011d4a:	42af      	cmp	r7, r5
 8011d4c:	60a4      	str	r4, [r4, #8]
 8011d4e:	f884 800c 	strb.w	r8, [r4, #12]
 8011d52:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011d56:	d1f3      	bne.n	8011d40 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop

08011d60 <rmw_uxrce_init_wait_set_memory>:
 8011d60:	b1e2      	cbz	r2, 8011d9c <rmw_uxrce_init_wait_set_memory+0x3c>
 8011d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d66:	7b05      	ldrb	r5, [r0, #12]
 8011d68:	4606      	mov	r6, r0
 8011d6a:	b9ad      	cbnz	r5, 8011d98 <rmw_uxrce_init_wait_set_memory+0x38>
 8011d6c:	231c      	movs	r3, #28
 8011d6e:	e9c0 5500 	strd	r5, r5, [r0]
 8011d72:	6083      	str	r3, [r0, #8]
 8011d74:	f240 1301 	movw	r3, #257	@ 0x101
 8011d78:	4617      	mov	r7, r2
 8011d7a:	8183      	strh	r3, [r0, #12]
 8011d7c:	460c      	mov	r4, r1
 8011d7e:	46a8      	mov	r8, r5
 8011d80:	4621      	mov	r1, r4
 8011d82:	4630      	mov	r0, r6
 8011d84:	3501      	adds	r5, #1
 8011d86:	f007 fa71 	bl	801926c <put_memory>
 8011d8a:	42af      	cmp	r7, r5
 8011d8c:	60a4      	str	r4, [r4, #8]
 8011d8e:	f884 800c 	strb.w	r8, [r4, #12]
 8011d92:	f104 041c 	add.w	r4, r4, #28
 8011d96:	d1f3      	bne.n	8011d80 <rmw_uxrce_init_wait_set_memory+0x20>
 8011d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d9c:	4770      	bx	lr
 8011d9e:	bf00      	nop

08011da0 <rmw_uxrce_init_guard_condition_memory>:
 8011da0:	b1e2      	cbz	r2, 8011ddc <rmw_uxrce_init_guard_condition_memory+0x3c>
 8011da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da6:	7b05      	ldrb	r5, [r0, #12]
 8011da8:	4606      	mov	r6, r0
 8011daa:	b9ad      	cbnz	r5, 8011dd8 <rmw_uxrce_init_guard_condition_memory+0x38>
 8011dac:	2320      	movs	r3, #32
 8011dae:	e9c0 5500 	strd	r5, r5, [r0]
 8011db2:	6083      	str	r3, [r0, #8]
 8011db4:	f240 1301 	movw	r3, #257	@ 0x101
 8011db8:	4617      	mov	r7, r2
 8011dba:	8183      	strh	r3, [r0, #12]
 8011dbc:	460c      	mov	r4, r1
 8011dbe:	46a8      	mov	r8, r5
 8011dc0:	4621      	mov	r1, r4
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	3501      	adds	r5, #1
 8011dc6:	f007 fa51 	bl	801926c <put_memory>
 8011dca:	42af      	cmp	r7, r5
 8011dcc:	60a4      	str	r4, [r4, #8]
 8011dce:	f884 800c 	strb.w	r8, [r4, #12]
 8011dd2:	f104 0420 	add.w	r4, r4, #32
 8011dd6:	d1f3      	bne.n	8011dc0 <rmw_uxrce_init_guard_condition_memory+0x20>
 8011dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop

08011de0 <rmw_uxrce_fini_session_memory>:
 8011de0:	4601      	mov	r1, r0
 8011de2:	4801      	ldr	r0, [pc, #4]	@ (8011de8 <rmw_uxrce_fini_session_memory+0x8>)
 8011de4:	f007 ba42 	b.w	801926c <put_memory>
 8011de8:	20011a8c 	.word	0x20011a8c

08011dec <rmw_uxrce_fini_node_memory>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	4604      	mov	r4, r0
 8011df0:	6800      	ldr	r0, [r0, #0]
 8011df2:	b128      	cbz	r0, 8011e00 <rmw_uxrce_fini_node_memory+0x14>
 8011df4:	4b07      	ldr	r3, [pc, #28]	@ (8011e14 <rmw_uxrce_fini_node_memory+0x28>)
 8011df6:	6819      	ldr	r1, [r3, #0]
 8011df8:	f7ee fa0a 	bl	8000210 <strcmp>
 8011dfc:	b940      	cbnz	r0, 8011e10 <rmw_uxrce_fini_node_memory+0x24>
 8011dfe:	6020      	str	r0, [r4, #0]
 8011e00:	6861      	ldr	r1, [r4, #4]
 8011e02:	b129      	cbz	r1, 8011e10 <rmw_uxrce_fini_node_memory+0x24>
 8011e04:	2500      	movs	r5, #0
 8011e06:	4804      	ldr	r0, [pc, #16]	@ (8011e18 <rmw_uxrce_fini_node_memory+0x2c>)
 8011e08:	610d      	str	r5, [r1, #16]
 8011e0a:	f007 fa2f 	bl	801926c <put_memory>
 8011e0e:	6065      	str	r5, [r4, #4]
 8011e10:	bd38      	pop	{r3, r4, r5, pc}
 8011e12:	bf00      	nop
 8011e14:	0801e390 	.word	0x0801e390
 8011e18:	20011a5c 	.word	0x20011a5c

08011e1c <rmw_uxrce_fini_publisher_memory>:
 8011e1c:	b510      	push	{r4, lr}
 8011e1e:	4604      	mov	r4, r0
 8011e20:	6800      	ldr	r0, [r0, #0]
 8011e22:	b128      	cbz	r0, 8011e30 <rmw_uxrce_fini_publisher_memory+0x14>
 8011e24:	4b06      	ldr	r3, [pc, #24]	@ (8011e40 <rmw_uxrce_fini_publisher_memory+0x24>)
 8011e26:	6819      	ldr	r1, [r3, #0]
 8011e28:	f7ee f9f2 	bl	8000210 <strcmp>
 8011e2c:	b938      	cbnz	r0, 8011e3e <rmw_uxrce_fini_publisher_memory+0x22>
 8011e2e:	6020      	str	r0, [r4, #0]
 8011e30:	6861      	ldr	r1, [r4, #4]
 8011e32:	b121      	cbz	r1, 8011e3e <rmw_uxrce_fini_publisher_memory+0x22>
 8011e34:	4803      	ldr	r0, [pc, #12]	@ (8011e44 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011e36:	f007 fa19 	bl	801926c <put_memory>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	6063      	str	r3, [r4, #4]
 8011e3e:	bd10      	pop	{r4, pc}
 8011e40:	0801e390 	.word	0x0801e390
 8011e44:	20011a6c 	.word	0x20011a6c

08011e48 <rmw_uxrce_fini_subscription_memory>:
 8011e48:	b510      	push	{r4, lr}
 8011e4a:	4604      	mov	r4, r0
 8011e4c:	6800      	ldr	r0, [r0, #0]
 8011e4e:	b128      	cbz	r0, 8011e5c <rmw_uxrce_fini_subscription_memory+0x14>
 8011e50:	4b06      	ldr	r3, [pc, #24]	@ (8011e6c <rmw_uxrce_fini_subscription_memory+0x24>)
 8011e52:	6819      	ldr	r1, [r3, #0]
 8011e54:	f7ee f9dc 	bl	8000210 <strcmp>
 8011e58:	b938      	cbnz	r0, 8011e6a <rmw_uxrce_fini_subscription_memory+0x22>
 8011e5a:	6020      	str	r0, [r4, #0]
 8011e5c:	6861      	ldr	r1, [r4, #4]
 8011e5e:	b121      	cbz	r1, 8011e6a <rmw_uxrce_fini_subscription_memory+0x22>
 8011e60:	4803      	ldr	r0, [pc, #12]	@ (8011e70 <rmw_uxrce_fini_subscription_memory+0x28>)
 8011e62:	f007 fa03 	bl	801926c <put_memory>
 8011e66:	2300      	movs	r3, #0
 8011e68:	6063      	str	r3, [r4, #4]
 8011e6a:	bd10      	pop	{r4, pc}
 8011e6c:	0801e390 	.word	0x0801e390
 8011e70:	20011aac 	.word	0x20011aac

08011e74 <rmw_uxrce_fini_service_memory>:
 8011e74:	b510      	push	{r4, lr}
 8011e76:	4604      	mov	r4, r0
 8011e78:	6800      	ldr	r0, [r0, #0]
 8011e7a:	b128      	cbz	r0, 8011e88 <rmw_uxrce_fini_service_memory+0x14>
 8011e7c:	4b06      	ldr	r3, [pc, #24]	@ (8011e98 <rmw_uxrce_fini_service_memory+0x24>)
 8011e7e:	6819      	ldr	r1, [r3, #0]
 8011e80:	f7ee f9c6 	bl	8000210 <strcmp>
 8011e84:	b938      	cbnz	r0, 8011e96 <rmw_uxrce_fini_service_memory+0x22>
 8011e86:	6020      	str	r0, [r4, #0]
 8011e88:	6861      	ldr	r1, [r4, #4]
 8011e8a:	b121      	cbz	r1, 8011e96 <rmw_uxrce_fini_service_memory+0x22>
 8011e8c:	4803      	ldr	r0, [pc, #12]	@ (8011e9c <rmw_uxrce_fini_service_memory+0x28>)
 8011e8e:	f007 f9ed 	bl	801926c <put_memory>
 8011e92:	2300      	movs	r3, #0
 8011e94:	6063      	str	r3, [r4, #4]
 8011e96:	bd10      	pop	{r4, pc}
 8011e98:	0801e390 	.word	0x0801e390
 8011e9c:	20011a7c 	.word	0x20011a7c

08011ea0 <rmw_uxrce_fini_client_memory>:
 8011ea0:	b510      	push	{r4, lr}
 8011ea2:	4604      	mov	r4, r0
 8011ea4:	6800      	ldr	r0, [r0, #0]
 8011ea6:	b128      	cbz	r0, 8011eb4 <rmw_uxrce_fini_client_memory+0x14>
 8011ea8:	4b06      	ldr	r3, [pc, #24]	@ (8011ec4 <rmw_uxrce_fini_client_memory+0x24>)
 8011eaa:	6819      	ldr	r1, [r3, #0]
 8011eac:	f7ee f9b0 	bl	8000210 <strcmp>
 8011eb0:	b938      	cbnz	r0, 8011ec2 <rmw_uxrce_fini_client_memory+0x22>
 8011eb2:	6020      	str	r0, [r4, #0]
 8011eb4:	6861      	ldr	r1, [r4, #4]
 8011eb6:	b121      	cbz	r1, 8011ec2 <rmw_uxrce_fini_client_memory+0x22>
 8011eb8:	4803      	ldr	r0, [pc, #12]	@ (8011ec8 <rmw_uxrce_fini_client_memory+0x28>)
 8011eba:	f007 f9d7 	bl	801926c <put_memory>
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	6063      	str	r3, [r4, #4]
 8011ec2:	bd10      	pop	{r4, pc}
 8011ec4:	0801e390 	.word	0x0801e390
 8011ec8:	2000d18c 	.word	0x2000d18c

08011ecc <rmw_uxrce_fini_topic_memory>:
 8011ecc:	b510      	push	{r4, lr}
 8011ece:	4604      	mov	r4, r0
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	4803      	ldr	r0, [pc, #12]	@ (8011ee0 <rmw_uxrce_fini_topic_memory+0x14>)
 8011ed4:	f007 f9ca 	bl	801926c <put_memory>
 8011ed8:	2300      	movs	r3, #0
 8011eda:	61a3      	str	r3, [r4, #24]
 8011edc:	bd10      	pop	{r4, pc}
 8011ede:	bf00      	nop
 8011ee0:	20011abc 	.word	0x20011abc

08011ee4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011ee4:	b082      	sub	sp, #8
 8011ee6:	b530      	push	{r4, r5, lr}
 8011ee8:	4925      	ldr	r1, [pc, #148]	@ (8011f80 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011eea:	680d      	ldr	r5, [r1, #0]
 8011eec:	ac03      	add	r4, sp, #12
 8011eee:	e884 000c 	stmia.w	r4, {r2, r3}
 8011ef2:	461c      	mov	r4, r3
 8011ef4:	2d00      	cmp	r5, #0
 8011ef6:	d041      	beq.n	8011f7c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011ef8:	462b      	mov	r3, r5
 8011efa:	2100      	movs	r1, #0
 8011efc:	689a      	ldr	r2, [r3, #8]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011f04:	4290      	cmp	r0, r2
 8011f06:	bf08      	it	eq
 8011f08:	3101      	addeq	r1, #1
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d1f6      	bne.n	8011efc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011f0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011f12:	2b02      	cmp	r3, #2
 8011f14:	d029      	beq.n	8011f6a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011f16:	d907      	bls.n	8011f28 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011f18:	2b03      	cmp	r3, #3
 8011f1a:	d005      	beq.n	8011f28 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011f1c:	2100      	movs	r1, #0
 8011f1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f22:	4608      	mov	r0, r1
 8011f24:	b002      	add	sp, #8
 8011f26:	4770      	bx	lr
 8011f28:	b314      	cbz	r4, 8011f70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011f2a:	428c      	cmp	r4, r1
 8011f2c:	d820      	bhi.n	8011f70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011f2e:	2d00      	cmp	r5, #0
 8011f30:	d0f4      	beq.n	8011f1c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011f32:	2100      	movs	r1, #0
 8011f34:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011f38:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011f3c:	e002      	b.n	8011f44 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8011f3e:	686d      	ldr	r5, [r5, #4]
 8011f40:	2d00      	cmp	r5, #0
 8011f42:	d0ec      	beq.n	8011f1e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011f44:	68ab      	ldr	r3, [r5, #8]
 8011f46:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011f4a:	4290      	cmp	r0, r2
 8011f4c:	d1f7      	bne.n	8011f3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f4e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8011f52:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011f56:	4562      	cmp	r2, ip
 8011f58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011f5c:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011f60:	daed      	bge.n	8011f3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f62:	4694      	mov	ip, r2
 8011f64:	461c      	mov	r4, r3
 8011f66:	4629      	mov	r1, r5
 8011f68:	e7e9      	b.n	8011f3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f6a:	b10c      	cbz	r4, 8011f70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011f6c:	428c      	cmp	r4, r1
 8011f6e:	d9d5      	bls.n	8011f1c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f74:	4802      	ldr	r0, [pc, #8]	@ (8011f80 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011f76:	b002      	add	sp, #8
 8011f78:	f007 b968 	b.w	801924c <get_memory>
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	e7c6      	b.n	8011f0e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8011f80:	20011a9c 	.word	0x20011a9c

08011f84 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8011f84:	4b11      	ldr	r3, [pc, #68]	@ (8011fcc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	b530      	push	{r4, r5, lr}
 8011f8a:	b1e3      	cbz	r3, 8011fc6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011f8c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011f90:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011f94:	2400      	movs	r4, #0
 8011f96:	e001      	b.n	8011f9c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	b193      	cbz	r3, 8011fc2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8011f9c:	689a      	ldr	r2, [r3, #8]
 8011f9e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8011fa2:	4288      	cmp	r0, r1
 8011fa4:	d1f8      	bne.n	8011f98 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011fa6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8011faa:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8011fae:	4571      	cmp	r1, lr
 8011fb0:	eb72 050c 	sbcs.w	r5, r2, ip
 8011fb4:	daf0      	bge.n	8011f98 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011fb6:	461c      	mov	r4, r3
 8011fb8:	685b      	ldr	r3, [r3, #4]
 8011fba:	468e      	mov	lr, r1
 8011fbc:	4694      	mov	ip, r2
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1ec      	bne.n	8011f9c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	bd30      	pop	{r4, r5, pc}
 8011fc6:	461c      	mov	r4, r3
 8011fc8:	4620      	mov	r0, r4
 8011fca:	bd30      	pop	{r4, r5, pc}
 8011fcc:	20011a9c 	.word	0x20011a9c

08011fd0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	4b3c      	ldr	r3, [pc, #240]	@ (80120c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011fd6:	ed2d 8b06 	vpush	{d8-d10}
 8011fda:	681f      	ldr	r7, [r3, #0]
 8011fdc:	b08d      	sub	sp, #52	@ 0x34
 8011fde:	f7ff fd79 	bl	8011ad4 <rmw_uros_epoch_nanos>
 8011fe2:	2f00      	cmp	r7, #0
 8011fe4:	d05d      	beq.n	80120a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011fe6:	46b8      	mov	r8, r7
 8011fe8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 80120b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011fec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011ff0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011ff4:	2b04      	cmp	r3, #4
 8011ff6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 80120b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011ffa:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 80120c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011ffe:	4681      	mov	r9, r0
 8012000:	468a      	mov	sl, r1
 8012002:	ac04      	add	r4, sp, #16
 8012004:	d03f      	beq.n	8012086 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8012006:	2b05      	cmp	r3, #5
 8012008:	d044      	beq.n	8012094 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801200a:	2b03      	cmp	r3, #3
 801200c:	d03b      	beq.n	8012086 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801200e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8012012:	ed8d ab06 	vstr	d10, [sp, #24]
 8012016:	ed8d 8b08 	vstr	d8, [sp, #32]
 801201a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 801201e:	ab08      	add	r3, sp, #32
 8012020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012022:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012026:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801202a:	f006 ff2d 	bl	8018e88 <rmw_time_equal>
 801202e:	b118      	cbz	r0, 8012038 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8012030:	ed8d 9b04 	vstr	d9, [sp, #16]
 8012034:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801203c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8012040:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8012044:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8012048:	f006 ff72 	bl	8018f30 <rmw_time_total_nsec>
 801204c:	1830      	adds	r0, r6, r0
 801204e:	eb47 0101 	adc.w	r1, r7, r1
 8012052:	4548      	cmp	r0, r9
 8012054:	eb71 030a 	sbcs.w	r3, r1, sl
 8012058:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 801205c:	db05      	blt.n	801206a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 801205e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8012062:	4591      	cmp	r9, r2
 8012064:	eb7a 0303 	sbcs.w	r3, sl, r3
 8012068:	da03      	bge.n	8012072 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 801206a:	4817      	ldr	r0, [pc, #92]	@ (80120c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801206c:	4641      	mov	r1, r8
 801206e:	f007 f8fd 	bl	801926c <put_memory>
 8012072:	f1bb 0f00 	cmp.w	fp, #0
 8012076:	d014      	beq.n	80120a2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8012078:	46d8      	mov	r8, fp
 801207a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801207e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8012082:	2b04      	cmp	r3, #4
 8012084:	d1bf      	bne.n	8012006 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8012086:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801208a:	3340      	adds	r3, #64	@ 0x40
 801208c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801208e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012092:	e7c0      	b.n	8012016 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8012094:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012098:	3348      	adds	r3, #72	@ 0x48
 801209a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801209c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80120a0:	e7b9      	b.n	8012016 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80120a2:	b00d      	add	sp, #52	@ 0x34
 80120a4:	ecbd 8b06 	vpop	{d8-d10}
 80120a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ac:	f3af 8000 	nop.w
	...
 80120b8:	00000001 	.word	0x00000001
 80120bc:	00000000 	.word	0x00000000
 80120c0:	0000001e 	.word	0x0000001e
 80120c4:	00000000 	.word	0x00000000
 80120c8:	20011a9c 	.word	0x20011a9c

080120cc <run_xrce_session>:
 80120cc:	b510      	push	{r4, lr}
 80120ce:	788c      	ldrb	r4, [r1, #2]
 80120d0:	b086      	sub	sp, #24
 80120d2:	2c01      	cmp	r4, #1
 80120d4:	f8ad 200e 	strh.w	r2, [sp, #14]
 80120d8:	d00c      	beq.n	80120f4 <run_xrce_session+0x28>
 80120da:	4619      	mov	r1, r3
 80120dc:	2301      	movs	r3, #1
 80120de:	9300      	str	r3, [sp, #0]
 80120e0:	f10d 020e 	add.w	r2, sp, #14
 80120e4:	f10d 0317 	add.w	r3, sp, #23
 80120e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120ec:	f002 f80e 	bl	801410c <uxr_run_session_until_all_status>
 80120f0:	b006      	add	sp, #24
 80120f2:	bd10      	pop	{r4, pc}
 80120f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120f8:	f001 fc22 	bl	8013940 <uxr_flash_output_streams>
 80120fc:	4620      	mov	r0, r4
 80120fe:	b006      	add	sp, #24
 8012100:	bd10      	pop	{r4, pc}
 8012102:	bf00      	nop

08012104 <convert_qos_profile>:
 8012104:	7a4a      	ldrb	r2, [r1, #9]
 8012106:	f891 c008 	ldrb.w	ip, [r1, #8]
 801210a:	2a02      	cmp	r2, #2
 801210c:	bf18      	it	ne
 801210e:	2200      	movne	r2, #0
 8012110:	7002      	strb	r2, [r0, #0]
 8012112:	780a      	ldrb	r2, [r1, #0]
 8012114:	8889      	ldrh	r1, [r1, #4]
 8012116:	8081      	strh	r1, [r0, #4]
 8012118:	f1ac 0c02 	sub.w	ip, ip, #2
 801211c:	f1a2 0202 	sub.w	r2, r2, #2
 8012120:	fabc fc8c 	clz	ip, ip
 8012124:	fab2 f282 	clz	r2, r2
 8012128:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801212c:	0952      	lsrs	r2, r2, #5
 801212e:	f880 c001 	strb.w	ip, [r0, #1]
 8012132:	7082      	strb	r2, [r0, #2]
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop

08012138 <generate_type_name>:
 8012138:	b530      	push	{r4, r5, lr}
 801213a:	2300      	movs	r3, #0
 801213c:	700b      	strb	r3, [r1, #0]
 801213e:	6803      	ldr	r3, [r0, #0]
 8012140:	b087      	sub	sp, #28
 8012142:	4614      	mov	r4, r2
 8012144:	b1d3      	cbz	r3, 801217c <generate_type_name+0x44>
 8012146:	4a0f      	ldr	r2, [pc, #60]	@ (8012184 <generate_type_name+0x4c>)
 8012148:	4615      	mov	r5, r2
 801214a:	9203      	str	r2, [sp, #12]
 801214c:	9500      	str	r5, [sp, #0]
 801214e:	6842      	ldr	r2, [r0, #4]
 8012150:	480d      	ldr	r0, [pc, #52]	@ (8012188 <generate_type_name+0x50>)
 8012152:	9001      	str	r0, [sp, #4]
 8012154:	4608      	mov	r0, r1
 8012156:	490d      	ldr	r1, [pc, #52]	@ (801218c <generate_type_name+0x54>)
 8012158:	9204      	str	r2, [sp, #16]
 801215a:	9105      	str	r1, [sp, #20]
 801215c:	9102      	str	r1, [sp, #8]
 801215e:	4a0c      	ldr	r2, [pc, #48]	@ (8012190 <generate_type_name+0x58>)
 8012160:	4621      	mov	r1, r4
 8012162:	f00a f85b 	bl	801c21c <sniprintf>
 8012166:	2800      	cmp	r0, #0
 8012168:	db05      	blt.n	8012176 <generate_type_name+0x3e>
 801216a:	4284      	cmp	r4, r0
 801216c:	bfd4      	ite	le
 801216e:	2000      	movle	r0, #0
 8012170:	2001      	movgt	r0, #1
 8012172:	b007      	add	sp, #28
 8012174:	bd30      	pop	{r4, r5, pc}
 8012176:	2000      	movs	r0, #0
 8012178:	b007      	add	sp, #28
 801217a:	bd30      	pop	{r4, r5, pc}
 801217c:	4b05      	ldr	r3, [pc, #20]	@ (8012194 <generate_type_name+0x5c>)
 801217e:	4a01      	ldr	r2, [pc, #4]	@ (8012184 <generate_type_name+0x4c>)
 8012180:	461d      	mov	r5, r3
 8012182:	e7e2      	b.n	801214a <generate_type_name+0x12>
 8012184:	0801d9e4 	.word	0x0801d9e4
 8012188:	0801d9fc 	.word	0x0801d9fc
 801218c:	0801d9f8 	.word	0x0801d9f8
 8012190:	0801d9e8 	.word	0x0801d9e8
 8012194:	0801dc0c 	.word	0x0801dc0c

08012198 <generate_topic_name>:
 8012198:	b510      	push	{r4, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	4614      	mov	r4, r2
 801219e:	9000      	str	r0, [sp, #0]
 80121a0:	4b08      	ldr	r3, [pc, #32]	@ (80121c4 <generate_topic_name+0x2c>)
 80121a2:	4a09      	ldr	r2, [pc, #36]	@ (80121c8 <generate_topic_name+0x30>)
 80121a4:	4608      	mov	r0, r1
 80121a6:	4621      	mov	r1, r4
 80121a8:	f00a f838 	bl	801c21c <sniprintf>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	db05      	blt.n	80121bc <generate_topic_name+0x24>
 80121b0:	4284      	cmp	r4, r0
 80121b2:	bfd4      	ite	le
 80121b4:	2000      	movle	r0, #0
 80121b6:	2001      	movgt	r0, #1
 80121b8:	b002      	add	sp, #8
 80121ba:	bd10      	pop	{r4, pc}
 80121bc:	2000      	movs	r0, #0
 80121be:	b002      	add	sp, #8
 80121c0:	bd10      	pop	{r4, pc}
 80121c2:	bf00      	nop
 80121c4:	0801dff0 	.word	0x0801dff0
 80121c8:	0801d6b4 	.word	0x0801d6b4

080121cc <is_uxrce_rmw_identifier_valid>:
 80121cc:	b510      	push	{r4, lr}
 80121ce:	4604      	mov	r4, r0
 80121d0:	b140      	cbz	r0, 80121e4 <is_uxrce_rmw_identifier_valid+0x18>
 80121d2:	f007 f8a3 	bl	801931c <rmw_get_implementation_identifier>
 80121d6:	4601      	mov	r1, r0
 80121d8:	4620      	mov	r0, r4
 80121da:	f7ee f819 	bl	8000210 <strcmp>
 80121de:	fab0 f080 	clz	r0, r0
 80121e2:	0940      	lsrs	r0, r0, #5
 80121e4:	bd10      	pop	{r4, pc}
 80121e6:	bf00      	nop

080121e8 <get_message_typesupport_handle>:
 80121e8:	6883      	ldr	r3, [r0, #8]
 80121ea:	4718      	bx	r3

080121ec <get_message_typesupport_handle_function>:
 80121ec:	b510      	push	{r4, lr}
 80121ee:	4604      	mov	r4, r0
 80121f0:	6800      	ldr	r0, [r0, #0]
 80121f2:	f7ee f80d 	bl	8000210 <strcmp>
 80121f6:	2800      	cmp	r0, #0
 80121f8:	bf0c      	ite	eq
 80121fa:	4620      	moveq	r0, r4
 80121fc:	2000      	movne	r0, #0
 80121fe:	bd10      	pop	{r4, pc}

08012200 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012204:	6805      	ldr	r5, [r0, #0]
 8012206:	4604      	mov	r4, r0
 8012208:	4628      	mov	r0, r5
 801220a:	460e      	mov	r6, r1
 801220c:	f7ee f800 	bl	8000210 <strcmp>
 8012210:	b1c8      	cbz	r0, 8012246 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8012212:	4b11      	ldr	r3, [pc, #68]	@ (8012258 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	429d      	cmp	r5, r3
 8012218:	d112      	bne.n	8012240 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801221a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801221e:	f8d8 4000 	ldr.w	r4, [r8]
 8012222:	b16c      	cbz	r4, 8012240 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012224:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012228:	2700      	movs	r7, #0
 801222a:	3d04      	subs	r5, #4
 801222c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012230:	4631      	mov	r1, r6
 8012232:	f7ed ffed 	bl	8000210 <strcmp>
 8012236:	00bb      	lsls	r3, r7, #2
 8012238:	b140      	cbz	r0, 801224c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801223a:	3701      	adds	r7, #1
 801223c:	42bc      	cmp	r4, r7
 801223e:	d1f5      	bne.n	801222c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012240:	2000      	movs	r0, #0
 8012242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012246:	4620      	mov	r0, r4
 8012248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801224c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012254:	58d3      	ldr	r3, [r2, r3]
 8012256:	4718      	bx	r3
 8012258:	2000030c 	.word	0x2000030c

0801225c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801225c:	4b04      	ldr	r3, [pc, #16]	@ (8012270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	b10a      	cbz	r2, 8012266 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8012262:	4803      	ldr	r0, [pc, #12]	@ (8012270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012264:	4770      	bx	lr
 8012266:	4a03      	ldr	r2, [pc, #12]	@ (8012274 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8012268:	4801      	ldr	r0, [pc, #4]	@ (8012270 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801226a:	6812      	ldr	r2, [r2, #0]
 801226c:	601a      	str	r2, [r3, #0]
 801226e:	4770      	bx	lr
 8012270:	2000031c 	.word	0x2000031c
 8012274:	2000030c 	.word	0x2000030c

08012278 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012278:	4a02      	ldr	r2, [pc, #8]	@ (8012284 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 801227a:	4b03      	ldr	r3, [pc, #12]	@ (8012288 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 801227c:	6812      	ldr	r2, [r2, #0]
 801227e:	601a      	str	r2, [r3, #0]
 8012280:	4770      	bx	lr
 8012282:	bf00      	nop
 8012284:	2000030c 	.word	0x2000030c
 8012288:	2000031c 	.word	0x2000031c

0801228c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 801228c:	f007 bc3c 	b.w	8019b08 <std_msgs__msg__Header__init>

08012290 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012290:	f007 bc5e 	b.w	8019b50 <std_msgs__msg__Header__fini>

08012294 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012294:	b508      	push	{r3, lr}
 8012296:	f000 f8eb 	bl	8012470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801229a:	4b06      	ldr	r3, [pc, #24]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801229c:	4906      	ldr	r1, [pc, #24]	@ (80122b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801229e:	681a      	ldr	r2, [r3, #0]
 80122a0:	60c8      	str	r0, [r1, #12]
 80122a2:	b10a      	cbz	r2, 80122a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 80122a4:	4803      	ldr	r0, [pc, #12]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80122a6:	bd08      	pop	{r3, pc}
 80122a8:	4a04      	ldr	r2, [pc, #16]	@ (80122bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 80122aa:	4802      	ldr	r0, [pc, #8]	@ (80122b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 80122ac:	6812      	ldr	r2, [r2, #0]
 80122ae:	601a      	str	r2, [r3, #0]
 80122b0:	bd08      	pop	{r3, pc}
 80122b2:	bf00      	nop
 80122b4:	200003a0 	.word	0x200003a0
 80122b8:	20000328 	.word	0x20000328
 80122bc:	20000310 	.word	0x20000310

080122c0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 80122c0:	f007 bc52 	b.w	8019b68 <std_msgs__msg__Int32__init>

080122c4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80122c4:	f007 bc54 	b.w	8019b70 <std_msgs__msg__Int32__fini>

080122c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80122c8:	4b04      	ldr	r3, [pc, #16]	@ (80122dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	b10a      	cbz	r2, 80122d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80122ce:	4803      	ldr	r0, [pc, #12]	@ (80122dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80122d0:	4770      	bx	lr
 80122d2:	4a03      	ldr	r2, [pc, #12]	@ (80122e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80122d4:	4801      	ldr	r0, [pc, #4]	@ (80122dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80122d6:	6812      	ldr	r2, [r2, #0]
 80122d8:	601a      	str	r2, [r3, #0]
 80122da:	4770      	bx	lr
 80122dc:	200003e8 	.word	0x200003e8
 80122e0:	20000310 	.word	0x20000310

080122e4 <_Header__max_serialized_size>:
 80122e4:	b500      	push	{lr}
 80122e6:	b083      	sub	sp, #12
 80122e8:	2301      	movs	r3, #1
 80122ea:	2100      	movs	r1, #0
 80122ec:	f10d 0007 	add.w	r0, sp, #7
 80122f0:	f88d 3007 	strb.w	r3, [sp, #7]
 80122f4:	f000 f91a 	bl	801252c <max_serialized_size_builtin_interfaces__msg__Time>
 80122f8:	b003      	add	sp, #12
 80122fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80122fe:	bf00      	nop

08012300 <get_serialized_size_std_msgs__msg__Header>:
 8012300:	b570      	push	{r4, r5, r6, lr}
 8012302:	4605      	mov	r5, r0
 8012304:	b168      	cbz	r0, 8012322 <get_serialized_size_std_msgs__msg__Header+0x22>
 8012306:	460c      	mov	r4, r1
 8012308:	f000 f8c0 	bl	801248c <get_serialized_size_builtin_interfaces__msg__Time>
 801230c:	1826      	adds	r6, r4, r0
 801230e:	2104      	movs	r1, #4
 8012310:	4630      	mov	r0, r6
 8012312:	f7fb fe1f 	bl	800df54 <ucdr_alignment>
 8012316:	68e9      	ldr	r1, [r5, #12]
 8012318:	f1c4 0405 	rsb	r4, r4, #5
 801231c:	440c      	add	r4, r1
 801231e:	4404      	add	r4, r0
 8012320:	19a0      	adds	r0, r4, r6
 8012322:	bd70      	pop	{r4, r5, r6, pc}

08012324 <_Header__cdr_deserialize>:
 8012324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012326:	460c      	mov	r4, r1
 8012328:	b083      	sub	sp, #12
 801232a:	b1e1      	cbz	r1, 8012366 <_Header__cdr_deserialize+0x42>
 801232c:	4606      	mov	r6, r0
 801232e:	f000 f911 	bl	8012554 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012332:	6843      	ldr	r3, [r0, #4]
 8012334:	4621      	mov	r1, r4
 8012336:	68db      	ldr	r3, [r3, #12]
 8012338:	4630      	mov	r0, r6
 801233a:	4798      	blx	r3
 801233c:	6927      	ldr	r7, [r4, #16]
 801233e:	68a1      	ldr	r1, [r4, #8]
 8012340:	ab01      	add	r3, sp, #4
 8012342:	463a      	mov	r2, r7
 8012344:	4630      	mov	r0, r6
 8012346:	f000 fc6f 	bl	8012c28 <ucdr_deserialize_sequence_char>
 801234a:	9b01      	ldr	r3, [sp, #4]
 801234c:	4605      	mov	r5, r0
 801234e:	b920      	cbnz	r0, 801235a <_Header__cdr_deserialize+0x36>
 8012350:	429f      	cmp	r7, r3
 8012352:	d30c      	bcc.n	801236e <_Header__cdr_deserialize+0x4a>
 8012354:	4628      	mov	r0, r5
 8012356:	b003      	add	sp, #12
 8012358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801235a:	b103      	cbz	r3, 801235e <_Header__cdr_deserialize+0x3a>
 801235c:	3b01      	subs	r3, #1
 801235e:	4628      	mov	r0, r5
 8012360:	60e3      	str	r3, [r4, #12]
 8012362:	b003      	add	sp, #12
 8012364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012366:	460d      	mov	r5, r1
 8012368:	4628      	mov	r0, r5
 801236a:	b003      	add	sp, #12
 801236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801236e:	2101      	movs	r1, #1
 8012370:	75b0      	strb	r0, [r6, #22]
 8012372:	7571      	strb	r1, [r6, #21]
 8012374:	4630      	mov	r0, r6
 8012376:	60e5      	str	r5, [r4, #12]
 8012378:	f7fb fe02 	bl	800df80 <ucdr_align_to>
 801237c:	4630      	mov	r0, r6
 801237e:	9901      	ldr	r1, [sp, #4]
 8012380:	f7fb fe34 	bl	800dfec <ucdr_advance_buffer>
 8012384:	4628      	mov	r0, r5
 8012386:	b003      	add	sp, #12
 8012388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801238a:	bf00      	nop

0801238c <_Header__cdr_serialize>:
 801238c:	b1f8      	cbz	r0, 80123ce <_Header__cdr_serialize+0x42>
 801238e:	b570      	push	{r4, r5, r6, lr}
 8012390:	4604      	mov	r4, r0
 8012392:	460d      	mov	r5, r1
 8012394:	f000 f8de 	bl	8012554 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012398:	6843      	ldr	r3, [r0, #4]
 801239a:	4629      	mov	r1, r5
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	4620      	mov	r0, r4
 80123a0:	4798      	blx	r3
 80123a2:	68a6      	ldr	r6, [r4, #8]
 80123a4:	b156      	cbz	r6, 80123bc <_Header__cdr_serialize+0x30>
 80123a6:	4630      	mov	r0, r6
 80123a8:	f7ed ff3c 	bl	8000224 <strlen>
 80123ac:	4631      	mov	r1, r6
 80123ae:	60e0      	str	r0, [r4, #12]
 80123b0:	1c42      	adds	r2, r0, #1
 80123b2:	4628      	mov	r0, r5
 80123b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123b8:	f000 bc24 	b.w	8012c04 <ucdr_serialize_sequence_char>
 80123bc:	4630      	mov	r0, r6
 80123be:	60e0      	str	r0, [r4, #12]
 80123c0:	4632      	mov	r2, r6
 80123c2:	4631      	mov	r1, r6
 80123c4:	4628      	mov	r0, r5
 80123c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123ca:	f000 bc1b 	b.w	8012c04 <ucdr_serialize_sequence_char>
 80123ce:	4770      	bx	lr

080123d0 <_Header__get_serialized_size>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	4604      	mov	r4, r0
 80123d4:	b150      	cbz	r0, 80123ec <_Header__get_serialized_size+0x1c>
 80123d6:	2100      	movs	r1, #0
 80123d8:	f000 f858 	bl	801248c <get_serialized_size_builtin_interfaces__msg__Time>
 80123dc:	2104      	movs	r1, #4
 80123de:	4605      	mov	r5, r0
 80123e0:	f7fb fdb8 	bl	800df54 <ucdr_alignment>
 80123e4:	68e2      	ldr	r2, [r4, #12]
 80123e6:	3205      	adds	r2, #5
 80123e8:	1953      	adds	r3, r2, r5
 80123ea:	4418      	add	r0, r3
 80123ec:	bd38      	pop	{r3, r4, r5, pc}
 80123ee:	bf00      	nop

080123f0 <max_serialized_size_std_msgs__msg__Header>:
 80123f0:	b510      	push	{r4, lr}
 80123f2:	2301      	movs	r3, #1
 80123f4:	4604      	mov	r4, r0
 80123f6:	7003      	strb	r3, [r0, #0]
 80123f8:	f000 f898 	bl	801252c <max_serialized_size_builtin_interfaces__msg__Time>
 80123fc:	2300      	movs	r3, #0
 80123fe:	7023      	strb	r3, [r4, #0]
 8012400:	bd10      	pop	{r4, pc}
 8012402:	bf00      	nop

08012404 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8012404:	4800      	ldr	r0, [pc, #0]	@ (8012408 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8012406:	4770      	bx	lr
 8012408:	200003f4 	.word	0x200003f4

0801240c <_Int32__max_serialized_size>:
 801240c:	b508      	push	{r3, lr}
 801240e:	2104      	movs	r1, #4
 8012410:	2000      	movs	r0, #0
 8012412:	f7fb fd9f 	bl	800df54 <ucdr_alignment>
 8012416:	3004      	adds	r0, #4
 8012418:	bd08      	pop	{r3, pc}
 801241a:	bf00      	nop

0801241c <_Int32__cdr_deserialize>:
 801241c:	b109      	cbz	r1, 8012422 <_Int32__cdr_deserialize+0x6>
 801241e:	f7fb b97b 	b.w	800d718 <ucdr_deserialize_int32_t>
 8012422:	4608      	mov	r0, r1
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop

08012428 <get_serialized_size_std_msgs__msg__Int32>:
 8012428:	b138      	cbz	r0, 801243a <get_serialized_size_std_msgs__msg__Int32+0x12>
 801242a:	b508      	push	{r3, lr}
 801242c:	460b      	mov	r3, r1
 801242e:	4618      	mov	r0, r3
 8012430:	2104      	movs	r1, #4
 8012432:	f7fb fd8f 	bl	800df54 <ucdr_alignment>
 8012436:	3004      	adds	r0, #4
 8012438:	bd08      	pop	{r3, pc}
 801243a:	4770      	bx	lr

0801243c <_Int32__cdr_serialize>:
 801243c:	460a      	mov	r2, r1
 801243e:	b118      	cbz	r0, 8012448 <_Int32__cdr_serialize+0xc>
 8012440:	6801      	ldr	r1, [r0, #0]
 8012442:	4610      	mov	r0, r2
 8012444:	f7fb b8d0 	b.w	800d5e8 <ucdr_serialize_int32_t>
 8012448:	4770      	bx	lr
 801244a:	bf00      	nop

0801244c <_Int32__get_serialized_size>:
 801244c:	b130      	cbz	r0, 801245c <_Int32__get_serialized_size+0x10>
 801244e:	b508      	push	{r3, lr}
 8012450:	2104      	movs	r1, #4
 8012452:	2000      	movs	r0, #0
 8012454:	f7fb fd7e 	bl	800df54 <ucdr_alignment>
 8012458:	3004      	adds	r0, #4
 801245a:	bd08      	pop	{r3, pc}
 801245c:	4770      	bx	lr
 801245e:	bf00      	nop

08012460 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012460:	4800      	ldr	r0, [pc, #0]	@ (8012464 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8012462:	4770      	bx	lr
 8012464:	2000041c 	.word	0x2000041c

08012468 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012468:	f007 bb84 	b.w	8019b74 <builtin_interfaces__msg__Time__init>

0801246c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 801246c:	f007 bb86 	b.w	8019b7c <builtin_interfaces__msg__Time__fini>

08012470 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012470:	4b04      	ldr	r3, [pc, #16]	@ (8012484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	b10a      	cbz	r2, 801247a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8012476:	4803      	ldr	r0, [pc, #12]	@ (8012484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012478:	4770      	bx	lr
 801247a:	4a03      	ldr	r2, [pc, #12]	@ (8012488 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 801247c:	4801      	ldr	r0, [pc, #4]	@ (8012484 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801247e:	6812      	ldr	r2, [r2, #0]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	4770      	bx	lr
 8012484:	200004bc 	.word	0x200004bc
 8012488:	20000310 	.word	0x20000310

0801248c <get_serialized_size_builtin_interfaces__msg__Time>:
 801248c:	b180      	cbz	r0, 80124b0 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 801248e:	b538      	push	{r3, r4, r5, lr}
 8012490:	460d      	mov	r5, r1
 8012492:	4628      	mov	r0, r5
 8012494:	2104      	movs	r1, #4
 8012496:	f7fb fd5d 	bl	800df54 <ucdr_alignment>
 801249a:	1d2b      	adds	r3, r5, #4
 801249c:	181c      	adds	r4, r3, r0
 801249e:	2104      	movs	r1, #4
 80124a0:	4620      	mov	r0, r4
 80124a2:	f7fb fd57 	bl	800df54 <ucdr_alignment>
 80124a6:	f1c5 0504 	rsb	r5, r5, #4
 80124aa:	4428      	add	r0, r5
 80124ac:	4420      	add	r0, r4
 80124ae:	bd38      	pop	{r3, r4, r5, pc}
 80124b0:	4770      	bx	lr
 80124b2:	bf00      	nop

080124b4 <_Time__cdr_deserialize>:
 80124b4:	b538      	push	{r3, r4, r5, lr}
 80124b6:	460c      	mov	r4, r1
 80124b8:	b141      	cbz	r1, 80124cc <_Time__cdr_deserialize+0x18>
 80124ba:	4605      	mov	r5, r0
 80124bc:	f7fb f92c 	bl	800d718 <ucdr_deserialize_int32_t>
 80124c0:	1d21      	adds	r1, r4, #4
 80124c2:	4628      	mov	r0, r5
 80124c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c8:	f7fa bda4 	b.w	800d014 <ucdr_deserialize_uint32_t>
 80124cc:	4608      	mov	r0, r1
 80124ce:	bd38      	pop	{r3, r4, r5, pc}

080124d0 <_Time__cdr_serialize>:
 80124d0:	b160      	cbz	r0, 80124ec <_Time__cdr_serialize+0x1c>
 80124d2:	b538      	push	{r3, r4, r5, lr}
 80124d4:	460d      	mov	r5, r1
 80124d6:	4604      	mov	r4, r0
 80124d8:	6801      	ldr	r1, [r0, #0]
 80124da:	4628      	mov	r0, r5
 80124dc:	f7fb f884 	bl	800d5e8 <ucdr_serialize_int32_t>
 80124e0:	6861      	ldr	r1, [r4, #4]
 80124e2:	4628      	mov	r0, r5
 80124e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124e8:	f7fa bc64 	b.w	800cdb4 <ucdr_serialize_uint32_t>
 80124ec:	4770      	bx	lr
 80124ee:	bf00      	nop

080124f0 <_Time__get_serialized_size>:
 80124f0:	b160      	cbz	r0, 801250c <_Time__get_serialized_size+0x1c>
 80124f2:	b510      	push	{r4, lr}
 80124f4:	2104      	movs	r1, #4
 80124f6:	2000      	movs	r0, #0
 80124f8:	f7fb fd2c 	bl	800df54 <ucdr_alignment>
 80124fc:	1d04      	adds	r4, r0, #4
 80124fe:	2104      	movs	r1, #4
 8012500:	4620      	mov	r0, r4
 8012502:	f7fb fd27 	bl	800df54 <ucdr_alignment>
 8012506:	3004      	adds	r0, #4
 8012508:	4420      	add	r0, r4
 801250a:	bd10      	pop	{r4, pc}
 801250c:	4770      	bx	lr
 801250e:	bf00      	nop

08012510 <_Time__max_serialized_size>:
 8012510:	b510      	push	{r4, lr}
 8012512:	2104      	movs	r1, #4
 8012514:	2000      	movs	r0, #0
 8012516:	f7fb fd1d 	bl	800df54 <ucdr_alignment>
 801251a:	1d04      	adds	r4, r0, #4
 801251c:	2104      	movs	r1, #4
 801251e:	4620      	mov	r0, r4
 8012520:	f7fb fd18 	bl	800df54 <ucdr_alignment>
 8012524:	3004      	adds	r0, #4
 8012526:	4420      	add	r0, r4
 8012528:	bd10      	pop	{r4, pc}
 801252a:	bf00      	nop

0801252c <max_serialized_size_builtin_interfaces__msg__Time>:
 801252c:	b538      	push	{r3, r4, r5, lr}
 801252e:	460c      	mov	r4, r1
 8012530:	2301      	movs	r3, #1
 8012532:	7003      	strb	r3, [r0, #0]
 8012534:	2104      	movs	r1, #4
 8012536:	4620      	mov	r0, r4
 8012538:	f7fb fd0c 	bl	800df54 <ucdr_alignment>
 801253c:	1d25      	adds	r5, r4, #4
 801253e:	4405      	add	r5, r0
 8012540:	2104      	movs	r1, #4
 8012542:	4628      	mov	r0, r5
 8012544:	f7fb fd06 	bl	800df54 <ucdr_alignment>
 8012548:	f1c4 0404 	rsb	r4, r4, #4
 801254c:	4420      	add	r0, r4
 801254e:	4428      	add	r0, r5
 8012550:	bd38      	pop	{r3, r4, r5, pc}
 8012552:	bf00      	nop

08012554 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012554:	4800      	ldr	r0, [pc, #0]	@ (8012558 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8012556:	4770      	bx	lr
 8012558:	200004c8 	.word	0x200004c8

0801255c <geometry_msgs__msg__Twist__init>:
 801255c:	b570      	push	{r4, r5, r6, lr}
 801255e:	4605      	mov	r5, r0
 8012560:	b1a8      	cbz	r0, 801258e <geometry_msgs__msg__Twist__init+0x32>
 8012562:	f000 f82b 	bl	80125bc <geometry_msgs__msg__Vector3__init>
 8012566:	4604      	mov	r4, r0
 8012568:	b140      	cbz	r0, 801257c <geometry_msgs__msg__Twist__init+0x20>
 801256a:	f105 0618 	add.w	r6, r5, #24
 801256e:	4630      	mov	r0, r6
 8012570:	f000 f824 	bl	80125bc <geometry_msgs__msg__Vector3__init>
 8012574:	4604      	mov	r4, r0
 8012576:	b168      	cbz	r0, 8012594 <geometry_msgs__msg__Twist__init+0x38>
 8012578:	4620      	mov	r0, r4
 801257a:	bd70      	pop	{r4, r5, r6, pc}
 801257c:	4628      	mov	r0, r5
 801257e:	f000 f821 	bl	80125c4 <geometry_msgs__msg__Vector3__fini>
 8012582:	f105 0018 	add.w	r0, r5, #24
 8012586:	f000 f81d 	bl	80125c4 <geometry_msgs__msg__Vector3__fini>
 801258a:	4620      	mov	r0, r4
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	4604      	mov	r4, r0
 8012590:	4620      	mov	r0, r4
 8012592:	bd70      	pop	{r4, r5, r6, pc}
 8012594:	4628      	mov	r0, r5
 8012596:	f000 f815 	bl	80125c4 <geometry_msgs__msg__Vector3__fini>
 801259a:	4630      	mov	r0, r6
 801259c:	f000 f812 	bl	80125c4 <geometry_msgs__msg__Vector3__fini>
 80125a0:	e7ea      	b.n	8012578 <geometry_msgs__msg__Twist__init+0x1c>
 80125a2:	bf00      	nop

080125a4 <geometry_msgs__msg__Twist__fini>:
 80125a4:	b148      	cbz	r0, 80125ba <geometry_msgs__msg__Twist__fini+0x16>
 80125a6:	b510      	push	{r4, lr}
 80125a8:	4604      	mov	r4, r0
 80125aa:	f000 f80b 	bl	80125c4 <geometry_msgs__msg__Vector3__fini>
 80125ae:	f104 0018 	add.w	r0, r4, #24
 80125b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125b6:	f000 b805 	b.w	80125c4 <geometry_msgs__msg__Vector3__fini>
 80125ba:	4770      	bx	lr

080125bc <geometry_msgs__msg__Vector3__init>:
 80125bc:	3800      	subs	r0, #0
 80125be:	bf18      	it	ne
 80125c0:	2001      	movne	r0, #1
 80125c2:	4770      	bx	lr

080125c4 <geometry_msgs__msg__Vector3__fini>:
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop

080125c8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 80125c8:	2024      	movs	r0, #36	@ 0x24
 80125ca:	4770      	bx	lr

080125cc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 80125cc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125d0:	4770      	bx	lr
 80125d2:	bf00      	nop

080125d4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 80125d4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80125d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125dc:	e9c2 0100 	strd	r0, r1, [r2]
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop

080125e4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 80125e4:	e9d2 2300 	ldrd	r2, r3, [r2]
 80125e8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80125ec:	e9c1 2300 	strd	r2, r3, [r1]
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop

080125f4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 80125f4:	f007 bac4 	b.w	8019b80 <geometry_msgs__msg__PoseWithCovariance__init>

080125f8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 80125f8:	f007 bad4 	b.w	8019ba4 <geometry_msgs__msg__PoseWithCovariance__fini>

080125fc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 80125fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop

08012604 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8012604:	b508      	push	{r3, lr}
 8012606:	f007 faeb 	bl	8019be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 801260a:	4b06      	ldr	r3, [pc, #24]	@ (8012624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 801260c:	4906      	ldr	r1, [pc, #24]	@ (8012628 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	60c8      	str	r0, [r1, #12]
 8012612:	b10a      	cbz	r2, 8012618 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 8012614:	4803      	ldr	r0, [pc, #12]	@ (8012624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 8012616:	bd08      	pop	{r3, pc}
 8012618:	4a04      	ldr	r2, [pc, #16]	@ (801262c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 801261a:	4802      	ldr	r0, [pc, #8]	@ (8012624 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 801261c:	6812      	ldr	r2, [r2, #0]
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	bd08      	pop	{r3, pc}
 8012622:	bf00      	nop
 8012624:	20000568 	.word	0x20000568
 8012628:	200004f0 	.word	0x200004f0
 801262c:	20000310 	.word	0x20000310

08012630 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 8012630:	2024      	movs	r0, #36	@ 0x24
 8012632:	4770      	bx	lr

08012634 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 8012634:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012638:	4770      	bx	lr
 801263a:	bf00      	nop

0801263c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 801263c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012644:	e9c2 0100 	strd	r0, r1, [r2]
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop

0801264c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 801264c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012650:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012654:	e9c1 2300 	strd	r2, r3, [r1]
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop

0801265c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 801265c:	f007 baa6 	b.w	8019bac <geometry_msgs__msg__TwistWithCovariance__init>

08012660 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 8012660:	f007 bab6 	b.w	8019bd0 <geometry_msgs__msg__TwistWithCovariance__fini>

08012664 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 8012664:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012668:	4770      	bx	lr
 801266a:	bf00      	nop

0801266c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 801266c:	b508      	push	{r3, lr}
 801266e:	f7fa f82f 	bl	800c6d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012672:	4b06      	ldr	r3, [pc, #24]	@ (801268c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8012674:	4906      	ldr	r1, [pc, #24]	@ (8012690 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	60c8      	str	r0, [r1, #12]
 801267a:	b10a      	cbz	r2, 8012680 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 801267c:	4803      	ldr	r0, [pc, #12]	@ (801268c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 801267e:	bd08      	pop	{r3, pc}
 8012680:	4a04      	ldr	r2, [pc, #16]	@ (8012694 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 8012682:	4802      	ldr	r0, [pc, #8]	@ (801268c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8012684:	6812      	ldr	r2, [r2, #0]
 8012686:	601a      	str	r2, [r3, #0]
 8012688:	bd08      	pop	{r3, pc}
 801268a:	bf00      	nop
 801268c:	200005ec 	.word	0x200005ec
 8012690:	20000574 	.word	0x20000574
 8012694:	20000310 	.word	0x20000310

08012698 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	b158      	cbz	r0, 80126b4 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 801269c:	460d      	mov	r5, r1
 801269e:	f007 fac9 	bl	8019c34 <get_serialized_size_geometry_msgs__msg__Pose>
 80126a2:	182c      	adds	r4, r5, r0
 80126a4:	2108      	movs	r1, #8
 80126a6:	4620      	mov	r0, r4
 80126a8:	f7fb fc54 	bl	800df54 <ucdr_alignment>
 80126ac:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 80126b0:	4428      	add	r0, r5
 80126b2:	4420      	add	r0, r4
 80126b4:	bd38      	pop	{r3, r4, r5, pc}
 80126b6:	bf00      	nop

080126b8 <_PoseWithCovariance__cdr_deserialize>:
 80126b8:	b538      	push	{r3, r4, r5, lr}
 80126ba:	460c      	mov	r4, r1
 80126bc:	b179      	cbz	r1, 80126de <_PoseWithCovariance__cdr_deserialize+0x26>
 80126be:	4605      	mov	r5, r0
 80126c0:	f007 fb28 	bl	8019d14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80126c4:	6843      	ldr	r3, [r0, #4]
 80126c6:	4621      	mov	r1, r4
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	4628      	mov	r0, r5
 80126cc:	4798      	blx	r3
 80126ce:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80126d2:	4628      	mov	r0, r5
 80126d4:	2224      	movs	r2, #36	@ 0x24
 80126d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126da:	f000 ba3d 	b.w	8012b58 <ucdr_deserialize_array_double>
 80126de:	4608      	mov	r0, r1
 80126e0:	bd38      	pop	{r3, r4, r5, pc}
 80126e2:	bf00      	nop

080126e4 <_PoseWithCovariance__cdr_serialize>:
 80126e4:	b188      	cbz	r0, 801270a <_PoseWithCovariance__cdr_serialize+0x26>
 80126e6:	b538      	push	{r3, r4, r5, lr}
 80126e8:	460d      	mov	r5, r1
 80126ea:	4604      	mov	r4, r0
 80126ec:	f007 fb12 	bl	8019d14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80126f0:	6843      	ldr	r3, [r0, #4]
 80126f2:	4629      	mov	r1, r5
 80126f4:	689b      	ldr	r3, [r3, #8]
 80126f6:	4620      	mov	r0, r4
 80126f8:	4798      	blx	r3
 80126fa:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80126fe:	4628      	mov	r0, r5
 8012700:	2224      	movs	r2, #36	@ 0x24
 8012702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012706:	f000 b9d3 	b.w	8012ab0 <ucdr_serialize_array_double>
 801270a:	4770      	bx	lr

0801270c <_PoseWithCovariance__get_serialized_size>:
 801270c:	b158      	cbz	r0, 8012726 <_PoseWithCovariance__get_serialized_size+0x1a>
 801270e:	b510      	push	{r4, lr}
 8012710:	2100      	movs	r1, #0
 8012712:	f007 fa8f 	bl	8019c34 <get_serialized_size_geometry_msgs__msg__Pose>
 8012716:	2108      	movs	r1, #8
 8012718:	4604      	mov	r4, r0
 801271a:	f7fb fc1b 	bl	800df54 <ucdr_alignment>
 801271e:	4420      	add	r0, r4
 8012720:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012724:	bd10      	pop	{r4, pc}
 8012726:	4770      	bx	lr

08012728 <_PoseWithCovariance__max_serialized_size>:
 8012728:	b510      	push	{r4, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	2301      	movs	r3, #1
 801272e:	2100      	movs	r1, #0
 8012730:	f10d 0007 	add.w	r0, sp, #7
 8012734:	f88d 3007 	strb.w	r3, [sp, #7]
 8012738:	f007 fade 	bl	8019cf8 <max_serialized_size_geometry_msgs__msg__Pose>
 801273c:	2108      	movs	r1, #8
 801273e:	4604      	mov	r4, r0
 8012740:	f7fb fc08 	bl	800df54 <ucdr_alignment>
 8012744:	4420      	add	r0, r4
 8012746:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801274a:	b002      	add	sp, #8
 801274c:	bd10      	pop	{r4, pc}
 801274e:	bf00      	nop

08012750 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012750:	b538      	push	{r3, r4, r5, lr}
 8012752:	2301      	movs	r3, #1
 8012754:	7003      	strb	r3, [r0, #0]
 8012756:	460c      	mov	r4, r1
 8012758:	f007 face 	bl	8019cf8 <max_serialized_size_geometry_msgs__msg__Pose>
 801275c:	1825      	adds	r5, r4, r0
 801275e:	2108      	movs	r1, #8
 8012760:	4628      	mov	r0, r5
 8012762:	f7fb fbf7 	bl	800df54 <ucdr_alignment>
 8012766:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 801276a:	4420      	add	r0, r4
 801276c:	4428      	add	r0, r5
 801276e:	bd38      	pop	{r3, r4, r5, pc}

08012770 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8012770:	4800      	ldr	r0, [pc, #0]	@ (8012774 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 8012772:	4770      	bx	lr
 8012774:	200005f8 	.word	0x200005f8

08012778 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	b158      	cbz	r0, 8012794 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 801277c:	460d      	mov	r5, r1
 801277e:	f7f9 ffd1 	bl	800c724 <get_serialized_size_geometry_msgs__msg__Twist>
 8012782:	182c      	adds	r4, r5, r0
 8012784:	2108      	movs	r1, #8
 8012786:	4620      	mov	r0, r4
 8012788:	f7fb fbe4 	bl	800df54 <ucdr_alignment>
 801278c:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8012790:	4428      	add	r0, r5
 8012792:	4420      	add	r0, r4
 8012794:	bd38      	pop	{r3, r4, r5, pc}
 8012796:	bf00      	nop

08012798 <_TwistWithCovariance__cdr_deserialize>:
 8012798:	b538      	push	{r3, r4, r5, lr}
 801279a:	460c      	mov	r4, r1
 801279c:	b179      	cbz	r1, 80127be <_TwistWithCovariance__cdr_deserialize+0x26>
 801279e:	4605      	mov	r5, r0
 80127a0:	f7fa f830 	bl	800c804 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80127a4:	6843      	ldr	r3, [r0, #4]
 80127a6:	4621      	mov	r1, r4
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	4628      	mov	r0, r5
 80127ac:	4798      	blx	r3
 80127ae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80127b2:	4628      	mov	r0, r5
 80127b4:	2224      	movs	r2, #36	@ 0x24
 80127b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ba:	f000 b9cd 	b.w	8012b58 <ucdr_deserialize_array_double>
 80127be:	4608      	mov	r0, r1
 80127c0:	bd38      	pop	{r3, r4, r5, pc}
 80127c2:	bf00      	nop

080127c4 <_TwistWithCovariance__cdr_serialize>:
 80127c4:	b188      	cbz	r0, 80127ea <_TwistWithCovariance__cdr_serialize+0x26>
 80127c6:	b538      	push	{r3, r4, r5, lr}
 80127c8:	460d      	mov	r5, r1
 80127ca:	4604      	mov	r4, r0
 80127cc:	f7fa f81a 	bl	800c804 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80127d0:	6843      	ldr	r3, [r0, #4]
 80127d2:	4629      	mov	r1, r5
 80127d4:	689b      	ldr	r3, [r3, #8]
 80127d6:	4620      	mov	r0, r4
 80127d8:	4798      	blx	r3
 80127da:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80127de:	4628      	mov	r0, r5
 80127e0:	2224      	movs	r2, #36	@ 0x24
 80127e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127e6:	f000 b963 	b.w	8012ab0 <ucdr_serialize_array_double>
 80127ea:	4770      	bx	lr

080127ec <_TwistWithCovariance__get_serialized_size>:
 80127ec:	b158      	cbz	r0, 8012806 <_TwistWithCovariance__get_serialized_size+0x1a>
 80127ee:	b510      	push	{r4, lr}
 80127f0:	2100      	movs	r1, #0
 80127f2:	f7f9 ff97 	bl	800c724 <get_serialized_size_geometry_msgs__msg__Twist>
 80127f6:	2108      	movs	r1, #8
 80127f8:	4604      	mov	r4, r0
 80127fa:	f7fb fbab 	bl	800df54 <ucdr_alignment>
 80127fe:	4420      	add	r0, r4
 8012800:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012804:	bd10      	pop	{r4, pc}
 8012806:	4770      	bx	lr

08012808 <_TwistWithCovariance__max_serialized_size>:
 8012808:	b510      	push	{r4, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	2301      	movs	r3, #1
 801280e:	2100      	movs	r1, #0
 8012810:	f10d 0007 	add.w	r0, sp, #7
 8012814:	f88d 3007 	strb.w	r3, [sp, #7]
 8012818:	f7f9 ffe6 	bl	800c7e8 <max_serialized_size_geometry_msgs__msg__Twist>
 801281c:	2108      	movs	r1, #8
 801281e:	4604      	mov	r4, r0
 8012820:	f7fb fb98 	bl	800df54 <ucdr_alignment>
 8012824:	4420      	add	r0, r4
 8012826:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 801282a:	b002      	add	sp, #8
 801282c:	bd10      	pop	{r4, pc}
 801282e:	bf00      	nop

08012830 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8012830:	b538      	push	{r3, r4, r5, lr}
 8012832:	2301      	movs	r3, #1
 8012834:	7003      	strb	r3, [r0, #0]
 8012836:	460c      	mov	r4, r1
 8012838:	f7f9 ffd6 	bl	800c7e8 <max_serialized_size_geometry_msgs__msg__Twist>
 801283c:	1825      	adds	r5, r4, r0
 801283e:	2108      	movs	r1, #8
 8012840:	4628      	mov	r0, r5
 8012842:	f7fb fb87 	bl	800df54 <ucdr_alignment>
 8012846:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 801284a:	4420      	add	r0, r4
 801284c:	4428      	add	r0, r5
 801284e:	bd38      	pop	{r3, r4, r5, pc}

08012850 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8012850:	4800      	ldr	r0, [pc, #0]	@ (8012854 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 8012852:	4770      	bx	lr
 8012854:	20000620 	.word	0x20000620

08012858 <ucdr_serialize_endian_array_char>:
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	4619      	mov	r1, r3
 801285e:	461f      	mov	r7, r3
 8012860:	4605      	mov	r5, r0
 8012862:	4690      	mov	r8, r2
 8012864:	f7fb fb1e 	bl	800dea4 <ucdr_check_buffer_available_for>
 8012868:	b9e0      	cbnz	r0, 80128a4 <ucdr_serialize_endian_array_char+0x4c>
 801286a:	463e      	mov	r6, r7
 801286c:	e009      	b.n	8012882 <ucdr_serialize_endian_array_char+0x2a>
 801286e:	68a8      	ldr	r0, [r5, #8]
 8012870:	f009 ff11 	bl	801c696 <memcpy>
 8012874:	68ab      	ldr	r3, [r5, #8]
 8012876:	6928      	ldr	r0, [r5, #16]
 8012878:	4423      	add	r3, r4
 801287a:	4420      	add	r0, r4
 801287c:	1b36      	subs	r6, r6, r4
 801287e:	60ab      	str	r3, [r5, #8]
 8012880:	6128      	str	r0, [r5, #16]
 8012882:	4631      	mov	r1, r6
 8012884:	2201      	movs	r2, #1
 8012886:	4628      	mov	r0, r5
 8012888:	f7fb fb94 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 801288c:	1bb9      	subs	r1, r7, r6
 801288e:	4441      	add	r1, r8
 8012890:	4604      	mov	r4, r0
 8012892:	4602      	mov	r2, r0
 8012894:	2800      	cmp	r0, #0
 8012896:	d1ea      	bne.n	801286e <ucdr_serialize_endian_array_char+0x16>
 8012898:	2301      	movs	r3, #1
 801289a:	7da8      	ldrb	r0, [r5, #22]
 801289c:	756b      	strb	r3, [r5, #21]
 801289e:	4058      	eors	r0, r3
 80128a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128a4:	463a      	mov	r2, r7
 80128a6:	68a8      	ldr	r0, [r5, #8]
 80128a8:	4641      	mov	r1, r8
 80128aa:	f009 fef4 	bl	801c696 <memcpy>
 80128ae:	68aa      	ldr	r2, [r5, #8]
 80128b0:	692b      	ldr	r3, [r5, #16]
 80128b2:	443a      	add	r2, r7
 80128b4:	443b      	add	r3, r7
 80128b6:	60aa      	str	r2, [r5, #8]
 80128b8:	612b      	str	r3, [r5, #16]
 80128ba:	e7ed      	b.n	8012898 <ucdr_serialize_endian_array_char+0x40>

080128bc <ucdr_deserialize_endian_array_char>:
 80128bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128c0:	4619      	mov	r1, r3
 80128c2:	461f      	mov	r7, r3
 80128c4:	4605      	mov	r5, r0
 80128c6:	4690      	mov	r8, r2
 80128c8:	f7fb faec 	bl	800dea4 <ucdr_check_buffer_available_for>
 80128cc:	b9e0      	cbnz	r0, 8012908 <ucdr_deserialize_endian_array_char+0x4c>
 80128ce:	463e      	mov	r6, r7
 80128d0:	e009      	b.n	80128e6 <ucdr_deserialize_endian_array_char+0x2a>
 80128d2:	68a9      	ldr	r1, [r5, #8]
 80128d4:	f009 fedf 	bl	801c696 <memcpy>
 80128d8:	68ab      	ldr	r3, [r5, #8]
 80128da:	6928      	ldr	r0, [r5, #16]
 80128dc:	4423      	add	r3, r4
 80128de:	4420      	add	r0, r4
 80128e0:	1b36      	subs	r6, r6, r4
 80128e2:	60ab      	str	r3, [r5, #8]
 80128e4:	6128      	str	r0, [r5, #16]
 80128e6:	2201      	movs	r2, #1
 80128e8:	4631      	mov	r1, r6
 80128ea:	4628      	mov	r0, r5
 80128ec:	f7fb fb62 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 80128f0:	4604      	mov	r4, r0
 80128f2:	1bb8      	subs	r0, r7, r6
 80128f4:	4440      	add	r0, r8
 80128f6:	4622      	mov	r2, r4
 80128f8:	2c00      	cmp	r4, #0
 80128fa:	d1ea      	bne.n	80128d2 <ucdr_deserialize_endian_array_char+0x16>
 80128fc:	2301      	movs	r3, #1
 80128fe:	7da8      	ldrb	r0, [r5, #22]
 8012900:	756b      	strb	r3, [r5, #21]
 8012902:	4058      	eors	r0, r3
 8012904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012908:	463a      	mov	r2, r7
 801290a:	68a9      	ldr	r1, [r5, #8]
 801290c:	4640      	mov	r0, r8
 801290e:	f009 fec2 	bl	801c696 <memcpy>
 8012912:	68aa      	ldr	r2, [r5, #8]
 8012914:	692b      	ldr	r3, [r5, #16]
 8012916:	443a      	add	r2, r7
 8012918:	443b      	add	r3, r7
 801291a:	60aa      	str	r2, [r5, #8]
 801291c:	612b      	str	r3, [r5, #16]
 801291e:	e7ed      	b.n	80128fc <ucdr_deserialize_endian_array_char+0x40>

08012920 <ucdr_serialize_array_uint8_t>:
 8012920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012924:	4688      	mov	r8, r1
 8012926:	4611      	mov	r1, r2
 8012928:	4617      	mov	r7, r2
 801292a:	4605      	mov	r5, r0
 801292c:	f7fb faba 	bl	800dea4 <ucdr_check_buffer_available_for>
 8012930:	b9e0      	cbnz	r0, 801296c <ucdr_serialize_array_uint8_t+0x4c>
 8012932:	463e      	mov	r6, r7
 8012934:	e009      	b.n	801294a <ucdr_serialize_array_uint8_t+0x2a>
 8012936:	68a8      	ldr	r0, [r5, #8]
 8012938:	f009 fead 	bl	801c696 <memcpy>
 801293c:	68aa      	ldr	r2, [r5, #8]
 801293e:	692b      	ldr	r3, [r5, #16]
 8012940:	4422      	add	r2, r4
 8012942:	4423      	add	r3, r4
 8012944:	1b36      	subs	r6, r6, r4
 8012946:	60aa      	str	r2, [r5, #8]
 8012948:	612b      	str	r3, [r5, #16]
 801294a:	4631      	mov	r1, r6
 801294c:	2201      	movs	r2, #1
 801294e:	4628      	mov	r0, r5
 8012950:	f7fb fb30 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 8012954:	1bb9      	subs	r1, r7, r6
 8012956:	4441      	add	r1, r8
 8012958:	4604      	mov	r4, r0
 801295a:	4602      	mov	r2, r0
 801295c:	2800      	cmp	r0, #0
 801295e:	d1ea      	bne.n	8012936 <ucdr_serialize_array_uint8_t+0x16>
 8012960:	2301      	movs	r3, #1
 8012962:	7da8      	ldrb	r0, [r5, #22]
 8012964:	756b      	strb	r3, [r5, #21]
 8012966:	4058      	eors	r0, r3
 8012968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801296c:	463a      	mov	r2, r7
 801296e:	68a8      	ldr	r0, [r5, #8]
 8012970:	4641      	mov	r1, r8
 8012972:	f009 fe90 	bl	801c696 <memcpy>
 8012976:	68aa      	ldr	r2, [r5, #8]
 8012978:	692b      	ldr	r3, [r5, #16]
 801297a:	443a      	add	r2, r7
 801297c:	443b      	add	r3, r7
 801297e:	60aa      	str	r2, [r5, #8]
 8012980:	612b      	str	r3, [r5, #16]
 8012982:	e7ed      	b.n	8012960 <ucdr_serialize_array_uint8_t+0x40>

08012984 <ucdr_serialize_endian_array_uint8_t>:
 8012984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012988:	4619      	mov	r1, r3
 801298a:	461f      	mov	r7, r3
 801298c:	4605      	mov	r5, r0
 801298e:	4690      	mov	r8, r2
 8012990:	f7fb fa88 	bl	800dea4 <ucdr_check_buffer_available_for>
 8012994:	b9e0      	cbnz	r0, 80129d0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012996:	463e      	mov	r6, r7
 8012998:	e009      	b.n	80129ae <ucdr_serialize_endian_array_uint8_t+0x2a>
 801299a:	68a8      	ldr	r0, [r5, #8]
 801299c:	f009 fe7b 	bl	801c696 <memcpy>
 80129a0:	68ab      	ldr	r3, [r5, #8]
 80129a2:	6928      	ldr	r0, [r5, #16]
 80129a4:	4423      	add	r3, r4
 80129a6:	4420      	add	r0, r4
 80129a8:	1b36      	subs	r6, r6, r4
 80129aa:	60ab      	str	r3, [r5, #8]
 80129ac:	6128      	str	r0, [r5, #16]
 80129ae:	4631      	mov	r1, r6
 80129b0:	2201      	movs	r2, #1
 80129b2:	4628      	mov	r0, r5
 80129b4:	f7fb fafe 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 80129b8:	1bb9      	subs	r1, r7, r6
 80129ba:	4441      	add	r1, r8
 80129bc:	4604      	mov	r4, r0
 80129be:	4602      	mov	r2, r0
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d1ea      	bne.n	801299a <ucdr_serialize_endian_array_uint8_t+0x16>
 80129c4:	2301      	movs	r3, #1
 80129c6:	7da8      	ldrb	r0, [r5, #22]
 80129c8:	756b      	strb	r3, [r5, #21]
 80129ca:	4058      	eors	r0, r3
 80129cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129d0:	463a      	mov	r2, r7
 80129d2:	68a8      	ldr	r0, [r5, #8]
 80129d4:	4641      	mov	r1, r8
 80129d6:	f009 fe5e 	bl	801c696 <memcpy>
 80129da:	68aa      	ldr	r2, [r5, #8]
 80129dc:	692b      	ldr	r3, [r5, #16]
 80129de:	443a      	add	r2, r7
 80129e0:	443b      	add	r3, r7
 80129e2:	60aa      	str	r2, [r5, #8]
 80129e4:	612b      	str	r3, [r5, #16]
 80129e6:	e7ed      	b.n	80129c4 <ucdr_serialize_endian_array_uint8_t+0x40>

080129e8 <ucdr_deserialize_array_uint8_t>:
 80129e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ec:	4688      	mov	r8, r1
 80129ee:	4611      	mov	r1, r2
 80129f0:	4617      	mov	r7, r2
 80129f2:	4605      	mov	r5, r0
 80129f4:	f7fb fa56 	bl	800dea4 <ucdr_check_buffer_available_for>
 80129f8:	b9e0      	cbnz	r0, 8012a34 <ucdr_deserialize_array_uint8_t+0x4c>
 80129fa:	463e      	mov	r6, r7
 80129fc:	e009      	b.n	8012a12 <ucdr_deserialize_array_uint8_t+0x2a>
 80129fe:	68a9      	ldr	r1, [r5, #8]
 8012a00:	f009 fe49 	bl	801c696 <memcpy>
 8012a04:	68aa      	ldr	r2, [r5, #8]
 8012a06:	692b      	ldr	r3, [r5, #16]
 8012a08:	4422      	add	r2, r4
 8012a0a:	4423      	add	r3, r4
 8012a0c:	1b36      	subs	r6, r6, r4
 8012a0e:	60aa      	str	r2, [r5, #8]
 8012a10:	612b      	str	r3, [r5, #16]
 8012a12:	2201      	movs	r2, #1
 8012a14:	4631      	mov	r1, r6
 8012a16:	4628      	mov	r0, r5
 8012a18:	f7fb facc 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	1bb8      	subs	r0, r7, r6
 8012a20:	4440      	add	r0, r8
 8012a22:	4622      	mov	r2, r4
 8012a24:	2c00      	cmp	r4, #0
 8012a26:	d1ea      	bne.n	80129fe <ucdr_deserialize_array_uint8_t+0x16>
 8012a28:	2301      	movs	r3, #1
 8012a2a:	7da8      	ldrb	r0, [r5, #22]
 8012a2c:	756b      	strb	r3, [r5, #21]
 8012a2e:	4058      	eors	r0, r3
 8012a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a34:	463a      	mov	r2, r7
 8012a36:	68a9      	ldr	r1, [r5, #8]
 8012a38:	4640      	mov	r0, r8
 8012a3a:	f009 fe2c 	bl	801c696 <memcpy>
 8012a3e:	68aa      	ldr	r2, [r5, #8]
 8012a40:	692b      	ldr	r3, [r5, #16]
 8012a42:	443a      	add	r2, r7
 8012a44:	443b      	add	r3, r7
 8012a46:	60aa      	str	r2, [r5, #8]
 8012a48:	612b      	str	r3, [r5, #16]
 8012a4a:	e7ed      	b.n	8012a28 <ucdr_deserialize_array_uint8_t+0x40>

08012a4c <ucdr_deserialize_endian_array_uint8_t>:
 8012a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a50:	4619      	mov	r1, r3
 8012a52:	461f      	mov	r7, r3
 8012a54:	4605      	mov	r5, r0
 8012a56:	4690      	mov	r8, r2
 8012a58:	f7fb fa24 	bl	800dea4 <ucdr_check_buffer_available_for>
 8012a5c:	b9e0      	cbnz	r0, 8012a98 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012a5e:	463e      	mov	r6, r7
 8012a60:	e009      	b.n	8012a76 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012a62:	68a9      	ldr	r1, [r5, #8]
 8012a64:	f009 fe17 	bl	801c696 <memcpy>
 8012a68:	68ab      	ldr	r3, [r5, #8]
 8012a6a:	6928      	ldr	r0, [r5, #16]
 8012a6c:	4423      	add	r3, r4
 8012a6e:	4420      	add	r0, r4
 8012a70:	1b36      	subs	r6, r6, r4
 8012a72:	60ab      	str	r3, [r5, #8]
 8012a74:	6128      	str	r0, [r5, #16]
 8012a76:	2201      	movs	r2, #1
 8012a78:	4631      	mov	r1, r6
 8012a7a:	4628      	mov	r0, r5
 8012a7c:	f7fb fa9a 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 8012a80:	4604      	mov	r4, r0
 8012a82:	1bb8      	subs	r0, r7, r6
 8012a84:	4440      	add	r0, r8
 8012a86:	4622      	mov	r2, r4
 8012a88:	2c00      	cmp	r4, #0
 8012a8a:	d1ea      	bne.n	8012a62 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	7da8      	ldrb	r0, [r5, #22]
 8012a90:	756b      	strb	r3, [r5, #21]
 8012a92:	4058      	eors	r0, r3
 8012a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a98:	463a      	mov	r2, r7
 8012a9a:	68a9      	ldr	r1, [r5, #8]
 8012a9c:	4640      	mov	r0, r8
 8012a9e:	f009 fdfa 	bl	801c696 <memcpy>
 8012aa2:	68aa      	ldr	r2, [r5, #8]
 8012aa4:	692b      	ldr	r3, [r5, #16]
 8012aa6:	443a      	add	r2, r7
 8012aa8:	443b      	add	r3, r7
 8012aaa:	60aa      	str	r2, [r5, #8]
 8012aac:	612b      	str	r3, [r5, #16]
 8012aae:	e7ed      	b.n	8012a8c <ucdr_deserialize_endian_array_uint8_t+0x40>

08012ab0 <ucdr_serialize_array_double>:
 8012ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab4:	460e      	mov	r6, r1
 8012ab6:	2108      	movs	r1, #8
 8012ab8:	4604      	mov	r4, r0
 8012aba:	4617      	mov	r7, r2
 8012abc:	f7fb fa52 	bl	800df64 <ucdr_buffer_alignment>
 8012ac0:	4601      	mov	r1, r0
 8012ac2:	4620      	mov	r0, r4
 8012ac4:	7d65      	ldrb	r5, [r4, #21]
 8012ac6:	f7fb fa91 	bl	800dfec <ucdr_advance_buffer>
 8012aca:	7d21      	ldrb	r1, [r4, #20]
 8012acc:	7565      	strb	r5, [r4, #21]
 8012ace:	2901      	cmp	r1, #1
 8012ad0:	d010      	beq.n	8012af4 <ucdr_serialize_array_double+0x44>
 8012ad2:	b157      	cbz	r7, 8012aea <ucdr_serialize_array_double+0x3a>
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	e000      	b.n	8012ada <ucdr_serialize_array_double+0x2a>
 8012ad8:	7d21      	ldrb	r1, [r4, #20]
 8012ada:	ecb6 0b02 	vldmia	r6!, {d0}
 8012ade:	4620      	mov	r0, r4
 8012ae0:	3501      	adds	r5, #1
 8012ae2:	f7fa ff79 	bl	800d9d8 <ucdr_serialize_endian_double>
 8012ae6:	42af      	cmp	r7, r5
 8012ae8:	d1f6      	bne.n	8012ad8 <ucdr_serialize_array_double+0x28>
 8012aea:	7da0      	ldrb	r0, [r4, #22]
 8012aec:	f080 0001 	eor.w	r0, r0, #1
 8012af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af4:	00ff      	lsls	r7, r7, #3
 8012af6:	4639      	mov	r1, r7
 8012af8:	4620      	mov	r0, r4
 8012afa:	f7fb f9d3 	bl	800dea4 <ucdr_check_buffer_available_for>
 8012afe:	b9f8      	cbnz	r0, 8012b40 <ucdr_serialize_array_double+0x90>
 8012b00:	46b8      	mov	r8, r7
 8012b02:	e00a      	b.n	8012b1a <ucdr_serialize_array_double+0x6a>
 8012b04:	68a0      	ldr	r0, [r4, #8]
 8012b06:	f009 fdc6 	bl	801c696 <memcpy>
 8012b0a:	68a2      	ldr	r2, [r4, #8]
 8012b0c:	6923      	ldr	r3, [r4, #16]
 8012b0e:	442a      	add	r2, r5
 8012b10:	442b      	add	r3, r5
 8012b12:	eba8 0805 	sub.w	r8, r8, r5
 8012b16:	60a2      	str	r2, [r4, #8]
 8012b18:	6123      	str	r3, [r4, #16]
 8012b1a:	4641      	mov	r1, r8
 8012b1c:	2208      	movs	r2, #8
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f7fb fa48 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 8012b24:	eba7 0108 	sub.w	r1, r7, r8
 8012b28:	4431      	add	r1, r6
 8012b2a:	4605      	mov	r5, r0
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	2800      	cmp	r0, #0
 8012b30:	d1e8      	bne.n	8012b04 <ucdr_serialize_array_double+0x54>
 8012b32:	7da0      	ldrb	r0, [r4, #22]
 8012b34:	2308      	movs	r3, #8
 8012b36:	7563      	strb	r3, [r4, #21]
 8012b38:	f080 0001 	eor.w	r0, r0, #1
 8012b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b40:	463a      	mov	r2, r7
 8012b42:	68a0      	ldr	r0, [r4, #8]
 8012b44:	4631      	mov	r1, r6
 8012b46:	f009 fda6 	bl	801c696 <memcpy>
 8012b4a:	68a2      	ldr	r2, [r4, #8]
 8012b4c:	6923      	ldr	r3, [r4, #16]
 8012b4e:	443a      	add	r2, r7
 8012b50:	441f      	add	r7, r3
 8012b52:	60a2      	str	r2, [r4, #8]
 8012b54:	6127      	str	r7, [r4, #16]
 8012b56:	e7ec      	b.n	8012b32 <ucdr_serialize_array_double+0x82>

08012b58 <ucdr_deserialize_array_double>:
 8012b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b5c:	460e      	mov	r6, r1
 8012b5e:	2108      	movs	r1, #8
 8012b60:	4604      	mov	r4, r0
 8012b62:	4617      	mov	r7, r2
 8012b64:	f7fb f9fe 	bl	800df64 <ucdr_buffer_alignment>
 8012b68:	4601      	mov	r1, r0
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	7d65      	ldrb	r5, [r4, #21]
 8012b6e:	f7fb fa3d 	bl	800dfec <ucdr_advance_buffer>
 8012b72:	7d21      	ldrb	r1, [r4, #20]
 8012b74:	7565      	strb	r5, [r4, #21]
 8012b76:	2901      	cmp	r1, #1
 8012b78:	d011      	beq.n	8012b9e <ucdr_deserialize_array_double+0x46>
 8012b7a:	b15f      	cbz	r7, 8012b94 <ucdr_deserialize_array_double+0x3c>
 8012b7c:	2500      	movs	r5, #0
 8012b7e:	e000      	b.n	8012b82 <ucdr_deserialize_array_double+0x2a>
 8012b80:	7d21      	ldrb	r1, [r4, #20]
 8012b82:	4632      	mov	r2, r6
 8012b84:	4620      	mov	r0, r4
 8012b86:	3501      	adds	r5, #1
 8012b88:	f7fb f8be 	bl	800dd08 <ucdr_deserialize_endian_double>
 8012b8c:	42af      	cmp	r7, r5
 8012b8e:	f106 0608 	add.w	r6, r6, #8
 8012b92:	d1f5      	bne.n	8012b80 <ucdr_deserialize_array_double+0x28>
 8012b94:	7da0      	ldrb	r0, [r4, #22]
 8012b96:	f080 0001 	eor.w	r0, r0, #1
 8012b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b9e:	00ff      	lsls	r7, r7, #3
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f7fb f97e 	bl	800dea4 <ucdr_check_buffer_available_for>
 8012ba8:	b9f8      	cbnz	r0, 8012bea <ucdr_deserialize_array_double+0x92>
 8012baa:	46b8      	mov	r8, r7
 8012bac:	e00a      	b.n	8012bc4 <ucdr_deserialize_array_double+0x6c>
 8012bae:	68a1      	ldr	r1, [r4, #8]
 8012bb0:	f009 fd71 	bl	801c696 <memcpy>
 8012bb4:	68a2      	ldr	r2, [r4, #8]
 8012bb6:	6923      	ldr	r3, [r4, #16]
 8012bb8:	442a      	add	r2, r5
 8012bba:	442b      	add	r3, r5
 8012bbc:	eba8 0805 	sub.w	r8, r8, r5
 8012bc0:	60a2      	str	r2, [r4, #8]
 8012bc2:	6123      	str	r3, [r4, #16]
 8012bc4:	2208      	movs	r2, #8
 8012bc6:	4641      	mov	r1, r8
 8012bc8:	4620      	mov	r0, r4
 8012bca:	f7fb f9f3 	bl	800dfb4 <ucdr_check_final_buffer_behavior_array>
 8012bce:	4605      	mov	r5, r0
 8012bd0:	eba7 0008 	sub.w	r0, r7, r8
 8012bd4:	4430      	add	r0, r6
 8012bd6:	462a      	mov	r2, r5
 8012bd8:	2d00      	cmp	r5, #0
 8012bda:	d1e8      	bne.n	8012bae <ucdr_deserialize_array_double+0x56>
 8012bdc:	7da0      	ldrb	r0, [r4, #22]
 8012bde:	2308      	movs	r3, #8
 8012be0:	7563      	strb	r3, [r4, #21]
 8012be2:	f080 0001 	eor.w	r0, r0, #1
 8012be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bea:	463a      	mov	r2, r7
 8012bec:	68a1      	ldr	r1, [r4, #8]
 8012bee:	4630      	mov	r0, r6
 8012bf0:	f009 fd51 	bl	801c696 <memcpy>
 8012bf4:	68a2      	ldr	r2, [r4, #8]
 8012bf6:	6923      	ldr	r3, [r4, #16]
 8012bf8:	443a      	add	r2, r7
 8012bfa:	441f      	add	r7, r3
 8012bfc:	60a2      	str	r2, [r4, #8]
 8012bfe:	6127      	str	r7, [r4, #16]
 8012c00:	e7ec      	b.n	8012bdc <ucdr_deserialize_array_double+0x84>
 8012c02:	bf00      	nop

08012c04 <ucdr_serialize_sequence_char>:
 8012c04:	b570      	push	{r4, r5, r6, lr}
 8012c06:	4615      	mov	r5, r2
 8012c08:	460e      	mov	r6, r1
 8012c0a:	7d01      	ldrb	r1, [r0, #20]
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	f7fa f969 	bl	800cee4 <ucdr_serialize_endian_uint32_t>
 8012c12:	b90d      	cbnz	r5, 8012c18 <ucdr_serialize_sequence_char+0x14>
 8012c14:	2001      	movs	r0, #1
 8012c16:	bd70      	pop	{r4, r5, r6, pc}
 8012c18:	7d21      	ldrb	r1, [r4, #20]
 8012c1a:	462b      	mov	r3, r5
 8012c1c:	4632      	mov	r2, r6
 8012c1e:	4620      	mov	r0, r4
 8012c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c24:	f7ff be18 	b.w	8012858 <ucdr_serialize_endian_array_char>

08012c28 <ucdr_deserialize_sequence_char>:
 8012c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c2c:	461d      	mov	r5, r3
 8012c2e:	4616      	mov	r6, r2
 8012c30:	460f      	mov	r7, r1
 8012c32:	461a      	mov	r2, r3
 8012c34:	7d01      	ldrb	r1, [r0, #20]
 8012c36:	4604      	mov	r4, r0
 8012c38:	f7fa fa7c 	bl	800d134 <ucdr_deserialize_endian_uint32_t>
 8012c3c:	682b      	ldr	r3, [r5, #0]
 8012c3e:	429e      	cmp	r6, r3
 8012c40:	bf3c      	itt	cc
 8012c42:	2201      	movcc	r2, #1
 8012c44:	75a2      	strbcc	r2, [r4, #22]
 8012c46:	b913      	cbnz	r3, 8012c4e <ucdr_deserialize_sequence_char+0x26>
 8012c48:	2001      	movs	r0, #1
 8012c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c4e:	7d21      	ldrb	r1, [r4, #20]
 8012c50:	463a      	mov	r2, r7
 8012c52:	4620      	mov	r0, r4
 8012c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c58:	f7ff be30 	b.w	80128bc <ucdr_deserialize_endian_array_char>

08012c5c <ucdr_serialize_sequence_uint8_t>:
 8012c5c:	b570      	push	{r4, r5, r6, lr}
 8012c5e:	4615      	mov	r5, r2
 8012c60:	460e      	mov	r6, r1
 8012c62:	7d01      	ldrb	r1, [r0, #20]
 8012c64:	4604      	mov	r4, r0
 8012c66:	f7fa f93d 	bl	800cee4 <ucdr_serialize_endian_uint32_t>
 8012c6a:	b90d      	cbnz	r5, 8012c70 <ucdr_serialize_sequence_uint8_t+0x14>
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	bd70      	pop	{r4, r5, r6, pc}
 8012c70:	7d21      	ldrb	r1, [r4, #20]
 8012c72:	462b      	mov	r3, r5
 8012c74:	4632      	mov	r2, r6
 8012c76:	4620      	mov	r0, r4
 8012c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c7c:	f7ff be82 	b.w	8012984 <ucdr_serialize_endian_array_uint8_t>

08012c80 <ucdr_deserialize_sequence_uint8_t>:
 8012c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c84:	461d      	mov	r5, r3
 8012c86:	4616      	mov	r6, r2
 8012c88:	460f      	mov	r7, r1
 8012c8a:	461a      	mov	r2, r3
 8012c8c:	7d01      	ldrb	r1, [r0, #20]
 8012c8e:	4604      	mov	r4, r0
 8012c90:	f7fa fa50 	bl	800d134 <ucdr_deserialize_endian_uint32_t>
 8012c94:	682b      	ldr	r3, [r5, #0]
 8012c96:	429e      	cmp	r6, r3
 8012c98:	bf3c      	itt	cc
 8012c9a:	2201      	movcc	r2, #1
 8012c9c:	75a2      	strbcc	r2, [r4, #22]
 8012c9e:	b913      	cbnz	r3, 8012ca6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8012ca0:	2001      	movs	r0, #1
 8012ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ca6:	7d21      	ldrb	r1, [r4, #20]
 8012ca8:	463a      	mov	r2, r7
 8012caa:	4620      	mov	r0, r4
 8012cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cb0:	f7ff becc 	b.w	8012a4c <ucdr_deserialize_endian_array_uint8_t>

08012cb4 <uxr_buffer_delete_entity>:
 8012cb4:	b510      	push	{r4, lr}
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	b08e      	sub	sp, #56	@ 0x38
 8012cba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012cbe:	2303      	movs	r3, #3
 8012cc0:	9300      	str	r3, [sp, #0]
 8012cc2:	2204      	movs	r2, #4
 8012cc4:	ab06      	add	r3, sp, #24
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	9103      	str	r1, [sp, #12]
 8012cca:	f001 fc71 	bl	80145b0 <uxr_prepare_stream_to_write_submessage>
 8012cce:	b918      	cbnz	r0, 8012cd8 <uxr_buffer_delete_entity+0x24>
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	b00e      	add	sp, #56	@ 0x38
 8012cd6:	bd10      	pop	{r4, pc}
 8012cd8:	9902      	ldr	r1, [sp, #8]
 8012cda:	aa05      	add	r2, sp, #20
 8012cdc:	4620      	mov	r0, r4
 8012cde:	f001 fd9d 	bl	801481c <uxr_init_base_object_request>
 8012ce2:	a905      	add	r1, sp, #20
 8012ce4:	4604      	mov	r4, r0
 8012ce6:	a806      	add	r0, sp, #24
 8012ce8:	f003 fc94 	bl	8016614 <uxr_serialize_DELETE_Payload>
 8012cec:	4620      	mov	r0, r4
 8012cee:	b00e      	add	sp, #56	@ 0x38
 8012cf0:	bd10      	pop	{r4, pc}
 8012cf2:	bf00      	nop

08012cf4 <uxr_common_create_entity>:
 8012cf4:	b510      	push	{r4, lr}
 8012cf6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012cfa:	b08c      	sub	sp, #48	@ 0x30
 8012cfc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012d00:	f1bc 0f01 	cmp.w	ip, #1
 8012d04:	bf0c      	ite	eq
 8012d06:	f003 0201 	andeq.w	r2, r3, #1
 8012d0a:	2200      	movne	r2, #0
 8012d0c:	330e      	adds	r3, #14
 8012d0e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8012d12:	9101      	str	r1, [sp, #4]
 8012d14:	441a      	add	r2, r3
 8012d16:	2301      	movs	r3, #1
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	9903      	ldr	r1, [sp, #12]
 8012d1c:	ab04      	add	r3, sp, #16
 8012d1e:	b292      	uxth	r2, r2
 8012d20:	4604      	mov	r4, r0
 8012d22:	f001 fc45 	bl	80145b0 <uxr_prepare_stream_to_write_submessage>
 8012d26:	b918      	cbnz	r0, 8012d30 <uxr_common_create_entity+0x3c>
 8012d28:	4604      	mov	r4, r0
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	b00c      	add	sp, #48	@ 0x30
 8012d2e:	bd10      	pop	{r4, pc}
 8012d30:	9902      	ldr	r1, [sp, #8]
 8012d32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012d34:	4620      	mov	r0, r4
 8012d36:	f001 fd71 	bl	801481c <uxr_init_base_object_request>
 8012d3a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d3c:	4604      	mov	r4, r0
 8012d3e:	a804      	add	r0, sp, #16
 8012d40:	f003 fbb0 	bl	80164a4 <uxr_serialize_CREATE_Payload>
 8012d44:	4620      	mov	r0, r4
 8012d46:	b00c      	add	sp, #48	@ 0x30
 8012d48:	bd10      	pop	{r4, pc}
 8012d4a:	bf00      	nop

08012d4c <uxr_buffer_create_participant_bin>:
 8012d4c:	b570      	push	{r4, r5, r6, lr}
 8012d4e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012d52:	ac11      	add	r4, sp, #68	@ 0x44
 8012d54:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012d58:	2303      	movs	r3, #3
 8012d5a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012d5e:	7223      	strb	r3, [r4, #8]
 8012d60:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012d62:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012d66:	2201      	movs	r2, #1
 8012d68:	2100      	movs	r1, #0
 8012d6a:	4605      	mov	r5, r0
 8012d6c:	7122      	strb	r2, [r4, #4]
 8012d6e:	f88d 1014 	strb.w	r1, [sp, #20]
 8012d72:	b1cb      	cbz	r3, 8012da8 <uxr_buffer_create_participant_bin+0x5c>
 8012d74:	f88d 201c 	strb.w	r2, [sp, #28]
 8012d78:	9308      	str	r3, [sp, #32]
 8012d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d7e:	a915      	add	r1, sp, #84	@ 0x54
 8012d80:	a809      	add	r0, sp, #36	@ 0x24
 8012d82:	f7fb f8e3 	bl	800df4c <ucdr_init_buffer>
 8012d86:	a905      	add	r1, sp, #20
 8012d88:	a809      	add	r0, sp, #36	@ 0x24
 8012d8a:	f002 ff6d 	bl	8015c68 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d90:	9600      	str	r6, [sp, #0]
 8012d92:	9401      	str	r4, [sp, #4]
 8012d94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d98:	60e3      	str	r3, [r4, #12]
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	f7ff ffa9 	bl	8012cf4 <uxr_common_create_entity>
 8012da2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012da6:	bd70      	pop	{r4, r5, r6, pc}
 8012da8:	f88d 301c 	strb.w	r3, [sp, #28]
 8012dac:	e7e5      	b.n	8012d7a <uxr_buffer_create_participant_bin+0x2e>
 8012dae:	bf00      	nop

08012db0 <uxr_buffer_create_topic_bin>:
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012db6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012dba:	9105      	str	r1, [sp, #20]
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	a997      	add	r1, sp, #604	@ 0x25c
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012dc8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012dcc:	f000 fa58 	bl	8013280 <uxr_object_id_to_raw>
 8012dd0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012dd2:	9306      	str	r3, [sp, #24]
 8012dd4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012dd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012dd8:	2303      	movs	r3, #3
 8012dda:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012dde:	2301      	movs	r3, #1
 8012de0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012de4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012de8:	a917      	add	r1, sp, #92	@ 0x5c
 8012dea:	2300      	movs	r3, #0
 8012dec:	a80b      	add	r0, sp, #44	@ 0x2c
 8012dee:	f88d 301c 	strb.w	r3, [sp, #28]
 8012df2:	f7fb f8ab 	bl	800df4c <ucdr_init_buffer>
 8012df6:	a906      	add	r1, sp, #24
 8012df8:	a80b      	add	r0, sp, #44	@ 0x2c
 8012dfa:	f002 ff57 	bl	8015cac <uxr_serialize_OBJK_Topic_Binary>
 8012dfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e00:	9316      	str	r3, [sp, #88]	@ 0x58
 8012e02:	ac13      	add	r4, sp, #76	@ 0x4c
 8012e04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012e08:	9600      	str	r6, [sp, #0]
 8012e0a:	9401      	str	r4, [sp, #4]
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f7ff ff70 	bl	8012cf4 <uxr_common_create_entity>
 8012e14:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012e18:	bd70      	pop	{r4, r5, r6, pc}
 8012e1a:	bf00      	nop

08012e1c <uxr_buffer_create_publisher_bin>:
 8012e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e1e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012e22:	4605      	mov	r5, r0
 8012e24:	9105      	str	r1, [sp, #20]
 8012e26:	4618      	mov	r0, r3
 8012e28:	2603      	movs	r6, #3
 8012e2a:	a992      	add	r1, sp, #584	@ 0x248
 8012e2c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012e30:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012e34:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012e38:	f000 fa22 	bl	8013280 <uxr_object_id_to_raw>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e42:	a912      	add	r1, sp, #72	@ 0x48
 8012e44:	a806      	add	r0, sp, #24
 8012e46:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012e4a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012e4e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012e52:	f7fb f87b 	bl	800df4c <ucdr_init_buffer>
 8012e56:	a993      	add	r1, sp, #588	@ 0x24c
 8012e58:	a806      	add	r0, sp, #24
 8012e5a:	f002 ffdb 	bl	8015e14 <uxr_serialize_OBJK_Publisher_Binary>
 8012e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e60:	9311      	str	r3, [sp, #68]	@ 0x44
 8012e62:	ac0e      	add	r4, sp, #56	@ 0x38
 8012e64:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012e68:	9700      	str	r7, [sp, #0]
 8012e6a:	9401      	str	r4, [sp, #4]
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	4628      	mov	r0, r5
 8012e70:	f7ff ff40 	bl	8012cf4 <uxr_common_create_entity>
 8012e74:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e7a:	bf00      	nop

08012e7c <uxr_buffer_create_subscriber_bin>:
 8012e7c:	b570      	push	{r4, r5, r6, lr}
 8012e7e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8012e82:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012e86:	9105      	str	r1, [sp, #20]
 8012e88:	4605      	mov	r5, r0
 8012e8a:	a992      	add	r1, sp, #584	@ 0x248
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	2304      	movs	r3, #4
 8012e90:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8012e94:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8012e98:	f000 f9f2 	bl	8013280 <uxr_object_id_to_raw>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ea2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012ea6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012eaa:	a912      	add	r1, sp, #72	@ 0x48
 8012eac:	2303      	movs	r3, #3
 8012eae:	a806      	add	r0, sp, #24
 8012eb0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012eb4:	f7fb f84a 	bl	800df4c <ucdr_init_buffer>
 8012eb8:	a993      	add	r1, sp, #588	@ 0x24c
 8012eba:	a806      	add	r0, sp, #24
 8012ebc:	f003 f85a 	bl	8015f74 <uxr_serialize_OBJK_Subscriber_Binary>
 8012ec0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012ec2:	9311      	str	r3, [sp, #68]	@ 0x44
 8012ec4:	ac0e      	add	r4, sp, #56	@ 0x38
 8012ec6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012eca:	9600      	str	r6, [sp, #0]
 8012ecc:	9401      	str	r4, [sp, #4]
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	f7ff ff0f 	bl	8012cf4 <uxr_common_create_entity>
 8012ed6:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8012eda:	bd70      	pop	{r4, r5, r6, pc}

08012edc <uxr_buffer_create_datawriter_bin>:
 8012edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee0:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012ee4:	ac1d      	add	r4, sp, #116	@ 0x74
 8012ee6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012eea:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012eee:	9105      	str	r1, [sp, #20]
 8012ef0:	4606      	mov	r6, r0
 8012ef2:	a9a1      	add	r1, sp, #644	@ 0x284
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	2305      	movs	r3, #5
 8012ef8:	7123      	strb	r3, [r4, #4]
 8012efa:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012efe:	2703      	movs	r7, #3
 8012f00:	f000 f9be 	bl	8013280 <uxr_object_id_to_raw>
 8012f04:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012f06:	7227      	strb	r7, [r4, #8]
 8012f08:	a90e      	add	r1, sp, #56	@ 0x38
 8012f0a:	f000 f9b9 	bl	8013280 <uxr_object_id_to_raw>
 8012f0e:	2300      	movs	r3, #0
 8012f10:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012f14:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012f18:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012f1c:	3d00      	subs	r5, #0
 8012f1e:	bf18      	it	ne
 8012f20:	2501      	movne	r5, #1
 8012f22:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012f26:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012f2a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012f2e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012f32:	2301      	movs	r3, #1
 8012f34:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012f38:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012f3c:	bb8a      	cbnz	r2, 8012fa2 <uxr_buffer_create_datawriter_bin+0xc6>
 8012f3e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012f42:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012f46:	f04f 0c13 	mov.w	ip, #19
 8012f4a:	250b      	movs	r5, #11
 8012f4c:	2221      	movs	r2, #33	@ 0x21
 8012f4e:	2111      	movs	r1, #17
 8012f50:	2009      	movs	r0, #9
 8012f52:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8012f56:	b923      	cbnz	r3, 8012f62 <uxr_buffer_create_datawriter_bin+0x86>
 8012f58:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012f5c:	4672      	mov	r2, lr
 8012f5e:	4661      	mov	r1, ip
 8012f60:	4628      	mov	r0, r5
 8012f62:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8012f66:	2b01      	cmp	r3, #1
 8012f68:	d025      	beq.n	8012fb6 <uxr_buffer_create_datawriter_bin+0xda>
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d029      	beq.n	8012fc2 <uxr_buffer_create_datawriter_bin+0xe6>
 8012f6e:	b32b      	cbz	r3, 8012fbc <uxr_buffer_create_datawriter_bin+0xe0>
 8012f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f74:	a921      	add	r1, sp, #132	@ 0x84
 8012f76:	a806      	add	r0, sp, #24
 8012f78:	f7fa ffe8 	bl	800df4c <ucdr_init_buffer>
 8012f7c:	a90e      	add	r1, sp, #56	@ 0x38
 8012f7e:	a806      	add	r0, sp, #24
 8012f80:	f003 f8aa 	bl	80160d8 <uxr_serialize_OBJK_DataWriter_Binary>
 8012f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f86:	f8cd 8000 	str.w	r8, [sp]
 8012f8a:	9401      	str	r4, [sp, #4]
 8012f8c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012f90:	60e3      	str	r3, [r4, #12]
 8012f92:	4630      	mov	r0, r6
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	f7ff fead 	bl	8012cf4 <uxr_common_create_entity>
 8012f9a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fa2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012fa6:	f04f 0c12 	mov.w	ip, #18
 8012faa:	250a      	movs	r5, #10
 8012fac:	2220      	movs	r2, #32
 8012fae:	2110      	movs	r1, #16
 8012fb0:	2008      	movs	r0, #8
 8012fb2:	2702      	movs	r7, #2
 8012fb4:	e7cd      	b.n	8012f52 <uxr_buffer_create_datawriter_bin+0x76>
 8012fb6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012fba:	e7d9      	b.n	8012f70 <uxr_buffer_create_datawriter_bin+0x94>
 8012fbc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012fc0:	e7d6      	b.n	8012f70 <uxr_buffer_create_datawriter_bin+0x94>
 8012fc2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012fc6:	e7d3      	b.n	8012f70 <uxr_buffer_create_datawriter_bin+0x94>

08012fc8 <uxr_buffer_create_datareader_bin>:
 8012fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fcc:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012fd0:	ac1f      	add	r4, sp, #124	@ 0x7c
 8012fd2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012fd6:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8012fda:	9105      	str	r1, [sp, #20]
 8012fdc:	4606      	mov	r6, r0
 8012fde:	a9a3      	add	r1, sp, #652	@ 0x28c
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	2306      	movs	r3, #6
 8012fe4:	7123      	strb	r3, [r4, #4]
 8012fe6:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012fea:	2703      	movs	r7, #3
 8012fec:	f000 f948 	bl	8013280 <uxr_object_id_to_raw>
 8012ff0:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8012ff2:	7227      	strb	r7, [r4, #8]
 8012ff4:	a90e      	add	r1, sp, #56	@ 0x38
 8012ff6:	f000 f943 	bl	8013280 <uxr_object_id_to_raw>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8013000:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8013004:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8013008:	3d00      	subs	r5, #0
 801300a:	bf18      	it	ne
 801300c:	2501      	movne	r5, #1
 801300e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8013012:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8013016:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801301a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801301e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013022:	2301      	movs	r3, #1
 8013024:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8013028:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801302c:	bb8a      	cbnz	r2, 8013092 <uxr_buffer_create_datareader_bin+0xca>
 801302e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013032:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8013036:	f04f 0c13 	mov.w	ip, #19
 801303a:	250b      	movs	r5, #11
 801303c:	2221      	movs	r2, #33	@ 0x21
 801303e:	2111      	movs	r1, #17
 8013040:	2009      	movs	r0, #9
 8013042:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8013046:	b923      	cbnz	r3, 8013052 <uxr_buffer_create_datareader_bin+0x8a>
 8013048:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801304c:	4672      	mov	r2, lr
 801304e:	4661      	mov	r1, ip
 8013050:	4628      	mov	r0, r5
 8013052:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8013056:	2b01      	cmp	r3, #1
 8013058:	d025      	beq.n	80130a6 <uxr_buffer_create_datareader_bin+0xde>
 801305a:	2b03      	cmp	r3, #3
 801305c:	d029      	beq.n	80130b2 <uxr_buffer_create_datareader_bin+0xea>
 801305e:	b32b      	cbz	r3, 80130ac <uxr_buffer_create_datareader_bin+0xe4>
 8013060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013064:	a923      	add	r1, sp, #140	@ 0x8c
 8013066:	a806      	add	r0, sp, #24
 8013068:	f7fa ff70 	bl	800df4c <ucdr_init_buffer>
 801306c:	a90e      	add	r1, sp, #56	@ 0x38
 801306e:	a806      	add	r0, sp, #24
 8013070:	f002 fff6 	bl	8016060 <uxr_serialize_OBJK_DataReader_Binary>
 8013074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013076:	f8cd 8000 	str.w	r8, [sp]
 801307a:	9401      	str	r4, [sp, #4]
 801307c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013080:	60e3      	str	r3, [r4, #12]
 8013082:	4630      	mov	r0, r6
 8013084:	b29b      	uxth	r3, r3
 8013086:	f7ff fe35 	bl	8012cf4 <uxr_common_create_entity>
 801308a:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801308e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013092:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8013096:	f04f 0c12 	mov.w	ip, #18
 801309a:	250a      	movs	r5, #10
 801309c:	2220      	movs	r2, #32
 801309e:	2110      	movs	r1, #16
 80130a0:	2008      	movs	r0, #8
 80130a2:	2702      	movs	r7, #2
 80130a4:	e7cd      	b.n	8013042 <uxr_buffer_create_datareader_bin+0x7a>
 80130a6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80130aa:	e7d9      	b.n	8013060 <uxr_buffer_create_datareader_bin+0x98>
 80130ac:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80130b0:	e7d6      	b.n	8013060 <uxr_buffer_create_datareader_bin+0x98>
 80130b2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80130b6:	e7d3      	b.n	8013060 <uxr_buffer_create_datareader_bin+0x98>

080130b8 <get_custom_error>:
 80130b8:	4b01      	ldr	r3, [pc, #4]	@ (80130c0 <get_custom_error+0x8>)
 80130ba:	7818      	ldrb	r0, [r3, #0]
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	20011adc 	.word	0x20011adc

080130c4 <recv_custom_msg>:
 80130c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c8:	4693      	mov	fp, r2
 80130ca:	b089      	sub	sp, #36	@ 0x24
 80130cc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80130d0:	9305      	str	r3, [sp, #20]
 80130d2:	468a      	mov	sl, r1
 80130d4:	2100      	movs	r1, #0
 80130d6:	4604      	mov	r4, r0
 80130d8:	f88d 101e 	strb.w	r1, [sp, #30]
 80130dc:	b322      	cbz	r2, 8013128 <recv_custom_msg+0x64>
 80130de:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80130e2:	f10d 081f 	add.w	r8, sp, #31
 80130e6:	af05      	add	r7, sp, #20
 80130e8:	f10d 061e 	add.w	r6, sp, #30
 80130ec:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80130f0:	e002      	b.n	80130f8 <recv_custom_msg+0x34>
 80130f2:	9b05      	ldr	r3, [sp, #20]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	dd0f      	ble.n	8013118 <recv_custom_msg+0x54>
 80130f8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80130fc:	4623      	mov	r3, r4
 80130fe:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8013102:	e9cd 5600 	strd	r5, r6, [sp]
 8013106:	4622      	mov	r2, r4
 8013108:	4648      	mov	r0, r9
 801310a:	f001 fdb5 	bl	8014c78 <uxr_read_framed_msg>
 801310e:	2800      	cmp	r0, #0
 8013110:	d0ef      	beq.n	80130f2 <recv_custom_msg+0x2e>
 8013112:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013116:	b1b3      	cbz	r3, 8013146 <recv_custom_msg+0x82>
 8013118:	4b0f      	ldr	r3, [pc, #60]	@ (8013158 <recv_custom_msg+0x94>)
 801311a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801311e:	701a      	strb	r2, [r3, #0]
 8013120:	2000      	movs	r0, #0
 8013122:	b009      	add	sp, #36	@ 0x24
 8013124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013128:	f10d 021f 	add.w	r2, sp, #31
 801312c:	9200      	str	r2, [sp, #0]
 801312e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8013132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013136:	4601      	mov	r1, r0
 8013138:	47a8      	blx	r5
 801313a:	2800      	cmp	r0, #0
 801313c:	d0ec      	beq.n	8013118 <recv_custom_msg+0x54>
 801313e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d1e8      	bne.n	8013118 <recv_custom_msg+0x54>
 8013146:	f8cb 0000 	str.w	r0, [fp]
 801314a:	2001      	movs	r0, #1
 801314c:	f8ca 4000 	str.w	r4, [sl]
 8013150:	b009      	add	sp, #36	@ 0x24
 8013152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013156:	bf00      	nop
 8013158:	20011adc 	.word	0x20011adc

0801315c <send_custom_msg>:
 801315c:	b530      	push	{r4, r5, lr}
 801315e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8013162:	b087      	sub	sp, #28
 8013164:	4615      	mov	r5, r2
 8013166:	b974      	cbnz	r4, 8013186 <send_custom_msg+0x2a>
 8013168:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801316c:	f10d 0317 	add.w	r3, sp, #23
 8013170:	47a0      	blx	r4
 8013172:	b108      	cbz	r0, 8013178 <send_custom_msg+0x1c>
 8013174:	42a8      	cmp	r0, r5
 8013176:	d015      	beq.n	80131a4 <send_custom_msg+0x48>
 8013178:	4b0c      	ldr	r3, [pc, #48]	@ (80131ac <send_custom_msg+0x50>)
 801317a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801317e:	701a      	strb	r2, [r3, #0]
 8013180:	2000      	movs	r0, #0
 8013182:	b007      	add	sp, #28
 8013184:	bd30      	pop	{r4, r5, pc}
 8013186:	460b      	mov	r3, r1
 8013188:	2200      	movs	r2, #0
 801318a:	f10d 0117 	add.w	r1, sp, #23
 801318e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013192:	4602      	mov	r2, r0
 8013194:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013198:	9500      	str	r5, [sp, #0]
 801319a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801319e:	f001 fb73 	bl	8014888 <uxr_write_framed_msg>
 80131a2:	e7e6      	b.n	8013172 <send_custom_msg+0x16>
 80131a4:	2001      	movs	r0, #1
 80131a6:	b007      	add	sp, #28
 80131a8:	bd30      	pop	{r4, r5, pc}
 80131aa:	bf00      	nop
 80131ac:	20011adc 	.word	0x20011adc

080131b0 <uxr_set_custom_transport_callbacks>:
 80131b0:	b410      	push	{r4}
 80131b2:	9c01      	ldr	r4, [sp, #4]
 80131b4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80131b8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80131bc:	9b02      	ldr	r3, [sp, #8]
 80131be:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80131c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131c6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 80131ca:	4770      	bx	lr

080131cc <uxr_init_custom_transport>:
 80131cc:	b538      	push	{r3, r4, r5, lr}
 80131ce:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80131d2:	b303      	cbz	r3, 8013216 <uxr_init_custom_transport+0x4a>
 80131d4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80131d8:	4604      	mov	r4, r0
 80131da:	b1e2      	cbz	r2, 8013216 <uxr_init_custom_transport+0x4a>
 80131dc:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80131e0:	b1ca      	cbz	r2, 8013216 <uxr_init_custom_transport+0x4a>
 80131e2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80131e6:	b1b2      	cbz	r2, 8013216 <uxr_init_custom_transport+0x4a>
 80131e8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80131ec:	4798      	blx	r3
 80131ee:	4605      	mov	r5, r0
 80131f0:	b188      	cbz	r0, 8013216 <uxr_init_custom_transport+0x4a>
 80131f2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80131f6:	b98b      	cbnz	r3, 801321c <uxr_init_custom_transport+0x50>
 80131f8:	490b      	ldr	r1, [pc, #44]	@ (8013228 <uxr_init_custom_transport+0x5c>)
 80131fa:	4b0c      	ldr	r3, [pc, #48]	@ (801322c <uxr_init_custom_transport+0x60>)
 80131fc:	4a0c      	ldr	r2, [pc, #48]	@ (8013230 <uxr_init_custom_transport+0x64>)
 80131fe:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8013202:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013206:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801320a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801320e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8013212:	4628      	mov	r0, r5
 8013214:	bd38      	pop	{r3, r4, r5, pc}
 8013216:	2500      	movs	r5, #0
 8013218:	4628      	mov	r0, r5
 801321a:	bd38      	pop	{r3, r4, r5, pc}
 801321c:	2100      	movs	r1, #0
 801321e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8013222:	f001 fb2b 	bl	801487c <uxr_init_framing_io>
 8013226:	e7e7      	b.n	80131f8 <uxr_init_custom_transport+0x2c>
 8013228:	0801315d 	.word	0x0801315d
 801322c:	080130c5 	.word	0x080130c5
 8013230:	080130b9 	.word	0x080130b9

08013234 <uxr_close_custom_transport>:
 8013234:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013238:	4718      	bx	r3
 801323a:	bf00      	nop

0801323c <uxr_object_id>:
 801323c:	b082      	sub	sp, #8
 801323e:	2300      	movs	r3, #0
 8013240:	f88d 1006 	strb.w	r1, [sp, #6]
 8013244:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013248:	f360 030f 	bfi	r3, r0, #0, #16
 801324c:	f362 431f 	bfi	r3, r2, #16, #16
 8013250:	4618      	mov	r0, r3
 8013252:	b002      	add	sp, #8
 8013254:	4770      	bx	lr
 8013256:	bf00      	nop

08013258 <uxr_object_id_from_raw>:
 8013258:	7843      	ldrb	r3, [r0, #1]
 801325a:	7801      	ldrb	r1, [r0, #0]
 801325c:	b082      	sub	sp, #8
 801325e:	f003 020f 	and.w	r2, r3, #15
 8013262:	f88d 2006 	strb.w	r2, [sp, #6]
 8013266:	091b      	lsrs	r3, r3, #4
 8013268:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801326c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013270:	2000      	movs	r0, #0
 8013272:	f363 000f 	bfi	r0, r3, #0, #16
 8013276:	f362 401f 	bfi	r0, r2, #16, #16
 801327a:	b002      	add	sp, #8
 801327c:	4770      	bx	lr
 801327e:	bf00      	nop

08013280 <uxr_object_id_to_raw>:
 8013280:	4602      	mov	r2, r0
 8013282:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013286:	b082      	sub	sp, #8
 8013288:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801328c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013290:	f881 c000 	strb.w	ip, [r1]
 8013294:	7048      	strb	r0, [r1, #1]
 8013296:	b002      	add	sp, #8
 8013298:	4770      	bx	lr
 801329a:	bf00      	nop

0801329c <uxr_ping_agent_session>:
 801329c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132a0:	4617      	mov	r7, r2
 80132a2:	b091      	sub	sp, #68	@ 0x44
 80132a4:	2210      	movs	r2, #16
 80132a6:	4606      	mov	r6, r0
 80132a8:	4688      	mov	r8, r1
 80132aa:	a808      	add	r0, sp, #32
 80132ac:	eb0d 0102 	add.w	r1, sp, r2
 80132b0:	f7fa fe4c 	bl	800df4c <ucdr_init_buffer>
 80132b4:	4b1e      	ldr	r3, [pc, #120]	@ (8013330 <uxr_ping_agent_session+0x94>)
 80132b6:	2500      	movs	r5, #0
 80132b8:	881b      	ldrh	r3, [r3, #0]
 80132ba:	f8ad 300a 	strh.w	r3, [sp, #10]
 80132be:	9500      	str	r5, [sp, #0]
 80132c0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80132c4:	2402      	movs	r4, #2
 80132c6:	7831      	ldrb	r1, [r6, #0]
 80132c8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80132cc:	462a      	mov	r2, r5
 80132ce:	a808      	add	r0, sp, #32
 80132d0:	462b      	mov	r3, r5
 80132d2:	9403      	str	r4, [sp, #12]
 80132d4:	f002 fa96 	bl	8015804 <uxr_serialize_message_header>
 80132d8:	4621      	mov	r1, r4
 80132da:	462b      	mov	r3, r5
 80132dc:	2208      	movs	r2, #8
 80132de:	a808      	add	r0, sp, #32
 80132e0:	f002 f896 	bl	8015410 <uxr_buffer_submessage_header>
 80132e4:	a902      	add	r1, sp, #8
 80132e6:	4604      	mov	r4, r0
 80132e8:	a808      	add	r0, sp, #32
 80132ea:	f003 f96b 	bl	80165c4 <uxr_serialize_GET_INFO_Payload>
 80132ee:	b104      	cbz	r4, 80132f2 <uxr_ping_agent_session+0x56>
 80132f0:	b918      	cbnz	r0, 80132fa <uxr_ping_agent_session+0x5e>
 80132f2:	2000      	movs	r0, #0
 80132f4:	b011      	add	sp, #68	@ 0x44
 80132f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132fa:	a808      	add	r0, sp, #32
 80132fc:	f7fa fe52 	bl	800dfa4 <ucdr_buffer_length>
 8013300:	4681      	mov	r9, r0
 8013302:	e00d      	b.n	8013320 <uxr_ping_agent_session+0x84>
 8013304:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8013306:	e9d3 0400 	ldrd	r0, r4, [r3]
 801330a:	47a0      	blx	r4
 801330c:	4641      	mov	r1, r8
 801330e:	4604      	mov	r4, r0
 8013310:	4630      	mov	r0, r6
 8013312:	f000 ff4d 	bl	80141b0 <uxr_run_session_until_pong>
 8013316:	ea04 0c00 	and.w	ip, r4, r0
 801331a:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 801331e:	d1e9      	bne.n	80132f4 <uxr_ping_agent_session+0x58>
 8013320:	42af      	cmp	r7, r5
 8013322:	464a      	mov	r2, r9
 8013324:	a904      	add	r1, sp, #16
 8013326:	f105 0501 	add.w	r5, r5, #1
 801332a:	d1eb      	bne.n	8013304 <uxr_ping_agent_session+0x68>
 801332c:	e7e1      	b.n	80132f2 <uxr_ping_agent_session+0x56>
 801332e:	bf00      	nop
 8013330:	0801d3cc 	.word	0x0801d3cc

08013334 <uxr_ping_agent_attempts>:
 8013334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013338:	ed2d 8b02 	vpush	{d8}
 801333c:	b0d1      	sub	sp, #324	@ 0x144
 801333e:	4606      	mov	r6, r0
 8013340:	4688      	mov	r8, r1
 8013342:	a80e      	add	r0, sp, #56	@ 0x38
 8013344:	a90a      	add	r1, sp, #40	@ 0x28
 8013346:	4615      	mov	r5, r2
 8013348:	2210      	movs	r2, #16
 801334a:	f7fa fdff 	bl	800df4c <ucdr_init_buffer>
 801334e:	4b54      	ldr	r3, [pc, #336]	@ (80134a0 <uxr_ping_agent_attempts+0x16c>)
 8013350:	881b      	ldrh	r3, [r3, #0]
 8013352:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 8013356:	2300      	movs	r3, #0
 8013358:	2402      	movs	r4, #2
 801335a:	461a      	mov	r2, r3
 801335c:	9300      	str	r3, [sp, #0]
 801335e:	2180      	movs	r1, #128	@ 0x80
 8013360:	a80e      	add	r0, sp, #56	@ 0x38
 8013362:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 8013366:	941f      	str	r4, [sp, #124]	@ 0x7c
 8013368:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 801336c:	f002 fa4a 	bl	8015804 <uxr_serialize_message_header>
 8013370:	4621      	mov	r1, r4
 8013372:	2300      	movs	r3, #0
 8013374:	2208      	movs	r2, #8
 8013376:	a80e      	add	r0, sp, #56	@ 0x38
 8013378:	f002 f84a 	bl	8015410 <uxr_buffer_submessage_header>
 801337c:	a91e      	add	r1, sp, #120	@ 0x78
 801337e:	4604      	mov	r4, r0
 8013380:	a80e      	add	r0, sp, #56	@ 0x38
 8013382:	f003 f91f 	bl	80165c4 <uxr_serialize_GET_INFO_Payload>
 8013386:	b104      	cbz	r4, 801338a <uxr_ping_agent_attempts+0x56>
 8013388:	b938      	cbnz	r0, 801339a <uxr_ping_agent_attempts+0x66>
 801338a:	f04f 0b00 	mov.w	fp, #0
 801338e:	4658      	mov	r0, fp
 8013390:	b051      	add	sp, #324	@ 0x144
 8013392:	ecbd 8b02 	vpop	{d8}
 8013396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801339a:	a80e      	add	r0, sp, #56	@ 0x38
 801339c:	f7fa fe02 	bl	800dfa4 <ucdr_buffer_length>
 80133a0:	1c6b      	adds	r3, r5, #1
 80133a2:	ee08 0a10 	vmov	s16, r0
 80133a6:	9303      	str	r3, [sp, #12]
 80133a8:	f04f 0901 	mov.w	r9, #1
 80133ac:	9b03      	ldr	r3, [sp, #12]
 80133ae:	454b      	cmp	r3, r9
 80133b0:	d0eb      	beq.n	801338a <uxr_ping_agent_attempts+0x56>
 80133b2:	e9d6 0300 	ldrd	r0, r3, [r6]
 80133b6:	ee18 2a10 	vmov	r2, s16
 80133ba:	a90a      	add	r1, sp, #40	@ 0x28
 80133bc:	4798      	blx	r3
 80133be:	f002 f86d 	bl	801549c <uxr_millis>
 80133c2:	4645      	mov	r5, r8
 80133c4:	4604      	mov	r4, r0
 80133c6:	f04f 0a00 	mov.w	sl, #0
 80133ca:	68b7      	ldr	r7, [r6, #8]
 80133cc:	6830      	ldr	r0, [r6, #0]
 80133ce:	f8cd a018 	str.w	sl, [sp, #24]
 80133d2:	4643      	mov	r3, r8
 80133d4:	aa07      	add	r2, sp, #28
 80133d6:	a906      	add	r1, sp, #24
 80133d8:	47b8      	blx	r7
 80133da:	4607      	mov	r7, r0
 80133dc:	b958      	cbnz	r0, 80133f6 <uxr_ping_agent_attempts+0xc2>
 80133de:	f002 f85d 	bl	801549c <uxr_millis>
 80133e2:	1b00      	subs	r0, r0, r4
 80133e4:	1a2d      	subs	r5, r5, r0
 80133e6:	f002 f859 	bl	801549c <uxr_millis>
 80133ea:	2d00      	cmp	r5, #0
 80133ec:	4604      	mov	r4, r0
 80133ee:	dcec      	bgt.n	80133ca <uxr_ping_agent_attempts+0x96>
 80133f0:	f109 0901 	add.w	r9, r9, #1
 80133f4:	e7da      	b.n	80133ac <uxr_ping_agent_attempts+0x78>
 80133f6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80133fa:	a816      	add	r0, sp, #88	@ 0x58
 80133fc:	f7fa fda6 	bl	800df4c <ucdr_init_buffer>
 8013400:	ab05      	add	r3, sp, #20
 8013402:	f10d 0211 	add.w	r2, sp, #17
 8013406:	a916      	add	r1, sp, #88	@ 0x58
 8013408:	a808      	add	r0, sp, #32
 801340a:	e9cd aa08 	strd	sl, sl, [sp, #32]
 801340e:	f001 f9bb 	bl	8014788 <uxr_read_session_header>
 8013412:	22c8      	movs	r2, #200	@ 0xc8
 8013414:	2100      	movs	r1, #0
 8013416:	a81e      	add	r0, sp, #120	@ 0x78
 8013418:	f009 f874 	bl	801c504 <memset>
 801341c:	a816      	add	r0, sp, #88	@ 0x58
 801341e:	f7fa fdc5 	bl	800dfac <ucdr_buffer_remaining>
 8013422:	2804      	cmp	r0, #4
 8013424:	d814      	bhi.n	8013450 <uxr_ping_agent_attempts+0x11c>
 8013426:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 801342a:	f002 f837 	bl	801549c <uxr_millis>
 801342e:	1b00      	subs	r0, r0, r4
 8013430:	1a2d      	subs	r5, r5, r0
 8013432:	f002 f833 	bl	801549c <uxr_millis>
 8013436:	2d00      	cmp	r5, #0
 8013438:	4604      	mov	r4, r0
 801343a:	dd2a      	ble.n	8013492 <uxr_ping_agent_attempts+0x15e>
 801343c:	f1bb 0f00 	cmp.w	fp, #0
 8013440:	d0c3      	beq.n	80133ca <uxr_ping_agent_attempts+0x96>
 8013442:	46bb      	mov	fp, r7
 8013444:	4658      	mov	r0, fp
 8013446:	b051      	add	sp, #324	@ 0x144
 8013448:	ecbd 8b02 	vpop	{d8}
 801344c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013450:	f10d 0316 	add.w	r3, sp, #22
 8013454:	f10d 0213 	add.w	r2, sp, #19
 8013458:	f10d 0112 	add.w	r1, sp, #18
 801345c:	a816      	add	r0, sp, #88	@ 0x58
 801345e:	f88d a012 	strb.w	sl, [sp, #18]
 8013462:	f8ad a016 	strh.w	sl, [sp, #22]
 8013466:	f88d a013 	strb.w	sl, [sp, #19]
 801346a:	f002 fa1d 	bl	80158a8 <uxr_deserialize_submessage_header>
 801346e:	a816      	add	r0, sp, #88	@ 0x58
 8013470:	f7fa fd9c 	bl	800dfac <ucdr_buffer_remaining>
 8013474:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013478:	4298      	cmp	r0, r3
 801347a:	d3d4      	bcc.n	8013426 <uxr_ping_agent_attempts+0xf2>
 801347c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8013480:	2b06      	cmp	r3, #6
 8013482:	d1d0      	bne.n	8013426 <uxr_ping_agent_attempts+0xf2>
 8013484:	a916      	add	r1, sp, #88	@ 0x58
 8013486:	a81e      	add	r0, sp, #120	@ 0x78
 8013488:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 801348c:	f000 face 	bl	8013a2c <read_submessage_info>
 8013490:	e7c9      	b.n	8013426 <uxr_ping_agent_attempts+0xf2>
 8013492:	f1bb 0f00 	cmp.w	fp, #0
 8013496:	d1d4      	bne.n	8013442 <uxr_ping_agent_attempts+0x10e>
 8013498:	f109 0901 	add.w	r9, r9, #1
 801349c:	e786      	b.n	80133ac <uxr_ping_agent_attempts+0x78>
 801349e:	bf00      	nop
 80134a0:	0801d3cc 	.word	0x0801d3cc

080134a4 <uxr_buffer_request_data>:
 80134a4:	b530      	push	{r4, r5, lr}
 80134a6:	b095      	sub	sp, #84	@ 0x54
 80134a8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80134ac:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80134ae:	9303      	str	r3, [sp, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	2d00      	cmp	r5, #0
 80134b4:	bf14      	ite	ne
 80134b6:	2101      	movne	r1, #1
 80134b8:	4611      	moveq	r1, r2
 80134ba:	4604      	mov	r4, r0
 80134bc:	f88d 301c 	strb.w	r3, [sp, #28]
 80134c0:	f88d 201d 	strb.w	r2, [sp, #29]
 80134c4:	f88d 201e 	strb.w	r2, [sp, #30]
 80134c8:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 80134cc:	d021      	beq.n	8013512 <uxr_buffer_request_data+0x6e>
 80134ce:	682a      	ldr	r2, [r5, #0]
 80134d0:	686b      	ldr	r3, [r5, #4]
 80134d2:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80134d6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80134da:	2210      	movs	r2, #16
 80134dc:	2308      	movs	r3, #8
 80134de:	2100      	movs	r1, #0
 80134e0:	e9cd 3100 	strd	r3, r1, [sp]
 80134e4:	4620      	mov	r0, r4
 80134e6:	9905      	ldr	r1, [sp, #20]
 80134e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80134ea:	f001 f861 	bl	80145b0 <uxr_prepare_stream_to_write_submessage>
 80134ee:	b918      	cbnz	r0, 80134f8 <uxr_buffer_request_data+0x54>
 80134f0:	4604      	mov	r4, r0
 80134f2:	4620      	mov	r0, r4
 80134f4:	b015      	add	sp, #84	@ 0x54
 80134f6:	bd30      	pop	{r4, r5, pc}
 80134f8:	9904      	ldr	r1, [sp, #16]
 80134fa:	aa06      	add	r2, sp, #24
 80134fc:	4620      	mov	r0, r4
 80134fe:	f001 f98d 	bl	801481c <uxr_init_base_object_request>
 8013502:	a906      	add	r1, sp, #24
 8013504:	4604      	mov	r4, r0
 8013506:	a80c      	add	r0, sp, #48	@ 0x30
 8013508:	f003 f92e 	bl	8016768 <uxr_serialize_READ_DATA_Payload>
 801350c:	4620      	mov	r0, r4
 801350e:	b015      	add	sp, #84	@ 0x54
 8013510:	bd30      	pop	{r4, r5, pc}
 8013512:	2208      	movs	r2, #8
 8013514:	e7e2      	b.n	80134dc <uxr_buffer_request_data+0x38>
 8013516:	bf00      	nop

08013518 <uxr_buffer_cancel_data>:
 8013518:	b510      	push	{r4, lr}
 801351a:	b094      	sub	sp, #80	@ 0x50
 801351c:	2300      	movs	r3, #0
 801351e:	9202      	str	r2, [sp, #8]
 8013520:	9205      	str	r2, [sp, #20]
 8013522:	9301      	str	r3, [sp, #4]
 8013524:	2201      	movs	r2, #1
 8013526:	f8ad 301c 	strh.w	r3, [sp, #28]
 801352a:	f88d 301e 	strb.w	r3, [sp, #30]
 801352e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8013532:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8013536:	2308      	movs	r3, #8
 8013538:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801353c:	9300      	str	r3, [sp, #0]
 801353e:	2210      	movs	r2, #16
 8013540:	ab0c      	add	r3, sp, #48	@ 0x30
 8013542:	4604      	mov	r4, r0
 8013544:	9103      	str	r1, [sp, #12]
 8013546:	f001 f833 	bl	80145b0 <uxr_prepare_stream_to_write_submessage>
 801354a:	b918      	cbnz	r0, 8013554 <uxr_buffer_cancel_data+0x3c>
 801354c:	4604      	mov	r4, r0
 801354e:	4620      	mov	r0, r4
 8013550:	b014      	add	sp, #80	@ 0x50
 8013552:	bd10      	pop	{r4, pc}
 8013554:	9905      	ldr	r1, [sp, #20]
 8013556:	aa06      	add	r2, sp, #24
 8013558:	4620      	mov	r0, r4
 801355a:	f001 f95f 	bl	801481c <uxr_init_base_object_request>
 801355e:	a906      	add	r1, sp, #24
 8013560:	4604      	mov	r4, r0
 8013562:	a80c      	add	r0, sp, #48	@ 0x30
 8013564:	f003 f900 	bl	8016768 <uxr_serialize_READ_DATA_Payload>
 8013568:	4620      	mov	r0, r4
 801356a:	b014      	add	sp, #80	@ 0x50
 801356c:	bd10      	pop	{r4, pc}
 801356e:	bf00      	nop

08013570 <read_submessage_format>:
 8013570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013574:	b095      	sub	sp, #84	@ 0x54
 8013576:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801357a:	b113      	cbz	r3, 8013582 <read_submessage_format+0x12>
 801357c:	b015      	add	sp, #84	@ 0x54
 801357e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013582:	460c      	mov	r4, r1
 8013584:	4615      	mov	r5, r2
 8013586:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801358a:	4607      	mov	r7, r0
 801358c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801358e:	9004      	str	r0, [sp, #16]
 8013590:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8013592:	9005      	str	r0, [sp, #20]
 8013594:	1a52      	subs	r2, r2, r1
 8013596:	a80c      	add	r0, sp, #48	@ 0x30
 8013598:	4699      	mov	r9, r3
 801359a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801359e:	f7fa fcd5 	bl	800df4c <ucdr_init_buffer>
 80135a2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80135a6:	a80c      	add	r0, sp, #48	@ 0x30
 80135a8:	f7fa fca4 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 80135ac:	69e2      	ldr	r2, [r4, #28]
 80135ae:	b19a      	cbz	r2, 80135d8 <read_submessage_format+0x68>
 80135b0:	f1b8 0f07 	cmp.w	r8, #7
 80135b4:	f882 9014 	strb.w	r9, [r2, #20]
 80135b8:	d040      	beq.n	801363c <read_submessage_format+0xcc>
 80135ba:	f1b8 0f08 	cmp.w	r8, #8
 80135be:	d02e      	beq.n	801361e <read_submessage_format+0xae>
 80135c0:	f1b8 0f06 	cmp.w	r8, #6
 80135c4:	d011      	beq.n	80135ea <read_submessage_format+0x7a>
 80135c6:	2301      	movs	r3, #1
 80135c8:	7513      	strb	r3, [r2, #20]
 80135ca:	4629      	mov	r1, r5
 80135cc:	4620      	mov	r0, r4
 80135ce:	f7fa fd0d 	bl	800dfec <ucdr_advance_buffer>
 80135d2:	b015      	add	sp, #84	@ 0x54
 80135d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135d8:	f1b8 0f07 	cmp.w	r8, #7
 80135dc:	d02e      	beq.n	801363c <read_submessage_format+0xcc>
 80135de:	f1b8 0f08 	cmp.w	r8, #8
 80135e2:	d01c      	beq.n	801361e <read_submessage_format+0xae>
 80135e4:	f1b8 0f06 	cmp.w	r8, #6
 80135e8:	d1ef      	bne.n	80135ca <read_submessage_format+0x5a>
 80135ea:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80135ee:	f1b8 0f00 	cmp.w	r8, #0
 80135f2:	d011      	beq.n	8013618 <read_submessage_format+0xa8>
 80135f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80135f6:	e9cd 3500 	strd	r3, r5, [sp]
 80135fa:	2306      	movs	r3, #6
 80135fc:	f88d 3016 	strb.w	r3, [sp, #22]
 8013600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013604:	9302      	str	r3, [sp, #8]
 8013606:	4632      	mov	r2, r6
 8013608:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801360c:	4638      	mov	r0, r7
 801360e:	47c0      	blx	r8
 8013610:	2301      	movs	r3, #1
 8013612:	69e2      	ldr	r2, [r4, #28]
 8013614:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013618:	2a00      	cmp	r2, #0
 801361a:	d1d4      	bne.n	80135c6 <read_submessage_format+0x56>
 801361c:	e7d5      	b.n	80135ca <read_submessage_format+0x5a>
 801361e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013622:	2b00      	cmp	r3, #0
 8013624:	d0f8      	beq.n	8013618 <read_submessage_format+0xa8>
 8013626:	a906      	add	r1, sp, #24
 8013628:	a80c      	add	r0, sp, #48	@ 0x30
 801362a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801362e:	f003 f961 	bl	80168f4 <uxr_deserialize_SampleIdentity>
 8013632:	b9a0      	cbnz	r0, 801365e <read_submessage_format+0xee>
 8013634:	69e2      	ldr	r2, [r4, #28]
 8013636:	2a00      	cmp	r2, #0
 8013638:	d1c5      	bne.n	80135c6 <read_submessage_format+0x56>
 801363a:	e7c6      	b.n	80135ca <read_submessage_format+0x5a>
 801363c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013640:	b13b      	cbz	r3, 8013652 <read_submessage_format+0xe2>
 8013642:	a906      	add	r1, sp, #24
 8013644:	a80c      	add	r0, sp, #48	@ 0x30
 8013646:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801364a:	f002 fe13 	bl	8016274 <uxr_deserialize_BaseObjectRequest>
 801364e:	bb60      	cbnz	r0, 80136aa <read_submessage_format+0x13a>
 8013650:	69e2      	ldr	r2, [r4, #28]
 8013652:	68a3      	ldr	r3, [r4, #8]
 8013654:	442b      	add	r3, r5
 8013656:	60a3      	str	r3, [r4, #8]
 8013658:	2a00      	cmp	r2, #0
 801365a:	d1b4      	bne.n	80135c6 <read_submessage_format+0x56>
 801365c:	e7b5      	b.n	80135ca <read_submessage_format+0x5a>
 801365e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013662:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013664:	1a52      	subs	r2, r2, r1
 8013666:	eba8 0803 	sub.w	r8, r8, r3
 801366a:	a80c      	add	r0, sp, #48	@ 0x30
 801366c:	f7fa fc6e 	bl	800df4c <ucdr_init_buffer>
 8013670:	44a8      	add	r8, r5
 8013672:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013676:	a80c      	add	r0, sp, #48	@ 0x30
 8013678:	f7fa fc3c 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 801367c:	fa1f f888 	uxth.w	r8, r8
 8013680:	ab0c      	add	r3, sp, #48	@ 0x30
 8013682:	9300      	str	r3, [sp, #0]
 8013684:	f8cd 8004 	str.w	r8, [sp, #4]
 8013688:	2108      	movs	r1, #8
 801368a:	f88d 1016 	strb.w	r1, [sp, #22]
 801368e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8013692:	9102      	str	r1, [sp, #8]
 8013694:	ab06      	add	r3, sp, #24
 8013696:	4632      	mov	r2, r6
 8013698:	9905      	ldr	r1, [sp, #20]
 801369a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801369e:	4638      	mov	r0, r7
 80136a0:	47b0      	blx	r6
 80136a2:	2301      	movs	r3, #1
 80136a4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80136a8:	e7c4      	b.n	8013634 <read_submessage_format+0xc4>
 80136aa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80136ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80136b0:	1a52      	subs	r2, r2, r1
 80136b2:	a80c      	add	r0, sp, #48	@ 0x30
 80136b4:	eba8 0803 	sub.w	r8, r8, r3
 80136b8:	f7fa fc48 	bl	800df4c <ucdr_init_buffer>
 80136bc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80136c0:	a80c      	add	r0, sp, #48	@ 0x30
 80136c2:	f7fa fc17 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 80136c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80136c8:	9300      	str	r3, [sp, #0]
 80136ca:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80136ce:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80136d2:	44a8      	add	r8, r5
 80136d4:	fa1f f888 	uxth.w	r8, r8
 80136d8:	f8cd 8004 	str.w	r8, [sp, #4]
 80136dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80136e0:	2107      	movs	r1, #7
 80136e2:	f88d 1016 	strb.w	r1, [sp, #22]
 80136e6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80136ea:	9102      	str	r1, [sp, #8]
 80136ec:	4632      	mov	r2, r6
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80136f4:	9905      	ldr	r1, [sp, #20]
 80136f6:	4638      	mov	r0, r7
 80136f8:	47b0      	blx	r6
 80136fa:	2301      	movs	r3, #1
 80136fc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013700:	e7a6      	b.n	8013650 <read_submessage_format+0xe0>
 8013702:	bf00      	nop

08013704 <on_get_fragmentation_info>:
 8013704:	b500      	push	{lr}
 8013706:	b08b      	sub	sp, #44	@ 0x2c
 8013708:	4601      	mov	r1, r0
 801370a:	2204      	movs	r2, #4
 801370c:	a802      	add	r0, sp, #8
 801370e:	f7fa fc1d 	bl	800df4c <ucdr_init_buffer>
 8013712:	f10d 0305 	add.w	r3, sp, #5
 8013716:	f10d 0206 	add.w	r2, sp, #6
 801371a:	a901      	add	r1, sp, #4
 801371c:	a802      	add	r0, sp, #8
 801371e:	f001 fe91 	bl	8015444 <uxr_read_submessage_header>
 8013722:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013726:	2b0d      	cmp	r3, #13
 8013728:	d003      	beq.n	8013732 <on_get_fragmentation_info+0x2e>
 801372a:	2000      	movs	r0, #0
 801372c:	b00b      	add	sp, #44	@ 0x2c
 801372e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013732:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013736:	f013 0f02 	tst.w	r3, #2
 801373a:	bf14      	ite	ne
 801373c:	2002      	movne	r0, #2
 801373e:	2001      	moveq	r0, #1
 8013740:	b00b      	add	sp, #44	@ 0x2c
 8013742:	f85d fb04 	ldr.w	pc, [sp], #4
 8013746:	bf00      	nop

08013748 <read_submessage_get_info>:
 8013748:	b570      	push	{r4, r5, r6, lr}
 801374a:	2500      	movs	r5, #0
 801374c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013750:	4604      	mov	r4, r0
 8013752:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8013756:	460e      	mov	r6, r1
 8013758:	a810      	add	r0, sp, #64	@ 0x40
 801375a:	4629      	mov	r1, r5
 801375c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013760:	f008 fed0 	bl	801c504 <memset>
 8013764:	a903      	add	r1, sp, #12
 8013766:	4630      	mov	r0, r6
 8013768:	f002 ff40 	bl	80165ec <uxr_deserialize_GET_INFO_Payload>
 801376c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013770:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8013774:	4620      	mov	r0, r4
 8013776:	f001 f849 	bl	801480c <uxr_session_header_offset>
 801377a:	462b      	mov	r3, r5
 801377c:	9000      	str	r0, [sp, #0]
 801377e:	220c      	movs	r2, #12
 8013780:	a905      	add	r1, sp, #20
 8013782:	a808      	add	r0, sp, #32
 8013784:	f7fa fbd0 	bl	800df28 <ucdr_init_buffer_origin_offset>
 8013788:	a910      	add	r1, sp, #64	@ 0x40
 801378a:	a808      	add	r0, sp, #32
 801378c:	f002 ffa0 	bl	80166d0 <uxr_serialize_INFO_Payload>
 8013790:	9b08      	ldr	r3, [sp, #32]
 8013792:	462a      	mov	r2, r5
 8013794:	4629      	mov	r1, r5
 8013796:	4620      	mov	r0, r4
 8013798:	f000 ffe2 	bl	8014760 <uxr_stamp_session_header>
 801379c:	a808      	add	r0, sp, #32
 801379e:	f7fa fc01 	bl	800dfa4 <ucdr_buffer_length>
 80137a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80137a4:	4602      	mov	r2, r0
 80137a6:	a905      	add	r1, sp, #20
 80137a8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80137ac:	47a0      	blx	r4
 80137ae:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80137b2:	bd70      	pop	{r4, r5, r6, pc}

080137b4 <write_submessage_acknack.isra.0>:
 80137b4:	b570      	push	{r4, r5, r6, lr}
 80137b6:	b092      	sub	sp, #72	@ 0x48
 80137b8:	4605      	mov	r5, r0
 80137ba:	460e      	mov	r6, r1
 80137bc:	4614      	mov	r4, r2
 80137be:	f001 f825 	bl	801480c <uxr_session_header_offset>
 80137c2:	a905      	add	r1, sp, #20
 80137c4:	9000      	str	r0, [sp, #0]
 80137c6:	2300      	movs	r3, #0
 80137c8:	a80a      	add	r0, sp, #40	@ 0x28
 80137ca:	2211      	movs	r2, #17
 80137cc:	f7fa fbac 	bl	800df28 <ucdr_init_buffer_origin_offset>
 80137d0:	2218      	movs	r2, #24
 80137d2:	fb02 5404 	mla	r4, r2, r4, r5
 80137d6:	2300      	movs	r3, #0
 80137d8:	2205      	movs	r2, #5
 80137da:	3450      	adds	r4, #80	@ 0x50
 80137dc:	210a      	movs	r1, #10
 80137de:	a80a      	add	r0, sp, #40	@ 0x28
 80137e0:	f001 fe16 	bl	8015410 <uxr_buffer_submessage_header>
 80137e4:	a903      	add	r1, sp, #12
 80137e6:	4620      	mov	r0, r4
 80137e8:	f006 fd0a 	bl	801a200 <uxr_compute_acknack>
 80137ec:	ba40      	rev16	r0, r0
 80137ee:	f8ad 000e 	strh.w	r0, [sp, #14]
 80137f2:	a903      	add	r1, sp, #12
 80137f4:	a80a      	add	r0, sp, #40	@ 0x28
 80137f6:	f88d 6010 	strb.w	r6, [sp, #16]
 80137fa:	f002 ffd9 	bl	80167b0 <uxr_serialize_ACKNACK_Payload>
 80137fe:	2200      	movs	r2, #0
 8013800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013802:	4611      	mov	r1, r2
 8013804:	4628      	mov	r0, r5
 8013806:	f000 ffab 	bl	8014760 <uxr_stamp_session_header>
 801380a:	a80a      	add	r0, sp, #40	@ 0x28
 801380c:	f7fa fbca 	bl	800dfa4 <ucdr_buffer_length>
 8013810:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8013812:	4602      	mov	r2, r0
 8013814:	a905      	add	r1, sp, #20
 8013816:	e9d3 0400 	ldrd	r0, r4, [r3]
 801381a:	47a0      	blx	r4
 801381c:	b012      	add	sp, #72	@ 0x48
 801381e:	bd70      	pop	{r4, r5, r6, pc}

08013820 <uxr_init_session>:
 8013820:	b510      	push	{r4, lr}
 8013822:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013858 <uxr_init_session+0x38>
 8013826:	2300      	movs	r3, #0
 8013828:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801382c:	4604      	mov	r4, r0
 801382e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8013832:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8013836:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801383a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801383e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8013842:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8013846:	2181      	movs	r1, #129	@ 0x81
 8013848:	f000 fef6 	bl	8014638 <uxr_init_session_info>
 801384c:	f104 0008 	add.w	r0, r4, #8
 8013850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013854:	f001 bcf8 	b.w	8015248 <uxr_init_stream_storage>
	...

08013860 <uxr_set_status_callback>:
 8013860:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop

08013868 <uxr_set_topic_callback>:
 8013868:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801386c:	4770      	bx	lr
 801386e:	bf00      	nop

08013870 <uxr_set_request_callback>:
 8013870:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8013874:	4770      	bx	lr
 8013876:	bf00      	nop

08013878 <uxr_set_reply_callback>:
 8013878:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop

08013880 <uxr_create_output_best_effort_stream>:
 8013880:	b510      	push	{r4, lr}
 8013882:	b084      	sub	sp, #16
 8013884:	e9cd 2100 	strd	r2, r1, [sp]
 8013888:	4604      	mov	r4, r0
 801388a:	f000 ffbf 	bl	801480c <uxr_session_header_offset>
 801388e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013892:	4603      	mov	r3, r0
 8013894:	f104 0008 	add.w	r0, r4, #8
 8013898:	b004      	add	sp, #16
 801389a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801389e:	f001 bd1d 	b.w	80152dc <uxr_add_output_best_effort_buffer>
 80138a2:	bf00      	nop

080138a4 <uxr_create_output_reliable_stream>:
 80138a4:	b510      	push	{r4, lr}
 80138a6:	b088      	sub	sp, #32
 80138a8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80138ac:	4604      	mov	r4, r0
 80138ae:	9303      	str	r3, [sp, #12]
 80138b0:	f000 ffac 	bl	801480c <uxr_session_header_offset>
 80138b4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80138b8:	9000      	str	r0, [sp, #0]
 80138ba:	9905      	ldr	r1, [sp, #20]
 80138bc:	f104 0008 	add.w	r0, r4, #8
 80138c0:	f001 fd20 	bl	8015304 <uxr_add_output_reliable_buffer>
 80138c4:	2200      	movs	r2, #0
 80138c6:	b2c3      	uxtb	r3, r0
 80138c8:	f363 0207 	bfi	r2, r3, #0, #8
 80138cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80138d0:	f363 220f 	bfi	r2, r3, #8, #8
 80138d4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80138d8:	f363 4217 	bfi	r2, r3, #16, #8
 80138dc:	0e03      	lsrs	r3, r0, #24
 80138de:	f363 621f 	bfi	r2, r3, #24, #8
 80138e2:	4610      	mov	r0, r2
 80138e4:	b008      	add	sp, #32
 80138e6:	bd10      	pop	{r4, pc}

080138e8 <uxr_create_input_best_effort_stream>:
 80138e8:	b082      	sub	sp, #8
 80138ea:	3008      	adds	r0, #8
 80138ec:	b002      	add	sp, #8
 80138ee:	f001 bd23 	b.w	8015338 <uxr_add_input_best_effort_buffer>
 80138f2:	bf00      	nop

080138f4 <uxr_create_input_reliable_stream>:
 80138f4:	b510      	push	{r4, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	4c0b      	ldr	r4, [pc, #44]	@ (8013928 <uxr_create_input_reliable_stream+0x34>)
 80138fa:	9400      	str	r4, [sp, #0]
 80138fc:	3008      	adds	r0, #8
 80138fe:	f001 fd31 	bl	8015364 <uxr_add_input_reliable_buffer>
 8013902:	2200      	movs	r2, #0
 8013904:	b2c3      	uxtb	r3, r0
 8013906:	f363 0207 	bfi	r2, r3, #0, #8
 801390a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801390e:	f363 220f 	bfi	r2, r3, #8, #8
 8013912:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013916:	f363 4217 	bfi	r2, r3, #16, #8
 801391a:	0e03      	lsrs	r3, r0, #24
 801391c:	f363 621f 	bfi	r2, r3, #24, #8
 8013920:	4610      	mov	r0, r2
 8013922:	b004      	add	sp, #16
 8013924:	bd10      	pop	{r4, pc}
 8013926:	bf00      	nop
 8013928:	08013705 	.word	0x08013705

0801392c <uxr_epoch_nanos>:
 801392c:	b510      	push	{r4, lr}
 801392e:	4604      	mov	r4, r0
 8013930:	f001 fdce 	bl	80154d0 <uxr_nanos>
 8013934:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013938:	1ac0      	subs	r0, r0, r3
 801393a:	eb61 0102 	sbc.w	r1, r1, r2
 801393e:	bd10      	pop	{r4, pc}

08013940 <uxr_flash_output_streams>:
 8013940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013944:	7e03      	ldrb	r3, [r0, #24]
 8013946:	b084      	sub	sp, #16
 8013948:	4604      	mov	r4, r0
 801394a:	2b00      	cmp	r3, #0
 801394c:	d035      	beq.n	80139ba <uxr_flash_output_streams+0x7a>
 801394e:	f04f 0900 	mov.w	r9, #0
 8013952:	4648      	mov	r0, r9
 8013954:	f10d 0802 	add.w	r8, sp, #2
 8013958:	af03      	add	r7, sp, #12
 801395a:	ae02      	add	r6, sp, #8
 801395c:	e006      	b.n	801396c <uxr_flash_output_streams+0x2c>
 801395e:	7e23      	ldrb	r3, [r4, #24]
 8013960:	f109 0901 	add.w	r9, r9, #1
 8013964:	fa5f f089 	uxtb.w	r0, r9
 8013968:	4283      	cmp	r3, r0
 801396a:	d926      	bls.n	80139ba <uxr_flash_output_streams+0x7a>
 801396c:	2201      	movs	r2, #1
 801396e:	4611      	mov	r1, r2
 8013970:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8013974:	f001 fc14 	bl	80151a0 <uxr_stream_id>
 8013978:	3508      	adds	r5, #8
 801397a:	4684      	mov	ip, r0
 801397c:	4643      	mov	r3, r8
 801397e:	463a      	mov	r2, r7
 8013980:	4631      	mov	r1, r6
 8013982:	4628      	mov	r0, r5
 8013984:	f8cd c004 	str.w	ip, [sp, #4]
 8013988:	f006 fcc0 	bl	801a30c <uxr_prepare_best_effort_buffer_to_send>
 801398c:	2800      	cmp	r0, #0
 801398e:	d0e6      	beq.n	801395e <uxr_flash_output_streams+0x1e>
 8013990:	9b02      	ldr	r3, [sp, #8]
 8013992:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013996:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801399a:	4620      	mov	r0, r4
 801399c:	f000 fee0 	bl	8014760 <uxr_stamp_session_header>
 80139a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80139a2:	9a03      	ldr	r2, [sp, #12]
 80139a4:	685d      	ldr	r5, [r3, #4]
 80139a6:	6818      	ldr	r0, [r3, #0]
 80139a8:	9902      	ldr	r1, [sp, #8]
 80139aa:	47a8      	blx	r5
 80139ac:	f109 0901 	add.w	r9, r9, #1
 80139b0:	7e23      	ldrb	r3, [r4, #24]
 80139b2:	fa5f f089 	uxtb.w	r0, r9
 80139b6:	4283      	cmp	r3, r0
 80139b8:	d8d8      	bhi.n	801396c <uxr_flash_output_streams+0x2c>
 80139ba:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80139be:	b38b      	cbz	r3, 8013a24 <uxr_flash_output_streams+0xe4>
 80139c0:	f04f 0900 	mov.w	r9, #0
 80139c4:	f10d 0802 	add.w	r8, sp, #2
 80139c8:	af03      	add	r7, sp, #12
 80139ca:	ae02      	add	r6, sp, #8
 80139cc:	4648      	mov	r0, r9
 80139ce:	2201      	movs	r2, #1
 80139d0:	2102      	movs	r1, #2
 80139d2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80139d6:	f001 fbe3 	bl	80151a0 <uxr_stream_id>
 80139da:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80139de:	3520      	adds	r5, #32
 80139e0:	9001      	str	r0, [sp, #4]
 80139e2:	e00d      	b.n	8013a00 <uxr_flash_output_streams+0xc0>
 80139e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80139e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80139ec:	9b02      	ldr	r3, [sp, #8]
 80139ee:	f000 feb7 	bl	8014760 <uxr_stamp_session_header>
 80139f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80139f4:	9a03      	ldr	r2, [sp, #12]
 80139f6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80139fa:	9902      	ldr	r1, [sp, #8]
 80139fc:	6818      	ldr	r0, [r3, #0]
 80139fe:	47d0      	blx	sl
 8013a00:	4643      	mov	r3, r8
 8013a02:	463a      	mov	r2, r7
 8013a04:	4631      	mov	r1, r6
 8013a06:	4628      	mov	r0, r5
 8013a08:	f006 fe9e 	bl	801a748 <uxr_prepare_next_reliable_buffer_to_send>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	4620      	mov	r0, r4
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1e7      	bne.n	80139e4 <uxr_flash_output_streams+0xa4>
 8013a14:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013a18:	f109 0901 	add.w	r9, r9, #1
 8013a1c:	fa5f f089 	uxtb.w	r0, r9
 8013a20:	4283      	cmp	r3, r0
 8013a22:	d8d4      	bhi.n	80139ce <uxr_flash_output_streams+0x8e>
 8013a24:	b004      	add	sp, #16
 8013a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a2a:	bf00      	nop

08013a2c <read_submessage_info>:
 8013a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a30:	460d      	mov	r5, r1
 8013a32:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8013a36:	4669      	mov	r1, sp
 8013a38:	4607      	mov	r7, r0
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f002 fcd0 	bl	80163e0 <uxr_deserialize_BaseObjectReply>
 8013a40:	a902      	add	r1, sp, #8
 8013a42:	4604      	mov	r4, r0
 8013a44:	4628      	mov	r0, r5
 8013a46:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013a4a:	f7f8 ff85 	bl	800c958 <ucdr_deserialize_bool>
 8013a4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013a52:	4004      	ands	r4, r0
 8013a54:	b2e4      	uxtb	r4, r4
 8013a56:	b95b      	cbnz	r3, 8013a70 <read_submessage_info+0x44>
 8013a58:	a987      	add	r1, sp, #540	@ 0x21c
 8013a5a:	4628      	mov	r0, r5
 8013a5c:	f7f8 ff7c 	bl	800c958 <ucdr_deserialize_bool>
 8013a60:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8013a64:	4606      	mov	r6, r0
 8013a66:	b94b      	cbnz	r3, 8013a7c <read_submessage_info+0x50>
 8013a68:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a70:	a903      	add	r1, sp, #12
 8013a72:	4628      	mov	r0, r5
 8013a74:	f002 fb5c 	bl	8016130 <uxr_deserialize_ObjectVariant>
 8013a78:	4004      	ands	r4, r0
 8013a7a:	e7ed      	b.n	8013a58 <read_submessage_info+0x2c>
 8013a7c:	a988      	add	r1, sp, #544	@ 0x220
 8013a7e:	4628      	mov	r0, r5
 8013a80:	f7f8 ff98 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8013a84:	4234      	tst	r4, r6
 8013a86:	d0ef      	beq.n	8013a68 <read_submessage_info+0x3c>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d0ed      	beq.n	8013a68 <read_submessage_info+0x3c>
 8013a8c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8013a90:	2b0d      	cmp	r3, #13
 8013a92:	d1e9      	bne.n	8013a68 <read_submessage_info+0x3c>
 8013a94:	a98a      	add	r1, sp, #552	@ 0x228
 8013a96:	4628      	mov	r0, r5
 8013a98:	f7f9 fd32 	bl	800d500 <ucdr_deserialize_int16_t>
 8013a9c:	b140      	cbz	r0, 8013ab0 <read_submessage_info+0x84>
 8013a9e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dd07      	ble.n	8013ab6 <read_submessage_info+0x8a>
 8013aa6:	f1b8 0f00 	cmp.w	r8, #0
 8013aaa:	bf14      	ite	ne
 8013aac:	2001      	movne	r0, #1
 8013aae:	2002      	moveq	r0, #2
 8013ab0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8013ab4:	e7d8      	b.n	8013a68 <read_submessage_info+0x3c>
 8013ab6:	2000      	movs	r0, #0
 8013ab8:	e7fa      	b.n	8013ab0 <read_submessage_info+0x84>
 8013aba:	bf00      	nop

08013abc <read_submessage_list>:
 8013abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ac0:	b097      	sub	sp, #92	@ 0x5c
 8013ac2:	4ec1      	ldr	r6, [pc, #772]	@ (8013dc8 <read_submessage_list+0x30c>)
 8013ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	460d      	mov	r5, r1
 8013aca:	f04f 0801 	mov.w	r8, #1
 8013ace:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8013ad2:	aa0c      	add	r2, sp, #48	@ 0x30
 8013ad4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8013ad8:	4628      	mov	r0, r5
 8013ada:	f001 fcb3 	bl	8015444 <uxr_read_submessage_header>
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	f000 813e 	beq.w	8013d60 <read_submessage_list+0x2a4>
 8013ae4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8013ae8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013aec:	3b02      	subs	r3, #2
 8013aee:	2b0d      	cmp	r3, #13
 8013af0:	d8ed      	bhi.n	8013ace <read_submessage_list+0x12>
 8013af2:	a101      	add	r1, pc, #4	@ (adr r1, 8013af8 <read_submessage_list+0x3c>)
 8013af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013af8:	08013d57 	.word	0x08013d57
 8013afc:	08013acf 	.word	0x08013acf
 8013b00:	08013d47 	.word	0x08013d47
 8013b04:	08013ce5 	.word	0x08013ce5
 8013b08:	08013cdb 	.word	0x08013cdb
 8013b0c:	08013acf 	.word	0x08013acf
 8013b10:	08013acf 	.word	0x08013acf
 8013b14:	08013c3b 	.word	0x08013c3b
 8013b18:	08013bcb 	.word	0x08013bcb
 8013b1c:	08013b8b 	.word	0x08013b8b
 8013b20:	08013acf 	.word	0x08013acf
 8013b24:	08013acf 	.word	0x08013acf
 8013b28:	08013acf 	.word	0x08013acf
 8013b2c:	08013b31 	.word	0x08013b31
 8013b30:	a910      	add	r1, sp, #64	@ 0x40
 8013b32:	4628      	mov	r0, r5
 8013b34:	f002 fe8c 	bl	8016850 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013b38:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013b3c:	f1b9 0f00 	cmp.w	r9, #0
 8013b40:	f000 8116 	beq.w	8013d70 <read_submessage_list+0x2b4>
 8013b44:	f001 fcc4 	bl	80154d0 <uxr_nanos>
 8013b48:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8013b4a:	4602      	mov	r2, r0
 8013b4c:	460b      	mov	r3, r1
 8013b4e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013b50:	2100      	movs	r1, #0
 8013b52:	468c      	mov	ip, r1
 8013b54:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013b58:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013b5c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013b5e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8013b60:	468c      	mov	ip, r1
 8013b62:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013b66:	46e2      	mov	sl, ip
 8013b68:	46bc      	mov	ip, r7
 8013b6a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013b6e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013b72:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8013b76:	e9cd 7100 	strd	r7, r1, [sp]
 8013b7a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013b7e:	9106      	str	r1, [sp, #24]
 8013b80:	4620      	mov	r0, r4
 8013b82:	47c8      	blx	r9
 8013b84:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8013b88:	e7a1      	b.n	8013ace <read_submessage_list+0x12>
 8013b8a:	a910      	add	r1, sp, #64	@ 0x40
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	f002 fe4d 	bl	801682c <uxr_deserialize_HEARTBEAT_Payload>
 8013b92:	2100      	movs	r1, #0
 8013b94:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013b98:	f001 fb2c 	bl	80151f4 <uxr_stream_id_from_raw>
 8013b9c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013ba0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013ba2:	4639      	mov	r1, r7
 8013ba4:	f104 0008 	add.w	r0, r4, #8
 8013ba8:	f001 fc12 	bl	80153d0 <uxr_get_input_reliable_stream>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d08e      	beq.n	8013ace <read_submessage_list+0x12>
 8013bb0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8013bb4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013bb8:	f006 fb16 	bl	801a1e8 <uxr_process_heartbeat>
 8013bbc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013bc0:	463a      	mov	r2, r7
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	f7ff fdf6 	bl	80137b4 <write_submessage_acknack.isra.0>
 8013bc8:	e781      	b.n	8013ace <read_submessage_list+0x12>
 8013bca:	a910      	add	r1, sp, #64	@ 0x40
 8013bcc:	4628      	mov	r0, r5
 8013bce:	f002 fe05 	bl	80167dc <uxr_deserialize_ACKNACK_Payload>
 8013bd2:	2100      	movs	r1, #0
 8013bd4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013bd8:	f001 fb0c 	bl	80151f4 <uxr_stream_id_from_raw>
 8013bdc:	900d      	str	r0, [sp, #52]	@ 0x34
 8013bde:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013be2:	f104 0008 	add.w	r0, r4, #8
 8013be6:	f001 fbdf 	bl	80153a8 <uxr_get_output_reliable_stream>
 8013bea:	4607      	mov	r7, r0
 8013bec:	2800      	cmp	r0, #0
 8013bee:	f43f af6e 	beq.w	8013ace <read_submessage_list+0x12>
 8013bf2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8013bf6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8013bfa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013bfe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013c02:	b289      	uxth	r1, r1
 8013c04:	f006 fe4a 	bl	801a89c <uxr_process_acknack>
 8013c08:	4638      	mov	r0, r7
 8013c0a:	f006 fe07 	bl	801a81c <uxr_begin_output_nack_buffer_it>
 8013c0e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013c12:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013c16:	e006      	b.n	8013c26 <read_submessage_list+0x16a>
 8013c18:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013c1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013c1c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013c20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013c22:	6818      	ldr	r0, [r3, #0]
 8013c24:	47c8      	blx	r9
 8013c26:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8013c2a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013c2c:	4651      	mov	r1, sl
 8013c2e:	4638      	mov	r0, r7
 8013c30:	f006 fdf6 	bl	801a820 <uxr_next_reliable_nack_buffer_to_send>
 8013c34:	2800      	cmp	r0, #0
 8013c36:	d1ef      	bne.n	8013c18 <read_submessage_list+0x15c>
 8013c38:	e749      	b.n	8013ace <read_submessage_list+0x12>
 8013c3a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013c3e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8013c42:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013c46:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8013c4a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8013c4e:	4651      	mov	r1, sl
 8013c50:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013c54:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8013c58:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8013c5c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8013c60:	4628      	mov	r0, r5
 8013c62:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8013c66:	f002 fb05 	bl	8016274 <uxr_deserialize_BaseObjectRequest>
 8013c6a:	4650      	mov	r0, sl
 8013c6c:	a90f      	add	r1, sp, #60	@ 0x3c
 8013c6e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013c72:	f000 fdf1 	bl	8014858 <uxr_parse_base_object_request>
 8013c76:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8013c7a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013c7c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013c80:	9110      	str	r1, [sp, #64]	@ 0x40
 8013c82:	3f04      	subs	r7, #4
 8013c84:	f009 090e 	and.w	r9, r9, #14
 8013c88:	b2bf      	uxth	r7, r7
 8013c8a:	f1bb 0f00 	cmp.w	fp, #0
 8013c8e:	d006      	beq.n	8013c9e <read_submessage_list+0x1e2>
 8013c90:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013c94:	9300      	str	r3, [sp, #0]
 8013c96:	4652      	mov	r2, sl
 8013c98:	2300      	movs	r3, #0
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	47d8      	blx	fp
 8013c9e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013ca0:	b16a      	cbz	r2, 8013cbe <read_submessage_list+0x202>
 8013ca2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	3802      	subs	r0, #2
 8013ca8:	e002      	b.n	8013cb0 <read_submessage_list+0x1f4>
 8013caa:	3101      	adds	r1, #1
 8013cac:	4291      	cmp	r1, r2
 8013cae:	d006      	beq.n	8013cbe <read_submessage_list+0x202>
 8013cb0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013cb4:	4553      	cmp	r3, sl
 8013cb6:	d1f8      	bne.n	8013caa <read_submessage_list+0x1ee>
 8013cb8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013cba:	2200      	movs	r2, #0
 8013cbc:	545a      	strb	r2, [r3, r1]
 8013cbe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8013cc2:	9102      	str	r1, [sp, #8]
 8013cc4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013cc6:	9101      	str	r1, [sp, #4]
 8013cc8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013cca:	9100      	str	r1, [sp, #0]
 8013ccc:	464b      	mov	r3, r9
 8013cce:	463a      	mov	r2, r7
 8013cd0:	4629      	mov	r1, r5
 8013cd2:	4620      	mov	r0, r4
 8013cd4:	f7ff fc4c 	bl	8013570 <read_submessage_format>
 8013cd8:	e6f9      	b.n	8013ace <read_submessage_list+0x12>
 8013cda:	4629      	mov	r1, r5
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f7ff fea5 	bl	8013a2c <read_submessage_info>
 8013ce2:	e6f4      	b.n	8013ace <read_submessage_list+0x12>
 8013ce4:	2a00      	cmp	r2, #0
 8013ce6:	d03e      	beq.n	8013d66 <read_submessage_list+0x2aa>
 8013ce8:	a910      	add	r1, sp, #64	@ 0x40
 8013cea:	4628      	mov	r0, r5
 8013cec:	f002 fcd2 	bl	8016694 <uxr_deserialize_STATUS_Payload>
 8013cf0:	a90e      	add	r1, sp, #56	@ 0x38
 8013cf2:	aa0d      	add	r2, sp, #52	@ 0x34
 8013cf4:	a810      	add	r0, sp, #64	@ 0x40
 8013cf6:	f000 fdaf 	bl	8014858 <uxr_parse_base_object_request>
 8013cfa:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8013cfe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013d00:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8013d04:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013d08:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013d0a:	f1ba 0f00 	cmp.w	sl, #0
 8013d0e:	d006      	beq.n	8013d1e <read_submessage_list+0x262>
 8013d10:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	463a      	mov	r2, r7
 8013d18:	464b      	mov	r3, r9
 8013d1a:	4620      	mov	r0, r4
 8013d1c:	47d0      	blx	sl
 8013d1e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013d20:	2a00      	cmp	r2, #0
 8013d22:	f43f aed4 	beq.w	8013ace <read_submessage_list+0x12>
 8013d26:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013d28:	2100      	movs	r1, #0
 8013d2a:	3802      	subs	r0, #2
 8013d2c:	e003      	b.n	8013d36 <read_submessage_list+0x27a>
 8013d2e:	3101      	adds	r1, #1
 8013d30:	4291      	cmp	r1, r2
 8013d32:	f43f aecc 	beq.w	8013ace <read_submessage_list+0x12>
 8013d36:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013d3a:	42bb      	cmp	r3, r7
 8013d3c:	d1f7      	bne.n	8013d2e <read_submessage_list+0x272>
 8013d3e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013d40:	f803 9001 	strb.w	r9, [r3, r1]
 8013d44:	e6c3      	b.n	8013ace <read_submessage_list+0x12>
 8013d46:	2a00      	cmp	r2, #0
 8013d48:	f47f aec1 	bne.w	8013ace <read_submessage_list+0x12>
 8013d4c:	4629      	mov	r1, r5
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f000 fcc8 	bl	80146e4 <uxr_read_create_session_status>
 8013d54:	e6bb      	b.n	8013ace <read_submessage_list+0x12>
 8013d56:	4629      	mov	r1, r5
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f7ff fcf5 	bl	8013748 <read_submessage_get_info>
 8013d5e:	e6b6      	b.n	8013ace <read_submessage_list+0x12>
 8013d60:	b017      	add	sp, #92	@ 0x5c
 8013d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d66:	4629      	mov	r1, r5
 8013d68:	4620      	mov	r0, r4
 8013d6a:	f000 fcc7 	bl	80146fc <uxr_read_delete_session_status>
 8013d6e:	e6ae      	b.n	8013ace <read_submessage_list+0x12>
 8013d70:	f001 fbae 	bl	80154d0 <uxr_nanos>
 8013d74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013d76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013d78:	464f      	mov	r7, r9
 8013d7a:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013d7e:	1812      	adds	r2, r2, r0
 8013d80:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013d82:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013d84:	eb47 0101 	adc.w	r1, r7, r1
 8013d88:	464f      	mov	r7, r9
 8013d8a:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013d8e:	463b      	mov	r3, r7
 8013d90:	4684      	mov	ip, r0
 8013d92:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8013d96:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013d9a:	eb1c 0c00 	adds.w	ip, ip, r0
 8013d9e:	464f      	mov	r7, r9
 8013da0:	eb43 0307 	adc.w	r3, r3, r7
 8013da4:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013da8:	eb61 0303 	sbc.w	r3, r1, r3
 8013dac:	0fda      	lsrs	r2, r3, #31
 8013dae:	eb12 020c 	adds.w	r2, r2, ip
 8013db2:	f143 0300 	adc.w	r3, r3, #0
 8013db6:	0852      	lsrs	r2, r2, #1
 8013db8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013dbc:	105b      	asrs	r3, r3, #1
 8013dbe:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013dc2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013dc6:	e6dd      	b.n	8013b84 <read_submessage_list+0xc8>
 8013dc8:	3b9aca00 	.word	0x3b9aca00

08013dcc <listen_message_reliably>:
 8013dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dd0:	1e0b      	subs	r3, r1, #0
 8013dd2:	b09d      	sub	sp, #116	@ 0x74
 8013dd4:	bfb8      	it	lt
 8013dd6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8013dda:	4680      	mov	r8, r0
 8013ddc:	9305      	str	r3, [sp, #20]
 8013dde:	f001 fb5d 	bl	801549c <uxr_millis>
 8013de2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8013de6:	4681      	mov	r9, r0
 8013de8:	2a00      	cmp	r2, #0
 8013dea:	f000 80a1 	beq.w	8013f30 <listen_message_reliably+0x164>
 8013dee:	2600      	movs	r6, #0
 8013df0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013df4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013df8:	9303      	str	r3, [sp, #12]
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	460f      	mov	r7, r1
 8013dfe:	e00f      	b.n	8013e20 <listen_message_reliably+0x54>
 8013e00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013e04:	9903      	ldr	r1, [sp, #12]
 8013e06:	455a      	cmp	r2, fp
 8013e08:	f106 0601 	add.w	r6, r6, #1
 8013e0c:	eb73 0101 	sbcs.w	r1, r3, r1
 8013e10:	b2f0      	uxtb	r0, r6
 8013e12:	da01      	bge.n	8013e18 <listen_message_reliably+0x4c>
 8013e14:	4693      	mov	fp, r2
 8013e16:	9303      	str	r3, [sp, #12]
 8013e18:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013e1c:	4283      	cmp	r3, r0
 8013e1e:	d960      	bls.n	8013ee2 <listen_message_reliably+0x116>
 8013e20:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013e24:	2102      	movs	r1, #2
 8013e26:	2201      	movs	r2, #1
 8013e28:	f001 f9ba 	bl	80151a0 <uxr_stream_id>
 8013e2c:	00e4      	lsls	r4, r4, #3
 8013e2e:	f104 0520 	add.w	r5, r4, #32
 8013e32:	4445      	add	r5, r8
 8013e34:	4601      	mov	r1, r0
 8013e36:	463b      	mov	r3, r7
 8013e38:	464a      	mov	r2, r9
 8013e3a:	4628      	mov	r0, r5
 8013e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8013e3e:	f006 fcc3 	bl	801a7c8 <uxr_update_output_stream_heartbeat_timestamp>
 8013e42:	eb08 0304 	add.w	r3, r8, r4
 8013e46:	2800      	cmp	r0, #0
 8013e48:	d0da      	beq.n	8013e00 <listen_message_reliably+0x34>
 8013e4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013e4e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013e52:	9304      	str	r3, [sp, #16]
 8013e54:	4640      	mov	r0, r8
 8013e56:	f000 fcd9 	bl	801480c <uxr_session_header_offset>
 8013e5a:	3501      	adds	r5, #1
 8013e5c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013e60:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013e64:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013e68:	2300      	movs	r3, #0
 8013e6a:	2211      	movs	r2, #17
 8013e6c:	9000      	str	r0, [sp, #0]
 8013e6e:	a90c      	add	r1, sp, #48	@ 0x30
 8013e70:	4650      	mov	r0, sl
 8013e72:	f7fa f859 	bl	800df28 <ucdr_init_buffer_origin_offset>
 8013e76:	2300      	movs	r3, #0
 8013e78:	2205      	movs	r2, #5
 8013e7a:	210b      	movs	r1, #11
 8013e7c:	4650      	mov	r0, sl
 8013e7e:	f001 fac7 	bl	8015410 <uxr_buffer_submessage_header>
 8013e82:	8968      	ldrh	r0, [r5, #10]
 8013e84:	2101      	movs	r1, #1
 8013e86:	f006 fd61 	bl	801a94c <uxr_seq_num_add>
 8013e8a:	892b      	ldrh	r3, [r5, #8]
 8013e8c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013e90:	4602      	mov	r2, r0
 8013e92:	9b04      	ldr	r3, [sp, #16]
 8013e94:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013e98:	a90a      	add	r1, sp, #40	@ 0x28
 8013e9a:	4650      	mov	r0, sl
 8013e9c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013ea0:	f002 fcb0 	bl	8016804 <uxr_serialize_HEARTBEAT_Payload>
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	4611      	mov	r1, r2
 8013ea8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013eaa:	4640      	mov	r0, r8
 8013eac:	f000 fc58 	bl	8014760 <uxr_stamp_session_header>
 8013eb0:	4650      	mov	r0, sl
 8013eb2:	f7fa f877 	bl	800dfa4 <ucdr_buffer_length>
 8013eb6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013eba:	4602      	mov	r2, r0
 8013ebc:	a90c      	add	r1, sp, #48	@ 0x30
 8013ebe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013ec2:	4444      	add	r4, r8
 8013ec4:	47a8      	blx	r5
 8013ec6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8013eca:	9903      	ldr	r1, [sp, #12]
 8013ecc:	455a      	cmp	r2, fp
 8013ece:	f106 0601 	add.w	r6, r6, #1
 8013ed2:	eb73 0101 	sbcs.w	r1, r3, r1
 8013ed6:	b2f0      	uxtb	r0, r6
 8013ed8:	db9c      	blt.n	8013e14 <listen_message_reliably+0x48>
 8013eda:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013ede:	4283      	cmp	r3, r0
 8013ee0:	d89e      	bhi.n	8013e20 <listen_message_reliably+0x54>
 8013ee2:	9a03      	ldr	r2, [sp, #12]
 8013ee4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	bf08      	it	eq
 8013eec:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013ef0:	d01e      	beq.n	8013f30 <listen_message_reliably+0x164>
 8013ef2:	ebab 0309 	sub.w	r3, fp, r9
 8013ef6:	9905      	ldr	r1, [sp, #20]
 8013ef8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	bf08      	it	eq
 8013f00:	2301      	moveq	r3, #1
 8013f02:	4299      	cmp	r1, r3
 8013f04:	bfa8      	it	ge
 8013f06:	4619      	movge	r1, r3
 8013f08:	6894      	ldr	r4, [r2, #8]
 8013f0a:	6810      	ldr	r0, [r2, #0]
 8013f0c:	4689      	mov	r9, r1
 8013f0e:	460b      	mov	r3, r1
 8013f10:	aa08      	add	r2, sp, #32
 8013f12:	a907      	add	r1, sp, #28
 8013f14:	47a0      	blx	r4
 8013f16:	b968      	cbnz	r0, 8013f34 <listen_message_reliably+0x168>
 8013f18:	9b05      	ldr	r3, [sp, #20]
 8013f1a:	eba3 0309 	sub.w	r3, r3, r9
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	9305      	str	r3, [sp, #20]
 8013f22:	f73f af5c 	bgt.w	8013dde <listen_message_reliably+0x12>
 8013f26:	4604      	mov	r4, r0
 8013f28:	4620      	mov	r0, r4
 8013f2a:	b01d      	add	sp, #116	@ 0x74
 8013f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f30:	9b05      	ldr	r3, [sp, #20]
 8013f32:	e7e0      	b.n	8013ef6 <listen_message_reliably+0x12a>
 8013f34:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013f38:	4604      	mov	r4, r0
 8013f3a:	a80c      	add	r0, sp, #48	@ 0x30
 8013f3c:	f7fa f806 	bl	800df4c <ucdr_init_buffer>
 8013f40:	2500      	movs	r5, #0
 8013f42:	f10d 031a 	add.w	r3, sp, #26
 8013f46:	aa06      	add	r2, sp, #24
 8013f48:	a90c      	add	r1, sp, #48	@ 0x30
 8013f4a:	4640      	mov	r0, r8
 8013f4c:	f88d 5018 	strb.w	r5, [sp, #24]
 8013f50:	f000 fc1a 	bl	8014788 <uxr_read_session_header>
 8013f54:	b918      	cbnz	r0, 8013f5e <listen_message_reliably+0x192>
 8013f56:	4620      	mov	r0, r4
 8013f58:	b01d      	add	sp, #116	@ 0x74
 8013f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5e:	4629      	mov	r1, r5
 8013f60:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013f64:	f001 f946 	bl	80151f4 <uxr_stream_id_from_raw>
 8013f68:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013f6c:	2d01      	cmp	r5, #1
 8013f6e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013f72:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013f76:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013f7a:	d04b      	beq.n	8014014 <listen_message_reliably+0x248>
 8013f7c:	2d02      	cmp	r5, #2
 8013f7e:	d00f      	beq.n	8013fa0 <listen_message_reliably+0x1d4>
 8013f80:	2d00      	cmp	r5, #0
 8013f82:	d1e8      	bne.n	8013f56 <listen_message_reliably+0x18a>
 8013f84:	4629      	mov	r1, r5
 8013f86:	4628      	mov	r0, r5
 8013f88:	f001 f934 	bl	80151f4 <uxr_stream_id_from_raw>
 8013f8c:	a90c      	add	r1, sp, #48	@ 0x30
 8013f8e:	4602      	mov	r2, r0
 8013f90:	4640      	mov	r0, r8
 8013f92:	920a      	str	r2, [sp, #40]	@ 0x28
 8013f94:	f7ff fd92 	bl	8013abc <read_submessage_list>
 8013f98:	4620      	mov	r0, r4
 8013f9a:	b01d      	add	sp, #116	@ 0x74
 8013f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fa0:	4631      	mov	r1, r6
 8013fa2:	f108 0008 	add.w	r0, r8, #8
 8013fa6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013faa:	f001 fa11 	bl	80153d0 <uxr_get_input_reliable_stream>
 8013fae:	4607      	mov	r7, r0
 8013fb0:	b338      	cbz	r0, 8014002 <listen_message_reliably+0x236>
 8013fb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013fb4:	9203      	str	r2, [sp, #12]
 8013fb6:	a80c      	add	r0, sp, #48	@ 0x30
 8013fb8:	f7f9 fff8 	bl	800dfac <ucdr_buffer_remaining>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	f10d 0019 	add.w	r0, sp, #25
 8013fc2:	9000      	str	r0, [sp, #0]
 8013fc4:	9a03      	ldr	r2, [sp, #12]
 8013fc6:	4651      	mov	r1, sl
 8013fc8:	4638      	mov	r0, r7
 8013fca:	f006 f813 	bl	8019ff4 <uxr_receive_reliable_message>
 8013fce:	b1c0      	cbz	r0, 8014002 <listen_message_reliably+0x236>
 8013fd0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013fd4:	b393      	cbz	r3, 801403c <listen_message_reliably+0x270>
 8013fd6:	ad14      	add	r5, sp, #80	@ 0x50
 8013fd8:	f04f 0a02 	mov.w	sl, #2
 8013fdc:	e00a      	b.n	8013ff4 <listen_message_reliably+0x228>
 8013fde:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013fe2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013fe6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013fea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013fec:	4629      	mov	r1, r5
 8013fee:	4640      	mov	r0, r8
 8013ff0:	f7ff fd64 	bl	8013abc <read_submessage_list>
 8013ff4:	2204      	movs	r2, #4
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	4638      	mov	r0, r7
 8013ffa:	f006 f87b 	bl	801a0f4 <uxr_next_input_reliable_buffer_available>
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d1ed      	bne.n	8013fde <listen_message_reliably+0x212>
 8014002:	4640      	mov	r0, r8
 8014004:	4632      	mov	r2, r6
 8014006:	4649      	mov	r1, r9
 8014008:	f7ff fbd4 	bl	80137b4 <write_submessage_acknack.isra.0>
 801400c:	4620      	mov	r0, r4
 801400e:	b01d      	add	sp, #116	@ 0x74
 8014010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014014:	4631      	mov	r1, r6
 8014016:	f108 0008 	add.w	r0, r8, #8
 801401a:	f001 f9cf 	bl	80153bc <uxr_get_input_best_effort_stream>
 801401e:	2800      	cmp	r0, #0
 8014020:	d099      	beq.n	8013f56 <listen_message_reliably+0x18a>
 8014022:	4651      	mov	r1, sl
 8014024:	f005 ff52 	bl	8019ecc <uxr_receive_best_effort_message>
 8014028:	2800      	cmp	r0, #0
 801402a:	d094      	beq.n	8013f56 <listen_message_reliably+0x18a>
 801402c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014030:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014032:	a90c      	add	r1, sp, #48	@ 0x30
 8014034:	4640      	mov	r0, r8
 8014036:	f7ff fd41 	bl	8013abc <read_submessage_list>
 801403a:	e78c      	b.n	8013f56 <listen_message_reliably+0x18a>
 801403c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014042:	a90c      	add	r1, sp, #48	@ 0x30
 8014044:	4640      	mov	r0, r8
 8014046:	f7ff fd39 	bl	8013abc <read_submessage_list>
 801404a:	e7c4      	b.n	8013fd6 <listen_message_reliably+0x20a>

0801404c <uxr_run_session_timeout>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	4604      	mov	r4, r0
 8014050:	460d      	mov	r5, r1
 8014052:	f001 fa23 	bl	801549c <uxr_millis>
 8014056:	4606      	mov	r6, r0
 8014058:	4620      	mov	r0, r4
 801405a:	f7ff fc71 	bl	8013940 <uxr_flash_output_streams>
 801405e:	4629      	mov	r1, r5
 8014060:	4620      	mov	r0, r4
 8014062:	f7ff feb3 	bl	8013dcc <listen_message_reliably>
 8014066:	f001 fa19 	bl	801549c <uxr_millis>
 801406a:	1b83      	subs	r3, r0, r6
 801406c:	1ae9      	subs	r1, r5, r3
 801406e:	2900      	cmp	r1, #0
 8014070:	dcf6      	bgt.n	8014060 <uxr_run_session_timeout+0x14>
 8014072:	f104 0008 	add.w	r0, r4, #8
 8014076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801407a:	f001 b9b3 	b.w	80153e4 <uxr_output_streams_confirmed>
 801407e:	bf00      	nop

08014080 <uxr_run_session_until_data>:
 8014080:	b570      	push	{r4, r5, r6, lr}
 8014082:	4604      	mov	r4, r0
 8014084:	460d      	mov	r5, r1
 8014086:	f001 fa09 	bl	801549c <uxr_millis>
 801408a:	4606      	mov	r6, r0
 801408c:	4620      	mov	r0, r4
 801408e:	f7ff fc57 	bl	8013940 <uxr_flash_output_streams>
 8014092:	2300      	movs	r3, #0
 8014094:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8014098:	4629      	mov	r1, r5
 801409a:	e005      	b.n	80140a8 <uxr_run_session_until_data+0x28>
 801409c:	f001 f9fe 	bl	801549c <uxr_millis>
 80140a0:	1b83      	subs	r3, r0, r6
 80140a2:	1ae9      	subs	r1, r5, r3
 80140a4:	2900      	cmp	r1, #0
 80140a6:	dd07      	ble.n	80140b8 <uxr_run_session_until_data+0x38>
 80140a8:	4620      	mov	r0, r4
 80140aa:	f7ff fe8f 	bl	8013dcc <listen_message_reliably>
 80140ae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80140b2:	2800      	cmp	r0, #0
 80140b4:	d0f2      	beq.n	801409c <uxr_run_session_until_data+0x1c>
 80140b6:	bd70      	pop	{r4, r5, r6, pc}
 80140b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80140bc:	bd70      	pop	{r4, r5, r6, pc}
 80140be:	bf00      	nop

080140c0 <uxr_run_session_until_confirm_delivery>:
 80140c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c4:	4606      	mov	r6, r0
 80140c6:	460d      	mov	r5, r1
 80140c8:	f001 f9e8 	bl	801549c <uxr_millis>
 80140cc:	4607      	mov	r7, r0
 80140ce:	4630      	mov	r0, r6
 80140d0:	f7ff fc36 	bl	8013940 <uxr_flash_output_streams>
 80140d4:	2d00      	cmp	r5, #0
 80140d6:	f106 0808 	add.w	r8, r6, #8
 80140da:	bfa8      	it	ge
 80140dc:	462c      	movge	r4, r5
 80140de:	da07      	bge.n	80140f0 <uxr_run_session_until_confirm_delivery+0x30>
 80140e0:	e00e      	b.n	8014100 <uxr_run_session_until_confirm_delivery+0x40>
 80140e2:	f7ff fe73 	bl	8013dcc <listen_message_reliably>
 80140e6:	f001 f9d9 	bl	801549c <uxr_millis>
 80140ea:	1bc3      	subs	r3, r0, r7
 80140ec:	1aec      	subs	r4, r5, r3
 80140ee:	d407      	bmi.n	8014100 <uxr_run_session_until_confirm_delivery+0x40>
 80140f0:	4640      	mov	r0, r8
 80140f2:	f001 f977 	bl	80153e4 <uxr_output_streams_confirmed>
 80140f6:	4603      	mov	r3, r0
 80140f8:	4621      	mov	r1, r4
 80140fa:	4630      	mov	r0, r6
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d0f0      	beq.n	80140e2 <uxr_run_session_until_confirm_delivery+0x22>
 8014100:	4640      	mov	r0, r8
 8014102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014106:	f001 b96d 	b.w	80153e4 <uxr_output_streams_confirmed>
 801410a:	bf00      	nop

0801410c <uxr_run_session_until_all_status>:
 801410c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014110:	9c08      	ldr	r4, [sp, #32]
 8014112:	4606      	mov	r6, r0
 8014114:	460f      	mov	r7, r1
 8014116:	4691      	mov	r9, r2
 8014118:	461d      	mov	r5, r3
 801411a:	f7ff fc11 	bl	8013940 <uxr_flash_output_streams>
 801411e:	b124      	cbz	r4, 801412a <uxr_run_session_until_all_status+0x1e>
 8014120:	4622      	mov	r2, r4
 8014122:	21ff      	movs	r1, #255	@ 0xff
 8014124:	4628      	mov	r0, r5
 8014126:	f008 f9ed 	bl	801c504 <memset>
 801412a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 801412e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8014130:	f001 f9b4 	bl	801549c <uxr_millis>
 8014134:	3d01      	subs	r5, #1
 8014136:	f1a9 0902 	sub.w	r9, r9, #2
 801413a:	4680      	mov	r8, r0
 801413c:	4639      	mov	r1, r7
 801413e:	4630      	mov	r0, r6
 8014140:	f7ff fe44 	bl	8013dcc <listen_message_reliably>
 8014144:	f001 f9aa 	bl	801549c <uxr_millis>
 8014148:	eba0 0008 	sub.w	r0, r0, r8
 801414c:	1a39      	subs	r1, r7, r0
 801414e:	b344      	cbz	r4, 80141a2 <uxr_run_session_until_all_status+0x96>
 8014150:	4628      	mov	r0, r5
 8014152:	46ac      	mov	ip, r5
 8014154:	2301      	movs	r3, #1
 8014156:	e002      	b.n	801415e <uxr_run_session_until_all_status+0x52>
 8014158:	42a3      	cmp	r3, r4
 801415a:	d20d      	bcs.n	8014178 <uxr_run_session_until_all_status+0x6c>
 801415c:	3301      	adds	r3, #1
 801415e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8014162:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8014166:	d1f7      	bne.n	8014158 <uxr_run_session_until_all_status+0x4c>
 8014168:	42a3      	cmp	r3, r4
 801416a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 801416e:	d213      	bcs.n	8014198 <uxr_run_session_until_all_status+0x8c>
 8014170:	2a00      	cmp	r2, #0
 8014172:	d0f3      	beq.n	801415c <uxr_run_session_until_all_status+0x50>
 8014174:	2900      	cmp	r1, #0
 8014176:	dce2      	bgt.n	801413e <uxr_run_session_until_all_status+0x32>
 8014178:	2300      	movs	r3, #0
 801417a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 801417c:	442c      	add	r4, r5
 801417e:	e001      	b.n	8014184 <uxr_run_session_until_all_status+0x78>
 8014180:	2b01      	cmp	r3, #1
 8014182:	d812      	bhi.n	80141aa <uxr_run_session_until_all_status+0x9e>
 8014184:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014188:	4284      	cmp	r4, r0
 801418a:	d1f9      	bne.n	8014180 <uxr_run_session_until_all_status+0x74>
 801418c:	2b01      	cmp	r3, #1
 801418e:	bf8c      	ite	hi
 8014190:	2000      	movhi	r0, #0
 8014192:	2001      	movls	r0, #1
 8014194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014198:	2900      	cmp	r1, #0
 801419a:	dded      	ble.n	8014178 <uxr_run_session_until_all_status+0x6c>
 801419c:	2a00      	cmp	r2, #0
 801419e:	d1ce      	bne.n	801413e <uxr_run_session_until_all_status+0x32>
 80141a0:	e7ea      	b.n	8014178 <uxr_run_session_until_all_status+0x6c>
 80141a2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80141a4:	2001      	movs	r0, #1
 80141a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141aa:	2000      	movs	r0, #0
 80141ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080141b0 <uxr_run_session_until_pong>:
 80141b0:	b570      	push	{r4, r5, r6, lr}
 80141b2:	4604      	mov	r4, r0
 80141b4:	460d      	mov	r5, r1
 80141b6:	f001 f971 	bl	801549c <uxr_millis>
 80141ba:	4606      	mov	r6, r0
 80141bc:	4620      	mov	r0, r4
 80141be:	f7ff fbbf 	bl	8013940 <uxr_flash_output_streams>
 80141c2:	2300      	movs	r3, #0
 80141c4:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 80141c8:	4629      	mov	r1, r5
 80141ca:	e005      	b.n	80141d8 <uxr_run_session_until_pong+0x28>
 80141cc:	f001 f966 	bl	801549c <uxr_millis>
 80141d0:	1b83      	subs	r3, r0, r6
 80141d2:	1ae9      	subs	r1, r5, r3
 80141d4:	2900      	cmp	r1, #0
 80141d6:	dd0c      	ble.n	80141f2 <uxr_run_session_until_pong+0x42>
 80141d8:	4620      	mov	r0, r4
 80141da:	f7ff fdf7 	bl	8013dcc <listen_message_reliably>
 80141de:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80141e2:	2800      	cmp	r0, #0
 80141e4:	d0f2      	beq.n	80141cc <uxr_run_session_until_pong+0x1c>
 80141e6:	f1a0 0001 	sub.w	r0, r0, #1
 80141ea:	fab0 f080 	clz	r0, r0
 80141ee:	0940      	lsrs	r0, r0, #5
 80141f0:	bd70      	pop	{r4, r5, r6, pc}
 80141f2:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80141f6:	f1a0 0001 	sub.w	r0, r0, #1
 80141fa:	fab0 f080 	clz	r0, r0
 80141fe:	0940      	lsrs	r0, r0, #5
 8014200:	bd70      	pop	{r4, r5, r6, pc}
 8014202:	bf00      	nop

08014204 <wait_session_status>:
 8014204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014208:	4604      	mov	r4, r0
 801420a:	b09d      	sub	sp, #116	@ 0x74
 801420c:	20ff      	movs	r0, #255	@ 0xff
 801420e:	7160      	strb	r0, [r4, #5]
 8014210:	9303      	str	r3, [sp, #12]
 8014212:	2b00      	cmp	r3, #0
 8014214:	f000 80b6 	beq.w	8014384 <wait_session_status+0x180>
 8014218:	468a      	mov	sl, r1
 801421a:	4691      	mov	r9, r2
 801421c:	f04f 0b00 	mov.w	fp, #0
 8014220:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014222:	464a      	mov	r2, r9
 8014224:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014228:	4651      	mov	r1, sl
 801422a:	47a8      	blx	r5
 801422c:	f001 f936 	bl	801549c <uxr_millis>
 8014230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014234:	4605      	mov	r5, r0
 8014236:	e009      	b.n	801424c <wait_session_status+0x48>
 8014238:	f001 f930 	bl	801549c <uxr_millis>
 801423c:	1b40      	subs	r0, r0, r5
 801423e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014242:	2b00      	cmp	r3, #0
 8014244:	dd40      	ble.n	80142c8 <wait_session_status+0xc4>
 8014246:	7960      	ldrb	r0, [r4, #5]
 8014248:	28ff      	cmp	r0, #255	@ 0xff
 801424a:	d145      	bne.n	80142d8 <wait_session_status+0xd4>
 801424c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801424e:	a908      	add	r1, sp, #32
 8014250:	6896      	ldr	r6, [r2, #8]
 8014252:	6810      	ldr	r0, [r2, #0]
 8014254:	aa09      	add	r2, sp, #36	@ 0x24
 8014256:	47b0      	blx	r6
 8014258:	2800      	cmp	r0, #0
 801425a:	d0ed      	beq.n	8014238 <wait_session_status+0x34>
 801425c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014260:	a80c      	add	r0, sp, #48	@ 0x30
 8014262:	f7f9 fe73 	bl	800df4c <ucdr_init_buffer>
 8014266:	2600      	movs	r6, #0
 8014268:	f10d 031e 	add.w	r3, sp, #30
 801426c:	aa07      	add	r2, sp, #28
 801426e:	a90c      	add	r1, sp, #48	@ 0x30
 8014270:	4620      	mov	r0, r4
 8014272:	f88d 601c 	strb.w	r6, [sp, #28]
 8014276:	f000 fa87 	bl	8014788 <uxr_read_session_header>
 801427a:	2800      	cmp	r0, #0
 801427c:	d0dc      	beq.n	8014238 <wait_session_status+0x34>
 801427e:	4631      	mov	r1, r6
 8014280:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014284:	f000 ffb6 	bl	80151f4 <uxr_stream_id_from_raw>
 8014288:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801428c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014290:	9302      	str	r3, [sp, #8]
 8014292:	2f01      	cmp	r7, #1
 8014294:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8014298:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801429c:	d05c      	beq.n	8014358 <wait_session_status+0x154>
 801429e:	2f02      	cmp	r7, #2
 80142a0:	d020      	beq.n	80142e4 <wait_session_status+0xe0>
 80142a2:	2f00      	cmp	r7, #0
 80142a4:	d1c8      	bne.n	8014238 <wait_session_status+0x34>
 80142a6:	4639      	mov	r1, r7
 80142a8:	4638      	mov	r0, r7
 80142aa:	f000 ffa3 	bl	80151f4 <uxr_stream_id_from_raw>
 80142ae:	a90c      	add	r1, sp, #48	@ 0x30
 80142b0:	4602      	mov	r2, r0
 80142b2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80142b4:	4620      	mov	r0, r4
 80142b6:	f7ff fc01 	bl	8013abc <read_submessage_list>
 80142ba:	f001 f8ef 	bl	801549c <uxr_millis>
 80142be:	1b40      	subs	r0, r0, r5
 80142c0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	dcbe      	bgt.n	8014246 <wait_session_status+0x42>
 80142c8:	9b03      	ldr	r3, [sp, #12]
 80142ca:	7960      	ldrb	r0, [r4, #5]
 80142cc:	f10b 0b01 	add.w	fp, fp, #1
 80142d0:	455b      	cmp	r3, fp
 80142d2:	d001      	beq.n	80142d8 <wait_session_status+0xd4>
 80142d4:	28ff      	cmp	r0, #255	@ 0xff
 80142d6:	d0a3      	beq.n	8014220 <wait_session_status+0x1c>
 80142d8:	38ff      	subs	r0, #255	@ 0xff
 80142da:	bf18      	it	ne
 80142dc:	2001      	movne	r0, #1
 80142de:	b01d      	add	sp, #116	@ 0x74
 80142e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142e4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80142e8:	9304      	str	r3, [sp, #16]
 80142ea:	4631      	mov	r1, r6
 80142ec:	f104 0008 	add.w	r0, r4, #8
 80142f0:	f001 f86e 	bl	80153d0 <uxr_get_input_reliable_stream>
 80142f4:	4680      	mov	r8, r0
 80142f6:	b348      	cbz	r0, 801434c <wait_session_status+0x148>
 80142f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142fa:	9205      	str	r2, [sp, #20]
 80142fc:	a80c      	add	r0, sp, #48	@ 0x30
 80142fe:	f7f9 fe55 	bl	800dfac <ucdr_buffer_remaining>
 8014302:	4603      	mov	r3, r0
 8014304:	f10d 001d 	add.w	r0, sp, #29
 8014308:	9000      	str	r0, [sp, #0]
 801430a:	9a05      	ldr	r2, [sp, #20]
 801430c:	9902      	ldr	r1, [sp, #8]
 801430e:	4640      	mov	r0, r8
 8014310:	f005 fe70 	bl	8019ff4 <uxr_receive_reliable_message>
 8014314:	b1d0      	cbz	r0, 801434c <wait_session_status+0x148>
 8014316:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d03a      	beq.n	8014394 <wait_session_status+0x190>
 801431e:	9f04      	ldr	r7, [sp, #16]
 8014320:	e00a      	b.n	8014338 <wait_session_status+0x134>
 8014322:	f04f 0302 	mov.w	r3, #2
 8014326:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801432a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801432e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8014332:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014334:	f7ff fbc2 	bl	8013abc <read_submessage_list>
 8014338:	a914      	add	r1, sp, #80	@ 0x50
 801433a:	2204      	movs	r2, #4
 801433c:	4640      	mov	r0, r8
 801433e:	f005 fed9 	bl	801a0f4 <uxr_next_input_reliable_buffer_available>
 8014342:	4603      	mov	r3, r0
 8014344:	a914      	add	r1, sp, #80	@ 0x50
 8014346:	4620      	mov	r0, r4
 8014348:	2b00      	cmp	r3, #0
 801434a:	d1ea      	bne.n	8014322 <wait_session_status+0x11e>
 801434c:	9904      	ldr	r1, [sp, #16]
 801434e:	4632      	mov	r2, r6
 8014350:	4620      	mov	r0, r4
 8014352:	f7ff fa2f 	bl	80137b4 <write_submessage_acknack.isra.0>
 8014356:	e76f      	b.n	8014238 <wait_session_status+0x34>
 8014358:	4631      	mov	r1, r6
 801435a:	f104 0008 	add.w	r0, r4, #8
 801435e:	f001 f82d 	bl	80153bc <uxr_get_input_best_effort_stream>
 8014362:	2800      	cmp	r0, #0
 8014364:	f43f af68 	beq.w	8014238 <wait_session_status+0x34>
 8014368:	9902      	ldr	r1, [sp, #8]
 801436a:	f005 fdaf 	bl	8019ecc <uxr_receive_best_effort_message>
 801436e:	2800      	cmp	r0, #0
 8014370:	f43f af62 	beq.w	8014238 <wait_session_status+0x34>
 8014374:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014378:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801437a:	a90c      	add	r1, sp, #48	@ 0x30
 801437c:	4620      	mov	r0, r4
 801437e:	f7ff fb9d 	bl	8013abc <read_submessage_list>
 8014382:	e759      	b.n	8014238 <wait_session_status+0x34>
 8014384:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014386:	e9d3 0400 	ldrd	r0, r4, [r3]
 801438a:	47a0      	blx	r4
 801438c:	2001      	movs	r0, #1
 801438e:	b01d      	add	sp, #116	@ 0x74
 8014390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014394:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014398:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801439a:	a90c      	add	r1, sp, #48	@ 0x30
 801439c:	4620      	mov	r0, r4
 801439e:	f7ff fb8d 	bl	8013abc <read_submessage_list>
 80143a2:	e7bc      	b.n	801431e <wait_session_status+0x11a>

080143a4 <uxr_delete_session_retries>:
 80143a4:	b530      	push	{r4, r5, lr}
 80143a6:	b08f      	sub	sp, #60	@ 0x3c
 80143a8:	4604      	mov	r4, r0
 80143aa:	460d      	mov	r5, r1
 80143ac:	f000 fa2e 	bl	801480c <uxr_session_header_offset>
 80143b0:	2300      	movs	r3, #0
 80143b2:	2210      	movs	r2, #16
 80143b4:	9000      	str	r0, [sp, #0]
 80143b6:	a902      	add	r1, sp, #8
 80143b8:	a806      	add	r0, sp, #24
 80143ba:	f7f9 fdb5 	bl	800df28 <ucdr_init_buffer_origin_offset>
 80143be:	a906      	add	r1, sp, #24
 80143c0:	4620      	mov	r0, r4
 80143c2:	f000 f973 	bl	80146ac <uxr_buffer_delete_session>
 80143c6:	2200      	movs	r2, #0
 80143c8:	4611      	mov	r1, r2
 80143ca:	9b06      	ldr	r3, [sp, #24]
 80143cc:	4620      	mov	r0, r4
 80143ce:	f000 f9c7 	bl	8014760 <uxr_stamp_session_header>
 80143d2:	a806      	add	r0, sp, #24
 80143d4:	f7f9 fde6 	bl	800dfa4 <ucdr_buffer_length>
 80143d8:	462b      	mov	r3, r5
 80143da:	4602      	mov	r2, r0
 80143dc:	a902      	add	r1, sp, #8
 80143de:	4620      	mov	r0, r4
 80143e0:	f7ff ff10 	bl	8014204 <wait_session_status>
 80143e4:	b118      	cbz	r0, 80143ee <uxr_delete_session_retries+0x4a>
 80143e6:	7960      	ldrb	r0, [r4, #5]
 80143e8:	fab0 f080 	clz	r0, r0
 80143ec:	0940      	lsrs	r0, r0, #5
 80143ee:	b00f      	add	sp, #60	@ 0x3c
 80143f0:	bd30      	pop	{r4, r5, pc}
 80143f2:	bf00      	nop

080143f4 <uxr_create_session>:
 80143f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f8:	f100 0b08 	add.w	fp, r0, #8
 80143fc:	b0ab      	sub	sp, #172	@ 0xac
 80143fe:	4604      	mov	r4, r0
 8014400:	4658      	mov	r0, fp
 8014402:	f000 ff2b 	bl	801525c <uxr_reset_stream_storage>
 8014406:	4620      	mov	r0, r4
 8014408:	f000 fa00 	bl	801480c <uxr_session_header_offset>
 801440c:	2300      	movs	r3, #0
 801440e:	9000      	str	r0, [sp, #0]
 8014410:	221c      	movs	r2, #28
 8014412:	a90b      	add	r1, sp, #44	@ 0x2c
 8014414:	a812      	add	r0, sp, #72	@ 0x48
 8014416:	f7f9 fd87 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801441a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801441c:	8a1a      	ldrh	r2, [r3, #16]
 801441e:	3a04      	subs	r2, #4
 8014420:	b292      	uxth	r2, r2
 8014422:	a912      	add	r1, sp, #72	@ 0x48
 8014424:	4620      	mov	r0, r4
 8014426:	f000 f917 	bl	8014658 <uxr_buffer_create_session>
 801442a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801442c:	4620      	mov	r0, r4
 801442e:	f000 f983 	bl	8014738 <uxr_stamp_create_session_header>
 8014432:	a812      	add	r0, sp, #72	@ 0x48
 8014434:	f7f9 fdb6 	bl	800dfa4 <ucdr_buffer_length>
 8014438:	23ff      	movs	r3, #255	@ 0xff
 801443a:	7163      	strb	r3, [r4, #5]
 801443c:	230a      	movs	r3, #10
 801443e:	46da      	mov	sl, fp
 8014440:	9303      	str	r3, [sp, #12]
 8014442:	4683      	mov	fp, r0
 8014444:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8014446:	465a      	mov	r2, fp
 8014448:	e9d3 0500 	ldrd	r0, r5, [r3]
 801444c:	a90b      	add	r1, sp, #44	@ 0x2c
 801444e:	47a8      	blx	r5
 8014450:	f001 f824 	bl	801549c <uxr_millis>
 8014454:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014458:	4605      	mov	r5, r0
 801445a:	e009      	b.n	8014470 <uxr_create_session+0x7c>
 801445c:	f001 f81e 	bl	801549c <uxr_millis>
 8014460:	1b40      	subs	r0, r0, r5
 8014462:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8014466:	2b00      	cmp	r3, #0
 8014468:	7962      	ldrb	r2, [r4, #5]
 801446a:	dd38      	ble.n	80144de <uxr_create_session+0xea>
 801446c:	2aff      	cmp	r2, #255	@ 0xff
 801446e:	d13c      	bne.n	80144ea <uxr_create_session+0xf6>
 8014470:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014472:	a907      	add	r1, sp, #28
 8014474:	6896      	ldr	r6, [r2, #8]
 8014476:	6810      	ldr	r0, [r2, #0]
 8014478:	aa08      	add	r2, sp, #32
 801447a:	47b0      	blx	r6
 801447c:	2800      	cmp	r0, #0
 801447e:	d0ed      	beq.n	801445c <uxr_create_session+0x68>
 8014480:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014484:	a81a      	add	r0, sp, #104	@ 0x68
 8014486:	f7f9 fd61 	bl	800df4c <ucdr_init_buffer>
 801448a:	2600      	movs	r6, #0
 801448c:	f10d 031a 	add.w	r3, sp, #26
 8014490:	aa06      	add	r2, sp, #24
 8014492:	a91a      	add	r1, sp, #104	@ 0x68
 8014494:	4620      	mov	r0, r4
 8014496:	f88d 6018 	strb.w	r6, [sp, #24]
 801449a:	f000 f975 	bl	8014788 <uxr_read_session_header>
 801449e:	2800      	cmp	r0, #0
 80144a0:	d0dc      	beq.n	801445c <uxr_create_session+0x68>
 80144a2:	4631      	mov	r1, r6
 80144a4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80144a8:	f000 fea4 	bl	80151f4 <uxr_stream_id_from_raw>
 80144ac:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80144b0:	2e01      	cmp	r6, #1
 80144b2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80144b6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80144ba:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80144be:	d053      	beq.n	8014568 <uxr_create_session+0x174>
 80144c0:	2e02      	cmp	r6, #2
 80144c2:	d018      	beq.n	80144f6 <uxr_create_session+0x102>
 80144c4:	2e00      	cmp	r6, #0
 80144c6:	d1c9      	bne.n	801445c <uxr_create_session+0x68>
 80144c8:	4631      	mov	r1, r6
 80144ca:	4630      	mov	r0, r6
 80144cc:	f000 fe92 	bl	80151f4 <uxr_stream_id_from_raw>
 80144d0:	a91a      	add	r1, sp, #104	@ 0x68
 80144d2:	4602      	mov	r2, r0
 80144d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80144d6:	4620      	mov	r0, r4
 80144d8:	f7ff faf0 	bl	8013abc <read_submessage_list>
 80144dc:	e7be      	b.n	801445c <uxr_create_session+0x68>
 80144de:	9b03      	ldr	r3, [sp, #12]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	9303      	str	r3, [sp, #12]
 80144e4:	d001      	beq.n	80144ea <uxr_create_session+0xf6>
 80144e6:	2aff      	cmp	r2, #255	@ 0xff
 80144e8:	d0ac      	beq.n	8014444 <uxr_create_session+0x50>
 80144ea:	2a00      	cmp	r2, #0
 80144ec:	d051      	beq.n	8014592 <uxr_create_session+0x19e>
 80144ee:	2000      	movs	r0, #0
 80144f0:	b02b      	add	sp, #172	@ 0xac
 80144f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144f6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80144fa:	9304      	str	r3, [sp, #16]
 80144fc:	4639      	mov	r1, r7
 80144fe:	4650      	mov	r0, sl
 8014500:	f000 ff66 	bl	80153d0 <uxr_get_input_reliable_stream>
 8014504:	4680      	mov	r8, r0
 8014506:	b348      	cbz	r0, 801455c <uxr_create_session+0x168>
 8014508:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801450a:	9205      	str	r2, [sp, #20]
 801450c:	a81a      	add	r0, sp, #104	@ 0x68
 801450e:	f7f9 fd4d 	bl	800dfac <ucdr_buffer_remaining>
 8014512:	4603      	mov	r3, r0
 8014514:	f10d 0019 	add.w	r0, sp, #25
 8014518:	9000      	str	r0, [sp, #0]
 801451a:	9a05      	ldr	r2, [sp, #20]
 801451c:	4649      	mov	r1, r9
 801451e:	4640      	mov	r0, r8
 8014520:	f005 fd68 	bl	8019ff4 <uxr_receive_reliable_message>
 8014524:	b1d0      	cbz	r0, 801455c <uxr_create_session+0x168>
 8014526:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d038      	beq.n	80145a0 <uxr_create_session+0x1ac>
 801452e:	9e04      	ldr	r6, [sp, #16]
 8014530:	e00a      	b.n	8014548 <uxr_create_session+0x154>
 8014532:	f04f 0302 	mov.w	r3, #2
 8014536:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801453a:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 801453e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014542:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014544:	f7ff faba 	bl	8013abc <read_submessage_list>
 8014548:	a922      	add	r1, sp, #136	@ 0x88
 801454a:	2204      	movs	r2, #4
 801454c:	4640      	mov	r0, r8
 801454e:	f005 fdd1 	bl	801a0f4 <uxr_next_input_reliable_buffer_available>
 8014552:	4603      	mov	r3, r0
 8014554:	a922      	add	r1, sp, #136	@ 0x88
 8014556:	4620      	mov	r0, r4
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1ea      	bne.n	8014532 <uxr_create_session+0x13e>
 801455c:	9904      	ldr	r1, [sp, #16]
 801455e:	463a      	mov	r2, r7
 8014560:	4620      	mov	r0, r4
 8014562:	f7ff f927 	bl	80137b4 <write_submessage_acknack.isra.0>
 8014566:	e779      	b.n	801445c <uxr_create_session+0x68>
 8014568:	4639      	mov	r1, r7
 801456a:	4650      	mov	r0, sl
 801456c:	f000 ff26 	bl	80153bc <uxr_get_input_best_effort_stream>
 8014570:	2800      	cmp	r0, #0
 8014572:	f43f af73 	beq.w	801445c <uxr_create_session+0x68>
 8014576:	4649      	mov	r1, r9
 8014578:	f005 fca8 	bl	8019ecc <uxr_receive_best_effort_message>
 801457c:	2800      	cmp	r0, #0
 801457e:	f43f af6d 	beq.w	801445c <uxr_create_session+0x68>
 8014582:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8014586:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014588:	a91a      	add	r1, sp, #104	@ 0x68
 801458a:	4620      	mov	r0, r4
 801458c:	f7ff fa96 	bl	8013abc <read_submessage_list>
 8014590:	e764      	b.n	801445c <uxr_create_session+0x68>
 8014592:	4650      	mov	r0, sl
 8014594:	f000 fe62 	bl	801525c <uxr_reset_stream_storage>
 8014598:	2001      	movs	r0, #1
 801459a:	b02b      	add	sp, #172	@ 0xac
 801459c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145a0:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80145a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80145a6:	a91a      	add	r1, sp, #104	@ 0x68
 80145a8:	4620      	mov	r0, r4
 80145aa:	f7ff fa87 	bl	8013abc <read_submessage_list>
 80145ae:	e7be      	b.n	801452e <uxr_create_session+0x13a>

080145b0 <uxr_prepare_stream_to_write_submessage>:
 80145b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145b4:	b082      	sub	sp, #8
 80145b6:	4682      	mov	sl, r0
 80145b8:	4610      	mov	r0, r2
 80145ba:	4615      	mov	r5, r2
 80145bc:	461e      	mov	r6, r3
 80145be:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80145c2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80145c6:	9101      	str	r1, [sp, #4]
 80145c8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80145cc:	f000 ff60 	bl	8015490 <uxr_submessage_padding>
 80145d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80145d4:	f105 0904 	add.w	r9, r5, #4
 80145d8:	2b01      	cmp	r3, #1
 80145da:	4481      	add	r9, r0
 80145dc:	d01d      	beq.n	801461a <uxr_prepare_stream_to_write_submessage+0x6a>
 80145de:	2b02      	cmp	r3, #2
 80145e0:	d116      	bne.n	8014610 <uxr_prepare_stream_to_write_submessage+0x60>
 80145e2:	4621      	mov	r1, r4
 80145e4:	f10a 0008 	add.w	r0, sl, #8
 80145e8:	f000 fede 	bl	80153a8 <uxr_get_output_reliable_stream>
 80145ec:	4604      	mov	r4, r0
 80145ee:	b158      	cbz	r0, 8014608 <uxr_prepare_stream_to_write_submessage+0x58>
 80145f0:	4649      	mov	r1, r9
 80145f2:	4632      	mov	r2, r6
 80145f4:	f005 ff3a 	bl	801a46c <uxr_prepare_reliable_buffer_to_write>
 80145f8:	4604      	mov	r4, r0
 80145fa:	b12c      	cbz	r4, 8014608 <uxr_prepare_stream_to_write_submessage+0x58>
 80145fc:	4643      	mov	r3, r8
 80145fe:	b2aa      	uxth	r2, r5
 8014600:	4639      	mov	r1, r7
 8014602:	4630      	mov	r0, r6
 8014604:	f000 ff04 	bl	8015410 <uxr_buffer_submessage_header>
 8014608:	4620      	mov	r0, r4
 801460a:	b002      	add	sp, #8
 801460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014610:	2400      	movs	r4, #0
 8014612:	4620      	mov	r0, r4
 8014614:	b002      	add	sp, #8
 8014616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801461a:	4621      	mov	r1, r4
 801461c:	f10a 0008 	add.w	r0, sl, #8
 8014620:	f000 feba 	bl	8015398 <uxr_get_output_best_effort_stream>
 8014624:	4604      	mov	r4, r0
 8014626:	2800      	cmp	r0, #0
 8014628:	d0ee      	beq.n	8014608 <uxr_prepare_stream_to_write_submessage+0x58>
 801462a:	4649      	mov	r1, r9
 801462c:	4632      	mov	r2, r6
 801462e:	f005 fe4d 	bl	801a2cc <uxr_prepare_best_effort_buffer_to_write>
 8014632:	4604      	mov	r4, r0
 8014634:	e7e1      	b.n	80145fa <uxr_prepare_stream_to_write_submessage+0x4a>
 8014636:	bf00      	nop

08014638 <uxr_init_session_info>:
 8014638:	0e13      	lsrs	r3, r2, #24
 801463a:	7043      	strb	r3, [r0, #1]
 801463c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014640:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014644:	7001      	strb	r1, [r0, #0]
 8014646:	70c3      	strb	r3, [r0, #3]
 8014648:	2109      	movs	r1, #9
 801464a:	23ff      	movs	r3, #255	@ 0xff
 801464c:	f880 c002 	strb.w	ip, [r0, #2]
 8014650:	7102      	strb	r2, [r0, #4]
 8014652:	80c1      	strh	r1, [r0, #6]
 8014654:	7143      	strb	r3, [r0, #5]
 8014656:	4770      	bx	lr

08014658 <uxr_buffer_create_session>:
 8014658:	b530      	push	{r4, r5, lr}
 801465a:	b089      	sub	sp, #36	@ 0x24
 801465c:	2300      	movs	r3, #0
 801465e:	4d12      	ldr	r5, [pc, #72]	@ (80146a8 <uxr_buffer_create_session+0x50>)
 8014660:	9307      	str	r3, [sp, #28]
 8014662:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014666:	2201      	movs	r2, #1
 8014668:	9301      	str	r3, [sp, #4]
 801466a:	80c2      	strh	r2, [r0, #6]
 801466c:	f88d 2004 	strb.w	r2, [sp, #4]
 8014670:	682a      	ldr	r2, [r5, #0]
 8014672:	9200      	str	r2, [sp, #0]
 8014674:	88aa      	ldrh	r2, [r5, #4]
 8014676:	f8ad 2006 	strh.w	r2, [sp, #6]
 801467a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801467e:	9202      	str	r2, [sp, #8]
 8014680:	460c      	mov	r4, r1
 8014682:	7802      	ldrb	r2, [r0, #0]
 8014684:	9303      	str	r3, [sp, #12]
 8014686:	4619      	mov	r1, r3
 8014688:	f88d 200c 	strb.w	r2, [sp, #12]
 801468c:	4620      	mov	r0, r4
 801468e:	2210      	movs	r2, #16
 8014690:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014694:	9306      	str	r3, [sp, #24]
 8014696:	f000 febb 	bl	8015410 <uxr_buffer_submessage_header>
 801469a:	4669      	mov	r1, sp
 801469c:	4620      	mov	r0, r4
 801469e:	f001 feff 	bl	80164a0 <uxr_serialize_CREATE_CLIENT_Payload>
 80146a2:	b009      	add	sp, #36	@ 0x24
 80146a4:	bd30      	pop	{r4, r5, pc}
 80146a6:	bf00      	nop
 80146a8:	0801d3d0 	.word	0x0801d3d0

080146ac <uxr_buffer_delete_session>:
 80146ac:	b510      	push	{r4, lr}
 80146ae:	4b0c      	ldr	r3, [pc, #48]	@ (80146e0 <uxr_buffer_delete_session+0x34>)
 80146b0:	b082      	sub	sp, #8
 80146b2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80146b6:	f8ad c006 	strh.w	ip, [sp, #6]
 80146ba:	460c      	mov	r4, r1
 80146bc:	2202      	movs	r2, #2
 80146be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80146c2:	80c2      	strh	r2, [r0, #6]
 80146c4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80146c8:	2204      	movs	r2, #4
 80146ca:	2300      	movs	r3, #0
 80146cc:	2103      	movs	r1, #3
 80146ce:	4620      	mov	r0, r4
 80146d0:	f000 fe9e 	bl	8015410 <uxr_buffer_submessage_header>
 80146d4:	a901      	add	r1, sp, #4
 80146d6:	4620      	mov	r0, r4
 80146d8:	f001 ff9c 	bl	8016614 <uxr_serialize_DELETE_Payload>
 80146dc:	b002      	add	sp, #8
 80146de:	bd10      	pop	{r4, pc}
 80146e0:	0801d3d0 	.word	0x0801d3d0

080146e4 <uxr_read_create_session_status>:
 80146e4:	b510      	push	{r4, lr}
 80146e6:	b088      	sub	sp, #32
 80146e8:	4604      	mov	r4, r0
 80146ea:	4608      	mov	r0, r1
 80146ec:	a901      	add	r1, sp, #4
 80146ee:	f001 ffa1 	bl	8016634 <uxr_deserialize_STATUS_AGENT_Payload>
 80146f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80146f6:	7163      	strb	r3, [r4, #5]
 80146f8:	b008      	add	sp, #32
 80146fa:	bd10      	pop	{r4, pc}

080146fc <uxr_read_delete_session_status>:
 80146fc:	b510      	push	{r4, lr}
 80146fe:	4604      	mov	r4, r0
 8014700:	b084      	sub	sp, #16
 8014702:	4608      	mov	r0, r1
 8014704:	a902      	add	r1, sp, #8
 8014706:	f001 ffc5 	bl	8016694 <uxr_deserialize_STATUS_Payload>
 801470a:	88e3      	ldrh	r3, [r4, #6]
 801470c:	2b02      	cmp	r3, #2
 801470e:	d001      	beq.n	8014714 <uxr_read_delete_session_status+0x18>
 8014710:	b004      	add	sp, #16
 8014712:	bd10      	pop	{r4, pc}
 8014714:	f10d 000a 	add.w	r0, sp, #10
 8014718:	f7fe fd9e 	bl	8013258 <uxr_object_id_from_raw>
 801471c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8014720:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8014724:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014728:	b29b      	uxth	r3, r3
 801472a:	2b02      	cmp	r3, #2
 801472c:	bf04      	itt	eq
 801472e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8014732:	7163      	strbeq	r3, [r4, #5]
 8014734:	b004      	add	sp, #16
 8014736:	bd10      	pop	{r4, pc}

08014738 <uxr_stamp_create_session_header>:
 8014738:	b510      	push	{r4, lr}
 801473a:	2208      	movs	r2, #8
 801473c:	b08a      	sub	sp, #40	@ 0x28
 801473e:	4604      	mov	r4, r0
 8014740:	eb0d 0002 	add.w	r0, sp, r2
 8014744:	f7f9 fc02 	bl	800df4c <ucdr_init_buffer>
 8014748:	f814 1b01 	ldrb.w	r1, [r4], #1
 801474c:	9400      	str	r4, [sp, #0]
 801474e:	2300      	movs	r3, #0
 8014750:	461a      	mov	r2, r3
 8014752:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8014756:	a802      	add	r0, sp, #8
 8014758:	f001 f854 	bl	8015804 <uxr_serialize_message_header>
 801475c:	b00a      	add	sp, #40	@ 0x28
 801475e:	bd10      	pop	{r4, pc}

08014760 <uxr_stamp_session_header>:
 8014760:	b530      	push	{r4, r5, lr}
 8014762:	b08d      	sub	sp, #52	@ 0x34
 8014764:	4604      	mov	r4, r0
 8014766:	460d      	mov	r5, r1
 8014768:	9203      	str	r2, [sp, #12]
 801476a:	4619      	mov	r1, r3
 801476c:	a804      	add	r0, sp, #16
 801476e:	2208      	movs	r2, #8
 8014770:	f7f9 fbec 	bl	800df4c <ucdr_init_buffer>
 8014774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014778:	9b03      	ldr	r3, [sp, #12]
 801477a:	9400      	str	r4, [sp, #0]
 801477c:	462a      	mov	r2, r5
 801477e:	a804      	add	r0, sp, #16
 8014780:	f001 f840 	bl	8015804 <uxr_serialize_message_header>
 8014784:	b00d      	add	sp, #52	@ 0x34
 8014786:	bd30      	pop	{r4, r5, pc}

08014788 <uxr_read_session_header>:
 8014788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801478c:	4607      	mov	r7, r0
 801478e:	b084      	sub	sp, #16
 8014790:	4608      	mov	r0, r1
 8014792:	460c      	mov	r4, r1
 8014794:	4615      	mov	r5, r2
 8014796:	461e      	mov	r6, r3
 8014798:	f7f9 fc08 	bl	800dfac <ucdr_buffer_remaining>
 801479c:	2808      	cmp	r0, #8
 801479e:	d803      	bhi.n	80147a8 <uxr_read_session_header+0x20>
 80147a0:	2000      	movs	r0, #0
 80147a2:	b004      	add	sp, #16
 80147a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147a8:	f10d 080c 	add.w	r8, sp, #12
 80147ac:	4633      	mov	r3, r6
 80147ae:	462a      	mov	r2, r5
 80147b0:	f8cd 8000 	str.w	r8, [sp]
 80147b4:	4620      	mov	r0, r4
 80147b6:	f10d 010b 	add.w	r1, sp, #11
 80147ba:	f001 f841 	bl	8015840 <uxr_deserialize_message_header>
 80147be:	783a      	ldrb	r2, [r7, #0]
 80147c0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d1eb      	bne.n	80147a0 <uxr_read_session_header+0x18>
 80147c8:	061b      	lsls	r3, r3, #24
 80147ca:	d41c      	bmi.n	8014806 <uxr_read_session_header+0x7e>
 80147cc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80147d0:	787b      	ldrb	r3, [r7, #1]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d003      	beq.n	80147de <uxr_read_session_header+0x56>
 80147d6:	2001      	movs	r0, #1
 80147d8:	f080 0001 	eor.w	r0, r0, #1
 80147dc:	e7e1      	b.n	80147a2 <uxr_read_session_header+0x1a>
 80147de:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80147e2:	78bb      	ldrb	r3, [r7, #2]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	f107 0102 	add.w	r1, r7, #2
 80147ea:	d1f4      	bne.n	80147d6 <uxr_read_session_header+0x4e>
 80147ec:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80147f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d1ee      	bne.n	80147d6 <uxr_read_session_header+0x4e>
 80147f8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80147fc:	784b      	ldrb	r3, [r1, #1]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d1e9      	bne.n	80147d6 <uxr_read_session_header+0x4e>
 8014802:	2000      	movs	r0, #0
 8014804:	e7e8      	b.n	80147d8 <uxr_read_session_header+0x50>
 8014806:	2001      	movs	r0, #1
 8014808:	e7cb      	b.n	80147a2 <uxr_read_session_header+0x1a>
 801480a:	bf00      	nop

0801480c <uxr_session_header_offset>:
 801480c:	f990 3000 	ldrsb.w	r3, [r0]
 8014810:	2b00      	cmp	r3, #0
 8014812:	bfac      	ite	ge
 8014814:	2008      	movge	r0, #8
 8014816:	2004      	movlt	r0, #4
 8014818:	4770      	bx	lr
 801481a:	bf00      	nop

0801481c <uxr_init_base_object_request>:
 801481c:	b510      	push	{r4, lr}
 801481e:	88c3      	ldrh	r3, [r0, #6]
 8014820:	b082      	sub	sp, #8
 8014822:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8014826:	9101      	str	r1, [sp, #4]
 8014828:	f1a3 010a 	sub.w	r1, r3, #10
 801482c:	b289      	uxth	r1, r1
 801482e:	42a1      	cmp	r1, r4
 8014830:	d80e      	bhi.n	8014850 <uxr_init_base_object_request+0x34>
 8014832:	3301      	adds	r3, #1
 8014834:	b29c      	uxth	r4, r3
 8014836:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801483a:	b2db      	uxtb	r3, r3
 801483c:	80c4      	strh	r4, [r0, #6]
 801483e:	9801      	ldr	r0, [sp, #4]
 8014840:	7011      	strb	r1, [r2, #0]
 8014842:	7053      	strb	r3, [r2, #1]
 8014844:	1c91      	adds	r1, r2, #2
 8014846:	f7fe fd1b 	bl	8013280 <uxr_object_id_to_raw>
 801484a:	4620      	mov	r0, r4
 801484c:	b002      	add	sp, #8
 801484e:	bd10      	pop	{r4, pc}
 8014850:	230a      	movs	r3, #10
 8014852:	2100      	movs	r1, #0
 8014854:	461c      	mov	r4, r3
 8014856:	e7f1      	b.n	801483c <uxr_init_base_object_request+0x20>

08014858 <uxr_parse_base_object_request>:
 8014858:	b570      	push	{r4, r5, r6, lr}
 801485a:	4604      	mov	r4, r0
 801485c:	3002      	adds	r0, #2
 801485e:	460d      	mov	r5, r1
 8014860:	4616      	mov	r6, r2
 8014862:	f7fe fcf9 	bl	8013258 <uxr_object_id_from_raw>
 8014866:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801486a:	8028      	strh	r0, [r5, #0]
 801486c:	806b      	strh	r3, [r5, #2]
 801486e:	7822      	ldrb	r2, [r4, #0]
 8014870:	7863      	ldrb	r3, [r4, #1]
 8014872:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014876:	8033      	strh	r3, [r6, #0]
 8014878:	bd70      	pop	{r4, r5, r6, pc}
 801487a:	bf00      	nop

0801487c <uxr_init_framing_io>:
 801487c:	2300      	movs	r3, #0
 801487e:	7041      	strb	r1, [r0, #1]
 8014880:	7003      	strb	r3, [r0, #0]
 8014882:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop

08014888 <uxr_write_framed_msg>:
 8014888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801488c:	4617      	mov	r7, r2
 801488e:	7842      	ldrb	r2, [r0, #1]
 8014890:	b083      	sub	sp, #12
 8014892:	460e      	mov	r6, r1
 8014894:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014898:	469a      	mov	sl, r3
 801489a:	2901      	cmp	r1, #1
 801489c:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80148a0:	4604      	mov	r4, r0
 80148a2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80148a6:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80148aa:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80148ae:	f240 8137 	bls.w	8014b20 <uxr_write_framed_msg+0x298>
 80148b2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80148b6:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80148ba:	2901      	cmp	r1, #1
 80148bc:	f04f 0202 	mov.w	r2, #2
 80148c0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148c4:	f240 808f 	bls.w	80149e6 <uxr_write_framed_msg+0x15e>
 80148c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80148ca:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80148ce:	b2dd      	uxtb	r5, r3
 80148d0:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80148d4:	2203      	movs	r2, #3
 80148d6:	2901      	cmp	r1, #1
 80148d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148dc:	f240 809a 	bls.w	8014a14 <uxr_write_framed_msg+0x18c>
 80148e0:	18a1      	adds	r1, r4, r2
 80148e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80148e4:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80148e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80148ec:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80148f0:	3201      	adds	r2, #1
 80148f2:	2801      	cmp	r0, #1
 80148f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148f8:	f240 80a0 	bls.w	8014a3c <uxr_write_framed_msg+0x1b4>
 80148fc:	18a0      	adds	r0, r4, r2
 80148fe:	3201      	adds	r2, #1
 8014900:	b2d2      	uxtb	r2, r2
 8014902:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014906:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801490a:	2b00      	cmp	r3, #0
 801490c:	f000 80a9 	beq.w	8014a62 <uxr_write_framed_msg+0x1da>
 8014910:	f04f 0900 	mov.w	r9, #0
 8014914:	46c8      	mov	r8, r9
 8014916:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801491a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801491e:	2901      	cmp	r1, #1
 8014920:	f240 80c3 	bls.w	8014aaa <uxr_write_framed_msg+0x222>
 8014924:	2a29      	cmp	r2, #41	@ 0x29
 8014926:	f200 809f 	bhi.w	8014a68 <uxr_write_framed_msg+0x1e0>
 801492a:	18a1      	adds	r1, r4, r2
 801492c:	3201      	adds	r2, #1
 801492e:	b2d2      	uxtb	r2, r2
 8014930:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8014934:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014938:	ea89 0303 	eor.w	r3, r9, r3
 801493c:	498c      	ldr	r1, [pc, #560]	@ (8014b70 <uxr_write_framed_msg+0x2e8>)
 801493e:	b2db      	uxtb	r3, r3
 8014940:	f108 0801 	add.w	r8, r8, #1
 8014944:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014948:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801494c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801494e:	4543      	cmp	r3, r8
 8014950:	d8e1      	bhi.n	8014916 <uxr_write_framed_msg+0x8e>
 8014952:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014956:	fa5f f889 	uxtb.w	r8, r9
 801495a:	9301      	str	r3, [sp, #4]
 801495c:	f04f 0900 	mov.w	r9, #0
 8014960:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8014964:	fa5f f18a 	uxtb.w	r1, sl
 8014968:	2901      	cmp	r1, #1
 801496a:	d921      	bls.n	80149b0 <uxr_write_framed_msg+0x128>
 801496c:	2a29      	cmp	r2, #41	@ 0x29
 801496e:	f240 80af 	bls.w	8014ad0 <uxr_write_framed_msg+0x248>
 8014972:	2500      	movs	r5, #0
 8014974:	e000      	b.n	8014978 <uxr_write_framed_msg+0xf0>
 8014976:	b160      	cbz	r0, 8014992 <uxr_write_framed_msg+0x10a>
 8014978:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801497c:	1b52      	subs	r2, r2, r5
 801497e:	465b      	mov	r3, fp
 8014980:	4421      	add	r1, r4
 8014982:	4638      	mov	r0, r7
 8014984:	47b0      	blx	r6
 8014986:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801498a:	4405      	add	r5, r0
 801498c:	4295      	cmp	r5, r2
 801498e:	d3f2      	bcc.n	8014976 <uxr_write_framed_msg+0xee>
 8014990:	d003      	beq.n	801499a <uxr_write_framed_msg+0x112>
 8014992:	2000      	movs	r0, #0
 8014994:	b003      	add	sp, #12
 8014996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801499a:	fa5f f18a 	uxtb.w	r1, sl
 801499e:	f04f 0300 	mov.w	r3, #0
 80149a2:	2901      	cmp	r1, #1
 80149a4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80149a8:	f04f 0200 	mov.w	r2, #0
 80149ac:	f200 8090 	bhi.w	8014ad0 <uxr_write_framed_msg+0x248>
 80149b0:	1c51      	adds	r1, r2, #1
 80149b2:	b2c9      	uxtb	r1, r1
 80149b4:	2929      	cmp	r1, #41	@ 0x29
 80149b6:	d8dc      	bhi.n	8014972 <uxr_write_framed_msg+0xea>
 80149b8:	18a5      	adds	r5, r4, r2
 80149ba:	4421      	add	r1, r4
 80149bc:	3202      	adds	r2, #2
 80149be:	f088 0820 	eor.w	r8, r8, #32
 80149c2:	4648      	mov	r0, r9
 80149c4:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80149c8:	b2d2      	uxtb	r2, r2
 80149ca:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80149ce:	f04f 0901 	mov.w	r9, #1
 80149d2:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80149d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149da:	2800      	cmp	r0, #0
 80149dc:	f040 8085 	bne.w	8014aea <uxr_write_framed_msg+0x262>
 80149e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80149e4:	e7bc      	b.n	8014960 <uxr_write_framed_msg+0xd8>
 80149e6:	4611      	mov	r1, r2
 80149e8:	f04f 0c03 	mov.w	ip, #3
 80149ec:	2204      	movs	r2, #4
 80149ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149f0:	4421      	add	r1, r4
 80149f2:	b2dd      	uxtb	r5, r3
 80149f4:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80149f8:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80149fc:	44a4      	add	ip, r4
 80149fe:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014a02:	f080 0020 	eor.w	r0, r0, #32
 8014a06:	2901      	cmp	r1, #1
 8014a08:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8014a0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a10:	f63f af66 	bhi.w	80148e0 <uxr_write_framed_msg+0x58>
 8014a14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a16:	18a0      	adds	r0, r4, r2
 8014a18:	f085 0520 	eor.w	r5, r5, #32
 8014a1c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014a20:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014a24:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8014a28:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8014a2c:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8014a30:	3202      	adds	r2, #2
 8014a32:	2801      	cmp	r0, #1
 8014a34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a38:	f63f af60 	bhi.w	80148fc <uxr_write_framed_msg+0x74>
 8014a3c:	1c50      	adds	r0, r2, #1
 8014a3e:	18a5      	adds	r5, r4, r2
 8014a40:	fa54 f080 	uxtab	r0, r4, r0
 8014a44:	3202      	adds	r2, #2
 8014a46:	f081 0120 	eor.w	r1, r1, #32
 8014a4a:	b2d2      	uxtb	r2, r2
 8014a4c:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014a50:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014a54:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014a58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	f47f af57 	bne.w	8014910 <uxr_write_framed_msg+0x88>
 8014a62:	9301      	str	r3, [sp, #4]
 8014a64:	4698      	mov	r8, r3
 8014a66:	e779      	b.n	801495c <uxr_write_framed_msg+0xd4>
 8014a68:	2500      	movs	r5, #0
 8014a6a:	e001      	b.n	8014a70 <uxr_write_framed_msg+0x1e8>
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	d090      	beq.n	8014992 <uxr_write_framed_msg+0x10a>
 8014a70:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014a74:	1b52      	subs	r2, r2, r5
 8014a76:	465b      	mov	r3, fp
 8014a78:	4421      	add	r1, r4
 8014a7a:	4638      	mov	r0, r7
 8014a7c:	47b0      	blx	r6
 8014a7e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014a82:	4405      	add	r5, r0
 8014a84:	4295      	cmp	r5, r2
 8014a86:	d3f1      	bcc.n	8014a6c <uxr_write_framed_msg+0x1e4>
 8014a88:	d183      	bne.n	8014992 <uxr_write_framed_msg+0x10a>
 8014a8a:	f04f 0300 	mov.w	r3, #0
 8014a8e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014a92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a94:	4543      	cmp	r3, r8
 8014a96:	d964      	bls.n	8014b62 <uxr_write_framed_msg+0x2da>
 8014a98:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014a9c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014aa0:	2901      	cmp	r1, #1
 8014aa2:	f04f 0200 	mov.w	r2, #0
 8014aa6:	f63f af3d 	bhi.w	8014924 <uxr_write_framed_msg+0x9c>
 8014aaa:	1c51      	adds	r1, r2, #1
 8014aac:	b2c9      	uxtb	r1, r1
 8014aae:	2929      	cmp	r1, #41	@ 0x29
 8014ab0:	d8da      	bhi.n	8014a68 <uxr_write_framed_msg+0x1e0>
 8014ab2:	18a0      	adds	r0, r4, r2
 8014ab4:	4421      	add	r1, r4
 8014ab6:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014aba:	3202      	adds	r2, #2
 8014abc:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014ac0:	b2d2      	uxtb	r2, r2
 8014ac2:	f083 0020 	eor.w	r0, r3, #32
 8014ac6:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014aca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ace:	e733      	b.n	8014938 <uxr_write_framed_msg+0xb0>
 8014ad0:	18a1      	adds	r1, r4, r2
 8014ad2:	3201      	adds	r2, #1
 8014ad4:	4648      	mov	r0, r9
 8014ad6:	b2d2      	uxtb	r2, r2
 8014ad8:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014adc:	f04f 0901 	mov.w	r9, #1
 8014ae0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	f43f af7b 	beq.w	80149e0 <uxr_write_framed_msg+0x158>
 8014aea:	2500      	movs	r5, #0
 8014aec:	e002      	b.n	8014af4 <uxr_write_framed_msg+0x26c>
 8014aee:	2800      	cmp	r0, #0
 8014af0:	f43f af4f 	beq.w	8014992 <uxr_write_framed_msg+0x10a>
 8014af4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014af8:	1b52      	subs	r2, r2, r5
 8014afa:	465b      	mov	r3, fp
 8014afc:	4421      	add	r1, r4
 8014afe:	4638      	mov	r0, r7
 8014b00:	47b0      	blx	r6
 8014b02:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014b06:	4405      	add	r5, r0
 8014b08:	4295      	cmp	r5, r2
 8014b0a:	d3f0      	bcc.n	8014aee <uxr_write_framed_msg+0x266>
 8014b0c:	f47f af41 	bne.w	8014992 <uxr_write_framed_msg+0x10a>
 8014b10:	2300      	movs	r3, #0
 8014b12:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b18:	b298      	uxth	r0, r3
 8014b1a:	b003      	add	sp, #12
 8014b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b20:	217d      	movs	r1, #125	@ 0x7d
 8014b22:	f082 0220 	eor.w	r2, r2, #32
 8014b26:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014b2a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014b2e:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014b32:	2901      	cmp	r1, #1
 8014b34:	f04f 0203 	mov.w	r2, #3
 8014b38:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b3c:	d804      	bhi.n	8014b48 <uxr_write_framed_msg+0x2c0>
 8014b3e:	4611      	mov	r1, r2
 8014b40:	f04f 0c04 	mov.w	ip, #4
 8014b44:	2205      	movs	r2, #5
 8014b46:	e752      	b.n	80149ee <uxr_write_framed_msg+0x166>
 8014b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b4a:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014b4e:	b2dd      	uxtb	r5, r3
 8014b50:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014b54:	2204      	movs	r2, #4
 8014b56:	2901      	cmp	r1, #1
 8014b58:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b5c:	f63f aec0 	bhi.w	80148e0 <uxr_write_framed_msg+0x58>
 8014b60:	e758      	b.n	8014a14 <uxr_write_framed_msg+0x18c>
 8014b62:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014b66:	fa5f f889 	uxtb.w	r8, r9
 8014b6a:	9301      	str	r3, [sp, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	e6f5      	b.n	801495c <uxr_write_framed_msg+0xd4>
 8014b70:	0801e0a4 	.word	0x0801e0a4

08014b74 <uxr_framing_read_transport>:
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	4604      	mov	r4, r0
 8014b7a:	b083      	sub	sp, #12
 8014b7c:	461f      	mov	r7, r3
 8014b7e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014b82:	4689      	mov	r9, r1
 8014b84:	4692      	mov	sl, r2
 8014b86:	f000 fc89 	bl	801549c <uxr_millis>
 8014b8a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014b8e:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014b92:	42b3      	cmp	r3, r6
 8014b94:	4680      	mov	r8, r0
 8014b96:	d061      	beq.n	8014c5c <uxr_framing_read_transport+0xe8>
 8014b98:	d81c      	bhi.n	8014bd4 <uxr_framing_read_transport+0x60>
 8014b9a:	1e75      	subs	r5, r6, #1
 8014b9c:	1aed      	subs	r5, r5, r3
 8014b9e:	b2ed      	uxtb	r5, r5
 8014ba0:	2600      	movs	r6, #0
 8014ba2:	455d      	cmp	r5, fp
 8014ba4:	d81f      	bhi.n	8014be6 <uxr_framing_read_transport+0x72>
 8014ba6:	19ab      	adds	r3, r5, r6
 8014ba8:	455b      	cmp	r3, fp
 8014baa:	bf84      	itt	hi
 8014bac:	ebab 0605 	subhi.w	r6, fp, r5
 8014bb0:	b2f6      	uxtbhi	r6, r6
 8014bb2:	b9ed      	cbnz	r5, 8014bf0 <uxr_framing_read_transport+0x7c>
 8014bb4:	f04f 0b00 	mov.w	fp, #0
 8014bb8:	f000 fc70 	bl	801549c <uxr_millis>
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	eba0 0808 	sub.w	r8, r0, r8
 8014bc2:	eba3 0308 	sub.w	r3, r3, r8
 8014bc6:	4658      	mov	r0, fp
 8014bc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014bcc:	603b      	str	r3, [r7, #0]
 8014bce:	b003      	add	sp, #12
 8014bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bd4:	2e00      	cmp	r6, #0
 8014bd6:	d049      	beq.n	8014c6c <uxr_framing_read_transport+0xf8>
 8014bd8:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014bdc:	b2ed      	uxtb	r5, r5
 8014bde:	3e01      	subs	r6, #1
 8014be0:	455d      	cmp	r5, fp
 8014be2:	b2f6      	uxtb	r6, r6
 8014be4:	d9df      	bls.n	8014ba6 <uxr_framing_read_transport+0x32>
 8014be6:	fa5f f58b 	uxtb.w	r5, fp
 8014bea:	2600      	movs	r6, #0
 8014bec:	2d00      	cmp	r5, #0
 8014bee:	d0e1      	beq.n	8014bb4 <uxr_framing_read_transport+0x40>
 8014bf0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014bf4:	3102      	adds	r1, #2
 8014bf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	4421      	add	r1, r4
 8014bfe:	462a      	mov	r2, r5
 8014c00:	4650      	mov	r0, sl
 8014c02:	47c8      	blx	r9
 8014c04:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014c08:	4a1a      	ldr	r2, [pc, #104]	@ (8014c74 <uxr_framing_read_transport+0x100>)
 8014c0a:	4403      	add	r3, r0
 8014c0c:	0859      	lsrs	r1, r3, #1
 8014c0e:	fba2 2101 	umull	r2, r1, r2, r1
 8014c12:	0889      	lsrs	r1, r1, #2
 8014c14:	222a      	movs	r2, #42	@ 0x2a
 8014c16:	fb02 3111 	mls	r1, r2, r1, r3
 8014c1a:	4683      	mov	fp, r0
 8014c1c:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d0c7      	beq.n	8014bb4 <uxr_framing_read_transport+0x40>
 8014c24:	42a8      	cmp	r0, r5
 8014c26:	d1c7      	bne.n	8014bb8 <uxr_framing_read_transport+0x44>
 8014c28:	2e00      	cmp	r6, #0
 8014c2a:	d0c5      	beq.n	8014bb8 <uxr_framing_read_transport+0x44>
 8014c2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c2e:	9300      	str	r3, [sp, #0]
 8014c30:	3102      	adds	r1, #2
 8014c32:	4632      	mov	r2, r6
 8014c34:	4421      	add	r1, r4
 8014c36:	2300      	movs	r3, #0
 8014c38:	4650      	mov	r0, sl
 8014c3a:	47c8      	blx	r9
 8014c3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014c40:	4a0c      	ldr	r2, [pc, #48]	@ (8014c74 <uxr_framing_read_transport+0x100>)
 8014c42:	180b      	adds	r3, r1, r0
 8014c44:	0859      	lsrs	r1, r3, #1
 8014c46:	fba2 1201 	umull	r1, r2, r2, r1
 8014c4a:	0892      	lsrs	r2, r2, #2
 8014c4c:	212a      	movs	r1, #42	@ 0x2a
 8014c4e:	fb01 3312 	mls	r3, r1, r2, r3
 8014c52:	eb00 0b05 	add.w	fp, r0, r5
 8014c56:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014c5a:	e7ad      	b.n	8014bb8 <uxr_framing_read_transport+0x44>
 8014c5c:	2600      	movs	r6, #0
 8014c5e:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8014c62:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8014c64:	d9bf      	bls.n	8014be6 <uxr_framing_read_transport+0x72>
 8014c66:	2102      	movs	r1, #2
 8014c68:	2529      	movs	r5, #41	@ 0x29
 8014c6a:	e7c4      	b.n	8014bf6 <uxr_framing_read_transport+0x82>
 8014c6c:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8014c70:	b2ed      	uxtb	r5, r5
 8014c72:	e796      	b.n	8014ba2 <uxr_framing_read_transport+0x2e>
 8014c74:	30c30c31 	.word	0x30c30c31

08014c78 <uxr_read_framed_msg>:
 8014c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c7c:	461e      	mov	r6, r3
 8014c7e:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014c82:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8014c86:	429d      	cmp	r5, r3
 8014c88:	b083      	sub	sp, #12
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	4688      	mov	r8, r1
 8014c8e:	4691      	mov	r9, r2
 8014c90:	f000 8188 	beq.w	8014fa4 <uxr_read_framed_msg+0x32c>
 8014c94:	7823      	ldrb	r3, [r4, #0]
 8014c96:	4dc1      	ldr	r5, [pc, #772]	@ (8014f9c <uxr_read_framed_msg+0x324>)
 8014c98:	4fc1      	ldr	r7, [pc, #772]	@ (8014fa0 <uxr_read_framed_msg+0x328>)
 8014c9a:	2b07      	cmp	r3, #7
 8014c9c:	d8fd      	bhi.n	8014c9a <uxr_read_framed_msg+0x22>
 8014c9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014ca2:	0115      	.short	0x0115
 8014ca4:	00d600f6 	.word	0x00d600f6
 8014ca8:	009000b9 	.word	0x009000b9
 8014cac:	0030004d 	.word	0x0030004d
 8014cb0:	0008      	.short	0x0008
 8014cb2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014cb6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014cba:	4299      	cmp	r1, r3
 8014cbc:	f000 814a 	beq.w	8014f54 <uxr_read_framed_msg+0x2dc>
 8014cc0:	18e2      	adds	r2, r4, r3
 8014cc2:	7892      	ldrb	r2, [r2, #2]
 8014cc4:	2a7d      	cmp	r2, #125	@ 0x7d
 8014cc6:	f000 8199 	beq.w	8014ffc <uxr_read_framed_msg+0x384>
 8014cca:	3301      	adds	r3, #1
 8014ccc:	0858      	lsrs	r0, r3, #1
 8014cce:	fba5 1000 	umull	r1, r0, r5, r0
 8014cd2:	0880      	lsrs	r0, r0, #2
 8014cd4:	212a      	movs	r1, #42	@ 0x2a
 8014cd6:	fb01 3310 	mls	r3, r1, r0, r3
 8014cda:	2a7e      	cmp	r2, #126	@ 0x7e
 8014cdc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014ce0:	f000 8252 	beq.w	8015188 <uxr_read_framed_msg+0x510>
 8014ce4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014ce6:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014ce8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4299      	cmp	r1, r3
 8014cf2:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014cf4:	7022      	strb	r2, [r4, #0]
 8014cf6:	f000 8179 	beq.w	8014fec <uxr_read_framed_msg+0x374>
 8014cfa:	2000      	movs	r0, #0
 8014cfc:	b003      	add	sp, #12
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d02:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014d06:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014d0a:	4299      	cmp	r1, r3
 8014d0c:	f000 8131 	beq.w	8014f72 <uxr_read_framed_msg+0x2fa>
 8014d10:	18e2      	adds	r2, r4, r3
 8014d12:	7890      	ldrb	r0, [r2, #2]
 8014d14:	287d      	cmp	r0, #125	@ 0x7d
 8014d16:	f000 8190 	beq.w	801503a <uxr_read_framed_msg+0x3c2>
 8014d1a:	3301      	adds	r3, #1
 8014d1c:	085a      	lsrs	r2, r3, #1
 8014d1e:	fba5 1202 	umull	r1, r2, r5, r2
 8014d22:	0892      	lsrs	r2, r2, #2
 8014d24:	212a      	movs	r1, #42	@ 0x2a
 8014d26:	fb01 3312 	mls	r3, r1, r2, r3
 8014d2a:	287e      	cmp	r0, #126	@ 0x7e
 8014d2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014d30:	f000 821a 	beq.w	8015168 <uxr_read_framed_msg+0x4f0>
 8014d34:	2307      	movs	r3, #7
 8014d36:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014d38:	7023      	strb	r3, [r4, #0]
 8014d3a:	e7ae      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014d3c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014d3e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014d42:	459e      	cmp	lr, r3
 8014d44:	d938      	bls.n	8014db8 <uxr_read_framed_msg+0x140>
 8014d46:	ee07 8a90 	vmov	s15, r8
 8014d4a:	212a      	movs	r1, #42	@ 0x2a
 8014d4c:	e020      	b.n	8014d90 <uxr_read_framed_msg+0x118>
 8014d4e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014d52:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8014d56:	f000 80d4 	beq.w	8014f02 <uxr_read_framed_msg+0x28a>
 8014d5a:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014d5e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014d62:	f000 8219 	beq.w	8015198 <uxr_read_framed_msg+0x520>
 8014d66:	f806 c003 	strb.w	ip, [r6, r3]
 8014d6a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8014d6e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014d70:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014d74:	ea8a 000c 	eor.w	r0, sl, ip
 8014d78:	b2c0      	uxtb	r0, r0
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8014d86:	4573      	cmp	r3, lr
 8014d88:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014d8a:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014d8c:	f080 8120 	bcs.w	8014fd0 <uxr_read_framed_msg+0x358>
 8014d90:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014d94:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014d98:	f100 0c01 	add.w	ip, r0, #1
 8014d9c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014da0:	fba5 8202 	umull	r8, r2, r5, r2
 8014da4:	0892      	lsrs	r2, r2, #2
 8014da6:	4582      	cmp	sl, r0
 8014da8:	eb04 0b00 	add.w	fp, r4, r0
 8014dac:	fb01 c212 	mls	r2, r1, r2, ip
 8014db0:	d1cd      	bne.n	8014d4e <uxr_read_framed_msg+0xd6>
 8014db2:	ee17 8a90 	vmov	r8, s15
 8014db6:	459e      	cmp	lr, r3
 8014db8:	f040 8111 	bne.w	8014fde <uxr_read_framed_msg+0x366>
 8014dbc:	2306      	movs	r3, #6
 8014dbe:	7023      	strb	r3, [r4, #0]
 8014dc0:	e76b      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014dc2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014dc6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014dca:	4298      	cmp	r0, r3
 8014dcc:	f000 80c2 	beq.w	8014f54 <uxr_read_framed_msg+0x2dc>
 8014dd0:	18e2      	adds	r2, r4, r3
 8014dd2:	7891      	ldrb	r1, [r2, #2]
 8014dd4:	297d      	cmp	r1, #125	@ 0x7d
 8014dd6:	f000 814c 	beq.w	8015072 <uxr_read_framed_msg+0x3fa>
 8014dda:	3301      	adds	r3, #1
 8014ddc:	085a      	lsrs	r2, r3, #1
 8014dde:	fba5 0202 	umull	r0, r2, r5, r2
 8014de2:	0892      	lsrs	r2, r2, #2
 8014de4:	202a      	movs	r0, #42	@ 0x2a
 8014de6:	fb00 3312 	mls	r3, r0, r2, r3
 8014dea:	297e      	cmp	r1, #126	@ 0x7e
 8014dec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014df0:	f000 81ca 	beq.w	8015188 <uxr_read_framed_msg+0x510>
 8014df4:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014df6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014dfa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	2000      	movs	r0, #0
 8014e00:	428b      	cmp	r3, r1
 8014e02:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014e04:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014e06:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014e08:	f240 80df 	bls.w	8014fca <uxr_read_framed_msg+0x352>
 8014e0c:	7020      	strb	r0, [r4, #0]
 8014e0e:	b003      	add	sp, #12
 8014e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e14:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014e18:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014e1c:	4299      	cmp	r1, r3
 8014e1e:	f000 80a8 	beq.w	8014f72 <uxr_read_framed_msg+0x2fa>
 8014e22:	18e2      	adds	r2, r4, r3
 8014e24:	7890      	ldrb	r0, [r2, #2]
 8014e26:	287d      	cmp	r0, #125	@ 0x7d
 8014e28:	f000 8164 	beq.w	80150f4 <uxr_read_framed_msg+0x47c>
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	085a      	lsrs	r2, r3, #1
 8014e30:	fba5 1202 	umull	r1, r2, r5, r2
 8014e34:	0892      	lsrs	r2, r2, #2
 8014e36:	212a      	movs	r1, #42	@ 0x2a
 8014e38:	fb01 3312 	mls	r3, r1, r2, r3
 8014e3c:	287e      	cmp	r0, #126	@ 0x7e
 8014e3e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014e42:	f000 8191 	beq.w	8015168 <uxr_read_framed_msg+0x4f0>
 8014e46:	2304      	movs	r3, #4
 8014e48:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014e4a:	7023      	strb	r3, [r4, #0]
 8014e4c:	e725      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014e4e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014e52:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014e56:	4290      	cmp	r0, r2
 8014e58:	f000 80b3 	beq.w	8014fc2 <uxr_read_framed_msg+0x34a>
 8014e5c:	18a3      	adds	r3, r4, r2
 8014e5e:	7899      	ldrb	r1, [r3, #2]
 8014e60:	297d      	cmp	r1, #125	@ 0x7d
 8014e62:	f000 8164 	beq.w	801512e <uxr_read_framed_msg+0x4b6>
 8014e66:	3201      	adds	r2, #1
 8014e68:	0850      	lsrs	r0, r2, #1
 8014e6a:	fba5 3000 	umull	r3, r0, r5, r0
 8014e6e:	0880      	lsrs	r0, r0, #2
 8014e70:	232a      	movs	r3, #42	@ 0x2a
 8014e72:	fb03 2210 	mls	r2, r3, r0, r2
 8014e76:	297e      	cmp	r1, #126	@ 0x7e
 8014e78:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014e7c:	f000 8188 	beq.w	8015190 <uxr_read_framed_msg+0x518>
 8014e80:	7863      	ldrb	r3, [r4, #1]
 8014e82:	428b      	cmp	r3, r1
 8014e84:	bf0c      	ite	eq
 8014e86:	2303      	moveq	r3, #3
 8014e88:	2300      	movne	r3, #0
 8014e8a:	7023      	strb	r3, [r4, #0]
 8014e8c:	e705      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014e8e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014e92:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014e96:	2200      	movs	r2, #0
 8014e98:	4299      	cmp	r1, r3
 8014e9a:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8014e9e:	d06c      	beq.n	8014f7a <uxr_read_framed_msg+0x302>
 8014ea0:	18e2      	adds	r2, r4, r3
 8014ea2:	7890      	ldrb	r0, [r2, #2]
 8014ea4:	287d      	cmp	r0, #125	@ 0x7d
 8014ea6:	f000 8101 	beq.w	80150ac <uxr_read_framed_msg+0x434>
 8014eaa:	3301      	adds	r3, #1
 8014eac:	085a      	lsrs	r2, r3, #1
 8014eae:	fba5 1202 	umull	r1, r2, r5, r2
 8014eb2:	0892      	lsrs	r2, r2, #2
 8014eb4:	212a      	movs	r1, #42	@ 0x2a
 8014eb6:	fb01 3312 	mls	r3, r1, r2, r3
 8014eba:	287e      	cmp	r0, #126	@ 0x7e
 8014ebc:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014ec0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014ec4:	d059      	beq.n	8014f7a <uxr_read_framed_msg+0x302>
 8014ec6:	2302      	movs	r3, #2
 8014ec8:	7023      	strb	r3, [r4, #0]
 8014eca:	e6e6      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014ecc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014ed0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014ed4:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014ed8:	1c51      	adds	r1, r2, #1
 8014eda:	084b      	lsrs	r3, r1, #1
 8014edc:	fba5 c303 	umull	ip, r3, r5, r3
 8014ee0:	089b      	lsrs	r3, r3, #2
 8014ee2:	fb0e 1313 	mls	r3, lr, r3, r1
 8014ee6:	4592      	cmp	sl, r2
 8014ee8:	eb04 0002 	add.w	r0, r4, r2
 8014eec:	b2da      	uxtb	r2, r3
 8014eee:	f43f af04 	beq.w	8014cfa <uxr_read_framed_msg+0x82>
 8014ef2:	7883      	ldrb	r3, [r0, #2]
 8014ef4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014ef8:	2b7e      	cmp	r3, #126	@ 0x7e
 8014efa:	d1ed      	bne.n	8014ed8 <uxr_read_framed_msg+0x260>
 8014efc:	2301      	movs	r3, #1
 8014efe:	7023      	strb	r3, [r4, #0]
 8014f00:	e6cb      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014f02:	f100 0c01 	add.w	ip, r0, #1
 8014f06:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014f0a:	fba5 8202 	umull	r8, r2, r5, r2
 8014f0e:	0892      	lsrs	r2, r2, #2
 8014f10:	fb01 c212 	mls	r2, r1, r2, ip
 8014f14:	eb04 0c02 	add.w	ip, r4, r2
 8014f18:	b2d2      	uxtb	r2, r2
 8014f1a:	4592      	cmp	sl, r2
 8014f1c:	f100 0002 	add.w	r0, r0, #2
 8014f20:	f43f af47 	beq.w	8014db2 <uxr_read_framed_msg+0x13a>
 8014f24:	0842      	lsrs	r2, r0, #1
 8014f26:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014f2a:	fba5 8202 	umull	r8, r2, r5, r2
 8014f2e:	0892      	lsrs	r2, r2, #2
 8014f30:	fb01 0012 	mls	r0, r1, r2, r0
 8014f34:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014f38:	f08a 0c20 	eor.w	ip, sl, #32
 8014f3c:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014f40:	f47f af11 	bne.w	8014d66 <uxr_read_framed_msg+0xee>
 8014f44:	459e      	cmp	lr, r3
 8014f46:	ee17 8a90 	vmov	r8, s15
 8014f4a:	f43f af37 	beq.w	8014dbc <uxr_read_framed_msg+0x144>
 8014f4e:	2301      	movs	r3, #1
 8014f50:	7023      	strb	r3, [r4, #0]
 8014f52:	e6a2      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f56:	9300      	str	r3, [sp, #0]
 8014f58:	2301      	movs	r3, #1
 8014f5a:	9301      	str	r3, [sp, #4]
 8014f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f5e:	464a      	mov	r2, r9
 8014f60:	4641      	mov	r1, r8
 8014f62:	4620      	mov	r0, r4
 8014f64:	f7ff fe06 	bl	8014b74 <uxr_framing_read_transport>
 8014f68:	2800      	cmp	r0, #0
 8014f6a:	f43f aec6 	beq.w	8014cfa <uxr_read_framed_msg+0x82>
 8014f6e:	7823      	ldrb	r3, [r4, #0]
 8014f70:	e693      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014f72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	2302      	movs	r3, #2
 8014f78:	e7ef      	b.n	8014f5a <uxr_read_framed_msg+0x2e2>
 8014f7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f7c:	9300      	str	r3, [sp, #0]
 8014f7e:	2304      	movs	r3, #4
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	464a      	mov	r2, r9
 8014f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f86:	4641      	mov	r1, r8
 8014f88:	4620      	mov	r0, r4
 8014f8a:	f7ff fdf3 	bl	8014b74 <uxr_framing_read_transport>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	d1ed      	bne.n	8014f6e <uxr_read_framed_msg+0x2f6>
 8014f92:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014f96:	2b7e      	cmp	r3, #126	@ 0x7e
 8014f98:	d0e9      	beq.n	8014f6e <uxr_read_framed_msg+0x2f6>
 8014f9a:	e6ae      	b.n	8014cfa <uxr_read_framed_msg+0x82>
 8014f9c:	30c30c31 	.word	0x30c30c31
 8014fa0:	0801e0a4 	.word	0x0801e0a4
 8014fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fa6:	9300      	str	r3, [sp, #0]
 8014fa8:	2305      	movs	r3, #5
 8014faa:	9301      	str	r3, [sp, #4]
 8014fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fae:	f7ff fde1 	bl	8014b74 <uxr_framing_read_transport>
 8014fb2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014fb6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	f43f ae9d 	beq.w	8014cfa <uxr_read_framed_msg+0x82>
 8014fc0:	e668      	b.n	8014c94 <uxr_read_framed_msg+0x1c>
 8014fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fc4:	9300      	str	r3, [sp, #0]
 8014fc6:	2303      	movs	r3, #3
 8014fc8:	e7c7      	b.n	8014f5a <uxr_read_framed_msg+0x2e2>
 8014fca:	2305      	movs	r3, #5
 8014fcc:	7023      	strb	r3, [r4, #0]
 8014fce:	e664      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8014fd0:	ee17 8a90 	vmov	r8, s15
 8014fd4:	f43f aef2 	beq.w	8014dbc <uxr_read_framed_msg+0x144>
 8014fd8:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014fdc:	d08e      	beq.n	8014efc <uxr_read_framed_msg+0x284>
 8014fde:	ebae 0303 	sub.w	r3, lr, r3
 8014fe2:	3302      	adds	r3, #2
 8014fe4:	9301      	str	r3, [sp, #4]
 8014fe6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fe8:	9300      	str	r3, [sp, #0]
 8014fea:	e7b7      	b.n	8014f5c <uxr_read_framed_msg+0x2e4>
 8014fec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014fee:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014ff2:	7013      	strb	r3, [r2, #0]
 8014ff4:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014ff6:	b003      	add	sp, #12
 8014ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffc:	f103 0c01 	add.w	ip, r3, #1
 8015000:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015004:	fba5 0202 	umull	r0, r2, r5, r2
 8015008:	0892      	lsrs	r2, r2, #2
 801500a:	202a      	movs	r0, #42	@ 0x2a
 801500c:	fb00 c212 	mls	r2, r0, r2, ip
 8015010:	fa5f fc82 	uxtb.w	ip, r2
 8015014:	4561      	cmp	r1, ip
 8015016:	d09d      	beq.n	8014f54 <uxr_read_framed_msg+0x2dc>
 8015018:	3302      	adds	r3, #2
 801501a:	4422      	add	r2, r4
 801501c:	0859      	lsrs	r1, r3, #1
 801501e:	7892      	ldrb	r2, [r2, #2]
 8015020:	fba5 c101 	umull	ip, r1, r5, r1
 8015024:	0889      	lsrs	r1, r1, #2
 8015026:	fb00 3311 	mls	r3, r0, r1, r3
 801502a:	2a7e      	cmp	r2, #126	@ 0x7e
 801502c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015030:	f000 80aa 	beq.w	8015188 <uxr_read_framed_msg+0x510>
 8015034:	f082 0220 	eor.w	r2, r2, #32
 8015038:	e654      	b.n	8014ce4 <uxr_read_framed_msg+0x6c>
 801503a:	1c58      	adds	r0, r3, #1
 801503c:	0842      	lsrs	r2, r0, #1
 801503e:	fba5 c202 	umull	ip, r2, r5, r2
 8015042:	0892      	lsrs	r2, r2, #2
 8015044:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015048:	fb0c 0212 	mls	r2, ip, r2, r0
 801504c:	b2d0      	uxtb	r0, r2
 801504e:	4281      	cmp	r1, r0
 8015050:	d08f      	beq.n	8014f72 <uxr_read_framed_msg+0x2fa>
 8015052:	4422      	add	r2, r4
 8015054:	3302      	adds	r3, #2
 8015056:	7890      	ldrb	r0, [r2, #2]
 8015058:	085a      	lsrs	r2, r3, #1
 801505a:	fba5 1202 	umull	r1, r2, r5, r2
 801505e:	0892      	lsrs	r2, r2, #2
 8015060:	fb0c 3312 	mls	r3, ip, r2, r3
 8015064:	287e      	cmp	r0, #126	@ 0x7e
 8015066:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801506a:	d07d      	beq.n	8015168 <uxr_read_framed_msg+0x4f0>
 801506c:	f080 0020 	eor.w	r0, r0, #32
 8015070:	e660      	b.n	8014d34 <uxr_read_framed_msg+0xbc>
 8015072:	1c59      	adds	r1, r3, #1
 8015074:	084a      	lsrs	r2, r1, #1
 8015076:	fba5 c202 	umull	ip, r2, r5, r2
 801507a:	0892      	lsrs	r2, r2, #2
 801507c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015080:	fb0c 1212 	mls	r2, ip, r2, r1
 8015084:	b2d1      	uxtb	r1, r2
 8015086:	4288      	cmp	r0, r1
 8015088:	f43f af64 	beq.w	8014f54 <uxr_read_framed_msg+0x2dc>
 801508c:	4422      	add	r2, r4
 801508e:	3302      	adds	r3, #2
 8015090:	7891      	ldrb	r1, [r2, #2]
 8015092:	085a      	lsrs	r2, r3, #1
 8015094:	fba5 0202 	umull	r0, r2, r5, r2
 8015098:	0892      	lsrs	r2, r2, #2
 801509a:	fb0c 3312 	mls	r3, ip, r2, r3
 801509e:	297e      	cmp	r1, #126	@ 0x7e
 80150a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150a4:	d070      	beq.n	8015188 <uxr_read_framed_msg+0x510>
 80150a6:	f081 0120 	eor.w	r1, r1, #32
 80150aa:	e6a3      	b.n	8014df4 <uxr_read_framed_msg+0x17c>
 80150ac:	f103 0c01 	add.w	ip, r3, #1
 80150b0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80150b4:	fba5 0202 	umull	r0, r2, r5, r2
 80150b8:	0892      	lsrs	r2, r2, #2
 80150ba:	202a      	movs	r0, #42	@ 0x2a
 80150bc:	fb00 c212 	mls	r2, r0, r2, ip
 80150c0:	fa5f fc82 	uxtb.w	ip, r2
 80150c4:	4561      	cmp	r1, ip
 80150c6:	f43f af58 	beq.w	8014f7a <uxr_read_framed_msg+0x302>
 80150ca:	4422      	add	r2, r4
 80150cc:	3302      	adds	r3, #2
 80150ce:	7891      	ldrb	r1, [r2, #2]
 80150d0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80150d4:	085a      	lsrs	r2, r3, #1
 80150d6:	fba5 c202 	umull	ip, r2, r5, r2
 80150da:	0892      	lsrs	r2, r2, #2
 80150dc:	fb00 3312 	mls	r3, r0, r2, r3
 80150e0:	297e      	cmp	r1, #126	@ 0x7e
 80150e2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150e6:	f43f af48 	beq.w	8014f7a <uxr_read_framed_msg+0x302>
 80150ea:	f081 0120 	eor.w	r1, r1, #32
 80150ee:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80150f2:	e6e8      	b.n	8014ec6 <uxr_read_framed_msg+0x24e>
 80150f4:	1c58      	adds	r0, r3, #1
 80150f6:	0842      	lsrs	r2, r0, #1
 80150f8:	fba5 c202 	umull	ip, r2, r5, r2
 80150fc:	0892      	lsrs	r2, r2, #2
 80150fe:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015102:	fb0c 0212 	mls	r2, ip, r2, r0
 8015106:	b2d0      	uxtb	r0, r2
 8015108:	4281      	cmp	r1, r0
 801510a:	f43f af32 	beq.w	8014f72 <uxr_read_framed_msg+0x2fa>
 801510e:	4422      	add	r2, r4
 8015110:	3302      	adds	r3, #2
 8015112:	7890      	ldrb	r0, [r2, #2]
 8015114:	085a      	lsrs	r2, r3, #1
 8015116:	fba5 1202 	umull	r1, r2, r5, r2
 801511a:	0892      	lsrs	r2, r2, #2
 801511c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015120:	287e      	cmp	r0, #126	@ 0x7e
 8015122:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015126:	d01f      	beq.n	8015168 <uxr_read_framed_msg+0x4f0>
 8015128:	f080 0020 	eor.w	r0, r0, #32
 801512c:	e68b      	b.n	8014e46 <uxr_read_framed_msg+0x1ce>
 801512e:	1c51      	adds	r1, r2, #1
 8015130:	084b      	lsrs	r3, r1, #1
 8015132:	fba5 c303 	umull	ip, r3, r5, r3
 8015136:	089b      	lsrs	r3, r3, #2
 8015138:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801513c:	fb0c 1313 	mls	r3, ip, r3, r1
 8015140:	b2d9      	uxtb	r1, r3
 8015142:	4288      	cmp	r0, r1
 8015144:	f43f af3d 	beq.w	8014fc2 <uxr_read_framed_msg+0x34a>
 8015148:	3202      	adds	r2, #2
 801514a:	4423      	add	r3, r4
 801514c:	0850      	lsrs	r0, r2, #1
 801514e:	789b      	ldrb	r3, [r3, #2]
 8015150:	fba5 1000 	umull	r1, r0, r5, r0
 8015154:	0880      	lsrs	r0, r0, #2
 8015156:	fb0c 2210 	mls	r2, ip, r0, r2
 801515a:	2b7e      	cmp	r3, #126	@ 0x7e
 801515c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015160:	d016      	beq.n	8015190 <uxr_read_framed_msg+0x518>
 8015162:	f083 0120 	eor.w	r1, r3, #32
 8015166:	e68b      	b.n	8014e80 <uxr_read_framed_msg+0x208>
 8015168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	2302      	movs	r3, #2
 801516e:	9301      	str	r3, [sp, #4]
 8015170:	464a      	mov	r2, r9
 8015172:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015174:	4641      	mov	r1, r8
 8015176:	4620      	mov	r0, r4
 8015178:	f7ff fcfc 	bl	8014b74 <uxr_framing_read_transport>
 801517c:	2800      	cmp	r0, #0
 801517e:	f47f aef6 	bne.w	8014f6e <uxr_read_framed_msg+0x2f6>
 8015182:	2301      	movs	r3, #1
 8015184:	7023      	strb	r3, [r4, #0]
 8015186:	e588      	b.n	8014c9a <uxr_read_framed_msg+0x22>
 8015188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801518a:	9300      	str	r3, [sp, #0]
 801518c:	2301      	movs	r3, #1
 801518e:	e7ee      	b.n	801516e <uxr_read_framed_msg+0x4f6>
 8015190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015192:	9300      	str	r3, [sp, #0]
 8015194:	2303      	movs	r3, #3
 8015196:	e7ea      	b.n	801516e <uxr_read_framed_msg+0x4f6>
 8015198:	ee17 8a90 	vmov	r8, s15
 801519c:	e6ae      	b.n	8014efc <uxr_read_framed_msg+0x284>
 801519e:	bf00      	nop

080151a0 <uxr_stream_id>:
 80151a0:	2901      	cmp	r1, #1
 80151a2:	b082      	sub	sp, #8
 80151a4:	d01d      	beq.n	80151e2 <uxr_stream_id+0x42>
 80151a6:	2902      	cmp	r1, #2
 80151a8:	f04f 0c00 	mov.w	ip, #0
 80151ac:	d01e      	beq.n	80151ec <uxr_stream_id+0x4c>
 80151ae:	2300      	movs	r3, #0
 80151b0:	f36c 0307 	bfi	r3, ip, #0, #8
 80151b4:	f360 230f 	bfi	r3, r0, #8, #8
 80151b8:	f361 4317 	bfi	r3, r1, #16, #8
 80151bc:	f362 631f 	bfi	r3, r2, #24, #8
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	2000      	movs	r0, #0
 80151c4:	f362 0007 	bfi	r0, r2, #0, #8
 80151c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80151cc:	f362 200f 	bfi	r0, r2, #8, #8
 80151d0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80151d4:	f362 4017 	bfi	r0, r2, #16, #8
 80151d8:	0e1b      	lsrs	r3, r3, #24
 80151da:	f363 601f 	bfi	r0, r3, #24, #8
 80151de:	b002      	add	sp, #8
 80151e0:	4770      	bx	lr
 80151e2:	f100 0c01 	add.w	ip, r0, #1
 80151e6:	fa5f fc8c 	uxtb.w	ip, ip
 80151ea:	e7e0      	b.n	80151ae <uxr_stream_id+0xe>
 80151ec:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80151f0:	e7dd      	b.n	80151ae <uxr_stream_id+0xe>
 80151f2:	bf00      	nop

080151f4 <uxr_stream_id_from_raw>:
 80151f4:	b082      	sub	sp, #8
 80151f6:	b130      	cbz	r0, 8015206 <uxr_stream_id_from_raw+0x12>
 80151f8:	0603      	lsls	r3, r0, #24
 80151fa:	d420      	bmi.n	801523e <uxr_stream_id_from_raw+0x4a>
 80151fc:	1e42      	subs	r2, r0, #1
 80151fe:	b2d2      	uxtb	r2, r2
 8015200:	f04f 0c01 	mov.w	ip, #1
 8015204:	e001      	b.n	801520a <uxr_stream_id_from_raw+0x16>
 8015206:	4684      	mov	ip, r0
 8015208:	4602      	mov	r2, r0
 801520a:	2300      	movs	r3, #0
 801520c:	f360 0307 	bfi	r3, r0, #0, #8
 8015210:	f362 230f 	bfi	r3, r2, #8, #8
 8015214:	f36c 4317 	bfi	r3, ip, #16, #8
 8015218:	f361 631f 	bfi	r3, r1, #24, #8
 801521c:	b2da      	uxtb	r2, r3
 801521e:	2000      	movs	r0, #0
 8015220:	f362 0007 	bfi	r0, r2, #0, #8
 8015224:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015228:	f362 200f 	bfi	r0, r2, #8, #8
 801522c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015230:	f362 4017 	bfi	r0, r2, #16, #8
 8015234:	0e1b      	lsrs	r3, r3, #24
 8015236:	f363 601f 	bfi	r0, r3, #24, #8
 801523a:	b002      	add	sp, #8
 801523c:	4770      	bx	lr
 801523e:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8015242:	f04f 0c02 	mov.w	ip, #2
 8015246:	e7e0      	b.n	801520a <uxr_stream_id_from_raw+0x16>

08015248 <uxr_init_stream_storage>:
 8015248:	2300      	movs	r3, #0
 801524a:	7403      	strb	r3, [r0, #16]
 801524c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8015250:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8015254:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015258:	4770      	bx	lr
 801525a:	bf00      	nop

0801525c <uxr_reset_stream_storage>:
 801525c:	b570      	push	{r4, r5, r6, lr}
 801525e:	7c03      	ldrb	r3, [r0, #16]
 8015260:	4604      	mov	r4, r0
 8015262:	b153      	cbz	r3, 801527a <uxr_reset_stream_storage+0x1e>
 8015264:	4606      	mov	r6, r0
 8015266:	2500      	movs	r5, #0
 8015268:	4630      	mov	r0, r6
 801526a:	f005 f829 	bl	801a2c0 <uxr_reset_output_best_effort_stream>
 801526e:	7c23      	ldrb	r3, [r4, #16]
 8015270:	3501      	adds	r5, #1
 8015272:	42ab      	cmp	r3, r5
 8015274:	f106 0610 	add.w	r6, r6, #16
 8015278:	d8f6      	bhi.n	8015268 <uxr_reset_stream_storage+0xc>
 801527a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801527e:	b163      	cbz	r3, 801529a <uxr_reset_stream_storage+0x3e>
 8015280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015284:	2500      	movs	r5, #0
 8015286:	4630      	mov	r0, r6
 8015288:	f004 fe1c 	bl	8019ec4 <uxr_reset_input_best_effort_stream>
 801528c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015290:	3501      	adds	r5, #1
 8015292:	42ab      	cmp	r3, r5
 8015294:	f106 0602 	add.w	r6, r6, #2
 8015298:	d8f5      	bhi.n	8015286 <uxr_reset_stream_storage+0x2a>
 801529a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801529e:	b163      	cbz	r3, 80152ba <uxr_reset_stream_storage+0x5e>
 80152a0:	f104 0618 	add.w	r6, r4, #24
 80152a4:	2500      	movs	r5, #0
 80152a6:	4630      	mov	r0, r6
 80152a8:	f005 f8b6 	bl	801a418 <uxr_reset_output_reliable_stream>
 80152ac:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80152b0:	3501      	adds	r5, #1
 80152b2:	42ab      	cmp	r3, r5
 80152b4:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80152b8:	d8f5      	bhi.n	80152a6 <uxr_reset_stream_storage+0x4a>
 80152ba:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80152be:	b163      	cbz	r3, 80152da <uxr_reset_stream_storage+0x7e>
 80152c0:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80152c4:	2500      	movs	r5, #0
 80152c6:	4630      	mov	r0, r6
 80152c8:	f004 fe70 	bl	8019fac <uxr_reset_input_reliable_stream>
 80152cc:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80152d0:	3501      	adds	r5, #1
 80152d2:	42ab      	cmp	r3, r5
 80152d4:	f106 0618 	add.w	r6, r6, #24
 80152d8:	d8f5      	bhi.n	80152c6 <uxr_reset_stream_storage+0x6a>
 80152da:	bd70      	pop	{r4, r5, r6, pc}

080152dc <uxr_add_output_best_effort_buffer>:
 80152dc:	b510      	push	{r4, lr}
 80152de:	7c04      	ldrb	r4, [r0, #16]
 80152e0:	f104 0c01 	add.w	ip, r4, #1
 80152e4:	b082      	sub	sp, #8
 80152e6:	f880 c010 	strb.w	ip, [r0, #16]
 80152ea:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80152ee:	f004 ffdd 	bl	801a2ac <uxr_init_output_best_effort_stream>
 80152f2:	2201      	movs	r2, #1
 80152f4:	4611      	mov	r1, r2
 80152f6:	4620      	mov	r0, r4
 80152f8:	b002      	add	sp, #8
 80152fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152fe:	f7ff bf4f 	b.w	80151a0 <uxr_stream_id>
 8015302:	bf00      	nop

08015304 <uxr_add_output_reliable_buffer>:
 8015304:	b510      	push	{r4, lr}
 8015306:	b084      	sub	sp, #16
 8015308:	4684      	mov	ip, r0
 801530a:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801530e:	9000      	str	r0, [sp, #0]
 8015310:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8015314:	2028      	movs	r0, #40	@ 0x28
 8015316:	fb00 c004 	mla	r0, r0, r4, ip
 801531a:	f104 0e01 	add.w	lr, r4, #1
 801531e:	3018      	adds	r0, #24
 8015320:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8015324:	f005 f840 	bl	801a3a8 <uxr_init_output_reliable_stream>
 8015328:	2201      	movs	r2, #1
 801532a:	2102      	movs	r1, #2
 801532c:	4620      	mov	r0, r4
 801532e:	b004      	add	sp, #16
 8015330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015334:	f7ff bf34 	b.w	80151a0 <uxr_stream_id>

08015338 <uxr_add_input_best_effort_buffer>:
 8015338:	b510      	push	{r4, lr}
 801533a:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 801533e:	4603      	mov	r3, r0
 8015340:	1c62      	adds	r2, r4, #1
 8015342:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8015346:	b082      	sub	sp, #8
 8015348:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 801534c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015350:	f004 fdb4 	bl	8019ebc <uxr_init_input_best_effort_stream>
 8015354:	2200      	movs	r2, #0
 8015356:	2101      	movs	r1, #1
 8015358:	4620      	mov	r0, r4
 801535a:	b002      	add	sp, #8
 801535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015360:	f7ff bf1e 	b.w	80151a0 <uxr_stream_id>

08015364 <uxr_add_input_reliable_buffer>:
 8015364:	b510      	push	{r4, lr}
 8015366:	b084      	sub	sp, #16
 8015368:	4684      	mov	ip, r0
 801536a:	9806      	ldr	r0, [sp, #24]
 801536c:	9000      	str	r0, [sp, #0]
 801536e:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8015372:	2018      	movs	r0, #24
 8015374:	fb00 c004 	mla	r0, r0, r4, ip
 8015378:	f104 0e01 	add.w	lr, r4, #1
 801537c:	3048      	adds	r0, #72	@ 0x48
 801537e:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8015382:	f004 fde7 	bl	8019f54 <uxr_init_input_reliable_stream>
 8015386:	2200      	movs	r2, #0
 8015388:	2102      	movs	r1, #2
 801538a:	4620      	mov	r0, r4
 801538c:	b004      	add	sp, #16
 801538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015392:	f7ff bf05 	b.w	80151a0 <uxr_stream_id>
 8015396:	bf00      	nop

08015398 <uxr_get_output_best_effort_stream>:
 8015398:	7c03      	ldrb	r3, [r0, #16]
 801539a:	428b      	cmp	r3, r1
 801539c:	bf8c      	ite	hi
 801539e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80153a2:	2000      	movls	r0, #0
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop

080153a8 <uxr_get_output_reliable_stream>:
 80153a8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80153ac:	428b      	cmp	r3, r1
 80153ae:	bf83      	ittte	hi
 80153b0:	2328      	movhi	r3, #40	@ 0x28
 80153b2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80153b6:	3018      	addhi	r0, #24
 80153b8:	2000      	movls	r0, #0
 80153ba:	4770      	bx	lr

080153bc <uxr_get_input_best_effort_stream>:
 80153bc:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80153c0:	428b      	cmp	r3, r1
 80153c2:	bf86      	itte	hi
 80153c4:	3121      	addhi	r1, #33	@ 0x21
 80153c6:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80153ca:	2000      	movls	r0, #0
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop

080153d0 <uxr_get_input_reliable_stream>:
 80153d0:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80153d4:	428b      	cmp	r3, r1
 80153d6:	bf83      	ittte	hi
 80153d8:	2318      	movhi	r3, #24
 80153da:	fb03 0001 	mlahi	r0, r3, r1, r0
 80153de:	3048      	addhi	r0, #72	@ 0x48
 80153e0:	2000      	movls	r0, #0
 80153e2:	4770      	bx	lr

080153e4 <uxr_output_streams_confirmed>:
 80153e4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80153e8:	b183      	cbz	r3, 801540c <uxr_output_streams_confirmed+0x28>
 80153ea:	b570      	push	{r4, r5, r6, lr}
 80153ec:	4606      	mov	r6, r0
 80153ee:	f100 0518 	add.w	r5, r0, #24
 80153f2:	2400      	movs	r4, #0
 80153f4:	e001      	b.n	80153fa <uxr_output_streams_confirmed+0x16>
 80153f6:	3528      	adds	r5, #40	@ 0x28
 80153f8:	b138      	cbz	r0, 801540a <uxr_output_streams_confirmed+0x26>
 80153fa:	4628      	mov	r0, r5
 80153fc:	f005 fa7c 	bl	801a8f8 <uxr_is_output_up_to_date>
 8015400:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8015404:	3401      	adds	r4, #1
 8015406:	42a3      	cmp	r3, r4
 8015408:	d8f5      	bhi.n	80153f6 <uxr_output_streams_confirmed+0x12>
 801540a:	bd70      	pop	{r4, r5, r6, pc}
 801540c:	2001      	movs	r0, #1
 801540e:	4770      	bx	lr

08015410 <uxr_buffer_submessage_header>:
 8015410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015412:	4604      	mov	r4, r0
 8015414:	460e      	mov	r6, r1
 8015416:	2104      	movs	r1, #4
 8015418:	4615      	mov	r5, r2
 801541a:	461f      	mov	r7, r3
 801541c:	f7f8 fdb0 	bl	800df80 <ucdr_align_to>
 8015420:	2301      	movs	r3, #1
 8015422:	ea47 0203 	orr.w	r2, r7, r3
 8015426:	4631      	mov	r1, r6
 8015428:	7523      	strb	r3, [r4, #20]
 801542a:	4620      	mov	r0, r4
 801542c:	462b      	mov	r3, r5
 801542e:	f000 fa27 	bl	8015880 <uxr_serialize_submessage_header>
 8015432:	4620      	mov	r0, r4
 8015434:	f7f8 fdba 	bl	800dfac <ucdr_buffer_remaining>
 8015438:	42a8      	cmp	r0, r5
 801543a:	bf34      	ite	cc
 801543c:	2000      	movcc	r0, #0
 801543e:	2001      	movcs	r0, #1
 8015440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015442:	bf00      	nop

08015444 <uxr_read_submessage_header>:
 8015444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015448:	4604      	mov	r4, r0
 801544a:	460d      	mov	r5, r1
 801544c:	2104      	movs	r1, #4
 801544e:	4616      	mov	r6, r2
 8015450:	4698      	mov	r8, r3
 8015452:	f7f8 fd95 	bl	800df80 <ucdr_align_to>
 8015456:	4620      	mov	r0, r4
 8015458:	f7f8 fda8 	bl	800dfac <ucdr_buffer_remaining>
 801545c:	2803      	cmp	r0, #3
 801545e:	bf8c      	ite	hi
 8015460:	2701      	movhi	r7, #1
 8015462:	2700      	movls	r7, #0
 8015464:	d802      	bhi.n	801546c <uxr_read_submessage_header+0x28>
 8015466:	4638      	mov	r0, r7
 8015468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801546c:	4633      	mov	r3, r6
 801546e:	4642      	mov	r2, r8
 8015470:	4620      	mov	r0, r4
 8015472:	4629      	mov	r1, r5
 8015474:	f000 fa18 	bl	80158a8 <uxr_deserialize_submessage_header>
 8015478:	f898 3000 	ldrb.w	r3, [r8]
 801547c:	f003 0201 	and.w	r2, r3, #1
 8015480:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8015484:	f888 3000 	strb.w	r3, [r8]
 8015488:	7522      	strb	r2, [r4, #20]
 801548a:	4638      	mov	r0, r7
 801548c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015490 <uxr_submessage_padding>:
 8015490:	f010 0003 	ands.w	r0, r0, #3
 8015494:	bf18      	it	ne
 8015496:	f1c0 0004 	rsbne	r0, r0, #4
 801549a:	4770      	bx	lr

0801549c <uxr_millis>:
 801549c:	b510      	push	{r4, lr}
 801549e:	b084      	sub	sp, #16
 80154a0:	4669      	mov	r1, sp
 80154a2:	2001      	movs	r0, #1
 80154a4:	f7ee f8d0 	bl	8003648 <clock_gettime>
 80154a8:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80154ac:	4906      	ldr	r1, [pc, #24]	@ (80154c8 <uxr_millis+0x2c>)
 80154ae:	fba0 0301 	umull	r0, r3, r0, r1
 80154b2:	1900      	adds	r0, r0, r4
 80154b4:	fb01 3102 	mla	r1, r1, r2, r3
 80154b8:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80154bc:	4a03      	ldr	r2, [pc, #12]	@ (80154cc <uxr_millis+0x30>)
 80154be:	2300      	movs	r3, #0
 80154c0:	f7eb fb2c 	bl	8000b1c <__aeabi_ldivmod>
 80154c4:	b004      	add	sp, #16
 80154c6:	bd10      	pop	{r4, pc}
 80154c8:	3b9aca00 	.word	0x3b9aca00
 80154cc:	000f4240 	.word	0x000f4240

080154d0 <uxr_nanos>:
 80154d0:	b510      	push	{r4, lr}
 80154d2:	b084      	sub	sp, #16
 80154d4:	4669      	mov	r1, sp
 80154d6:	2001      	movs	r0, #1
 80154d8:	f7ee f8b6 	bl	8003648 <clock_gettime>
 80154dc:	4a06      	ldr	r2, [pc, #24]	@ (80154f8 <uxr_nanos+0x28>)
 80154de:	9800      	ldr	r0, [sp, #0]
 80154e0:	9902      	ldr	r1, [sp, #8]
 80154e2:	9c01      	ldr	r4, [sp, #4]
 80154e4:	fba0 0302 	umull	r0, r3, r0, r2
 80154e8:	1840      	adds	r0, r0, r1
 80154ea:	fb02 3304 	mla	r3, r2, r4, r3
 80154ee:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80154f2:	b004      	add	sp, #16
 80154f4:	bd10      	pop	{r4, pc}
 80154f6:	bf00      	nop
 80154f8:	3b9aca00 	.word	0x3b9aca00

080154fc <on_full_output_buffer_fragmented>:
 80154fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015500:	460c      	mov	r4, r1
 8015502:	b08a      	sub	sp, #40	@ 0x28
 8015504:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8015508:	4606      	mov	r6, r0
 801550a:	f104 0008 	add.w	r0, r4, #8
 801550e:	f7ff ff4b 	bl	80153a8 <uxr_get_output_reliable_stream>
 8015512:	4605      	mov	r5, r0
 8015514:	f005 f9fa 	bl	801a90c <get_available_free_slots>
 8015518:	b968      	cbnz	r0, 8015536 <on_full_output_buffer_fragmented+0x3a>
 801551a:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 801551e:	4620      	mov	r0, r4
 8015520:	4798      	blx	r3
 8015522:	b918      	cbnz	r0, 801552c <on_full_output_buffer_fragmented+0x30>
 8015524:	2001      	movs	r0, #1
 8015526:	b00a      	add	sp, #40	@ 0x28
 8015528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801552c:	4628      	mov	r0, r5
 801552e:	f005 f9ed 	bl	801a90c <get_available_free_slots>
 8015532:	2800      	cmp	r0, #0
 8015534:	d0f6      	beq.n	8015524 <on_full_output_buffer_fragmented+0x28>
 8015536:	8929      	ldrh	r1, [r5, #8]
 8015538:	89eb      	ldrh	r3, [r5, #14]
 801553a:	7b28      	ldrb	r0, [r5, #12]
 801553c:	686a      	ldr	r2, [r5, #4]
 801553e:	fbb2 f8f1 	udiv	r8, r2, r1
 8015542:	fbb3 f2f1 	udiv	r2, r3, r1
 8015546:	fb01 3112 	mls	r1, r1, r2, r3
 801554a:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 801554e:	b289      	uxth	r1, r1
 8015550:	fb08 f101 	mul.w	r1, r8, r1
 8015554:	30fc      	adds	r0, #252	@ 0xfc
 8015556:	f1a8 0804 	sub.w	r8, r8, #4
 801555a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 801555e:	4440      	add	r0, r8
 8015560:	b287      	uxth	r7, r0
 8015562:	1bdb      	subs	r3, r3, r7
 8015564:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015568:	682b      	ldr	r3, [r5, #0]
 801556a:	3104      	adds	r1, #4
 801556c:	4419      	add	r1, r3
 801556e:	4642      	mov	r2, r8
 8015570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015574:	9300      	str	r3, [sp, #0]
 8015576:	a802      	add	r0, sp, #8
 8015578:	2300      	movs	r3, #0
 801557a:	f7f8 fcd5 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801557e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8015582:	f102 0308 	add.w	r3, r2, #8
 8015586:	4543      	cmp	r3, r8
 8015588:	d928      	bls.n	80155dc <on_full_output_buffer_fragmented+0xe0>
 801558a:	463a      	mov	r2, r7
 801558c:	2300      	movs	r3, #0
 801558e:	210d      	movs	r1, #13
 8015590:	a802      	add	r0, sp, #8
 8015592:	f7ff ff3d 	bl	8015410 <uxr_buffer_submessage_header>
 8015596:	8929      	ldrh	r1, [r5, #8]
 8015598:	89eb      	ldrh	r3, [r5, #14]
 801559a:	fbb3 f2f1 	udiv	r2, r3, r1
 801559e:	fb01 3312 	mls	r3, r1, r2, r3
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	686a      	ldr	r2, [r5, #4]
 80155a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80155aa:	fb02 f303 	mul.w	r3, r2, r3
 80155ae:	682a      	ldr	r2, [r5, #0]
 80155b0:	f842 8003 	str.w	r8, [r2, r3]
 80155b4:	89e8      	ldrh	r0, [r5, #14]
 80155b6:	2101      	movs	r1, #1
 80155b8:	f005 f9c8 	bl	801a94c <uxr_seq_num_add>
 80155bc:	9904      	ldr	r1, [sp, #16]
 80155be:	9a03      	ldr	r2, [sp, #12]
 80155c0:	81e8      	strh	r0, [r5, #14]
 80155c2:	1a52      	subs	r2, r2, r1
 80155c4:	4630      	mov	r0, r6
 80155c6:	f7f8 fcc1 	bl	800df4c <ucdr_init_buffer>
 80155ca:	4630      	mov	r0, r6
 80155cc:	490f      	ldr	r1, [pc, #60]	@ (801560c <on_full_output_buffer_fragmented+0x110>)
 80155ce:	4622      	mov	r2, r4
 80155d0:	f7f8 fc90 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 80155d4:	2000      	movs	r0, #0
 80155d6:	b00a      	add	sp, #40	@ 0x28
 80155d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155dc:	b292      	uxth	r2, r2
 80155de:	2302      	movs	r3, #2
 80155e0:	210d      	movs	r1, #13
 80155e2:	a802      	add	r0, sp, #8
 80155e4:	f7ff ff14 	bl	8015410 <uxr_buffer_submessage_header>
 80155e8:	8928      	ldrh	r0, [r5, #8]
 80155ea:	89eb      	ldrh	r3, [r5, #14]
 80155ec:	fbb3 f1f0 	udiv	r1, r3, r0
 80155f0:	fb00 3311 	mls	r3, r0, r1, r3
 80155f4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80155f8:	6869      	ldr	r1, [r5, #4]
 80155fa:	fbb1 f1f0 	udiv	r1, r1, r0
 80155fe:	b29b      	uxth	r3, r3
 8015600:	fb01 f303 	mul.w	r3, r1, r3
 8015604:	6829      	ldr	r1, [r5, #0]
 8015606:	3208      	adds	r2, #8
 8015608:	50ca      	str	r2, [r1, r3]
 801560a:	e7d3      	b.n	80155b4 <on_full_output_buffer_fragmented+0xb8>
 801560c:	080154fd 	.word	0x080154fd

08015610 <uxr_prepare_output_stream>:
 8015610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015612:	b087      	sub	sp, #28
 8015614:	2707      	movs	r7, #7
 8015616:	9202      	str	r2, [sp, #8]
 8015618:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801561a:	9103      	str	r1, [sp, #12]
 801561c:	2500      	movs	r5, #0
 801561e:	3204      	adds	r2, #4
 8015620:	e9cd 7500 	strd	r7, r5, [sp]
 8015624:	461c      	mov	r4, r3
 8015626:	4606      	mov	r6, r0
 8015628:	f7fe ffc2 	bl	80145b0 <uxr_prepare_stream_to_write_submessage>
 801562c:	f080 0201 	eor.w	r2, r0, #1
 8015630:	b2d2      	uxtb	r2, r2
 8015632:	75a2      	strb	r2, [r4, #22]
 8015634:	b112      	cbz	r2, 801563c <uxr_prepare_output_stream+0x2c>
 8015636:	4628      	mov	r0, r5
 8015638:	b007      	add	sp, #28
 801563a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801563c:	aa05      	add	r2, sp, #20
 801563e:	9902      	ldr	r1, [sp, #8]
 8015640:	4630      	mov	r0, r6
 8015642:	f7ff f8eb 	bl	801481c <uxr_init_base_object_request>
 8015646:	a905      	add	r1, sp, #20
 8015648:	4605      	mov	r5, r0
 801564a:	4620      	mov	r0, r4
 801564c:	f001 f8a0 	bl	8016790 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015650:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8015654:	69a6      	ldr	r6, [r4, #24]
 8015656:	69e7      	ldr	r7, [r4, #28]
 8015658:	1a52      	subs	r2, r2, r1
 801565a:	4620      	mov	r0, r4
 801565c:	f7f8 fc76 	bl	800df4c <ucdr_init_buffer>
 8015660:	4620      	mov	r0, r4
 8015662:	463a      	mov	r2, r7
 8015664:	4631      	mov	r1, r6
 8015666:	f7f8 fc45 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 801566a:	4628      	mov	r0, r5
 801566c:	b007      	add	sp, #28
 801566e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015670 <uxr_prepare_output_stream_fragmented>:
 8015670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015674:	b091      	sub	sp, #68	@ 0x44
 8015676:	4605      	mov	r5, r0
 8015678:	9105      	str	r1, [sp, #20]
 801567a:	3008      	adds	r0, #8
 801567c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015680:	461e      	mov	r6, r3
 8015682:	9204      	str	r2, [sp, #16]
 8015684:	f7ff fe90 	bl	80153a8 <uxr_get_output_reliable_stream>
 8015688:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801568c:	2b01      	cmp	r3, #1
 801568e:	f000 8091 	beq.w	80157b4 <uxr_prepare_output_stream_fragmented+0x144>
 8015692:	4604      	mov	r4, r0
 8015694:	2800      	cmp	r0, #0
 8015696:	f000 808d 	beq.w	80157b4 <uxr_prepare_output_stream_fragmented+0x144>
 801569a:	f005 f937 	bl	801a90c <get_available_free_slots>
 801569e:	2800      	cmp	r0, #0
 80156a0:	f000 8083 	beq.w	80157aa <uxr_prepare_output_stream_fragmented+0x13a>
 80156a4:	8922      	ldrh	r2, [r4, #8]
 80156a6:	89e7      	ldrh	r7, [r4, #14]
 80156a8:	fbb7 f9f2 	udiv	r9, r7, r2
 80156ac:	fb02 7919 	mls	r9, r2, r9, r7
 80156b0:	fa1f f989 	uxth.w	r9, r9
 80156b4:	6863      	ldr	r3, [r4, #4]
 80156b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80156ba:	6823      	ldr	r3, [r4, #0]
 80156bc:	9203      	str	r2, [sp, #12]
 80156be:	fb02 f909 	mul.w	r9, r2, r9
 80156c2:	f109 0904 	add.w	r9, r9, #4
 80156c6:	4499      	add	r9, r3
 80156c8:	7b23      	ldrb	r3, [r4, #12]
 80156ca:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80156ce:	4543      	cmp	r3, r8
 80156d0:	f1a2 0b04 	sub.w	fp, r2, #4
 80156d4:	d37a      	bcc.n	80157cc <uxr_prepare_output_stream_fragmented+0x15c>
 80156d6:	f1ab 0a04 	sub.w	sl, fp, #4
 80156da:	ebaa 0a03 	sub.w	sl, sl, r3
 80156de:	465a      	mov	r2, fp
 80156e0:	2300      	movs	r3, #0
 80156e2:	4649      	mov	r1, r9
 80156e4:	a808      	add	r0, sp, #32
 80156e6:	f8cd 8000 	str.w	r8, [sp]
 80156ea:	f7f8 fc1d 	bl	800df28 <ucdr_init_buffer_origin_offset>
 80156ee:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80156f0:	fa1f fa8a 	uxth.w	sl, sl
 80156f4:	4652      	mov	r2, sl
 80156f6:	f103 0a08 	add.w	sl, r3, #8
 80156fa:	45da      	cmp	sl, fp
 80156fc:	bf34      	ite	cc
 80156fe:	2302      	movcc	r3, #2
 8015700:	2300      	movcs	r3, #0
 8015702:	210d      	movs	r1, #13
 8015704:	a808      	add	r0, sp, #32
 8015706:	f7ff fe83 	bl	8015410 <uxr_buffer_submessage_header>
 801570a:	8921      	ldrh	r1, [r4, #8]
 801570c:	fbb7 f2f1 	udiv	r2, r7, r1
 8015710:	fb01 7212 	mls	r2, r1, r2, r7
 8015714:	b292      	uxth	r2, r2
 8015716:	6863      	ldr	r3, [r4, #4]
 8015718:	fbb3 f3f1 	udiv	r3, r3, r1
 801571c:	fb02 f303 	mul.w	r3, r2, r3
 8015720:	6822      	ldr	r2, [r4, #0]
 8015722:	4638      	mov	r0, r7
 8015724:	f842 b003 	str.w	fp, [r2, r3]
 8015728:	2101      	movs	r1, #1
 801572a:	f005 f90f 	bl	801a94c <uxr_seq_num_add>
 801572e:	9b03      	ldr	r3, [sp, #12]
 8015730:	f108 0104 	add.w	r1, r8, #4
 8015734:	f1a3 0208 	sub.w	r2, r3, #8
 8015738:	eba2 0208 	sub.w	r2, r2, r8
 801573c:	4449      	add	r1, r9
 801573e:	4607      	mov	r7, r0
 8015740:	4630      	mov	r0, r6
 8015742:	f7f8 fc03 	bl	800df4c <ucdr_init_buffer>
 8015746:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015748:	81e7      	strh	r7, [r4, #14]
 801574a:	1d1a      	adds	r2, r3, #4
 801574c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015750:	bf28      	it	cs
 8015752:	2200      	movcs	r2, #0
 8015754:	2300      	movs	r3, #0
 8015756:	b292      	uxth	r2, r2
 8015758:	2107      	movs	r1, #7
 801575a:	4630      	mov	r0, r6
 801575c:	f7ff fe58 	bl	8015410 <uxr_buffer_submessage_header>
 8015760:	9904      	ldr	r1, [sp, #16]
 8015762:	aa07      	add	r2, sp, #28
 8015764:	4628      	mov	r0, r5
 8015766:	f7ff f859 	bl	801481c <uxr_init_base_object_request>
 801576a:	4604      	mov	r4, r0
 801576c:	b318      	cbz	r0, 80157b6 <uxr_prepare_output_stream_fragmented+0x146>
 801576e:	a907      	add	r1, sp, #28
 8015770:	4630      	mov	r0, r6
 8015772:	f001 f80d 	bl	8016790 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015776:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801577a:	4630      	mov	r0, r6
 801577c:	1a52      	subs	r2, r2, r1
 801577e:	f7f8 fbe5 	bl	800df4c <ucdr_init_buffer>
 8015782:	9b05      	ldr	r3, [sp, #20]
 8015784:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015788:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801578a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801578e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015790:	491b      	ldr	r1, [pc, #108]	@ (8015800 <uxr_prepare_output_stream_fragmented+0x190>)
 8015792:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8015796:	4630      	mov	r0, r6
 8015798:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 801579c:	462a      	mov	r2, r5
 801579e:	f7f8 fba9 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 80157a2:	4620      	mov	r0, r4
 80157a4:	b011      	add	sp, #68	@ 0x44
 80157a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157aa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80157ac:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80157ae:	4628      	mov	r0, r5
 80157b0:	4798      	blx	r3
 80157b2:	b920      	cbnz	r0, 80157be <uxr_prepare_output_stream_fragmented+0x14e>
 80157b4:	2400      	movs	r4, #0
 80157b6:	4620      	mov	r0, r4
 80157b8:	b011      	add	sp, #68	@ 0x44
 80157ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157be:	4620      	mov	r0, r4
 80157c0:	f005 f8a4 	bl	801a90c <get_available_free_slots>
 80157c4:	2800      	cmp	r0, #0
 80157c6:	f47f af6d 	bne.w	80156a4 <uxr_prepare_output_stream_fragmented+0x34>
 80157ca:	e7f3      	b.n	80157b4 <uxr_prepare_output_stream_fragmented+0x144>
 80157cc:	4638      	mov	r0, r7
 80157ce:	2101      	movs	r1, #1
 80157d0:	f005 f8bc 	bl	801a94c <uxr_seq_num_add>
 80157d4:	8921      	ldrh	r1, [r4, #8]
 80157d6:	fbb0 f2f1 	udiv	r2, r0, r1
 80157da:	fb01 0912 	mls	r9, r1, r2, r0
 80157de:	fa1f f289 	uxth.w	r2, r9
 80157e2:	6863      	ldr	r3, [r4, #4]
 80157e4:	fbb3 f9f1 	udiv	r9, r3, r1
 80157e8:	6823      	ldr	r3, [r4, #0]
 80157ea:	fb02 f909 	mul.w	r9, r2, r9
 80157ee:	f109 0904 	add.w	r9, r9, #4
 80157f2:	4499      	add	r9, r3
 80157f4:	4607      	mov	r7, r0
 80157f6:	7b23      	ldrb	r3, [r4, #12]
 80157f8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80157fc:	e76b      	b.n	80156d6 <uxr_prepare_output_stream_fragmented+0x66>
 80157fe:	bf00      	nop
 8015800:	080154fd 	.word	0x080154fd

08015804 <uxr_serialize_message_header>:
 8015804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015806:	b083      	sub	sp, #12
 8015808:	4616      	mov	r6, r2
 801580a:	4604      	mov	r4, r0
 801580c:	9301      	str	r3, [sp, #4]
 801580e:	460d      	mov	r5, r1
 8015810:	9f08      	ldr	r7, [sp, #32]
 8015812:	f7f7 f8b9 	bl	800c988 <ucdr_serialize_uint8_t>
 8015816:	4631      	mov	r1, r6
 8015818:	4620      	mov	r0, r4
 801581a:	f7f7 f8b5 	bl	800c988 <ucdr_serialize_uint8_t>
 801581e:	9a01      	ldr	r2, [sp, #4]
 8015820:	2101      	movs	r1, #1
 8015822:	4620      	mov	r0, r4
 8015824:	f7f7 f95c 	bl	800cae0 <ucdr_serialize_endian_uint16_t>
 8015828:	062b      	lsls	r3, r5, #24
 801582a:	d501      	bpl.n	8015830 <uxr_serialize_message_header+0x2c>
 801582c:	b003      	add	sp, #12
 801582e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015830:	2204      	movs	r2, #4
 8015832:	4639      	mov	r1, r7
 8015834:	4620      	mov	r0, r4
 8015836:	b003      	add	sp, #12
 8015838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801583c:	f7fd b870 	b.w	8012920 <ucdr_serialize_array_uint8_t>

08015840 <uxr_deserialize_message_header>:
 8015840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015842:	b083      	sub	sp, #12
 8015844:	4616      	mov	r6, r2
 8015846:	4604      	mov	r4, r0
 8015848:	9301      	str	r3, [sp, #4]
 801584a:	460d      	mov	r5, r1
 801584c:	9f08      	ldr	r7, [sp, #32]
 801584e:	f7f7 f8b1 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8015852:	4631      	mov	r1, r6
 8015854:	4620      	mov	r0, r4
 8015856:	f7f7 f8ad 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 801585a:	9a01      	ldr	r2, [sp, #4]
 801585c:	2101      	movs	r1, #1
 801585e:	4620      	mov	r0, r4
 8015860:	f7f7 fa32 	bl	800ccc8 <ucdr_deserialize_endian_uint16_t>
 8015864:	f995 3000 	ldrsb.w	r3, [r5]
 8015868:	2b00      	cmp	r3, #0
 801586a:	da01      	bge.n	8015870 <uxr_deserialize_message_header+0x30>
 801586c:	b003      	add	sp, #12
 801586e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015870:	2204      	movs	r2, #4
 8015872:	4639      	mov	r1, r7
 8015874:	4620      	mov	r0, r4
 8015876:	b003      	add	sp, #12
 8015878:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801587c:	f7fd b8b4 	b.w	80129e8 <ucdr_deserialize_array_uint8_t>

08015880 <uxr_serialize_submessage_header>:
 8015880:	b530      	push	{r4, r5, lr}
 8015882:	b083      	sub	sp, #12
 8015884:	4615      	mov	r5, r2
 8015886:	4604      	mov	r4, r0
 8015888:	9301      	str	r3, [sp, #4]
 801588a:	f7f7 f87d 	bl	800c988 <ucdr_serialize_uint8_t>
 801588e:	4629      	mov	r1, r5
 8015890:	4620      	mov	r0, r4
 8015892:	f7f7 f879 	bl	800c988 <ucdr_serialize_uint8_t>
 8015896:	9a01      	ldr	r2, [sp, #4]
 8015898:	2101      	movs	r1, #1
 801589a:	4620      	mov	r0, r4
 801589c:	b003      	add	sp, #12
 801589e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80158a2:	f7f7 b91d 	b.w	800cae0 <ucdr_serialize_endian_uint16_t>
 80158a6:	bf00      	nop

080158a8 <uxr_deserialize_submessage_header>:
 80158a8:	b530      	push	{r4, r5, lr}
 80158aa:	b083      	sub	sp, #12
 80158ac:	4615      	mov	r5, r2
 80158ae:	4604      	mov	r4, r0
 80158b0:	9301      	str	r3, [sp, #4]
 80158b2:	f7f7 f87f 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80158b6:	4629      	mov	r1, r5
 80158b8:	4620      	mov	r0, r4
 80158ba:	f7f7 f87b 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80158be:	9a01      	ldr	r2, [sp, #4]
 80158c0:	2101      	movs	r1, #1
 80158c2:	4620      	mov	r0, r4
 80158c4:	b003      	add	sp, #12
 80158c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80158ca:	f7f7 b9fd 	b.w	800ccc8 <ucdr_deserialize_endian_uint16_t>
 80158ce:	bf00      	nop

080158d0 <uxr_serialize_CLIENT_Representation>:
 80158d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158d4:	2204      	movs	r2, #4
 80158d6:	460e      	mov	r6, r1
 80158d8:	4605      	mov	r5, r0
 80158da:	f7fd f821 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80158de:	2202      	movs	r2, #2
 80158e0:	4607      	mov	r7, r0
 80158e2:	1d31      	adds	r1, r6, #4
 80158e4:	4628      	mov	r0, r5
 80158e6:	f7fd f81b 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80158ea:	4038      	ands	r0, r7
 80158ec:	2202      	movs	r2, #2
 80158ee:	1db1      	adds	r1, r6, #6
 80158f0:	b2c7      	uxtb	r7, r0
 80158f2:	4628      	mov	r0, r5
 80158f4:	f7fd f814 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80158f8:	2204      	movs	r2, #4
 80158fa:	4007      	ands	r7, r0
 80158fc:	f106 0108 	add.w	r1, r6, #8
 8015900:	4628      	mov	r0, r5
 8015902:	f7fd f80d 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8015906:	7b31      	ldrb	r1, [r6, #12]
 8015908:	4007      	ands	r7, r0
 801590a:	4628      	mov	r0, r5
 801590c:	f7f7 f83c 	bl	800c988 <ucdr_serialize_uint8_t>
 8015910:	7b71      	ldrb	r1, [r6, #13]
 8015912:	4007      	ands	r7, r0
 8015914:	4628      	mov	r0, r5
 8015916:	f7f7 f809 	bl	800c92c <ucdr_serialize_bool>
 801591a:	7b73      	ldrb	r3, [r6, #13]
 801591c:	ea07 0800 	and.w	r8, r7, r0
 8015920:	b93b      	cbnz	r3, 8015932 <uxr_serialize_CLIENT_Representation+0x62>
 8015922:	8bb1      	ldrh	r1, [r6, #28]
 8015924:	4628      	mov	r0, r5
 8015926:	f7f7 f85b 	bl	800c9e0 <ucdr_serialize_uint16_t>
 801592a:	ea08 0000 	and.w	r0, r8, r0
 801592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015932:	6931      	ldr	r1, [r6, #16]
 8015934:	4628      	mov	r0, r5
 8015936:	f7f7 fa3d 	bl	800cdb4 <ucdr_serialize_uint32_t>
 801593a:	6933      	ldr	r3, [r6, #16]
 801593c:	b1e3      	cbz	r3, 8015978 <uxr_serialize_CLIENT_Representation+0xa8>
 801593e:	b1c0      	cbz	r0, 8015972 <uxr_serialize_CLIENT_Representation+0xa2>
 8015940:	4637      	mov	r7, r6
 8015942:	f04f 0900 	mov.w	r9, #0
 8015946:	e001      	b.n	801594c <uxr_serialize_CLIENT_Representation+0x7c>
 8015948:	3708      	adds	r7, #8
 801594a:	b194      	cbz	r4, 8015972 <uxr_serialize_CLIENT_Representation+0xa2>
 801594c:	6979      	ldr	r1, [r7, #20]
 801594e:	4628      	mov	r0, r5
 8015950:	f004 fa9c 	bl	8019e8c <ucdr_serialize_string>
 8015954:	69b9      	ldr	r1, [r7, #24]
 8015956:	4604      	mov	r4, r0
 8015958:	4628      	mov	r0, r5
 801595a:	f004 fa97 	bl	8019e8c <ucdr_serialize_string>
 801595e:	6933      	ldr	r3, [r6, #16]
 8015960:	f109 0901 	add.w	r9, r9, #1
 8015964:	4004      	ands	r4, r0
 8015966:	4599      	cmp	r9, r3
 8015968:	b2e4      	uxtb	r4, r4
 801596a:	d3ed      	bcc.n	8015948 <uxr_serialize_CLIENT_Representation+0x78>
 801596c:	ea08 0804 	and.w	r8, r8, r4
 8015970:	e7d7      	b.n	8015922 <uxr_serialize_CLIENT_Representation+0x52>
 8015972:	f04f 0800 	mov.w	r8, #0
 8015976:	e7d4      	b.n	8015922 <uxr_serialize_CLIENT_Representation+0x52>
 8015978:	ea08 0800 	and.w	r8, r8, r0
 801597c:	e7d1      	b.n	8015922 <uxr_serialize_CLIENT_Representation+0x52>
 801597e:	bf00      	nop

08015980 <uxr_deserialize_CLIENT_Representation>:
 8015980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015984:	2204      	movs	r2, #4
 8015986:	460c      	mov	r4, r1
 8015988:	4605      	mov	r5, r0
 801598a:	f7fd f82d 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801598e:	2202      	movs	r2, #2
 8015990:	4607      	mov	r7, r0
 8015992:	1d21      	adds	r1, r4, #4
 8015994:	4628      	mov	r0, r5
 8015996:	f7fd f827 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801599a:	4038      	ands	r0, r7
 801599c:	2202      	movs	r2, #2
 801599e:	1da1      	adds	r1, r4, #6
 80159a0:	b2c6      	uxtb	r6, r0
 80159a2:	4628      	mov	r0, r5
 80159a4:	f7fd f820 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80159a8:	2204      	movs	r2, #4
 80159aa:	4006      	ands	r6, r0
 80159ac:	f104 0108 	add.w	r1, r4, #8
 80159b0:	4628      	mov	r0, r5
 80159b2:	f7fd f819 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80159b6:	f104 010c 	add.w	r1, r4, #12
 80159ba:	4006      	ands	r6, r0
 80159bc:	4628      	mov	r0, r5
 80159be:	f7f6 fff9 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80159c2:	f104 010d 	add.w	r1, r4, #13
 80159c6:	ea06 0700 	and.w	r7, r6, r0
 80159ca:	4628      	mov	r0, r5
 80159cc:	f7f6 ffc4 	bl	800c958 <ucdr_deserialize_bool>
 80159d0:	7b63      	ldrb	r3, [r4, #13]
 80159d2:	4007      	ands	r7, r0
 80159d4:	b93b      	cbnz	r3, 80159e6 <uxr_deserialize_CLIENT_Representation+0x66>
 80159d6:	f104 011c 	add.w	r1, r4, #28
 80159da:	4628      	mov	r0, r5
 80159dc:	f7f7 f900 	bl	800cbe0 <ucdr_deserialize_uint16_t>
 80159e0:	4038      	ands	r0, r7
 80159e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159e6:	f104 0110 	add.w	r1, r4, #16
 80159ea:	4628      	mov	r0, r5
 80159ec:	f7f7 fb12 	bl	800d014 <ucdr_deserialize_uint32_t>
 80159f0:	6923      	ldr	r3, [r4, #16]
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	d903      	bls.n	80159fe <uxr_deserialize_CLIENT_Representation+0x7e>
 80159f6:	2301      	movs	r3, #1
 80159f8:	75ab      	strb	r3, [r5, #22]
 80159fa:	2700      	movs	r7, #0
 80159fc:	e7eb      	b.n	80159d6 <uxr_deserialize_CLIENT_Representation+0x56>
 80159fe:	b30b      	cbz	r3, 8015a44 <uxr_deserialize_CLIENT_Representation+0xc4>
 8015a00:	2800      	cmp	r0, #0
 8015a02:	d0fa      	beq.n	80159fa <uxr_deserialize_CLIENT_Representation+0x7a>
 8015a04:	46a0      	mov	r8, r4
 8015a06:	f04f 0900 	mov.w	r9, #0
 8015a0a:	e001      	b.n	8015a10 <uxr_deserialize_CLIENT_Representation+0x90>
 8015a0c:	2e00      	cmp	r6, #0
 8015a0e:	d0f4      	beq.n	80159fa <uxr_deserialize_CLIENT_Representation+0x7a>
 8015a10:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a18:	4628      	mov	r0, r5
 8015a1a:	f004 fa47 	bl	8019eac <ucdr_deserialize_string>
 8015a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a22:	4606      	mov	r6, r0
 8015a24:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8015a28:	4628      	mov	r0, r5
 8015a2a:	f004 fa3f 	bl	8019eac <ucdr_deserialize_string>
 8015a2e:	6923      	ldr	r3, [r4, #16]
 8015a30:	f109 0901 	add.w	r9, r9, #1
 8015a34:	4006      	ands	r6, r0
 8015a36:	4599      	cmp	r9, r3
 8015a38:	f108 0808 	add.w	r8, r8, #8
 8015a3c:	b2f6      	uxtb	r6, r6
 8015a3e:	d3e5      	bcc.n	8015a0c <uxr_deserialize_CLIENT_Representation+0x8c>
 8015a40:	4037      	ands	r7, r6
 8015a42:	e7c8      	b.n	80159d6 <uxr_deserialize_CLIENT_Representation+0x56>
 8015a44:	4007      	ands	r7, r0
 8015a46:	e7c6      	b.n	80159d6 <uxr_deserialize_CLIENT_Representation+0x56>

08015a48 <uxr_serialize_AGENT_Representation>:
 8015a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a4c:	2204      	movs	r2, #4
 8015a4e:	460f      	mov	r7, r1
 8015a50:	4605      	mov	r5, r0
 8015a52:	f7fc ff65 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8015a56:	2202      	movs	r2, #2
 8015a58:	4604      	mov	r4, r0
 8015a5a:	1d39      	adds	r1, r7, #4
 8015a5c:	4628      	mov	r0, r5
 8015a5e:	f7fc ff5f 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8015a62:	4020      	ands	r0, r4
 8015a64:	2202      	movs	r2, #2
 8015a66:	1db9      	adds	r1, r7, #6
 8015a68:	b2c4      	uxtb	r4, r0
 8015a6a:	4628      	mov	r0, r5
 8015a6c:	f7fc ff58 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8015a70:	7a39      	ldrb	r1, [r7, #8]
 8015a72:	4004      	ands	r4, r0
 8015a74:	4628      	mov	r0, r5
 8015a76:	f7f6 ff59 	bl	800c92c <ucdr_serialize_bool>
 8015a7a:	7a3b      	ldrb	r3, [r7, #8]
 8015a7c:	ea00 0804 	and.w	r8, r0, r4
 8015a80:	b913      	cbnz	r3, 8015a88 <uxr_serialize_AGENT_Representation+0x40>
 8015a82:	4640      	mov	r0, r8
 8015a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a88:	68f9      	ldr	r1, [r7, #12]
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	f7f7 f992 	bl	800cdb4 <ucdr_serialize_uint32_t>
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	b303      	cbz	r3, 8015ad6 <uxr_serialize_AGENT_Representation+0x8e>
 8015a94:	b1d0      	cbz	r0, 8015acc <uxr_serialize_AGENT_Representation+0x84>
 8015a96:	463e      	mov	r6, r7
 8015a98:	f04f 0900 	mov.w	r9, #0
 8015a9c:	e001      	b.n	8015aa2 <uxr_serialize_AGENT_Representation+0x5a>
 8015a9e:	3608      	adds	r6, #8
 8015aa0:	b1a4      	cbz	r4, 8015acc <uxr_serialize_AGENT_Representation+0x84>
 8015aa2:	6931      	ldr	r1, [r6, #16]
 8015aa4:	4628      	mov	r0, r5
 8015aa6:	f004 f9f1 	bl	8019e8c <ucdr_serialize_string>
 8015aaa:	6971      	ldr	r1, [r6, #20]
 8015aac:	4604      	mov	r4, r0
 8015aae:	4628      	mov	r0, r5
 8015ab0:	f004 f9ec 	bl	8019e8c <ucdr_serialize_string>
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	f109 0901 	add.w	r9, r9, #1
 8015aba:	4004      	ands	r4, r0
 8015abc:	4599      	cmp	r9, r3
 8015abe:	b2e4      	uxtb	r4, r4
 8015ac0:	d3ed      	bcc.n	8015a9e <uxr_serialize_AGENT_Representation+0x56>
 8015ac2:	ea08 0804 	and.w	r8, r8, r4
 8015ac6:	4640      	mov	r0, r8
 8015ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015acc:	f04f 0800 	mov.w	r8, #0
 8015ad0:	4640      	mov	r0, r8
 8015ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ad6:	ea08 0800 	and.w	r8, r8, r0
 8015ada:	e7d2      	b.n	8015a82 <uxr_serialize_AGENT_Representation+0x3a>

08015adc <uxr_serialize_DATAWRITER_Representation>:
 8015adc:	b570      	push	{r4, r5, r6, lr}
 8015ade:	460d      	mov	r5, r1
 8015ae0:	7809      	ldrb	r1, [r1, #0]
 8015ae2:	4606      	mov	r6, r0
 8015ae4:	f7f6 ff50 	bl	800c988 <ucdr_serialize_uint8_t>
 8015ae8:	4604      	mov	r4, r0
 8015aea:	b130      	cbz	r0, 8015afa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015aec:	782b      	ldrb	r3, [r5, #0]
 8015aee:	2b02      	cmp	r3, #2
 8015af0:	d00c      	beq.n	8015b0c <uxr_serialize_DATAWRITER_Representation+0x30>
 8015af2:	2b03      	cmp	r3, #3
 8015af4:	d010      	beq.n	8015b18 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015af6:	2b01      	cmp	r3, #1
 8015af8:	d008      	beq.n	8015b0c <uxr_serialize_DATAWRITER_Representation+0x30>
 8015afa:	2202      	movs	r2, #2
 8015afc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015b00:	4630      	mov	r0, r6
 8015b02:	f7fc ff0d 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8015b06:	4020      	ands	r0, r4
 8015b08:	b2c0      	uxtb	r0, r0
 8015b0a:	bd70      	pop	{r4, r5, r6, pc}
 8015b0c:	6869      	ldr	r1, [r5, #4]
 8015b0e:	4630      	mov	r0, r6
 8015b10:	f004 f9bc 	bl	8019e8c <ucdr_serialize_string>
 8015b14:	4604      	mov	r4, r0
 8015b16:	e7f0      	b.n	8015afa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015b18:	4629      	mov	r1, r5
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015b20:	3104      	adds	r1, #4
 8015b22:	f7fd f89b 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8015b26:	4604      	mov	r4, r0
 8015b28:	e7e7      	b.n	8015afa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015b2a:	bf00      	nop

08015b2c <uxr_serialize_ObjectVariant.part.0>:
 8015b2c:	b570      	push	{r4, r5, r6, lr}
 8015b2e:	780b      	ldrb	r3, [r1, #0]
 8015b30:	3b01      	subs	r3, #1
 8015b32:	460c      	mov	r4, r1
 8015b34:	4605      	mov	r5, r0
 8015b36:	2b0d      	cmp	r3, #13
 8015b38:	d854      	bhi.n	8015be4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015b3a:	e8df f003 	tbb	[pc, r3]
 8015b3e:	0730      	.short	0x0730
 8015b40:	07071b1b 	.word	0x07071b1b
 8015b44:	0c530707 	.word	0x0c530707
 8015b48:	494e0c0c 	.word	0x494e0c0c
 8015b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b50:	3104      	adds	r1, #4
 8015b52:	f7ff bfc3 	b.w	8015adc <uxr_serialize_DATAWRITER_Representation>
 8015b56:	7909      	ldrb	r1, [r1, #4]
 8015b58:	f7f6 ff16 	bl	800c988 <ucdr_serialize_uint8_t>
 8015b5c:	b1e8      	cbz	r0, 8015b9a <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015b5e:	7923      	ldrb	r3, [r4, #4]
 8015b60:	2b01      	cmp	r3, #1
 8015b62:	d001      	beq.n	8015b68 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015b64:	2b02      	cmp	r3, #2
 8015b66:	d13d      	bne.n	8015be4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015b68:	68a1      	ldr	r1, [r4, #8]
 8015b6a:	4628      	mov	r0, r5
 8015b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b70:	f004 b98c 	b.w	8019e8c <ucdr_serialize_string>
 8015b74:	7909      	ldrb	r1, [r1, #4]
 8015b76:	f7f6 ff07 	bl	800c988 <ucdr_serialize_uint8_t>
 8015b7a:	4606      	mov	r6, r0
 8015b7c:	b120      	cbz	r0, 8015b88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015b7e:	7923      	ldrb	r3, [r4, #4]
 8015b80:	2b02      	cmp	r3, #2
 8015b82:	d039      	beq.n	8015bf8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015b84:	2b03      	cmp	r3, #3
 8015b86:	d02f      	beq.n	8015be8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015b88:	2202      	movs	r2, #2
 8015b8a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8015b8e:	4628      	mov	r0, r5
 8015b90:	f7fc fec6 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8015b94:	4030      	ands	r0, r6
 8015b96:	b2c0      	uxtb	r0, r0
 8015b98:	bd70      	pop	{r4, r5, r6, pc}
 8015b9a:	2000      	movs	r0, #0
 8015b9c:	bd70      	pop	{r4, r5, r6, pc}
 8015b9e:	7909      	ldrb	r1, [r1, #4]
 8015ba0:	f7f6 fef2 	bl	800c988 <ucdr_serialize_uint8_t>
 8015ba4:	4606      	mov	r6, r0
 8015ba6:	b158      	cbz	r0, 8015bc0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015ba8:	7923      	ldrb	r3, [r4, #4]
 8015baa:	2b02      	cmp	r3, #2
 8015bac:	d003      	beq.n	8015bb6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8015bae:	2b03      	cmp	r3, #3
 8015bb0:	d028      	beq.n	8015c04 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015bb2:	2b01      	cmp	r3, #1
 8015bb4:	d104      	bne.n	8015bc0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015bb6:	68a1      	ldr	r1, [r4, #8]
 8015bb8:	4628      	mov	r0, r5
 8015bba:	f004 f967 	bl	8019e8c <ucdr_serialize_string>
 8015bbe:	4606      	mov	r6, r0
 8015bc0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015bc4:	4628      	mov	r0, r5
 8015bc6:	f7f7 fc1b 	bl	800d400 <ucdr_serialize_int16_t>
 8015bca:	4030      	ands	r0, r6
 8015bcc:	b2c0      	uxtb	r0, r0
 8015bce:	bd70      	pop	{r4, r5, r6, pc}
 8015bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bd4:	3104      	adds	r1, #4
 8015bd6:	f7ff be7b 	b.w	80158d0 <uxr_serialize_CLIENT_Representation>
 8015bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bde:	3104      	adds	r1, #4
 8015be0:	f7ff bf32 	b.w	8015a48 <uxr_serialize_AGENT_Representation>
 8015be4:	2001      	movs	r0, #1
 8015be6:	bd70      	pop	{r4, r5, r6, pc}
 8015be8:	68a2      	ldr	r2, [r4, #8]
 8015bea:	f104 010c 	add.w	r1, r4, #12
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f7fd f834 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8015bf4:	4606      	mov	r6, r0
 8015bf6:	e7c7      	b.n	8015b88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015bf8:	68a1      	ldr	r1, [r4, #8]
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	f004 f946 	bl	8019e8c <ucdr_serialize_string>
 8015c00:	4606      	mov	r6, r0
 8015c02:	e7c1      	b.n	8015b88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015c04:	68a2      	ldr	r2, [r4, #8]
 8015c06:	f104 010c 	add.w	r1, r4, #12
 8015c0a:	4628      	mov	r0, r5
 8015c0c:	f7fd f826 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8015c10:	4606      	mov	r6, r0
 8015c12:	e7d5      	b.n	8015bc0 <uxr_serialize_ObjectVariant.part.0+0x94>

08015c14 <uxr_deserialize_DATAWRITER_Representation>:
 8015c14:	b570      	push	{r4, r5, r6, lr}
 8015c16:	4606      	mov	r6, r0
 8015c18:	460d      	mov	r5, r1
 8015c1a:	f7f6 fecb 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8015c1e:	4604      	mov	r4, r0
 8015c20:	b130      	cbz	r0, 8015c30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015c22:	782b      	ldrb	r3, [r5, #0]
 8015c24:	2b02      	cmp	r3, #2
 8015c26:	d00c      	beq.n	8015c42 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015c28:	2b03      	cmp	r3, #3
 8015c2a:	d012      	beq.n	8015c52 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015c2c:	2b01      	cmp	r3, #1
 8015c2e:	d008      	beq.n	8015c42 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015c30:	2202      	movs	r2, #2
 8015c32:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015c36:	4630      	mov	r0, r6
 8015c38:	f7fc fed6 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8015c3c:	4020      	ands	r0, r4
 8015c3e:	b2c0      	uxtb	r0, r0
 8015c40:	bd70      	pop	{r4, r5, r6, pc}
 8015c42:	6869      	ldr	r1, [r5, #4]
 8015c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f004 f92f 	bl	8019eac <ucdr_deserialize_string>
 8015c4e:	4604      	mov	r4, r0
 8015c50:	e7ee      	b.n	8015c30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015c52:	1d2b      	adds	r3, r5, #4
 8015c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c58:	f105 0108 	add.w	r1, r5, #8
 8015c5c:	4630      	mov	r0, r6
 8015c5e:	f7fd f80f 	bl	8012c80 <ucdr_deserialize_sequence_uint8_t>
 8015c62:	4604      	mov	r4, r0
 8015c64:	e7e4      	b.n	8015c30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015c66:	bf00      	nop

08015c68 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015c68:	b570      	push	{r4, r5, r6, lr}
 8015c6a:	460d      	mov	r5, r1
 8015c6c:	7809      	ldrb	r1, [r1, #0]
 8015c6e:	4606      	mov	r6, r0
 8015c70:	f7f6 fe5c 	bl	800c92c <ucdr_serialize_bool>
 8015c74:	782b      	ldrb	r3, [r5, #0]
 8015c76:	4604      	mov	r4, r0
 8015c78:	b94b      	cbnz	r3, 8015c8e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015c7a:	7a29      	ldrb	r1, [r5, #8]
 8015c7c:	4630      	mov	r0, r6
 8015c7e:	f7f6 fe55 	bl	800c92c <ucdr_serialize_bool>
 8015c82:	7a2b      	ldrb	r3, [r5, #8]
 8015c84:	4004      	ands	r4, r0
 8015c86:	b2e4      	uxtb	r4, r4
 8015c88:	b943      	cbnz	r3, 8015c9c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	bd70      	pop	{r4, r5, r6, pc}
 8015c8e:	6869      	ldr	r1, [r5, #4]
 8015c90:	4630      	mov	r0, r6
 8015c92:	f004 f8fb 	bl	8019e8c <ucdr_serialize_string>
 8015c96:	4004      	ands	r4, r0
 8015c98:	b2e4      	uxtb	r4, r4
 8015c9a:	e7ee      	b.n	8015c7a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015c9c:	68e9      	ldr	r1, [r5, #12]
 8015c9e:	4630      	mov	r0, r6
 8015ca0:	f004 f8f4 	bl	8019e8c <ucdr_serialize_string>
 8015ca4:	4004      	ands	r4, r0
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	bd70      	pop	{r4, r5, r6, pc}
 8015caa:	bf00      	nop

08015cac <uxr_serialize_OBJK_Topic_Binary>:
 8015cac:	b570      	push	{r4, r5, r6, lr}
 8015cae:	460d      	mov	r5, r1
 8015cb0:	6809      	ldr	r1, [r1, #0]
 8015cb2:	4606      	mov	r6, r0
 8015cb4:	f004 f8ea 	bl	8019e8c <ucdr_serialize_string>
 8015cb8:	7929      	ldrb	r1, [r5, #4]
 8015cba:	4604      	mov	r4, r0
 8015cbc:	4630      	mov	r0, r6
 8015cbe:	f7f6 fe35 	bl	800c92c <ucdr_serialize_bool>
 8015cc2:	792b      	ldrb	r3, [r5, #4]
 8015cc4:	4004      	ands	r4, r0
 8015cc6:	b2e4      	uxtb	r4, r4
 8015cc8:	b943      	cbnz	r3, 8015cdc <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015cca:	7b29      	ldrb	r1, [r5, #12]
 8015ccc:	4630      	mov	r0, r6
 8015cce:	f7f6 fe2d 	bl	800c92c <ucdr_serialize_bool>
 8015cd2:	7b2b      	ldrb	r3, [r5, #12]
 8015cd4:	4004      	ands	r4, r0
 8015cd6:	b93b      	cbnz	r3, 8015ce8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015cd8:	4620      	mov	r0, r4
 8015cda:	bd70      	pop	{r4, r5, r6, pc}
 8015cdc:	68a9      	ldr	r1, [r5, #8]
 8015cde:	4630      	mov	r0, r6
 8015ce0:	f004 f8d4 	bl	8019e8c <ucdr_serialize_string>
 8015ce4:	4004      	ands	r4, r0
 8015ce6:	e7f0      	b.n	8015cca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015ce8:	6929      	ldr	r1, [r5, #16]
 8015cea:	4630      	mov	r0, r6
 8015cec:	f004 f8ce 	bl	8019e8c <ucdr_serialize_string>
 8015cf0:	4004      	ands	r4, r0
 8015cf2:	b2e4      	uxtb	r4, r4
 8015cf4:	4620      	mov	r0, r4
 8015cf6:	bd70      	pop	{r4, r5, r6, pc}

08015cf8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cfc:	460c      	mov	r4, r1
 8015cfe:	7809      	ldrb	r1, [r1, #0]
 8015d00:	4606      	mov	r6, r0
 8015d02:	f7f6 fe13 	bl	800c92c <ucdr_serialize_bool>
 8015d06:	7823      	ldrb	r3, [r4, #0]
 8015d08:	4605      	mov	r5, r0
 8015d0a:	b96b      	cbnz	r3, 8015d28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015d0c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015d10:	4630      	mov	r0, r6
 8015d12:	f7f6 fe0b 	bl	800c92c <ucdr_serialize_bool>
 8015d16:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015d1a:	4005      	ands	r5, r0
 8015d1c:	b2ed      	uxtb	r5, r5
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d169      	bne.n	8015df6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015d22:	4628      	mov	r0, r5
 8015d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d28:	6861      	ldr	r1, [r4, #4]
 8015d2a:	4630      	mov	r0, r6
 8015d2c:	f7f7 f842 	bl	800cdb4 <ucdr_serialize_uint32_t>
 8015d30:	6863      	ldr	r3, [r4, #4]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d06b      	beq.n	8015e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d067      	beq.n	8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d3a:	68a1      	ldr	r1, [r4, #8]
 8015d3c:	4630      	mov	r0, r6
 8015d3e:	f004 f8a5 	bl	8019e8c <ucdr_serialize_string>
 8015d42:	6863      	ldr	r3, [r4, #4]
 8015d44:	2b01      	cmp	r3, #1
 8015d46:	d953      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d05e      	beq.n	8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d4c:	68e1      	ldr	r1, [r4, #12]
 8015d4e:	4630      	mov	r0, r6
 8015d50:	f004 f89c 	bl	8019e8c <ucdr_serialize_string>
 8015d54:	6863      	ldr	r3, [r4, #4]
 8015d56:	2b02      	cmp	r3, #2
 8015d58:	d94a      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d5a:	2800      	cmp	r0, #0
 8015d5c:	d055      	beq.n	8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d5e:	6921      	ldr	r1, [r4, #16]
 8015d60:	4630      	mov	r0, r6
 8015d62:	f004 f893 	bl	8019e8c <ucdr_serialize_string>
 8015d66:	6863      	ldr	r3, [r4, #4]
 8015d68:	2b03      	cmp	r3, #3
 8015d6a:	d941      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d6c:	2800      	cmp	r0, #0
 8015d6e:	d04c      	beq.n	8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d70:	6961      	ldr	r1, [r4, #20]
 8015d72:	4630      	mov	r0, r6
 8015d74:	f004 f88a 	bl	8019e8c <ucdr_serialize_string>
 8015d78:	6863      	ldr	r3, [r4, #4]
 8015d7a:	2b04      	cmp	r3, #4
 8015d7c:	d938      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d043      	beq.n	8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d82:	69a1      	ldr	r1, [r4, #24]
 8015d84:	4630      	mov	r0, r6
 8015d86:	f004 f881 	bl	8019e8c <ucdr_serialize_string>
 8015d8a:	6863      	ldr	r3, [r4, #4]
 8015d8c:	2b05      	cmp	r3, #5
 8015d8e:	d92f      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d90:	2800      	cmp	r0, #0
 8015d92:	d03a      	beq.n	8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d94:	69e1      	ldr	r1, [r4, #28]
 8015d96:	4630      	mov	r0, r6
 8015d98:	f004 f878 	bl	8019e8c <ucdr_serialize_string>
 8015d9c:	6863      	ldr	r3, [r4, #4]
 8015d9e:	2b06      	cmp	r3, #6
 8015da0:	d926      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015da2:	b390      	cbz	r0, 8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015da4:	6a21      	ldr	r1, [r4, #32]
 8015da6:	4630      	mov	r0, r6
 8015da8:	f004 f870 	bl	8019e8c <ucdr_serialize_string>
 8015dac:	6863      	ldr	r3, [r4, #4]
 8015dae:	2b07      	cmp	r3, #7
 8015db0:	d91e      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015db2:	b350      	cbz	r0, 8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015db4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015db6:	4630      	mov	r0, r6
 8015db8:	f004 f868 	bl	8019e8c <ucdr_serialize_string>
 8015dbc:	6863      	ldr	r3, [r4, #4]
 8015dbe:	2b08      	cmp	r3, #8
 8015dc0:	d916      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015dc2:	b310      	cbz	r0, 8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015dc4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	f004 f860 	bl	8019e8c <ucdr_serialize_string>
 8015dcc:	6863      	ldr	r3, [r4, #4]
 8015dce:	2b09      	cmp	r3, #9
 8015dd0:	d90e      	bls.n	8015df0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015dd2:	b1d0      	cbz	r0, 8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015dd4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015dd8:	2709      	movs	r7, #9
 8015dda:	e000      	b.n	8015dde <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015ddc:	b1a8      	cbz	r0, 8015e0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015dde:	f858 1b04 	ldr.w	r1, [r8], #4
 8015de2:	4630      	mov	r0, r6
 8015de4:	f004 f852 	bl	8019e8c <ucdr_serialize_string>
 8015de8:	6862      	ldr	r2, [r4, #4]
 8015dea:	3701      	adds	r7, #1
 8015dec:	4297      	cmp	r7, r2
 8015dee:	d3f5      	bcc.n	8015ddc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015df0:	4005      	ands	r5, r0
 8015df2:	b2ed      	uxtb	r5, r5
 8015df4:	e78a      	b.n	8015d0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015df6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015df8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	f7fc ff2d 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8015e02:	4005      	ands	r5, r0
 8015e04:	4628      	mov	r0, r5
 8015e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e0a:	2500      	movs	r5, #0
 8015e0c:	e77e      	b.n	8015d0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015e0e:	4028      	ands	r0, r5
 8015e10:	b2c5      	uxtb	r5, r0
 8015e12:	e77b      	b.n	8015d0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015e14 <uxr_serialize_OBJK_Publisher_Binary>:
 8015e14:	b570      	push	{r4, r5, r6, lr}
 8015e16:	460d      	mov	r5, r1
 8015e18:	7809      	ldrb	r1, [r1, #0]
 8015e1a:	4606      	mov	r6, r0
 8015e1c:	f7f6 fd86 	bl	800c92c <ucdr_serialize_bool>
 8015e20:	782b      	ldrb	r3, [r5, #0]
 8015e22:	4604      	mov	r4, r0
 8015e24:	b94b      	cbnz	r3, 8015e3a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015e26:	7a29      	ldrb	r1, [r5, #8]
 8015e28:	4630      	mov	r0, r6
 8015e2a:	f7f6 fd7f 	bl	800c92c <ucdr_serialize_bool>
 8015e2e:	7a2b      	ldrb	r3, [r5, #8]
 8015e30:	4004      	ands	r4, r0
 8015e32:	b2e4      	uxtb	r4, r4
 8015e34:	b943      	cbnz	r3, 8015e48 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015e36:	4620      	mov	r0, r4
 8015e38:	bd70      	pop	{r4, r5, r6, pc}
 8015e3a:	6869      	ldr	r1, [r5, #4]
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	f004 f825 	bl	8019e8c <ucdr_serialize_string>
 8015e42:	4004      	ands	r4, r0
 8015e44:	b2e4      	uxtb	r4, r4
 8015e46:	e7ee      	b.n	8015e26 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015e48:	f105 010c 	add.w	r1, r5, #12
 8015e4c:	4630      	mov	r0, r6
 8015e4e:	f7ff ff53 	bl	8015cf8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015e52:	4004      	ands	r4, r0
 8015e54:	4620      	mov	r0, r4
 8015e56:	bd70      	pop	{r4, r5, r6, pc}

08015e58 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8015e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	7809      	ldrb	r1, [r1, #0]
 8015e60:	4606      	mov	r6, r0
 8015e62:	f7f6 fd63 	bl	800c92c <ucdr_serialize_bool>
 8015e66:	7823      	ldrb	r3, [r4, #0]
 8015e68:	4605      	mov	r5, r0
 8015e6a:	b96b      	cbnz	r3, 8015e88 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8015e6c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015e70:	4630      	mov	r0, r6
 8015e72:	f7f6 fd5b 	bl	800c92c <ucdr_serialize_bool>
 8015e76:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015e7a:	4005      	ands	r5, r0
 8015e7c:	b2ed      	uxtb	r5, r5
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d169      	bne.n	8015f56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8015e82:	4628      	mov	r0, r5
 8015e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e88:	6861      	ldr	r1, [r4, #4]
 8015e8a:	4630      	mov	r0, r6
 8015e8c:	f7f6 ff92 	bl	800cdb4 <ucdr_serialize_uint32_t>
 8015e90:	6863      	ldr	r3, [r4, #4]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d06b      	beq.n	8015f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d067      	beq.n	8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015e9a:	68a1      	ldr	r1, [r4, #8]
 8015e9c:	4630      	mov	r0, r6
 8015e9e:	f003 fff5 	bl	8019e8c <ucdr_serialize_string>
 8015ea2:	6863      	ldr	r3, [r4, #4]
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	d953      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d05e      	beq.n	8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015eac:	68e1      	ldr	r1, [r4, #12]
 8015eae:	4630      	mov	r0, r6
 8015eb0:	f003 ffec 	bl	8019e8c <ucdr_serialize_string>
 8015eb4:	6863      	ldr	r3, [r4, #4]
 8015eb6:	2b02      	cmp	r3, #2
 8015eb8:	d94a      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015eba:	2800      	cmp	r0, #0
 8015ebc:	d055      	beq.n	8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ebe:	6921      	ldr	r1, [r4, #16]
 8015ec0:	4630      	mov	r0, r6
 8015ec2:	f003 ffe3 	bl	8019e8c <ucdr_serialize_string>
 8015ec6:	6863      	ldr	r3, [r4, #4]
 8015ec8:	2b03      	cmp	r3, #3
 8015eca:	d941      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d04c      	beq.n	8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ed0:	6961      	ldr	r1, [r4, #20]
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	f003 ffda 	bl	8019e8c <ucdr_serialize_string>
 8015ed8:	6863      	ldr	r3, [r4, #4]
 8015eda:	2b04      	cmp	r3, #4
 8015edc:	d938      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	d043      	beq.n	8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ee2:	69a1      	ldr	r1, [r4, #24]
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	f003 ffd1 	bl	8019e8c <ucdr_serialize_string>
 8015eea:	6863      	ldr	r3, [r4, #4]
 8015eec:	2b05      	cmp	r3, #5
 8015eee:	d92f      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d03a      	beq.n	8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ef4:	69e1      	ldr	r1, [r4, #28]
 8015ef6:	4630      	mov	r0, r6
 8015ef8:	f003 ffc8 	bl	8019e8c <ucdr_serialize_string>
 8015efc:	6863      	ldr	r3, [r4, #4]
 8015efe:	2b06      	cmp	r3, #6
 8015f00:	d926      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015f02:	b390      	cbz	r0, 8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015f04:	6a21      	ldr	r1, [r4, #32]
 8015f06:	4630      	mov	r0, r6
 8015f08:	f003 ffc0 	bl	8019e8c <ucdr_serialize_string>
 8015f0c:	6863      	ldr	r3, [r4, #4]
 8015f0e:	2b07      	cmp	r3, #7
 8015f10:	d91e      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015f12:	b350      	cbz	r0, 8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015f14:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015f16:	4630      	mov	r0, r6
 8015f18:	f003 ffb8 	bl	8019e8c <ucdr_serialize_string>
 8015f1c:	6863      	ldr	r3, [r4, #4]
 8015f1e:	2b08      	cmp	r3, #8
 8015f20:	d916      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015f22:	b310      	cbz	r0, 8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015f24:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015f26:	4630      	mov	r0, r6
 8015f28:	f003 ffb0 	bl	8019e8c <ucdr_serialize_string>
 8015f2c:	6863      	ldr	r3, [r4, #4]
 8015f2e:	2b09      	cmp	r3, #9
 8015f30:	d90e      	bls.n	8015f50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015f32:	b1d0      	cbz	r0, 8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015f34:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015f38:	2709      	movs	r7, #9
 8015f3a:	e000      	b.n	8015f3e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8015f3c:	b1a8      	cbz	r0, 8015f6a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015f3e:	f858 1b04 	ldr.w	r1, [r8], #4
 8015f42:	4630      	mov	r0, r6
 8015f44:	f003 ffa2 	bl	8019e8c <ucdr_serialize_string>
 8015f48:	6862      	ldr	r2, [r4, #4]
 8015f4a:	3701      	adds	r7, #1
 8015f4c:	4297      	cmp	r7, r2
 8015f4e:	d3f5      	bcc.n	8015f3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8015f50:	4005      	ands	r5, r0
 8015f52:	b2ed      	uxtb	r5, r5
 8015f54:	e78a      	b.n	8015e6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015f56:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015f58:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015f5c:	4630      	mov	r0, r6
 8015f5e:	f7fc fe7d 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8015f62:	4005      	ands	r5, r0
 8015f64:	4628      	mov	r0, r5
 8015f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f6a:	2500      	movs	r5, #0
 8015f6c:	e77e      	b.n	8015e6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015f6e:	4028      	ands	r0, r5
 8015f70:	b2c5      	uxtb	r5, r0
 8015f72:	e77b      	b.n	8015e6c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015f74 <uxr_serialize_OBJK_Subscriber_Binary>:
 8015f74:	b570      	push	{r4, r5, r6, lr}
 8015f76:	460d      	mov	r5, r1
 8015f78:	7809      	ldrb	r1, [r1, #0]
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	f7f6 fcd6 	bl	800c92c <ucdr_serialize_bool>
 8015f80:	782b      	ldrb	r3, [r5, #0]
 8015f82:	4604      	mov	r4, r0
 8015f84:	b94b      	cbnz	r3, 8015f9a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8015f86:	7a29      	ldrb	r1, [r5, #8]
 8015f88:	4630      	mov	r0, r6
 8015f8a:	f7f6 fccf 	bl	800c92c <ucdr_serialize_bool>
 8015f8e:	7a2b      	ldrb	r3, [r5, #8]
 8015f90:	4004      	ands	r4, r0
 8015f92:	b2e4      	uxtb	r4, r4
 8015f94:	b943      	cbnz	r3, 8015fa8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8015f96:	4620      	mov	r0, r4
 8015f98:	bd70      	pop	{r4, r5, r6, pc}
 8015f9a:	6869      	ldr	r1, [r5, #4]
 8015f9c:	4630      	mov	r0, r6
 8015f9e:	f003 ff75 	bl	8019e8c <ucdr_serialize_string>
 8015fa2:	4004      	ands	r4, r0
 8015fa4:	b2e4      	uxtb	r4, r4
 8015fa6:	e7ee      	b.n	8015f86 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8015fa8:	f105 010c 	add.w	r1, r5, #12
 8015fac:	4630      	mov	r0, r6
 8015fae:	f7ff ff53 	bl	8015e58 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8015fb2:	4004      	ands	r4, r0
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	bd70      	pop	{r4, r5, r6, pc}

08015fb8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015fb8:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015fbc:	4688      	mov	r8, r1
 8015fbe:	8809      	ldrh	r1, [r1, #0]
 8015fc0:	4681      	mov	r9, r0
 8015fc2:	f7f6 fd0d 	bl	800c9e0 <ucdr_serialize_uint16_t>
 8015fc6:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015fca:	4606      	mov	r6, r0
 8015fcc:	4648      	mov	r0, r9
 8015fce:	f7f6 fcad 	bl	800c92c <ucdr_serialize_bool>
 8015fd2:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015fd6:	4006      	ands	r6, r0
 8015fd8:	b2f5      	uxtb	r5, r6
 8015fda:	b9eb      	cbnz	r3, 8016018 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015fdc:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015fe0:	4648      	mov	r0, r9
 8015fe2:	f7f6 fca3 	bl	800c92c <ucdr_serialize_bool>
 8015fe6:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015fea:	4005      	ands	r5, r0
 8015fec:	bb7b      	cbnz	r3, 801604e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8015fee:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015ff2:	4648      	mov	r0, r9
 8015ff4:	f7f6 fc9a 	bl	800c92c <ucdr_serialize_bool>
 8015ff8:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015ffc:	4005      	ands	r5, r0
 8015ffe:	b9f3      	cbnz	r3, 801603e <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8016000:	f898 1014 	ldrb.w	r1, [r8, #20]
 8016004:	4648      	mov	r0, r9
 8016006:	f7f6 fc91 	bl	800c92c <ucdr_serialize_bool>
 801600a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801600e:	4005      	ands	r5, r0
 8016010:	b94b      	cbnz	r3, 8016026 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8016012:	4628      	mov	r0, r5
 8016014:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8016018:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 801601c:	4648      	mov	r0, r9
 801601e:	f7f6 fcdf 	bl	800c9e0 <ucdr_serialize_uint16_t>
 8016022:	4005      	ands	r5, r0
 8016024:	e7da      	b.n	8015fdc <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8016026:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801602a:	f108 011c 	add.w	r1, r8, #28
 801602e:	4648      	mov	r0, r9
 8016030:	f7fc fe14 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8016034:	4028      	ands	r0, r5
 8016036:	b2c5      	uxtb	r5, r0
 8016038:	4628      	mov	r0, r5
 801603a:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801603e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016042:	4648      	mov	r0, r9
 8016044:	f7f6 feb6 	bl	800cdb4 <ucdr_serialize_uint32_t>
 8016048:	4028      	ands	r0, r5
 801604a:	b2c5      	uxtb	r5, r0
 801604c:	e7d8      	b.n	8016000 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801604e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016052:	4648      	mov	r0, r9
 8016054:	f7f6 feae 	bl	800cdb4 <ucdr_serialize_uint32_t>
 8016058:	4028      	ands	r0, r5
 801605a:	b2c5      	uxtb	r5, r0
 801605c:	e7c7      	b.n	8015fee <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801605e:	bf00      	nop

08016060 <uxr_serialize_OBJK_DataReader_Binary>:
 8016060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016062:	2202      	movs	r2, #2
 8016064:	460c      	mov	r4, r1
 8016066:	4606      	mov	r6, r0
 8016068:	f7fc fc5a 	bl	8012920 <ucdr_serialize_array_uint8_t>
 801606c:	78a1      	ldrb	r1, [r4, #2]
 801606e:	4605      	mov	r5, r0
 8016070:	4630      	mov	r0, r6
 8016072:	f7f6 fc5b 	bl	800c92c <ucdr_serialize_bool>
 8016076:	78a3      	ldrb	r3, [r4, #2]
 8016078:	4005      	ands	r5, r0
 801607a:	b2ed      	uxtb	r5, r5
 801607c:	b90b      	cbnz	r3, 8016082 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801607e:	4628      	mov	r0, r5
 8016080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016082:	f104 0108 	add.w	r1, r4, #8
 8016086:	4630      	mov	r0, r6
 8016088:	f7ff ff96 	bl	8015fb8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801608c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016090:	4607      	mov	r7, r0
 8016092:	4630      	mov	r0, r6
 8016094:	f7f6 fc4a 	bl	800c92c <ucdr_serialize_bool>
 8016098:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801609c:	4038      	ands	r0, r7
 801609e:	b2c7      	uxtb	r7, r0
 80160a0:	b95b      	cbnz	r3, 80160ba <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80160a2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80160a6:	4630      	mov	r0, r6
 80160a8:	f7f6 fc40 	bl	800c92c <ucdr_serialize_bool>
 80160ac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80160b0:	4007      	ands	r7, r0
 80160b2:	b94b      	cbnz	r3, 80160c8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80160b4:	403d      	ands	r5, r7
 80160b6:	4628      	mov	r0, r5
 80160b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160ba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80160be:	4630      	mov	r0, r6
 80160c0:	f7f7 f8ce 	bl	800d260 <ucdr_serialize_uint64_t>
 80160c4:	4007      	ands	r7, r0
 80160c6:	e7ec      	b.n	80160a2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80160c8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80160ca:	4630      	mov	r0, r6
 80160cc:	f003 fede 	bl	8019e8c <ucdr_serialize_string>
 80160d0:	4007      	ands	r7, r0
 80160d2:	b2ff      	uxtb	r7, r7
 80160d4:	e7ee      	b.n	80160b4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80160d6:	bf00      	nop

080160d8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80160d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160da:	2202      	movs	r2, #2
 80160dc:	460d      	mov	r5, r1
 80160de:	4606      	mov	r6, r0
 80160e0:	f7fc fc1e 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80160e4:	78a9      	ldrb	r1, [r5, #2]
 80160e6:	4604      	mov	r4, r0
 80160e8:	4630      	mov	r0, r6
 80160ea:	f7f6 fc1f 	bl	800c92c <ucdr_serialize_bool>
 80160ee:	78ab      	ldrb	r3, [r5, #2]
 80160f0:	4004      	ands	r4, r0
 80160f2:	b2e4      	uxtb	r4, r4
 80160f4:	b90b      	cbnz	r3, 80160fa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80160f6:	4620      	mov	r0, r4
 80160f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160fa:	f105 0108 	add.w	r1, r5, #8
 80160fe:	4630      	mov	r0, r6
 8016100:	f7ff ff5a 	bl	8015fb8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8016104:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8016108:	4607      	mov	r7, r0
 801610a:	4630      	mov	r0, r6
 801610c:	f7f6 fc0e 	bl	800c92c <ucdr_serialize_bool>
 8016110:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8016114:	4038      	ands	r0, r7
 8016116:	b2c7      	uxtb	r7, r0
 8016118:	b913      	cbnz	r3, 8016120 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801611a:	403c      	ands	r4, r7
 801611c:	4620      	mov	r0, r4
 801611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016120:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8016124:	4630      	mov	r0, r6
 8016126:	f7f7 f89b 	bl	800d260 <ucdr_serialize_uint64_t>
 801612a:	4007      	ands	r7, r0
 801612c:	e7f5      	b.n	801611a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 801612e:	bf00      	nop

08016130 <uxr_deserialize_ObjectVariant>:
 8016130:	b570      	push	{r4, r5, r6, lr}
 8016132:	4605      	mov	r5, r0
 8016134:	460e      	mov	r6, r1
 8016136:	f7f6 fc3d 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 801613a:	b168      	cbz	r0, 8016158 <uxr_deserialize_ObjectVariant+0x28>
 801613c:	7833      	ldrb	r3, [r6, #0]
 801613e:	3b01      	subs	r3, #1
 8016140:	4604      	mov	r4, r0
 8016142:	2b0d      	cmp	r3, #13
 8016144:	d809      	bhi.n	801615a <uxr_deserialize_ObjectVariant+0x2a>
 8016146:	e8df f003 	tbb	[pc, r3]
 801614a:	0a41      	.short	0x0a41
 801614c:	0a0a2323 	.word	0x0a0a2323
 8016150:	10080a0a 	.word	0x10080a0a
 8016154:	565c1010 	.word	0x565c1010
 8016158:	2400      	movs	r4, #0
 801615a:	4620      	mov	r0, r4
 801615c:	bd70      	pop	{r4, r5, r6, pc}
 801615e:	1d31      	adds	r1, r6, #4
 8016160:	4628      	mov	r0, r5
 8016162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016166:	f7ff bd55 	b.w	8015c14 <uxr_deserialize_DATAWRITER_Representation>
 801616a:	1d31      	adds	r1, r6, #4
 801616c:	4628      	mov	r0, r5
 801616e:	f7f6 fc21 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8016172:	2800      	cmp	r0, #0
 8016174:	d0f0      	beq.n	8016158 <uxr_deserialize_ObjectVariant+0x28>
 8016176:	7933      	ldrb	r3, [r6, #4]
 8016178:	2b01      	cmp	r3, #1
 801617a:	d001      	beq.n	8016180 <uxr_deserialize_ObjectVariant+0x50>
 801617c:	2b02      	cmp	r3, #2
 801617e:	d1ec      	bne.n	801615a <uxr_deserialize_ObjectVariant+0x2a>
 8016180:	68b1      	ldr	r1, [r6, #8]
 8016182:	4628      	mov	r0, r5
 8016184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801618c:	f003 be8e 	b.w	8019eac <ucdr_deserialize_string>
 8016190:	1d31      	adds	r1, r6, #4
 8016192:	4628      	mov	r0, r5
 8016194:	f7f6 fc0e 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8016198:	4604      	mov	r4, r0
 801619a:	b170      	cbz	r0, 80161ba <uxr_deserialize_ObjectVariant+0x8a>
 801619c:	7933      	ldrb	r3, [r6, #4]
 801619e:	2b02      	cmp	r3, #2
 80161a0:	d04c      	beq.n	801623c <uxr_deserialize_ObjectVariant+0x10c>
 80161a2:	2b03      	cmp	r3, #3
 80161a4:	d109      	bne.n	80161ba <uxr_deserialize_ObjectVariant+0x8a>
 80161a6:	f106 0308 	add.w	r3, r6, #8
 80161aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80161ae:	f106 010c 	add.w	r1, r6, #12
 80161b2:	4628      	mov	r0, r5
 80161b4:	f7fc fd64 	bl	8012c80 <ucdr_deserialize_sequence_uint8_t>
 80161b8:	4604      	mov	r4, r0
 80161ba:	2202      	movs	r2, #2
 80161bc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80161c0:	4628      	mov	r0, r5
 80161c2:	f7fc fc11 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80161c6:	4020      	ands	r0, r4
 80161c8:	b2c4      	uxtb	r4, r0
 80161ca:	e7c6      	b.n	801615a <uxr_deserialize_ObjectVariant+0x2a>
 80161cc:	1d31      	adds	r1, r6, #4
 80161ce:	4628      	mov	r0, r5
 80161d0:	f7f6 fbf0 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80161d4:	4604      	mov	r4, r0
 80161d6:	b130      	cbz	r0, 80161e6 <uxr_deserialize_ObjectVariant+0xb6>
 80161d8:	7933      	ldrb	r3, [r6, #4]
 80161da:	2b02      	cmp	r3, #2
 80161dc:	d036      	beq.n	801624c <uxr_deserialize_ObjectVariant+0x11c>
 80161de:	2b03      	cmp	r3, #3
 80161e0:	d03c      	beq.n	801625c <uxr_deserialize_ObjectVariant+0x12c>
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d032      	beq.n	801624c <uxr_deserialize_ObjectVariant+0x11c>
 80161e6:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80161ea:	4628      	mov	r0, r5
 80161ec:	f7f7 f988 	bl	800d500 <ucdr_deserialize_int16_t>
 80161f0:	4020      	ands	r0, r4
 80161f2:	b2c4      	uxtb	r4, r0
 80161f4:	e7b1      	b.n	801615a <uxr_deserialize_ObjectVariant+0x2a>
 80161f6:	1d31      	adds	r1, r6, #4
 80161f8:	4628      	mov	r0, r5
 80161fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161fe:	f7ff bbbf 	b.w	8015980 <uxr_deserialize_CLIENT_Representation>
 8016202:	2204      	movs	r2, #4
 8016204:	18b1      	adds	r1, r6, r2
 8016206:	4628      	mov	r0, r5
 8016208:	f7fc fbee 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801620c:	2202      	movs	r2, #2
 801620e:	f106 0108 	add.w	r1, r6, #8
 8016212:	4604      	mov	r4, r0
 8016214:	4628      	mov	r0, r5
 8016216:	f7fc fbe7 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801621a:	2202      	movs	r2, #2
 801621c:	4004      	ands	r4, r0
 801621e:	f106 010a 	add.w	r1, r6, #10
 8016222:	4628      	mov	r0, r5
 8016224:	f7fc fbe0 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016228:	b2e4      	uxtb	r4, r4
 801622a:	4603      	mov	r3, r0
 801622c:	f106 010c 	add.w	r1, r6, #12
 8016230:	4628      	mov	r0, r5
 8016232:	401c      	ands	r4, r3
 8016234:	f7f6 fb90 	bl	800c958 <ucdr_deserialize_bool>
 8016238:	4004      	ands	r4, r0
 801623a:	e78e      	b.n	801615a <uxr_deserialize_ObjectVariant+0x2a>
 801623c:	68b1      	ldr	r1, [r6, #8]
 801623e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016242:	4628      	mov	r0, r5
 8016244:	f003 fe32 	bl	8019eac <ucdr_deserialize_string>
 8016248:	4604      	mov	r4, r0
 801624a:	e7b6      	b.n	80161ba <uxr_deserialize_ObjectVariant+0x8a>
 801624c:	68b1      	ldr	r1, [r6, #8]
 801624e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016252:	4628      	mov	r0, r5
 8016254:	f003 fe2a 	bl	8019eac <ucdr_deserialize_string>
 8016258:	4604      	mov	r4, r0
 801625a:	e7c4      	b.n	80161e6 <uxr_deserialize_ObjectVariant+0xb6>
 801625c:	f106 0308 	add.w	r3, r6, #8
 8016260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016264:	f106 010c 	add.w	r1, r6, #12
 8016268:	4628      	mov	r0, r5
 801626a:	f7fc fd09 	bl	8012c80 <ucdr_deserialize_sequence_uint8_t>
 801626e:	4604      	mov	r4, r0
 8016270:	e7b9      	b.n	80161e6 <uxr_deserialize_ObjectVariant+0xb6>
 8016272:	bf00      	nop

08016274 <uxr_deserialize_BaseObjectRequest>:
 8016274:	b570      	push	{r4, r5, r6, lr}
 8016276:	2202      	movs	r2, #2
 8016278:	4605      	mov	r5, r0
 801627a:	460e      	mov	r6, r1
 801627c:	f7fc fbb4 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016280:	2202      	movs	r2, #2
 8016282:	4604      	mov	r4, r0
 8016284:	18b1      	adds	r1, r6, r2
 8016286:	4628      	mov	r0, r5
 8016288:	f7fc fbae 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801628c:	4020      	ands	r0, r4
 801628e:	b2c0      	uxtb	r0, r0
 8016290:	bd70      	pop	{r4, r5, r6, pc}
 8016292:	bf00      	nop

08016294 <uxr_serialize_ActivityInfoVariant>:
 8016294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016298:	460d      	mov	r5, r1
 801629a:	7809      	ldrb	r1, [r1, #0]
 801629c:	4607      	mov	r7, r0
 801629e:	f7f6 fb73 	bl	800c988 <ucdr_serialize_uint8_t>
 80162a2:	4681      	mov	r9, r0
 80162a4:	b138      	cbz	r0, 80162b6 <uxr_serialize_ActivityInfoVariant+0x22>
 80162a6:	782b      	ldrb	r3, [r5, #0]
 80162a8:	2b06      	cmp	r3, #6
 80162aa:	f000 8082 	beq.w	80163b2 <uxr_serialize_ActivityInfoVariant+0x11e>
 80162ae:	2b0d      	cmp	r3, #13
 80162b0:	d016      	beq.n	80162e0 <uxr_serialize_ActivityInfoVariant+0x4c>
 80162b2:	2b05      	cmp	r3, #5
 80162b4:	d002      	beq.n	80162bc <uxr_serialize_ActivityInfoVariant+0x28>
 80162b6:	4648      	mov	r0, r9
 80162b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162bc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80162c0:	4638      	mov	r0, r7
 80162c2:	f7f7 f89d 	bl	800d400 <ucdr_serialize_int16_t>
 80162c6:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80162ca:	4681      	mov	r9, r0
 80162cc:	4638      	mov	r0, r7
 80162ce:	f7f6 ffc7 	bl	800d260 <ucdr_serialize_uint64_t>
 80162d2:	ea09 0000 	and.w	r0, r9, r0
 80162d6:	fa5f f980 	uxtb.w	r9, r0
 80162da:	4648      	mov	r0, r9
 80162dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162e0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80162e4:	4638      	mov	r0, r7
 80162e6:	f7f7 f88b 	bl	800d400 <ucdr_serialize_int16_t>
 80162ea:	68e9      	ldr	r1, [r5, #12]
 80162ec:	4681      	mov	r9, r0
 80162ee:	4638      	mov	r0, r7
 80162f0:	f7f6 fd60 	bl	800cdb4 <ucdr_serialize_uint32_t>
 80162f4:	68eb      	ldr	r3, [r5, #12]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d0eb      	beq.n	80162d2 <uxr_serialize_ActivityInfoVariant+0x3e>
 80162fa:	b320      	cbz	r0, 8016346 <uxr_serialize_ActivityInfoVariant+0xb2>
 80162fc:	f105 080c 	add.w	r8, r5, #12
 8016300:	2600      	movs	r6, #0
 8016302:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8016306:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801630a:	f89a 1010 	ldrb.w	r1, [sl, #16]
 801630e:	4638      	mov	r0, r7
 8016310:	f7f6 fb3a 	bl	800c988 <ucdr_serialize_uint8_t>
 8016314:	2800      	cmp	r0, #0
 8016316:	d053      	beq.n	80163c0 <uxr_serialize_ActivityInfoVariant+0x12c>
 8016318:	f89a 3010 	ldrb.w	r3, [sl, #16]
 801631c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8016320:	0074      	lsls	r4, r6, #1
 8016322:	00c9      	lsls	r1, r1, #3
 8016324:	2b03      	cmp	r3, #3
 8016326:	d854      	bhi.n	80163d2 <uxr_serialize_ActivityInfoVariant+0x13e>
 8016328:	e8df f003 	tbb	[pc, r3]
 801632c:	02102132 	.word	0x02102132
 8016330:	4441      	add	r1, r8
 8016332:	4638      	mov	r0, r7
 8016334:	6889      	ldr	r1, [r1, #8]
 8016336:	f003 fda9 	bl	8019e8c <ucdr_serialize_string>
 801633a:	68ea      	ldr	r2, [r5, #12]
 801633c:	3601      	adds	r6, #1
 801633e:	4296      	cmp	r6, r2
 8016340:	d242      	bcs.n	80163c8 <uxr_serialize_ActivityInfoVariant+0x134>
 8016342:	2800      	cmp	r0, #0
 8016344:	d1dd      	bne.n	8016302 <uxr_serialize_ActivityInfoVariant+0x6e>
 8016346:	f04f 0900 	mov.w	r9, #0
 801634a:	e7b4      	b.n	80162b6 <uxr_serialize_ActivityInfoVariant+0x22>
 801634c:	3108      	adds	r1, #8
 801634e:	4441      	add	r1, r8
 8016350:	2210      	movs	r2, #16
 8016352:	4638      	mov	r0, r7
 8016354:	f7fc fae4 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8016358:	4434      	add	r4, r6
 801635a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801635e:	4604      	mov	r4, r0
 8016360:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8016362:	4638      	mov	r0, r7
 8016364:	f7f6 fd26 	bl	800cdb4 <ucdr_serialize_uint32_t>
 8016368:	4020      	ands	r0, r4
 801636a:	b2c0      	uxtb	r0, r0
 801636c:	e7e5      	b.n	801633a <uxr_serialize_ActivityInfoVariant+0xa6>
 801636e:	3108      	adds	r1, #8
 8016370:	4441      	add	r1, r8
 8016372:	2204      	movs	r2, #4
 8016374:	4638      	mov	r0, r7
 8016376:	f7fc fad3 	bl	8012920 <ucdr_serialize_array_uint8_t>
 801637a:	4434      	add	r4, r6
 801637c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8016380:	4604      	mov	r4, r0
 8016382:	8b19      	ldrh	r1, [r3, #24]
 8016384:	4638      	mov	r0, r7
 8016386:	f7f6 fb2b 	bl	800c9e0 <ucdr_serialize_uint16_t>
 801638a:	4020      	ands	r0, r4
 801638c:	b2c0      	uxtb	r0, r0
 801638e:	e7d4      	b.n	801633a <uxr_serialize_ActivityInfoVariant+0xa6>
 8016390:	3108      	adds	r1, #8
 8016392:	4441      	add	r1, r8
 8016394:	2202      	movs	r2, #2
 8016396:	4638      	mov	r0, r7
 8016398:	f7fc fac2 	bl	8012920 <ucdr_serialize_array_uint8_t>
 801639c:	4434      	add	r4, r6
 801639e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80163a2:	4604      	mov	r4, r0
 80163a4:	7d99      	ldrb	r1, [r3, #22]
 80163a6:	4638      	mov	r0, r7
 80163a8:	f7f6 faee 	bl	800c988 <ucdr_serialize_uint8_t>
 80163ac:	4020      	ands	r0, r4
 80163ae:	b2c0      	uxtb	r0, r0
 80163b0:	e7c3      	b.n	801633a <uxr_serialize_ActivityInfoVariant+0xa6>
 80163b2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80163b6:	4638      	mov	r0, r7
 80163b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163bc:	f7f7 b820 	b.w	800d400 <ucdr_serialize_int16_t>
 80163c0:	68ea      	ldr	r2, [r5, #12]
 80163c2:	3601      	adds	r6, #1
 80163c4:	42b2      	cmp	r2, r6
 80163c6:	d8be      	bhi.n	8016346 <uxr_serialize_ActivityInfoVariant+0xb2>
 80163c8:	ea09 0900 	and.w	r9, r9, r0
 80163cc:	fa5f f989 	uxtb.w	r9, r9
 80163d0:	e771      	b.n	80162b6 <uxr_serialize_ActivityInfoVariant+0x22>
 80163d2:	68eb      	ldr	r3, [r5, #12]
 80163d4:	3601      	adds	r6, #1
 80163d6:	429e      	cmp	r6, r3
 80163d8:	f10a 0a18 	add.w	sl, sl, #24
 80163dc:	d395      	bcc.n	801630a <uxr_serialize_ActivityInfoVariant+0x76>
 80163de:	e76a      	b.n	80162b6 <uxr_serialize_ActivityInfoVariant+0x22>

080163e0 <uxr_deserialize_BaseObjectReply>:
 80163e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e4:	2202      	movs	r2, #2
 80163e6:	4606      	mov	r6, r0
 80163e8:	460f      	mov	r7, r1
 80163ea:	f7fc fafd 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80163ee:	2202      	movs	r2, #2
 80163f0:	18b9      	adds	r1, r7, r2
 80163f2:	4605      	mov	r5, r0
 80163f4:	4630      	mov	r0, r6
 80163f6:	f7fc faf7 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80163fa:	1d39      	adds	r1, r7, #4
 80163fc:	4680      	mov	r8, r0
 80163fe:	4630      	mov	r0, r6
 8016400:	f7f6 fad8 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8016404:	1d79      	adds	r1, r7, #5
 8016406:	4604      	mov	r4, r0
 8016408:	4630      	mov	r0, r6
 801640a:	f7f6 fad3 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 801640e:	ea05 0508 	and.w	r5, r5, r8
 8016412:	402c      	ands	r4, r5
 8016414:	4020      	ands	r0, r4
 8016416:	b2c0      	uxtb	r0, r0
 8016418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801641c <uxr_serialize_ReadSpecification>:
 801641c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016420:	460e      	mov	r6, r1
 8016422:	7809      	ldrb	r1, [r1, #0]
 8016424:	4607      	mov	r7, r0
 8016426:	f7f6 faaf 	bl	800c988 <ucdr_serialize_uint8_t>
 801642a:	7871      	ldrb	r1, [r6, #1]
 801642c:	4604      	mov	r4, r0
 801642e:	4638      	mov	r0, r7
 8016430:	f7f6 faaa 	bl	800c988 <ucdr_serialize_uint8_t>
 8016434:	78b1      	ldrb	r1, [r6, #2]
 8016436:	4004      	ands	r4, r0
 8016438:	4638      	mov	r0, r7
 801643a:	f7f6 fa77 	bl	800c92c <ucdr_serialize_bool>
 801643e:	78b3      	ldrb	r3, [r6, #2]
 8016440:	b2e4      	uxtb	r4, r4
 8016442:	4004      	ands	r4, r0
 8016444:	b94b      	cbnz	r3, 801645a <uxr_serialize_ReadSpecification+0x3e>
 8016446:	7a31      	ldrb	r1, [r6, #8]
 8016448:	4638      	mov	r0, r7
 801644a:	f7f6 fa6f 	bl	800c92c <ucdr_serialize_bool>
 801644e:	7a33      	ldrb	r3, [r6, #8]
 8016450:	4004      	ands	r4, r0
 8016452:	b943      	cbnz	r3, 8016466 <uxr_serialize_ReadSpecification+0x4a>
 8016454:	4620      	mov	r0, r4
 8016456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801645a:	6871      	ldr	r1, [r6, #4]
 801645c:	4638      	mov	r0, r7
 801645e:	f003 fd15 	bl	8019e8c <ucdr_serialize_string>
 8016462:	4004      	ands	r4, r0
 8016464:	e7ef      	b.n	8016446 <uxr_serialize_ReadSpecification+0x2a>
 8016466:	8971      	ldrh	r1, [r6, #10]
 8016468:	4638      	mov	r0, r7
 801646a:	f7f6 fab9 	bl	800c9e0 <ucdr_serialize_uint16_t>
 801646e:	89b1      	ldrh	r1, [r6, #12]
 8016470:	4605      	mov	r5, r0
 8016472:	4638      	mov	r0, r7
 8016474:	f7f6 fab4 	bl	800c9e0 <ucdr_serialize_uint16_t>
 8016478:	89f1      	ldrh	r1, [r6, #14]
 801647a:	4005      	ands	r5, r0
 801647c:	4638      	mov	r0, r7
 801647e:	f7f6 faaf 	bl	800c9e0 <ucdr_serialize_uint16_t>
 8016482:	8a31      	ldrh	r1, [r6, #16]
 8016484:	4680      	mov	r8, r0
 8016486:	4638      	mov	r0, r7
 8016488:	f7f6 faaa 	bl	800c9e0 <ucdr_serialize_uint16_t>
 801648c:	b2ed      	uxtb	r5, r5
 801648e:	4025      	ands	r5, r4
 8016490:	ea08 0505 	and.w	r5, r8, r5
 8016494:	ea00 0405 	and.w	r4, r0, r5
 8016498:	4620      	mov	r0, r4
 801649a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801649e:	bf00      	nop

080164a0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80164a0:	f7ff ba16 	b.w	80158d0 <uxr_serialize_CLIENT_Representation>

080164a4 <uxr_serialize_CREATE_Payload>:
 80164a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164a6:	2202      	movs	r2, #2
 80164a8:	4607      	mov	r7, r0
 80164aa:	460e      	mov	r6, r1
 80164ac:	f7fc fa38 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80164b0:	2202      	movs	r2, #2
 80164b2:	18b1      	adds	r1, r6, r2
 80164b4:	4605      	mov	r5, r0
 80164b6:	4638      	mov	r0, r7
 80164b8:	f7fc fa32 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80164bc:	7931      	ldrb	r1, [r6, #4]
 80164be:	4604      	mov	r4, r0
 80164c0:	4638      	mov	r0, r7
 80164c2:	f7f6 fa61 	bl	800c988 <ucdr_serialize_uint8_t>
 80164c6:	b170      	cbz	r0, 80164e6 <uxr_serialize_CREATE_Payload+0x42>
 80164c8:	7933      	ldrb	r3, [r6, #4]
 80164ca:	402c      	ands	r4, r5
 80164cc:	3b01      	subs	r3, #1
 80164ce:	b2e4      	uxtb	r4, r4
 80164d0:	2b0d      	cmp	r3, #13
 80164d2:	d809      	bhi.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 80164d4:	e8df f003 	tbb	[pc, r3]
 80164d8:	23230a4c 	.word	0x23230a4c
 80164dc:	0a0a0a0a 	.word	0x0a0a0a0a
 80164e0:	12121208 	.word	0x12121208
 80164e4:	3e45      	.short	0x3e45
 80164e6:	2400      	movs	r4, #0
 80164e8:	4620      	mov	r0, r4
 80164ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ec:	f106 0108 	add.w	r1, r6, #8
 80164f0:	4638      	mov	r0, r7
 80164f2:	f7ff faf3 	bl	8015adc <uxr_serialize_DATAWRITER_Representation>
 80164f6:	4004      	ands	r4, r0
 80164f8:	4620      	mov	r0, r4
 80164fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164fc:	7a31      	ldrb	r1, [r6, #8]
 80164fe:	4638      	mov	r0, r7
 8016500:	f7f6 fa42 	bl	800c988 <ucdr_serialize_uint8_t>
 8016504:	2800      	cmp	r0, #0
 8016506:	d0ee      	beq.n	80164e6 <uxr_serialize_CREATE_Payload+0x42>
 8016508:	7a33      	ldrb	r3, [r6, #8]
 801650a:	2b01      	cmp	r3, #1
 801650c:	d001      	beq.n	8016512 <uxr_serialize_CREATE_Payload+0x6e>
 801650e:	2b02      	cmp	r3, #2
 8016510:	d1ea      	bne.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 8016512:	68f1      	ldr	r1, [r6, #12]
 8016514:	4638      	mov	r0, r7
 8016516:	f003 fcb9 	bl	8019e8c <ucdr_serialize_string>
 801651a:	4004      	ands	r4, r0
 801651c:	e7e4      	b.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 801651e:	7a31      	ldrb	r1, [r6, #8]
 8016520:	4638      	mov	r0, r7
 8016522:	f7f6 fa31 	bl	800c988 <ucdr_serialize_uint8_t>
 8016526:	4605      	mov	r5, r0
 8016528:	b158      	cbz	r0, 8016542 <uxr_serialize_CREATE_Payload+0x9e>
 801652a:	7a33      	ldrb	r3, [r6, #8]
 801652c:	2b02      	cmp	r3, #2
 801652e:	d034      	beq.n	801659a <uxr_serialize_CREATE_Payload+0xf6>
 8016530:	2b03      	cmp	r3, #3
 8016532:	d106      	bne.n	8016542 <uxr_serialize_CREATE_Payload+0x9e>
 8016534:	68f2      	ldr	r2, [r6, #12]
 8016536:	f106 0110 	add.w	r1, r6, #16
 801653a:	4638      	mov	r0, r7
 801653c:	f7fc fb8e 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 8016540:	4605      	mov	r5, r0
 8016542:	2202      	movs	r2, #2
 8016544:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016548:	4638      	mov	r0, r7
 801654a:	f7fc f9e9 	bl	8012920 <ucdr_serialize_array_uint8_t>
 801654e:	4028      	ands	r0, r5
 8016550:	4004      	ands	r4, r0
 8016552:	e7c9      	b.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 8016554:	f106 0108 	add.w	r1, r6, #8
 8016558:	4638      	mov	r0, r7
 801655a:	f7ff f9b9 	bl	80158d0 <uxr_serialize_CLIENT_Representation>
 801655e:	4004      	ands	r4, r0
 8016560:	e7c2      	b.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 8016562:	f106 0108 	add.w	r1, r6, #8
 8016566:	4638      	mov	r0, r7
 8016568:	f7ff fa6e 	bl	8015a48 <uxr_serialize_AGENT_Representation>
 801656c:	4004      	ands	r4, r0
 801656e:	e7bb      	b.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 8016570:	7a31      	ldrb	r1, [r6, #8]
 8016572:	4638      	mov	r0, r7
 8016574:	f7f6 fa08 	bl	800c988 <ucdr_serialize_uint8_t>
 8016578:	4605      	mov	r5, r0
 801657a:	b130      	cbz	r0, 801658a <uxr_serialize_CREATE_Payload+0xe6>
 801657c:	7a33      	ldrb	r3, [r6, #8]
 801657e:	2b02      	cmp	r3, #2
 8016580:	d011      	beq.n	80165a6 <uxr_serialize_CREATE_Payload+0x102>
 8016582:	2b03      	cmp	r3, #3
 8016584:	d015      	beq.n	80165b2 <uxr_serialize_CREATE_Payload+0x10e>
 8016586:	2b01      	cmp	r3, #1
 8016588:	d00d      	beq.n	80165a6 <uxr_serialize_CREATE_Payload+0x102>
 801658a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 801658e:	4638      	mov	r0, r7
 8016590:	f7f6 ff36 	bl	800d400 <ucdr_serialize_int16_t>
 8016594:	4028      	ands	r0, r5
 8016596:	4004      	ands	r4, r0
 8016598:	e7a6      	b.n	80164e8 <uxr_serialize_CREATE_Payload+0x44>
 801659a:	68f1      	ldr	r1, [r6, #12]
 801659c:	4638      	mov	r0, r7
 801659e:	f003 fc75 	bl	8019e8c <ucdr_serialize_string>
 80165a2:	4605      	mov	r5, r0
 80165a4:	e7cd      	b.n	8016542 <uxr_serialize_CREATE_Payload+0x9e>
 80165a6:	68f1      	ldr	r1, [r6, #12]
 80165a8:	4638      	mov	r0, r7
 80165aa:	f003 fc6f 	bl	8019e8c <ucdr_serialize_string>
 80165ae:	4605      	mov	r5, r0
 80165b0:	e7eb      	b.n	801658a <uxr_serialize_CREATE_Payload+0xe6>
 80165b2:	68f2      	ldr	r2, [r6, #12]
 80165b4:	f106 0110 	add.w	r1, r6, #16
 80165b8:	4638      	mov	r0, r7
 80165ba:	f7fc fb4f 	bl	8012c5c <ucdr_serialize_sequence_uint8_t>
 80165be:	4605      	mov	r5, r0
 80165c0:	e7e3      	b.n	801658a <uxr_serialize_CREATE_Payload+0xe6>
 80165c2:	bf00      	nop

080165c4 <uxr_serialize_GET_INFO_Payload>:
 80165c4:	b570      	push	{r4, r5, r6, lr}
 80165c6:	2202      	movs	r2, #2
 80165c8:	4605      	mov	r5, r0
 80165ca:	460e      	mov	r6, r1
 80165cc:	f7fc f9a8 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80165d0:	2202      	movs	r2, #2
 80165d2:	18b1      	adds	r1, r6, r2
 80165d4:	4604      	mov	r4, r0
 80165d6:	4628      	mov	r0, r5
 80165d8:	f7fc f9a2 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80165dc:	6871      	ldr	r1, [r6, #4]
 80165de:	4004      	ands	r4, r0
 80165e0:	4628      	mov	r0, r5
 80165e2:	f7f6 fbe7 	bl	800cdb4 <ucdr_serialize_uint32_t>
 80165e6:	b2e4      	uxtb	r4, r4
 80165e8:	4020      	ands	r0, r4
 80165ea:	bd70      	pop	{r4, r5, r6, pc}

080165ec <uxr_deserialize_GET_INFO_Payload>:
 80165ec:	b570      	push	{r4, r5, r6, lr}
 80165ee:	2202      	movs	r2, #2
 80165f0:	4605      	mov	r5, r0
 80165f2:	460e      	mov	r6, r1
 80165f4:	f7fc f9f8 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80165f8:	2202      	movs	r2, #2
 80165fa:	18b1      	adds	r1, r6, r2
 80165fc:	4604      	mov	r4, r0
 80165fe:	4628      	mov	r0, r5
 8016600:	f7fc f9f2 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016604:	1d31      	adds	r1, r6, #4
 8016606:	4004      	ands	r4, r0
 8016608:	4628      	mov	r0, r5
 801660a:	f7f6 fd03 	bl	800d014 <ucdr_deserialize_uint32_t>
 801660e:	b2e4      	uxtb	r4, r4
 8016610:	4020      	ands	r0, r4
 8016612:	bd70      	pop	{r4, r5, r6, pc}

08016614 <uxr_serialize_DELETE_Payload>:
 8016614:	b570      	push	{r4, r5, r6, lr}
 8016616:	2202      	movs	r2, #2
 8016618:	4605      	mov	r5, r0
 801661a:	460e      	mov	r6, r1
 801661c:	f7fc f980 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8016620:	2202      	movs	r2, #2
 8016622:	4604      	mov	r4, r0
 8016624:	18b1      	adds	r1, r6, r2
 8016626:	4628      	mov	r0, r5
 8016628:	f7fc f97a 	bl	8012920 <ucdr_serialize_array_uint8_t>
 801662c:	4020      	ands	r0, r4
 801662e:	b2c0      	uxtb	r0, r0
 8016630:	bd70      	pop	{r4, r5, r6, pc}
 8016632:	bf00      	nop

08016634 <uxr_deserialize_STATUS_AGENT_Payload>:
 8016634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016638:	4605      	mov	r5, r0
 801663a:	460e      	mov	r6, r1
 801663c:	f7f6 f9ba 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 8016640:	1c71      	adds	r1, r6, #1
 8016642:	4604      	mov	r4, r0
 8016644:	4628      	mov	r0, r5
 8016646:	f7f6 f9b5 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 801664a:	2204      	movs	r2, #4
 801664c:	18b1      	adds	r1, r6, r2
 801664e:	4680      	mov	r8, r0
 8016650:	4628      	mov	r0, r5
 8016652:	f7fc f9c9 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016656:	f106 0108 	add.w	r1, r6, #8
 801665a:	4607      	mov	r7, r0
 801665c:	2202      	movs	r2, #2
 801665e:	4628      	mov	r0, r5
 8016660:	f7fc f9c2 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016664:	ea04 0308 	and.w	r3, r4, r8
 8016668:	b2db      	uxtb	r3, r3
 801666a:	ea03 0407 	and.w	r4, r3, r7
 801666e:	2202      	movs	r2, #2
 8016670:	4607      	mov	r7, r0
 8016672:	f106 010a 	add.w	r1, r6, #10
 8016676:	4628      	mov	r0, r5
 8016678:	f7fc f9b6 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801667c:	f106 010c 	add.w	r1, r6, #12
 8016680:	4603      	mov	r3, r0
 8016682:	4628      	mov	r0, r5
 8016684:	461d      	mov	r5, r3
 8016686:	f7f6 f967 	bl	800c958 <ucdr_deserialize_bool>
 801668a:	403c      	ands	r4, r7
 801668c:	4025      	ands	r5, r4
 801668e:	4028      	ands	r0, r5
 8016690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016694 <uxr_deserialize_STATUS_Payload>:
 8016694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016698:	2202      	movs	r2, #2
 801669a:	4606      	mov	r6, r0
 801669c:	460f      	mov	r7, r1
 801669e:	f7fc f9a3 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80166a2:	2202      	movs	r2, #2
 80166a4:	18b9      	adds	r1, r7, r2
 80166a6:	4605      	mov	r5, r0
 80166a8:	4630      	mov	r0, r6
 80166aa:	f7fc f99d 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80166ae:	1d39      	adds	r1, r7, #4
 80166b0:	4680      	mov	r8, r0
 80166b2:	4630      	mov	r0, r6
 80166b4:	f7f6 f97e 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80166b8:	1d79      	adds	r1, r7, #5
 80166ba:	4604      	mov	r4, r0
 80166bc:	4630      	mov	r0, r6
 80166be:	f7f6 f979 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80166c2:	ea05 0508 	and.w	r5, r5, r8
 80166c6:	402c      	ands	r4, r5
 80166c8:	4020      	ands	r0, r4
 80166ca:	b2c0      	uxtb	r0, r0
 80166cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166d0 <uxr_serialize_INFO_Payload>:
 80166d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166d4:	2202      	movs	r2, #2
 80166d6:	460c      	mov	r4, r1
 80166d8:	4605      	mov	r5, r0
 80166da:	f7fc f921 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80166de:	2202      	movs	r2, #2
 80166e0:	18a1      	adds	r1, r4, r2
 80166e2:	4680      	mov	r8, r0
 80166e4:	4628      	mov	r0, r5
 80166e6:	f7fc f91b 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80166ea:	7921      	ldrb	r1, [r4, #4]
 80166ec:	4607      	mov	r7, r0
 80166ee:	4628      	mov	r0, r5
 80166f0:	f7f6 f94a 	bl	800c988 <ucdr_serialize_uint8_t>
 80166f4:	7961      	ldrb	r1, [r4, #5]
 80166f6:	4606      	mov	r6, r0
 80166f8:	4628      	mov	r0, r5
 80166fa:	f7f6 f945 	bl	800c988 <ucdr_serialize_uint8_t>
 80166fe:	ea08 0807 	and.w	r8, r8, r7
 8016702:	ea06 0608 	and.w	r6, r6, r8
 8016706:	4006      	ands	r6, r0
 8016708:	7a21      	ldrb	r1, [r4, #8]
 801670a:	4628      	mov	r0, r5
 801670c:	f7f6 f90e 	bl	800c92c <ucdr_serialize_bool>
 8016710:	7a23      	ldrb	r3, [r4, #8]
 8016712:	b2f7      	uxtb	r7, r6
 8016714:	4606      	mov	r6, r0
 8016716:	b96b      	cbnz	r3, 8016734 <uxr_serialize_INFO_Payload+0x64>
 8016718:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801671c:	4628      	mov	r0, r5
 801671e:	f7f6 f905 	bl	800c92c <ucdr_serialize_bool>
 8016722:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8016726:	4030      	ands	r0, r6
 8016728:	b2c6      	uxtb	r6, r0
 801672a:	b983      	cbnz	r3, 801674e <uxr_serialize_INFO_Payload+0x7e>
 801672c:	ea06 0007 	and.w	r0, r6, r7
 8016730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016734:	7b21      	ldrb	r1, [r4, #12]
 8016736:	4628      	mov	r0, r5
 8016738:	f7f6 f926 	bl	800c988 <ucdr_serialize_uint8_t>
 801673c:	b188      	cbz	r0, 8016762 <uxr_serialize_INFO_Payload+0x92>
 801673e:	f104 010c 	add.w	r1, r4, #12
 8016742:	4628      	mov	r0, r5
 8016744:	f7ff f9f2 	bl	8015b2c <uxr_serialize_ObjectVariant.part.0>
 8016748:	4030      	ands	r0, r6
 801674a:	b2c6      	uxtb	r6, r0
 801674c:	e7e4      	b.n	8016718 <uxr_serialize_INFO_Payload+0x48>
 801674e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8016752:	4628      	mov	r0, r5
 8016754:	f7ff fd9e 	bl	8016294 <uxr_serialize_ActivityInfoVariant>
 8016758:	4006      	ands	r6, r0
 801675a:	ea06 0007 	and.w	r0, r6, r7
 801675e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016762:	4606      	mov	r6, r0
 8016764:	e7d8      	b.n	8016718 <uxr_serialize_INFO_Payload+0x48>
 8016766:	bf00      	nop

08016768 <uxr_serialize_READ_DATA_Payload>:
 8016768:	b570      	push	{r4, r5, r6, lr}
 801676a:	2202      	movs	r2, #2
 801676c:	4605      	mov	r5, r0
 801676e:	460e      	mov	r6, r1
 8016770:	f7fc f8d6 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8016774:	2202      	movs	r2, #2
 8016776:	18b1      	adds	r1, r6, r2
 8016778:	4604      	mov	r4, r0
 801677a:	4628      	mov	r0, r5
 801677c:	f7fc f8d0 	bl	8012920 <ucdr_serialize_array_uint8_t>
 8016780:	1d31      	adds	r1, r6, #4
 8016782:	4004      	ands	r4, r0
 8016784:	4628      	mov	r0, r5
 8016786:	f7ff fe49 	bl	801641c <uxr_serialize_ReadSpecification>
 801678a:	b2e4      	uxtb	r4, r4
 801678c:	4020      	ands	r0, r4
 801678e:	bd70      	pop	{r4, r5, r6, pc}

08016790 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016790:	b570      	push	{r4, r5, r6, lr}
 8016792:	2202      	movs	r2, #2
 8016794:	4605      	mov	r5, r0
 8016796:	460e      	mov	r6, r1
 8016798:	f7fc f8c2 	bl	8012920 <ucdr_serialize_array_uint8_t>
 801679c:	2202      	movs	r2, #2
 801679e:	4604      	mov	r4, r0
 80167a0:	18b1      	adds	r1, r6, r2
 80167a2:	4628      	mov	r0, r5
 80167a4:	f7fc f8bc 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80167a8:	4020      	ands	r0, r4
 80167aa:	b2c0      	uxtb	r0, r0
 80167ac:	bd70      	pop	{r4, r5, r6, pc}
 80167ae:	bf00      	nop

080167b0 <uxr_serialize_ACKNACK_Payload>:
 80167b0:	b570      	push	{r4, r5, r6, lr}
 80167b2:	460c      	mov	r4, r1
 80167b4:	460e      	mov	r6, r1
 80167b6:	f834 1b02 	ldrh.w	r1, [r4], #2
 80167ba:	4605      	mov	r5, r0
 80167bc:	f7f6 f910 	bl	800c9e0 <ucdr_serialize_uint16_t>
 80167c0:	2202      	movs	r2, #2
 80167c2:	4621      	mov	r1, r4
 80167c4:	4604      	mov	r4, r0
 80167c6:	4628      	mov	r0, r5
 80167c8:	f7fc f8aa 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80167cc:	7931      	ldrb	r1, [r6, #4]
 80167ce:	4004      	ands	r4, r0
 80167d0:	4628      	mov	r0, r5
 80167d2:	f7f6 f8d9 	bl	800c988 <ucdr_serialize_uint8_t>
 80167d6:	b2e4      	uxtb	r4, r4
 80167d8:	4020      	ands	r0, r4
 80167da:	bd70      	pop	{r4, r5, r6, pc}

080167dc <uxr_deserialize_ACKNACK_Payload>:
 80167dc:	b570      	push	{r4, r5, r6, lr}
 80167de:	4605      	mov	r5, r0
 80167e0:	460e      	mov	r6, r1
 80167e2:	f7f6 f9fd 	bl	800cbe0 <ucdr_deserialize_uint16_t>
 80167e6:	2202      	movs	r2, #2
 80167e8:	18b1      	adds	r1, r6, r2
 80167ea:	4604      	mov	r4, r0
 80167ec:	4628      	mov	r0, r5
 80167ee:	f7fc f8fb 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80167f2:	1d31      	adds	r1, r6, #4
 80167f4:	4004      	ands	r4, r0
 80167f6:	4628      	mov	r0, r5
 80167f8:	f7f6 f8dc 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 80167fc:	b2e4      	uxtb	r4, r4
 80167fe:	4020      	ands	r0, r4
 8016800:	bd70      	pop	{r4, r5, r6, pc}
 8016802:	bf00      	nop

08016804 <uxr_serialize_HEARTBEAT_Payload>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	460d      	mov	r5, r1
 8016808:	8809      	ldrh	r1, [r1, #0]
 801680a:	4606      	mov	r6, r0
 801680c:	f7f6 f8e8 	bl	800c9e0 <ucdr_serialize_uint16_t>
 8016810:	8869      	ldrh	r1, [r5, #2]
 8016812:	4604      	mov	r4, r0
 8016814:	4630      	mov	r0, r6
 8016816:	f7f6 f8e3 	bl	800c9e0 <ucdr_serialize_uint16_t>
 801681a:	7929      	ldrb	r1, [r5, #4]
 801681c:	4004      	ands	r4, r0
 801681e:	4630      	mov	r0, r6
 8016820:	f7f6 f8b2 	bl	800c988 <ucdr_serialize_uint8_t>
 8016824:	b2e4      	uxtb	r4, r4
 8016826:	4020      	ands	r0, r4
 8016828:	bd70      	pop	{r4, r5, r6, pc}
 801682a:	bf00      	nop

0801682c <uxr_deserialize_HEARTBEAT_Payload>:
 801682c:	b570      	push	{r4, r5, r6, lr}
 801682e:	4605      	mov	r5, r0
 8016830:	460e      	mov	r6, r1
 8016832:	f7f6 f9d5 	bl	800cbe0 <ucdr_deserialize_uint16_t>
 8016836:	1cb1      	adds	r1, r6, #2
 8016838:	4604      	mov	r4, r0
 801683a:	4628      	mov	r0, r5
 801683c:	f7f6 f9d0 	bl	800cbe0 <ucdr_deserialize_uint16_t>
 8016840:	1d31      	adds	r1, r6, #4
 8016842:	4004      	ands	r4, r0
 8016844:	4628      	mov	r0, r5
 8016846:	f7f6 f8b5 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 801684a:	b2e4      	uxtb	r4, r4
 801684c:	4020      	ands	r0, r4
 801684e:	bd70      	pop	{r4, r5, r6, pc}

08016850 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016854:	4605      	mov	r5, r0
 8016856:	460e      	mov	r6, r1
 8016858:	f7f6 ff5e 	bl	800d718 <ucdr_deserialize_int32_t>
 801685c:	1d31      	adds	r1, r6, #4
 801685e:	4607      	mov	r7, r0
 8016860:	4628      	mov	r0, r5
 8016862:	f7f6 fbd7 	bl	800d014 <ucdr_deserialize_uint32_t>
 8016866:	f106 0108 	add.w	r1, r6, #8
 801686a:	4680      	mov	r8, r0
 801686c:	4628      	mov	r0, r5
 801686e:	f7f6 ff53 	bl	800d718 <ucdr_deserialize_int32_t>
 8016872:	f106 010c 	add.w	r1, r6, #12
 8016876:	4604      	mov	r4, r0
 8016878:	4628      	mov	r0, r5
 801687a:	f7f6 fbcb 	bl	800d014 <ucdr_deserialize_uint32_t>
 801687e:	ea07 0708 	and.w	r7, r7, r8
 8016882:	403c      	ands	r4, r7
 8016884:	f106 0110 	add.w	r1, r6, #16
 8016888:	4004      	ands	r4, r0
 801688a:	4628      	mov	r0, r5
 801688c:	f7f6 ff44 	bl	800d718 <ucdr_deserialize_int32_t>
 8016890:	f106 0114 	add.w	r1, r6, #20
 8016894:	4607      	mov	r7, r0
 8016896:	4628      	mov	r0, r5
 8016898:	f7f6 fbbc 	bl	800d014 <ucdr_deserialize_uint32_t>
 801689c:	b2e4      	uxtb	r4, r4
 801689e:	403c      	ands	r4, r7
 80168a0:	4020      	ands	r0, r4
 80168a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168a6:	bf00      	nop

080168a8 <uxr_serialize_SampleIdentity>:
 80168a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168ac:	220c      	movs	r2, #12
 80168ae:	4604      	mov	r4, r0
 80168b0:	460d      	mov	r5, r1
 80168b2:	f7fc f835 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80168b6:	2203      	movs	r2, #3
 80168b8:	f105 010c 	add.w	r1, r5, #12
 80168bc:	4607      	mov	r7, r0
 80168be:	4620      	mov	r0, r4
 80168c0:	f7fc f82e 	bl	8012920 <ucdr_serialize_array_uint8_t>
 80168c4:	7be9      	ldrb	r1, [r5, #15]
 80168c6:	4680      	mov	r8, r0
 80168c8:	4620      	mov	r0, r4
 80168ca:	f7f6 f85d 	bl	800c988 <ucdr_serialize_uint8_t>
 80168ce:	6929      	ldr	r1, [r5, #16]
 80168d0:	4606      	mov	r6, r0
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7f6 fe88 	bl	800d5e8 <ucdr_serialize_int32_t>
 80168d8:	6969      	ldr	r1, [r5, #20]
 80168da:	4603      	mov	r3, r0
 80168dc:	4620      	mov	r0, r4
 80168de:	ea07 0708 	and.w	r7, r7, r8
 80168e2:	461c      	mov	r4, r3
 80168e4:	f7f6 fa66 	bl	800cdb4 <ucdr_serialize_uint32_t>
 80168e8:	403e      	ands	r6, r7
 80168ea:	4034      	ands	r4, r6
 80168ec:	4020      	ands	r0, r4
 80168ee:	b2c0      	uxtb	r0, r0
 80168f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168f4 <uxr_deserialize_SampleIdentity>:
 80168f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f8:	220c      	movs	r2, #12
 80168fa:	4604      	mov	r4, r0
 80168fc:	460d      	mov	r5, r1
 80168fe:	f7fc f873 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016902:	2203      	movs	r2, #3
 8016904:	f105 010c 	add.w	r1, r5, #12
 8016908:	4607      	mov	r7, r0
 801690a:	4620      	mov	r0, r4
 801690c:	f7fc f86c 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8016910:	f105 010f 	add.w	r1, r5, #15
 8016914:	4680      	mov	r8, r0
 8016916:	4620      	mov	r0, r4
 8016918:	f7f6 f84c 	bl	800c9b4 <ucdr_deserialize_uint8_t>
 801691c:	f105 0110 	add.w	r1, r5, #16
 8016920:	4606      	mov	r6, r0
 8016922:	4620      	mov	r0, r4
 8016924:	f7f6 fef8 	bl	800d718 <ucdr_deserialize_int32_t>
 8016928:	f105 0114 	add.w	r1, r5, #20
 801692c:	4603      	mov	r3, r0
 801692e:	4620      	mov	r0, r4
 8016930:	ea07 0708 	and.w	r7, r7, r8
 8016934:	461c      	mov	r4, r3
 8016936:	f7f6 fb6d 	bl	800d014 <ucdr_deserialize_uint32_t>
 801693a:	403e      	ands	r6, r7
 801693c:	4034      	ands	r4, r6
 801693e:	4020      	ands	r0, r4
 8016940:	b2c0      	uxtb	r0, r0
 8016942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016946:	bf00      	nop

08016948 <nav_msgs__msg__Odometry__init>:
 8016948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801694c:	4605      	mov	r5, r0
 801694e:	b3c0      	cbz	r0, 80169c2 <nav_msgs__msg__Odometry__init+0x7a>
 8016950:	f003 f8da 	bl	8019b08 <std_msgs__msg__Header__init>
 8016954:	4604      	mov	r4, r0
 8016956:	b310      	cbz	r0, 801699e <nav_msgs__msg__Odometry__init+0x56>
 8016958:	f105 0614 	add.w	r6, r5, #20
 801695c:	4630      	mov	r0, r6
 801695e:	f003 f875 	bl	8019a4c <rosidl_runtime_c__String__init>
 8016962:	4604      	mov	r4, r0
 8016964:	2800      	cmp	r0, #0
 8016966:	d040      	beq.n	80169ea <nav_msgs__msg__Odometry__init+0xa2>
 8016968:	f105 0720 	add.w	r7, r5, #32
 801696c:	4638      	mov	r0, r7
 801696e:	f003 f907 	bl	8019b80 <geometry_msgs__msg__PoseWithCovariance__init>
 8016972:	4604      	mov	r4, r0
 8016974:	b348      	cbz	r0, 80169ca <nav_msgs__msg__Odometry__init+0x82>
 8016976:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 801697a:	4640      	mov	r0, r8
 801697c:	f003 f916 	bl	8019bac <geometry_msgs__msg__TwistWithCovariance__init>
 8016980:	4604      	mov	r4, r0
 8016982:	b9d8      	cbnz	r0, 80169bc <nav_msgs__msg__Odometry__init+0x74>
 8016984:	4628      	mov	r0, r5
 8016986:	f003 f8e3 	bl	8019b50 <std_msgs__msg__Header__fini>
 801698a:	4630      	mov	r0, r6
 801698c:	f003 f874 	bl	8019a78 <rosidl_runtime_c__String__fini>
 8016990:	4638      	mov	r0, r7
 8016992:	f003 f907 	bl	8019ba4 <geometry_msgs__msg__PoseWithCovariance__fini>
 8016996:	4640      	mov	r0, r8
 8016998:	f003 f91a 	bl	8019bd0 <geometry_msgs__msg__TwistWithCovariance__fini>
 801699c:	e00e      	b.n	80169bc <nav_msgs__msg__Odometry__init+0x74>
 801699e:	4628      	mov	r0, r5
 80169a0:	f003 f8d6 	bl	8019b50 <std_msgs__msg__Header__fini>
 80169a4:	f105 0014 	add.w	r0, r5, #20
 80169a8:	f003 f866 	bl	8019a78 <rosidl_runtime_c__String__fini>
 80169ac:	f105 0020 	add.w	r0, r5, #32
 80169b0:	f003 f8f8 	bl	8019ba4 <geometry_msgs__msg__PoseWithCovariance__fini>
 80169b4:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80169b8:	f003 f90a 	bl	8019bd0 <geometry_msgs__msg__TwistWithCovariance__fini>
 80169bc:	4620      	mov	r0, r4
 80169be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c2:	4604      	mov	r4, r0
 80169c4:	4620      	mov	r0, r4
 80169c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ca:	4628      	mov	r0, r5
 80169cc:	f003 f8c0 	bl	8019b50 <std_msgs__msg__Header__fini>
 80169d0:	4630      	mov	r0, r6
 80169d2:	f003 f851 	bl	8019a78 <rosidl_runtime_c__String__fini>
 80169d6:	4638      	mov	r0, r7
 80169d8:	f003 f8e4 	bl	8019ba4 <geometry_msgs__msg__PoseWithCovariance__fini>
 80169dc:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80169e0:	f003 f8f6 	bl	8019bd0 <geometry_msgs__msg__TwistWithCovariance__fini>
 80169e4:	4620      	mov	r0, r4
 80169e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ea:	4628      	mov	r0, r5
 80169ec:	f003 f8b0 	bl	8019b50 <std_msgs__msg__Header__fini>
 80169f0:	4630      	mov	r0, r6
 80169f2:	e7d9      	b.n	80169a8 <nav_msgs__msg__Odometry__init+0x60>

080169f4 <nav_msgs__msg__Odometry__fini>:
 80169f4:	b188      	cbz	r0, 8016a1a <nav_msgs__msg__Odometry__fini+0x26>
 80169f6:	b510      	push	{r4, lr}
 80169f8:	4604      	mov	r4, r0
 80169fa:	f003 f8a9 	bl	8019b50 <std_msgs__msg__Header__fini>
 80169fe:	f104 0014 	add.w	r0, r4, #20
 8016a02:	f003 f839 	bl	8019a78 <rosidl_runtime_c__String__fini>
 8016a06:	f104 0020 	add.w	r0, r4, #32
 8016a0a:	f003 f8cb 	bl	8019ba4 <geometry_msgs__msg__PoseWithCovariance__fini>
 8016a0e:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8016a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a16:	f003 b8db 	b.w	8019bd0 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016a1a:	4770      	bx	lr

08016a1c <rcl_client_get_rmw_handle>:
 8016a1c:	b118      	cbz	r0, 8016a26 <rcl_client_get_rmw_handle+0xa>
 8016a1e:	6800      	ldr	r0, [r0, #0]
 8016a20:	b108      	cbz	r0, 8016a26 <rcl_client_get_rmw_handle+0xa>
 8016a22:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016a26:	4770      	bx	lr

08016a28 <rcl_send_request>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	b082      	sub	sp, #8
 8016a2c:	b1e8      	cbz	r0, 8016a6a <rcl_send_request+0x42>
 8016a2e:	4604      	mov	r4, r0
 8016a30:	6800      	ldr	r0, [r0, #0]
 8016a32:	b1d0      	cbz	r0, 8016a6a <rcl_send_request+0x42>
 8016a34:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016a38:	b1bb      	cbz	r3, 8016a6a <rcl_send_request+0x42>
 8016a3a:	460e      	mov	r6, r1
 8016a3c:	b1d1      	cbz	r1, 8016a74 <rcl_send_request+0x4c>
 8016a3e:	4615      	mov	r5, r2
 8016a40:	b1c2      	cbz	r2, 8016a74 <rcl_send_request+0x4c>
 8016a42:	2105      	movs	r1, #5
 8016a44:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016a48:	f7f9 fc9c 	bl	8010384 <__atomic_load_8>
 8016a4c:	6823      	ldr	r3, [r4, #0]
 8016a4e:	e9c5 0100 	strd	r0, r1, [r5]
 8016a52:	462a      	mov	r2, r5
 8016a54:	4631      	mov	r1, r6
 8016a56:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016a5a:	f002 fcff 	bl	801945c <rmw_send_request>
 8016a5e:	4606      	mov	r6, r0
 8016a60:	b160      	cbz	r0, 8016a7c <rcl_send_request+0x54>
 8016a62:	2601      	movs	r6, #1
 8016a64:	4630      	mov	r0, r6
 8016a66:	b002      	add	sp, #8
 8016a68:	bd70      	pop	{r4, r5, r6, pc}
 8016a6a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8016a6e:	4630      	mov	r0, r6
 8016a70:	b002      	add	sp, #8
 8016a72:	bd70      	pop	{r4, r5, r6, pc}
 8016a74:	260b      	movs	r6, #11
 8016a76:	4630      	mov	r0, r6
 8016a78:	b002      	add	sp, #8
 8016a7a:	bd70      	pop	{r4, r5, r6, pc}
 8016a7c:	6820      	ldr	r0, [r4, #0]
 8016a7e:	2105      	movs	r1, #5
 8016a80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a84:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016a88:	9100      	str	r1, [sp, #0]
 8016a8a:	f7f9 fce7 	bl	801045c <__atomic_exchange_8>
 8016a8e:	4630      	mov	r0, r6
 8016a90:	b002      	add	sp, #8
 8016a92:	bd70      	pop	{r4, r5, r6, pc}
 8016a94:	0000      	movs	r0, r0
	...

08016a98 <rcl_take_response>:
 8016a98:	b570      	push	{r4, r5, r6, lr}
 8016a9a:	468e      	mov	lr, r1
 8016a9c:	460c      	mov	r4, r1
 8016a9e:	4616      	mov	r6, r2
 8016aa0:	4605      	mov	r5, r0
 8016aa2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016aa6:	b08c      	sub	sp, #48	@ 0x30
 8016aa8:	f10d 0c18 	add.w	ip, sp, #24
 8016aac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ab0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016ab4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ab8:	b35d      	cbz	r5, 8016b12 <rcl_take_response+0x7a>
 8016aba:	682b      	ldr	r3, [r5, #0]
 8016abc:	b34b      	cbz	r3, 8016b12 <rcl_take_response+0x7a>
 8016abe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016ac2:	b330      	cbz	r0, 8016b12 <rcl_take_response+0x7a>
 8016ac4:	b346      	cbz	r6, 8016b18 <rcl_take_response+0x80>
 8016ac6:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8016b20 <rcl_take_response+0x88>
 8016aca:	2300      	movs	r3, #0
 8016acc:	f88d 3007 	strb.w	r3, [sp, #7]
 8016ad0:	4632      	mov	r2, r6
 8016ad2:	f10d 0307 	add.w	r3, sp, #7
 8016ad6:	a902      	add	r1, sp, #8
 8016ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016adc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016ae0:	f002 fdc4 	bl	801966c <rmw_take_response>
 8016ae4:	4605      	mov	r5, r0
 8016ae6:	b9c8      	cbnz	r0, 8016b1c <rcl_take_response+0x84>
 8016ae8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016aec:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016af0:	2a00      	cmp	r2, #0
 8016af2:	bf08      	it	eq
 8016af4:	461d      	moveq	r5, r3
 8016af6:	f10d 0e18 	add.w	lr, sp, #24
 8016afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016afe:	46a4      	mov	ip, r4
 8016b00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b04:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016b08:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b0c:	4628      	mov	r0, r5
 8016b0e:	b00c      	add	sp, #48	@ 0x30
 8016b10:	bd70      	pop	{r4, r5, r6, pc}
 8016b12:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8016b16:	e7ee      	b.n	8016af6 <rcl_take_response+0x5e>
 8016b18:	250b      	movs	r5, #11
 8016b1a:	e7ec      	b.n	8016af6 <rcl_take_response+0x5e>
 8016b1c:	2501      	movs	r5, #1
 8016b1e:	e7ea      	b.n	8016af6 <rcl_take_response+0x5e>
	...

08016b28 <rcl_client_is_valid>:
 8016b28:	b130      	cbz	r0, 8016b38 <rcl_client_is_valid+0x10>
 8016b2a:	6800      	ldr	r0, [r0, #0]
 8016b2c:	b120      	cbz	r0, 8016b38 <rcl_client_is_valid+0x10>
 8016b2e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016b32:	3800      	subs	r0, #0
 8016b34:	bf18      	it	ne
 8016b36:	2001      	movne	r0, #1
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop

08016b3c <rcl_convert_rmw_ret_to_rcl_ret>:
 8016b3c:	280b      	cmp	r0, #11
 8016b3e:	dc0d      	bgt.n	8016b5c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016b40:	2800      	cmp	r0, #0
 8016b42:	db09      	blt.n	8016b58 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016b44:	280b      	cmp	r0, #11
 8016b46:	d807      	bhi.n	8016b58 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016b48:	e8df f000 	tbb	[pc, r0]
 8016b4c:	07060607 	.word	0x07060607
 8016b50:	06060606 	.word	0x06060606
 8016b54:	07070606 	.word	0x07070606
 8016b58:	2001      	movs	r0, #1
 8016b5a:	4770      	bx	lr
 8016b5c:	28cb      	cmp	r0, #203	@ 0xcb
 8016b5e:	bf18      	it	ne
 8016b60:	2001      	movne	r0, #1
 8016b62:	4770      	bx	lr

08016b64 <rcl_get_zero_initialized_guard_condition>:
 8016b64:	4a03      	ldr	r2, [pc, #12]	@ (8016b74 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016b66:	4603      	mov	r3, r0
 8016b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b6c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b70:	4618      	mov	r0, r3
 8016b72:	4770      	bx	lr
 8016b74:	0801e2a4 	.word	0x0801e2a4

08016b78 <rcl_guard_condition_init>:
 8016b78:	b082      	sub	sp, #8
 8016b7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b7c:	b087      	sub	sp, #28
 8016b7e:	ac0c      	add	r4, sp, #48	@ 0x30
 8016b80:	e884 000c 	stmia.w	r4, {r2, r3}
 8016b84:	46a6      	mov	lr, r4
 8016b86:	460d      	mov	r5, r1
 8016b88:	4604      	mov	r4, r0
 8016b8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b8e:	f10d 0c04 	add.w	ip, sp, #4
 8016b92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b96:	f8de 3000 	ldr.w	r3, [lr]
 8016b9a:	f8cc 3000 	str.w	r3, [ip]
 8016b9e:	a801      	add	r0, sp, #4
 8016ba0:	f7f9 fbe2 	bl	8010368 <rcutils_allocator_is_valid>
 8016ba4:	b338      	cbz	r0, 8016bf6 <rcl_guard_condition_init+0x7e>
 8016ba6:	b334      	cbz	r4, 8016bf6 <rcl_guard_condition_init+0x7e>
 8016ba8:	6866      	ldr	r6, [r4, #4]
 8016baa:	b9ee      	cbnz	r6, 8016be8 <rcl_guard_condition_init+0x70>
 8016bac:	b31d      	cbz	r5, 8016bf6 <rcl_guard_condition_init+0x7e>
 8016bae:	4628      	mov	r0, r5
 8016bb0:	f7f7 fb44 	bl	800e23c <rcl_context_is_valid>
 8016bb4:	b308      	cbz	r0, 8016bfa <rcl_guard_condition_init+0x82>
 8016bb6:	9b01      	ldr	r3, [sp, #4]
 8016bb8:	9905      	ldr	r1, [sp, #20]
 8016bba:	201c      	movs	r0, #28
 8016bbc:	4798      	blx	r3
 8016bbe:	4607      	mov	r7, r0
 8016bc0:	6060      	str	r0, [r4, #4]
 8016bc2:	b310      	cbz	r0, 8016c0a <rcl_guard_condition_init+0x92>
 8016bc4:	6828      	ldr	r0, [r5, #0]
 8016bc6:	3028      	adds	r0, #40	@ 0x28
 8016bc8:	f002 fbae 	bl	8019328 <rmw_create_guard_condition>
 8016bcc:	6038      	str	r0, [r7, #0]
 8016bce:	6860      	ldr	r0, [r4, #4]
 8016bd0:	6805      	ldr	r5, [r0, #0]
 8016bd2:	b1a5      	cbz	r5, 8016bfe <rcl_guard_condition_init+0x86>
 8016bd4:	2301      	movs	r3, #1
 8016bd6:	ac01      	add	r4, sp, #4
 8016bd8:	7103      	strb	r3, [r0, #4]
 8016bda:	f100 0708 	add.w	r7, r0, #8
 8016bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016be0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	603b      	str	r3, [r7, #0]
 8016be6:	e000      	b.n	8016bea <rcl_guard_condition_init+0x72>
 8016be8:	2664      	movs	r6, #100	@ 0x64
 8016bea:	4630      	mov	r0, r6
 8016bec:	b007      	add	sp, #28
 8016bee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016bf2:	b002      	add	sp, #8
 8016bf4:	4770      	bx	lr
 8016bf6:	260b      	movs	r6, #11
 8016bf8:	e7f7      	b.n	8016bea <rcl_guard_condition_init+0x72>
 8016bfa:	2665      	movs	r6, #101	@ 0x65
 8016bfc:	e7f5      	b.n	8016bea <rcl_guard_condition_init+0x72>
 8016bfe:	9b02      	ldr	r3, [sp, #8]
 8016c00:	9905      	ldr	r1, [sp, #20]
 8016c02:	4798      	blx	r3
 8016c04:	2601      	movs	r6, #1
 8016c06:	6065      	str	r5, [r4, #4]
 8016c08:	e7ef      	b.n	8016bea <rcl_guard_condition_init+0x72>
 8016c0a:	260a      	movs	r6, #10
 8016c0c:	e7ed      	b.n	8016bea <rcl_guard_condition_init+0x72>
 8016c0e:	bf00      	nop

08016c10 <rcl_guard_condition_init_from_rmw>:
 8016c10:	b082      	sub	sp, #8
 8016c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c16:	b086      	sub	sp, #24
 8016c18:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016c1c:	4604      	mov	r4, r0
 8016c1e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016c22:	460e      	mov	r6, r1
 8016c24:	4617      	mov	r7, r2
 8016c26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c2a:	f10d 0e04 	add.w	lr, sp, #4
 8016c2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c32:	f8dc 3000 	ldr.w	r3, [ip]
 8016c36:	f8ce 3000 	str.w	r3, [lr]
 8016c3a:	a801      	add	r0, sp, #4
 8016c3c:	f7f9 fb94 	bl	8010368 <rcutils_allocator_is_valid>
 8016c40:	b350      	cbz	r0, 8016c98 <rcl_guard_condition_init_from_rmw+0x88>
 8016c42:	b34c      	cbz	r4, 8016c98 <rcl_guard_condition_init_from_rmw+0x88>
 8016c44:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016c48:	f1b8 0f00 	cmp.w	r8, #0
 8016c4c:	d11e      	bne.n	8016c8c <rcl_guard_condition_init_from_rmw+0x7c>
 8016c4e:	b31f      	cbz	r7, 8016c98 <rcl_guard_condition_init_from_rmw+0x88>
 8016c50:	4638      	mov	r0, r7
 8016c52:	f7f7 faf3 	bl	800e23c <rcl_context_is_valid>
 8016c56:	b328      	cbz	r0, 8016ca4 <rcl_guard_condition_init_from_rmw+0x94>
 8016c58:	9b01      	ldr	r3, [sp, #4]
 8016c5a:	9905      	ldr	r1, [sp, #20]
 8016c5c:	201c      	movs	r0, #28
 8016c5e:	4798      	blx	r3
 8016c60:	4605      	mov	r5, r0
 8016c62:	6060      	str	r0, [r4, #4]
 8016c64:	b358      	cbz	r0, 8016cbe <rcl_guard_condition_init_from_rmw+0xae>
 8016c66:	b1fe      	cbz	r6, 8016ca8 <rcl_guard_condition_init_from_rmw+0x98>
 8016c68:	6006      	str	r6, [r0, #0]
 8016c6a:	f880 8004 	strb.w	r8, [r0, #4]
 8016c6e:	ac01      	add	r4, sp, #4
 8016c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c72:	f105 0c08 	add.w	ip, r5, #8
 8016c76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c7a:	6823      	ldr	r3, [r4, #0]
 8016c7c:	f8cc 3000 	str.w	r3, [ip]
 8016c80:	2000      	movs	r0, #0
 8016c82:	b006      	add	sp, #24
 8016c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c88:	b002      	add	sp, #8
 8016c8a:	4770      	bx	lr
 8016c8c:	2064      	movs	r0, #100	@ 0x64
 8016c8e:	b006      	add	sp, #24
 8016c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c94:	b002      	add	sp, #8
 8016c96:	4770      	bx	lr
 8016c98:	200b      	movs	r0, #11
 8016c9a:	b006      	add	sp, #24
 8016c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca0:	b002      	add	sp, #8
 8016ca2:	4770      	bx	lr
 8016ca4:	2065      	movs	r0, #101	@ 0x65
 8016ca6:	e7f2      	b.n	8016c8e <rcl_guard_condition_init_from_rmw+0x7e>
 8016ca8:	6838      	ldr	r0, [r7, #0]
 8016caa:	3028      	adds	r0, #40	@ 0x28
 8016cac:	f002 fb3c 	bl	8019328 <rmw_create_guard_condition>
 8016cb0:	6028      	str	r0, [r5, #0]
 8016cb2:	6865      	ldr	r5, [r4, #4]
 8016cb4:	682e      	ldr	r6, [r5, #0]
 8016cb6:	b126      	cbz	r6, 8016cc2 <rcl_guard_condition_init_from_rmw+0xb2>
 8016cb8:	2301      	movs	r3, #1
 8016cba:	712b      	strb	r3, [r5, #4]
 8016cbc:	e7d7      	b.n	8016c6e <rcl_guard_condition_init_from_rmw+0x5e>
 8016cbe:	200a      	movs	r0, #10
 8016cc0:	e7e5      	b.n	8016c8e <rcl_guard_condition_init_from_rmw+0x7e>
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	9b02      	ldr	r3, [sp, #8]
 8016cc6:	9905      	ldr	r1, [sp, #20]
 8016cc8:	4798      	blx	r3
 8016cca:	6066      	str	r6, [r4, #4]
 8016ccc:	2001      	movs	r0, #1
 8016cce:	e7de      	b.n	8016c8e <rcl_guard_condition_init_from_rmw+0x7e>

08016cd0 <rcl_guard_condition_fini>:
 8016cd0:	b570      	push	{r4, r5, r6, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	b1f0      	cbz	r0, 8016d14 <rcl_guard_condition_fini+0x44>
 8016cd6:	6843      	ldr	r3, [r0, #4]
 8016cd8:	4604      	mov	r4, r0
 8016cda:	b163      	cbz	r3, 8016cf6 <rcl_guard_condition_fini+0x26>
 8016cdc:	6818      	ldr	r0, [r3, #0]
 8016cde:	68de      	ldr	r6, [r3, #12]
 8016ce0:	6999      	ldr	r1, [r3, #24]
 8016ce2:	b160      	cbz	r0, 8016cfe <rcl_guard_condition_fini+0x2e>
 8016ce4:	791d      	ldrb	r5, [r3, #4]
 8016ce6:	b965      	cbnz	r5, 8016d02 <rcl_guard_condition_fini+0x32>
 8016ce8:	4618      	mov	r0, r3
 8016cea:	47b0      	blx	r6
 8016cec:	2300      	movs	r3, #0
 8016cee:	4628      	mov	r0, r5
 8016cf0:	6063      	str	r3, [r4, #4]
 8016cf2:	b002      	add	sp, #8
 8016cf4:	bd70      	pop	{r4, r5, r6, pc}
 8016cf6:	461d      	mov	r5, r3
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	b002      	add	sp, #8
 8016cfc:	bd70      	pop	{r4, r5, r6, pc}
 8016cfe:	4605      	mov	r5, r0
 8016d00:	e7f2      	b.n	8016ce8 <rcl_guard_condition_fini+0x18>
 8016d02:	9101      	str	r1, [sp, #4]
 8016d04:	f002 fb24 	bl	8019350 <rmw_destroy_guard_condition>
 8016d08:	1e05      	subs	r5, r0, #0
 8016d0a:	6863      	ldr	r3, [r4, #4]
 8016d0c:	9901      	ldr	r1, [sp, #4]
 8016d0e:	bf18      	it	ne
 8016d10:	2501      	movne	r5, #1
 8016d12:	e7e9      	b.n	8016ce8 <rcl_guard_condition_fini+0x18>
 8016d14:	250b      	movs	r5, #11
 8016d16:	4628      	mov	r0, r5
 8016d18:	b002      	add	sp, #8
 8016d1a:	bd70      	pop	{r4, r5, r6, pc}

08016d1c <rcl_guard_condition_get_default_options>:
 8016d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d1e:	b087      	sub	sp, #28
 8016d20:	4606      	mov	r6, r0
 8016d22:	4668      	mov	r0, sp
 8016d24:	f7f9 fb12 	bl	801034c <rcutils_get_default_allocator>
 8016d28:	4b09      	ldr	r3, [pc, #36]	@ (8016d50 <rcl_guard_condition_get_default_options+0x34>)
 8016d2a:	46ee      	mov	lr, sp
 8016d2c:	469c      	mov	ip, r3
 8016d2e:	461d      	mov	r5, r3
 8016d30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d3a:	4634      	mov	r4, r6
 8016d3c:	f8de 7000 	ldr.w	r7, [lr]
 8016d40:	f8cc 7000 	str.w	r7, [ip]
 8016d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d46:	4630      	mov	r0, r6
 8016d48:	6027      	str	r7, [r4, #0]
 8016d4a:	b007      	add	sp, #28
 8016d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	20011ae0 	.word	0x20011ae0

08016d54 <rcl_trigger_guard_condition>:
 8016d54:	b148      	cbz	r0, 8016d6a <rcl_trigger_guard_condition+0x16>
 8016d56:	b508      	push	{r3, lr}
 8016d58:	6843      	ldr	r3, [r0, #4]
 8016d5a:	b143      	cbz	r3, 8016d6e <rcl_trigger_guard_condition+0x1a>
 8016d5c:	6818      	ldr	r0, [r3, #0]
 8016d5e:	f002 fccf 	bl	8019700 <rmw_trigger_guard_condition>
 8016d62:	3800      	subs	r0, #0
 8016d64:	bf18      	it	ne
 8016d66:	2001      	movne	r0, #1
 8016d68:	bd08      	pop	{r3, pc}
 8016d6a:	200b      	movs	r0, #11
 8016d6c:	4770      	bx	lr
 8016d6e:	200b      	movs	r0, #11
 8016d70:	bd08      	pop	{r3, pc}
 8016d72:	bf00      	nop

08016d74 <rcl_guard_condition_get_rmw_handle>:
 8016d74:	b110      	cbz	r0, 8016d7c <rcl_guard_condition_get_rmw_handle+0x8>
 8016d76:	6840      	ldr	r0, [r0, #4]
 8016d78:	b100      	cbz	r0, 8016d7c <rcl_guard_condition_get_rmw_handle+0x8>
 8016d7a:	6800      	ldr	r0, [r0, #0]
 8016d7c:	4770      	bx	lr
 8016d7e:	bf00      	nop

08016d80 <rcl_init>:
 8016d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d84:	1e05      	subs	r5, r0, #0
 8016d86:	b09c      	sub	sp, #112	@ 0x70
 8016d88:	460e      	mov	r6, r1
 8016d8a:	4690      	mov	r8, r2
 8016d8c:	461f      	mov	r7, r3
 8016d8e:	f340 8099 	ble.w	8016ec4 <rcl_init+0x144>
 8016d92:	2900      	cmp	r1, #0
 8016d94:	f000 8099 	beq.w	8016eca <rcl_init+0x14a>
 8016d98:	f1a1 0e04 	sub.w	lr, r1, #4
 8016d9c:	f04f 0c00 	mov.w	ip, #0
 8016da0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8016da4:	f10c 0c01 	add.w	ip, ip, #1
 8016da8:	2c00      	cmp	r4, #0
 8016daa:	f000 808e 	beq.w	8016eca <rcl_init+0x14a>
 8016dae:	4565      	cmp	r5, ip
 8016db0:	d1f6      	bne.n	8016da0 <rcl_init+0x20>
 8016db2:	f1b8 0f00 	cmp.w	r8, #0
 8016db6:	f000 8088 	beq.w	8016eca <rcl_init+0x14a>
 8016dba:	f8d8 4000 	ldr.w	r4, [r8]
 8016dbe:	2c00      	cmp	r4, #0
 8016dc0:	f000 8083 	beq.w	8016eca <rcl_init+0x14a>
 8016dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dc6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8016dca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016dce:	6823      	ldr	r3, [r4, #0]
 8016dd0:	f8cc 3000 	str.w	r3, [ip]
 8016dd4:	a817      	add	r0, sp, #92	@ 0x5c
 8016dd6:	f7f9 fac7 	bl	8010368 <rcutils_allocator_is_valid>
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	d075      	beq.n	8016eca <rcl_init+0x14a>
 8016dde:	2f00      	cmp	r7, #0
 8016de0:	d073      	beq.n	8016eca <rcl_init+0x14a>
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d175      	bne.n	8016ed4 <rcl_init+0x154>
 8016de8:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8016dec:	2178      	movs	r1, #120	@ 0x78
 8016dee:	2001      	movs	r0, #1
 8016df0:	4798      	blx	r3
 8016df2:	4604      	mov	r4, r0
 8016df4:	6038      	str	r0, [r7, #0]
 8016df6:	2800      	cmp	r0, #0
 8016df8:	f000 80a0 	beq.w	8016f3c <rcl_init+0x1bc>
 8016dfc:	a802      	add	r0, sp, #8
 8016dfe:	f002 f833 	bl	8018e68 <rmw_get_zero_initialized_context>
 8016e02:	a902      	add	r1, sp, #8
 8016e04:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016e08:	2250      	movs	r2, #80	@ 0x50
 8016e0a:	ac17      	add	r4, sp, #92	@ 0x5c
 8016e0c:	f005 fc43 	bl	801c696 <memcpy>
 8016e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e12:	f8d7 e000 	ldr.w	lr, [r7]
 8016e16:	46f4      	mov	ip, lr
 8016e18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e1c:	6823      	ldr	r3, [r4, #0]
 8016e1e:	f8cc 3000 	str.w	r3, [ip]
 8016e22:	f10e 0114 	add.w	r1, lr, #20
 8016e26:	4640      	mov	r0, r8
 8016e28:	f7f7 fb1a 	bl	800e460 <rcl_init_options_copy>
 8016e2c:	4604      	mov	r4, r0
 8016e2e:	2800      	cmp	r0, #0
 8016e30:	d144      	bne.n	8016ebc <rcl_init+0x13c>
 8016e32:	f8d7 9000 	ldr.w	r9, [r7]
 8016e36:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016e3a:	f8c9 0020 	str.w	r0, [r9, #32]
 8016e3e:	f8c9 5018 	str.w	r5, [r9, #24]
 8016e42:	f8c9 801c 	str.w	r8, [r9, #28]
 8016e46:	2d00      	cmp	r5, #0
 8016e48:	d04b      	beq.n	8016ee2 <rcl_init+0x162>
 8016e4a:	2e00      	cmp	r6, #0
 8016e4c:	d049      	beq.n	8016ee2 <rcl_init+0x162>
 8016e4e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8016e52:	2104      	movs	r1, #4
 8016e54:	4628      	mov	r0, r5
 8016e56:	4798      	blx	r3
 8016e58:	f8c9 0020 	str.w	r0, [r9, #32]
 8016e5c:	f8d7 9000 	ldr.w	r9, [r7]
 8016e60:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016e64:	46ca      	mov	sl, r9
 8016e66:	b343      	cbz	r3, 8016eba <rcl_init+0x13a>
 8016e68:	2d01      	cmp	r5, #1
 8016e6a:	f178 0300 	sbcs.w	r3, r8, #0
 8016e6e:	db38      	blt.n	8016ee2 <rcl_init+0x162>
 8016e70:	2400      	movs	r4, #0
 8016e72:	3e04      	subs	r6, #4
 8016e74:	46a1      	mov	r9, r4
 8016e76:	e00b      	b.n	8016e90 <rcl_init+0x110>
 8016e78:	6831      	ldr	r1, [r6, #0]
 8016e7a:	f005 fc0c 	bl	801c696 <memcpy>
 8016e7e:	3401      	adds	r4, #1
 8016e80:	f149 0900 	adc.w	r9, r9, #0
 8016e84:	45c8      	cmp	r8, r9
 8016e86:	bf08      	it	eq
 8016e88:	42a5      	cmpeq	r5, r4
 8016e8a:	d028      	beq.n	8016ede <rcl_init+0x15e>
 8016e8c:	f8d7 a000 	ldr.w	sl, [r7]
 8016e90:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016e94:	f7e9 f9c6 	bl	8000224 <strlen>
 8016e98:	1c42      	adds	r2, r0, #1
 8016e9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016e9c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016e9e:	f8da a020 	ldr.w	sl, [sl, #32]
 8016ea2:	9201      	str	r2, [sp, #4]
 8016ea4:	4610      	mov	r0, r2
 8016ea6:	4798      	blx	r3
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8016eae:	6a1b      	ldr	r3, [r3, #32]
 8016eb0:	9a01      	ldr	r2, [sp, #4]
 8016eb2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016eb6:	2800      	cmp	r0, #0
 8016eb8:	d1de      	bne.n	8016e78 <rcl_init+0xf8>
 8016eba:	240a      	movs	r4, #10
 8016ebc:	4638      	mov	r0, r7
 8016ebe:	f7f7 f9c9 	bl	800e254 <__cleanup_context>
 8016ec2:	e003      	b.n	8016ecc <rcl_init+0x14c>
 8016ec4:	2900      	cmp	r1, #0
 8016ec6:	f43f af74 	beq.w	8016db2 <rcl_init+0x32>
 8016eca:	240b      	movs	r4, #11
 8016ecc:	4620      	mov	r0, r4
 8016ece:	b01c      	add	sp, #112	@ 0x70
 8016ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ed4:	2464      	movs	r4, #100	@ 0x64
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	b01c      	add	sp, #112	@ 0x70
 8016eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ede:	f8d7 9000 	ldr.w	r9, [r7]
 8016ee2:	491d      	ldr	r1, [pc, #116]	@ (8016f58 <rcl_init+0x1d8>)
 8016ee4:	680b      	ldr	r3, [r1, #0]
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	d023      	beq.n	8016f32 <rcl_init+0x1b2>
 8016eea:	600b      	str	r3, [r1, #0]
 8016eec:	461a      	mov	r2, r3
 8016eee:	2400      	movs	r4, #0
 8016ef0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016ef4:	607b      	str	r3, [r7, #4]
 8016ef6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016ef8:	6182      	str	r2, [r0, #24]
 8016efa:	3301      	adds	r3, #1
 8016efc:	61c4      	str	r4, [r0, #28]
 8016efe:	d01f      	beq.n	8016f40 <rcl_init+0x1c0>
 8016f00:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8016f04:	b94b      	cbnz	r3, 8016f1a <rcl_init+0x19a>
 8016f06:	3030      	adds	r0, #48	@ 0x30
 8016f08:	f000 f846 	bl	8016f98 <rcl_get_localhost_only>
 8016f0c:	4604      	mov	r4, r0
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	d1d4      	bne.n	8016ebc <rcl_init+0x13c>
 8016f12:	f8d7 9000 	ldr.w	r9, [r7]
 8016f16:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016f1a:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8016f1e:	3018      	adds	r0, #24
 8016f20:	f7f9 ff52 	bl	8010dc8 <rmw_init>
 8016f24:	4604      	mov	r4, r0
 8016f26:	2800      	cmp	r0, #0
 8016f28:	d0d0      	beq.n	8016ecc <rcl_init+0x14c>
 8016f2a:	f7ff fe07 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 8016f2e:	4604      	mov	r4, r0
 8016f30:	e7c4      	b.n	8016ebc <rcl_init+0x13c>
 8016f32:	2201      	movs	r2, #1
 8016f34:	461c      	mov	r4, r3
 8016f36:	600a      	str	r2, [r1, #0]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	e7d9      	b.n	8016ef0 <rcl_init+0x170>
 8016f3c:	240a      	movs	r4, #10
 8016f3e:	e7c5      	b.n	8016ecc <rcl_init+0x14c>
 8016f40:	3024      	adds	r0, #36	@ 0x24
 8016f42:	f003 fd23 	bl	801a98c <rcl_get_default_domain_id>
 8016f46:	4604      	mov	r4, r0
 8016f48:	2800      	cmp	r0, #0
 8016f4a:	d1b7      	bne.n	8016ebc <rcl_init+0x13c>
 8016f4c:	f8d7 9000 	ldr.w	r9, [r7]
 8016f50:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016f54:	e7d4      	b.n	8016f00 <rcl_init+0x180>
 8016f56:	bf00      	nop
 8016f58:	20011af4 	.word	0x20011af4

08016f5c <rcl_shutdown>:
 8016f5c:	b1a8      	cbz	r0, 8016f8a <rcl_shutdown+0x2e>
 8016f5e:	6803      	ldr	r3, [r0, #0]
 8016f60:	b510      	push	{r4, lr}
 8016f62:	4604      	mov	r4, r0
 8016f64:	b173      	cbz	r3, 8016f84 <rcl_shutdown+0x28>
 8016f66:	f7f7 f969 	bl	800e23c <rcl_context_is_valid>
 8016f6a:	b140      	cbz	r0, 8016f7e <rcl_shutdown+0x22>
 8016f6c:	6820      	ldr	r0, [r4, #0]
 8016f6e:	3028      	adds	r0, #40	@ 0x28
 8016f70:	f7fa f860 	bl	8011034 <rmw_shutdown>
 8016f74:	4603      	mov	r3, r0
 8016f76:	b958      	cbnz	r0, 8016f90 <rcl_shutdown+0x34>
 8016f78:	6060      	str	r0, [r4, #4]
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	bd10      	pop	{r4, pc}
 8016f7e:	236a      	movs	r3, #106	@ 0x6a
 8016f80:	4618      	mov	r0, r3
 8016f82:	bd10      	pop	{r4, pc}
 8016f84:	230b      	movs	r3, #11
 8016f86:	4618      	mov	r0, r3
 8016f88:	bd10      	pop	{r4, pc}
 8016f8a:	230b      	movs	r3, #11
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	4770      	bx	lr
 8016f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f94:	f7ff bdd2 	b.w	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>

08016f98 <rcl_get_localhost_only>:
 8016f98:	b510      	push	{r4, lr}
 8016f9a:	b082      	sub	sp, #8
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	9301      	str	r3, [sp, #4]
 8016fa0:	b1b8      	cbz	r0, 8016fd2 <rcl_get_localhost_only+0x3a>
 8016fa2:	4604      	mov	r4, r0
 8016fa4:	a901      	add	r1, sp, #4
 8016fa6:	480c      	ldr	r0, [pc, #48]	@ (8016fd8 <rcl_get_localhost_only+0x40>)
 8016fa8:	f7f9 fa90 	bl	80104cc <rcutils_get_env>
 8016fac:	b110      	cbz	r0, 8016fb4 <rcl_get_localhost_only+0x1c>
 8016fae:	2001      	movs	r0, #1
 8016fb0:	b002      	add	sp, #8
 8016fb2:	bd10      	pop	{r4, pc}
 8016fb4:	9b01      	ldr	r3, [sp, #4]
 8016fb6:	b113      	cbz	r3, 8016fbe <rcl_get_localhost_only+0x26>
 8016fb8:	781a      	ldrb	r2, [r3, #0]
 8016fba:	2a31      	cmp	r2, #49	@ 0x31
 8016fbc:	d004      	beq.n	8016fc8 <rcl_get_localhost_only+0x30>
 8016fbe:	2302      	movs	r3, #2
 8016fc0:	2000      	movs	r0, #0
 8016fc2:	7023      	strb	r3, [r4, #0]
 8016fc4:	b002      	add	sp, #8
 8016fc6:	bd10      	pop	{r4, pc}
 8016fc8:	785b      	ldrb	r3, [r3, #1]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1f7      	bne.n	8016fbe <rcl_get_localhost_only+0x26>
 8016fce:	2301      	movs	r3, #1
 8016fd0:	e7f6      	b.n	8016fc0 <rcl_get_localhost_only+0x28>
 8016fd2:	200b      	movs	r0, #11
 8016fd4:	b002      	add	sp, #8
 8016fd6:	bd10      	pop	{r4, pc}
 8016fd8:	0801db94 	.word	0x0801db94

08016fdc <rcl_node_resolve_name>:
 8016fdc:	b082      	sub	sp, #8
 8016fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fe2:	b091      	sub	sp, #68	@ 0x44
 8016fe4:	ac1a      	add	r4, sp, #104	@ 0x68
 8016fe6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016fea:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d03b      	beq.n	801706a <rcl_node_resolve_name+0x8e>
 8016ff2:	460c      	mov	r4, r1
 8016ff4:	4605      	mov	r5, r0
 8016ff6:	f7f7 fc43 	bl	800e880 <rcl_node_get_options>
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d037      	beq.n	801706e <rcl_node_resolve_name+0x92>
 8016ffe:	4628      	mov	r0, r5
 8017000:	f7f7 fc2e 	bl	800e860 <rcl_node_get_name>
 8017004:	4606      	mov	r6, r0
 8017006:	4628      	mov	r0, r5
 8017008:	f7f7 fc32 	bl	800e870 <rcl_node_get_namespace>
 801700c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8017010:	4681      	mov	r9, r0
 8017012:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017016:	ad0b      	add	r5, sp, #44	@ 0x2c
 8017018:	46ac      	mov	ip, r5
 801701a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801701e:	f8de 3000 	ldr.w	r3, [lr]
 8017022:	f8cc 3000 	str.w	r3, [ip]
 8017026:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8017028:	b1fb      	cbz	r3, 801706a <rcl_node_resolve_name+0x8e>
 801702a:	468a      	mov	sl, r1
 801702c:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8017030:	f001 fdee 	bl	8018c10 <rcutils_get_zero_initialized_string_map>
 8017034:	ab10      	add	r3, sp, #64	@ 0x40
 8017036:	9008      	str	r0, [sp, #32]
 8017038:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801703c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017040:	2100      	movs	r1, #0
 8017042:	e895 000c 	ldmia.w	r5, {r2, r3}
 8017046:	a808      	add	r0, sp, #32
 8017048:	f001 fe5a 	bl	8018d00 <rcutils_string_map_init>
 801704c:	4607      	mov	r7, r0
 801704e:	b180      	cbz	r0, 8017072 <rcl_node_resolve_name+0x96>
 8017050:	f7f9 fa54 	bl	80104fc <rcutils_get_error_string>
 8017054:	f7f9 fa68 	bl	8010528 <rcutils_reset_error>
 8017058:	2f0a      	cmp	r7, #10
 801705a:	bf18      	it	ne
 801705c:	2701      	movne	r7, #1
 801705e:	4638      	mov	r0, r7
 8017060:	b011      	add	sp, #68	@ 0x44
 8017062:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017066:	b002      	add	sp, #8
 8017068:	4770      	bx	lr
 801706a:	270b      	movs	r7, #11
 801706c:	e7f7      	b.n	801705e <rcl_node_resolve_name+0x82>
 801706e:	2701      	movs	r7, #1
 8017070:	e7f5      	b.n	801705e <rcl_node_resolve_name+0x82>
 8017072:	9009      	str	r0, [sp, #36]	@ 0x24
 8017074:	9007      	str	r0, [sp, #28]
 8017076:	a808      	add	r0, sp, #32
 8017078:	f003 fe1a 	bl	801acb0 <rcl_get_default_topic_name_substitutions>
 801707c:	4607      	mov	r7, r0
 801707e:	b1a8      	cbz	r0, 80170ac <rcl_node_resolve_name+0xd0>
 8017080:	280a      	cmp	r0, #10
 8017082:	9c07      	ldr	r4, [sp, #28]
 8017084:	d000      	beq.n	8017088 <rcl_node_resolve_name+0xac>
 8017086:	2701      	movs	r7, #1
 8017088:	a808      	add	r0, sp, #32
 801708a:	f001 fe79 	bl	8018d80 <rcutils_string_map_fini>
 801708e:	2800      	cmp	r0, #0
 8017090:	d13d      	bne.n	801710e <rcl_node_resolve_name+0x132>
 8017092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017094:	4659      	mov	r1, fp
 8017096:	47d0      	blx	sl
 8017098:	4659      	mov	r1, fp
 801709a:	4620      	mov	r0, r4
 801709c:	47d0      	blx	sl
 801709e:	f1b8 0f00 	cmp.w	r8, #0
 80170a2:	d0dc      	beq.n	801705e <rcl_node_resolve_name+0x82>
 80170a4:	2f67      	cmp	r7, #103	@ 0x67
 80170a6:	bf08      	it	eq
 80170a8:	2768      	moveq	r7, #104	@ 0x68
 80170aa:	e7d8      	b.n	801705e <rcl_node_resolve_name+0x82>
 80170ac:	ab09      	add	r3, sp, #36	@ 0x24
 80170ae:	9305      	str	r3, [sp, #20]
 80170b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80170b2:	46ec      	mov	ip, sp
 80170b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	f8cc 3000 	str.w	r3, [ip]
 80170be:	464a      	mov	r2, r9
 80170c0:	4631      	mov	r1, r6
 80170c2:	4620      	mov	r0, r4
 80170c4:	ab08      	add	r3, sp, #32
 80170c6:	f003 fc95 	bl	801a9f4 <rcl_expand_topic_name>
 80170ca:	4607      	mov	r7, r0
 80170cc:	b9b8      	cbnz	r0, 80170fe <rcl_node_resolve_name+0x122>
 80170ce:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80170d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80170d2:	4602      	mov	r2, r0
 80170d4:	a90a      	add	r1, sp, #40	@ 0x28
 80170d6:	4620      	mov	r0, r4
 80170d8:	f001 ff5a 	bl	8018f90 <rmw_validate_full_topic_name>
 80170dc:	b988      	cbnz	r0, 8017102 <rcl_node_resolve_name+0x126>
 80170de:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80170e0:	b9d5      	cbnz	r5, 8017118 <rcl_node_resolve_name+0x13c>
 80170e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80170e4:	a808      	add	r0, sp, #32
 80170e6:	601c      	str	r4, [r3, #0]
 80170e8:	f001 fe4a 	bl	8018d80 <rcutils_string_map_fini>
 80170ec:	4607      	mov	r7, r0
 80170ee:	b1a8      	cbz	r0, 801711c <rcl_node_resolve_name+0x140>
 80170f0:	f7f9 fa04 	bl	80104fc <rcutils_get_error_string>
 80170f4:	462c      	mov	r4, r5
 80170f6:	f7f9 fa17 	bl	8010528 <rcutils_reset_error>
 80170fa:	2701      	movs	r7, #1
 80170fc:	e7c9      	b.n	8017092 <rcl_node_resolve_name+0xb6>
 80170fe:	9c07      	ldr	r4, [sp, #28]
 8017100:	e7c2      	b.n	8017088 <rcl_node_resolve_name+0xac>
 8017102:	f7f9 f9fb 	bl	80104fc <rcutils_get_error_string>
 8017106:	2701      	movs	r7, #1
 8017108:	f7f9 fa0e 	bl	8010528 <rcutils_reset_error>
 801710c:	e7bc      	b.n	8017088 <rcl_node_resolve_name+0xac>
 801710e:	f7f9 f9f5 	bl	80104fc <rcutils_get_error_string>
 8017112:	f7f9 fa09 	bl	8010528 <rcutils_reset_error>
 8017116:	e7bc      	b.n	8017092 <rcl_node_resolve_name+0xb6>
 8017118:	2767      	movs	r7, #103	@ 0x67
 801711a:	e7b5      	b.n	8017088 <rcl_node_resolve_name+0xac>
 801711c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801711e:	4659      	mov	r1, fp
 8017120:	47d0      	blx	sl
 8017122:	4659      	mov	r1, fp
 8017124:	4638      	mov	r0, r7
 8017126:	47d0      	blx	sl
 8017128:	e799      	b.n	801705e <rcl_node_resolve_name+0x82>
 801712a:	bf00      	nop

0801712c <rcl_service_get_rmw_handle>:
 801712c:	b118      	cbz	r0, 8017136 <rcl_service_get_rmw_handle+0xa>
 801712e:	6800      	ldr	r0, [r0, #0]
 8017130:	b108      	cbz	r0, 8017136 <rcl_service_get_rmw_handle+0xa>
 8017132:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8017136:	4770      	bx	lr

08017138 <rcl_take_request>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	468e      	mov	lr, r1
 801713c:	460c      	mov	r4, r1
 801713e:	4616      	mov	r6, r2
 8017140:	4605      	mov	r5, r0
 8017142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017146:	b08c      	sub	sp, #48	@ 0x30
 8017148:	f10d 0c18 	add.w	ip, sp, #24
 801714c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017150:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017154:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017158:	b30d      	cbz	r5, 801719e <rcl_take_request+0x66>
 801715a:	682b      	ldr	r3, [r5, #0]
 801715c:	b1fb      	cbz	r3, 801719e <rcl_take_request+0x66>
 801715e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8017162:	b1e0      	cbz	r0, 801719e <rcl_take_request+0x66>
 8017164:	b336      	cbz	r6, 80171b4 <rcl_take_request+0x7c>
 8017166:	2300      	movs	r3, #0
 8017168:	f88d 3007 	strb.w	r3, [sp, #7]
 801716c:	4632      	mov	r2, r6
 801716e:	f10d 0307 	add.w	r3, sp, #7
 8017172:	a902      	add	r1, sp, #8
 8017174:	f002 f9c0 	bl	80194f8 <rmw_take_request>
 8017178:	4605      	mov	r5, r0
 801717a:	b198      	cbz	r0, 80171a4 <rcl_take_request+0x6c>
 801717c:	280a      	cmp	r0, #10
 801717e:	bf18      	it	ne
 8017180:	2501      	movne	r5, #1
 8017182:	f10d 0e18 	add.w	lr, sp, #24
 8017186:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801718a:	46a4      	mov	ip, r4
 801718c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017190:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8017194:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017198:	4628      	mov	r0, r5
 801719a:	b00c      	add	sp, #48	@ 0x30
 801719c:	bd70      	pop	{r4, r5, r6, pc}
 801719e:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80171a2:	e7ee      	b.n	8017182 <rcl_take_request+0x4a>
 80171a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80171a8:	f240 2359 	movw	r3, #601	@ 0x259
 80171ac:	2a00      	cmp	r2, #0
 80171ae:	bf08      	it	eq
 80171b0:	461d      	moveq	r5, r3
 80171b2:	e7e6      	b.n	8017182 <rcl_take_request+0x4a>
 80171b4:	250b      	movs	r5, #11
 80171b6:	e7e4      	b.n	8017182 <rcl_take_request+0x4a>

080171b8 <rcl_send_response>:
 80171b8:	b170      	cbz	r0, 80171d8 <rcl_send_response+0x20>
 80171ba:	6800      	ldr	r0, [r0, #0]
 80171bc:	b160      	cbz	r0, 80171d8 <rcl_send_response+0x20>
 80171be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80171c2:	b148      	cbz	r0, 80171d8 <rcl_send_response+0x20>
 80171c4:	b159      	cbz	r1, 80171de <rcl_send_response+0x26>
 80171c6:	b510      	push	{r4, lr}
 80171c8:	b15a      	cbz	r2, 80171e2 <rcl_send_response+0x2a>
 80171ca:	f002 f9f3 	bl	80195b4 <rmw_send_response>
 80171ce:	b110      	cbz	r0, 80171d6 <rcl_send_response+0x1e>
 80171d0:	2802      	cmp	r0, #2
 80171d2:	bf18      	it	ne
 80171d4:	2001      	movne	r0, #1
 80171d6:	bd10      	pop	{r4, pc}
 80171d8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80171dc:	4770      	bx	lr
 80171de:	200b      	movs	r0, #11
 80171e0:	4770      	bx	lr
 80171e2:	200b      	movs	r0, #11
 80171e4:	bd10      	pop	{r4, pc}
 80171e6:	bf00      	nop

080171e8 <rcl_service_is_valid>:
 80171e8:	b130      	cbz	r0, 80171f8 <rcl_service_is_valid+0x10>
 80171ea:	6800      	ldr	r0, [r0, #0]
 80171ec:	b120      	cbz	r0, 80171f8 <rcl_service_is_valid+0x10>
 80171ee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80171f2:	3800      	subs	r0, #0
 80171f4:	bf18      	it	ne
 80171f6:	2001      	movne	r0, #1
 80171f8:	4770      	bx	lr
 80171fa:	bf00      	nop

080171fc <rcl_get_system_time>:
 80171fc:	4608      	mov	r0, r1
 80171fe:	f7f9 bb07 	b.w	8010810 <rcutils_system_time_now>
 8017202:	bf00      	nop

08017204 <rcl_get_steady_time>:
 8017204:	4608      	mov	r0, r1
 8017206:	f7f9 bb2b 	b.w	8010860 <rcutils_steady_time_now>
 801720a:	bf00      	nop

0801720c <rcl_get_ros_time>:
 801720c:	7a03      	ldrb	r3, [r0, #8]
 801720e:	b510      	push	{r4, lr}
 8017210:	460c      	mov	r4, r1
 8017212:	b133      	cbz	r3, 8017222 <rcl_get_ros_time+0x16>
 8017214:	2105      	movs	r1, #5
 8017216:	f7f9 f8b5 	bl	8010384 <__atomic_load_8>
 801721a:	e9c4 0100 	strd	r0, r1, [r4]
 801721e:	2000      	movs	r0, #0
 8017220:	bd10      	pop	{r4, pc}
 8017222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017226:	4608      	mov	r0, r1
 8017228:	f7f9 baf2 	b.w	8010810 <rcutils_system_time_now>

0801722c <rcl_clock_init>:
 801722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801722e:	4605      	mov	r5, r0
 8017230:	4610      	mov	r0, r2
 8017232:	4614      	mov	r4, r2
 8017234:	460e      	mov	r6, r1
 8017236:	f7f9 f897 	bl	8010368 <rcutils_allocator_is_valid>
 801723a:	b128      	cbz	r0, 8017248 <rcl_clock_init+0x1c>
 801723c:	2d03      	cmp	r5, #3
 801723e:	d803      	bhi.n	8017248 <rcl_clock_init+0x1c>
 8017240:	e8df f005 	tbb	[pc, r5]
 8017244:	06532e1d 	.word	0x06532e1d
 8017248:	f04f 0c0b 	mov.w	ip, #11
 801724c:	4660      	mov	r0, ip
 801724e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017250:	2e00      	cmp	r6, #0
 8017252:	d0f9      	beq.n	8017248 <rcl_clock_init+0x1c>
 8017254:	2c00      	cmp	r4, #0
 8017256:	d0f7      	beq.n	8017248 <rcl_clock_init+0x1c>
 8017258:	2300      	movs	r3, #0
 801725a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801725e:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8017314 <rcl_clock_init+0xe8>
 8017262:	6133      	str	r3, [r6, #16]
 8017264:	f106 0514 	add.w	r5, r6, #20
 8017268:	469c      	mov	ip, r3
 801726a:	2703      	movs	r7, #3
 801726c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801726e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017270:	6823      	ldr	r3, [r4, #0]
 8017272:	602b      	str	r3, [r5, #0]
 8017274:	7037      	strb	r7, [r6, #0]
 8017276:	f8c6 e00c 	str.w	lr, [r6, #12]
 801727a:	4660      	mov	r0, ip
 801727c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801727e:	2e00      	cmp	r6, #0
 8017280:	d0e2      	beq.n	8017248 <rcl_clock_init+0x1c>
 8017282:	2300      	movs	r3, #0
 8017284:	7033      	strb	r3, [r6, #0]
 8017286:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801728a:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801728e:	469c      	mov	ip, r3
 8017290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017292:	f106 0514 	add.w	r5, r6, #20
 8017296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017298:	6823      	ldr	r3, [r4, #0]
 801729a:	602b      	str	r3, [r5, #0]
 801729c:	4660      	mov	r0, ip
 801729e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172a0:	2e00      	cmp	r6, #0
 80172a2:	d0d1      	beq.n	8017248 <rcl_clock_init+0x1c>
 80172a4:	2c00      	cmp	r4, #0
 80172a6:	d0cf      	beq.n	8017248 <rcl_clock_init+0x1c>
 80172a8:	2700      	movs	r7, #0
 80172aa:	7037      	strb	r7, [r6, #0]
 80172ac:	46a4      	mov	ip, r4
 80172ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80172b2:	f106 0514 	add.w	r5, r6, #20
 80172b6:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80172ba:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80172be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80172c0:	f8dc 3000 	ldr.w	r3, [ip]
 80172c4:	602b      	str	r3, [r5, #0]
 80172c6:	6921      	ldr	r1, [r4, #16]
 80172c8:	6823      	ldr	r3, [r4, #0]
 80172ca:	2010      	movs	r0, #16
 80172cc:	4798      	blx	r3
 80172ce:	6130      	str	r0, [r6, #16]
 80172d0:	b1d0      	cbz	r0, 8017308 <rcl_clock_init+0xdc>
 80172d2:	2200      	movs	r2, #0
 80172d4:	2300      	movs	r3, #0
 80172d6:	e9c0 2300 	strd	r2, r3, [r0]
 80172da:	2301      	movs	r3, #1
 80172dc:	7207      	strb	r7, [r0, #8]
 80172de:	4a0c      	ldr	r2, [pc, #48]	@ (8017310 <rcl_clock_init+0xe4>)
 80172e0:	7033      	strb	r3, [r6, #0]
 80172e2:	46bc      	mov	ip, r7
 80172e4:	60f2      	str	r2, [r6, #12]
 80172e6:	4660      	mov	r0, ip
 80172e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172ea:	2e00      	cmp	r6, #0
 80172ec:	d0ac      	beq.n	8017248 <rcl_clock_init+0x1c>
 80172ee:	2c00      	cmp	r4, #0
 80172f0:	d0aa      	beq.n	8017248 <rcl_clock_init+0x1c>
 80172f2:	2300      	movs	r3, #0
 80172f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80172f8:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8017318 <rcl_clock_init+0xec>
 80172fc:	6133      	str	r3, [r6, #16]
 80172fe:	f106 0514 	add.w	r5, r6, #20
 8017302:	469c      	mov	ip, r3
 8017304:	2702      	movs	r7, #2
 8017306:	e7b1      	b.n	801726c <rcl_clock_init+0x40>
 8017308:	f04f 0c0a 	mov.w	ip, #10
 801730c:	e79e      	b.n	801724c <rcl_clock_init+0x20>
 801730e:	bf00      	nop
 8017310:	0801720d 	.word	0x0801720d
 8017314:	08017205 	.word	0x08017205
 8017318:	080171fd 	.word	0x080171fd

0801731c <rcl_clock_fini>:
 801731c:	2800      	cmp	r0, #0
 801731e:	d02c      	beq.n	801737a <rcl_clock_fini+0x5e>
 8017320:	b538      	push	{r3, r4, r5, lr}
 8017322:	4604      	mov	r4, r0
 8017324:	3014      	adds	r0, #20
 8017326:	f7f9 f81f 	bl	8010368 <rcutils_allocator_is_valid>
 801732a:	b140      	cbz	r0, 801733e <rcl_clock_fini+0x22>
 801732c:	7823      	ldrb	r3, [r4, #0]
 801732e:	2b02      	cmp	r3, #2
 8017330:	d007      	beq.n	8017342 <rcl_clock_fini+0x26>
 8017332:	2b03      	cmp	r3, #3
 8017334:	d005      	beq.n	8017342 <rcl_clock_fini+0x26>
 8017336:	2b01      	cmp	r3, #1
 8017338:	d00f      	beq.n	801735a <rcl_clock_fini+0x3e>
 801733a:	200b      	movs	r0, #11
 801733c:	bd38      	pop	{r3, r4, r5, pc}
 801733e:	2001      	movs	r0, #1
 8017340:	bd38      	pop	{r3, r4, r5, pc}
 8017342:	68a0      	ldr	r0, [r4, #8]
 8017344:	2800      	cmp	r0, #0
 8017346:	d0f9      	beq.n	801733c <rcl_clock_fini+0x20>
 8017348:	2500      	movs	r5, #0
 801734a:	6860      	ldr	r0, [r4, #4]
 801734c:	69a3      	ldr	r3, [r4, #24]
 801734e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017350:	60a5      	str	r5, [r4, #8]
 8017352:	4798      	blx	r3
 8017354:	6065      	str	r5, [r4, #4]
 8017356:	4628      	mov	r0, r5
 8017358:	bd38      	pop	{r3, r4, r5, pc}
 801735a:	68a3      	ldr	r3, [r4, #8]
 801735c:	b133      	cbz	r3, 801736c <rcl_clock_fini+0x50>
 801735e:	2500      	movs	r5, #0
 8017360:	69a3      	ldr	r3, [r4, #24]
 8017362:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017364:	6860      	ldr	r0, [r4, #4]
 8017366:	60a5      	str	r5, [r4, #8]
 8017368:	4798      	blx	r3
 801736a:	6065      	str	r5, [r4, #4]
 801736c:	6920      	ldr	r0, [r4, #16]
 801736e:	69a3      	ldr	r3, [r4, #24]
 8017370:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017372:	4798      	blx	r3
 8017374:	2000      	movs	r0, #0
 8017376:	6120      	str	r0, [r4, #16]
 8017378:	bd38      	pop	{r3, r4, r5, pc}
 801737a:	200b      	movs	r0, #11
 801737c:	4770      	bx	lr
 801737e:	bf00      	nop

08017380 <rcl_clock_get_now>:
 8017380:	b140      	cbz	r0, 8017394 <rcl_clock_get_now+0x14>
 8017382:	b139      	cbz	r1, 8017394 <rcl_clock_get_now+0x14>
 8017384:	7803      	ldrb	r3, [r0, #0]
 8017386:	b11b      	cbz	r3, 8017390 <rcl_clock_get_now+0x10>
 8017388:	68c3      	ldr	r3, [r0, #12]
 801738a:	b10b      	cbz	r3, 8017390 <rcl_clock_get_now+0x10>
 801738c:	6900      	ldr	r0, [r0, #16]
 801738e:	4718      	bx	r3
 8017390:	2001      	movs	r0, #1
 8017392:	4770      	bx	lr
 8017394:	200b      	movs	r0, #11
 8017396:	4770      	bx	lr

08017398 <rcl_clock_add_jump_callback>:
 8017398:	b082      	sub	sp, #8
 801739a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801739e:	a906      	add	r1, sp, #24
 80173a0:	e881 000c 	stmia.w	r1, {r2, r3}
 80173a4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80173a8:	b320      	cbz	r0, 80173f4 <rcl_clock_add_jump_callback+0x5c>
 80173aa:	4604      	mov	r4, r0
 80173ac:	3014      	adds	r0, #20
 80173ae:	f7f8 ffdb 	bl	8010368 <rcutils_allocator_is_valid>
 80173b2:	b1f8      	cbz	r0, 80173f4 <rcl_clock_add_jump_callback+0x5c>
 80173b4:	b1f6      	cbz	r6, 80173f4 <rcl_clock_add_jump_callback+0x5c>
 80173b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	db1b      	blt.n	80173f4 <rcl_clock_add_jump_callback+0x5c>
 80173bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80173c0:	2a01      	cmp	r2, #1
 80173c2:	f173 0300 	sbcs.w	r3, r3, #0
 80173c6:	da15      	bge.n	80173f4 <rcl_clock_add_jump_callback+0x5c>
 80173c8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80173cc:	2f00      	cmp	r7, #0
 80173ce:	d042      	beq.n	8017456 <rcl_clock_add_jump_callback+0xbe>
 80173d0:	2300      	movs	r3, #0
 80173d2:	4602      	mov	r2, r0
 80173d4:	e003      	b.n	80173de <rcl_clock_add_jump_callback+0x46>
 80173d6:	42bb      	cmp	r3, r7
 80173d8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80173dc:	d011      	beq.n	8017402 <rcl_clock_add_jump_callback+0x6a>
 80173de:	6811      	ldr	r1, [r2, #0]
 80173e0:	42b1      	cmp	r1, r6
 80173e2:	f103 0301 	add.w	r3, r3, #1
 80173e6:	d1f6      	bne.n	80173d6 <rcl_clock_add_jump_callback+0x3e>
 80173e8:	6a11      	ldr	r1, [r2, #32]
 80173ea:	42a9      	cmp	r1, r5
 80173ec:	d1f3      	bne.n	80173d6 <rcl_clock_add_jump_callback+0x3e>
 80173ee:	f04f 0e01 	mov.w	lr, #1
 80173f2:	e001      	b.n	80173f8 <rcl_clock_add_jump_callback+0x60>
 80173f4:	f04f 0e0b 	mov.w	lr, #11
 80173f8:	4670      	mov	r0, lr
 80173fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173fe:	b002      	add	sp, #8
 8017400:	4770      	bx	lr
 8017402:	3301      	adds	r3, #1
 8017404:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8017408:	00d9      	lsls	r1, r3, #3
 801740a:	69e3      	ldr	r3, [r4, #28]
 801740c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801740e:	4798      	blx	r3
 8017410:	b1f0      	cbz	r0, 8017450 <rcl_clock_add_jump_callback+0xb8>
 8017412:	68a3      	ldr	r3, [r4, #8]
 8017414:	6060      	str	r0, [r4, #4]
 8017416:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801741a:	f10d 0c18 	add.w	ip, sp, #24
 801741e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8017422:	f103 0801 	add.w	r8, r3, #1
 8017426:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801742a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801742e:	f106 0708 	add.w	r7, r6, #8
 8017432:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017434:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017438:	f04f 0e00 	mov.w	lr, #0
 801743c:	e887 0003 	stmia.w	r7, {r0, r1}
 8017440:	6235      	str	r5, [r6, #32]
 8017442:	4670      	mov	r0, lr
 8017444:	f8c4 8008 	str.w	r8, [r4, #8]
 8017448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801744c:	b002      	add	sp, #8
 801744e:	4770      	bx	lr
 8017450:	f04f 0e0a 	mov.w	lr, #10
 8017454:	e7d0      	b.n	80173f8 <rcl_clock_add_jump_callback+0x60>
 8017456:	2128      	movs	r1, #40	@ 0x28
 8017458:	e7d7      	b.n	801740a <rcl_clock_add_jump_callback+0x72>
 801745a:	bf00      	nop

0801745c <rcl_clock_remove_jump_callback>:
 801745c:	2800      	cmp	r0, #0
 801745e:	d057      	beq.n	8017510 <rcl_clock_remove_jump_callback+0xb4>
 8017460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017464:	4605      	mov	r5, r0
 8017466:	3014      	adds	r0, #20
 8017468:	4688      	mov	r8, r1
 801746a:	4692      	mov	sl, r2
 801746c:	f7f8 ff7c 	bl	8010368 <rcutils_allocator_is_valid>
 8017470:	2800      	cmp	r0, #0
 8017472:	d03b      	beq.n	80174ec <rcl_clock_remove_jump_callback+0x90>
 8017474:	f1b8 0f00 	cmp.w	r8, #0
 8017478:	d038      	beq.n	80174ec <rcl_clock_remove_jump_callback+0x90>
 801747a:	68ae      	ldr	r6, [r5, #8]
 801747c:	b166      	cbz	r6, 8017498 <rcl_clock_remove_jump_callback+0x3c>
 801747e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017482:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8017486:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801748a:	464c      	mov	r4, r9
 801748c:	6823      	ldr	r3, [r4, #0]
 801748e:	4543      	cmp	r3, r8
 8017490:	d005      	beq.n	801749e <rcl_clock_remove_jump_callback+0x42>
 8017492:	3428      	adds	r4, #40	@ 0x28
 8017494:	42a7      	cmp	r7, r4
 8017496:	d1f9      	bne.n	801748c <rcl_clock_remove_jump_callback+0x30>
 8017498:	2001      	movs	r0, #1
 801749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801749e:	6a23      	ldr	r3, [r4, #32]
 80174a0:	3428      	adds	r4, #40	@ 0x28
 80174a2:	42bc      	cmp	r4, r7
 80174a4:	d02d      	beq.n	8017502 <rcl_clock_remove_jump_callback+0xa6>
 80174a6:	4553      	cmp	r3, sl
 80174a8:	d1f0      	bne.n	801748c <rcl_clock_remove_jump_callback+0x30>
 80174aa:	46a6      	mov	lr, r4
 80174ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174b0:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80174b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80174c4:	3428      	adds	r4, #40	@ 0x28
 80174c6:	42a7      	cmp	r7, r4
 80174c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174cc:	d1ed      	bne.n	80174aa <rcl_clock_remove_jump_callback+0x4e>
 80174ce:	3e01      	subs	r6, #1
 80174d0:	60ae      	str	r6, [r5, #8]
 80174d2:	b176      	cbz	r6, 80174f2 <rcl_clock_remove_jump_callback+0x96>
 80174d4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80174d8:	69eb      	ldr	r3, [r5, #28]
 80174da:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80174dc:	00f1      	lsls	r1, r6, #3
 80174de:	4648      	mov	r0, r9
 80174e0:	4798      	blx	r3
 80174e2:	b1b8      	cbz	r0, 8017514 <rcl_clock_remove_jump_callback+0xb8>
 80174e4:	6068      	str	r0, [r5, #4]
 80174e6:	2000      	movs	r0, #0
 80174e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ec:	200b      	movs	r0, #11
 80174ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174f2:	4648      	mov	r0, r9
 80174f4:	69ab      	ldr	r3, [r5, #24]
 80174f6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80174f8:	4798      	blx	r3
 80174fa:	606e      	str	r6, [r5, #4]
 80174fc:	4630      	mov	r0, r6
 80174fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017502:	4553      	cmp	r3, sl
 8017504:	d1c8      	bne.n	8017498 <rcl_clock_remove_jump_callback+0x3c>
 8017506:	3e01      	subs	r6, #1
 8017508:	60ae      	str	r6, [r5, #8]
 801750a:	2e00      	cmp	r6, #0
 801750c:	d1e2      	bne.n	80174d4 <rcl_clock_remove_jump_callback+0x78>
 801750e:	e7f0      	b.n	80174f2 <rcl_clock_remove_jump_callback+0x96>
 8017510:	200b      	movs	r0, #11
 8017512:	4770      	bx	lr
 8017514:	200a      	movs	r0, #10
 8017516:	e7ea      	b.n	80174ee <rcl_clock_remove_jump_callback+0x92>

08017518 <rcl_get_zero_initialized_wait_set>:
 8017518:	b510      	push	{r4, lr}
 801751a:	4c08      	ldr	r4, [pc, #32]	@ (801753c <rcl_get_zero_initialized_wait_set+0x24>)
 801751c:	4686      	mov	lr, r0
 801751e:	4684      	mov	ip, r0
 8017520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017522:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801752c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801752e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017532:	6823      	ldr	r3, [r4, #0]
 8017534:	f8cc 3000 	str.w	r3, [ip]
 8017538:	4670      	mov	r0, lr
 801753a:	bd10      	pop	{r4, pc}
 801753c:	0801e2ac 	.word	0x0801e2ac

08017540 <rcl_wait_set_is_valid>:
 8017540:	b118      	cbz	r0, 801754a <rcl_wait_set_is_valid+0xa>
 8017542:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8017544:	3800      	subs	r0, #0
 8017546:	bf18      	it	ne
 8017548:	2001      	movne	r0, #1
 801754a:	4770      	bx	lr

0801754c <rcl_wait_set_fini>:
 801754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017550:	b082      	sub	sp, #8
 8017552:	2800      	cmp	r0, #0
 8017554:	f000 8095 	beq.w	8017682 <rcl_wait_set_fini+0x136>
 8017558:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801755a:	4604      	mov	r4, r0
 801755c:	2e00      	cmp	r6, #0
 801755e:	f000 808c 	beq.w	801767a <rcl_wait_set_fini+0x12e>
 8017562:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8017564:	f002 fa5e 	bl	8019a24 <rmw_destroy_wait_set>
 8017568:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801756a:	1e06      	subs	r6, r0, #0
 801756c:	bf18      	it	ne
 801756e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8017572:	2d00      	cmp	r5, #0
 8017574:	f000 8081 	beq.w	801767a <rcl_wait_set_fini+0x12e>
 8017578:	6820      	ldr	r0, [r4, #0]
 801757a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801757e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017580:	2700      	movs	r7, #0
 8017582:	6067      	str	r7, [r4, #4]
 8017584:	602f      	str	r7, [r5, #0]
 8017586:	b120      	cbz	r0, 8017592 <rcl_wait_set_fini+0x46>
 8017588:	9101      	str	r1, [sp, #4]
 801758a:	47c0      	blx	r8
 801758c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801758e:	9901      	ldr	r1, [sp, #4]
 8017590:	6027      	str	r7, [r4, #0]
 8017592:	68a8      	ldr	r0, [r5, #8]
 8017594:	b120      	cbz	r0, 80175a0 <rcl_wait_set_fini+0x54>
 8017596:	47c0      	blx	r8
 8017598:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801759a:	2300      	movs	r3, #0
 801759c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80175a0:	68a0      	ldr	r0, [r4, #8]
 80175a2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175a6:	f04f 0800 	mov.w	r8, #0
 80175aa:	f8c4 800c 	str.w	r8, [r4, #12]
 80175ae:	f8c5 800c 	str.w	r8, [r5, #12]
 80175b2:	b128      	cbz	r0, 80175c0 <rcl_wait_set_fini+0x74>
 80175b4:	47b8      	blx	r7
 80175b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80175bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175c0:	6968      	ldr	r0, [r5, #20]
 80175c2:	f04f 0800 	mov.w	r8, #0
 80175c6:	f8c5 8010 	str.w	r8, [r5, #16]
 80175ca:	b128      	cbz	r0, 80175d8 <rcl_wait_set_fini+0x8c>
 80175cc:	47b8      	blx	r7
 80175ce:	f8c5 8014 	str.w	r8, [r5, #20]
 80175d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175d8:	6920      	ldr	r0, [r4, #16]
 80175da:	f04f 0800 	mov.w	r8, #0
 80175de:	f8c4 8014 	str.w	r8, [r4, #20]
 80175e2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80175e6:	b128      	cbz	r0, 80175f4 <rcl_wait_set_fini+0xa8>
 80175e8:	47b8      	blx	r7
 80175ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80175f0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175f4:	69a0      	ldr	r0, [r4, #24]
 80175f6:	f04f 0800 	mov.w	r8, #0
 80175fa:	f8c4 801c 	str.w	r8, [r4, #28]
 80175fe:	f8c5 8018 	str.w	r8, [r5, #24]
 8017602:	b128      	cbz	r0, 8017610 <rcl_wait_set_fini+0xc4>
 8017604:	9101      	str	r1, [sp, #4]
 8017606:	47b8      	blx	r7
 8017608:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801760a:	9901      	ldr	r1, [sp, #4]
 801760c:	f8c4 8018 	str.w	r8, [r4, #24]
 8017610:	6a28      	ldr	r0, [r5, #32]
 8017612:	b120      	cbz	r0, 801761e <rcl_wait_set_fini+0xd2>
 8017614:	47b8      	blx	r7
 8017616:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017618:	2300      	movs	r3, #0
 801761a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801761e:	6a20      	ldr	r0, [r4, #32]
 8017620:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017624:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017626:	2700      	movs	r7, #0
 8017628:	6267      	str	r7, [r4, #36]	@ 0x24
 801762a:	626f      	str	r7, [r5, #36]	@ 0x24
 801762c:	b120      	cbz	r0, 8017638 <rcl_wait_set_fini+0xec>
 801762e:	9101      	str	r1, [sp, #4]
 8017630:	47c0      	blx	r8
 8017632:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017634:	9901      	ldr	r1, [sp, #4]
 8017636:	6227      	str	r7, [r4, #32]
 8017638:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801763a:	b120      	cbz	r0, 8017646 <rcl_wait_set_fini+0xfa>
 801763c:	47c0      	blx	r8
 801763e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017640:	2300      	movs	r3, #0
 8017642:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017646:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017648:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801764c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801764e:	2700      	movs	r7, #0
 8017650:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8017652:	632f      	str	r7, [r5, #48]	@ 0x30
 8017654:	b120      	cbz	r0, 8017660 <rcl_wait_set_fini+0x114>
 8017656:	9101      	str	r1, [sp, #4]
 8017658:	47c0      	blx	r8
 801765a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801765c:	9901      	ldr	r1, [sp, #4]
 801765e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017660:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017662:	b120      	cbz	r0, 801766e <rcl_wait_set_fini+0x122>
 8017664:	47c0      	blx	r8
 8017666:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017668:	2300      	movs	r3, #0
 801766a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801766e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017670:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017672:	4628      	mov	r0, r5
 8017674:	4798      	blx	r3
 8017676:	2300      	movs	r3, #0
 8017678:	6323      	str	r3, [r4, #48]	@ 0x30
 801767a:	4630      	mov	r0, r6
 801767c:	b002      	add	sp, #8
 801767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017682:	260b      	movs	r6, #11
 8017684:	4630      	mov	r0, r6
 8017686:	b002      	add	sp, #8
 8017688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801768c <rcl_wait_set_add_subscription>:
 801768c:	b318      	cbz	r0, 80176d6 <rcl_wait_set_add_subscription+0x4a>
 801768e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017690:	b570      	push	{r4, r5, r6, lr}
 8017692:	4604      	mov	r4, r0
 8017694:	b30b      	cbz	r3, 80176da <rcl_wait_set_add_subscription+0x4e>
 8017696:	b319      	cbz	r1, 80176e0 <rcl_wait_set_add_subscription+0x54>
 8017698:	681d      	ldr	r5, [r3, #0]
 801769a:	6840      	ldr	r0, [r0, #4]
 801769c:	4285      	cmp	r5, r0
 801769e:	d217      	bcs.n	80176d0 <rcl_wait_set_add_subscription+0x44>
 80176a0:	6820      	ldr	r0, [r4, #0]
 80176a2:	1c6e      	adds	r6, r5, #1
 80176a4:	601e      	str	r6, [r3, #0]
 80176a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80176aa:	b102      	cbz	r2, 80176ae <rcl_wait_set_add_subscription+0x22>
 80176ac:	6015      	str	r5, [r2, #0]
 80176ae:	4608      	mov	r0, r1
 80176b0:	f7f7 fbea 	bl	800ee88 <rcl_subscription_get_rmw_handle>
 80176b4:	b150      	cbz	r0, 80176cc <rcl_wait_set_add_subscription+0x40>
 80176b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176b8:	6842      	ldr	r2, [r0, #4]
 80176ba:	689b      	ldr	r3, [r3, #8]
 80176bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80176c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80176c2:	6853      	ldr	r3, [r2, #4]
 80176c4:	3301      	adds	r3, #1
 80176c6:	2000      	movs	r0, #0
 80176c8:	6053      	str	r3, [r2, #4]
 80176ca:	bd70      	pop	{r4, r5, r6, pc}
 80176cc:	2001      	movs	r0, #1
 80176ce:	bd70      	pop	{r4, r5, r6, pc}
 80176d0:	f240 3086 	movw	r0, #902	@ 0x386
 80176d4:	bd70      	pop	{r4, r5, r6, pc}
 80176d6:	200b      	movs	r0, #11
 80176d8:	4770      	bx	lr
 80176da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80176de:	bd70      	pop	{r4, r5, r6, pc}
 80176e0:	200b      	movs	r0, #11
 80176e2:	bd70      	pop	{r4, r5, r6, pc}

080176e4 <rcl_wait_set_clear>:
 80176e4:	2800      	cmp	r0, #0
 80176e6:	d073      	beq.n	80177d0 <rcl_wait_set_clear+0xec>
 80176e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80176ea:	b510      	push	{r4, lr}
 80176ec:	4604      	mov	r4, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d070      	beq.n	80177d4 <rcl_wait_set_clear+0xf0>
 80176f2:	6800      	ldr	r0, [r0, #0]
 80176f4:	b138      	cbz	r0, 8017706 <rcl_wait_set_clear+0x22>
 80176f6:	6862      	ldr	r2, [r4, #4]
 80176f8:	2100      	movs	r1, #0
 80176fa:	0092      	lsls	r2, r2, #2
 80176fc:	f004 ff02 	bl	801c504 <memset>
 8017700:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017702:	2200      	movs	r2, #0
 8017704:	601a      	str	r2, [r3, #0]
 8017706:	68a0      	ldr	r0, [r4, #8]
 8017708:	b138      	cbz	r0, 801771a <rcl_wait_set_clear+0x36>
 801770a:	68e2      	ldr	r2, [r4, #12]
 801770c:	2100      	movs	r1, #0
 801770e:	0092      	lsls	r2, r2, #2
 8017710:	f004 fef8 	bl	801c504 <memset>
 8017714:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017716:	2200      	movs	r2, #0
 8017718:	60da      	str	r2, [r3, #12]
 801771a:	69a0      	ldr	r0, [r4, #24]
 801771c:	b138      	cbz	r0, 801772e <rcl_wait_set_clear+0x4a>
 801771e:	69e2      	ldr	r2, [r4, #28]
 8017720:	2100      	movs	r1, #0
 8017722:	0092      	lsls	r2, r2, #2
 8017724:	f004 feee 	bl	801c504 <memset>
 8017728:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801772a:	2200      	movs	r2, #0
 801772c:	619a      	str	r2, [r3, #24]
 801772e:	6a20      	ldr	r0, [r4, #32]
 8017730:	b138      	cbz	r0, 8017742 <rcl_wait_set_clear+0x5e>
 8017732:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8017734:	2100      	movs	r1, #0
 8017736:	0092      	lsls	r2, r2, #2
 8017738:	f004 fee4 	bl	801c504 <memset>
 801773c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801773e:	2200      	movs	r2, #0
 8017740:	625a      	str	r2, [r3, #36]	@ 0x24
 8017742:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017744:	b138      	cbz	r0, 8017756 <rcl_wait_set_clear+0x72>
 8017746:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017748:	2100      	movs	r1, #0
 801774a:	0092      	lsls	r2, r2, #2
 801774c:	f004 feda 	bl	801c504 <memset>
 8017750:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017752:	2200      	movs	r2, #0
 8017754:	631a      	str	r2, [r3, #48]	@ 0x30
 8017756:	6920      	ldr	r0, [r4, #16]
 8017758:	b138      	cbz	r0, 801776a <rcl_wait_set_clear+0x86>
 801775a:	6962      	ldr	r2, [r4, #20]
 801775c:	2100      	movs	r1, #0
 801775e:	0092      	lsls	r2, r2, #2
 8017760:	f004 fed0 	bl	801c504 <memset>
 8017764:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017766:	2200      	movs	r2, #0
 8017768:	641a      	str	r2, [r3, #64]	@ 0x40
 801776a:	6898      	ldr	r0, [r3, #8]
 801776c:	b138      	cbz	r0, 801777e <rcl_wait_set_clear+0x9a>
 801776e:	685a      	ldr	r2, [r3, #4]
 8017770:	2100      	movs	r1, #0
 8017772:	0092      	lsls	r2, r2, #2
 8017774:	f004 fec6 	bl	801c504 <memset>
 8017778:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801777a:	2200      	movs	r2, #0
 801777c:	605a      	str	r2, [r3, #4]
 801777e:	6958      	ldr	r0, [r3, #20]
 8017780:	b138      	cbz	r0, 8017792 <rcl_wait_set_clear+0xae>
 8017782:	691a      	ldr	r2, [r3, #16]
 8017784:	2100      	movs	r1, #0
 8017786:	0092      	lsls	r2, r2, #2
 8017788:	f004 febc 	bl	801c504 <memset>
 801778c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801778e:	2200      	movs	r2, #0
 8017790:	611a      	str	r2, [r3, #16]
 8017792:	6a18      	ldr	r0, [r3, #32]
 8017794:	b138      	cbz	r0, 80177a6 <rcl_wait_set_clear+0xc2>
 8017796:	69da      	ldr	r2, [r3, #28]
 8017798:	2100      	movs	r1, #0
 801779a:	0092      	lsls	r2, r2, #2
 801779c:	f004 feb2 	bl	801c504 <memset>
 80177a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177a2:	2200      	movs	r2, #0
 80177a4:	61da      	str	r2, [r3, #28]
 80177a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80177a8:	b138      	cbz	r0, 80177ba <rcl_wait_set_clear+0xd6>
 80177aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80177ac:	2100      	movs	r1, #0
 80177ae:	0092      	lsls	r2, r2, #2
 80177b0:	f004 fea8 	bl	801c504 <memset>
 80177b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177b6:	2200      	movs	r2, #0
 80177b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80177ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80177bc:	b138      	cbz	r0, 80177ce <rcl_wait_set_clear+0xea>
 80177be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80177c0:	2100      	movs	r1, #0
 80177c2:	0092      	lsls	r2, r2, #2
 80177c4:	f004 fe9e 	bl	801c504 <memset>
 80177c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80177ca:	2000      	movs	r0, #0
 80177cc:	6358      	str	r0, [r3, #52]	@ 0x34
 80177ce:	bd10      	pop	{r4, pc}
 80177d0:	200b      	movs	r0, #11
 80177d2:	4770      	bx	lr
 80177d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80177d8:	bd10      	pop	{r4, pc}
 80177da:	bf00      	nop

080177dc <rcl_wait_set_resize>:
 80177dc:	2800      	cmp	r0, #0
 80177de:	f000 8185 	beq.w	8017aec <rcl_wait_set_resize+0x310>
 80177e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80177e8:	b083      	sub	sp, #12
 80177ea:	4605      	mov	r5, r0
 80177ec:	2c00      	cmp	r4, #0
 80177ee:	f000 817f 	beq.w	8017af0 <rcl_wait_set_resize+0x314>
 80177f2:	f04f 0900 	mov.w	r9, #0
 80177f6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80177fa:	461f      	mov	r7, r3
 80177fc:	4688      	mov	r8, r1
 80177fe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8017802:	4616      	mov	r6, r2
 8017804:	f8c0 9004 	str.w	r9, [r0, #4]
 8017808:	f8c4 9000 	str.w	r9, [r4]
 801780c:	2900      	cmp	r1, #0
 801780e:	f000 80bd 	beq.w	801798c <rcl_wait_set_resize+0x1b0>
 8017812:	008c      	lsls	r4, r1, #2
 8017814:	6800      	ldr	r0, [r0, #0]
 8017816:	9301      	str	r3, [sp, #4]
 8017818:	4652      	mov	r2, sl
 801781a:	4621      	mov	r1, r4
 801781c:	4798      	blx	r3
 801781e:	9b01      	ldr	r3, [sp, #4]
 8017820:	6028      	str	r0, [r5, #0]
 8017822:	2800      	cmp	r0, #0
 8017824:	f000 80cb 	beq.w	80179be <rcl_wait_set_resize+0x1e2>
 8017828:	4622      	mov	r2, r4
 801782a:	4649      	mov	r1, r9
 801782c:	9301      	str	r3, [sp, #4]
 801782e:	f004 fe69 	bl	801c504 <memset>
 8017832:	f8c5 8004 	str.w	r8, [r5, #4]
 8017836:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801783a:	9b01      	ldr	r3, [sp, #4]
 801783c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017840:	f8c8 9004 	str.w	r9, [r8, #4]
 8017844:	4652      	mov	r2, sl
 8017846:	4621      	mov	r1, r4
 8017848:	4798      	blx	r3
 801784a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801784c:	f8c8 0008 	str.w	r0, [r8, #8]
 8017850:	689b      	ldr	r3, [r3, #8]
 8017852:	2b00      	cmp	r3, #0
 8017854:	f000 80ac 	beq.w	80179b0 <rcl_wait_set_resize+0x1d4>
 8017858:	4622      	mov	r2, r4
 801785a:	4649      	mov	r1, r9
 801785c:	4618      	mov	r0, r3
 801785e:	f004 fe51 	bl	801c504 <memset>
 8017862:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017864:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017868:	f04f 0800 	mov.w	r8, #0
 801786c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8017870:	f8c5 800c 	str.w	r8, [r5, #12]
 8017874:	f8c4 800c 	str.w	r8, [r4, #12]
 8017878:	2e00      	cmp	r6, #0
 801787a:	f040 80a4 	bne.w	80179c6 <rcl_wait_set_resize+0x1ea>
 801787e:	68a8      	ldr	r0, [r5, #8]
 8017880:	b128      	cbz	r0, 801788e <rcl_wait_set_resize+0xb2>
 8017882:	4649      	mov	r1, r9
 8017884:	4790      	blx	r2
 8017886:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017888:	60ae      	str	r6, [r5, #8]
 801788a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801788e:	f04f 0800 	mov.w	r8, #0
 8017892:	19f6      	adds	r6, r6, r7
 8017894:	f8c4 8010 	str.w	r8, [r4, #16]
 8017898:	f040 80ac 	bne.w	80179f4 <rcl_wait_set_resize+0x218>
 801789c:	6960      	ldr	r0, [r4, #20]
 801789e:	b130      	cbz	r0, 80178ae <rcl_wait_set_resize+0xd2>
 80178a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80178a2:	4649      	mov	r1, r9
 80178a4:	4798      	blx	r3
 80178a6:	6166      	str	r6, [r4, #20]
 80178a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80178ae:	2600      	movs	r6, #0
 80178b0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80178b4:	616e      	str	r6, [r5, #20]
 80178b6:	6426      	str	r6, [r4, #64]	@ 0x40
 80178b8:	2f00      	cmp	r7, #0
 80178ba:	f040 80ad 	bne.w	8017a18 <rcl_wait_set_resize+0x23c>
 80178be:	6928      	ldr	r0, [r5, #16]
 80178c0:	b138      	cbz	r0, 80178d2 <rcl_wait_set_resize+0xf6>
 80178c2:	4649      	mov	r1, r9
 80178c4:	47d0      	blx	sl
 80178c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178c8:	612f      	str	r7, [r5, #16]
 80178ca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80178ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80178d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178d4:	2600      	movs	r6, #0
 80178d6:	61ee      	str	r6, [r5, #28]
 80178d8:	61a6      	str	r6, [r4, #24]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	f040 80af 	bne.w	8017a3e <rcl_wait_set_resize+0x262>
 80178e0:	69a8      	ldr	r0, [r5, #24]
 80178e2:	b120      	cbz	r0, 80178ee <rcl_wait_set_resize+0x112>
 80178e4:	4649      	mov	r1, r9
 80178e6:	47d0      	blx	sl
 80178e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178ec:	61ab      	str	r3, [r5, #24]
 80178ee:	6a20      	ldr	r0, [r4, #32]
 80178f0:	b128      	cbz	r0, 80178fe <rcl_wait_set_resize+0x122>
 80178f2:	4649      	mov	r1, r9
 80178f4:	47d0      	blx	sl
 80178f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178f8:	2300      	movs	r3, #0
 80178fa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80178fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017900:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017902:	2600      	movs	r6, #0
 8017904:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017908:	626e      	str	r6, [r5, #36]	@ 0x24
 801790a:	6266      	str	r6, [r4, #36]	@ 0x24
 801790c:	2b00      	cmp	r3, #0
 801790e:	f000 80b6 	beq.w	8017a7e <rcl_wait_set_resize+0x2a2>
 8017912:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017916:	6a28      	ldr	r0, [r5, #32]
 8017918:	463a      	mov	r2, r7
 801791a:	4651      	mov	r1, sl
 801791c:	47c8      	blx	r9
 801791e:	6228      	str	r0, [r5, #32]
 8017920:	2800      	cmp	r0, #0
 8017922:	d04c      	beq.n	80179be <rcl_wait_set_resize+0x1e2>
 8017924:	4652      	mov	r2, sl
 8017926:	4631      	mov	r1, r6
 8017928:	f004 fdec 	bl	801c504 <memset>
 801792c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801792e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017930:	626b      	str	r3, [r5, #36]	@ 0x24
 8017932:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017934:	62a6      	str	r6, [r4, #40]	@ 0x28
 8017936:	463a      	mov	r2, r7
 8017938:	4651      	mov	r1, sl
 801793a:	47c8      	blx	r9
 801793c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801793e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017940:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8017942:	2c00      	cmp	r4, #0
 8017944:	f000 80f0 	beq.w	8017b28 <rcl_wait_set_resize+0x34c>
 8017948:	4620      	mov	r0, r4
 801794a:	4652      	mov	r2, sl
 801794c:	4631      	mov	r1, r6
 801794e:	f004 fdd9 	bl	801c504 <memset>
 8017952:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017954:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017956:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017958:	2600      	movs	r6, #0
 801795a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801795e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8017960:	6326      	str	r6, [r4, #48]	@ 0x30
 8017962:	2b00      	cmp	r3, #0
 8017964:	f040 809d 	bne.w	8017aa2 <rcl_wait_set_resize+0x2c6>
 8017968:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801796a:	b120      	cbz	r0, 8017976 <rcl_wait_set_resize+0x19a>
 801796c:	4639      	mov	r1, r7
 801796e:	47c0      	blx	r8
 8017970:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017972:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017974:	62ab      	str	r3, [r5, #40]	@ 0x28
 8017976:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017978:	b310      	cbz	r0, 80179c0 <rcl_wait_set_resize+0x1e4>
 801797a:	4639      	mov	r1, r7
 801797c:	47c0      	blx	r8
 801797e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017980:	2000      	movs	r0, #0
 8017982:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8017986:	b003      	add	sp, #12
 8017988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801798c:	6800      	ldr	r0, [r0, #0]
 801798e:	b120      	cbz	r0, 801799a <rcl_wait_set_resize+0x1be>
 8017990:	4651      	mov	r1, sl
 8017992:	47d8      	blx	fp
 8017994:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017996:	f8c5 8000 	str.w	r8, [r5]
 801799a:	68a0      	ldr	r0, [r4, #8]
 801799c:	2800      	cmp	r0, #0
 801799e:	f43f af61 	beq.w	8017864 <rcl_wait_set_resize+0x88>
 80179a2:	4651      	mov	r1, sl
 80179a4:	47d8      	blx	fp
 80179a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179a8:	2300      	movs	r3, #0
 80179aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80179ae:	e759      	b.n	8017864 <rcl_wait_set_resize+0x88>
 80179b0:	6828      	ldr	r0, [r5, #0]
 80179b2:	9301      	str	r3, [sp, #4]
 80179b4:	4651      	mov	r1, sl
 80179b6:	47d8      	blx	fp
 80179b8:	9b01      	ldr	r3, [sp, #4]
 80179ba:	e9c5 3300 	strd	r3, r3, [r5]
 80179be:	200a      	movs	r0, #10
 80179c0:	b003      	add	sp, #12
 80179c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179c6:	00b4      	lsls	r4, r6, #2
 80179c8:	68a8      	ldr	r0, [r5, #8]
 80179ca:	464a      	mov	r2, r9
 80179cc:	4621      	mov	r1, r4
 80179ce:	4798      	blx	r3
 80179d0:	60a8      	str	r0, [r5, #8]
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d0f3      	beq.n	80179be <rcl_wait_set_resize+0x1e2>
 80179d6:	4622      	mov	r2, r4
 80179d8:	4641      	mov	r1, r8
 80179da:	f004 fd93 	bl	801c504 <memset>
 80179de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179e0:	60ee      	str	r6, [r5, #12]
 80179e2:	f04f 0800 	mov.w	r8, #0
 80179e6:	19f6      	adds	r6, r6, r7
 80179e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80179ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80179f0:	f43f af54 	beq.w	801789c <rcl_wait_set_resize+0xc0>
 80179f4:	00b6      	lsls	r6, r6, #2
 80179f6:	464a      	mov	r2, r9
 80179f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80179fa:	6960      	ldr	r0, [r4, #20]
 80179fc:	4631      	mov	r1, r6
 80179fe:	4798      	blx	r3
 8017a00:	4681      	mov	r9, r0
 8017a02:	6160      	str	r0, [r4, #20]
 8017a04:	2800      	cmp	r0, #0
 8017a06:	d076      	beq.n	8017af6 <rcl_wait_set_resize+0x31a>
 8017a08:	4632      	mov	r2, r6
 8017a0a:	4641      	mov	r1, r8
 8017a0c:	f004 fd7a 	bl	801c504 <memset>
 8017a10:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a12:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a16:	e74a      	b.n	80178ae <rcl_wait_set_resize+0xd2>
 8017a18:	00bc      	lsls	r4, r7, #2
 8017a1a:	6928      	ldr	r0, [r5, #16]
 8017a1c:	464a      	mov	r2, r9
 8017a1e:	4621      	mov	r1, r4
 8017a20:	47c0      	blx	r8
 8017a22:	6128      	str	r0, [r5, #16]
 8017a24:	2800      	cmp	r0, #0
 8017a26:	d0ca      	beq.n	80179be <rcl_wait_set_resize+0x1e2>
 8017a28:	4622      	mov	r2, r4
 8017a2a:	4631      	mov	r1, r6
 8017a2c:	f004 fd6a 	bl	801c504 <memset>
 8017a30:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a32:	616f      	str	r7, [r5, #20]
 8017a34:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017a38:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a3c:	e749      	b.n	80178d2 <rcl_wait_set_resize+0xf6>
 8017a3e:	009c      	lsls	r4, r3, #2
 8017a40:	69a8      	ldr	r0, [r5, #24]
 8017a42:	464a      	mov	r2, r9
 8017a44:	4621      	mov	r1, r4
 8017a46:	47c0      	blx	r8
 8017a48:	61a8      	str	r0, [r5, #24]
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	d0b7      	beq.n	80179be <rcl_wait_set_resize+0x1e2>
 8017a4e:	4622      	mov	r2, r4
 8017a50:	4631      	mov	r1, r6
 8017a52:	f004 fd57 	bl	801c504 <memset>
 8017a56:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a5a:	61eb      	str	r3, [r5, #28]
 8017a5c:	6a38      	ldr	r0, [r7, #32]
 8017a5e:	61fe      	str	r6, [r7, #28]
 8017a60:	464a      	mov	r2, r9
 8017a62:	4621      	mov	r1, r4
 8017a64:	47c0      	blx	r8
 8017a66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017a68:	6238      	str	r0, [r7, #32]
 8017a6a:	6a1f      	ldr	r7, [r3, #32]
 8017a6c:	2f00      	cmp	r7, #0
 8017a6e:	d054      	beq.n	8017b1a <rcl_wait_set_resize+0x33e>
 8017a70:	4622      	mov	r2, r4
 8017a72:	4631      	mov	r1, r6
 8017a74:	4638      	mov	r0, r7
 8017a76:	f004 fd45 	bl	801c504 <memset>
 8017a7a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a7c:	e73f      	b.n	80178fe <rcl_wait_set_resize+0x122>
 8017a7e:	6a28      	ldr	r0, [r5, #32]
 8017a80:	b120      	cbz	r0, 8017a8c <rcl_wait_set_resize+0x2b0>
 8017a82:	4639      	mov	r1, r7
 8017a84:	47c0      	blx	r8
 8017a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a8a:	622b      	str	r3, [r5, #32]
 8017a8c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	f43f af60 	beq.w	8017954 <rcl_wait_set_resize+0x178>
 8017a94:	4639      	mov	r1, r7
 8017a96:	47c0      	blx	r8
 8017a98:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017aa0:	e758      	b.n	8017954 <rcl_wait_set_resize+0x178>
 8017aa2:	009c      	lsls	r4, r3, #2
 8017aa4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017aa6:	463a      	mov	r2, r7
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	47c8      	blx	r9
 8017aac:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017aae:	2800      	cmp	r0, #0
 8017ab0:	d085      	beq.n	80179be <rcl_wait_set_resize+0x1e2>
 8017ab2:	4622      	mov	r2, r4
 8017ab4:	4631      	mov	r1, r6
 8017ab6:	f004 fd25 	bl	801c504 <memset>
 8017aba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ac0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8017ac2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017ac6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017aca:	463a      	mov	r2, r7
 8017acc:	4621      	mov	r1, r4
 8017ace:	47c8      	blx	r9
 8017ad0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ad2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8017ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ad8:	b36b      	cbz	r3, 8017b36 <rcl_wait_set_resize+0x35a>
 8017ada:	4622      	mov	r2, r4
 8017adc:	4631      	mov	r1, r6
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f004 fd10 	bl	801c504 <memset>
 8017ae4:	4630      	mov	r0, r6
 8017ae6:	b003      	add	sp, #12
 8017ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aec:	200b      	movs	r0, #11
 8017aee:	4770      	bx	lr
 8017af0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017af4:	e764      	b.n	80179c0 <rcl_wait_set_resize+0x1e4>
 8017af6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017af8:	68a8      	ldr	r0, [r5, #8]
 8017afa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017afe:	4798      	blx	r3
 8017b00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017b02:	6928      	ldr	r0, [r5, #16]
 8017b04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017b06:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017b08:	f8c5 900c 	str.w	r9, [r5, #12]
 8017b0c:	f8c5 9008 	str.w	r9, [r5, #8]
 8017b10:	4790      	blx	r2
 8017b12:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017b16:	200a      	movs	r0, #10
 8017b18:	e752      	b.n	80179c0 <rcl_wait_set_resize+0x1e4>
 8017b1a:	69a8      	ldr	r0, [r5, #24]
 8017b1c:	4649      	mov	r1, r9
 8017b1e:	47d0      	blx	sl
 8017b20:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017b24:	200a      	movs	r0, #10
 8017b26:	e74b      	b.n	80179c0 <rcl_wait_set_resize+0x1e4>
 8017b28:	6a28      	ldr	r0, [r5, #32]
 8017b2a:	4639      	mov	r1, r7
 8017b2c:	47c0      	blx	r8
 8017b2e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017b32:	200a      	movs	r0, #10
 8017b34:	e744      	b.n	80179c0 <rcl_wait_set_resize+0x1e4>
 8017b36:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017b38:	9301      	str	r3, [sp, #4]
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	47c0      	blx	r8
 8017b3e:	9b01      	ldr	r3, [sp, #4]
 8017b40:	200a      	movs	r0, #10
 8017b42:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017b46:	e73b      	b.n	80179c0 <rcl_wait_set_resize+0x1e4>

08017b48 <rcl_wait_set_init>:
 8017b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b4c:	b084      	sub	sp, #16
 8017b4e:	4604      	mov	r4, r0
 8017b50:	a810      	add	r0, sp, #64	@ 0x40
 8017b52:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8017b56:	460f      	mov	r7, r1
 8017b58:	4690      	mov	r8, r2
 8017b5a:	4699      	mov	r9, r3
 8017b5c:	f7f8 fc04 	bl	8010368 <rcutils_allocator_is_valid>
 8017b60:	2800      	cmp	r0, #0
 8017b62:	d06b      	beq.n	8017c3c <rcl_wait_set_init+0xf4>
 8017b64:	2c00      	cmp	r4, #0
 8017b66:	d069      	beq.n	8017c3c <rcl_wait_set_init+0xf4>
 8017b68:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017b6a:	b125      	cbz	r5, 8017b76 <rcl_wait_set_init+0x2e>
 8017b6c:	2564      	movs	r5, #100	@ 0x64
 8017b6e:	4628      	mov	r0, r5
 8017b70:	b004      	add	sp, #16
 8017b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b76:	f1ba 0f00 	cmp.w	sl, #0
 8017b7a:	d05f      	beq.n	8017c3c <rcl_wait_set_init+0xf4>
 8017b7c:	4650      	mov	r0, sl
 8017b7e:	f7f6 fb5d 	bl	800e23c <rcl_context_is_valid>
 8017b82:	2800      	cmp	r0, #0
 8017b84:	d067      	beq.n	8017c56 <rcl_wait_set_init+0x10e>
 8017b86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017b88:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017b8a:	205c      	movs	r0, #92	@ 0x5c
 8017b8c:	4798      	blx	r3
 8017b8e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017b90:	2800      	cmp	r0, #0
 8017b92:	d062      	beq.n	8017c5a <rcl_wait_set_init+0x112>
 8017b94:	4629      	mov	r1, r5
 8017b96:	225c      	movs	r2, #92	@ 0x5c
 8017b98:	f004 fcb4 	bl	801c504 <memset>
 8017b9c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8017ba0:	eb03 0e02 	add.w	lr, r3, r2
 8017ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ba6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017ba8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017bac:	449e      	add	lr, r3
 8017bae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017bb2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017bb6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017bba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017bbe:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8017bc2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8017bc6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8017bca:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8017bce:	f8da a000 	ldr.w	sl, [sl]
 8017bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017bd4:	44c6      	add	lr, r8
 8017bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8017bda:	602b      	str	r3, [r5, #0]
 8017bdc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8017be0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8017be4:	f001 ff14 	bl	8019a10 <rmw_create_wait_set>
 8017be8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bea:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8017bec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017bee:	b350      	cbz	r0, 8017c46 <rcl_wait_set_init+0xfe>
 8017bf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bf2:	9302      	str	r3, [sp, #8]
 8017bf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017bf6:	9301      	str	r3, [sp, #4]
 8017bf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bfa:	9300      	str	r3, [sp, #0]
 8017bfc:	4642      	mov	r2, r8
 8017bfe:	464b      	mov	r3, r9
 8017c00:	4639      	mov	r1, r7
 8017c02:	4620      	mov	r0, r4
 8017c04:	f7ff fdea 	bl	80177dc <rcl_wait_set_resize>
 8017c08:	4605      	mov	r5, r0
 8017c0a:	2800      	cmp	r0, #0
 8017c0c:	d0af      	beq.n	8017b6e <rcl_wait_set_init+0x26>
 8017c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c10:	bb2b      	cbnz	r3, 8017c5e <rcl_wait_set_init+0x116>
 8017c12:	2600      	movs	r6, #0
 8017c14:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017c18:	9600      	str	r6, [sp, #0]
 8017c1a:	4633      	mov	r3, r6
 8017c1c:	4632      	mov	r2, r6
 8017c1e:	4631      	mov	r1, r6
 8017c20:	4620      	mov	r0, r4
 8017c22:	f7ff fddb 	bl	80177dc <rcl_wait_set_resize>
 8017c26:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d0a0      	beq.n	8017b6e <rcl_wait_set_init+0x26>
 8017c2c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017c2e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017c30:	4798      	blx	r3
 8017c32:	4628      	mov	r0, r5
 8017c34:	6326      	str	r6, [r4, #48]	@ 0x30
 8017c36:	b004      	add	sp, #16
 8017c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c3c:	250b      	movs	r5, #11
 8017c3e:	4628      	mov	r0, r5
 8017c40:	b004      	add	sp, #16
 8017c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c46:	2501      	movs	r5, #1
 8017c48:	f001 feec 	bl	8019a24 <rmw_destroy_wait_set>
 8017c4c:	2800      	cmp	r0, #0
 8017c4e:	bf18      	it	ne
 8017c50:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8017c54:	e7dd      	b.n	8017c12 <rcl_wait_set_init+0xca>
 8017c56:	2565      	movs	r5, #101	@ 0x65
 8017c58:	e789      	b.n	8017b6e <rcl_wait_set_init+0x26>
 8017c5a:	250a      	movs	r5, #10
 8017c5c:	e787      	b.n	8017b6e <rcl_wait_set_init+0x26>
 8017c5e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017c60:	e7f2      	b.n	8017c48 <rcl_wait_set_init+0x100>
 8017c62:	bf00      	nop

08017c64 <rcl_wait_set_add_guard_condition>:
 8017c64:	b318      	cbz	r0, 8017cae <rcl_wait_set_add_guard_condition+0x4a>
 8017c66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017c68:	b570      	push	{r4, r5, r6, lr}
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	b30b      	cbz	r3, 8017cb2 <rcl_wait_set_add_guard_condition+0x4e>
 8017c6e:	b319      	cbz	r1, 8017cb8 <rcl_wait_set_add_guard_condition+0x54>
 8017c70:	68dd      	ldr	r5, [r3, #12]
 8017c72:	68c0      	ldr	r0, [r0, #12]
 8017c74:	4285      	cmp	r5, r0
 8017c76:	d217      	bcs.n	8017ca8 <rcl_wait_set_add_guard_condition+0x44>
 8017c78:	68a0      	ldr	r0, [r4, #8]
 8017c7a:	1c6e      	adds	r6, r5, #1
 8017c7c:	60de      	str	r6, [r3, #12]
 8017c7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017c82:	b102      	cbz	r2, 8017c86 <rcl_wait_set_add_guard_condition+0x22>
 8017c84:	6015      	str	r5, [r2, #0]
 8017c86:	4608      	mov	r0, r1
 8017c88:	f7ff f874 	bl	8016d74 <rcl_guard_condition_get_rmw_handle>
 8017c8c:	b150      	cbz	r0, 8017ca4 <rcl_wait_set_add_guard_condition+0x40>
 8017c8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c90:	6842      	ldr	r2, [r0, #4]
 8017c92:	695b      	ldr	r3, [r3, #20]
 8017c94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017c98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017c9a:	6913      	ldr	r3, [r2, #16]
 8017c9c:	3301      	adds	r3, #1
 8017c9e:	2000      	movs	r0, #0
 8017ca0:	6113      	str	r3, [r2, #16]
 8017ca2:	bd70      	pop	{r4, r5, r6, pc}
 8017ca4:	2001      	movs	r0, #1
 8017ca6:	bd70      	pop	{r4, r5, r6, pc}
 8017ca8:	f240 3086 	movw	r0, #902	@ 0x386
 8017cac:	bd70      	pop	{r4, r5, r6, pc}
 8017cae:	200b      	movs	r0, #11
 8017cb0:	4770      	bx	lr
 8017cb2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017cb6:	bd70      	pop	{r4, r5, r6, pc}
 8017cb8:	200b      	movs	r0, #11
 8017cba:	bd70      	pop	{r4, r5, r6, pc}

08017cbc <rcl_wait_set_add_timer>:
 8017cbc:	b328      	cbz	r0, 8017d0a <rcl_wait_set_add_timer+0x4e>
 8017cbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017cc0:	b570      	push	{r4, r5, r6, lr}
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	b31b      	cbz	r3, 8017d0e <rcl_wait_set_add_timer+0x52>
 8017cc6:	b329      	cbz	r1, 8017d14 <rcl_wait_set_add_timer+0x58>
 8017cc8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8017cca:	6965      	ldr	r5, [r4, #20]
 8017ccc:	42a8      	cmp	r0, r5
 8017cce:	d219      	bcs.n	8017d04 <rcl_wait_set_add_timer+0x48>
 8017cd0:	6925      	ldr	r5, [r4, #16]
 8017cd2:	1c46      	adds	r6, r0, #1
 8017cd4:	641e      	str	r6, [r3, #64]	@ 0x40
 8017cd6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017cda:	b102      	cbz	r2, 8017cde <rcl_wait_set_add_timer+0x22>
 8017cdc:	6010      	str	r0, [r2, #0]
 8017cde:	4608      	mov	r0, r1
 8017ce0:	f7f7 fb52 	bl	800f388 <rcl_timer_get_guard_condition>
 8017ce4:	b168      	cbz	r0, 8017d02 <rcl_wait_set_add_timer+0x46>
 8017ce6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017ce8:	68e3      	ldr	r3, [r4, #12]
 8017cea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8017cec:	3b01      	subs	r3, #1
 8017cee:	441d      	add	r5, r3
 8017cf0:	f7ff f840 	bl	8016d74 <rcl_guard_condition_get_rmw_handle>
 8017cf4:	b180      	cbz	r0, 8017d18 <rcl_wait_set_add_timer+0x5c>
 8017cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017cf8:	6842      	ldr	r2, [r0, #4]
 8017cfa:	695b      	ldr	r3, [r3, #20]
 8017cfc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d00:	2000      	movs	r0, #0
 8017d02:	bd70      	pop	{r4, r5, r6, pc}
 8017d04:	f240 3086 	movw	r0, #902	@ 0x386
 8017d08:	bd70      	pop	{r4, r5, r6, pc}
 8017d0a:	200b      	movs	r0, #11
 8017d0c:	4770      	bx	lr
 8017d0e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d12:	bd70      	pop	{r4, r5, r6, pc}
 8017d14:	200b      	movs	r0, #11
 8017d16:	bd70      	pop	{r4, r5, r6, pc}
 8017d18:	2001      	movs	r0, #1
 8017d1a:	bd70      	pop	{r4, r5, r6, pc}

08017d1c <rcl_wait_set_add_client>:
 8017d1c:	b318      	cbz	r0, 8017d66 <rcl_wait_set_add_client+0x4a>
 8017d1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017d20:	b570      	push	{r4, r5, r6, lr}
 8017d22:	4604      	mov	r4, r0
 8017d24:	b30b      	cbz	r3, 8017d6a <rcl_wait_set_add_client+0x4e>
 8017d26:	b319      	cbz	r1, 8017d70 <rcl_wait_set_add_client+0x54>
 8017d28:	699d      	ldr	r5, [r3, #24]
 8017d2a:	69c0      	ldr	r0, [r0, #28]
 8017d2c:	4285      	cmp	r5, r0
 8017d2e:	d217      	bcs.n	8017d60 <rcl_wait_set_add_client+0x44>
 8017d30:	69a0      	ldr	r0, [r4, #24]
 8017d32:	1c6e      	adds	r6, r5, #1
 8017d34:	619e      	str	r6, [r3, #24]
 8017d36:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d3a:	b102      	cbz	r2, 8017d3e <rcl_wait_set_add_client+0x22>
 8017d3c:	6015      	str	r5, [r2, #0]
 8017d3e:	4608      	mov	r0, r1
 8017d40:	f7fe fe6c 	bl	8016a1c <rcl_client_get_rmw_handle>
 8017d44:	b150      	cbz	r0, 8017d5c <rcl_wait_set_add_client+0x40>
 8017d46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d48:	6842      	ldr	r2, [r0, #4]
 8017d4a:	6a1b      	ldr	r3, [r3, #32]
 8017d4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017d52:	69d3      	ldr	r3, [r2, #28]
 8017d54:	3301      	adds	r3, #1
 8017d56:	2000      	movs	r0, #0
 8017d58:	61d3      	str	r3, [r2, #28]
 8017d5a:	bd70      	pop	{r4, r5, r6, pc}
 8017d5c:	2001      	movs	r0, #1
 8017d5e:	bd70      	pop	{r4, r5, r6, pc}
 8017d60:	f240 3086 	movw	r0, #902	@ 0x386
 8017d64:	bd70      	pop	{r4, r5, r6, pc}
 8017d66:	200b      	movs	r0, #11
 8017d68:	4770      	bx	lr
 8017d6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d6e:	bd70      	pop	{r4, r5, r6, pc}
 8017d70:	200b      	movs	r0, #11
 8017d72:	bd70      	pop	{r4, r5, r6, pc}

08017d74 <rcl_wait_set_add_service>:
 8017d74:	b318      	cbz	r0, 8017dbe <rcl_wait_set_add_service+0x4a>
 8017d76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017d78:	b570      	push	{r4, r5, r6, lr}
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	b30b      	cbz	r3, 8017dc2 <rcl_wait_set_add_service+0x4e>
 8017d7e:	b319      	cbz	r1, 8017dc8 <rcl_wait_set_add_service+0x54>
 8017d80:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017d82:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017d84:	4285      	cmp	r5, r0
 8017d86:	d217      	bcs.n	8017db8 <rcl_wait_set_add_service+0x44>
 8017d88:	6a20      	ldr	r0, [r4, #32]
 8017d8a:	1c6e      	adds	r6, r5, #1
 8017d8c:	625e      	str	r6, [r3, #36]	@ 0x24
 8017d8e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d92:	b102      	cbz	r2, 8017d96 <rcl_wait_set_add_service+0x22>
 8017d94:	6015      	str	r5, [r2, #0]
 8017d96:	4608      	mov	r0, r1
 8017d98:	f7ff f9c8 	bl	801712c <rcl_service_get_rmw_handle>
 8017d9c:	b150      	cbz	r0, 8017db4 <rcl_wait_set_add_service+0x40>
 8017d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017da0:	6842      	ldr	r2, [r0, #4]
 8017da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017da4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017da8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017daa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017dac:	3301      	adds	r3, #1
 8017dae:	2000      	movs	r0, #0
 8017db0:	6293      	str	r3, [r2, #40]	@ 0x28
 8017db2:	bd70      	pop	{r4, r5, r6, pc}
 8017db4:	2001      	movs	r0, #1
 8017db6:	bd70      	pop	{r4, r5, r6, pc}
 8017db8:	f240 3086 	movw	r0, #902	@ 0x386
 8017dbc:	bd70      	pop	{r4, r5, r6, pc}
 8017dbe:	200b      	movs	r0, #11
 8017dc0:	4770      	bx	lr
 8017dc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017dc6:	bd70      	pop	{r4, r5, r6, pc}
 8017dc8:	200b      	movs	r0, #11
 8017dca:	bd70      	pop	{r4, r5, r6, pc}
 8017dcc:	0000      	movs	r0, r0
	...

08017dd0 <rcl_wait>:
 8017dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd4:	ed2d 8b02 	vpush	{d8}
 8017dd8:	b08d      	sub	sp, #52	@ 0x34
 8017dda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017dde:	2800      	cmp	r0, #0
 8017de0:	f000 8143 	beq.w	801806a <rcl_wait+0x29a>
 8017de4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017de6:	4605      	mov	r5, r0
 8017de8:	2e00      	cmp	r6, #0
 8017dea:	f000 8112 	beq.w	8018012 <rcl_wait+0x242>
 8017dee:	6843      	ldr	r3, [r0, #4]
 8017df0:	b983      	cbnz	r3, 8017e14 <rcl_wait+0x44>
 8017df2:	68eb      	ldr	r3, [r5, #12]
 8017df4:	b973      	cbnz	r3, 8017e14 <rcl_wait+0x44>
 8017df6:	696b      	ldr	r3, [r5, #20]
 8017df8:	b963      	cbnz	r3, 8017e14 <rcl_wait+0x44>
 8017dfa:	69eb      	ldr	r3, [r5, #28]
 8017dfc:	b953      	cbnz	r3, 8017e14 <rcl_wait+0x44>
 8017dfe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017e00:	b943      	cbnz	r3, 8017e14 <rcl_wait+0x44>
 8017e02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017e04:	b933      	cbnz	r3, 8017e14 <rcl_wait+0x44>
 8017e06:	f240 3085 	movw	r0, #901	@ 0x385
 8017e0a:	b00d      	add	sp, #52	@ 0x34
 8017e0c:	ecbd 8b02 	vpop	{d8}
 8017e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e14:	9b04      	ldr	r3, [sp, #16]
 8017e16:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017e18:	2b01      	cmp	r3, #1
 8017e1a:	9b05      	ldr	r3, [sp, #20]
 8017e1c:	f173 0300 	sbcs.w	r3, r3, #0
 8017e20:	f2c0 80f0 	blt.w	8018004 <rcl_wait+0x234>
 8017e24:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017e28:	4643      	mov	r3, r8
 8017e2a:	2a00      	cmp	r2, #0
 8017e2c:	f000 8133 	beq.w	8018096 <rcl_wait+0x2c6>
 8017e30:	2400      	movs	r4, #0
 8017e32:	4613      	mov	r3, r2
 8017e34:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80180a8 <rcl_wait+0x2d8>
 8017e38:	46a2      	mov	sl, r4
 8017e3a:	46a3      	mov	fp, r4
 8017e3c:	f240 3921 	movw	r9, #801	@ 0x321
 8017e40:	4632      	mov	r2, r6
 8017e42:	e014      	b.n	8017e6e <rcl_wait+0x9e>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	d1e0      	bne.n	8017e0a <rcl_wait+0x3a>
 8017e48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017e4c:	4542      	cmp	r2, r8
 8017e4e:	eb73 0107 	sbcs.w	r1, r3, r7
 8017e52:	da03      	bge.n	8017e5c <rcl_wait+0x8c>
 8017e54:	4690      	mov	r8, r2
 8017e56:	461f      	mov	r7, r3
 8017e58:	f04f 0b01 	mov.w	fp, #1
 8017e5c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017e5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017e60:	3401      	adds	r4, #1
 8017e62:	f14a 0a00 	adc.w	sl, sl, #0
 8017e66:	429c      	cmp	r4, r3
 8017e68:	f17a 0100 	sbcs.w	r1, sl, #0
 8017e6c:	d228      	bcs.n	8017ec0 <rcl_wait+0xf0>
 8017e6e:	6928      	ldr	r0, [r5, #16]
 8017e70:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017e74:	a908      	add	r1, sp, #32
 8017e76:	00a6      	lsls	r6, r4, #2
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d0f1      	beq.n	8017e60 <rcl_wait+0x90>
 8017e7c:	68eb      	ldr	r3, [r5, #12]
 8017e7e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017e82:	4423      	add	r3, r4
 8017e84:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017e88:	f1be 0f00 	cmp.w	lr, #0
 8017e8c:	d006      	beq.n	8017e9c <rcl_wait+0xcc>
 8017e8e:	6913      	ldr	r3, [r2, #16]
 8017e90:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017e94:	3301      	adds	r3, #1
 8017e96:	6113      	str	r3, [r2, #16]
 8017e98:	692b      	ldr	r3, [r5, #16]
 8017e9a:	5998      	ldr	r0, [r3, r6]
 8017e9c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017ea0:	f7f7 fa40 	bl	800f324 <rcl_timer_get_time_until_next_call>
 8017ea4:	4548      	cmp	r0, r9
 8017ea6:	d1cd      	bne.n	8017e44 <rcl_wait+0x74>
 8017ea8:	692b      	ldr	r3, [r5, #16]
 8017eaa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017eac:	2100      	movs	r1, #0
 8017eae:	5199      	str	r1, [r3, r6]
 8017eb0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017eb2:	3401      	adds	r4, #1
 8017eb4:	f14a 0a00 	adc.w	sl, sl, #0
 8017eb8:	429c      	cmp	r4, r3
 8017eba:	f17a 0100 	sbcs.w	r1, sl, #0
 8017ebe:	d3d6      	bcc.n	8017e6e <rcl_wait+0x9e>
 8017ec0:	4616      	mov	r6, r2
 8017ec2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017ec6:	4313      	orrs	r3, r2
 8017ec8:	46d9      	mov	r9, fp
 8017eca:	f040 80a9 	bne.w	8018020 <rcl_wait+0x250>
 8017ece:	2300      	movs	r3, #0
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017ed6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017eda:	ab08      	add	r3, sp, #32
 8017edc:	9302      	str	r3, [sp, #8]
 8017ede:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017ee0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8017ee4:	e9cd 3200 	strd	r3, r2, [sp]
 8017ee8:	f106 0110 	add.w	r1, r6, #16
 8017eec:	f106 031c 	add.w	r3, r6, #28
 8017ef0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8017ef4:	1d30      	adds	r0, r6, #4
 8017ef6:	f001 fc13 	bl	8019720 <rmw_wait>
 8017efa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017efe:	4680      	mov	r8, r0
 8017f00:	b1ca      	cbz	r2, 8017f36 <rcl_wait+0x166>
 8017f02:	2400      	movs	r4, #0
 8017f04:	4627      	mov	r7, r4
 8017f06:	692a      	ldr	r2, [r5, #16]
 8017f08:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8017f0c:	f10d 011f 	add.w	r1, sp, #31
 8017f10:	00a6      	lsls	r6, r4, #2
 8017f12:	b160      	cbz	r0, 8017f2e <rcl_wait+0x15e>
 8017f14:	f88d 701f 	strb.w	r7, [sp, #31]
 8017f18:	f7f7 f9ca 	bl	800f2b0 <rcl_timer_is_ready>
 8017f1c:	2800      	cmp	r0, #0
 8017f1e:	f47f af74 	bne.w	8017e0a <rcl_wait+0x3a>
 8017f22:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017f26:	b90b      	cbnz	r3, 8017f2c <rcl_wait+0x15c>
 8017f28:	692a      	ldr	r2, [r5, #16]
 8017f2a:	5193      	str	r3, [r2, r6]
 8017f2c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017f2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017f30:	3401      	adds	r4, #1
 8017f32:	42a2      	cmp	r2, r4
 8017f34:	d8e7      	bhi.n	8017f06 <rcl_wait+0x136>
 8017f36:	f038 0002 	bics.w	r0, r8, #2
 8017f3a:	f040 8090 	bne.w	801805e <rcl_wait+0x28e>
 8017f3e:	686e      	ldr	r6, [r5, #4]
 8017f40:	4602      	mov	r2, r0
 8017f42:	b91e      	cbnz	r6, 8017f4c <rcl_wait+0x17c>
 8017f44:	e00d      	b.n	8017f62 <rcl_wait+0x192>
 8017f46:	3201      	adds	r2, #1
 8017f48:	42b2      	cmp	r2, r6
 8017f4a:	d00a      	beq.n	8017f62 <rcl_wait+0x192>
 8017f4c:	6899      	ldr	r1, [r3, #8]
 8017f4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f52:	2900      	cmp	r1, #0
 8017f54:	d1f7      	bne.n	8017f46 <rcl_wait+0x176>
 8017f56:	682c      	ldr	r4, [r5, #0]
 8017f58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f5c:	3201      	adds	r2, #1
 8017f5e:	42b2      	cmp	r2, r6
 8017f60:	d1f4      	bne.n	8017f4c <rcl_wait+0x17c>
 8017f62:	68ee      	ldr	r6, [r5, #12]
 8017f64:	2200      	movs	r2, #0
 8017f66:	b91e      	cbnz	r6, 8017f70 <rcl_wait+0x1a0>
 8017f68:	e00d      	b.n	8017f86 <rcl_wait+0x1b6>
 8017f6a:	3201      	adds	r2, #1
 8017f6c:	42b2      	cmp	r2, r6
 8017f6e:	d00a      	beq.n	8017f86 <rcl_wait+0x1b6>
 8017f70:	6959      	ldr	r1, [r3, #20]
 8017f72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f76:	2900      	cmp	r1, #0
 8017f78:	d1f7      	bne.n	8017f6a <rcl_wait+0x19a>
 8017f7a:	68ac      	ldr	r4, [r5, #8]
 8017f7c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f80:	3201      	adds	r2, #1
 8017f82:	42b2      	cmp	r2, r6
 8017f84:	d1f4      	bne.n	8017f70 <rcl_wait+0x1a0>
 8017f86:	69ee      	ldr	r6, [r5, #28]
 8017f88:	2200      	movs	r2, #0
 8017f8a:	b91e      	cbnz	r6, 8017f94 <rcl_wait+0x1c4>
 8017f8c:	e00d      	b.n	8017faa <rcl_wait+0x1da>
 8017f8e:	3201      	adds	r2, #1
 8017f90:	42b2      	cmp	r2, r6
 8017f92:	d00a      	beq.n	8017faa <rcl_wait+0x1da>
 8017f94:	6a19      	ldr	r1, [r3, #32]
 8017f96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f9a:	2900      	cmp	r1, #0
 8017f9c:	d1f7      	bne.n	8017f8e <rcl_wait+0x1be>
 8017f9e:	69ac      	ldr	r4, [r5, #24]
 8017fa0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017fa4:	3201      	adds	r2, #1
 8017fa6:	42b2      	cmp	r2, r6
 8017fa8:	d1f4      	bne.n	8017f94 <rcl_wait+0x1c4>
 8017faa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8017fac:	2200      	movs	r2, #0
 8017fae:	b91e      	cbnz	r6, 8017fb8 <rcl_wait+0x1e8>
 8017fb0:	e00d      	b.n	8017fce <rcl_wait+0x1fe>
 8017fb2:	3201      	adds	r2, #1
 8017fb4:	4296      	cmp	r6, r2
 8017fb6:	d00a      	beq.n	8017fce <rcl_wait+0x1fe>
 8017fb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017fba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fbe:	2900      	cmp	r1, #0
 8017fc0:	d1f7      	bne.n	8017fb2 <rcl_wait+0x1e2>
 8017fc2:	6a2c      	ldr	r4, [r5, #32]
 8017fc4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017fc8:	3201      	adds	r2, #1
 8017fca:	4296      	cmp	r6, r2
 8017fcc:	d1f4      	bne.n	8017fb8 <rcl_wait+0x1e8>
 8017fce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	b91e      	cbnz	r6, 8017fdc <rcl_wait+0x20c>
 8017fd4:	e00d      	b.n	8017ff2 <rcl_wait+0x222>
 8017fd6:	3201      	adds	r2, #1
 8017fd8:	42b2      	cmp	r2, r6
 8017fda:	d00a      	beq.n	8017ff2 <rcl_wait+0x222>
 8017fdc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017fde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fe2:	2900      	cmp	r1, #0
 8017fe4:	d1f7      	bne.n	8017fd6 <rcl_wait+0x206>
 8017fe6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8017fe8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017fec:	3201      	adds	r2, #1
 8017fee:	42b2      	cmp	r2, r6
 8017ff0:	d1f4      	bne.n	8017fdc <rcl_wait+0x20c>
 8017ff2:	f1b8 0f02 	cmp.w	r8, #2
 8017ff6:	f47f af08 	bne.w	8017e0a <rcl_wait+0x3a>
 8017ffa:	464b      	mov	r3, r9
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	bf08      	it	eq
 8018000:	2002      	moveq	r0, #2
 8018002:	e702      	b.n	8017e0a <rcl_wait+0x3a>
 8018004:	2a00      	cmp	r2, #0
 8018006:	d03a      	beq.n	801807e <rcl_wait+0x2ae>
 8018008:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801800c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018010:	e70e      	b.n	8017e30 <rcl_wait+0x60>
 8018012:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018016:	b00d      	add	sp, #52	@ 0x34
 8018018:	ecbd 8b02 	vpop	{d8}
 801801c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018020:	9b04      	ldr	r3, [sp, #16]
 8018022:	2b01      	cmp	r3, #1
 8018024:	9b05      	ldr	r3, [sp, #20]
 8018026:	f173 0300 	sbcs.w	r3, r3, #0
 801802a:	db24      	blt.n	8018076 <rcl_wait+0x2a6>
 801802c:	2f00      	cmp	r7, #0
 801802e:	bfbc      	itt	lt
 8018030:	f04f 0800 	movlt.w	r8, #0
 8018034:	4647      	movlt	r7, r8
 8018036:	a31e      	add	r3, pc, #120	@ (adr r3, 80180b0 <rcl_wait+0x2e0>)
 8018038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803c:	4640      	mov	r0, r8
 801803e:	4639      	mov	r1, r7
 8018040:	f7e8 fd6c 	bl	8000b1c <__aeabi_ldivmod>
 8018044:	a31a      	add	r3, pc, #104	@ (adr r3, 80180b0 <rcl_wait+0x2e0>)
 8018046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801804e:	4640      	mov	r0, r8
 8018050:	4639      	mov	r1, r7
 8018052:	f7e8 fd63 	bl	8000b1c <__aeabi_ldivmod>
 8018056:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801805a:	ab08      	add	r3, sp, #32
 801805c:	e73e      	b.n	8017edc <rcl_wait+0x10c>
 801805e:	2001      	movs	r0, #1
 8018060:	b00d      	add	sp, #52	@ 0x34
 8018062:	ecbd 8b02 	vpop	{d8}
 8018066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801806a:	200b      	movs	r0, #11
 801806c:	b00d      	add	sp, #52	@ 0x34
 801806e:	ecbd 8b02 	vpop	{d8}
 8018072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018076:	465b      	mov	r3, fp
 8018078:	2b00      	cmp	r3, #0
 801807a:	d1d7      	bne.n	801802c <rcl_wait+0x25c>
 801807c:	e72e      	b.n	8017edc <rcl_wait+0x10c>
 801807e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018082:	430b      	orrs	r3, r1
 8018084:	bf08      	it	eq
 8018086:	4691      	moveq	r9, r2
 8018088:	f43f af21 	beq.w	8017ece <rcl_wait+0xfe>
 801808c:	9b04      	ldr	r3, [sp, #16]
 801808e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8018092:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8018096:	2b01      	cmp	r3, #1
 8018098:	9b05      	ldr	r3, [sp, #20]
 801809a:	f173 0300 	sbcs.w	r3, r3, #0
 801809e:	f04f 0300 	mov.w	r3, #0
 80180a2:	4699      	mov	r9, r3
 80180a4:	dac2      	bge.n	801802c <rcl_wait+0x25c>
 80180a6:	e719      	b.n	8017edc <rcl_wait+0x10c>
 80180a8:	ffffffff 	.word	0xffffffff
 80180ac:	7fffffff 	.word	0x7fffffff
 80180b0:	3b9aca00 	.word	0x3b9aca00
 80180b4:	00000000 	.word	0x00000000

080180b8 <rcl_action_take_goal_response>:
 80180b8:	2800      	cmp	r0, #0
 80180ba:	d039      	beq.n	8018130 <rcl_action_take_goal_response+0x78>
 80180bc:	b570      	push	{r4, r5, r6, lr}
 80180be:	4604      	mov	r4, r0
 80180c0:	6800      	ldr	r0, [r0, #0]
 80180c2:	b380      	cbz	r0, 8018126 <rcl_action_take_goal_response+0x6e>
 80180c4:	460d      	mov	r5, r1
 80180c6:	4616      	mov	r6, r2
 80180c8:	f7fe fd2e 	bl	8016b28 <rcl_client_is_valid>
 80180cc:	b330      	cbz	r0, 801811c <rcl_action_take_goal_response+0x64>
 80180ce:	6820      	ldr	r0, [r4, #0]
 80180d0:	3004      	adds	r0, #4
 80180d2:	f7fe fd29 	bl	8016b28 <rcl_client_is_valid>
 80180d6:	b308      	cbz	r0, 801811c <rcl_action_take_goal_response+0x64>
 80180d8:	6820      	ldr	r0, [r4, #0]
 80180da:	3008      	adds	r0, #8
 80180dc:	f7fe fd24 	bl	8016b28 <rcl_client_is_valid>
 80180e0:	b1e0      	cbz	r0, 801811c <rcl_action_take_goal_response+0x64>
 80180e2:	6820      	ldr	r0, [r4, #0]
 80180e4:	300c      	adds	r0, #12
 80180e6:	f7f6 fed5 	bl	800ee94 <rcl_subscription_is_valid>
 80180ea:	b1b8      	cbz	r0, 801811c <rcl_action_take_goal_response+0x64>
 80180ec:	6820      	ldr	r0, [r4, #0]
 80180ee:	3010      	adds	r0, #16
 80180f0:	f7f6 fed0 	bl	800ee94 <rcl_subscription_is_valid>
 80180f4:	b190      	cbz	r0, 801811c <rcl_action_take_goal_response+0x64>
 80180f6:	b1cd      	cbz	r5, 801812c <rcl_action_take_goal_response+0x74>
 80180f8:	b1c6      	cbz	r6, 801812c <rcl_action_take_goal_response+0x74>
 80180fa:	6820      	ldr	r0, [r4, #0]
 80180fc:	4632      	mov	r2, r6
 80180fe:	4629      	mov	r1, r5
 8018100:	f7fe fcca 	bl	8016a98 <rcl_take_response>
 8018104:	b148      	cbz	r0, 801811a <rcl_action_take_goal_response+0x62>
 8018106:	280a      	cmp	r0, #10
 8018108:	d007      	beq.n	801811a <rcl_action_take_goal_response+0x62>
 801810a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801810e:	f640 0337 	movw	r3, #2103	@ 0x837
 8018112:	4290      	cmp	r0, r2
 8018114:	bf0c      	ite	eq
 8018116:	4618      	moveq	r0, r3
 8018118:	2001      	movne	r0, #1
 801811a:	bd70      	pop	{r4, r5, r6, pc}
 801811c:	f7f8 fa04 	bl	8010528 <rcutils_reset_error>
 8018120:	f640 0036 	movw	r0, #2102	@ 0x836
 8018124:	bd70      	pop	{r4, r5, r6, pc}
 8018126:	f640 0036 	movw	r0, #2102	@ 0x836
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	200b      	movs	r0, #11
 801812e:	bd70      	pop	{r4, r5, r6, pc}
 8018130:	f640 0036 	movw	r0, #2102	@ 0x836
 8018134:	4770      	bx	lr
 8018136:	bf00      	nop

08018138 <rcl_action_send_result_request>:
 8018138:	b390      	cbz	r0, 80181a0 <rcl_action_send_result_request+0x68>
 801813a:	b570      	push	{r4, r5, r6, lr}
 801813c:	4604      	mov	r4, r0
 801813e:	6800      	ldr	r0, [r0, #0]
 8018140:	b348      	cbz	r0, 8018196 <rcl_action_send_result_request+0x5e>
 8018142:	460d      	mov	r5, r1
 8018144:	4616      	mov	r6, r2
 8018146:	f7fe fcef 	bl	8016b28 <rcl_client_is_valid>
 801814a:	b1f8      	cbz	r0, 801818c <rcl_action_send_result_request+0x54>
 801814c:	6820      	ldr	r0, [r4, #0]
 801814e:	3004      	adds	r0, #4
 8018150:	f7fe fcea 	bl	8016b28 <rcl_client_is_valid>
 8018154:	b1d0      	cbz	r0, 801818c <rcl_action_send_result_request+0x54>
 8018156:	6820      	ldr	r0, [r4, #0]
 8018158:	3008      	adds	r0, #8
 801815a:	f7fe fce5 	bl	8016b28 <rcl_client_is_valid>
 801815e:	b1a8      	cbz	r0, 801818c <rcl_action_send_result_request+0x54>
 8018160:	6820      	ldr	r0, [r4, #0]
 8018162:	300c      	adds	r0, #12
 8018164:	f7f6 fe96 	bl	800ee94 <rcl_subscription_is_valid>
 8018168:	b180      	cbz	r0, 801818c <rcl_action_send_result_request+0x54>
 801816a:	6820      	ldr	r0, [r4, #0]
 801816c:	3010      	adds	r0, #16
 801816e:	f7f6 fe91 	bl	800ee94 <rcl_subscription_is_valid>
 8018172:	b158      	cbz	r0, 801818c <rcl_action_send_result_request+0x54>
 8018174:	b195      	cbz	r5, 801819c <rcl_action_send_result_request+0x64>
 8018176:	b18e      	cbz	r6, 801819c <rcl_action_send_result_request+0x64>
 8018178:	6820      	ldr	r0, [r4, #0]
 801817a:	4632      	mov	r2, r6
 801817c:	4629      	mov	r1, r5
 801817e:	3008      	adds	r0, #8
 8018180:	f7fe fc52 	bl	8016a28 <rcl_send_request>
 8018184:	3800      	subs	r0, #0
 8018186:	bf18      	it	ne
 8018188:	2001      	movne	r0, #1
 801818a:	bd70      	pop	{r4, r5, r6, pc}
 801818c:	f7f8 f9cc 	bl	8010528 <rcutils_reset_error>
 8018190:	f640 0036 	movw	r0, #2102	@ 0x836
 8018194:	bd70      	pop	{r4, r5, r6, pc}
 8018196:	f640 0036 	movw	r0, #2102	@ 0x836
 801819a:	bd70      	pop	{r4, r5, r6, pc}
 801819c:	200b      	movs	r0, #11
 801819e:	bd70      	pop	{r4, r5, r6, pc}
 80181a0:	f640 0036 	movw	r0, #2102	@ 0x836
 80181a4:	4770      	bx	lr
 80181a6:	bf00      	nop

080181a8 <rcl_action_take_result_response>:
 80181a8:	2800      	cmp	r0, #0
 80181aa:	d03a      	beq.n	8018222 <rcl_action_take_result_response+0x7a>
 80181ac:	b570      	push	{r4, r5, r6, lr}
 80181ae:	4604      	mov	r4, r0
 80181b0:	6800      	ldr	r0, [r0, #0]
 80181b2:	b388      	cbz	r0, 8018218 <rcl_action_take_result_response+0x70>
 80181b4:	460d      	mov	r5, r1
 80181b6:	4616      	mov	r6, r2
 80181b8:	f7fe fcb6 	bl	8016b28 <rcl_client_is_valid>
 80181bc:	b338      	cbz	r0, 801820e <rcl_action_take_result_response+0x66>
 80181be:	6820      	ldr	r0, [r4, #0]
 80181c0:	3004      	adds	r0, #4
 80181c2:	f7fe fcb1 	bl	8016b28 <rcl_client_is_valid>
 80181c6:	b310      	cbz	r0, 801820e <rcl_action_take_result_response+0x66>
 80181c8:	6820      	ldr	r0, [r4, #0]
 80181ca:	3008      	adds	r0, #8
 80181cc:	f7fe fcac 	bl	8016b28 <rcl_client_is_valid>
 80181d0:	b1e8      	cbz	r0, 801820e <rcl_action_take_result_response+0x66>
 80181d2:	6820      	ldr	r0, [r4, #0]
 80181d4:	300c      	adds	r0, #12
 80181d6:	f7f6 fe5d 	bl	800ee94 <rcl_subscription_is_valid>
 80181da:	b1c0      	cbz	r0, 801820e <rcl_action_take_result_response+0x66>
 80181dc:	6820      	ldr	r0, [r4, #0]
 80181de:	3010      	adds	r0, #16
 80181e0:	f7f6 fe58 	bl	800ee94 <rcl_subscription_is_valid>
 80181e4:	b198      	cbz	r0, 801820e <rcl_action_take_result_response+0x66>
 80181e6:	b1d5      	cbz	r5, 801821e <rcl_action_take_result_response+0x76>
 80181e8:	b1ce      	cbz	r6, 801821e <rcl_action_take_result_response+0x76>
 80181ea:	6820      	ldr	r0, [r4, #0]
 80181ec:	4632      	mov	r2, r6
 80181ee:	4629      	mov	r1, r5
 80181f0:	3008      	adds	r0, #8
 80181f2:	f7fe fc51 	bl	8016a98 <rcl_take_response>
 80181f6:	b148      	cbz	r0, 801820c <rcl_action_take_result_response+0x64>
 80181f8:	280a      	cmp	r0, #10
 80181fa:	d007      	beq.n	801820c <rcl_action_take_result_response+0x64>
 80181fc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018200:	f640 0337 	movw	r3, #2103	@ 0x837
 8018204:	4290      	cmp	r0, r2
 8018206:	bf0c      	ite	eq
 8018208:	4618      	moveq	r0, r3
 801820a:	2001      	movne	r0, #1
 801820c:	bd70      	pop	{r4, r5, r6, pc}
 801820e:	f7f8 f98b 	bl	8010528 <rcutils_reset_error>
 8018212:	f640 0036 	movw	r0, #2102	@ 0x836
 8018216:	bd70      	pop	{r4, r5, r6, pc}
 8018218:	f640 0036 	movw	r0, #2102	@ 0x836
 801821c:	bd70      	pop	{r4, r5, r6, pc}
 801821e:	200b      	movs	r0, #11
 8018220:	bd70      	pop	{r4, r5, r6, pc}
 8018222:	f640 0036 	movw	r0, #2102	@ 0x836
 8018226:	4770      	bx	lr

08018228 <rcl_action_take_cancel_response>:
 8018228:	2800      	cmp	r0, #0
 801822a:	d03a      	beq.n	80182a2 <rcl_action_take_cancel_response+0x7a>
 801822c:	b570      	push	{r4, r5, r6, lr}
 801822e:	4604      	mov	r4, r0
 8018230:	6800      	ldr	r0, [r0, #0]
 8018232:	b388      	cbz	r0, 8018298 <rcl_action_take_cancel_response+0x70>
 8018234:	460d      	mov	r5, r1
 8018236:	4616      	mov	r6, r2
 8018238:	f7fe fc76 	bl	8016b28 <rcl_client_is_valid>
 801823c:	b338      	cbz	r0, 801828e <rcl_action_take_cancel_response+0x66>
 801823e:	6820      	ldr	r0, [r4, #0]
 8018240:	3004      	adds	r0, #4
 8018242:	f7fe fc71 	bl	8016b28 <rcl_client_is_valid>
 8018246:	b310      	cbz	r0, 801828e <rcl_action_take_cancel_response+0x66>
 8018248:	6820      	ldr	r0, [r4, #0]
 801824a:	3008      	adds	r0, #8
 801824c:	f7fe fc6c 	bl	8016b28 <rcl_client_is_valid>
 8018250:	b1e8      	cbz	r0, 801828e <rcl_action_take_cancel_response+0x66>
 8018252:	6820      	ldr	r0, [r4, #0]
 8018254:	300c      	adds	r0, #12
 8018256:	f7f6 fe1d 	bl	800ee94 <rcl_subscription_is_valid>
 801825a:	b1c0      	cbz	r0, 801828e <rcl_action_take_cancel_response+0x66>
 801825c:	6820      	ldr	r0, [r4, #0]
 801825e:	3010      	adds	r0, #16
 8018260:	f7f6 fe18 	bl	800ee94 <rcl_subscription_is_valid>
 8018264:	b198      	cbz	r0, 801828e <rcl_action_take_cancel_response+0x66>
 8018266:	b1d5      	cbz	r5, 801829e <rcl_action_take_cancel_response+0x76>
 8018268:	b1ce      	cbz	r6, 801829e <rcl_action_take_cancel_response+0x76>
 801826a:	6820      	ldr	r0, [r4, #0]
 801826c:	4632      	mov	r2, r6
 801826e:	4629      	mov	r1, r5
 8018270:	3004      	adds	r0, #4
 8018272:	f7fe fc11 	bl	8016a98 <rcl_take_response>
 8018276:	b148      	cbz	r0, 801828c <rcl_action_take_cancel_response+0x64>
 8018278:	280a      	cmp	r0, #10
 801827a:	d007      	beq.n	801828c <rcl_action_take_cancel_response+0x64>
 801827c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018280:	f640 0337 	movw	r3, #2103	@ 0x837
 8018284:	4290      	cmp	r0, r2
 8018286:	bf0c      	ite	eq
 8018288:	4618      	moveq	r0, r3
 801828a:	2001      	movne	r0, #1
 801828c:	bd70      	pop	{r4, r5, r6, pc}
 801828e:	f7f8 f94b 	bl	8010528 <rcutils_reset_error>
 8018292:	f640 0036 	movw	r0, #2102	@ 0x836
 8018296:	bd70      	pop	{r4, r5, r6, pc}
 8018298:	f640 0036 	movw	r0, #2102	@ 0x836
 801829c:	bd70      	pop	{r4, r5, r6, pc}
 801829e:	200b      	movs	r0, #11
 80182a0:	bd70      	pop	{r4, r5, r6, pc}
 80182a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80182a6:	4770      	bx	lr

080182a8 <rcl_action_take_feedback>:
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d038      	beq.n	801831e <rcl_action_take_feedback+0x76>
 80182ac:	b530      	push	{r4, r5, lr}
 80182ae:	4604      	mov	r4, r0
 80182b0:	6800      	ldr	r0, [r0, #0]
 80182b2:	b091      	sub	sp, #68	@ 0x44
 80182b4:	b378      	cbz	r0, 8018316 <rcl_action_take_feedback+0x6e>
 80182b6:	460d      	mov	r5, r1
 80182b8:	f7fe fc36 	bl	8016b28 <rcl_client_is_valid>
 80182bc:	b328      	cbz	r0, 801830a <rcl_action_take_feedback+0x62>
 80182be:	6820      	ldr	r0, [r4, #0]
 80182c0:	3004      	adds	r0, #4
 80182c2:	f7fe fc31 	bl	8016b28 <rcl_client_is_valid>
 80182c6:	b300      	cbz	r0, 801830a <rcl_action_take_feedback+0x62>
 80182c8:	6820      	ldr	r0, [r4, #0]
 80182ca:	3008      	adds	r0, #8
 80182cc:	f7fe fc2c 	bl	8016b28 <rcl_client_is_valid>
 80182d0:	b1d8      	cbz	r0, 801830a <rcl_action_take_feedback+0x62>
 80182d2:	6820      	ldr	r0, [r4, #0]
 80182d4:	300c      	adds	r0, #12
 80182d6:	f7f6 fddd 	bl	800ee94 <rcl_subscription_is_valid>
 80182da:	b1b0      	cbz	r0, 801830a <rcl_action_take_feedback+0x62>
 80182dc:	6820      	ldr	r0, [r4, #0]
 80182de:	3010      	adds	r0, #16
 80182e0:	f7f6 fdd8 	bl	800ee94 <rcl_subscription_is_valid>
 80182e4:	b188      	cbz	r0, 801830a <rcl_action_take_feedback+0x62>
 80182e6:	b1ed      	cbz	r5, 8018324 <rcl_action_take_feedback+0x7c>
 80182e8:	6820      	ldr	r0, [r4, #0]
 80182ea:	2300      	movs	r3, #0
 80182ec:	466a      	mov	r2, sp
 80182ee:	4629      	mov	r1, r5
 80182f0:	300c      	adds	r0, #12
 80182f2:	f7f6 fd71 	bl	800edd8 <rcl_take>
 80182f6:	b160      	cbz	r0, 8018312 <rcl_action_take_feedback+0x6a>
 80182f8:	f240 1391 	movw	r3, #401	@ 0x191
 80182fc:	4298      	cmp	r0, r3
 80182fe:	d014      	beq.n	801832a <rcl_action_take_feedback+0x82>
 8018300:	280a      	cmp	r0, #10
 8018302:	bf18      	it	ne
 8018304:	2001      	movne	r0, #1
 8018306:	b011      	add	sp, #68	@ 0x44
 8018308:	bd30      	pop	{r4, r5, pc}
 801830a:	f7f8 f90d 	bl	8010528 <rcutils_reset_error>
 801830e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018312:	b011      	add	sp, #68	@ 0x44
 8018314:	bd30      	pop	{r4, r5, pc}
 8018316:	f640 0036 	movw	r0, #2102	@ 0x836
 801831a:	b011      	add	sp, #68	@ 0x44
 801831c:	bd30      	pop	{r4, r5, pc}
 801831e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018322:	4770      	bx	lr
 8018324:	200b      	movs	r0, #11
 8018326:	b011      	add	sp, #68	@ 0x44
 8018328:	bd30      	pop	{r4, r5, pc}
 801832a:	f640 0037 	movw	r0, #2103	@ 0x837
 801832e:	e7f0      	b.n	8018312 <rcl_action_take_feedback+0x6a>

08018330 <rcl_action_wait_set_add_action_client>:
 8018330:	2800      	cmp	r0, #0
 8018332:	d048      	beq.n	80183c6 <rcl_action_wait_set_add_action_client+0x96>
 8018334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018336:	460c      	mov	r4, r1
 8018338:	2900      	cmp	r1, #0
 801833a:	d03c      	beq.n	80183b6 <rcl_action_wait_set_add_action_client+0x86>
 801833c:	4605      	mov	r5, r0
 801833e:	6808      	ldr	r0, [r1, #0]
 8018340:	2800      	cmp	r0, #0
 8018342:	d038      	beq.n	80183b6 <rcl_action_wait_set_add_action_client+0x86>
 8018344:	4617      	mov	r7, r2
 8018346:	461e      	mov	r6, r3
 8018348:	f7fe fbee 	bl	8016b28 <rcl_client_is_valid>
 801834c:	b3b0      	cbz	r0, 80183bc <rcl_action_wait_set_add_action_client+0x8c>
 801834e:	6820      	ldr	r0, [r4, #0]
 8018350:	3004      	adds	r0, #4
 8018352:	f7fe fbe9 	bl	8016b28 <rcl_client_is_valid>
 8018356:	b388      	cbz	r0, 80183bc <rcl_action_wait_set_add_action_client+0x8c>
 8018358:	6820      	ldr	r0, [r4, #0]
 801835a:	3008      	adds	r0, #8
 801835c:	f7fe fbe4 	bl	8016b28 <rcl_client_is_valid>
 8018360:	b360      	cbz	r0, 80183bc <rcl_action_wait_set_add_action_client+0x8c>
 8018362:	6820      	ldr	r0, [r4, #0]
 8018364:	300c      	adds	r0, #12
 8018366:	f7f6 fd95 	bl	800ee94 <rcl_subscription_is_valid>
 801836a:	b338      	cbz	r0, 80183bc <rcl_action_wait_set_add_action_client+0x8c>
 801836c:	6820      	ldr	r0, [r4, #0]
 801836e:	3010      	adds	r0, #16
 8018370:	f7f6 fd90 	bl	800ee94 <rcl_subscription_is_valid>
 8018374:	b310      	cbz	r0, 80183bc <rcl_action_wait_set_add_action_client+0x8c>
 8018376:	6821      	ldr	r1, [r4, #0]
 8018378:	4628      	mov	r0, r5
 801837a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801837e:	f7ff fccd 	bl	8017d1c <rcl_wait_set_add_client>
 8018382:	b9b8      	cbnz	r0, 80183b4 <rcl_action_wait_set_add_action_client+0x84>
 8018384:	6821      	ldr	r1, [r4, #0]
 8018386:	4628      	mov	r0, r5
 8018388:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801838c:	3104      	adds	r1, #4
 801838e:	f7ff fcc5 	bl	8017d1c <rcl_wait_set_add_client>
 8018392:	b978      	cbnz	r0, 80183b4 <rcl_action_wait_set_add_action_client+0x84>
 8018394:	6821      	ldr	r1, [r4, #0]
 8018396:	4628      	mov	r0, r5
 8018398:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801839c:	3108      	adds	r1, #8
 801839e:	f7ff fcbd 	bl	8017d1c <rcl_wait_set_add_client>
 80183a2:	b938      	cbnz	r0, 80183b4 <rcl_action_wait_set_add_action_client+0x84>
 80183a4:	6821      	ldr	r1, [r4, #0]
 80183a6:	4628      	mov	r0, r5
 80183a8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80183ac:	310c      	adds	r1, #12
 80183ae:	f7ff f96d 	bl	801768c <rcl_wait_set_add_subscription>
 80183b2:	b158      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x9c>
 80183b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80183ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183bc:	f7f8 f8b4 	bl	8010528 <rcutils_reset_error>
 80183c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80183c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80183ca:	4770      	bx	lr
 80183cc:	6821      	ldr	r1, [r4, #0]
 80183ce:	4628      	mov	r0, r5
 80183d0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80183d4:	3110      	adds	r1, #16
 80183d6:	f7ff f959 	bl	801768c <rcl_wait_set_add_subscription>
 80183da:	2800      	cmp	r0, #0
 80183dc:	d1ea      	bne.n	80183b4 <rcl_action_wait_set_add_action_client+0x84>
 80183de:	b11f      	cbz	r7, 80183e8 <rcl_action_wait_set_add_action_client+0xb8>
 80183e0:	6823      	ldr	r3, [r4, #0]
 80183e2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80183e6:	603b      	str	r3, [r7, #0]
 80183e8:	2e00      	cmp	r6, #0
 80183ea:	d0e3      	beq.n	80183b4 <rcl_action_wait_set_add_action_client+0x84>
 80183ec:	6823      	ldr	r3, [r4, #0]
 80183ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80183f2:	6033      	str	r3, [r6, #0]
 80183f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183f6:	bf00      	nop

080183f8 <rcl_action_client_wait_set_get_entities_ready>:
 80183f8:	2800      	cmp	r0, #0
 80183fa:	f000 808d 	beq.w	8018518 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80183fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018402:	460c      	mov	r4, r1
 8018404:	2900      	cmp	r1, #0
 8018406:	d077      	beq.n	80184f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018408:	4605      	mov	r5, r0
 801840a:	6808      	ldr	r0, [r1, #0]
 801840c:	2800      	cmp	r0, #0
 801840e:	d073      	beq.n	80184f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8018410:	4616      	mov	r6, r2
 8018412:	461f      	mov	r7, r3
 8018414:	f7fe fb88 	bl	8016b28 <rcl_client_is_valid>
 8018418:	2800      	cmp	r0, #0
 801841a:	d071      	beq.n	8018500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801841c:	6820      	ldr	r0, [r4, #0]
 801841e:	3004      	adds	r0, #4
 8018420:	f7fe fb82 	bl	8016b28 <rcl_client_is_valid>
 8018424:	2800      	cmp	r0, #0
 8018426:	d06b      	beq.n	8018500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018428:	6820      	ldr	r0, [r4, #0]
 801842a:	3008      	adds	r0, #8
 801842c:	f7fe fb7c 	bl	8016b28 <rcl_client_is_valid>
 8018430:	2800      	cmp	r0, #0
 8018432:	d065      	beq.n	8018500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018434:	6820      	ldr	r0, [r4, #0]
 8018436:	300c      	adds	r0, #12
 8018438:	f7f6 fd2c 	bl	800ee94 <rcl_subscription_is_valid>
 801843c:	2800      	cmp	r0, #0
 801843e:	d05f      	beq.n	8018500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018440:	6820      	ldr	r0, [r4, #0]
 8018442:	3010      	adds	r0, #16
 8018444:	f7f6 fd26 	bl	800ee94 <rcl_subscription_is_valid>
 8018448:	2800      	cmp	r0, #0
 801844a:	d059      	beq.n	8018500 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801844c:	2e00      	cmp	r6, #0
 801844e:	d060      	beq.n	8018512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018450:	2f00      	cmp	r7, #0
 8018452:	d05e      	beq.n	8018512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018454:	9b06      	ldr	r3, [sp, #24]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d05b      	beq.n	8018512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801845a:	9b07      	ldr	r3, [sp, #28]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d058      	beq.n	8018512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018460:	9b08      	ldr	r3, [sp, #32]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d055      	beq.n	8018512 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	686a      	ldr	r2, [r5, #4]
 801846a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801846e:	428a      	cmp	r2, r1
 8018470:	d94c      	bls.n	801850c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018472:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8018476:	4282      	cmp	r2, r0
 8018478:	d948      	bls.n	801850c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801847a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801847e:	69ea      	ldr	r2, [r5, #28]
 8018480:	42a2      	cmp	r2, r4
 8018482:	d943      	bls.n	801850c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018484:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018488:	4562      	cmp	r2, ip
 801848a:	d93f      	bls.n	801850c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801848c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8018490:	4572      	cmp	r2, lr
 8018492:	d93b      	bls.n	801850c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018494:	69aa      	ldr	r2, [r5, #24]
 8018496:	682d      	ldr	r5, [r5, #0]
 8018498:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801849c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80184a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80184a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80184a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80184ac:	f103 0c0c 	add.w	ip, r3, #12
 80184b0:	eba5 050c 	sub.w	r5, r5, ip
 80184b4:	fab5 f585 	clz	r5, r5
 80184b8:	096d      	lsrs	r5, r5, #5
 80184ba:	7035      	strb	r5, [r6, #0]
 80184bc:	f103 0510 	add.w	r5, r3, #16
 80184c0:	1b64      	subs	r4, r4, r5
 80184c2:	fab4 f484 	clz	r4, r4
 80184c6:	0964      	lsrs	r4, r4, #5
 80184c8:	703c      	strb	r4, [r7, #0]
 80184ca:	eba3 0008 	sub.w	r0, r3, r8
 80184ce:	1d1c      	adds	r4, r3, #4
 80184d0:	3308      	adds	r3, #8
 80184d2:	1ad3      	subs	r3, r2, r3
 80184d4:	fab0 f080 	clz	r0, r0
 80184d8:	9a06      	ldr	r2, [sp, #24]
 80184da:	0940      	lsrs	r0, r0, #5
 80184dc:	1b09      	subs	r1, r1, r4
 80184de:	7010      	strb	r0, [r2, #0]
 80184e0:	fab1 f181 	clz	r1, r1
 80184e4:	9a07      	ldr	r2, [sp, #28]
 80184e6:	0949      	lsrs	r1, r1, #5
 80184e8:	7011      	strb	r1, [r2, #0]
 80184ea:	fab3 f383 	clz	r3, r3
 80184ee:	9a08      	ldr	r2, [sp, #32]
 80184f0:	095b      	lsrs	r3, r3, #5
 80184f2:	2000      	movs	r0, #0
 80184f4:	7013      	strb	r3, [r2, #0]
 80184f6:	e001      	b.n	80184fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80184f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80184fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018500:	f7f8 f812 	bl	8010528 <rcutils_reset_error>
 8018504:	f640 0036 	movw	r0, #2102	@ 0x836
 8018508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801850c:	2001      	movs	r0, #1
 801850e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018512:	200b      	movs	r0, #11
 8018514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018518:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801851c:	4770      	bx	lr
 801851e:	bf00      	nop

08018520 <rcl_action_take_goal_request>:
 8018520:	2800      	cmp	r0, #0
 8018522:	d039      	beq.n	8018598 <rcl_action_take_goal_request+0x78>
 8018524:	b570      	push	{r4, r5, r6, lr}
 8018526:	4604      	mov	r4, r0
 8018528:	6800      	ldr	r0, [r0, #0]
 801852a:	b380      	cbz	r0, 801858e <rcl_action_take_goal_request+0x6e>
 801852c:	460d      	mov	r5, r1
 801852e:	4616      	mov	r6, r2
 8018530:	f7fe fe5a 	bl	80171e8 <rcl_service_is_valid>
 8018534:	b330      	cbz	r0, 8018584 <rcl_action_take_goal_request+0x64>
 8018536:	6820      	ldr	r0, [r4, #0]
 8018538:	3004      	adds	r0, #4
 801853a:	f7fe fe55 	bl	80171e8 <rcl_service_is_valid>
 801853e:	b308      	cbz	r0, 8018584 <rcl_action_take_goal_request+0x64>
 8018540:	6820      	ldr	r0, [r4, #0]
 8018542:	3008      	adds	r0, #8
 8018544:	f7fe fe50 	bl	80171e8 <rcl_service_is_valid>
 8018548:	b1e0      	cbz	r0, 8018584 <rcl_action_take_goal_request+0x64>
 801854a:	6820      	ldr	r0, [r4, #0]
 801854c:	300c      	adds	r0, #12
 801854e:	f7f6 faf1 	bl	800eb34 <rcl_publisher_is_valid>
 8018552:	b1b8      	cbz	r0, 8018584 <rcl_action_take_goal_request+0x64>
 8018554:	6820      	ldr	r0, [r4, #0]
 8018556:	3010      	adds	r0, #16
 8018558:	f7f6 faec 	bl	800eb34 <rcl_publisher_is_valid>
 801855c:	b190      	cbz	r0, 8018584 <rcl_action_take_goal_request+0x64>
 801855e:	b1cd      	cbz	r5, 8018594 <rcl_action_take_goal_request+0x74>
 8018560:	b1c6      	cbz	r6, 8018594 <rcl_action_take_goal_request+0x74>
 8018562:	6820      	ldr	r0, [r4, #0]
 8018564:	4632      	mov	r2, r6
 8018566:	4629      	mov	r1, r5
 8018568:	f7fe fde6 	bl	8017138 <rcl_take_request>
 801856c:	b148      	cbz	r0, 8018582 <rcl_action_take_goal_request+0x62>
 801856e:	280a      	cmp	r0, #10
 8018570:	d007      	beq.n	8018582 <rcl_action_take_goal_request+0x62>
 8018572:	f240 2259 	movw	r2, #601	@ 0x259
 8018576:	f640 0399 	movw	r3, #2201	@ 0x899
 801857a:	4290      	cmp	r0, r2
 801857c:	bf0c      	ite	eq
 801857e:	4618      	moveq	r0, r3
 8018580:	2001      	movne	r0, #1
 8018582:	bd70      	pop	{r4, r5, r6, pc}
 8018584:	f7f7 ffd0 	bl	8010528 <rcutils_reset_error>
 8018588:	f640 0098 	movw	r0, #2200	@ 0x898
 801858c:	bd70      	pop	{r4, r5, r6, pc}
 801858e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018592:	bd70      	pop	{r4, r5, r6, pc}
 8018594:	200b      	movs	r0, #11
 8018596:	bd70      	pop	{r4, r5, r6, pc}
 8018598:	f640 0098 	movw	r0, #2200	@ 0x898
 801859c:	4770      	bx	lr
 801859e:	bf00      	nop

080185a0 <rcl_action_send_goal_response>:
 80185a0:	b390      	cbz	r0, 8018608 <rcl_action_send_goal_response+0x68>
 80185a2:	b570      	push	{r4, r5, r6, lr}
 80185a4:	4604      	mov	r4, r0
 80185a6:	6800      	ldr	r0, [r0, #0]
 80185a8:	b348      	cbz	r0, 80185fe <rcl_action_send_goal_response+0x5e>
 80185aa:	460d      	mov	r5, r1
 80185ac:	4616      	mov	r6, r2
 80185ae:	f7fe fe1b 	bl	80171e8 <rcl_service_is_valid>
 80185b2:	b1f8      	cbz	r0, 80185f4 <rcl_action_send_goal_response+0x54>
 80185b4:	6820      	ldr	r0, [r4, #0]
 80185b6:	3004      	adds	r0, #4
 80185b8:	f7fe fe16 	bl	80171e8 <rcl_service_is_valid>
 80185bc:	b1d0      	cbz	r0, 80185f4 <rcl_action_send_goal_response+0x54>
 80185be:	6820      	ldr	r0, [r4, #0]
 80185c0:	3008      	adds	r0, #8
 80185c2:	f7fe fe11 	bl	80171e8 <rcl_service_is_valid>
 80185c6:	b1a8      	cbz	r0, 80185f4 <rcl_action_send_goal_response+0x54>
 80185c8:	6820      	ldr	r0, [r4, #0]
 80185ca:	300c      	adds	r0, #12
 80185cc:	f7f6 fab2 	bl	800eb34 <rcl_publisher_is_valid>
 80185d0:	b180      	cbz	r0, 80185f4 <rcl_action_send_goal_response+0x54>
 80185d2:	6820      	ldr	r0, [r4, #0]
 80185d4:	3010      	adds	r0, #16
 80185d6:	f7f6 faad 	bl	800eb34 <rcl_publisher_is_valid>
 80185da:	b158      	cbz	r0, 80185f4 <rcl_action_send_goal_response+0x54>
 80185dc:	b195      	cbz	r5, 8018604 <rcl_action_send_goal_response+0x64>
 80185de:	b18e      	cbz	r6, 8018604 <rcl_action_send_goal_response+0x64>
 80185e0:	6820      	ldr	r0, [r4, #0]
 80185e2:	4632      	mov	r2, r6
 80185e4:	4629      	mov	r1, r5
 80185e6:	f7fe fde7 	bl	80171b8 <rcl_send_response>
 80185ea:	b110      	cbz	r0, 80185f2 <rcl_action_send_goal_response+0x52>
 80185ec:	2802      	cmp	r0, #2
 80185ee:	bf18      	it	ne
 80185f0:	2001      	movne	r0, #1
 80185f2:	bd70      	pop	{r4, r5, r6, pc}
 80185f4:	f7f7 ff98 	bl	8010528 <rcutils_reset_error>
 80185f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80185fc:	bd70      	pop	{r4, r5, r6, pc}
 80185fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8018602:	bd70      	pop	{r4, r5, r6, pc}
 8018604:	200b      	movs	r0, #11
 8018606:	bd70      	pop	{r4, r5, r6, pc}
 8018608:	f640 0098 	movw	r0, #2200	@ 0x898
 801860c:	4770      	bx	lr
 801860e:	bf00      	nop

08018610 <rcl_action_take_result_request>:
 8018610:	2800      	cmp	r0, #0
 8018612:	d03a      	beq.n	801868a <rcl_action_take_result_request+0x7a>
 8018614:	b570      	push	{r4, r5, r6, lr}
 8018616:	4604      	mov	r4, r0
 8018618:	6800      	ldr	r0, [r0, #0]
 801861a:	b388      	cbz	r0, 8018680 <rcl_action_take_result_request+0x70>
 801861c:	460d      	mov	r5, r1
 801861e:	4616      	mov	r6, r2
 8018620:	f7fe fde2 	bl	80171e8 <rcl_service_is_valid>
 8018624:	b338      	cbz	r0, 8018676 <rcl_action_take_result_request+0x66>
 8018626:	6820      	ldr	r0, [r4, #0]
 8018628:	3004      	adds	r0, #4
 801862a:	f7fe fddd 	bl	80171e8 <rcl_service_is_valid>
 801862e:	b310      	cbz	r0, 8018676 <rcl_action_take_result_request+0x66>
 8018630:	6820      	ldr	r0, [r4, #0]
 8018632:	3008      	adds	r0, #8
 8018634:	f7fe fdd8 	bl	80171e8 <rcl_service_is_valid>
 8018638:	b1e8      	cbz	r0, 8018676 <rcl_action_take_result_request+0x66>
 801863a:	6820      	ldr	r0, [r4, #0]
 801863c:	300c      	adds	r0, #12
 801863e:	f7f6 fa79 	bl	800eb34 <rcl_publisher_is_valid>
 8018642:	b1c0      	cbz	r0, 8018676 <rcl_action_take_result_request+0x66>
 8018644:	6820      	ldr	r0, [r4, #0]
 8018646:	3010      	adds	r0, #16
 8018648:	f7f6 fa74 	bl	800eb34 <rcl_publisher_is_valid>
 801864c:	b198      	cbz	r0, 8018676 <rcl_action_take_result_request+0x66>
 801864e:	b1d5      	cbz	r5, 8018686 <rcl_action_take_result_request+0x76>
 8018650:	b1ce      	cbz	r6, 8018686 <rcl_action_take_result_request+0x76>
 8018652:	6820      	ldr	r0, [r4, #0]
 8018654:	4632      	mov	r2, r6
 8018656:	4629      	mov	r1, r5
 8018658:	3008      	adds	r0, #8
 801865a:	f7fe fd6d 	bl	8017138 <rcl_take_request>
 801865e:	b148      	cbz	r0, 8018674 <rcl_action_take_result_request+0x64>
 8018660:	280a      	cmp	r0, #10
 8018662:	d007      	beq.n	8018674 <rcl_action_take_result_request+0x64>
 8018664:	f240 2259 	movw	r2, #601	@ 0x259
 8018668:	f640 0399 	movw	r3, #2201	@ 0x899
 801866c:	4290      	cmp	r0, r2
 801866e:	bf0c      	ite	eq
 8018670:	4618      	moveq	r0, r3
 8018672:	2001      	movne	r0, #1
 8018674:	bd70      	pop	{r4, r5, r6, pc}
 8018676:	f7f7 ff57 	bl	8010528 <rcutils_reset_error>
 801867a:	f640 0098 	movw	r0, #2200	@ 0x898
 801867e:	bd70      	pop	{r4, r5, r6, pc}
 8018680:	f640 0098 	movw	r0, #2200	@ 0x898
 8018684:	bd70      	pop	{r4, r5, r6, pc}
 8018686:	200b      	movs	r0, #11
 8018688:	bd70      	pop	{r4, r5, r6, pc}
 801868a:	f640 0098 	movw	r0, #2200	@ 0x898
 801868e:	4770      	bx	lr

08018690 <rcl_action_take_cancel_request>:
 8018690:	2800      	cmp	r0, #0
 8018692:	d03a      	beq.n	801870a <rcl_action_take_cancel_request+0x7a>
 8018694:	b570      	push	{r4, r5, r6, lr}
 8018696:	4604      	mov	r4, r0
 8018698:	6800      	ldr	r0, [r0, #0]
 801869a:	b388      	cbz	r0, 8018700 <rcl_action_take_cancel_request+0x70>
 801869c:	460d      	mov	r5, r1
 801869e:	4616      	mov	r6, r2
 80186a0:	f7fe fda2 	bl	80171e8 <rcl_service_is_valid>
 80186a4:	b338      	cbz	r0, 80186f6 <rcl_action_take_cancel_request+0x66>
 80186a6:	6820      	ldr	r0, [r4, #0]
 80186a8:	3004      	adds	r0, #4
 80186aa:	f7fe fd9d 	bl	80171e8 <rcl_service_is_valid>
 80186ae:	b310      	cbz	r0, 80186f6 <rcl_action_take_cancel_request+0x66>
 80186b0:	6820      	ldr	r0, [r4, #0]
 80186b2:	3008      	adds	r0, #8
 80186b4:	f7fe fd98 	bl	80171e8 <rcl_service_is_valid>
 80186b8:	b1e8      	cbz	r0, 80186f6 <rcl_action_take_cancel_request+0x66>
 80186ba:	6820      	ldr	r0, [r4, #0]
 80186bc:	300c      	adds	r0, #12
 80186be:	f7f6 fa39 	bl	800eb34 <rcl_publisher_is_valid>
 80186c2:	b1c0      	cbz	r0, 80186f6 <rcl_action_take_cancel_request+0x66>
 80186c4:	6820      	ldr	r0, [r4, #0]
 80186c6:	3010      	adds	r0, #16
 80186c8:	f7f6 fa34 	bl	800eb34 <rcl_publisher_is_valid>
 80186cc:	b198      	cbz	r0, 80186f6 <rcl_action_take_cancel_request+0x66>
 80186ce:	b1d5      	cbz	r5, 8018706 <rcl_action_take_cancel_request+0x76>
 80186d0:	b1ce      	cbz	r6, 8018706 <rcl_action_take_cancel_request+0x76>
 80186d2:	6820      	ldr	r0, [r4, #0]
 80186d4:	4632      	mov	r2, r6
 80186d6:	4629      	mov	r1, r5
 80186d8:	3004      	adds	r0, #4
 80186da:	f7fe fd2d 	bl	8017138 <rcl_take_request>
 80186de:	b148      	cbz	r0, 80186f4 <rcl_action_take_cancel_request+0x64>
 80186e0:	280a      	cmp	r0, #10
 80186e2:	d007      	beq.n	80186f4 <rcl_action_take_cancel_request+0x64>
 80186e4:	f240 2259 	movw	r2, #601	@ 0x259
 80186e8:	f640 0399 	movw	r3, #2201	@ 0x899
 80186ec:	4290      	cmp	r0, r2
 80186ee:	bf0c      	ite	eq
 80186f0:	4618      	moveq	r0, r3
 80186f2:	2001      	movne	r0, #1
 80186f4:	bd70      	pop	{r4, r5, r6, pc}
 80186f6:	f7f7 ff17 	bl	8010528 <rcutils_reset_error>
 80186fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80186fe:	bd70      	pop	{r4, r5, r6, pc}
 8018700:	f640 0098 	movw	r0, #2200	@ 0x898
 8018704:	bd70      	pop	{r4, r5, r6, pc}
 8018706:	200b      	movs	r0, #11
 8018708:	bd70      	pop	{r4, r5, r6, pc}
 801870a:	f640 0098 	movw	r0, #2200	@ 0x898
 801870e:	4770      	bx	lr

08018710 <rcl_action_send_cancel_response>:
 8018710:	b398      	cbz	r0, 801877a <rcl_action_send_cancel_response+0x6a>
 8018712:	b570      	push	{r4, r5, r6, lr}
 8018714:	4604      	mov	r4, r0
 8018716:	6800      	ldr	r0, [r0, #0]
 8018718:	b350      	cbz	r0, 8018770 <rcl_action_send_cancel_response+0x60>
 801871a:	460d      	mov	r5, r1
 801871c:	4616      	mov	r6, r2
 801871e:	f7fe fd63 	bl	80171e8 <rcl_service_is_valid>
 8018722:	b300      	cbz	r0, 8018766 <rcl_action_send_cancel_response+0x56>
 8018724:	6820      	ldr	r0, [r4, #0]
 8018726:	3004      	adds	r0, #4
 8018728:	f7fe fd5e 	bl	80171e8 <rcl_service_is_valid>
 801872c:	b1d8      	cbz	r0, 8018766 <rcl_action_send_cancel_response+0x56>
 801872e:	6820      	ldr	r0, [r4, #0]
 8018730:	3008      	adds	r0, #8
 8018732:	f7fe fd59 	bl	80171e8 <rcl_service_is_valid>
 8018736:	b1b0      	cbz	r0, 8018766 <rcl_action_send_cancel_response+0x56>
 8018738:	6820      	ldr	r0, [r4, #0]
 801873a:	300c      	adds	r0, #12
 801873c:	f7f6 f9fa 	bl	800eb34 <rcl_publisher_is_valid>
 8018740:	b188      	cbz	r0, 8018766 <rcl_action_send_cancel_response+0x56>
 8018742:	6820      	ldr	r0, [r4, #0]
 8018744:	3010      	adds	r0, #16
 8018746:	f7f6 f9f5 	bl	800eb34 <rcl_publisher_is_valid>
 801874a:	b160      	cbz	r0, 8018766 <rcl_action_send_cancel_response+0x56>
 801874c:	b19d      	cbz	r5, 8018776 <rcl_action_send_cancel_response+0x66>
 801874e:	b196      	cbz	r6, 8018776 <rcl_action_send_cancel_response+0x66>
 8018750:	6820      	ldr	r0, [r4, #0]
 8018752:	4632      	mov	r2, r6
 8018754:	4629      	mov	r1, r5
 8018756:	3004      	adds	r0, #4
 8018758:	f7fe fd2e 	bl	80171b8 <rcl_send_response>
 801875c:	b110      	cbz	r0, 8018764 <rcl_action_send_cancel_response+0x54>
 801875e:	2802      	cmp	r0, #2
 8018760:	bf18      	it	ne
 8018762:	2001      	movne	r0, #1
 8018764:	bd70      	pop	{r4, r5, r6, pc}
 8018766:	f7f7 fedf 	bl	8010528 <rcutils_reset_error>
 801876a:	f640 0098 	movw	r0, #2200	@ 0x898
 801876e:	bd70      	pop	{r4, r5, r6, pc}
 8018770:	f640 0098 	movw	r0, #2200	@ 0x898
 8018774:	bd70      	pop	{r4, r5, r6, pc}
 8018776:	200b      	movs	r0, #11
 8018778:	bd70      	pop	{r4, r5, r6, pc}
 801877a:	f640 0098 	movw	r0, #2200	@ 0x898
 801877e:	4770      	bx	lr

08018780 <rcl_action_wait_set_add_action_server>:
 8018780:	2800      	cmp	r0, #0
 8018782:	d04d      	beq.n	8018820 <rcl_action_wait_set_add_action_server+0xa0>
 8018784:	b570      	push	{r4, r5, r6, lr}
 8018786:	460c      	mov	r4, r1
 8018788:	b159      	cbz	r1, 80187a2 <rcl_action_wait_set_add_action_server+0x22>
 801878a:	4605      	mov	r5, r0
 801878c:	6808      	ldr	r0, [r1, #0]
 801878e:	b140      	cbz	r0, 80187a2 <rcl_action_wait_set_add_action_server+0x22>
 8018790:	4616      	mov	r6, r2
 8018792:	f7fe fd29 	bl	80171e8 <rcl_service_is_valid>
 8018796:	b120      	cbz	r0, 80187a2 <rcl_action_wait_set_add_action_server+0x22>
 8018798:	6820      	ldr	r0, [r4, #0]
 801879a:	3004      	adds	r0, #4
 801879c:	f7fe fd24 	bl	80171e8 <rcl_service_is_valid>
 80187a0:	b910      	cbnz	r0, 80187a8 <rcl_action_wait_set_add_action_server+0x28>
 80187a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80187a6:	bd70      	pop	{r4, r5, r6, pc}
 80187a8:	6820      	ldr	r0, [r4, #0]
 80187aa:	3008      	adds	r0, #8
 80187ac:	f7fe fd1c 	bl	80171e8 <rcl_service_is_valid>
 80187b0:	2800      	cmp	r0, #0
 80187b2:	d0f6      	beq.n	80187a2 <rcl_action_wait_set_add_action_server+0x22>
 80187b4:	6820      	ldr	r0, [r4, #0]
 80187b6:	300c      	adds	r0, #12
 80187b8:	f7f6 f9d4 	bl	800eb64 <rcl_publisher_is_valid_except_context>
 80187bc:	2800      	cmp	r0, #0
 80187be:	d0f0      	beq.n	80187a2 <rcl_action_wait_set_add_action_server+0x22>
 80187c0:	6820      	ldr	r0, [r4, #0]
 80187c2:	3010      	adds	r0, #16
 80187c4:	f7f6 f9ce 	bl	800eb64 <rcl_publisher_is_valid_except_context>
 80187c8:	2800      	cmp	r0, #0
 80187ca:	d0ea      	beq.n	80187a2 <rcl_action_wait_set_add_action_server+0x22>
 80187cc:	6821      	ldr	r1, [r4, #0]
 80187ce:	4628      	mov	r0, r5
 80187d0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80187d4:	f7ff face 	bl	8017d74 <rcl_wait_set_add_service>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d1e4      	bne.n	80187a6 <rcl_action_wait_set_add_action_server+0x26>
 80187dc:	6821      	ldr	r1, [r4, #0]
 80187de:	4628      	mov	r0, r5
 80187e0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80187e4:	3104      	adds	r1, #4
 80187e6:	f7ff fac5 	bl	8017d74 <rcl_wait_set_add_service>
 80187ea:	2800      	cmp	r0, #0
 80187ec:	d1db      	bne.n	80187a6 <rcl_action_wait_set_add_action_server+0x26>
 80187ee:	6821      	ldr	r1, [r4, #0]
 80187f0:	4628      	mov	r0, r5
 80187f2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80187f6:	3108      	adds	r1, #8
 80187f8:	f7ff fabc 	bl	8017d74 <rcl_wait_set_add_service>
 80187fc:	2800      	cmp	r0, #0
 80187fe:	d1d2      	bne.n	80187a6 <rcl_action_wait_set_add_action_server+0x26>
 8018800:	6821      	ldr	r1, [r4, #0]
 8018802:	4628      	mov	r0, r5
 8018804:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8018808:	3114      	adds	r1, #20
 801880a:	f7ff fa57 	bl	8017cbc <rcl_wait_set_add_timer>
 801880e:	2800      	cmp	r0, #0
 8018810:	d1c9      	bne.n	80187a6 <rcl_action_wait_set_add_action_server+0x26>
 8018812:	2e00      	cmp	r6, #0
 8018814:	d0c7      	beq.n	80187a6 <rcl_action_wait_set_add_action_server+0x26>
 8018816:	6823      	ldr	r3, [r4, #0]
 8018818:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801881c:	6033      	str	r3, [r6, #0]
 801881e:	bd70      	pop	{r4, r5, r6, pc}
 8018820:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018824:	4770      	bx	lr
 8018826:	bf00      	nop

08018828 <rcl_action_server_wait_set_get_entities_ready>:
 8018828:	2800      	cmp	r0, #0
 801882a:	d05a      	beq.n	80188e2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882e:	460c      	mov	r4, r1
 8018830:	b161      	cbz	r1, 801884c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018832:	4605      	mov	r5, r0
 8018834:	6808      	ldr	r0, [r1, #0]
 8018836:	b148      	cbz	r0, 801884c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018838:	4616      	mov	r6, r2
 801883a:	461f      	mov	r7, r3
 801883c:	f7fe fcd4 	bl	80171e8 <rcl_service_is_valid>
 8018840:	b120      	cbz	r0, 801884c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018842:	6820      	ldr	r0, [r4, #0]
 8018844:	3004      	adds	r0, #4
 8018846:	f7fe fccf 	bl	80171e8 <rcl_service_is_valid>
 801884a:	b910      	cbnz	r0, 8018852 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801884c:	f640 0098 	movw	r0, #2200	@ 0x898
 8018850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018852:	6820      	ldr	r0, [r4, #0]
 8018854:	3008      	adds	r0, #8
 8018856:	f7fe fcc7 	bl	80171e8 <rcl_service_is_valid>
 801885a:	2800      	cmp	r0, #0
 801885c:	d0f6      	beq.n	801884c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801885e:	6820      	ldr	r0, [r4, #0]
 8018860:	300c      	adds	r0, #12
 8018862:	f7f6 f97f 	bl	800eb64 <rcl_publisher_is_valid_except_context>
 8018866:	2800      	cmp	r0, #0
 8018868:	d0f0      	beq.n	801884c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801886a:	6820      	ldr	r0, [r4, #0]
 801886c:	3010      	adds	r0, #16
 801886e:	f7f6 f979 	bl	800eb64 <rcl_publisher_is_valid_except_context>
 8018872:	2800      	cmp	r0, #0
 8018874:	d0ea      	beq.n	801884c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018876:	b3be      	cbz	r6, 80188e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018878:	b3b7      	cbz	r7, 80188e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801887a:	9b06      	ldr	r3, [sp, #24]
 801887c:	b3a3      	cbz	r3, 80188e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801887e:	9b07      	ldr	r3, [sp, #28]
 8018880:	b393      	cbz	r3, 80188e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018882:	6821      	ldr	r1, [r4, #0]
 8018884:	692a      	ldr	r2, [r5, #16]
 8018886:	6a2c      	ldr	r4, [r5, #32]
 8018888:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801888c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8018890:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8018894:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8018898:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801889c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80188a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80188a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80188a8:	1a64      	subs	r4, r4, r1
 80188aa:	fab4 f484 	clz	r4, r4
 80188ae:	0964      	lsrs	r4, r4, #5
 80188b0:	7034      	strb	r4, [r6, #0]
 80188b2:	1d0c      	adds	r4, r1, #4
 80188b4:	1b1b      	subs	r3, r3, r4
 80188b6:	fab3 f383 	clz	r3, r3
 80188ba:	095b      	lsrs	r3, r3, #5
 80188bc:	f101 0408 	add.w	r4, r1, #8
 80188c0:	703b      	strb	r3, [r7, #0]
 80188c2:	f101 0314 	add.w	r3, r1, #20
 80188c6:	1b01      	subs	r1, r0, r4
 80188c8:	1ad3      	subs	r3, r2, r3
 80188ca:	fab1 f181 	clz	r1, r1
 80188ce:	9a06      	ldr	r2, [sp, #24]
 80188d0:	0949      	lsrs	r1, r1, #5
 80188d2:	7011      	strb	r1, [r2, #0]
 80188d4:	fab3 f383 	clz	r3, r3
 80188d8:	9a07      	ldr	r2, [sp, #28]
 80188da:	095b      	lsrs	r3, r3, #5
 80188dc:	2000      	movs	r0, #0
 80188de:	7013      	strb	r3, [r2, #0]
 80188e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80188e6:	4770      	bx	lr
 80188e8:	200b      	movs	r0, #11
 80188ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080188ec <_execute_event_handler>:
 80188ec:	2002      	movs	r0, #2
 80188ee:	4770      	bx	lr

080188f0 <_cancel_goal_event_handler>:
 80188f0:	2003      	movs	r0, #3
 80188f2:	4770      	bx	lr

080188f4 <_succeed_event_handler>:
 80188f4:	2004      	movs	r0, #4
 80188f6:	4770      	bx	lr

080188f8 <_abort_event_handler>:
 80188f8:	2006      	movs	r0, #6
 80188fa:	4770      	bx	lr

080188fc <_canceled_event_handler>:
 80188fc:	2005      	movs	r0, #5
 80188fe:	4770      	bx	lr

08018900 <rcl_action_transition_goal_state>:
 8018900:	b2c2      	uxtb	r2, r0
 8018902:	2a06      	cmp	r2, #6
 8018904:	d80c      	bhi.n	8018920 <rcl_action_transition_goal_state+0x20>
 8018906:	2904      	cmp	r1, #4
 8018908:	d80a      	bhi.n	8018920 <rcl_action_transition_goal_state+0x20>
 801890a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801890e:	b410      	push	{r4}
 8018910:	1853      	adds	r3, r2, r1
 8018912:	4c06      	ldr	r4, [pc, #24]	@ (801892c <rcl_action_transition_goal_state+0x2c>)
 8018914:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018918:	b123      	cbz	r3, 8018924 <rcl_action_transition_goal_state+0x24>
 801891a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801891e:	4718      	bx	r3
 8018920:	2000      	movs	r0, #0
 8018922:	4770      	bx	lr
 8018924:	2000      	movs	r0, #0
 8018926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801892a:	4770      	bx	lr
 801892c:	0801e2e0 	.word	0x0801e2e0

08018930 <rcl_action_get_zero_initialized_cancel_response>:
 8018930:	b510      	push	{r4, lr}
 8018932:	4c07      	ldr	r4, [pc, #28]	@ (8018950 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018934:	4686      	mov	lr, r0
 8018936:	4684      	mov	ip, r0
 8018938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801893a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801893e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018944:	6823      	ldr	r3, [r4, #0]
 8018946:	f8cc 3000 	str.w	r3, [ip]
 801894a:	4670      	mov	r0, lr
 801894c:	bd10      	pop	{r4, pc}
 801894e:	bf00      	nop
 8018950:	0801e36c 	.word	0x0801e36c

08018954 <rclc_action_send_result_request>:
 8018954:	b1d0      	cbz	r0, 801898c <rclc_action_send_result_request+0x38>
 8018956:	b500      	push	{lr}
 8018958:	4684      	mov	ip, r0
 801895a:	b087      	sub	sp, #28
 801895c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018960:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018964:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018968:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801896c:	f10d 0e08 	add.w	lr, sp, #8
 8018970:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018974:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018978:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801897c:	a902      	add	r1, sp, #8
 801897e:	3010      	adds	r0, #16
 8018980:	f7ff fbda 	bl	8018138 <rcl_action_send_result_request>
 8018984:	b920      	cbnz	r0, 8018990 <rclc_action_send_result_request+0x3c>
 8018986:	b007      	add	sp, #28
 8018988:	f85d fb04 	ldr.w	pc, [sp], #4
 801898c:	200b      	movs	r0, #11
 801898e:	4770      	bx	lr
 8018990:	9001      	str	r0, [sp, #4]
 8018992:	f7f7 fdc9 	bl	8010528 <rcutils_reset_error>
 8018996:	9801      	ldr	r0, [sp, #4]
 8018998:	b007      	add	sp, #28
 801899a:	f85d fb04 	ldr.w	pc, [sp], #4
 801899e:	bf00      	nop

080189a0 <rclc_action_take_goal_handle>:
 80189a0:	b160      	cbz	r0, 80189bc <rclc_action_take_goal_handle+0x1c>
 80189a2:	6883      	ldr	r3, [r0, #8]
 80189a4:	b143      	cbz	r3, 80189b8 <rclc_action_take_goal_handle+0x18>
 80189a6:	6819      	ldr	r1, [r3, #0]
 80189a8:	6081      	str	r1, [r0, #8]
 80189aa:	2200      	movs	r2, #0
 80189ac:	721a      	strb	r2, [r3, #8]
 80189ae:	68c1      	ldr	r1, [r0, #12]
 80189b0:	6019      	str	r1, [r3, #0]
 80189b2:	621a      	str	r2, [r3, #32]
 80189b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80189b6:	60c3      	str	r3, [r0, #12]
 80189b8:	4618      	mov	r0, r3
 80189ba:	4770      	bx	lr
 80189bc:	4603      	mov	r3, r0
 80189be:	e7fb      	b.n	80189b8 <rclc_action_take_goal_handle+0x18>

080189c0 <rclc_action_remove_used_goal_handle>:
 80189c0:	b180      	cbz	r0, 80189e4 <rclc_action_remove_used_goal_handle+0x24>
 80189c2:	b179      	cbz	r1, 80189e4 <rclc_action_remove_used_goal_handle+0x24>
 80189c4:	68c3      	ldr	r3, [r0, #12]
 80189c6:	4299      	cmp	r1, r3
 80189c8:	d00d      	beq.n	80189e6 <rclc_action_remove_used_goal_handle+0x26>
 80189ca:	b12b      	cbz	r3, 80189d8 <rclc_action_remove_used_goal_handle+0x18>
 80189cc:	681a      	ldr	r2, [r3, #0]
 80189ce:	4291      	cmp	r1, r2
 80189d0:	d003      	beq.n	80189da <rclc_action_remove_used_goal_handle+0x1a>
 80189d2:	4613      	mov	r3, r2
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d1f9      	bne.n	80189cc <rclc_action_remove_used_goal_handle+0xc>
 80189d8:	4770      	bx	lr
 80189da:	680a      	ldr	r2, [r1, #0]
 80189dc:	601a      	str	r2, [r3, #0]
 80189de:	6883      	ldr	r3, [r0, #8]
 80189e0:	600b      	str	r3, [r1, #0]
 80189e2:	6081      	str	r1, [r0, #8]
 80189e4:	4770      	bx	lr
 80189e6:	680b      	ldr	r3, [r1, #0]
 80189e8:	60c3      	str	r3, [r0, #12]
 80189ea:	e7f8      	b.n	80189de <rclc_action_remove_used_goal_handle+0x1e>

080189ec <rclc_action_find_goal_handle_by_uuid>:
 80189ec:	b538      	push	{r3, r4, r5, lr}
 80189ee:	b180      	cbz	r0, 8018a12 <rclc_action_find_goal_handle_by_uuid+0x26>
 80189f0:	460d      	mov	r5, r1
 80189f2:	b181      	cbz	r1, 8018a16 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80189f4:	68c4      	ldr	r4, [r0, #12]
 80189f6:	b914      	cbnz	r4, 80189fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80189f8:	e009      	b.n	8018a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 80189fa:	6824      	ldr	r4, [r4, #0]
 80189fc:	b13c      	cbz	r4, 8018a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 80189fe:	f104 0009 	add.w	r0, r4, #9
 8018a02:	2210      	movs	r2, #16
 8018a04:	4629      	mov	r1, r5
 8018a06:	f003 fd53 	bl	801c4b0 <memcmp>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	d1f5      	bne.n	80189fa <rclc_action_find_goal_handle_by_uuid+0xe>
 8018a0e:	4620      	mov	r0, r4
 8018a10:	bd38      	pop	{r3, r4, r5, pc}
 8018a12:	4604      	mov	r4, r0
 8018a14:	e7fb      	b.n	8018a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8018a16:	460c      	mov	r4, r1
 8018a18:	e7f9      	b.n	8018a0e <rclc_action_find_goal_handle_by_uuid+0x22>
 8018a1a:	bf00      	nop

08018a1c <rclc_action_find_first_handle_by_status>:
 8018a1c:	b140      	cbz	r0, 8018a30 <rclc_action_find_first_handle_by_status+0x14>
 8018a1e:	68c0      	ldr	r0, [r0, #12]
 8018a20:	b910      	cbnz	r0, 8018a28 <rclc_action_find_first_handle_by_status+0xc>
 8018a22:	e005      	b.n	8018a30 <rclc_action_find_first_handle_by_status+0x14>
 8018a24:	6800      	ldr	r0, [r0, #0]
 8018a26:	b118      	cbz	r0, 8018a30 <rclc_action_find_first_handle_by_status+0x14>
 8018a28:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018a2c:	428b      	cmp	r3, r1
 8018a2e:	d1f9      	bne.n	8018a24 <rclc_action_find_first_handle_by_status+0x8>
 8018a30:	4770      	bx	lr
 8018a32:	bf00      	nop

08018a34 <rclc_action_find_first_terminated_handle>:
 8018a34:	b140      	cbz	r0, 8018a48 <rclc_action_find_first_terminated_handle+0x14>
 8018a36:	68c0      	ldr	r0, [r0, #12]
 8018a38:	b910      	cbnz	r0, 8018a40 <rclc_action_find_first_terminated_handle+0xc>
 8018a3a:	e005      	b.n	8018a48 <rclc_action_find_first_terminated_handle+0x14>
 8018a3c:	6800      	ldr	r0, [r0, #0]
 8018a3e:	b118      	cbz	r0, 8018a48 <rclc_action_find_first_terminated_handle+0x14>
 8018a40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018a44:	2b03      	cmp	r3, #3
 8018a46:	ddf9      	ble.n	8018a3c <rclc_action_find_first_terminated_handle+0x8>
 8018a48:	4770      	bx	lr
 8018a4a:	bf00      	nop

08018a4c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018a4c:	b170      	cbz	r0, 8018a6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018a4e:	68c0      	ldr	r0, [r0, #12]
 8018a50:	b160      	cbz	r0, 8018a6c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018a52:	b410      	push	{r4}
 8018a54:	e001      	b.n	8018a5a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018a56:	6800      	ldr	r0, [r0, #0]
 8018a58:	b128      	cbz	r0, 8018a66 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018a5a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018a5e:	4299      	cmp	r1, r3
 8018a60:	bf08      	it	eq
 8018a62:	4294      	cmpeq	r4, r2
 8018a64:	d1f7      	bne.n	8018a56 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a6a:	4770      	bx	lr
 8018a6c:	4770      	bx	lr
 8018a6e:	bf00      	nop

08018a70 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018a70:	b170      	cbz	r0, 8018a90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018a72:	68c0      	ldr	r0, [r0, #12]
 8018a74:	b160      	cbz	r0, 8018a90 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018a76:	b410      	push	{r4}
 8018a78:	e001      	b.n	8018a7e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018a7a:	6800      	ldr	r0, [r0, #0]
 8018a7c:	b128      	cbz	r0, 8018a8a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018a7e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8018a82:	4299      	cmp	r1, r3
 8018a84:	bf08      	it	eq
 8018a86:	4294      	cmpeq	r4, r2
 8018a88:	d1f7      	bne.n	8018a7a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a8e:	4770      	bx	lr
 8018a90:	4770      	bx	lr
 8018a92:	bf00      	nop

08018a94 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018a94:	b170      	cbz	r0, 8018ab4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018a96:	68c0      	ldr	r0, [r0, #12]
 8018a98:	b160      	cbz	r0, 8018ab4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018a9a:	b410      	push	{r4}
 8018a9c:	e001      	b.n	8018aa2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018a9e:	6800      	ldr	r0, [r0, #0]
 8018aa0:	b128      	cbz	r0, 8018aae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018aa2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8018aa6:	4299      	cmp	r1, r3
 8018aa8:	bf08      	it	eq
 8018aaa:	4294      	cmpeq	r4, r2
 8018aac:	d1f7      	bne.n	8018a9e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ab2:	4770      	bx	lr
 8018ab4:	4770      	bx	lr
 8018ab6:	bf00      	nop

08018ab8 <rclc_action_find_first_handle_with_goal_response>:
 8018ab8:	b140      	cbz	r0, 8018acc <rclc_action_find_first_handle_with_goal_response+0x14>
 8018aba:	68c0      	ldr	r0, [r0, #12]
 8018abc:	b910      	cbnz	r0, 8018ac4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8018abe:	e005      	b.n	8018acc <rclc_action_find_first_handle_with_goal_response+0x14>
 8018ac0:	6800      	ldr	r0, [r0, #0]
 8018ac2:	b118      	cbz	r0, 8018acc <rclc_action_find_first_handle_with_goal_response+0x14>
 8018ac4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d0f9      	beq.n	8018ac0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018acc:	4770      	bx	lr
 8018ace:	bf00      	nop

08018ad0 <rclc_action_find_first_handle_with_result_response>:
 8018ad0:	b140      	cbz	r0, 8018ae4 <rclc_action_find_first_handle_with_result_response+0x14>
 8018ad2:	68c0      	ldr	r0, [r0, #12]
 8018ad4:	b910      	cbnz	r0, 8018adc <rclc_action_find_first_handle_with_result_response+0xc>
 8018ad6:	e005      	b.n	8018ae4 <rclc_action_find_first_handle_with_result_response+0x14>
 8018ad8:	6800      	ldr	r0, [r0, #0]
 8018ada:	b118      	cbz	r0, 8018ae4 <rclc_action_find_first_handle_with_result_response+0x14>
 8018adc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d0f9      	beq.n	8018ad8 <rclc_action_find_first_handle_with_result_response+0x8>
 8018ae4:	4770      	bx	lr
 8018ae6:	bf00      	nop

08018ae8 <rclc_action_server_response_goal_request>:
 8018ae8:	b198      	cbz	r0, 8018b12 <rclc_action_server_response_goal_request+0x2a>
 8018aea:	b510      	push	{r4, lr}
 8018aec:	6844      	ldr	r4, [r0, #4]
 8018aee:	b086      	sub	sp, #24
 8018af0:	2200      	movs	r2, #0
 8018af2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018af6:	460b      	mov	r3, r1
 8018af8:	9205      	str	r2, [sp, #20]
 8018afa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8018afe:	aa03      	add	r2, sp, #12
 8018b00:	f104 0010 	add.w	r0, r4, #16
 8018b04:	f88d 300c 	strb.w	r3, [sp, #12]
 8018b08:	f7ff fd4a 	bl	80185a0 <rcl_action_send_goal_response>
 8018b0c:	b918      	cbnz	r0, 8018b16 <rclc_action_server_response_goal_request+0x2e>
 8018b0e:	b006      	add	sp, #24
 8018b10:	bd10      	pop	{r4, pc}
 8018b12:	200b      	movs	r0, #11
 8018b14:	4770      	bx	lr
 8018b16:	9001      	str	r0, [sp, #4]
 8018b18:	f7f7 fd06 	bl	8010528 <rcutils_reset_error>
 8018b1c:	9801      	ldr	r0, [sp, #4]
 8018b1e:	b006      	add	sp, #24
 8018b20:	bd10      	pop	{r4, pc}
 8018b22:	bf00      	nop
 8018b24:	0000      	movs	r0, r0
	...

08018b28 <rclc_action_server_goal_cancel_accept>:
 8018b28:	b310      	cbz	r0, 8018b70 <rclc_action_server_goal_cancel_accept+0x48>
 8018b2a:	b510      	push	{r4, lr}
 8018b2c:	b090      	sub	sp, #64	@ 0x40
 8018b2e:	4604      	mov	r4, r0
 8018b30:	a806      	add	r0, sp, #24
 8018b32:	f7ff fefd 	bl	8018930 <rcl_action_get_zero_initialized_cancel_response>
 8018b36:	2300      	movs	r3, #0
 8018b38:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018b3c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018b40:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018b44:	f88d 3018 	strb.w	r3, [sp, #24]
 8018b48:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018b4c:	f8cd d01c 	str.w	sp, [sp, #28]
 8018b50:	46ec      	mov	ip, sp
 8018b52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b56:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018b78 <rclc_action_server_goal_cancel_accept+0x50>
 8018b5a:	6860      	ldr	r0, [r4, #4]
 8018b5c:	aa06      	add	r2, sp, #24
 8018b5e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8018b62:	3010      	adds	r0, #16
 8018b64:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018b68:	f7ff fdd2 	bl	8018710 <rcl_action_send_cancel_response>
 8018b6c:	b010      	add	sp, #64	@ 0x40
 8018b6e:	bd10      	pop	{r4, pc}
 8018b70:	200b      	movs	r0, #11
 8018b72:	4770      	bx	lr
 8018b74:	f3af 8000 	nop.w
 8018b78:	00000001 	.word	0x00000001
 8018b7c:	00000001 	.word	0x00000001

08018b80 <rclc_action_server_goal_cancel_reject>:
 8018b80:	b082      	sub	sp, #8
 8018b82:	b530      	push	{r4, r5, lr}
 8018b84:	b08b      	sub	sp, #44	@ 0x2c
 8018b86:	ac0e      	add	r4, sp, #56	@ 0x38
 8018b88:	e884 000c 	stmia.w	r4, {r2, r3}
 8018b8c:	b188      	cbz	r0, 8018bb2 <rclc_action_server_goal_cancel_reject+0x32>
 8018b8e:	4604      	mov	r4, r0
 8018b90:	a801      	add	r0, sp, #4
 8018b92:	460d      	mov	r5, r1
 8018b94:	f7ff fecc 	bl	8018930 <rcl_action_get_zero_initialized_cancel_response>
 8018b98:	aa01      	add	r2, sp, #4
 8018b9a:	a90e      	add	r1, sp, #56	@ 0x38
 8018b9c:	f104 0010 	add.w	r0, r4, #16
 8018ba0:	f88d 5004 	strb.w	r5, [sp, #4]
 8018ba4:	f7ff fdb4 	bl	8018710 <rcl_action_send_cancel_response>
 8018ba8:	b00b      	add	sp, #44	@ 0x2c
 8018baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bae:	b002      	add	sp, #8
 8018bb0:	4770      	bx	lr
 8018bb2:	200b      	movs	r0, #11
 8018bb4:	b00b      	add	sp, #44	@ 0x2c
 8018bb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bba:	b002      	add	sp, #8
 8018bbc:	4770      	bx	lr
 8018bbe:	bf00      	nop

08018bc0 <rcutils_string_array_fini>:
 8018bc0:	b320      	cbz	r0, 8018c0c <rcutils_string_array_fini+0x4c>
 8018bc2:	b570      	push	{r4, r5, r6, lr}
 8018bc4:	4604      	mov	r4, r0
 8018bc6:	6840      	ldr	r0, [r0, #4]
 8018bc8:	b1d8      	cbz	r0, 8018c02 <rcutils_string_array_fini+0x42>
 8018bca:	f104 0008 	add.w	r0, r4, #8
 8018bce:	f7f7 fbcb 	bl	8010368 <rcutils_allocator_is_valid>
 8018bd2:	b1b8      	cbz	r0, 8018c04 <rcutils_string_array_fini+0x44>
 8018bd4:	6823      	ldr	r3, [r4, #0]
 8018bd6:	b1bb      	cbz	r3, 8018c08 <rcutils_string_array_fini+0x48>
 8018bd8:	2500      	movs	r5, #0
 8018bda:	6860      	ldr	r0, [r4, #4]
 8018bdc:	462e      	mov	r6, r5
 8018bde:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018be2:	68e3      	ldr	r3, [r4, #12]
 8018be4:	69a1      	ldr	r1, [r4, #24]
 8018be6:	4798      	blx	r3
 8018be8:	e9d4 3000 	ldrd	r3, r0, [r4]
 8018bec:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8018bf0:	3501      	adds	r5, #1
 8018bf2:	429d      	cmp	r5, r3
 8018bf4:	d3f3      	bcc.n	8018bde <rcutils_string_array_fini+0x1e>
 8018bf6:	68e3      	ldr	r3, [r4, #12]
 8018bf8:	69a1      	ldr	r1, [r4, #24]
 8018bfa:	4798      	blx	r3
 8018bfc:	2000      	movs	r0, #0
 8018bfe:	e9c4 0000 	strd	r0, r0, [r4]
 8018c02:	bd70      	pop	{r4, r5, r6, pc}
 8018c04:	200b      	movs	r0, #11
 8018c06:	bd70      	pop	{r4, r5, r6, pc}
 8018c08:	6860      	ldr	r0, [r4, #4]
 8018c0a:	e7f4      	b.n	8018bf6 <rcutils_string_array_fini+0x36>
 8018c0c:	200b      	movs	r0, #11
 8018c0e:	4770      	bx	lr

08018c10 <rcutils_get_zero_initialized_string_map>:
 8018c10:	4b01      	ldr	r3, [pc, #4]	@ (8018c18 <rcutils_get_zero_initialized_string_map+0x8>)
 8018c12:	2000      	movs	r0, #0
 8018c14:	6018      	str	r0, [r3, #0]
 8018c16:	4770      	bx	lr
 8018c18:	20011af8 	.word	0x20011af8

08018c1c <rcutils_string_map_reserve>:
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	d05f      	beq.n	8018ce0 <rcutils_string_map_reserve+0xc4>
 8018c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c24:	460c      	mov	r4, r1
 8018c26:	6801      	ldr	r1, [r0, #0]
 8018c28:	b082      	sub	sp, #8
 8018c2a:	4605      	mov	r5, r0
 8018c2c:	b129      	cbz	r1, 8018c3a <rcutils_string_map_reserve+0x1e>
 8018c2e:	68cb      	ldr	r3, [r1, #12]
 8018c30:	42a3      	cmp	r3, r4
 8018c32:	d906      	bls.n	8018c42 <rcutils_string_map_reserve+0x26>
 8018c34:	461c      	mov	r4, r3
 8018c36:	2900      	cmp	r1, #0
 8018c38:	d1f9      	bne.n	8018c2e <rcutils_string_map_reserve+0x12>
 8018c3a:	201f      	movs	r0, #31
 8018c3c:	b002      	add	sp, #8
 8018c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c42:	688b      	ldr	r3, [r1, #8]
 8018c44:	42a3      	cmp	r3, r4
 8018c46:	d047      	beq.n	8018cd8 <rcutils_string_map_reserve+0xbc>
 8018c48:	6a0e      	ldr	r6, [r1, #32]
 8018c4a:	2c00      	cmp	r4, #0
 8018c4c:	d034      	beq.n	8018cb8 <rcutils_string_map_reserve+0x9c>
 8018c4e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018c52:	d243      	bcs.n	8018cdc <rcutils_string_map_reserve+0xc0>
 8018c54:	00a7      	lsls	r7, r4, #2
 8018c56:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018c5a:	6808      	ldr	r0, [r1, #0]
 8018c5c:	4632      	mov	r2, r6
 8018c5e:	4639      	mov	r1, r7
 8018c60:	47c0      	blx	r8
 8018c62:	2800      	cmp	r0, #0
 8018c64:	d03a      	beq.n	8018cdc <rcutils_string_map_reserve+0xc0>
 8018c66:	682b      	ldr	r3, [r5, #0]
 8018c68:	4632      	mov	r2, r6
 8018c6a:	6018      	str	r0, [r3, #0]
 8018c6c:	4639      	mov	r1, r7
 8018c6e:	6858      	ldr	r0, [r3, #4]
 8018c70:	47c0      	blx	r8
 8018c72:	2800      	cmp	r0, #0
 8018c74:	d032      	beq.n	8018cdc <rcutils_string_map_reserve+0xc0>
 8018c76:	682d      	ldr	r5, [r5, #0]
 8018c78:	68ab      	ldr	r3, [r5, #8]
 8018c7a:	6068      	str	r0, [r5, #4]
 8018c7c:	42a3      	cmp	r3, r4
 8018c7e:	d226      	bcs.n	8018cce <rcutils_string_map_reserve+0xb2>
 8018c80:	682a      	ldr	r2, [r5, #0]
 8018c82:	eb00 0c07 	add.w	ip, r0, r7
 8018c86:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8018c8a:	45e6      	cmp	lr, ip
 8018c8c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8018c90:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8018c94:	d203      	bcs.n	8018c9e <rcutils_string_map_reserve+0x82>
 8018c96:	eb02 0c07 	add.w	ip, r2, r7
 8018c9a:	4566      	cmp	r6, ip
 8018c9c:	d322      	bcc.n	8018ce4 <rcutils_string_map_reserve+0xc8>
 8018c9e:	1ae3      	subs	r3, r4, r3
 8018ca0:	009a      	lsls	r2, r3, #2
 8018ca2:	4670      	mov	r0, lr
 8018ca4:	2100      	movs	r1, #0
 8018ca6:	9201      	str	r2, [sp, #4]
 8018ca8:	f003 fc2c 	bl	801c504 <memset>
 8018cac:	9a01      	ldr	r2, [sp, #4]
 8018cae:	2100      	movs	r1, #0
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	f003 fc27 	bl	801c504 <memset>
 8018cb6:	e00a      	b.n	8018cce <rcutils_string_map_reserve+0xb2>
 8018cb8:	694f      	ldr	r7, [r1, #20]
 8018cba:	6808      	ldr	r0, [r1, #0]
 8018cbc:	4631      	mov	r1, r6
 8018cbe:	47b8      	blx	r7
 8018cc0:	682b      	ldr	r3, [r5, #0]
 8018cc2:	4631      	mov	r1, r6
 8018cc4:	6858      	ldr	r0, [r3, #4]
 8018cc6:	601c      	str	r4, [r3, #0]
 8018cc8:	47b8      	blx	r7
 8018cca:	682d      	ldr	r5, [r5, #0]
 8018ccc:	606c      	str	r4, [r5, #4]
 8018cce:	2000      	movs	r0, #0
 8018cd0:	60ac      	str	r4, [r5, #8]
 8018cd2:	b002      	add	sp, #8
 8018cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cd8:	2000      	movs	r0, #0
 8018cda:	e7af      	b.n	8018c3c <rcutils_string_map_reserve+0x20>
 8018cdc:	200a      	movs	r0, #10
 8018cde:	e7ad      	b.n	8018c3c <rcutils_string_map_reserve+0x20>
 8018ce0:	200b      	movs	r0, #11
 8018ce2:	4770      	bx	lr
 8018ce4:	1f0b      	subs	r3, r1, #4
 8018ce6:	4418      	add	r0, r3
 8018ce8:	4413      	add	r3, r2
 8018cea:	3a04      	subs	r2, #4
 8018cec:	4417      	add	r7, r2
 8018cee:	2200      	movs	r2, #0
 8018cf0:	f843 2f04 	str.w	r2, [r3, #4]!
 8018cf4:	42bb      	cmp	r3, r7
 8018cf6:	f840 2f04 	str.w	r2, [r0, #4]!
 8018cfa:	d1f9      	bne.n	8018cf0 <rcutils_string_map_reserve+0xd4>
 8018cfc:	e7e7      	b.n	8018cce <rcutils_string_map_reserve+0xb2>
 8018cfe:	bf00      	nop

08018d00 <rcutils_string_map_init>:
 8018d00:	b082      	sub	sp, #8
 8018d02:	b570      	push	{r4, r5, r6, lr}
 8018d04:	ac04      	add	r4, sp, #16
 8018d06:	e884 000c 	stmia.w	r4, {r2, r3}
 8018d0a:	b380      	cbz	r0, 8018d6e <rcutils_string_map_init+0x6e>
 8018d0c:	6806      	ldr	r6, [r0, #0]
 8018d0e:	4604      	mov	r4, r0
 8018d10:	b12e      	cbz	r6, 8018d1e <rcutils_string_map_init+0x1e>
 8018d12:	251e      	movs	r5, #30
 8018d14:	4628      	mov	r0, r5
 8018d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d1a:	b002      	add	sp, #8
 8018d1c:	4770      	bx	lr
 8018d1e:	a804      	add	r0, sp, #16
 8018d20:	460d      	mov	r5, r1
 8018d22:	f7f7 fb21 	bl	8010368 <rcutils_allocator_is_valid>
 8018d26:	b310      	cbz	r0, 8018d6e <rcutils_string_map_init+0x6e>
 8018d28:	9b04      	ldr	r3, [sp, #16]
 8018d2a:	9908      	ldr	r1, [sp, #32]
 8018d2c:	2024      	movs	r0, #36	@ 0x24
 8018d2e:	4798      	blx	r3
 8018d30:	6020      	str	r0, [r4, #0]
 8018d32:	b310      	cbz	r0, 8018d7a <rcutils_string_map_init+0x7a>
 8018d34:	f10d 0e10 	add.w	lr, sp, #16
 8018d38:	e9c0 6600 	strd	r6, r6, [r0]
 8018d3c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018d40:	f100 0c10 	add.w	ip, r0, #16
 8018d44:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018d48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d4c:	f8de 3000 	ldr.w	r3, [lr]
 8018d50:	f8cc 3000 	str.w	r3, [ip]
 8018d54:	4629      	mov	r1, r5
 8018d56:	4620      	mov	r0, r4
 8018d58:	f7ff ff60 	bl	8018c1c <rcutils_string_map_reserve>
 8018d5c:	4605      	mov	r5, r0
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	d0d8      	beq.n	8018d14 <rcutils_string_map_init+0x14>
 8018d62:	9b05      	ldr	r3, [sp, #20]
 8018d64:	9908      	ldr	r1, [sp, #32]
 8018d66:	6820      	ldr	r0, [r4, #0]
 8018d68:	4798      	blx	r3
 8018d6a:	6026      	str	r6, [r4, #0]
 8018d6c:	e7d2      	b.n	8018d14 <rcutils_string_map_init+0x14>
 8018d6e:	250b      	movs	r5, #11
 8018d70:	4628      	mov	r0, r5
 8018d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d76:	b002      	add	sp, #8
 8018d78:	4770      	bx	lr
 8018d7a:	250a      	movs	r5, #10
 8018d7c:	e7ca      	b.n	8018d14 <rcutils_string_map_init+0x14>
 8018d7e:	bf00      	nop

08018d80 <rcutils_string_map_fini>:
 8018d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d84:	b082      	sub	sp, #8
 8018d86:	2800      	cmp	r0, #0
 8018d88:	d03a      	beq.n	8018e00 <rcutils_string_map_fini+0x80>
 8018d8a:	6804      	ldr	r4, [r0, #0]
 8018d8c:	4606      	mov	r6, r0
 8018d8e:	2c00      	cmp	r4, #0
 8018d90:	d032      	beq.n	8018df8 <rcutils_string_map_fini+0x78>
 8018d92:	68a3      	ldr	r3, [r4, #8]
 8018d94:	b32b      	cbz	r3, 8018de2 <rcutils_string_map_fini+0x62>
 8018d96:	2500      	movs	r5, #0
 8018d98:	6822      	ldr	r2, [r4, #0]
 8018d9a:	462f      	mov	r7, r5
 8018d9c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018da0:	b1e0      	cbz	r0, 8018ddc <rcutils_string_map_fini+0x5c>
 8018da2:	6a21      	ldr	r1, [r4, #32]
 8018da4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018da8:	9101      	str	r1, [sp, #4]
 8018daa:	47c0      	blx	r8
 8018dac:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018db0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018db4:	9901      	ldr	r1, [sp, #4]
 8018db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018dba:	47c0      	blx	r8
 8018dbc:	68e3      	ldr	r3, [r4, #12]
 8018dbe:	6862      	ldr	r2, [r4, #4]
 8018dc0:	3b01      	subs	r3, #1
 8018dc2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018dc6:	60e3      	str	r3, [r4, #12]
 8018dc8:	6834      	ldr	r4, [r6, #0]
 8018dca:	68a3      	ldr	r3, [r4, #8]
 8018dcc:	3501      	adds	r5, #1
 8018dce:	429d      	cmp	r5, r3
 8018dd0:	d207      	bcs.n	8018de2 <rcutils_string_map_fini+0x62>
 8018dd2:	6822      	ldr	r2, [r4, #0]
 8018dd4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018dd8:	2800      	cmp	r0, #0
 8018dda:	d1e2      	bne.n	8018da2 <rcutils_string_map_fini+0x22>
 8018ddc:	3501      	adds	r5, #1
 8018dde:	429d      	cmp	r5, r3
 8018de0:	d3dc      	bcc.n	8018d9c <rcutils_string_map_fini+0x1c>
 8018de2:	2100      	movs	r1, #0
 8018de4:	4630      	mov	r0, r6
 8018de6:	f7ff ff19 	bl	8018c1c <rcutils_string_map_reserve>
 8018dea:	4604      	mov	r4, r0
 8018dec:	b920      	cbnz	r0, 8018df8 <rcutils_string_map_fini+0x78>
 8018dee:	6830      	ldr	r0, [r6, #0]
 8018df0:	6943      	ldr	r3, [r0, #20]
 8018df2:	6a01      	ldr	r1, [r0, #32]
 8018df4:	4798      	blx	r3
 8018df6:	6034      	str	r4, [r6, #0]
 8018df8:	4620      	mov	r0, r4
 8018dfa:	b002      	add	sp, #8
 8018dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e00:	240b      	movs	r4, #11
 8018e02:	4620      	mov	r0, r4
 8018e04:	b002      	add	sp, #8
 8018e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e0a:	bf00      	nop

08018e0c <rcutils_string_map_getn>:
 8018e0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e10:	b300      	cbz	r0, 8018e54 <rcutils_string_map_getn+0x48>
 8018e12:	6807      	ldr	r7, [r0, #0]
 8018e14:	b1ff      	cbz	r7, 8018e56 <rcutils_string_map_getn+0x4a>
 8018e16:	4688      	mov	r8, r1
 8018e18:	b1e1      	cbz	r1, 8018e54 <rcutils_string_map_getn+0x48>
 8018e1a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018e1e:	683e      	ldr	r6, [r7, #0]
 8018e20:	f1ba 0f00 	cmp.w	sl, #0
 8018e24:	d016      	beq.n	8018e54 <rcutils_string_map_getn+0x48>
 8018e26:	4691      	mov	r9, r2
 8018e28:	3e04      	subs	r6, #4
 8018e2a:	2400      	movs	r4, #0
 8018e2c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018e30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018e34:	4628      	mov	r0, r5
 8018e36:	3401      	adds	r4, #1
 8018e38:	b155      	cbz	r5, 8018e50 <rcutils_string_map_getn+0x44>
 8018e3a:	f7e7 f9f3 	bl	8000224 <strlen>
 8018e3e:	4548      	cmp	r0, r9
 8018e40:	4602      	mov	r2, r0
 8018e42:	4629      	mov	r1, r5
 8018e44:	bf38      	it	cc
 8018e46:	464a      	movcc	r2, r9
 8018e48:	4640      	mov	r0, r8
 8018e4a:	f003 fb70 	bl	801c52e <strncmp>
 8018e4e:	b128      	cbz	r0, 8018e5c <rcutils_string_map_getn+0x50>
 8018e50:	45a2      	cmp	sl, r4
 8018e52:	d1eb      	bne.n	8018e2c <rcutils_string_map_getn+0x20>
 8018e54:	2700      	movs	r7, #0
 8018e56:	4638      	mov	r0, r7
 8018e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	f853 700b 	ldr.w	r7, [r3, fp]
 8018e62:	4638      	mov	r0, r7
 8018e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e68 <rmw_get_zero_initialized_context>:
 8018e68:	b510      	push	{r4, lr}
 8018e6a:	4604      	mov	r4, r0
 8018e6c:	3010      	adds	r0, #16
 8018e6e:	f7f7 fd1f 	bl	80108b0 <rmw_get_zero_initialized_init_options>
 8018e72:	2300      	movs	r3, #0
 8018e74:	2000      	movs	r0, #0
 8018e76:	2100      	movs	r1, #0
 8018e78:	e9c4 0100 	strd	r0, r1, [r4]
 8018e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8018e80:	60a3      	str	r3, [r4, #8]
 8018e82:	4620      	mov	r0, r4
 8018e84:	bd10      	pop	{r4, pc}
 8018e86:	bf00      	nop

08018e88 <rmw_time_equal>:
 8018e88:	b4f0      	push	{r4, r5, r6, r7}
 8018e8a:	b084      	sub	sp, #16
 8018e8c:	ac04      	add	r4, sp, #16
 8018e8e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018e92:	4603      	mov	r3, r0
 8018e94:	4924      	ldr	r1, [pc, #144]	@ (8018f28 <rmw_time_equal+0xa0>)
 8018e96:	9e03      	ldr	r6, [sp, #12]
 8018e98:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018e9c:	2202      	movs	r2, #2
 8018e9e:	4299      	cmp	r1, r3
 8018ea0:	41aa      	sbcs	r2, r5
 8018ea2:	d330      	bcc.n	8018f06 <rmw_time_equal+0x7e>
 8018ea4:	4c21      	ldr	r4, [pc, #132]	@ (8018f2c <rmw_time_equal+0xa4>)
 8018ea6:	fba3 3204 	umull	r3, r2, r3, r4
 8018eaa:	fb04 2205 	mla	r2, r4, r5, r2
 8018eae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018eb2:	43dd      	mvns	r5, r3
 8018eb4:	1a8c      	subs	r4, r1, r2
 8018eb6:	4285      	cmp	r5, r0
 8018eb8:	41b4      	sbcs	r4, r6
 8018eba:	d332      	bcc.n	8018f22 <rmw_time_equal+0x9a>
 8018ebc:	eb10 0c03 	adds.w	ip, r0, r3
 8018ec0:	eb42 0106 	adc.w	r1, r2, r6
 8018ec4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018ec8:	4817      	ldr	r0, [pc, #92]	@ (8018f28 <rmw_time_equal+0xa0>)
 8018eca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018ecc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018ece:	2202      	movs	r2, #2
 8018ed0:	4298      	cmp	r0, r3
 8018ed2:	41b2      	sbcs	r2, r6
 8018ed4:	d31c      	bcc.n	8018f10 <rmw_time_equal+0x88>
 8018ed6:	4c15      	ldr	r4, [pc, #84]	@ (8018f2c <rmw_time_equal+0xa4>)
 8018ed8:	fba3 3204 	umull	r3, r2, r3, r4
 8018edc:	fb04 2206 	mla	r2, r4, r6, r2
 8018ee0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018ee4:	43de      	mvns	r6, r3
 8018ee6:	1a84      	subs	r4, r0, r2
 8018ee8:	42ae      	cmp	r6, r5
 8018eea:	41bc      	sbcs	r4, r7
 8018eec:	d315      	bcc.n	8018f1a <rmw_time_equal+0x92>
 8018eee:	195b      	adds	r3, r3, r5
 8018ef0:	eb42 0207 	adc.w	r2, r2, r7
 8018ef4:	428a      	cmp	r2, r1
 8018ef6:	bf08      	it	eq
 8018ef8:	4563      	cmpeq	r3, ip
 8018efa:	bf0c      	ite	eq
 8018efc:	2001      	moveq	r0, #1
 8018efe:	2000      	movne	r0, #0
 8018f00:	b004      	add	sp, #16
 8018f02:	bcf0      	pop	{r4, r5, r6, r7}
 8018f04:	4770      	bx	lr
 8018f06:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018f0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018f0e:	e7d9      	b.n	8018ec4 <rmw_time_equal+0x3c>
 8018f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f14:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018f18:	e7ec      	b.n	8018ef4 <rmw_time_equal+0x6c>
 8018f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018f1e:	4602      	mov	r2, r0
 8018f20:	e7e8      	b.n	8018ef4 <rmw_time_equal+0x6c>
 8018f22:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018f26:	e7cd      	b.n	8018ec4 <rmw_time_equal+0x3c>
 8018f28:	25c17d04 	.word	0x25c17d04
 8018f2c:	3b9aca00 	.word	0x3b9aca00

08018f30 <rmw_time_total_nsec>:
 8018f30:	b470      	push	{r4, r5, r6}
 8018f32:	b085      	sub	sp, #20
 8018f34:	ac04      	add	r4, sp, #16
 8018f36:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	4912      	ldr	r1, [pc, #72]	@ (8018f88 <rmw_time_total_nsec+0x58>)
 8018f3e:	9e03      	ldr	r6, [sp, #12]
 8018f40:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018f44:	2202      	movs	r2, #2
 8018f46:	4299      	cmp	r1, r3
 8018f48:	41aa      	sbcs	r2, r5
 8018f4a:	d311      	bcc.n	8018f70 <rmw_time_total_nsec+0x40>
 8018f4c:	4c0f      	ldr	r4, [pc, #60]	@ (8018f8c <rmw_time_total_nsec+0x5c>)
 8018f4e:	fba3 3204 	umull	r3, r2, r3, r4
 8018f52:	fb04 2205 	mla	r2, r4, r5, r2
 8018f56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018f5a:	43dd      	mvns	r5, r3
 8018f5c:	1a8c      	subs	r4, r1, r2
 8018f5e:	4285      	cmp	r5, r0
 8018f60:	41b4      	sbcs	r4, r6
 8018f62:	d30c      	bcc.n	8018f7e <rmw_time_total_nsec+0x4e>
 8018f64:	1818      	adds	r0, r3, r0
 8018f66:	eb42 0106 	adc.w	r1, r2, r6
 8018f6a:	b005      	add	sp, #20
 8018f6c:	bc70      	pop	{r4, r5, r6}
 8018f6e:	4770      	bx	lr
 8018f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018f78:	b005      	add	sp, #20
 8018f7a:	bc70      	pop	{r4, r5, r6}
 8018f7c:	4770      	bx	lr
 8018f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f82:	b005      	add	sp, #20
 8018f84:	bc70      	pop	{r4, r5, r6}
 8018f86:	4770      	bx	lr
 8018f88:	25c17d04 	.word	0x25c17d04
 8018f8c:	3b9aca00 	.word	0x3b9aca00

08018f90 <rmw_validate_full_topic_name>:
 8018f90:	2800      	cmp	r0, #0
 8018f92:	d057      	beq.n	8019044 <rmw_validate_full_topic_name+0xb4>
 8018f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f98:	460d      	mov	r5, r1
 8018f9a:	2900      	cmp	r1, #0
 8018f9c:	d054      	beq.n	8019048 <rmw_validate_full_topic_name+0xb8>
 8018f9e:	4616      	mov	r6, r2
 8018fa0:	4604      	mov	r4, r0
 8018fa2:	f7e7 f93f 	bl	8000224 <strlen>
 8018fa6:	b148      	cbz	r0, 8018fbc <rmw_validate_full_topic_name+0x2c>
 8018fa8:	7823      	ldrb	r3, [r4, #0]
 8018faa:	2b2f      	cmp	r3, #47	@ 0x2f
 8018fac:	d00d      	beq.n	8018fca <rmw_validate_full_topic_name+0x3a>
 8018fae:	2302      	movs	r3, #2
 8018fb0:	602b      	str	r3, [r5, #0]
 8018fb2:	b13e      	cbz	r6, 8018fc4 <rmw_validate_full_topic_name+0x34>
 8018fb4:	2000      	movs	r0, #0
 8018fb6:	6030      	str	r0, [r6, #0]
 8018fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	602b      	str	r3, [r5, #0]
 8018fc0:	2e00      	cmp	r6, #0
 8018fc2:	d1f7      	bne.n	8018fb4 <rmw_validate_full_topic_name+0x24>
 8018fc4:	2000      	movs	r0, #0
 8018fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fca:	1e43      	subs	r3, r0, #1
 8018fcc:	5ce2      	ldrb	r2, [r4, r3]
 8018fce:	2a2f      	cmp	r2, #47	@ 0x2f
 8018fd0:	d03c      	beq.n	801904c <rmw_validate_full_topic_name+0xbc>
 8018fd2:	1e63      	subs	r3, r4, #1
 8018fd4:	eb03 0800 	add.w	r8, r3, r0
 8018fd8:	f1c4 0e01 	rsb	lr, r4, #1
 8018fdc:	eb0e 0703 	add.w	r7, lr, r3
 8018fe0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8018fe4:	f021 0220 	bic.w	r2, r1, #32
 8018fe8:	3a41      	subs	r2, #65	@ 0x41
 8018fea:	2a19      	cmp	r2, #25
 8018fec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8018ff0:	d90b      	bls.n	801900a <rmw_validate_full_topic_name+0x7a>
 8018ff2:	295f      	cmp	r1, #95	@ 0x5f
 8018ff4:	d009      	beq.n	801900a <rmw_validate_full_topic_name+0x7a>
 8018ff6:	f1bc 0f0a 	cmp.w	ip, #10
 8018ffa:	d906      	bls.n	801900a <rmw_validate_full_topic_name+0x7a>
 8018ffc:	2304      	movs	r3, #4
 8018ffe:	602b      	str	r3, [r5, #0]
 8019000:	2e00      	cmp	r6, #0
 8019002:	d0df      	beq.n	8018fc4 <rmw_validate_full_topic_name+0x34>
 8019004:	6037      	str	r7, [r6, #0]
 8019006:	2000      	movs	r0, #0
 8019008:	e7d6      	b.n	8018fb8 <rmw_validate_full_topic_name+0x28>
 801900a:	4543      	cmp	r3, r8
 801900c:	d1e6      	bne.n	8018fdc <rmw_validate_full_topic_name+0x4c>
 801900e:	4f1a      	ldr	r7, [pc, #104]	@ (8019078 <rmw_validate_full_topic_name+0xe8>)
 8019010:	2301      	movs	r3, #1
 8019012:	e004      	b.n	801901e <rmw_validate_full_topic_name+0x8e>
 8019014:	4298      	cmp	r0, r3
 8019016:	f104 0401 	add.w	r4, r4, #1
 801901a:	d91c      	bls.n	8019056 <rmw_validate_full_topic_name+0xc6>
 801901c:	4613      	mov	r3, r2
 801901e:	4298      	cmp	r0, r3
 8019020:	f103 0201 	add.w	r2, r3, #1
 8019024:	d0f6      	beq.n	8019014 <rmw_validate_full_topic_name+0x84>
 8019026:	7821      	ldrb	r1, [r4, #0]
 8019028:	292f      	cmp	r1, #47	@ 0x2f
 801902a:	d1f3      	bne.n	8019014 <rmw_validate_full_topic_name+0x84>
 801902c:	7861      	ldrb	r1, [r4, #1]
 801902e:	292f      	cmp	r1, #47	@ 0x2f
 8019030:	d01c      	beq.n	801906c <rmw_validate_full_topic_name+0xdc>
 8019032:	5dc9      	ldrb	r1, [r1, r7]
 8019034:	0749      	lsls	r1, r1, #29
 8019036:	d5ed      	bpl.n	8019014 <rmw_validate_full_topic_name+0x84>
 8019038:	2206      	movs	r2, #6
 801903a:	602a      	str	r2, [r5, #0]
 801903c:	2e00      	cmp	r6, #0
 801903e:	d0c1      	beq.n	8018fc4 <rmw_validate_full_topic_name+0x34>
 8019040:	6033      	str	r3, [r6, #0]
 8019042:	e7bf      	b.n	8018fc4 <rmw_validate_full_topic_name+0x34>
 8019044:	200b      	movs	r0, #11
 8019046:	4770      	bx	lr
 8019048:	200b      	movs	r0, #11
 801904a:	e7b5      	b.n	8018fb8 <rmw_validate_full_topic_name+0x28>
 801904c:	2203      	movs	r2, #3
 801904e:	602a      	str	r2, [r5, #0]
 8019050:	2e00      	cmp	r6, #0
 8019052:	d1f5      	bne.n	8019040 <rmw_validate_full_topic_name+0xb0>
 8019054:	e7b6      	b.n	8018fc4 <rmw_validate_full_topic_name+0x34>
 8019056:	28f7      	cmp	r0, #247	@ 0xf7
 8019058:	d802      	bhi.n	8019060 <rmw_validate_full_topic_name+0xd0>
 801905a:	2000      	movs	r0, #0
 801905c:	6028      	str	r0, [r5, #0]
 801905e:	e7ab      	b.n	8018fb8 <rmw_validate_full_topic_name+0x28>
 8019060:	2307      	movs	r3, #7
 8019062:	602b      	str	r3, [r5, #0]
 8019064:	2e00      	cmp	r6, #0
 8019066:	d0ad      	beq.n	8018fc4 <rmw_validate_full_topic_name+0x34>
 8019068:	23f6      	movs	r3, #246	@ 0xf6
 801906a:	e7e9      	b.n	8019040 <rmw_validate_full_topic_name+0xb0>
 801906c:	2205      	movs	r2, #5
 801906e:	602a      	str	r2, [r5, #0]
 8019070:	2e00      	cmp	r6, #0
 8019072:	d1e5      	bne.n	8019040 <rmw_validate_full_topic_name+0xb0>
 8019074:	e7a6      	b.n	8018fc4 <rmw_validate_full_topic_name+0x34>
 8019076:	bf00      	nop
 8019078:	0801e897 	.word	0x0801e897

0801907c <on_status>:
 801907c:	b082      	sub	sp, #8
 801907e:	b002      	add	sp, #8
 8019080:	4770      	bx	lr
 8019082:	bf00      	nop

08019084 <on_topic>:
 8019084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019088:	4a22      	ldr	r2, [pc, #136]	@ (8019114 <on_topic+0x90>)
 801908a:	b094      	sub	sp, #80	@ 0x50
 801908c:	6812      	ldr	r2, [r2, #0]
 801908e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019090:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019094:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019098:	b3c2      	cbz	r2, 801910c <on_topic+0x88>
 801909a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801909e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80190a2:	e001      	b.n	80190a8 <on_topic+0x24>
 80190a4:	6852      	ldr	r2, [r2, #4]
 80190a6:	b38a      	cbz	r2, 801910c <on_topic+0x88>
 80190a8:	6894      	ldr	r4, [r2, #8]
 80190aa:	8aa3      	ldrh	r3, [r4, #20]
 80190ac:	428b      	cmp	r3, r1
 80190ae:	d1f9      	bne.n	80190a4 <on_topic+0x20>
 80190b0:	7da3      	ldrb	r3, [r4, #22]
 80190b2:	4283      	cmp	r3, r0
 80190b4:	d1f6      	bne.n	80190a4 <on_topic+0x20>
 80190b6:	2248      	movs	r2, #72	@ 0x48
 80190b8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80190bc:	4668      	mov	r0, sp
 80190be:	f003 faea 	bl	801c696 <memcpy>
 80190c2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80190c6:	cb0c      	ldmia	r3, {r2, r3}
 80190c8:	4620      	mov	r0, r4
 80190ca:	f7f8 ff0b 	bl	8011ee4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80190ce:	4607      	mov	r7, r0
 80190d0:	b1e0      	cbz	r0, 801910c <on_topic+0x88>
 80190d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80190d6:	4632      	mov	r2, r6
 80190d8:	4628      	mov	r0, r5
 80190da:	f108 0110 	add.w	r1, r8, #16
 80190de:	f7f9 fc83 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 80190e2:	b930      	cbnz	r0, 80190f2 <on_topic+0x6e>
 80190e4:	480c      	ldr	r0, [pc, #48]	@ (8019118 <on_topic+0x94>)
 80190e6:	4639      	mov	r1, r7
 80190e8:	b014      	add	sp, #80	@ 0x50
 80190ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190ee:	f000 b8bd 	b.w	801926c <put_memory>
 80190f2:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80190f6:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80190fa:	f7f8 fceb 	bl	8011ad4 <rmw_uros_epoch_nanos>
 80190fe:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8019102:	2305      	movs	r3, #5
 8019104:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019108:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801910c:	b014      	add	sp, #80	@ 0x50
 801910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019112:	bf00      	nop
 8019114:	20011aac 	.word	0x20011aac
 8019118:	20011a9c 	.word	0x20011a9c

0801911c <on_request>:
 801911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019120:	4823      	ldr	r0, [pc, #140]	@ (80191b0 <on_request+0x94>)
 8019122:	b094      	sub	sp, #80	@ 0x50
 8019124:	6800      	ldr	r0, [r0, #0]
 8019126:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019128:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801912c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801912e:	2800      	cmp	r0, #0
 8019130:	d03b      	beq.n	80191aa <on_request+0x8e>
 8019132:	461d      	mov	r5, r3
 8019134:	e001      	b.n	801913a <on_request+0x1e>
 8019136:	6840      	ldr	r0, [r0, #4]
 8019138:	b3b8      	cbz	r0, 80191aa <on_request+0x8e>
 801913a:	6884      	ldr	r4, [r0, #8]
 801913c:	8b21      	ldrh	r1, [r4, #24]
 801913e:	4291      	cmp	r1, r2
 8019140:	d1f9      	bne.n	8019136 <on_request+0x1a>
 8019142:	2248      	movs	r2, #72	@ 0x48
 8019144:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019148:	4668      	mov	r0, sp
 801914a:	f003 faa4 	bl	801c696 <memcpy>
 801914e:	f104 0320 	add.w	r3, r4, #32
 8019152:	cb0c      	ldmia	r3, {r2, r3}
 8019154:	4620      	mov	r0, r4
 8019156:	f7f8 fec5 	bl	8011ee4 <rmw_uxrce_get_static_input_buffer_for_entity>
 801915a:	4680      	mov	r8, r0
 801915c:	b328      	cbz	r0, 80191aa <on_request+0x8e>
 801915e:	4638      	mov	r0, r7
 8019160:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8019164:	4632      	mov	r2, r6
 8019166:	f107 0110 	add.w	r1, r7, #16
 801916a:	f7f9 fc3d 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 801916e:	b930      	cbnz	r0, 801917e <on_request+0x62>
 8019170:	4810      	ldr	r0, [pc, #64]	@ (80191b4 <on_request+0x98>)
 8019172:	4641      	mov	r1, r8
 8019174:	b014      	add	sp, #80	@ 0x50
 8019176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801917a:	f000 b877 	b.w	801926c <put_memory>
 801917e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019180:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8019184:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019188:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801918c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019194:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019198:	f7f8 fc9c 	bl	8011ad4 <rmw_uros_epoch_nanos>
 801919c:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80191a0:	2303      	movs	r3, #3
 80191a2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80191a6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80191aa:	b014      	add	sp, #80	@ 0x50
 80191ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191b0:	20011a7c 	.word	0x20011a7c
 80191b4:	20011a9c 	.word	0x20011a9c

080191b8 <on_reply>:
 80191b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191bc:	4821      	ldr	r0, [pc, #132]	@ (8019244 <on_reply+0x8c>)
 80191be:	b094      	sub	sp, #80	@ 0x50
 80191c0:	6800      	ldr	r0, [r0, #0]
 80191c2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80191c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80191c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80191ca:	b3b8      	cbz	r0, 801923c <on_reply+0x84>
 80191cc:	461d      	mov	r5, r3
 80191ce:	e001      	b.n	80191d4 <on_reply+0x1c>
 80191d0:	6840      	ldr	r0, [r0, #4]
 80191d2:	b398      	cbz	r0, 801923c <on_reply+0x84>
 80191d4:	6884      	ldr	r4, [r0, #8]
 80191d6:	8b21      	ldrh	r1, [r4, #24]
 80191d8:	4291      	cmp	r1, r2
 80191da:	d1f9      	bne.n	80191d0 <on_reply+0x18>
 80191dc:	2248      	movs	r2, #72	@ 0x48
 80191de:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80191e2:	4668      	mov	r0, sp
 80191e4:	f003 fa57 	bl	801c696 <memcpy>
 80191e8:	f104 0320 	add.w	r3, r4, #32
 80191ec:	cb0c      	ldmia	r3, {r2, r3}
 80191ee:	4620      	mov	r0, r4
 80191f0:	f7f8 fe78 	bl	8011ee4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80191f4:	4680      	mov	r8, r0
 80191f6:	b308      	cbz	r0, 801923c <on_reply+0x84>
 80191f8:	4638      	mov	r0, r7
 80191fa:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80191fe:	4632      	mov	r2, r6
 8019200:	f107 0110 	add.w	r1, r7, #16
 8019204:	f7f9 fbf0 	bl	80129e8 <ucdr_deserialize_array_uint8_t>
 8019208:	b930      	cbnz	r0, 8019218 <on_reply+0x60>
 801920a:	480f      	ldr	r0, [pc, #60]	@ (8019248 <on_reply+0x90>)
 801920c:	4641      	mov	r1, r8
 801920e:	b014      	add	sp, #80	@ 0x50
 8019210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019214:	f000 b82a 	b.w	801926c <put_memory>
 8019218:	2200      	movs	r2, #0
 801921a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801921e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019222:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019226:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801922a:	f7f8 fc53 	bl	8011ad4 <rmw_uros_epoch_nanos>
 801922e:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019232:	2304      	movs	r3, #4
 8019234:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019238:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801923c:	b014      	add	sp, #80	@ 0x50
 801923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019242:	bf00      	nop
 8019244:	2000d18c 	.word	0x2000d18c
 8019248:	20011a9c 	.word	0x20011a9c

0801924c <get_memory>:
 801924c:	4603      	mov	r3, r0
 801924e:	6840      	ldr	r0, [r0, #4]
 8019250:	b158      	cbz	r0, 801926a <get_memory+0x1e>
 8019252:	6842      	ldr	r2, [r0, #4]
 8019254:	605a      	str	r2, [r3, #4]
 8019256:	b10a      	cbz	r2, 801925c <get_memory+0x10>
 8019258:	2100      	movs	r1, #0
 801925a:	6011      	str	r1, [r2, #0]
 801925c:	681a      	ldr	r2, [r3, #0]
 801925e:	6042      	str	r2, [r0, #4]
 8019260:	b102      	cbz	r2, 8019264 <get_memory+0x18>
 8019262:	6010      	str	r0, [r2, #0]
 8019264:	2200      	movs	r2, #0
 8019266:	6002      	str	r2, [r0, #0]
 8019268:	6018      	str	r0, [r3, #0]
 801926a:	4770      	bx	lr

0801926c <put_memory>:
 801926c:	680b      	ldr	r3, [r1, #0]
 801926e:	b10b      	cbz	r3, 8019274 <put_memory+0x8>
 8019270:	684a      	ldr	r2, [r1, #4]
 8019272:	605a      	str	r2, [r3, #4]
 8019274:	684a      	ldr	r2, [r1, #4]
 8019276:	b102      	cbz	r2, 801927a <put_memory+0xe>
 8019278:	6013      	str	r3, [r2, #0]
 801927a:	6803      	ldr	r3, [r0, #0]
 801927c:	428b      	cmp	r3, r1
 801927e:	6843      	ldr	r3, [r0, #4]
 8019280:	bf08      	it	eq
 8019282:	6002      	streq	r2, [r0, #0]
 8019284:	604b      	str	r3, [r1, #4]
 8019286:	b103      	cbz	r3, 801928a <put_memory+0x1e>
 8019288:	6019      	str	r1, [r3, #0]
 801928a:	2300      	movs	r3, #0
 801928c:	600b      	str	r3, [r1, #0]
 801928e:	6041      	str	r1, [r0, #4]
 8019290:	4770      	bx	lr
 8019292:	bf00      	nop

08019294 <rmw_destroy_client>:
 8019294:	b570      	push	{r4, r5, r6, lr}
 8019296:	b128      	cbz	r0, 80192a4 <rmw_destroy_client+0x10>
 8019298:	4604      	mov	r4, r0
 801929a:	6800      	ldr	r0, [r0, #0]
 801929c:	460d      	mov	r5, r1
 801929e:	f7f8 ff95 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 80192a2:	b910      	cbnz	r0, 80192aa <rmw_destroy_client+0x16>
 80192a4:	2401      	movs	r4, #1
 80192a6:	4620      	mov	r0, r4
 80192a8:	bd70      	pop	{r4, r5, r6, pc}
 80192aa:	6863      	ldr	r3, [r4, #4]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d0f9      	beq.n	80192a4 <rmw_destroy_client+0x10>
 80192b0:	2d00      	cmp	r5, #0
 80192b2:	d0f7      	beq.n	80192a4 <rmw_destroy_client+0x10>
 80192b4:	6828      	ldr	r0, [r5, #0]
 80192b6:	f7f8 ff89 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 80192ba:	2800      	cmp	r0, #0
 80192bc:	d0f2      	beq.n	80192a4 <rmw_destroy_client+0x10>
 80192be:	686e      	ldr	r6, [r5, #4]
 80192c0:	2e00      	cmp	r6, #0
 80192c2:	d0ef      	beq.n	80192a4 <rmw_destroy_client+0x10>
 80192c4:	6864      	ldr	r4, [r4, #4]
 80192c6:	6932      	ldr	r2, [r6, #16]
 80192c8:	6920      	ldr	r0, [r4, #16]
 80192ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192d2:	6819      	ldr	r1, [r3, #0]
 80192d4:	f7fa f920 	bl	8013518 <uxr_buffer_cancel_data>
 80192d8:	4602      	mov	r2, r0
 80192da:	6920      	ldr	r0, [r4, #16]
 80192dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80192e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80192e4:	f7f8 fef2 	bl	80120cc <run_xrce_session>
 80192e8:	6920      	ldr	r0, [r4, #16]
 80192ea:	6932      	ldr	r2, [r6, #16]
 80192ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192f4:	6819      	ldr	r1, [r3, #0]
 80192f6:	f7f9 fcdd 	bl	8012cb4 <uxr_buffer_delete_entity>
 80192fa:	4602      	mov	r2, r0
 80192fc:	6920      	ldr	r0, [r4, #16]
 80192fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019302:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019306:	f7f8 fee1 	bl	80120cc <run_xrce_session>
 801930a:	2800      	cmp	r0, #0
 801930c:	4628      	mov	r0, r5
 801930e:	bf14      	ite	ne
 8019310:	2400      	movne	r4, #0
 8019312:	2402      	moveq	r4, #2
 8019314:	f7f8 fdc4 	bl	8011ea0 <rmw_uxrce_fini_client_memory>
 8019318:	e7c5      	b.n	80192a6 <rmw_destroy_client+0x12>
 801931a:	bf00      	nop

0801931c <rmw_get_implementation_identifier>:
 801931c:	4b01      	ldr	r3, [pc, #4]	@ (8019324 <rmw_get_implementation_identifier+0x8>)
 801931e:	6818      	ldr	r0, [r3, #0]
 8019320:	4770      	bx	lr
 8019322:	bf00      	nop
 8019324:	0801e390 	.word	0x0801e390

08019328 <rmw_create_guard_condition>:
 8019328:	b538      	push	{r3, r4, r5, lr}
 801932a:	4605      	mov	r5, r0
 801932c:	4807      	ldr	r0, [pc, #28]	@ (801934c <rmw_create_guard_condition+0x24>)
 801932e:	f7ff ff8d 	bl	801924c <get_memory>
 8019332:	b148      	cbz	r0, 8019348 <rmw_create_guard_condition+0x20>
 8019334:	6884      	ldr	r4, [r0, #8]
 8019336:	2300      	movs	r3, #0
 8019338:	7423      	strb	r3, [r4, #16]
 801933a:	61e5      	str	r5, [r4, #28]
 801933c:	f7ff ffee 	bl	801931c <rmw_get_implementation_identifier>
 8019340:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019344:	f104 0014 	add.w	r0, r4, #20
 8019348:	bd38      	pop	{r3, r4, r5, pc}
 801934a:	bf00      	nop
 801934c:	20011a3c 	.word	0x20011a3c

08019350 <rmw_destroy_guard_condition>:
 8019350:	b508      	push	{r3, lr}
 8019352:	4b08      	ldr	r3, [pc, #32]	@ (8019374 <rmw_destroy_guard_condition+0x24>)
 8019354:	6819      	ldr	r1, [r3, #0]
 8019356:	b911      	cbnz	r1, 801935e <rmw_destroy_guard_condition+0xe>
 8019358:	e00a      	b.n	8019370 <rmw_destroy_guard_condition+0x20>
 801935a:	6849      	ldr	r1, [r1, #4]
 801935c:	b141      	cbz	r1, 8019370 <rmw_destroy_guard_condition+0x20>
 801935e:	688b      	ldr	r3, [r1, #8]
 8019360:	3314      	adds	r3, #20
 8019362:	4298      	cmp	r0, r3
 8019364:	d1f9      	bne.n	801935a <rmw_destroy_guard_condition+0xa>
 8019366:	4803      	ldr	r0, [pc, #12]	@ (8019374 <rmw_destroy_guard_condition+0x24>)
 8019368:	f7ff ff80 	bl	801926c <put_memory>
 801936c:	2000      	movs	r0, #0
 801936e:	bd08      	pop	{r3, pc}
 8019370:	2001      	movs	r0, #1
 8019372:	bd08      	pop	{r3, pc}
 8019374:	20011a3c 	.word	0x20011a3c

08019378 <create_topic>:
 8019378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801937c:	4605      	mov	r5, r0
 801937e:	b084      	sub	sp, #16
 8019380:	4822      	ldr	r0, [pc, #136]	@ (801940c <create_topic+0x94>)
 8019382:	460f      	mov	r7, r1
 8019384:	4616      	mov	r6, r2
 8019386:	f7ff ff61 	bl	801924c <get_memory>
 801938a:	4604      	mov	r4, r0
 801938c:	2800      	cmp	r0, #0
 801938e:	d039      	beq.n	8019404 <create_topic+0x8c>
 8019390:	692b      	ldr	r3, [r5, #16]
 8019392:	6884      	ldr	r4, [r0, #8]
 8019394:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8019414 <create_topic+0x9c>
 8019398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801939c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80193a0:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80193a4:	1c42      	adds	r2, r0, #1
 80193a6:	2102      	movs	r1, #2
 80193a8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80193ac:	f7f9 ff46 	bl	801323c <uxr_object_id>
 80193b0:	223c      	movs	r2, #60	@ 0x3c
 80193b2:	6120      	str	r0, [r4, #16]
 80193b4:	4641      	mov	r1, r8
 80193b6:	4638      	mov	r0, r7
 80193b8:	f7f8 feee 	bl	8012198 <generate_topic_name>
 80193bc:	b1f0      	cbz	r0, 80193fc <create_topic+0x84>
 80193be:	4f14      	ldr	r7, [pc, #80]	@ (8019410 <create_topic+0x98>)
 80193c0:	4630      	mov	r0, r6
 80193c2:	2264      	movs	r2, #100	@ 0x64
 80193c4:	4639      	mov	r1, r7
 80193c6:	f7f8 feb7 	bl	8012138 <generate_type_name>
 80193ca:	b1b8      	cbz	r0, 80193fc <create_topic+0x84>
 80193cc:	6928      	ldr	r0, [r5, #16]
 80193ce:	2306      	movs	r3, #6
 80193d0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80193d4:	f8cd 8000 	str.w	r8, [sp]
 80193d8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80193dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80193e0:	6811      	ldr	r1, [r2, #0]
 80193e2:	696b      	ldr	r3, [r5, #20]
 80193e4:	6922      	ldr	r2, [r4, #16]
 80193e6:	f7f9 fce3 	bl	8012db0 <uxr_buffer_create_topic_bin>
 80193ea:	4602      	mov	r2, r0
 80193ec:	6928      	ldr	r0, [r5, #16]
 80193ee:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80193f2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80193f6:	f7f8 fe69 	bl	80120cc <run_xrce_session>
 80193fa:	b918      	cbnz	r0, 8019404 <create_topic+0x8c>
 80193fc:	4620      	mov	r0, r4
 80193fe:	f7f8 fd65 	bl	8011ecc <rmw_uxrce_fini_topic_memory>
 8019402:	2400      	movs	r4, #0
 8019404:	4620      	mov	r0, r4
 8019406:	b004      	add	sp, #16
 8019408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801940c:	20011abc 	.word	0x20011abc
 8019410:	20011b38 	.word	0x20011b38
 8019414:	20011afc 	.word	0x20011afc

08019418 <destroy_topic>:
 8019418:	b538      	push	{r3, r4, r5, lr}
 801941a:	6985      	ldr	r5, [r0, #24]
 801941c:	b1d5      	cbz	r5, 8019454 <destroy_topic+0x3c>
 801941e:	4604      	mov	r4, r0
 8019420:	6928      	ldr	r0, [r5, #16]
 8019422:	6922      	ldr	r2, [r4, #16]
 8019424:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019428:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801942c:	6819      	ldr	r1, [r3, #0]
 801942e:	f7f9 fc41 	bl	8012cb4 <uxr_buffer_delete_entity>
 8019432:	4602      	mov	r2, r0
 8019434:	6928      	ldr	r0, [r5, #16]
 8019436:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801943a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801943e:	f7f8 fe45 	bl	80120cc <run_xrce_session>
 8019442:	2800      	cmp	r0, #0
 8019444:	4620      	mov	r0, r4
 8019446:	bf14      	ite	ne
 8019448:	2400      	movne	r4, #0
 801944a:	2402      	moveq	r4, #2
 801944c:	f7f8 fd3e 	bl	8011ecc <rmw_uxrce_fini_topic_memory>
 8019450:	4620      	mov	r0, r4
 8019452:	bd38      	pop	{r3, r4, r5, pc}
 8019454:	2401      	movs	r4, #1
 8019456:	4620      	mov	r0, r4
 8019458:	bd38      	pop	{r3, r4, r5, pc}
 801945a:	bf00      	nop

0801945c <rmw_send_request>:
 801945c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019460:	4604      	mov	r4, r0
 8019462:	6800      	ldr	r0, [r0, #0]
 8019464:	b08b      	sub	sp, #44	@ 0x2c
 8019466:	460e      	mov	r6, r1
 8019468:	4615      	mov	r5, r2
 801946a:	b128      	cbz	r0, 8019478 <rmw_send_request+0x1c>
 801946c:	4b21      	ldr	r3, [pc, #132]	@ (80194f4 <rmw_send_request+0x98>)
 801946e:	6819      	ldr	r1, [r3, #0]
 8019470:	f7e6 fece 	bl	8000210 <strcmp>
 8019474:	2800      	cmp	r0, #0
 8019476:	d139      	bne.n	80194ec <rmw_send_request+0x90>
 8019478:	6864      	ldr	r4, [r4, #4]
 801947a:	6963      	ldr	r3, [r4, #20]
 801947c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019480:	689b      	ldr	r3, [r3, #8]
 8019482:	4798      	blx	r3
 8019484:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019488:	4630      	mov	r0, r6
 801948a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801948e:	4798      	blx	r3
 8019490:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019494:	9000      	str	r0, [sp, #0]
 8019496:	6922      	ldr	r2, [r4, #16]
 8019498:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801949a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801949e:	ab02      	add	r3, sp, #8
 80194a0:	f7fc f8b6 	bl	8015610 <uxr_prepare_output_stream>
 80194a4:	2700      	movs	r7, #0
 80194a6:	6028      	str	r0, [r5, #0]
 80194a8:	606f      	str	r7, [r5, #4]
 80194aa:	b198      	cbz	r0, 80194d4 <rmw_send_request+0x78>
 80194ac:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80194b0:	a902      	add	r1, sp, #8
 80194b2:	4630      	mov	r0, r6
 80194b4:	4798      	blx	r3
 80194b6:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80194ba:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80194be:	2b01      	cmp	r3, #1
 80194c0:	d00c      	beq.n	80194dc <rmw_send_request+0x80>
 80194c2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80194c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80194c8:	f7fa fdfa 	bl	80140c0 <uxr_run_session_until_confirm_delivery>
 80194cc:	4638      	mov	r0, r7
 80194ce:	b00b      	add	sp, #44	@ 0x2c
 80194d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194d4:	2001      	movs	r0, #1
 80194d6:	b00b      	add	sp, #44	@ 0x2c
 80194d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80194e0:	f7fa fa2e 	bl	8013940 <uxr_flash_output_streams>
 80194e4:	4638      	mov	r0, r7
 80194e6:	b00b      	add	sp, #44	@ 0x2c
 80194e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194ec:	200c      	movs	r0, #12
 80194ee:	b00b      	add	sp, #44	@ 0x2c
 80194f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194f4:	0801e390 	.word	0x0801e390

080194f8 <rmw_take_request>:
 80194f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194fc:	4605      	mov	r5, r0
 80194fe:	6800      	ldr	r0, [r0, #0]
 8019500:	b089      	sub	sp, #36	@ 0x24
 8019502:	460c      	mov	r4, r1
 8019504:	4690      	mov	r8, r2
 8019506:	461e      	mov	r6, r3
 8019508:	b128      	cbz	r0, 8019516 <rmw_take_request+0x1e>
 801950a:	4b28      	ldr	r3, [pc, #160]	@ (80195ac <rmw_take_request+0xb4>)
 801950c:	6819      	ldr	r1, [r3, #0]
 801950e:	f7e6 fe7f 	bl	8000210 <strcmp>
 8019512:	2800      	cmp	r0, #0
 8019514:	d146      	bne.n	80195a4 <rmw_take_request+0xac>
 8019516:	b10e      	cbz	r6, 801951c <rmw_take_request+0x24>
 8019518:	2300      	movs	r3, #0
 801951a:	7033      	strb	r3, [r6, #0]
 801951c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8019520:	f7f8 fd56 	bl	8011fd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019524:	4648      	mov	r0, r9
 8019526:	f7f8 fd2d 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 801952a:	4607      	mov	r7, r0
 801952c:	b3b0      	cbz	r0, 801959c <rmw_take_request+0xa4>
 801952e:	6885      	ldr	r5, [r0, #8]
 8019530:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8019534:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8019538:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801953c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8019540:	7423      	strb	r3, [r4, #16]
 8019542:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8019546:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801954a:	74e2      	strb	r2, [r4, #19]
 801954c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8019550:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8019554:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8019558:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801955c:	61e1      	str	r1, [r4, #28]
 801955e:	6162      	str	r2, [r4, #20]
 8019560:	61a3      	str	r3, [r4, #24]
 8019562:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019566:	689b      	ldr	r3, [r3, #8]
 8019568:	4798      	blx	r3
 801956a:	6844      	ldr	r4, [r0, #4]
 801956c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019570:	f105 0110 	add.w	r1, r5, #16
 8019574:	4668      	mov	r0, sp
 8019576:	f7f4 fce9 	bl	800df4c <ucdr_init_buffer>
 801957a:	68e3      	ldr	r3, [r4, #12]
 801957c:	4641      	mov	r1, r8
 801957e:	4668      	mov	r0, sp
 8019580:	4798      	blx	r3
 8019582:	4639      	mov	r1, r7
 8019584:	4604      	mov	r4, r0
 8019586:	480a      	ldr	r0, [pc, #40]	@ (80195b0 <rmw_take_request+0xb8>)
 8019588:	f7ff fe70 	bl	801926c <put_memory>
 801958c:	b106      	cbz	r6, 8019590 <rmw_take_request+0x98>
 801958e:	7034      	strb	r4, [r6, #0]
 8019590:	f084 0001 	eor.w	r0, r4, #1
 8019594:	b2c0      	uxtb	r0, r0
 8019596:	b009      	add	sp, #36	@ 0x24
 8019598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801959c:	2001      	movs	r0, #1
 801959e:	b009      	add	sp, #36	@ 0x24
 80195a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195a4:	200c      	movs	r0, #12
 80195a6:	b009      	add	sp, #36	@ 0x24
 80195a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195ac:	0801e390 	.word	0x0801e390
 80195b0:	20011a9c 	.word	0x20011a9c

080195b4 <rmw_send_response>:
 80195b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195b6:	4605      	mov	r5, r0
 80195b8:	6800      	ldr	r0, [r0, #0]
 80195ba:	b091      	sub	sp, #68	@ 0x44
 80195bc:	460c      	mov	r4, r1
 80195be:	4616      	mov	r6, r2
 80195c0:	b128      	cbz	r0, 80195ce <rmw_send_response+0x1a>
 80195c2:	4b29      	ldr	r3, [pc, #164]	@ (8019668 <rmw_send_response+0xb4>)
 80195c4:	6819      	ldr	r1, [r3, #0]
 80195c6:	f7e6 fe23 	bl	8000210 <strcmp>
 80195ca:	2800      	cmp	r0, #0
 80195cc:	d141      	bne.n	8019652 <rmw_send_response+0x9e>
 80195ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80195d2:	9306      	str	r3, [sp, #24]
 80195d4:	4623      	mov	r3, r4
 80195d6:	9207      	str	r2, [sp, #28]
 80195d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195dc:	686d      	ldr	r5, [r5, #4]
 80195de:	789b      	ldrb	r3, [r3, #2]
 80195e0:	68a1      	ldr	r1, [r4, #8]
 80195e2:	f88d 2017 	strb.w	r2, [sp, #23]
 80195e6:	f88d 3016 	strb.w	r3, [sp, #22]
 80195ea:	68e2      	ldr	r2, [r4, #12]
 80195ec:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80195f0:	6860      	ldr	r0, [r4, #4]
 80195f2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80195f6:	ab02      	add	r3, sp, #8
 80195f8:	c307      	stmia	r3!, {r0, r1, r2}
 80195fa:	696b      	ldr	r3, [r5, #20]
 80195fc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80195fe:	68db      	ldr	r3, [r3, #12]
 8019600:	4798      	blx	r3
 8019602:	6844      	ldr	r4, [r0, #4]
 8019604:	4630      	mov	r0, r6
 8019606:	6923      	ldr	r3, [r4, #16]
 8019608:	4798      	blx	r3
 801960a:	f100 0318 	add.w	r3, r0, #24
 801960e:	6938      	ldr	r0, [r7, #16]
 8019610:	9300      	str	r3, [sp, #0]
 8019612:	692a      	ldr	r2, [r5, #16]
 8019614:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8019616:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801961a:	ab08      	add	r3, sp, #32
 801961c:	f7fb fff8 	bl	8015610 <uxr_prepare_output_stream>
 8019620:	b910      	cbnz	r0, 8019628 <rmw_send_response+0x74>
 8019622:	2001      	movs	r0, #1
 8019624:	b011      	add	sp, #68	@ 0x44
 8019626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019628:	a902      	add	r1, sp, #8
 801962a:	a808      	add	r0, sp, #32
 801962c:	f7fd f93c 	bl	80168a8 <uxr_serialize_SampleIdentity>
 8019630:	68a3      	ldr	r3, [r4, #8]
 8019632:	a908      	add	r1, sp, #32
 8019634:	4630      	mov	r0, r6
 8019636:	4798      	blx	r3
 8019638:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801963c:	6938      	ldr	r0, [r7, #16]
 801963e:	2b01      	cmp	r3, #1
 8019640:	d00a      	beq.n	8019658 <rmw_send_response+0xa4>
 8019642:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8019644:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019648:	f7fa fd3a 	bl	80140c0 <uxr_run_session_until_confirm_delivery>
 801964c:	2000      	movs	r0, #0
 801964e:	b011      	add	sp, #68	@ 0x44
 8019650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019652:	200c      	movs	r0, #12
 8019654:	b011      	add	sp, #68	@ 0x44
 8019656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019658:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801965c:	f7fa f970 	bl	8013940 <uxr_flash_output_streams>
 8019660:	2000      	movs	r0, #0
 8019662:	b011      	add	sp, #68	@ 0x44
 8019664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019666:	bf00      	nop
 8019668:	0801e390 	.word	0x0801e390

0801966c <rmw_take_response>:
 801966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019670:	4604      	mov	r4, r0
 8019672:	6800      	ldr	r0, [r0, #0]
 8019674:	b088      	sub	sp, #32
 8019676:	4688      	mov	r8, r1
 8019678:	4617      	mov	r7, r2
 801967a:	461d      	mov	r5, r3
 801967c:	b120      	cbz	r0, 8019688 <rmw_take_response+0x1c>
 801967e:	4b1e      	ldr	r3, [pc, #120]	@ (80196f8 <rmw_take_response+0x8c>)
 8019680:	6819      	ldr	r1, [r3, #0]
 8019682:	f7e6 fdc5 	bl	8000210 <strcmp>
 8019686:	bb78      	cbnz	r0, 80196e8 <rmw_take_response+0x7c>
 8019688:	b10d      	cbz	r5, 801968e <rmw_take_response+0x22>
 801968a:	2300      	movs	r3, #0
 801968c:	702b      	strb	r3, [r5, #0]
 801968e:	6864      	ldr	r4, [r4, #4]
 8019690:	f7f8 fc9e 	bl	8011fd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8019694:	4620      	mov	r0, r4
 8019696:	f7f8 fc75 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 801969a:	4606      	mov	r6, r0
 801969c:	b340      	cbz	r0, 80196f0 <rmw_take_response+0x84>
 801969e:	6963      	ldr	r3, [r4, #20]
 80196a0:	6884      	ldr	r4, [r0, #8]
 80196a2:	68db      	ldr	r3, [r3, #12]
 80196a4:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80196a8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80196ac:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80196b0:	4798      	blx	r3
 80196b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80196b6:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80196ba:	f104 0110 	add.w	r1, r4, #16
 80196be:	4668      	mov	r0, sp
 80196c0:	f7f4 fc44 	bl	800df4c <ucdr_init_buffer>
 80196c4:	4639      	mov	r1, r7
 80196c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80196ca:	4668      	mov	r0, sp
 80196cc:	4798      	blx	r3
 80196ce:	4631      	mov	r1, r6
 80196d0:	4604      	mov	r4, r0
 80196d2:	480a      	ldr	r0, [pc, #40]	@ (80196fc <rmw_take_response+0x90>)
 80196d4:	f7ff fdca 	bl	801926c <put_memory>
 80196d8:	b105      	cbz	r5, 80196dc <rmw_take_response+0x70>
 80196da:	702c      	strb	r4, [r5, #0]
 80196dc:	f084 0001 	eor.w	r0, r4, #1
 80196e0:	b2c0      	uxtb	r0, r0
 80196e2:	b008      	add	sp, #32
 80196e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196e8:	200c      	movs	r0, #12
 80196ea:	b008      	add	sp, #32
 80196ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f0:	2001      	movs	r0, #1
 80196f2:	b008      	add	sp, #32
 80196f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f8:	0801e390 	.word	0x0801e390
 80196fc:	20011a9c 	.word	0x20011a9c

08019700 <rmw_trigger_guard_condition>:
 8019700:	b160      	cbz	r0, 801971c <rmw_trigger_guard_condition+0x1c>
 8019702:	b510      	push	{r4, lr}
 8019704:	4604      	mov	r4, r0
 8019706:	6800      	ldr	r0, [r0, #0]
 8019708:	f7f8 fd60 	bl	80121cc <is_uxrce_rmw_identifier_valid>
 801970c:	b908      	cbnz	r0, 8019712 <rmw_trigger_guard_condition+0x12>
 801970e:	2001      	movs	r0, #1
 8019710:	bd10      	pop	{r4, pc}
 8019712:	6863      	ldr	r3, [r4, #4]
 8019714:	2201      	movs	r2, #1
 8019716:	741a      	strb	r2, [r3, #16]
 8019718:	2000      	movs	r0, #0
 801971a:	bd10      	pop	{r4, pc}
 801971c:	2001      	movs	r0, #1
 801971e:	4770      	bx	lr

08019720 <rmw_wait>:
 8019720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019724:	b089      	sub	sp, #36	@ 0x24
 8019726:	4605      	mov	r5, r0
 8019728:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801972a:	460e      	mov	r6, r1
 801972c:	4698      	mov	r8, r3
 801972e:	4691      	mov	r9, r2
 8019730:	2a00      	cmp	r2, #0
 8019732:	f000 810a 	beq.w	801994a <rmw_wait+0x22a>
 8019736:	b16c      	cbz	r4, 8019754 <rmw_wait+0x34>
 8019738:	4bae      	ldr	r3, [pc, #696]	@ (80199f4 <rmw_wait+0x2d4>)
 801973a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801973c:	af04      	add	r7, sp, #16
 801973e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019742:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019746:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801974a:	f7ff fb9d 	bl	8018e88 <rmw_time_equal>
 801974e:	2800      	cmp	r0, #0
 8019750:	f000 8127 	beq.w	80199a2 <rmw_wait+0x282>
 8019754:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019758:	f7f8 fc3a 	bl	8011fd0 <rmw_uxrce_clean_expired_static_input_buffer>
 801975c:	4ba6      	ldr	r3, [pc, #664]	@ (80199f8 <rmw_wait+0x2d8>)
 801975e:	681c      	ldr	r4, [r3, #0]
 8019760:	b14c      	cbz	r4, 8019776 <rmw_wait+0x56>
 8019762:	4623      	mov	r3, r4
 8019764:	2100      	movs	r1, #0
 8019766:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801976a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801976e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8019772:	2b00      	cmp	r3, #0
 8019774:	d1f7      	bne.n	8019766 <rmw_wait+0x46>
 8019776:	f1b9 0f00 	cmp.w	r9, #0
 801977a:	d011      	beq.n	80197a0 <rmw_wait+0x80>
 801977c:	f8d9 1000 	ldr.w	r1, [r9]
 8019780:	b171      	cbz	r1, 80197a0 <rmw_wait+0x80>
 8019782:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019786:	2300      	movs	r3, #0
 8019788:	2001      	movs	r0, #1
 801978a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801978e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019790:	6912      	ldr	r2, [r2, #16]
 8019792:	3301      	adds	r3, #1
 8019794:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019798:	4299      	cmp	r1, r3
 801979a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801979e:	d1f4      	bne.n	801978a <rmw_wait+0x6a>
 80197a0:	f1b8 0f00 	cmp.w	r8, #0
 80197a4:	d011      	beq.n	80197ca <rmw_wait+0xaa>
 80197a6:	f8d8 1000 	ldr.w	r1, [r8]
 80197aa:	b171      	cbz	r1, 80197ca <rmw_wait+0xaa>
 80197ac:	f8d8 c004 	ldr.w	ip, [r8, #4]
 80197b0:	2300      	movs	r3, #0
 80197b2:	2001      	movs	r0, #1
 80197b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80197b8:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80197ba:	6912      	ldr	r2, [r2, #16]
 80197bc:	3301      	adds	r3, #1
 80197be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80197c2:	4299      	cmp	r1, r3
 80197c4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80197c8:	d1f4      	bne.n	80197b4 <rmw_wait+0x94>
 80197ca:	b185      	cbz	r5, 80197ee <rmw_wait+0xce>
 80197cc:	6829      	ldr	r1, [r5, #0]
 80197ce:	b171      	cbz	r1, 80197ee <rmw_wait+0xce>
 80197d0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80197d4:	2300      	movs	r3, #0
 80197d6:	2001      	movs	r0, #1
 80197d8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80197dc:	6a12      	ldr	r2, [r2, #32]
 80197de:	6912      	ldr	r2, [r2, #16]
 80197e0:	3301      	adds	r3, #1
 80197e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80197e6:	4299      	cmp	r1, r3
 80197e8:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80197ec:	d1f4      	bne.n	80197d8 <rmw_wait+0xb8>
 80197ee:	b34c      	cbz	r4, 8019844 <rmw_wait+0x124>
 80197f0:	4622      	mov	r2, r4
 80197f2:	2300      	movs	r3, #0
 80197f4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80197f8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80197fc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019800:	440b      	add	r3, r1
 8019802:	b2db      	uxtb	r3, r3
 8019804:	2a00      	cmp	r2, #0
 8019806:	d1f5      	bne.n	80197f4 <rmw_wait+0xd4>
 8019808:	2b00      	cmp	r3, #0
 801980a:	f000 8084 	beq.w	8019916 <rmw_wait+0x1f6>
 801980e:	1c7a      	adds	r2, r7, #1
 8019810:	d00d      	beq.n	801982e <rmw_wait+0x10e>
 8019812:	ee07 7a90 	vmov	s15, r7
 8019816:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801981a:	ee07 3a90 	vmov	s15, r3
 801981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019826:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801982a:	ee17 7a90 	vmov	r7, s15
 801982e:	68a0      	ldr	r0, [r4, #8]
 8019830:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019834:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019838:	2b00      	cmp	r3, #0
 801983a:	f040 8090 	bne.w	801995e <rmw_wait+0x23e>
 801983e:	6864      	ldr	r4, [r4, #4]
 8019840:	2c00      	cmp	r4, #0
 8019842:	d1f4      	bne.n	801982e <rmw_wait+0x10e>
 8019844:	f1b9 0f00 	cmp.w	r9, #0
 8019848:	f000 80bc 	beq.w	80199c4 <rmw_wait+0x2a4>
 801984c:	f8d9 7000 	ldr.w	r7, [r9]
 8019850:	2f00      	cmp	r7, #0
 8019852:	f000 808e 	beq.w	8019972 <rmw_wait+0x252>
 8019856:	2400      	movs	r4, #0
 8019858:	4627      	mov	r7, r4
 801985a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801985e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019862:	f7f8 fb8f 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019866:	2800      	cmp	r0, #0
 8019868:	d05f      	beq.n	801992a <rmw_wait+0x20a>
 801986a:	f8d9 3000 	ldr.w	r3, [r9]
 801986e:	3401      	adds	r4, #1
 8019870:	42a3      	cmp	r3, r4
 8019872:	f04f 0701 	mov.w	r7, #1
 8019876:	d8f0      	bhi.n	801985a <rmw_wait+0x13a>
 8019878:	f1b8 0f00 	cmp.w	r8, #0
 801987c:	d012      	beq.n	80198a4 <rmw_wait+0x184>
 801987e:	f8d8 3000 	ldr.w	r3, [r8]
 8019882:	b17b      	cbz	r3, 80198a4 <rmw_wait+0x184>
 8019884:	2400      	movs	r4, #0
 8019886:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801988a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801988e:	f7f8 fb79 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019892:	2800      	cmp	r0, #0
 8019894:	d051      	beq.n	801993a <rmw_wait+0x21a>
 8019896:	f8d8 3000 	ldr.w	r3, [r8]
 801989a:	3401      	adds	r4, #1
 801989c:	42a3      	cmp	r3, r4
 801989e:	f04f 0701 	mov.w	r7, #1
 80198a2:	d8f0      	bhi.n	8019886 <rmw_wait+0x166>
 80198a4:	b1dd      	cbz	r5, 80198de <rmw_wait+0x1be>
 80198a6:	682b      	ldr	r3, [r5, #0]
 80198a8:	b1cb      	cbz	r3, 80198de <rmw_wait+0x1be>
 80198aa:	2400      	movs	r4, #0
 80198ac:	686b      	ldr	r3, [r5, #4]
 80198ae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80198b2:	f7f8 fb67 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80198b6:	b158      	cbz	r0, 80198d0 <rmw_wait+0x1b0>
 80198b8:	682b      	ldr	r3, [r5, #0]
 80198ba:	3401      	adds	r4, #1
 80198bc:	42a3      	cmp	r3, r4
 80198be:	d969      	bls.n	8019994 <rmw_wait+0x274>
 80198c0:	686b      	ldr	r3, [r5, #4]
 80198c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80198c6:	2701      	movs	r7, #1
 80198c8:	f7f8 fb5c 	bl	8011f84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80198cc:	2800      	cmp	r0, #0
 80198ce:	d1f3      	bne.n	80198b8 <rmw_wait+0x198>
 80198d0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80198d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80198d8:	3401      	adds	r4, #1
 80198da:	42a3      	cmp	r3, r4
 80198dc:	d8e6      	bhi.n	80198ac <rmw_wait+0x18c>
 80198de:	b1a6      	cbz	r6, 801990a <rmw_wait+0x1ea>
 80198e0:	6834      	ldr	r4, [r6, #0]
 80198e2:	b194      	cbz	r4, 801990a <rmw_wait+0x1ea>
 80198e4:	2300      	movs	r3, #0
 80198e6:	461d      	mov	r5, r3
 80198e8:	e004      	b.n	80198f4 <rmw_wait+0x1d4>
 80198ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80198ee:	3301      	adds	r3, #1
 80198f0:	42a3      	cmp	r3, r4
 80198f2:	d00a      	beq.n	801990a <rmw_wait+0x1ea>
 80198f4:	6870      	ldr	r0, [r6, #4]
 80198f6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80198fa:	7c0a      	ldrb	r2, [r1, #16]
 80198fc:	2a00      	cmp	r2, #0
 80198fe:	d0f4      	beq.n	80198ea <rmw_wait+0x1ca>
 8019900:	3301      	adds	r3, #1
 8019902:	42a3      	cmp	r3, r4
 8019904:	740d      	strb	r5, [r1, #16]
 8019906:	4617      	mov	r7, r2
 8019908:	d1f4      	bne.n	80198f4 <rmw_wait+0x1d4>
 801990a:	2f00      	cmp	r7, #0
 801990c:	d03e      	beq.n	801998c <rmw_wait+0x26c>
 801990e:	2000      	movs	r0, #0
 8019910:	b009      	add	sp, #36	@ 0x24
 8019912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019916:	68a0      	ldr	r0, [r4, #8]
 8019918:	2100      	movs	r1, #0
 801991a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801991e:	f7fa fb95 	bl	801404c <uxr_run_session_timeout>
 8019922:	6864      	ldr	r4, [r4, #4]
 8019924:	2c00      	cmp	r4, #0
 8019926:	d1f6      	bne.n	8019916 <rmw_wait+0x1f6>
 8019928:	e78c      	b.n	8019844 <rmw_wait+0x124>
 801992a:	e9d9 3200 	ldrd	r3, r2, [r9]
 801992e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019932:	3401      	adds	r4, #1
 8019934:	42a3      	cmp	r3, r4
 8019936:	d890      	bhi.n	801985a <rmw_wait+0x13a>
 8019938:	e79e      	b.n	8019878 <rmw_wait+0x158>
 801993a:	e9d8 3200 	ldrd	r3, r2, [r8]
 801993e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019942:	3401      	adds	r4, #1
 8019944:	429c      	cmp	r4, r3
 8019946:	d39e      	bcc.n	8019886 <rmw_wait+0x166>
 8019948:	e7ac      	b.n	80198a4 <rmw_wait+0x184>
 801994a:	2b00      	cmp	r3, #0
 801994c:	f47f aef3 	bne.w	8019736 <rmw_wait+0x16>
 8019950:	2800      	cmp	r0, #0
 8019952:	f47f aef0 	bne.w	8019736 <rmw_wait+0x16>
 8019956:	2900      	cmp	r1, #0
 8019958:	f47f aeed 	bne.w	8019736 <rmw_wait+0x16>
 801995c:	e7d7      	b.n	801990e <rmw_wait+0x1ee>
 801995e:	4639      	mov	r1, r7
 8019960:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019964:	f7fa fb8c 	bl	8014080 <uxr_run_session_until_data>
 8019968:	6864      	ldr	r4, [r4, #4]
 801996a:	2c00      	cmp	r4, #0
 801996c:	f47f af5f 	bne.w	801982e <rmw_wait+0x10e>
 8019970:	e768      	b.n	8019844 <rmw_wait+0x124>
 8019972:	f1b8 0f00 	cmp.w	r8, #0
 8019976:	d032      	beq.n	80199de <rmw_wait+0x2be>
 8019978:	f8d8 3000 	ldr.w	r3, [r8]
 801997c:	2b00      	cmp	r3, #0
 801997e:	d181      	bne.n	8019884 <rmw_wait+0x164>
 8019980:	461f      	mov	r7, r3
 8019982:	2d00      	cmp	r5, #0
 8019984:	d18f      	bne.n	80198a6 <rmw_wait+0x186>
 8019986:	462f      	mov	r7, r5
 8019988:	2e00      	cmp	r6, #0
 801998a:	d1a9      	bne.n	80198e0 <rmw_wait+0x1c0>
 801998c:	2002      	movs	r0, #2
 801998e:	b009      	add	sp, #36	@ 0x24
 8019990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019994:	2e00      	cmp	r6, #0
 8019996:	d0ba      	beq.n	801990e <rmw_wait+0x1ee>
 8019998:	6834      	ldr	r4, [r6, #0]
 801999a:	2701      	movs	r7, #1
 801999c:	2c00      	cmp	r4, #0
 801999e:	d1a1      	bne.n	80198e4 <rmw_wait+0x1c4>
 80199a0:	e7b5      	b.n	801990e <rmw_wait+0x1ee>
 80199a2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80199a6:	f7ff fac3 	bl	8018f30 <rmw_time_total_nsec>
 80199aa:	2300      	movs	r3, #0
 80199ac:	4a13      	ldr	r2, [pc, #76]	@ (80199fc <rmw_wait+0x2dc>)
 80199ae:	f7e7 f905 	bl	8000bbc <__aeabi_uldivmod>
 80199b2:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80199b6:	f171 0300 	sbcs.w	r3, r1, #0
 80199ba:	4607      	mov	r7, r0
 80199bc:	bfa8      	it	ge
 80199be:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80199c2:	e6c9      	b.n	8019758 <rmw_wait+0x38>
 80199c4:	f1b8 0f00 	cmp.w	r8, #0
 80199c8:	d009      	beq.n	80199de <rmw_wait+0x2be>
 80199ca:	f8d8 3000 	ldr.w	r3, [r8]
 80199ce:	464f      	mov	r7, r9
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	f47f af57 	bne.w	8019884 <rmw_wait+0x164>
 80199d6:	2d00      	cmp	r5, #0
 80199d8:	f47f af65 	bne.w	80198a6 <rmw_wait+0x186>
 80199dc:	e7d3      	b.n	8019986 <rmw_wait+0x266>
 80199de:	b17d      	cbz	r5, 8019a00 <rmw_wait+0x2e0>
 80199e0:	682b      	ldr	r3, [r5, #0]
 80199e2:	4647      	mov	r7, r8
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	f47f af60 	bne.w	80198aa <rmw_wait+0x18a>
 80199ea:	2e00      	cmp	r6, #0
 80199ec:	f47f af78 	bne.w	80198e0 <rmw_wait+0x1c0>
 80199f0:	e7cc      	b.n	801998c <rmw_wait+0x26c>
 80199f2:	bf00      	nop
 80199f4:	0801d3e0 	.word	0x0801d3e0
 80199f8:	20011a8c 	.word	0x20011a8c
 80199fc:	000f4240 	.word	0x000f4240
 8019a00:	2e00      	cmp	r6, #0
 8019a02:	d0c3      	beq.n	801998c <rmw_wait+0x26c>
 8019a04:	6834      	ldr	r4, [r6, #0]
 8019a06:	462f      	mov	r7, r5
 8019a08:	2c00      	cmp	r4, #0
 8019a0a:	f47f af6b 	bne.w	80198e4 <rmw_wait+0x1c4>
 8019a0e:	e7bd      	b.n	801998c <rmw_wait+0x26c>

08019a10 <rmw_create_wait_set>:
 8019a10:	b508      	push	{r3, lr}
 8019a12:	4803      	ldr	r0, [pc, #12]	@ (8019a20 <rmw_create_wait_set+0x10>)
 8019a14:	f7ff fc1a 	bl	801924c <get_memory>
 8019a18:	b108      	cbz	r0, 8019a1e <rmw_create_wait_set+0xe>
 8019a1a:	6880      	ldr	r0, [r0, #8]
 8019a1c:	3010      	adds	r0, #16
 8019a1e:	bd08      	pop	{r3, pc}
 8019a20:	20011acc 	.word	0x20011acc

08019a24 <rmw_destroy_wait_set>:
 8019a24:	b508      	push	{r3, lr}
 8019a26:	4b08      	ldr	r3, [pc, #32]	@ (8019a48 <rmw_destroy_wait_set+0x24>)
 8019a28:	6819      	ldr	r1, [r3, #0]
 8019a2a:	b911      	cbnz	r1, 8019a32 <rmw_destroy_wait_set+0xe>
 8019a2c:	e00a      	b.n	8019a44 <rmw_destroy_wait_set+0x20>
 8019a2e:	6849      	ldr	r1, [r1, #4]
 8019a30:	b141      	cbz	r1, 8019a44 <rmw_destroy_wait_set+0x20>
 8019a32:	688b      	ldr	r3, [r1, #8]
 8019a34:	3310      	adds	r3, #16
 8019a36:	4298      	cmp	r0, r3
 8019a38:	d1f9      	bne.n	8019a2e <rmw_destroy_wait_set+0xa>
 8019a3a:	4803      	ldr	r0, [pc, #12]	@ (8019a48 <rmw_destroy_wait_set+0x24>)
 8019a3c:	f7ff fc16 	bl	801926c <put_memory>
 8019a40:	2000      	movs	r0, #0
 8019a42:	bd08      	pop	{r3, pc}
 8019a44:	2001      	movs	r0, #1
 8019a46:	bd08      	pop	{r3, pc}
 8019a48:	20011acc 	.word	0x20011acc

08019a4c <rosidl_runtime_c__String__init>:
 8019a4c:	b510      	push	{r4, lr}
 8019a4e:	4604      	mov	r4, r0
 8019a50:	b086      	sub	sp, #24
 8019a52:	b170      	cbz	r0, 8019a72 <rosidl_runtime_c__String__init+0x26>
 8019a54:	a801      	add	r0, sp, #4
 8019a56:	f7f6 fc79 	bl	801034c <rcutils_get_default_allocator>
 8019a5a:	9b01      	ldr	r3, [sp, #4]
 8019a5c:	9905      	ldr	r1, [sp, #20]
 8019a5e:	2001      	movs	r0, #1
 8019a60:	4798      	blx	r3
 8019a62:	6020      	str	r0, [r4, #0]
 8019a64:	b128      	cbz	r0, 8019a72 <rosidl_runtime_c__String__init+0x26>
 8019a66:	2100      	movs	r1, #0
 8019a68:	2201      	movs	r2, #1
 8019a6a:	7001      	strb	r1, [r0, #0]
 8019a6c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019a70:	4610      	mov	r0, r2
 8019a72:	b006      	add	sp, #24
 8019a74:	bd10      	pop	{r4, pc}
 8019a76:	bf00      	nop

08019a78 <rosidl_runtime_c__String__fini>:
 8019a78:	b320      	cbz	r0, 8019ac4 <rosidl_runtime_c__String__fini+0x4c>
 8019a7a:	b510      	push	{r4, lr}
 8019a7c:	6803      	ldr	r3, [r0, #0]
 8019a7e:	b086      	sub	sp, #24
 8019a80:	4604      	mov	r4, r0
 8019a82:	b173      	cbz	r3, 8019aa2 <rosidl_runtime_c__String__fini+0x2a>
 8019a84:	6883      	ldr	r3, [r0, #8]
 8019a86:	b1f3      	cbz	r3, 8019ac6 <rosidl_runtime_c__String__fini+0x4e>
 8019a88:	a801      	add	r0, sp, #4
 8019a8a:	f7f6 fc5f 	bl	801034c <rcutils_get_default_allocator>
 8019a8e:	9b02      	ldr	r3, [sp, #8]
 8019a90:	9905      	ldr	r1, [sp, #20]
 8019a92:	6820      	ldr	r0, [r4, #0]
 8019a94:	4798      	blx	r3
 8019a96:	2300      	movs	r3, #0
 8019a98:	e9c4 3300 	strd	r3, r3, [r4]
 8019a9c:	60a3      	str	r3, [r4, #8]
 8019a9e:	b006      	add	sp, #24
 8019aa0:	bd10      	pop	{r4, pc}
 8019aa2:	6843      	ldr	r3, [r0, #4]
 8019aa4:	b9db      	cbnz	r3, 8019ade <rosidl_runtime_c__String__fini+0x66>
 8019aa6:	6883      	ldr	r3, [r0, #8]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d0f8      	beq.n	8019a9e <rosidl_runtime_c__String__fini+0x26>
 8019aac:	4b12      	ldr	r3, [pc, #72]	@ (8019af8 <rosidl_runtime_c__String__fini+0x80>)
 8019aae:	4813      	ldr	r0, [pc, #76]	@ (8019afc <rosidl_runtime_c__String__fini+0x84>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	2251      	movs	r2, #81	@ 0x51
 8019ab4:	68db      	ldr	r3, [r3, #12]
 8019ab6:	2101      	movs	r1, #1
 8019ab8:	f002 fb90 	bl	801c1dc <fwrite>
 8019abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ac0:	f002 f84c 	bl	801bb5c <exit>
 8019ac4:	4770      	bx	lr
 8019ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8019af8 <rosidl_runtime_c__String__fini+0x80>)
 8019ac8:	480d      	ldr	r0, [pc, #52]	@ (8019b00 <rosidl_runtime_c__String__fini+0x88>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	224c      	movs	r2, #76	@ 0x4c
 8019ace:	68db      	ldr	r3, [r3, #12]
 8019ad0:	2101      	movs	r1, #1
 8019ad2:	f002 fb83 	bl	801c1dc <fwrite>
 8019ad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ada:	f002 f83f 	bl	801bb5c <exit>
 8019ade:	4b06      	ldr	r3, [pc, #24]	@ (8019af8 <rosidl_runtime_c__String__fini+0x80>)
 8019ae0:	4808      	ldr	r0, [pc, #32]	@ (8019b04 <rosidl_runtime_c__String__fini+0x8c>)
 8019ae2:	681b      	ldr	r3, [r3, #0]
 8019ae4:	224e      	movs	r2, #78	@ 0x4e
 8019ae6:	68db      	ldr	r3, [r3, #12]
 8019ae8:	2101      	movs	r1, #1
 8019aea:	f002 fb77 	bl	801c1dc <fwrite>
 8019aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019af2:	f002 f833 	bl	801bb5c <exit>
 8019af6:	bf00      	nop
 8019af8:	2000090c 	.word	0x2000090c
 8019afc:	0801dc60 	.word	0x0801dc60
 8019b00:	0801dbc0 	.word	0x0801dbc0
 8019b04:	0801dc10 	.word	0x0801dc10

08019b08 <std_msgs__msg__Header__init>:
 8019b08:	b570      	push	{r4, r5, r6, lr}
 8019b0a:	4605      	mov	r5, r0
 8019b0c:	b1a8      	cbz	r0, 8019b3a <std_msgs__msg__Header__init+0x32>
 8019b0e:	f000 f831 	bl	8019b74 <builtin_interfaces__msg__Time__init>
 8019b12:	4604      	mov	r4, r0
 8019b14:	b140      	cbz	r0, 8019b28 <std_msgs__msg__Header__init+0x20>
 8019b16:	f105 0608 	add.w	r6, r5, #8
 8019b1a:	4630      	mov	r0, r6
 8019b1c:	f7ff ff96 	bl	8019a4c <rosidl_runtime_c__String__init>
 8019b20:	4604      	mov	r4, r0
 8019b22:	b168      	cbz	r0, 8019b40 <std_msgs__msg__Header__init+0x38>
 8019b24:	4620      	mov	r0, r4
 8019b26:	bd70      	pop	{r4, r5, r6, pc}
 8019b28:	4628      	mov	r0, r5
 8019b2a:	f000 f827 	bl	8019b7c <builtin_interfaces__msg__Time__fini>
 8019b2e:	f105 0008 	add.w	r0, r5, #8
 8019b32:	f7ff ffa1 	bl	8019a78 <rosidl_runtime_c__String__fini>
 8019b36:	4620      	mov	r0, r4
 8019b38:	bd70      	pop	{r4, r5, r6, pc}
 8019b3a:	4604      	mov	r4, r0
 8019b3c:	4620      	mov	r0, r4
 8019b3e:	bd70      	pop	{r4, r5, r6, pc}
 8019b40:	4628      	mov	r0, r5
 8019b42:	f000 f81b 	bl	8019b7c <builtin_interfaces__msg__Time__fini>
 8019b46:	4630      	mov	r0, r6
 8019b48:	f7ff ff96 	bl	8019a78 <rosidl_runtime_c__String__fini>
 8019b4c:	e7ea      	b.n	8019b24 <std_msgs__msg__Header__init+0x1c>
 8019b4e:	bf00      	nop

08019b50 <std_msgs__msg__Header__fini>:
 8019b50:	b148      	cbz	r0, 8019b66 <std_msgs__msg__Header__fini+0x16>
 8019b52:	b510      	push	{r4, lr}
 8019b54:	4604      	mov	r4, r0
 8019b56:	f000 f811 	bl	8019b7c <builtin_interfaces__msg__Time__fini>
 8019b5a:	f104 0008 	add.w	r0, r4, #8
 8019b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b62:	f7ff bf89 	b.w	8019a78 <rosidl_runtime_c__String__fini>
 8019b66:	4770      	bx	lr

08019b68 <std_msgs__msg__Int32__init>:
 8019b68:	3800      	subs	r0, #0
 8019b6a:	bf18      	it	ne
 8019b6c:	2001      	movne	r0, #1
 8019b6e:	4770      	bx	lr

08019b70 <std_msgs__msg__Int32__fini>:
 8019b70:	4770      	bx	lr
 8019b72:	bf00      	nop

08019b74 <builtin_interfaces__msg__Time__init>:
 8019b74:	3800      	subs	r0, #0
 8019b76:	bf18      	it	ne
 8019b78:	2001      	movne	r0, #1
 8019b7a:	4770      	bx	lr

08019b7c <builtin_interfaces__msg__Time__fini>:
 8019b7c:	4770      	bx	lr
 8019b7e:	bf00      	nop

08019b80 <geometry_msgs__msg__PoseWithCovariance__init>:
 8019b80:	b538      	push	{r3, r4, r5, lr}
 8019b82:	4604      	mov	r4, r0
 8019b84:	b128      	cbz	r0, 8019b92 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 8019b86:	f001 f96b 	bl	801ae60 <geometry_msgs__msg__Pose__init>
 8019b8a:	4605      	mov	r5, r0
 8019b8c:	b120      	cbz	r0, 8019b98 <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 8019b8e:	4628      	mov	r0, r5
 8019b90:	bd38      	pop	{r3, r4, r5, pc}
 8019b92:	4605      	mov	r5, r0
 8019b94:	4628      	mov	r0, r5
 8019b96:	bd38      	pop	{r3, r4, r5, pc}
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f001 f985 	bl	801aea8 <geometry_msgs__msg__Pose__fini>
 8019b9e:	4628      	mov	r0, r5
 8019ba0:	bd38      	pop	{r3, r4, r5, pc}
 8019ba2:	bf00      	nop

08019ba4 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8019ba4:	b108      	cbz	r0, 8019baa <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 8019ba6:	f001 b97f 	b.w	801aea8 <geometry_msgs__msg__Pose__fini>
 8019baa:	4770      	bx	lr

08019bac <geometry_msgs__msg__TwistWithCovariance__init>:
 8019bac:	b538      	push	{r3, r4, r5, lr}
 8019bae:	4604      	mov	r4, r0
 8019bb0:	b128      	cbz	r0, 8019bbe <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 8019bb2:	f7f8 fcd3 	bl	801255c <geometry_msgs__msg__Twist__init>
 8019bb6:	4605      	mov	r5, r0
 8019bb8:	b120      	cbz	r0, 8019bc4 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 8019bba:	4628      	mov	r0, r5
 8019bbc:	bd38      	pop	{r3, r4, r5, pc}
 8019bbe:	4605      	mov	r5, r0
 8019bc0:	4628      	mov	r0, r5
 8019bc2:	bd38      	pop	{r3, r4, r5, pc}
 8019bc4:	4620      	mov	r0, r4
 8019bc6:	f7f8 fced 	bl	80125a4 <geometry_msgs__msg__Twist__fini>
 8019bca:	4628      	mov	r0, r5
 8019bcc:	bd38      	pop	{r3, r4, r5, pc}
 8019bce:	bf00      	nop

08019bd0 <geometry_msgs__msg__TwistWithCovariance__fini>:
 8019bd0:	b108      	cbz	r0, 8019bd6 <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 8019bd2:	f7f8 bce7 	b.w	80125a4 <geometry_msgs__msg__Twist__fini>
 8019bd6:	4770      	bx	lr

08019bd8 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8019bd8:	f001 b942 	b.w	801ae60 <geometry_msgs__msg__Pose__init>

08019bdc <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 8019bdc:	f001 b964 	b.w	801aea8 <geometry_msgs__msg__Pose__fini>

08019be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8019be0:	b510      	push	{r4, lr}
 8019be2:	f001 f987 	bl	801aef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019be6:	4c07      	ldr	r4, [pc, #28]	@ (8019c04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8019be8:	60e0      	str	r0, [r4, #12]
 8019bea:	f000 f815 	bl	8019c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019bee:	4b06      	ldr	r3, [pc, #24]	@ (8019c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8019bf0:	64a0      	str	r0, [r4, #72]	@ 0x48
 8019bf2:	681a      	ldr	r2, [r3, #0]
 8019bf4:	b10a      	cbz	r2, 8019bfa <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8019bf6:	4804      	ldr	r0, [pc, #16]	@ (8019c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8019bf8:	bd10      	pop	{r4, pc}
 8019bfa:	4a04      	ldr	r2, [pc, #16]	@ (8019c0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8019bfc:	4802      	ldr	r0, [pc, #8]	@ (8019c08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8019bfe:	6812      	ldr	r2, [r2, #0]
 8019c00:	601a      	str	r2, [r3, #0]
 8019c02:	bd10      	pop	{r4, pc}
 8019c04:	20000648 	.word	0x20000648
 8019c08:	200006c0 	.word	0x200006c0
 8019c0c:	20000310 	.word	0x20000310

08019c10 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8019c10:	f001 b956 	b.w	801aec0 <geometry_msgs__msg__Quaternion__init>

08019c14 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8019c14:	f001 b968 	b.w	801aee8 <geometry_msgs__msg__Quaternion__fini>

08019c18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8019c18:	4b04      	ldr	r3, [pc, #16]	@ (8019c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8019c1a:	681a      	ldr	r2, [r3, #0]
 8019c1c:	b10a      	cbz	r2, 8019c22 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8019c1e:	4803      	ldr	r0, [pc, #12]	@ (8019c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8019c20:	4770      	bx	lr
 8019c22:	4a03      	ldr	r2, [pc, #12]	@ (8019c30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8019c24:	4801      	ldr	r0, [pc, #4]	@ (8019c2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8019c26:	6812      	ldr	r2, [r2, #0]
 8019c28:	601a      	str	r2, [r3, #0]
 8019c2a:	4770      	bx	lr
 8019c2c:	200007bc 	.word	0x200007bc
 8019c30:	20000310 	.word	0x20000310

08019c34 <get_serialized_size_geometry_msgs__msg__Pose>:
 8019c34:	b570      	push	{r4, r5, r6, lr}
 8019c36:	4604      	mov	r4, r0
 8019c38:	b148      	cbz	r0, 8019c4e <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8019c3a:	460d      	mov	r5, r1
 8019c3c:	f001 f968 	bl	801af10 <get_serialized_size_geometry_msgs__msg__Point>
 8019c40:	4606      	mov	r6, r0
 8019c42:	1829      	adds	r1, r5, r0
 8019c44:	f104 0018 	add.w	r0, r4, #24
 8019c48:	f000 f868 	bl	8019d1c <get_serialized_size_geometry_msgs__msg__Quaternion>
 8019c4c:	4430      	add	r0, r6
 8019c4e:	bd70      	pop	{r4, r5, r6, pc}

08019c50 <_Pose__cdr_deserialize>:
 8019c50:	b570      	push	{r4, r5, r6, lr}
 8019c52:	460c      	mov	r4, r1
 8019c54:	b189      	cbz	r1, 8019c7a <_Pose__cdr_deserialize+0x2a>
 8019c56:	4605      	mov	r5, r0
 8019c58:	f001 f9e6 	bl	801b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019c5c:	6843      	ldr	r3, [r0, #4]
 8019c5e:	4621      	mov	r1, r4
 8019c60:	68db      	ldr	r3, [r3, #12]
 8019c62:	4628      	mov	r0, r5
 8019c64:	4798      	blx	r3
 8019c66:	f000 f90d 	bl	8019e84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019c6a:	6843      	ldr	r3, [r0, #4]
 8019c6c:	f104 0118 	add.w	r1, r4, #24
 8019c70:	4628      	mov	r0, r5
 8019c72:	68db      	ldr	r3, [r3, #12]
 8019c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c78:	4718      	bx	r3
 8019c7a:	4608      	mov	r0, r1
 8019c7c:	bd70      	pop	{r4, r5, r6, pc}
 8019c7e:	bf00      	nop

08019c80 <_Pose__cdr_serialize>:
 8019c80:	b510      	push	{r4, lr}
 8019c82:	b082      	sub	sp, #8
 8019c84:	9101      	str	r1, [sp, #4]
 8019c86:	b190      	cbz	r0, 8019cae <_Pose__cdr_serialize+0x2e>
 8019c88:	4604      	mov	r4, r0
 8019c8a:	f001 f9cd 	bl	801b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019c8e:	6843      	ldr	r3, [r0, #4]
 8019c90:	9901      	ldr	r1, [sp, #4]
 8019c92:	689b      	ldr	r3, [r3, #8]
 8019c94:	4620      	mov	r0, r4
 8019c96:	4798      	blx	r3
 8019c98:	f000 f8f4 	bl	8019e84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019c9c:	6843      	ldr	r3, [r0, #4]
 8019c9e:	9901      	ldr	r1, [sp, #4]
 8019ca0:	689b      	ldr	r3, [r3, #8]
 8019ca2:	f104 0018 	add.w	r0, r4, #24
 8019ca6:	b002      	add	sp, #8
 8019ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cac:	4718      	bx	r3
 8019cae:	b002      	add	sp, #8
 8019cb0:	bd10      	pop	{r4, pc}
 8019cb2:	bf00      	nop

08019cb4 <_Pose__get_serialized_size>:
 8019cb4:	b538      	push	{r3, r4, r5, lr}
 8019cb6:	4604      	mov	r4, r0
 8019cb8:	b148      	cbz	r0, 8019cce <_Pose__get_serialized_size+0x1a>
 8019cba:	2100      	movs	r1, #0
 8019cbc:	f001 f928 	bl	801af10 <get_serialized_size_geometry_msgs__msg__Point>
 8019cc0:	4605      	mov	r5, r0
 8019cc2:	4601      	mov	r1, r0
 8019cc4:	f104 0018 	add.w	r0, r4, #24
 8019cc8:	f000 f828 	bl	8019d1c <get_serialized_size_geometry_msgs__msg__Quaternion>
 8019ccc:	4428      	add	r0, r5
 8019cce:	bd38      	pop	{r3, r4, r5, pc}

08019cd0 <_Pose__max_serialized_size>:
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	b082      	sub	sp, #8
 8019cd4:	2301      	movs	r3, #1
 8019cd6:	2100      	movs	r1, #0
 8019cd8:	f10d 0007 	add.w	r0, sp, #7
 8019cdc:	f88d 3007 	strb.w	r3, [sp, #7]
 8019ce0:	f001 f986 	bl	801aff0 <max_serialized_size_geometry_msgs__msg__Point>
 8019ce4:	4604      	mov	r4, r0
 8019ce6:	4601      	mov	r1, r0
 8019ce8:	f10d 0007 	add.w	r0, sp, #7
 8019cec:	f000 f8a8 	bl	8019e40 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8019cf0:	4420      	add	r0, r4
 8019cf2:	b002      	add	sp, #8
 8019cf4:	bd10      	pop	{r4, pc}
 8019cf6:	bf00      	nop

08019cf8 <max_serialized_size_geometry_msgs__msg__Pose>:
 8019cf8:	2301      	movs	r3, #1
 8019cfa:	b570      	push	{r4, r5, r6, lr}
 8019cfc:	7003      	strb	r3, [r0, #0]
 8019cfe:	4605      	mov	r5, r0
 8019d00:	460e      	mov	r6, r1
 8019d02:	f001 f975 	bl	801aff0 <max_serialized_size_geometry_msgs__msg__Point>
 8019d06:	4604      	mov	r4, r0
 8019d08:	1831      	adds	r1, r6, r0
 8019d0a:	4628      	mov	r0, r5
 8019d0c:	f000 f898 	bl	8019e40 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8019d10:	4420      	add	r0, r4
 8019d12:	bd70      	pop	{r4, r5, r6, pc}

08019d14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8019d14:	4800      	ldr	r0, [pc, #0]	@ (8019d18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8019d16:	4770      	bx	lr
 8019d18:	200007c8 	.word	0x200007c8

08019d1c <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8019d1c:	b1f0      	cbz	r0, 8019d5c <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8019d1e:	b570      	push	{r4, r5, r6, lr}
 8019d20:	460d      	mov	r5, r1
 8019d22:	4628      	mov	r0, r5
 8019d24:	2108      	movs	r1, #8
 8019d26:	f7f4 f915 	bl	800df54 <ucdr_alignment>
 8019d2a:	f105 0308 	add.w	r3, r5, #8
 8019d2e:	181e      	adds	r6, r3, r0
 8019d30:	2108      	movs	r1, #8
 8019d32:	4630      	mov	r0, r6
 8019d34:	f7f4 f90e 	bl	800df54 <ucdr_alignment>
 8019d38:	f100 0408 	add.w	r4, r0, #8
 8019d3c:	4434      	add	r4, r6
 8019d3e:	2108      	movs	r1, #8
 8019d40:	4620      	mov	r0, r4
 8019d42:	f7f4 f907 	bl	800df54 <ucdr_alignment>
 8019d46:	3008      	adds	r0, #8
 8019d48:	4404      	add	r4, r0
 8019d4a:	2108      	movs	r1, #8
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	f7f4 f901 	bl	800df54 <ucdr_alignment>
 8019d52:	f1c5 0508 	rsb	r5, r5, #8
 8019d56:	4428      	add	r0, r5
 8019d58:	4420      	add	r0, r4
 8019d5a:	bd70      	pop	{r4, r5, r6, pc}
 8019d5c:	4770      	bx	lr
 8019d5e:	bf00      	nop

08019d60 <_Quaternion__cdr_deserialize>:
 8019d60:	b538      	push	{r3, r4, r5, lr}
 8019d62:	460c      	mov	r4, r1
 8019d64:	b199      	cbz	r1, 8019d8e <_Quaternion__cdr_deserialize+0x2e>
 8019d66:	4605      	mov	r5, r0
 8019d68:	f7f3 ff08 	bl	800db7c <ucdr_deserialize_double>
 8019d6c:	f104 0108 	add.w	r1, r4, #8
 8019d70:	4628      	mov	r0, r5
 8019d72:	f7f3 ff03 	bl	800db7c <ucdr_deserialize_double>
 8019d76:	f104 0110 	add.w	r1, r4, #16
 8019d7a:	4628      	mov	r0, r5
 8019d7c:	f7f3 fefe 	bl	800db7c <ucdr_deserialize_double>
 8019d80:	f104 0118 	add.w	r1, r4, #24
 8019d84:	4628      	mov	r0, r5
 8019d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d8a:	f7f3 bef7 	b.w	800db7c <ucdr_deserialize_double>
 8019d8e:	4608      	mov	r0, r1
 8019d90:	bd38      	pop	{r3, r4, r5, pc}
 8019d92:	bf00      	nop

08019d94 <_Quaternion__cdr_serialize>:
 8019d94:	b1c0      	cbz	r0, 8019dc8 <_Quaternion__cdr_serialize+0x34>
 8019d96:	b538      	push	{r3, r4, r5, lr}
 8019d98:	ed90 0b00 	vldr	d0, [r0]
 8019d9c:	460d      	mov	r5, r1
 8019d9e:	4604      	mov	r4, r0
 8019da0:	4608      	mov	r0, r1
 8019da2:	f7f3 fd49 	bl	800d838 <ucdr_serialize_double>
 8019da6:	ed94 0b02 	vldr	d0, [r4, #8]
 8019daa:	4628      	mov	r0, r5
 8019dac:	f7f3 fd44 	bl	800d838 <ucdr_serialize_double>
 8019db0:	ed94 0b04 	vldr	d0, [r4, #16]
 8019db4:	4628      	mov	r0, r5
 8019db6:	f7f3 fd3f 	bl	800d838 <ucdr_serialize_double>
 8019dba:	ed94 0b06 	vldr	d0, [r4, #24]
 8019dbe:	4628      	mov	r0, r5
 8019dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019dc4:	f7f3 bd38 	b.w	800d838 <ucdr_serialize_double>
 8019dc8:	4770      	bx	lr
 8019dca:	bf00      	nop

08019dcc <_Quaternion__get_serialized_size>:
 8019dcc:	b1d0      	cbz	r0, 8019e04 <_Quaternion__get_serialized_size+0x38>
 8019dce:	b538      	push	{r3, r4, r5, lr}
 8019dd0:	2108      	movs	r1, #8
 8019dd2:	2000      	movs	r0, #0
 8019dd4:	f7f4 f8be 	bl	800df54 <ucdr_alignment>
 8019dd8:	f100 0508 	add.w	r5, r0, #8
 8019ddc:	2108      	movs	r1, #8
 8019dde:	4628      	mov	r0, r5
 8019de0:	f7f4 f8b8 	bl	800df54 <ucdr_alignment>
 8019de4:	f100 0408 	add.w	r4, r0, #8
 8019de8:	442c      	add	r4, r5
 8019dea:	2108      	movs	r1, #8
 8019dec:	4620      	mov	r0, r4
 8019dee:	f7f4 f8b1 	bl	800df54 <ucdr_alignment>
 8019df2:	3008      	adds	r0, #8
 8019df4:	4404      	add	r4, r0
 8019df6:	2108      	movs	r1, #8
 8019df8:	4620      	mov	r0, r4
 8019dfa:	f7f4 f8ab 	bl	800df54 <ucdr_alignment>
 8019dfe:	3008      	adds	r0, #8
 8019e00:	4420      	add	r0, r4
 8019e02:	bd38      	pop	{r3, r4, r5, pc}
 8019e04:	4770      	bx	lr
 8019e06:	bf00      	nop

08019e08 <_Quaternion__max_serialized_size>:
 8019e08:	b538      	push	{r3, r4, r5, lr}
 8019e0a:	2108      	movs	r1, #8
 8019e0c:	2000      	movs	r0, #0
 8019e0e:	f7f4 f8a1 	bl	800df54 <ucdr_alignment>
 8019e12:	f100 0508 	add.w	r5, r0, #8
 8019e16:	2108      	movs	r1, #8
 8019e18:	4628      	mov	r0, r5
 8019e1a:	f7f4 f89b 	bl	800df54 <ucdr_alignment>
 8019e1e:	f100 0408 	add.w	r4, r0, #8
 8019e22:	442c      	add	r4, r5
 8019e24:	2108      	movs	r1, #8
 8019e26:	4620      	mov	r0, r4
 8019e28:	f7f4 f894 	bl	800df54 <ucdr_alignment>
 8019e2c:	3008      	adds	r0, #8
 8019e2e:	4404      	add	r4, r0
 8019e30:	2108      	movs	r1, #8
 8019e32:	4620      	mov	r0, r4
 8019e34:	f7f4 f88e 	bl	800df54 <ucdr_alignment>
 8019e38:	3008      	adds	r0, #8
 8019e3a:	4420      	add	r0, r4
 8019e3c:	bd38      	pop	{r3, r4, r5, pc}
 8019e3e:	bf00      	nop

08019e40 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8019e40:	b570      	push	{r4, r5, r6, lr}
 8019e42:	2301      	movs	r3, #1
 8019e44:	460c      	mov	r4, r1
 8019e46:	7003      	strb	r3, [r0, #0]
 8019e48:	2108      	movs	r1, #8
 8019e4a:	4620      	mov	r0, r4
 8019e4c:	f7f4 f882 	bl	800df54 <ucdr_alignment>
 8019e50:	f104 0508 	add.w	r5, r4, #8
 8019e54:	1946      	adds	r6, r0, r5
 8019e56:	2108      	movs	r1, #8
 8019e58:	4630      	mov	r0, r6
 8019e5a:	f7f4 f87b 	bl	800df54 <ucdr_alignment>
 8019e5e:	f100 0508 	add.w	r5, r0, #8
 8019e62:	4435      	add	r5, r6
 8019e64:	2108      	movs	r1, #8
 8019e66:	4628      	mov	r0, r5
 8019e68:	f7f4 f874 	bl	800df54 <ucdr_alignment>
 8019e6c:	3008      	adds	r0, #8
 8019e6e:	4405      	add	r5, r0
 8019e70:	2108      	movs	r1, #8
 8019e72:	4628      	mov	r0, r5
 8019e74:	f7f4 f86e 	bl	800df54 <ucdr_alignment>
 8019e78:	f1c4 0408 	rsb	r4, r4, #8
 8019e7c:	4420      	add	r0, r4
 8019e7e:	4428      	add	r0, r5
 8019e80:	bd70      	pop	{r4, r5, r6, pc}
 8019e82:	bf00      	nop

08019e84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8019e84:	4800      	ldr	r0, [pc, #0]	@ (8019e88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8019e86:	4770      	bx	lr
 8019e88:	200007f0 	.word	0x200007f0

08019e8c <ucdr_serialize_string>:
 8019e8c:	b510      	push	{r4, lr}
 8019e8e:	b082      	sub	sp, #8
 8019e90:	4604      	mov	r4, r0
 8019e92:	4608      	mov	r0, r1
 8019e94:	9101      	str	r1, [sp, #4]
 8019e96:	f7e6 f9c5 	bl	8000224 <strlen>
 8019e9a:	9901      	ldr	r1, [sp, #4]
 8019e9c:	1c42      	adds	r2, r0, #1
 8019e9e:	4620      	mov	r0, r4
 8019ea0:	b002      	add	sp, #8
 8019ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ea6:	f7f8 bead 	b.w	8012c04 <ucdr_serialize_sequence_char>
 8019eaa:	bf00      	nop

08019eac <ucdr_deserialize_string>:
 8019eac:	b500      	push	{lr}
 8019eae:	b083      	sub	sp, #12
 8019eb0:	ab01      	add	r3, sp, #4
 8019eb2:	f7f8 feb9 	bl	8012c28 <ucdr_deserialize_sequence_char>
 8019eb6:	b003      	add	sp, #12
 8019eb8:	f85d fb04 	ldr.w	pc, [sp], #4

08019ebc <uxr_init_input_best_effort_stream>:
 8019ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ec0:	8003      	strh	r3, [r0, #0]
 8019ec2:	4770      	bx	lr

08019ec4 <uxr_reset_input_best_effort_stream>:
 8019ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ec8:	8003      	strh	r3, [r0, #0]
 8019eca:	4770      	bx	lr

08019ecc <uxr_receive_best_effort_message>:
 8019ecc:	b538      	push	{r3, r4, r5, lr}
 8019ece:	4604      	mov	r4, r0
 8019ed0:	8800      	ldrh	r0, [r0, #0]
 8019ed2:	460d      	mov	r5, r1
 8019ed4:	f000 fd42 	bl	801a95c <uxr_seq_num_cmp>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019ee0:	bfb8      	it	lt
 8019ee2:	8025      	strhlt	r5, [r4, #0]
 8019ee4:	bd38      	pop	{r3, r4, r5, pc}
 8019ee6:	bf00      	nop

08019ee8 <on_full_input_buffer>:
 8019ee8:	b570      	push	{r4, r5, r6, lr}
 8019eea:	4605      	mov	r5, r0
 8019eec:	460c      	mov	r4, r1
 8019eee:	682b      	ldr	r3, [r5, #0]
 8019ef0:	6809      	ldr	r1, [r1, #0]
 8019ef2:	8920      	ldrh	r0, [r4, #8]
 8019ef4:	6862      	ldr	r2, [r4, #4]
 8019ef6:	fbb2 f2f0 	udiv	r2, r2, r0
 8019efa:	eba3 0c01 	sub.w	ip, r3, r1
 8019efe:	fbbc fcf2 	udiv	ip, ip, r2
 8019f02:	f10c 0c01 	add.w	ip, ip, #1
 8019f06:	fa1f f38c 	uxth.w	r3, ip
 8019f0a:	fbb3 f6f0 	udiv	r6, r3, r0
 8019f0e:	fb00 3316 	mls	r3, r0, r6, r3
 8019f12:	b29b      	uxth	r3, r3
 8019f14:	fb02 f303 	mul.w	r3, r2, r3
 8019f18:	1d18      	adds	r0, r3, #4
 8019f1a:	4408      	add	r0, r1
 8019f1c:	7d26      	ldrb	r6, [r4, #20]
 8019f1e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019f22:	b116      	cbz	r6, 8019f2a <on_full_input_buffer+0x42>
 8019f24:	2600      	movs	r6, #0
 8019f26:	f840 6c04 	str.w	r6, [r0, #-4]
 8019f2a:	2a03      	cmp	r2, #3
 8019f2c:	d801      	bhi.n	8019f32 <on_full_input_buffer+0x4a>
 8019f2e:	2001      	movs	r0, #1
 8019f30:	bd70      	pop	{r4, r5, r6, pc}
 8019f32:	3308      	adds	r3, #8
 8019f34:	4419      	add	r1, r3
 8019f36:	4628      	mov	r0, r5
 8019f38:	692b      	ldr	r3, [r5, #16]
 8019f3a:	3a04      	subs	r2, #4
 8019f3c:	f7f3 fffe 	bl	800df3c <ucdr_init_buffer_origin>
 8019f40:	4628      	mov	r0, r5
 8019f42:	4903      	ldr	r1, [pc, #12]	@ (8019f50 <on_full_input_buffer+0x68>)
 8019f44:	4622      	mov	r2, r4
 8019f46:	f7f3 ffd5 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 8019f4a:	2000      	movs	r0, #0
 8019f4c:	bd70      	pop	{r4, r5, r6, pc}
 8019f4e:	bf00      	nop
 8019f50:	08019ee9 	.word	0x08019ee9

08019f54 <uxr_init_input_reliable_stream>:
 8019f54:	b500      	push	{lr}
 8019f56:	e9c0 1200 	strd	r1, r2, [r0]
 8019f5a:	f04f 0e00 	mov.w	lr, #0
 8019f5e:	9a01      	ldr	r2, [sp, #4]
 8019f60:	8103      	strh	r3, [r0, #8]
 8019f62:	6102      	str	r2, [r0, #16]
 8019f64:	f880 e014 	strb.w	lr, [r0, #20]
 8019f68:	b1d3      	cbz	r3, 8019fa0 <uxr_init_input_reliable_stream+0x4c>
 8019f6a:	f8c1 e000 	str.w	lr, [r1]
 8019f6e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019f72:	f1bc 0f01 	cmp.w	ip, #1
 8019f76:	d913      	bls.n	8019fa0 <uxr_init_input_reliable_stream+0x4c>
 8019f78:	2301      	movs	r3, #1
 8019f7a:	fbb3 f1fc 	udiv	r1, r3, ip
 8019f7e:	fb0c 3111 	mls	r1, ip, r1, r3
 8019f82:	b289      	uxth	r1, r1
 8019f84:	6842      	ldr	r2, [r0, #4]
 8019f86:	fbb2 f2fc 	udiv	r2, r2, ip
 8019f8a:	fb01 f202 	mul.w	r2, r1, r2
 8019f8e:	6801      	ldr	r1, [r0, #0]
 8019f90:	f841 e002 	str.w	lr, [r1, r2]
 8019f94:	3301      	adds	r3, #1
 8019f96:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019f9a:	b29b      	uxth	r3, r3
 8019f9c:	459c      	cmp	ip, r3
 8019f9e:	d8ec      	bhi.n	8019f7a <uxr_init_input_reliable_stream+0x26>
 8019fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fa4:	60c3      	str	r3, [r0, #12]
 8019fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8019faa:	bf00      	nop

08019fac <uxr_reset_input_reliable_stream>:
 8019fac:	8901      	ldrh	r1, [r0, #8]
 8019fae:	b1e9      	cbz	r1, 8019fec <uxr_reset_input_reliable_stream+0x40>
 8019fb0:	f04f 0c00 	mov.w	ip, #0
 8019fb4:	b500      	push	{lr}
 8019fb6:	4663      	mov	r3, ip
 8019fb8:	46e6      	mov	lr, ip
 8019fba:	fbb3 f2f1 	udiv	r2, r3, r1
 8019fbe:	fb01 3312 	mls	r3, r1, r2, r3
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	6842      	ldr	r2, [r0, #4]
 8019fc6:	fbb2 f2f1 	udiv	r2, r2, r1
 8019fca:	fb02 f303 	mul.w	r3, r2, r3
 8019fce:	6802      	ldr	r2, [r0, #0]
 8019fd0:	f842 e003 	str.w	lr, [r2, r3]
 8019fd4:	f10c 0c01 	add.w	ip, ip, #1
 8019fd8:	8901      	ldrh	r1, [r0, #8]
 8019fda:	fa1f f38c 	uxth.w	r3, ip
 8019fde:	4299      	cmp	r1, r3
 8019fe0:	d8eb      	bhi.n	8019fba <uxr_reset_input_reliable_stream+0xe>
 8019fe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fe6:	60c3      	str	r3, [r0, #12]
 8019fe8:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019ff0:	60c3      	str	r3, [r0, #12]
 8019ff2:	4770      	bx	lr

08019ff4 <uxr_receive_reliable_message>:
 8019ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ff8:	4604      	mov	r4, r0
 8019ffa:	460d      	mov	r5, r1
 8019ffc:	8901      	ldrh	r1, [r0, #8]
 8019ffe:	8980      	ldrh	r0, [r0, #12]
 801a000:	4690      	mov	r8, r2
 801a002:	461f      	mov	r7, r3
 801a004:	f000 fca2 	bl	801a94c <uxr_seq_num_add>
 801a008:	4629      	mov	r1, r5
 801a00a:	4606      	mov	r6, r0
 801a00c:	89a0      	ldrh	r0, [r4, #12]
 801a00e:	f000 fca5 	bl	801a95c <uxr_seq_num_cmp>
 801a012:	2800      	cmp	r0, #0
 801a014:	db0a      	blt.n	801a02c <uxr_receive_reliable_message+0x38>
 801a016:	2600      	movs	r6, #0
 801a018:	89e0      	ldrh	r0, [r4, #14]
 801a01a:	4629      	mov	r1, r5
 801a01c:	f000 fc9e 	bl	801a95c <uxr_seq_num_cmp>
 801a020:	2800      	cmp	r0, #0
 801a022:	da00      	bge.n	801a026 <uxr_receive_reliable_message+0x32>
 801a024:	81e5      	strh	r5, [r4, #14]
 801a026:	4630      	mov	r0, r6
 801a028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a02c:	4630      	mov	r0, r6
 801a02e:	4629      	mov	r1, r5
 801a030:	f000 fc94 	bl	801a95c <uxr_seq_num_cmp>
 801a034:	2800      	cmp	r0, #0
 801a036:	dbee      	blt.n	801a016 <uxr_receive_reliable_message+0x22>
 801a038:	6923      	ldr	r3, [r4, #16]
 801a03a:	4640      	mov	r0, r8
 801a03c:	4798      	blx	r3
 801a03e:	2101      	movs	r1, #1
 801a040:	4681      	mov	r9, r0
 801a042:	89a0      	ldrh	r0, [r4, #12]
 801a044:	f000 fc82 	bl	801a94c <uxr_seq_num_add>
 801a048:	f1b9 0f00 	cmp.w	r9, #0
 801a04c:	d101      	bne.n	801a052 <uxr_receive_reliable_message+0x5e>
 801a04e:	4285      	cmp	r5, r0
 801a050:	d047      	beq.n	801a0e2 <uxr_receive_reliable_message+0xee>
 801a052:	8922      	ldrh	r2, [r4, #8]
 801a054:	fbb5 f0f2 	udiv	r0, r5, r2
 801a058:	fb02 5010 	mls	r0, r2, r0, r5
 801a05c:	b280      	uxth	r0, r0
 801a05e:	6863      	ldr	r3, [r4, #4]
 801a060:	fbb3 f3f2 	udiv	r3, r3, r2
 801a064:	fb00 f303 	mul.w	r3, r0, r3
 801a068:	6820      	ldr	r0, [r4, #0]
 801a06a:	3304      	adds	r3, #4
 801a06c:	4418      	add	r0, r3
 801a06e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a072:	2b00      	cmp	r3, #0
 801a074:	d1cf      	bne.n	801a016 <uxr_receive_reliable_message+0x22>
 801a076:	4641      	mov	r1, r8
 801a078:	463a      	mov	r2, r7
 801a07a:	f002 fb0c 	bl	801c696 <memcpy>
 801a07e:	8921      	ldrh	r1, [r4, #8]
 801a080:	fbb5 f2f1 	udiv	r2, r5, r1
 801a084:	fb01 5212 	mls	r2, r1, r2, r5
 801a088:	b292      	uxth	r2, r2
 801a08a:	6863      	ldr	r3, [r4, #4]
 801a08c:	fbb3 f3f1 	udiv	r3, r3, r1
 801a090:	fb02 f303 	mul.w	r3, r2, r3
 801a094:	6822      	ldr	r2, [r4, #0]
 801a096:	50d7      	str	r7, [r2, r3]
 801a098:	9a08      	ldr	r2, [sp, #32]
 801a09a:	2301      	movs	r3, #1
 801a09c:	7013      	strb	r3, [r2, #0]
 801a09e:	f1b9 0f00 	cmp.w	r9, #0
 801a0a2:	d0b8      	beq.n	801a016 <uxr_receive_reliable_message+0x22>
 801a0a4:	89a6      	ldrh	r6, [r4, #12]
 801a0a6:	4630      	mov	r0, r6
 801a0a8:	2101      	movs	r1, #1
 801a0aa:	f000 fc4f 	bl	801a94c <uxr_seq_num_add>
 801a0ae:	8922      	ldrh	r2, [r4, #8]
 801a0b0:	6863      	ldr	r3, [r4, #4]
 801a0b2:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0b6:	4606      	mov	r6, r0
 801a0b8:	fbb0 f0f2 	udiv	r0, r0, r2
 801a0bc:	fb02 6010 	mls	r0, r2, r0, r6
 801a0c0:	b280      	uxth	r0, r0
 801a0c2:	fb00 f303 	mul.w	r3, r0, r3
 801a0c6:	6820      	ldr	r0, [r4, #0]
 801a0c8:	3304      	adds	r3, #4
 801a0ca:	4418      	add	r0, r3
 801a0cc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d0a0      	beq.n	801a016 <uxr_receive_reliable_message+0x22>
 801a0d4:	6923      	ldr	r3, [r4, #16]
 801a0d6:	4798      	blx	r3
 801a0d8:	2802      	cmp	r0, #2
 801a0da:	d008      	beq.n	801a0ee <uxr_receive_reliable_message+0xfa>
 801a0dc:	2801      	cmp	r0, #1
 801a0de:	d0e2      	beq.n	801a0a6 <uxr_receive_reliable_message+0xb2>
 801a0e0:	e799      	b.n	801a016 <uxr_receive_reliable_message+0x22>
 801a0e2:	9b08      	ldr	r3, [sp, #32]
 801a0e4:	81a5      	strh	r5, [r4, #12]
 801a0e6:	2601      	movs	r6, #1
 801a0e8:	f883 9000 	strb.w	r9, [r3]
 801a0ec:	e794      	b.n	801a018 <uxr_receive_reliable_message+0x24>
 801a0ee:	2601      	movs	r6, #1
 801a0f0:	e792      	b.n	801a018 <uxr_receive_reliable_message+0x24>
 801a0f2:	bf00      	nop

0801a0f4 <uxr_next_input_reliable_buffer_available>:
 801a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0f8:	4604      	mov	r4, r0
 801a0fa:	460f      	mov	r7, r1
 801a0fc:	8980      	ldrh	r0, [r0, #12]
 801a0fe:	2101      	movs	r1, #1
 801a100:	4690      	mov	r8, r2
 801a102:	f000 fc23 	bl	801a94c <uxr_seq_num_add>
 801a106:	8922      	ldrh	r2, [r4, #8]
 801a108:	fbb0 f6f2 	udiv	r6, r0, r2
 801a10c:	fb02 0616 	mls	r6, r2, r6, r0
 801a110:	b2b6      	uxth	r6, r6
 801a112:	6863      	ldr	r3, [r4, #4]
 801a114:	fbb3 f3f2 	udiv	r3, r3, r2
 801a118:	fb06 f303 	mul.w	r3, r6, r3
 801a11c:	6826      	ldr	r6, [r4, #0]
 801a11e:	3304      	adds	r3, #4
 801a120:	441e      	add	r6, r3
 801a122:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a126:	f1b9 0f00 	cmp.w	r9, #0
 801a12a:	d023      	beq.n	801a174 <uxr_next_input_reliable_buffer_available+0x80>
 801a12c:	6923      	ldr	r3, [r4, #16]
 801a12e:	4605      	mov	r5, r0
 801a130:	4630      	mov	r0, r6
 801a132:	4798      	blx	r3
 801a134:	4682      	mov	sl, r0
 801a136:	b300      	cbz	r0, 801a17a <uxr_next_input_reliable_buffer_available+0x86>
 801a138:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a13c:	2101      	movs	r1, #1
 801a13e:	4650      	mov	r0, sl
 801a140:	f000 fc04 	bl	801a94c <uxr_seq_num_add>
 801a144:	8921      	ldrh	r1, [r4, #8]
 801a146:	fbb0 f2f1 	udiv	r2, r0, r1
 801a14a:	4682      	mov	sl, r0
 801a14c:	fb01 0212 	mls	r2, r1, r2, r0
 801a150:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a154:	b292      	uxth	r2, r2
 801a156:	fbb3 f3f1 	udiv	r3, r3, r1
 801a15a:	fb02 f303 	mul.w	r3, r2, r3
 801a15e:	3304      	adds	r3, #4
 801a160:	4418      	add	r0, r3
 801a162:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a166:	b12b      	cbz	r3, 801a174 <uxr_next_input_reliable_buffer_available+0x80>
 801a168:	6923      	ldr	r3, [r4, #16]
 801a16a:	4798      	blx	r3
 801a16c:	2802      	cmp	r0, #2
 801a16e:	d01b      	beq.n	801a1a8 <uxr_next_input_reliable_buffer_available+0xb4>
 801a170:	2801      	cmp	r0, #1
 801a172:	d0e3      	beq.n	801a13c <uxr_next_input_reliable_buffer_available+0x48>
 801a174:	2000      	movs	r0, #0
 801a176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a17a:	464a      	mov	r2, r9
 801a17c:	4631      	mov	r1, r6
 801a17e:	4638      	mov	r0, r7
 801a180:	f7f3 fee4 	bl	800df4c <ucdr_init_buffer>
 801a184:	8921      	ldrh	r1, [r4, #8]
 801a186:	fbb5 f2f1 	udiv	r2, r5, r1
 801a18a:	fb01 5212 	mls	r2, r1, r2, r5
 801a18e:	b292      	uxth	r2, r2
 801a190:	6863      	ldr	r3, [r4, #4]
 801a192:	fbb3 f3f1 	udiv	r3, r3, r1
 801a196:	fb02 f303 	mul.w	r3, r2, r3
 801a19a:	6822      	ldr	r2, [r4, #0]
 801a19c:	f842 a003 	str.w	sl, [r2, r3]
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	81a5      	strh	r5, [r4, #12]
 801a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1a8:	8920      	ldrh	r0, [r4, #8]
 801a1aa:	fbb5 f3f0 	udiv	r3, r5, r0
 801a1ae:	fb00 5513 	mls	r5, r0, r3, r5
 801a1b2:	b2ad      	uxth	r5, r5
 801a1b4:	6863      	ldr	r3, [r4, #4]
 801a1b6:	fbb3 f3f0 	udiv	r3, r3, r0
 801a1ba:	fb03 f505 	mul.w	r5, r3, r5
 801a1be:	6823      	ldr	r3, [r4, #0]
 801a1c0:	2000      	movs	r0, #0
 801a1c2:	5158      	str	r0, [r3, r5]
 801a1c4:	eb06 0108 	add.w	r1, r6, r8
 801a1c8:	eba9 0208 	sub.w	r2, r9, r8
 801a1cc:	4638      	mov	r0, r7
 801a1ce:	f7f3 febd 	bl	800df4c <ucdr_init_buffer>
 801a1d2:	4638      	mov	r0, r7
 801a1d4:	4903      	ldr	r1, [pc, #12]	@ (801a1e4 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a1d6:	4622      	mov	r2, r4
 801a1d8:	f7f3 fe8c 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 801a1dc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a1e0:	2001      	movs	r0, #1
 801a1e2:	e7c8      	b.n	801a176 <uxr_next_input_reliable_buffer_available+0x82>
 801a1e4:	08019ee9 	.word	0x08019ee9

0801a1e8 <uxr_process_heartbeat>:
 801a1e8:	b538      	push	{r3, r4, r5, lr}
 801a1ea:	4611      	mov	r1, r2
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	89c0      	ldrh	r0, [r0, #14]
 801a1f0:	4615      	mov	r5, r2
 801a1f2:	f000 fbb3 	bl	801a95c <uxr_seq_num_cmp>
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	bfb8      	it	lt
 801a1fa:	81e5      	strhlt	r5, [r4, #14]
 801a1fc:	bd38      	pop	{r3, r4, r5, pc}
 801a1fe:	bf00      	nop

0801a200 <uxr_compute_acknack>:
 801a200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a204:	8903      	ldrh	r3, [r0, #8]
 801a206:	8985      	ldrh	r5, [r0, #12]
 801a208:	4604      	mov	r4, r0
 801a20a:	460e      	mov	r6, r1
 801a20c:	b1d3      	cbz	r3, 801a244 <uxr_compute_acknack+0x44>
 801a20e:	4628      	mov	r0, r5
 801a210:	2701      	movs	r7, #1
 801a212:	e003      	b.n	801a21c <uxr_compute_acknack+0x1c>
 801a214:	4567      	cmp	r7, ip
 801a216:	d215      	bcs.n	801a244 <uxr_compute_acknack+0x44>
 801a218:	89a0      	ldrh	r0, [r4, #12]
 801a21a:	3701      	adds	r7, #1
 801a21c:	b2b9      	uxth	r1, r7
 801a21e:	f000 fb95 	bl	801a94c <uxr_seq_num_add>
 801a222:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a226:	fbb0 f3fc 	udiv	r3, r0, ip
 801a22a:	fb0c 0313 	mls	r3, ip, r3, r0
 801a22e:	b29a      	uxth	r2, r3
 801a230:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a234:	fbb3 f3fc 	udiv	r3, r3, ip
 801a238:	fb02 f303 	mul.w	r3, r2, r3
 801a23c:	58cb      	ldr	r3, [r1, r3]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d1e8      	bne.n	801a214 <uxr_compute_acknack+0x14>
 801a242:	4605      	mov	r5, r0
 801a244:	8035      	strh	r5, [r6, #0]
 801a246:	2101      	movs	r1, #1
 801a248:	4628      	mov	r0, r5
 801a24a:	89e7      	ldrh	r7, [r4, #14]
 801a24c:	f000 fb82 	bl	801a954 <uxr_seq_num_sub>
 801a250:	4601      	mov	r1, r0
 801a252:	4638      	mov	r0, r7
 801a254:	f000 fb7e 	bl	801a954 <uxr_seq_num_sub>
 801a258:	4605      	mov	r5, r0
 801a25a:	b318      	cbz	r0, 801a2a4 <uxr_compute_acknack+0xa4>
 801a25c:	f04f 0900 	mov.w	r9, #0
 801a260:	464f      	mov	r7, r9
 801a262:	f04f 0801 	mov.w	r8, #1
 801a266:	fa1f f189 	uxth.w	r1, r9
 801a26a:	8830      	ldrh	r0, [r6, #0]
 801a26c:	f000 fb6e 	bl	801a94c <uxr_seq_num_add>
 801a270:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a274:	fbb0 f3fc 	udiv	r3, r0, ip
 801a278:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a27c:	fb03 001c 	mls	r0, r3, ip, r0
 801a280:	b283      	uxth	r3, r0
 801a282:	fbb2 f2fc 	udiv	r2, r2, ip
 801a286:	fb02 f303 	mul.w	r3, r2, r3
 801a28a:	fa08 f209 	lsl.w	r2, r8, r9
 801a28e:	58cb      	ldr	r3, [r1, r3]
 801a290:	f109 0901 	add.w	r9, r9, #1
 801a294:	b90b      	cbnz	r3, 801a29a <uxr_compute_acknack+0x9a>
 801a296:	4317      	orrs	r7, r2
 801a298:	b2bf      	uxth	r7, r7
 801a29a:	454d      	cmp	r5, r9
 801a29c:	d1e3      	bne.n	801a266 <uxr_compute_acknack+0x66>
 801a29e:	4638      	mov	r0, r7
 801a2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2a4:	4607      	mov	r7, r0
 801a2a6:	4638      	mov	r0, r7
 801a2a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a2ac <uxr_init_output_best_effort_stream>:
 801a2ac:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a2b0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a2b4:	6001      	str	r1, [r0, #0]
 801a2b6:	7303      	strb	r3, [r0, #12]
 801a2b8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a2bc:	4770      	bx	lr
 801a2be:	bf00      	nop

0801a2c0 <uxr_reset_output_best_effort_stream>:
 801a2c0:	7b02      	ldrb	r2, [r0, #12]
 801a2c2:	6042      	str	r2, [r0, #4]
 801a2c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a2c8:	81c3      	strh	r3, [r0, #14]
 801a2ca:	4770      	bx	lr

0801a2cc <uxr_prepare_best_effort_buffer_to_write>:
 801a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	b083      	sub	sp, #12
 801a2d2:	6840      	ldr	r0, [r0, #4]
 801a2d4:	460d      	mov	r5, r1
 801a2d6:	4616      	mov	r6, r2
 801a2d8:	f7fb f8da 	bl	8015490 <uxr_submessage_padding>
 801a2dc:	6863      	ldr	r3, [r4, #4]
 801a2de:	4418      	add	r0, r3
 801a2e0:	68a3      	ldr	r3, [r4, #8]
 801a2e2:	1942      	adds	r2, r0, r5
 801a2e4:	4293      	cmp	r3, r2
 801a2e6:	bf2c      	ite	cs
 801a2e8:	2701      	movcs	r7, #1
 801a2ea:	2700      	movcc	r7, #0
 801a2ec:	d202      	bcs.n	801a2f4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a2ee:	4638      	mov	r0, r7
 801a2f0:	b003      	add	sp, #12
 801a2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2f4:	9000      	str	r0, [sp, #0]
 801a2f6:	6821      	ldr	r1, [r4, #0]
 801a2f8:	4630      	mov	r0, r6
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	f7f3 fe14 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801a300:	6861      	ldr	r1, [r4, #4]
 801a302:	4638      	mov	r0, r7
 801a304:	4429      	add	r1, r5
 801a306:	6061      	str	r1, [r4, #4]
 801a308:	b003      	add	sp, #12
 801a30a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a30c <uxr_prepare_best_effort_buffer_to_send>:
 801a30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a310:	4604      	mov	r4, r0
 801a312:	461d      	mov	r5, r3
 801a314:	6840      	ldr	r0, [r0, #4]
 801a316:	7b23      	ldrb	r3, [r4, #12]
 801a318:	4298      	cmp	r0, r3
 801a31a:	bf8c      	ite	hi
 801a31c:	2601      	movhi	r6, #1
 801a31e:	2600      	movls	r6, #0
 801a320:	d802      	bhi.n	801a328 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a322:	4630      	mov	r0, r6
 801a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a328:	4688      	mov	r8, r1
 801a32a:	89e0      	ldrh	r0, [r4, #14]
 801a32c:	2101      	movs	r1, #1
 801a32e:	4617      	mov	r7, r2
 801a330:	f000 fb0c 	bl	801a94c <uxr_seq_num_add>
 801a334:	6823      	ldr	r3, [r4, #0]
 801a336:	81e0      	strh	r0, [r4, #14]
 801a338:	8028      	strh	r0, [r5, #0]
 801a33a:	f8c8 3000 	str.w	r3, [r8]
 801a33e:	6863      	ldr	r3, [r4, #4]
 801a340:	603b      	str	r3, [r7, #0]
 801a342:	7b23      	ldrb	r3, [r4, #12]
 801a344:	6063      	str	r3, [r4, #4]
 801a346:	4630      	mov	r0, r6
 801a348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a34c <on_full_output_buffer>:
 801a34c:	b538      	push	{r3, r4, r5, lr}
 801a34e:	6802      	ldr	r2, [r0, #0]
 801a350:	460c      	mov	r4, r1
 801a352:	6809      	ldr	r1, [r1, #0]
 801a354:	8923      	ldrh	r3, [r4, #8]
 801a356:	eba2 0c01 	sub.w	ip, r2, r1
 801a35a:	6862      	ldr	r2, [r4, #4]
 801a35c:	fbb2 f2f3 	udiv	r2, r2, r3
 801a360:	fbbc fcf2 	udiv	ip, ip, r2
 801a364:	f10c 0c01 	add.w	ip, ip, #1
 801a368:	fa1f fc8c 	uxth.w	ip, ip
 801a36c:	fbbc fef3 	udiv	lr, ip, r3
 801a370:	fb03 c31e 	mls	r3, r3, lr, ip
 801a374:	b29b      	uxth	r3, r3
 801a376:	fb02 f303 	mul.w	r3, r2, r3
 801a37a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a37e:	58ca      	ldr	r2, [r1, r3]
 801a380:	4463      	add	r3, ip
 801a382:	eba2 020c 	sub.w	r2, r2, ip
 801a386:	3308      	adds	r3, #8
 801a388:	4605      	mov	r5, r0
 801a38a:	4419      	add	r1, r3
 801a38c:	3a04      	subs	r2, #4
 801a38e:	6903      	ldr	r3, [r0, #16]
 801a390:	f7f3 fdd4 	bl	800df3c <ucdr_init_buffer_origin>
 801a394:	4628      	mov	r0, r5
 801a396:	4903      	ldr	r1, [pc, #12]	@ (801a3a4 <on_full_output_buffer+0x58>)
 801a398:	4622      	mov	r2, r4
 801a39a:	f7f3 fdab 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 801a39e:	2000      	movs	r0, #0
 801a3a0:	bd38      	pop	{r3, r4, r5, pc}
 801a3a2:	bf00      	nop
 801a3a4:	0801a34d 	.word	0x0801a34d

0801a3a8 <uxr_init_output_reliable_stream>:
 801a3a8:	b410      	push	{r4}
 801a3aa:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a3ae:	8103      	strh	r3, [r0, #8]
 801a3b0:	e9c0 1200 	strd	r1, r2, [r0]
 801a3b4:	f880 c00c 	strb.w	ip, [r0, #12]
 801a3b8:	b1d3      	cbz	r3, 801a3f0 <uxr_init_output_reliable_stream+0x48>
 801a3ba:	f8c1 c000 	str.w	ip, [r1]
 801a3be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3c2:	f1bc 0f01 	cmp.w	ip, #1
 801a3c6:	d913      	bls.n	801a3f0 <uxr_init_output_reliable_stream+0x48>
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	fbb3 f1fc 	udiv	r1, r3, ip
 801a3ce:	fb0c 3111 	mls	r1, ip, r1, r3
 801a3d2:	b289      	uxth	r1, r1
 801a3d4:	6842      	ldr	r2, [r0, #4]
 801a3d6:	6804      	ldr	r4, [r0, #0]
 801a3d8:	fbb2 f2fc 	udiv	r2, r2, ip
 801a3dc:	fb01 f202 	mul.w	r2, r1, r2
 801a3e0:	7b01      	ldrb	r1, [r0, #12]
 801a3e2:	50a1      	str	r1, [r4, r2]
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3ea:	b29b      	uxth	r3, r3
 801a3ec:	459c      	cmp	ip, r3
 801a3ee:	d8ec      	bhi.n	801a3ca <uxr_init_output_reliable_stream+0x22>
 801a3f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a3f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a3f8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a3fc:	4905      	ldr	r1, [pc, #20]	@ (801a414 <uxr_init_output_reliable_stream+0x6c>)
 801a3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a402:	f8c0 100e 	str.w	r1, [r0, #14]
 801a406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a40a:	2300      	movs	r3, #0
 801a40c:	8242      	strh	r2, [r0, #18]
 801a40e:	8403      	strh	r3, [r0, #32]
 801a410:	4770      	bx	lr
 801a412:	bf00      	nop
 801a414:	ffff0000 	.word	0xffff0000

0801a418 <uxr_reset_output_reliable_stream>:
 801a418:	8901      	ldrh	r1, [r0, #8]
 801a41a:	b1b1      	cbz	r1, 801a44a <uxr_reset_output_reliable_stream+0x32>
 801a41c:	f04f 0c00 	mov.w	ip, #0
 801a420:	4663      	mov	r3, ip
 801a422:	fbb3 f2f1 	udiv	r2, r3, r1
 801a426:	fb01 3312 	mls	r3, r1, r2, r3
 801a42a:	b29b      	uxth	r3, r3
 801a42c:	6842      	ldr	r2, [r0, #4]
 801a42e:	fbb2 f2f1 	udiv	r2, r2, r1
 801a432:	6801      	ldr	r1, [r0, #0]
 801a434:	fb02 f303 	mul.w	r3, r2, r3
 801a438:	7b02      	ldrb	r2, [r0, #12]
 801a43a:	50ca      	str	r2, [r1, r3]
 801a43c:	f10c 0c01 	add.w	ip, ip, #1
 801a440:	8901      	ldrh	r1, [r0, #8]
 801a442:	fa1f f38c 	uxth.w	r3, ip
 801a446:	4299      	cmp	r1, r3
 801a448:	d8eb      	bhi.n	801a422 <uxr_reset_output_reliable_stream+0xa>
 801a44a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a44e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a452:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a456:	4904      	ldr	r1, [pc, #16]	@ (801a468 <uxr_reset_output_reliable_stream+0x50>)
 801a458:	f8c0 100e 	str.w	r1, [r0, #14]
 801a45c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a460:	2300      	movs	r3, #0
 801a462:	8242      	strh	r2, [r0, #18]
 801a464:	8403      	strh	r3, [r0, #32]
 801a466:	4770      	bx	lr
 801a468:	ffff0000 	.word	0xffff0000

0801a46c <uxr_prepare_reliable_buffer_to_write>:
 801a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a470:	4604      	mov	r4, r0
 801a472:	b091      	sub	sp, #68	@ 0x44
 801a474:	8900      	ldrh	r0, [r0, #8]
 801a476:	89e6      	ldrh	r6, [r4, #14]
 801a478:	6823      	ldr	r3, [r4, #0]
 801a47a:	9204      	str	r2, [sp, #16]
 801a47c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a480:	fb00 6212 	mls	r2, r0, r2, r6
 801a484:	b292      	uxth	r2, r2
 801a486:	6865      	ldr	r5, [r4, #4]
 801a488:	fbb5 f5f0 	udiv	r5, r5, r0
 801a48c:	fb05 3202 	mla	r2, r5, r2, r3
 801a490:	3204      	adds	r2, #4
 801a492:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a496:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a49a:	9203      	str	r2, [sp, #12]
 801a49c:	468b      	mov	fp, r1
 801a49e:	1f2f      	subs	r7, r5, #4
 801a4a0:	2800      	cmp	r0, #0
 801a4a2:	f000 814c 	beq.w	801a73e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a4a6:	f04f 0c00 	mov.w	ip, #0
 801a4aa:	46e2      	mov	sl, ip
 801a4ac:	4661      	mov	r1, ip
 801a4ae:	fbb1 f2f0 	udiv	r2, r1, r0
 801a4b2:	fb00 1212 	mls	r2, r0, r2, r1
 801a4b6:	b292      	uxth	r2, r2
 801a4b8:	fb05 f202 	mul.w	r2, r5, r2
 801a4bc:	f10c 0c01 	add.w	ip, ip, #1
 801a4c0:	589a      	ldr	r2, [r3, r2]
 801a4c2:	454a      	cmp	r2, r9
 801a4c4:	bf08      	it	eq
 801a4c6:	f10a 0a01 	addeq.w	sl, sl, #1
 801a4ca:	fa1f f18c 	uxth.w	r1, ip
 801a4ce:	bf08      	it	eq
 801a4d0:	fa1f fa8a 	uxtheq.w	sl, sl
 801a4d4:	4281      	cmp	r1, r0
 801a4d6:	d3ea      	bcc.n	801a4ae <uxr_prepare_reliable_buffer_to_write+0x42>
 801a4d8:	4640      	mov	r0, r8
 801a4da:	2104      	movs	r1, #4
 801a4dc:	f8cd a014 	str.w	sl, [sp, #20]
 801a4e0:	f7f3 fd38 	bl	800df54 <ucdr_alignment>
 801a4e4:	4480      	add	r8, r0
 801a4e6:	eb08 020b 	add.w	r2, r8, fp
 801a4ea:	42ba      	cmp	r2, r7
 801a4ec:	f240 80cd 	bls.w	801a68a <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a4f0:	7b22      	ldrb	r2, [r4, #12]
 801a4f2:	445a      	add	r2, fp
 801a4f4:	42ba      	cmp	r2, r7
 801a4f6:	f240 80b5 	bls.w	801a664 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a4fa:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a4fe:	33fc      	adds	r3, #252	@ 0xfc
 801a500:	b2ba      	uxth	r2, r7
 801a502:	4413      	add	r3, r2
 801a504:	b29b      	uxth	r3, r3
 801a506:	fb0a f903 	mul.w	r9, sl, r3
 801a50a:	45d9      	cmp	r9, fp
 801a50c:	9305      	str	r3, [sp, #20]
 801a50e:	9306      	str	r3, [sp, #24]
 801a510:	f0c0 80b7 	bcc.w	801a682 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a514:	f108 0304 	add.w	r3, r8, #4
 801a518:	42bb      	cmp	r3, r7
 801a51a:	f080 80db 	bcs.w	801a6d4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801a51e:	f1a2 0904 	sub.w	r9, r2, #4
 801a522:	eba9 0908 	sub.w	r9, r9, r8
 801a526:	9b05      	ldr	r3, [sp, #20]
 801a528:	fa1f f989 	uxth.w	r9, r9
 801a52c:	ebab 0b09 	sub.w	fp, fp, r9
 801a530:	fbbb f2f3 	udiv	r2, fp, r3
 801a534:	fb03 b312 	mls	r3, r3, r2, fp
 801a538:	2b00      	cmp	r3, #0
 801a53a:	f000 80c8 	beq.w	801a6ce <uxr_prepare_reliable_buffer_to_write+0x262>
 801a53e:	3201      	adds	r2, #1
 801a540:	b292      	uxth	r2, r2
 801a542:	9306      	str	r3, [sp, #24]
 801a544:	4552      	cmp	r2, sl
 801a546:	f200 809c 	bhi.w	801a682 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a54a:	f10d 0b20 	add.w	fp, sp, #32
 801a54e:	2a00      	cmp	r2, #0
 801a550:	d042      	beq.n	801a5d8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a552:	f8cd 801c 	str.w	r8, [sp, #28]
 801a556:	f04f 0a00 	mov.w	sl, #0
 801a55a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a55e:	9505      	str	r5, [sp, #20]
 801a560:	f10d 0b20 	add.w	fp, sp, #32
 801a564:	4615      	mov	r5, r2
 801a566:	e000      	b.n	801a56a <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a568:	46c1      	mov	r9, r8
 801a56a:	8920      	ldrh	r0, [r4, #8]
 801a56c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a570:	fb00 6112 	mls	r1, r0, r2, r6
 801a574:	b28a      	uxth	r2, r1
 801a576:	6863      	ldr	r3, [r4, #4]
 801a578:	fbb3 f1f0 	udiv	r1, r3, r0
 801a57c:	6823      	ldr	r3, [r4, #0]
 801a57e:	fb02 f101 	mul.w	r1, r2, r1
 801a582:	3104      	adds	r1, #4
 801a584:	4419      	add	r1, r3
 801a586:	4658      	mov	r0, fp
 801a588:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a58c:	9200      	str	r2, [sp, #0]
 801a58e:	2300      	movs	r3, #0
 801a590:	463a      	mov	r2, r7
 801a592:	f7f3 fcc9 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801a596:	464a      	mov	r2, r9
 801a598:	2300      	movs	r3, #0
 801a59a:	210d      	movs	r1, #13
 801a59c:	4658      	mov	r0, fp
 801a59e:	f7fa ff37 	bl	8015410 <uxr_buffer_submessage_header>
 801a5a2:	8921      	ldrh	r1, [r4, #8]
 801a5a4:	fbb6 f2f1 	udiv	r2, r6, r1
 801a5a8:	fb01 6212 	mls	r2, r1, r2, r6
 801a5ac:	b292      	uxth	r2, r2
 801a5ae:	6863      	ldr	r3, [r4, #4]
 801a5b0:	fbb3 f3f1 	udiv	r3, r3, r1
 801a5b4:	fb02 f303 	mul.w	r3, r2, r3
 801a5b8:	6822      	ldr	r2, [r4, #0]
 801a5ba:	4630      	mov	r0, r6
 801a5bc:	50d7      	str	r7, [r2, r3]
 801a5be:	2101      	movs	r1, #1
 801a5c0:	f000 f9c4 	bl	801a94c <uxr_seq_num_add>
 801a5c4:	f10a 0a01 	add.w	sl, sl, #1
 801a5c8:	fa1f f38a 	uxth.w	r3, sl
 801a5cc:	429d      	cmp	r5, r3
 801a5ce:	4606      	mov	r6, r0
 801a5d0:	d8ca      	bhi.n	801a568 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801a5d2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a5d6:	9d05      	ldr	r5, [sp, #20]
 801a5d8:	8920      	ldrh	r0, [r4, #8]
 801a5da:	fbb6 f3f0 	udiv	r3, r6, r0
 801a5de:	fb00 6313 	mls	r3, r0, r3, r6
 801a5e2:	b299      	uxth	r1, r3
 801a5e4:	6863      	ldr	r3, [r4, #4]
 801a5e6:	fbb3 f3f0 	udiv	r3, r3, r0
 801a5ea:	fb01 f303 	mul.w	r3, r1, r3
 801a5ee:	6821      	ldr	r1, [r4, #0]
 801a5f0:	3304      	adds	r3, #4
 801a5f2:	4419      	add	r1, r3
 801a5f4:	463a      	mov	r2, r7
 801a5f6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a5fa:	9000      	str	r0, [sp, #0]
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	4658      	mov	r0, fp
 801a600:	f7f3 fc92 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801a604:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a608:	4658      	mov	r0, fp
 801a60a:	fa1f f289 	uxth.w	r2, r9
 801a60e:	2302      	movs	r3, #2
 801a610:	210d      	movs	r1, #13
 801a612:	f7fa fefd 	bl	8015410 <uxr_buffer_submessage_header>
 801a616:	9b03      	ldr	r3, [sp, #12]
 801a618:	8927      	ldrh	r7, [r4, #8]
 801a61a:	7b20      	ldrb	r0, [r4, #12]
 801a61c:	f108 0104 	add.w	r1, r8, #4
 801a620:	440b      	add	r3, r1
 801a622:	4619      	mov	r1, r3
 801a624:	fbb6 f3f7 	udiv	r3, r6, r7
 801a628:	fb07 6313 	mls	r3, r7, r3, r6
 801a62c:	f1a5 0208 	sub.w	r2, r5, #8
 801a630:	b29d      	uxth	r5, r3
 801a632:	3004      	adds	r0, #4
 801a634:	6863      	ldr	r3, [r4, #4]
 801a636:	fbb3 f3f7 	udiv	r3, r3, r7
 801a63a:	fb05 f303 	mul.w	r3, r5, r3
 801a63e:	6825      	ldr	r5, [r4, #0]
 801a640:	4448      	add	r0, r9
 801a642:	50e8      	str	r0, [r5, r3]
 801a644:	9d04      	ldr	r5, [sp, #16]
 801a646:	eba2 0208 	sub.w	r2, r2, r8
 801a64a:	4628      	mov	r0, r5
 801a64c:	f7f3 fc7e 	bl	800df4c <ucdr_init_buffer>
 801a650:	4628      	mov	r0, r5
 801a652:	493c      	ldr	r1, [pc, #240]	@ (801a744 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a654:	4622      	mov	r2, r4
 801a656:	f7f3 fc4d 	bl	800def4 <ucdr_set_on_full_buffer_callback>
 801a65a:	2001      	movs	r0, #1
 801a65c:	81e6      	strh	r6, [r4, #14]
 801a65e:	b011      	add	sp, #68	@ 0x44
 801a660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a664:	2101      	movs	r1, #1
 801a666:	89e0      	ldrh	r0, [r4, #14]
 801a668:	f000 f970 	bl	801a94c <uxr_seq_num_add>
 801a66c:	8921      	ldrh	r1, [r4, #8]
 801a66e:	4605      	mov	r5, r0
 801a670:	8a60      	ldrh	r0, [r4, #18]
 801a672:	f000 f96b 	bl	801a94c <uxr_seq_num_add>
 801a676:	4601      	mov	r1, r0
 801a678:	4628      	mov	r0, r5
 801a67a:	f000 f96f 	bl	801a95c <uxr_seq_num_cmp>
 801a67e:	2800      	cmp	r0, #0
 801a680:	dd42      	ble.n	801a708 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801a682:	2000      	movs	r0, #0
 801a684:	b011      	add	sp, #68	@ 0x44
 801a686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a68a:	8921      	ldrh	r1, [r4, #8]
 801a68c:	8a60      	ldrh	r0, [r4, #18]
 801a68e:	9205      	str	r2, [sp, #20]
 801a690:	f000 f95c 	bl	801a94c <uxr_seq_num_add>
 801a694:	4601      	mov	r1, r0
 801a696:	4630      	mov	r0, r6
 801a698:	f000 f960 	bl	801a95c <uxr_seq_num_cmp>
 801a69c:	2800      	cmp	r0, #0
 801a69e:	9a05      	ldr	r2, [sp, #20]
 801a6a0:	dcef      	bgt.n	801a682 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a6a2:	8927      	ldrh	r7, [r4, #8]
 801a6a4:	fbb6 f3f7 	udiv	r3, r6, r7
 801a6a8:	fb07 6313 	mls	r3, r7, r3, r6
 801a6ac:	b29d      	uxth	r5, r3
 801a6ae:	6863      	ldr	r3, [r4, #4]
 801a6b0:	6824      	ldr	r4, [r4, #0]
 801a6b2:	fbb3 f3f7 	udiv	r3, r3, r7
 801a6b6:	fb05 f303 	mul.w	r3, r5, r3
 801a6ba:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a6be:	50e2      	str	r2, [r4, r3]
 801a6c0:	2300      	movs	r3, #0
 801a6c2:	f8cd 8000 	str.w	r8, [sp]
 801a6c6:	f7f3 fc2f 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801a6ca:	2001      	movs	r0, #1
 801a6cc:	e7da      	b.n	801a684 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a6ce:	b293      	uxth	r3, r2
 801a6d0:	461a      	mov	r2, r3
 801a6d2:	e737      	b.n	801a544 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801a6d4:	4630      	mov	r0, r6
 801a6d6:	2101      	movs	r1, #1
 801a6d8:	9207      	str	r2, [sp, #28]
 801a6da:	f000 f937 	bl	801a94c <uxr_seq_num_add>
 801a6de:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a6e2:	fbb0 f1fc 	udiv	r1, r0, ip
 801a6e6:	fb0c 0111 	mls	r1, ip, r1, r0
 801a6ea:	4606      	mov	r6, r0
 801a6ec:	b288      	uxth	r0, r1
 801a6ee:	6863      	ldr	r3, [r4, #4]
 801a6f0:	fbb3 f1fc 	udiv	r1, r3, ip
 801a6f4:	6823      	ldr	r3, [r4, #0]
 801a6f6:	9a07      	ldr	r2, [sp, #28]
 801a6f8:	fb00 f101 	mul.w	r1, r0, r1
 801a6fc:	3104      	adds	r1, #4
 801a6fe:	440b      	add	r3, r1
 801a700:	9303      	str	r3, [sp, #12]
 801a702:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a706:	e70a      	b.n	801a51e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a708:	8921      	ldrh	r1, [r4, #8]
 801a70a:	fbb5 f3f1 	udiv	r3, r5, r1
 801a70e:	fb01 5313 	mls	r3, r1, r3, r5
 801a712:	b29a      	uxth	r2, r3
 801a714:	6863      	ldr	r3, [r4, #4]
 801a716:	fbb3 f3f1 	udiv	r3, r3, r1
 801a71a:	6821      	ldr	r1, [r4, #0]
 801a71c:	9804      	ldr	r0, [sp, #16]
 801a71e:	fb02 f303 	mul.w	r3, r2, r3
 801a722:	3304      	adds	r3, #4
 801a724:	7b22      	ldrb	r2, [r4, #12]
 801a726:	4419      	add	r1, r3
 801a728:	445a      	add	r2, fp
 801a72a:	f841 2c04 	str.w	r2, [r1, #-4]
 801a72e:	7b23      	ldrb	r3, [r4, #12]
 801a730:	9300      	str	r3, [sp, #0]
 801a732:	2300      	movs	r3, #0
 801a734:	f7f3 fbf8 	bl	800df28 <ucdr_init_buffer_origin_offset>
 801a738:	81e5      	strh	r5, [r4, #14]
 801a73a:	2001      	movs	r0, #1
 801a73c:	e7a2      	b.n	801a684 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a73e:	4682      	mov	sl, r0
 801a740:	e6ca      	b.n	801a4d8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801a742:	bf00      	nop
 801a744:	0801a34d 	.word	0x0801a34d

0801a748 <uxr_prepare_next_reliable_buffer_to_send>:
 801a748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a74a:	4604      	mov	r4, r0
 801a74c:	460f      	mov	r7, r1
 801a74e:	8a00      	ldrh	r0, [r0, #16]
 801a750:	2101      	movs	r1, #1
 801a752:	4616      	mov	r6, r2
 801a754:	461d      	mov	r5, r3
 801a756:	f000 f8f9 	bl	801a94c <uxr_seq_num_add>
 801a75a:	8028      	strh	r0, [r5, #0]
 801a75c:	8922      	ldrh	r2, [r4, #8]
 801a75e:	fbb0 f3f2 	udiv	r3, r0, r2
 801a762:	fb02 0c13 	mls	ip, r2, r3, r0
 801a766:	fa1f fc8c 	uxth.w	ip, ip
 801a76a:	6863      	ldr	r3, [r4, #4]
 801a76c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a770:	fb0c fc03 	mul.w	ip, ip, r3
 801a774:	6823      	ldr	r3, [r4, #0]
 801a776:	89e1      	ldrh	r1, [r4, #14]
 801a778:	f10c 0c04 	add.w	ip, ip, #4
 801a77c:	4463      	add	r3, ip
 801a77e:	603b      	str	r3, [r7, #0]
 801a780:	6823      	ldr	r3, [r4, #0]
 801a782:	449c      	add	ip, r3
 801a784:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a788:	6033      	str	r3, [r6, #0]
 801a78a:	f000 f8e7 	bl	801a95c <uxr_seq_num_cmp>
 801a78e:	2800      	cmp	r0, #0
 801a790:	dd01      	ble.n	801a796 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a792:	2000      	movs	r0, #0
 801a794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a796:	7b23      	ldrb	r3, [r4, #12]
 801a798:	6832      	ldr	r2, [r6, #0]
 801a79a:	429a      	cmp	r2, r3
 801a79c:	d9f9      	bls.n	801a792 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a79e:	8a61      	ldrh	r1, [r4, #18]
 801a7a0:	8a20      	ldrh	r0, [r4, #16]
 801a7a2:	f000 f8d7 	bl	801a954 <uxr_seq_num_sub>
 801a7a6:	8923      	ldrh	r3, [r4, #8]
 801a7a8:	4283      	cmp	r3, r0
 801a7aa:	d0f2      	beq.n	801a792 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a7ac:	8828      	ldrh	r0, [r5, #0]
 801a7ae:	89e3      	ldrh	r3, [r4, #14]
 801a7b0:	8220      	strh	r0, [r4, #16]
 801a7b2:	4298      	cmp	r0, r3
 801a7b4:	d001      	beq.n	801a7ba <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a7b6:	2001      	movs	r0, #1
 801a7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7ba:	2101      	movs	r1, #1
 801a7bc:	f000 f8c6 	bl	801a94c <uxr_seq_num_add>
 801a7c0:	81e0      	strh	r0, [r4, #14]
 801a7c2:	2001      	movs	r0, #1
 801a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7c6:	bf00      	nop

0801a7c8 <uxr_update_output_stream_heartbeat_timestamp>:
 801a7c8:	b570      	push	{r4, r5, r6, lr}
 801a7ca:	8a01      	ldrh	r1, [r0, #16]
 801a7cc:	4604      	mov	r4, r0
 801a7ce:	8a40      	ldrh	r0, [r0, #18]
 801a7d0:	4615      	mov	r5, r2
 801a7d2:	461e      	mov	r6, r3
 801a7d4:	f000 f8c2 	bl	801a95c <uxr_seq_num_cmp>
 801a7d8:	2800      	cmp	r0, #0
 801a7da:	db07      	blt.n	801a7ec <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a7dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a7e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a7e4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a7e8:	2000      	movs	r0, #0
 801a7ea:	bd70      	pop	{r4, r5, r6, pc}
 801a7ec:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a7f0:	b940      	cbnz	r0, 801a804 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a7f2:	2301      	movs	r3, #1
 801a7f4:	f884 3020 	strb.w	r3, [r4, #32]
 801a7f8:	3564      	adds	r5, #100	@ 0x64
 801a7fa:	f146 0600 	adc.w	r6, r6, #0
 801a7fe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a802:	bd70      	pop	{r4, r5, r6, pc}
 801a804:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a808:	4295      	cmp	r5, r2
 801a80a:	eb76 0303 	sbcs.w	r3, r6, r3
 801a80e:	bfa5      	ittet	ge
 801a810:	3001      	addge	r0, #1
 801a812:	f884 0020 	strbge.w	r0, [r4, #32]
 801a816:	2000      	movlt	r0, #0
 801a818:	2001      	movge	r0, #1
 801a81a:	e7ed      	b.n	801a7f8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801a81c <uxr_begin_output_nack_buffer_it>:
 801a81c:	8a40      	ldrh	r0, [r0, #18]
 801a81e:	4770      	bx	lr

0801a820 <uxr_next_reliable_nack_buffer_to_send>:
 801a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a824:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a828:	b082      	sub	sp, #8
 801a82a:	f1b8 0f00 	cmp.w	r8, #0
 801a82e:	d011      	beq.n	801a854 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801a830:	4604      	mov	r4, r0
 801a832:	8818      	ldrh	r0, [r3, #0]
 801a834:	460e      	mov	r6, r1
 801a836:	4617      	mov	r7, r2
 801a838:	461d      	mov	r5, r3
 801a83a:	2101      	movs	r1, #1
 801a83c:	f000 f886 	bl	801a94c <uxr_seq_num_add>
 801a840:	8028      	strh	r0, [r5, #0]
 801a842:	8a21      	ldrh	r1, [r4, #16]
 801a844:	f000 f88a 	bl	801a95c <uxr_seq_num_cmp>
 801a848:	2800      	cmp	r0, #0
 801a84a:	dd07      	ble.n	801a85c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801a84c:	f04f 0800 	mov.w	r8, #0
 801a850:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801a854:	4640      	mov	r0, r8
 801a856:	b002      	add	sp, #8
 801a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a85c:	8921      	ldrh	r1, [r4, #8]
 801a85e:	8828      	ldrh	r0, [r5, #0]
 801a860:	6823      	ldr	r3, [r4, #0]
 801a862:	fbb0 f2f1 	udiv	r2, r0, r1
 801a866:	fb01 0c12 	mls	ip, r1, r2, r0
 801a86a:	fa1f f28c 	uxth.w	r2, ip
 801a86e:	9301      	str	r3, [sp, #4]
 801a870:	6863      	ldr	r3, [r4, #4]
 801a872:	fbb3 fcf1 	udiv	ip, r3, r1
 801a876:	9b01      	ldr	r3, [sp, #4]
 801a878:	fb02 fc0c 	mul.w	ip, r2, ip
 801a87c:	f10c 0c04 	add.w	ip, ip, #4
 801a880:	4463      	add	r3, ip
 801a882:	6033      	str	r3, [r6, #0]
 801a884:	6823      	ldr	r3, [r4, #0]
 801a886:	4463      	add	r3, ip
 801a888:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a88c:	603b      	str	r3, [r7, #0]
 801a88e:	7b22      	ldrb	r2, [r4, #12]
 801a890:	429a      	cmp	r2, r3
 801a892:	d0d2      	beq.n	801a83a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a894:	4640      	mov	r0, r8
 801a896:	b002      	add	sp, #8
 801a898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a89c <uxr_process_acknack>:
 801a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a89e:	4604      	mov	r4, r0
 801a8a0:	460e      	mov	r6, r1
 801a8a2:	4610      	mov	r0, r2
 801a8a4:	2101      	movs	r1, #1
 801a8a6:	f000 f855 	bl	801a954 <uxr_seq_num_sub>
 801a8aa:	8a61      	ldrh	r1, [r4, #18]
 801a8ac:	f000 f852 	bl	801a954 <uxr_seq_num_sub>
 801a8b0:	b1c0      	cbz	r0, 801a8e4 <uxr_process_acknack+0x48>
 801a8b2:	4605      	mov	r5, r0
 801a8b4:	2700      	movs	r7, #0
 801a8b6:	2101      	movs	r1, #1
 801a8b8:	8a60      	ldrh	r0, [r4, #18]
 801a8ba:	f000 f847 	bl	801a94c <uxr_seq_num_add>
 801a8be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a8c2:	fbb0 f1fc 	udiv	r1, r0, ip
 801a8c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a8ca:	fb0c 0111 	mls	r1, ip, r1, r0
 801a8ce:	b289      	uxth	r1, r1
 801a8d0:	3701      	adds	r7, #1
 801a8d2:	fbb3 f3fc 	udiv	r3, r3, ip
 801a8d6:	fb01 f303 	mul.w	r3, r1, r3
 801a8da:	42bd      	cmp	r5, r7
 801a8dc:	7b21      	ldrb	r1, [r4, #12]
 801a8de:	8260      	strh	r0, [r4, #18]
 801a8e0:	50d1      	str	r1, [r2, r3]
 801a8e2:	d1e8      	bne.n	801a8b6 <uxr_process_acknack+0x1a>
 801a8e4:	3e00      	subs	r6, #0
 801a8e6:	f04f 0300 	mov.w	r3, #0
 801a8ea:	bf18      	it	ne
 801a8ec:	2601      	movne	r6, #1
 801a8ee:	f884 3020 	strb.w	r3, [r4, #32]
 801a8f2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a8f8 <uxr_is_output_up_to_date>:
 801a8f8:	8a01      	ldrh	r1, [r0, #16]
 801a8fa:	8a40      	ldrh	r0, [r0, #18]
 801a8fc:	b508      	push	{r3, lr}
 801a8fe:	f000 f82d 	bl	801a95c <uxr_seq_num_cmp>
 801a902:	fab0 f080 	clz	r0, r0
 801a906:	0940      	lsrs	r0, r0, #5
 801a908:	bd08      	pop	{r3, pc}
 801a90a:	bf00      	nop

0801a90c <get_available_free_slots>:
 801a90c:	8902      	ldrh	r2, [r0, #8]
 801a90e:	b1da      	cbz	r2, 801a948 <get_available_free_slots+0x3c>
 801a910:	b530      	push	{r4, r5, lr}
 801a912:	2100      	movs	r1, #0
 801a914:	6843      	ldr	r3, [r0, #4]
 801a916:	6805      	ldr	r5, [r0, #0]
 801a918:	7b04      	ldrb	r4, [r0, #12]
 801a91a:	fbb3 fef2 	udiv	lr, r3, r2
 801a91e:	4608      	mov	r0, r1
 801a920:	460b      	mov	r3, r1
 801a922:	fbb3 fcf2 	udiv	ip, r3, r2
 801a926:	fb02 331c 	mls	r3, r2, ip, r3
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	fb0e f303 	mul.w	r3, lr, r3
 801a930:	3101      	adds	r1, #1
 801a932:	f855 c003 	ldr.w	ip, [r5, r3]
 801a936:	4564      	cmp	r4, ip
 801a938:	bf08      	it	eq
 801a93a:	3001      	addeq	r0, #1
 801a93c:	b28b      	uxth	r3, r1
 801a93e:	bf08      	it	eq
 801a940:	b280      	uxtheq	r0, r0
 801a942:	4293      	cmp	r3, r2
 801a944:	d3ed      	bcc.n	801a922 <get_available_free_slots+0x16>
 801a946:	bd30      	pop	{r4, r5, pc}
 801a948:	4610      	mov	r0, r2
 801a94a:	4770      	bx	lr

0801a94c <uxr_seq_num_add>:
 801a94c:	4408      	add	r0, r1
 801a94e:	b280      	uxth	r0, r0
 801a950:	4770      	bx	lr
 801a952:	bf00      	nop

0801a954 <uxr_seq_num_sub>:
 801a954:	1a40      	subs	r0, r0, r1
 801a956:	b280      	uxth	r0, r0
 801a958:	4770      	bx	lr
 801a95a:	bf00      	nop

0801a95c <uxr_seq_num_cmp>:
 801a95c:	4288      	cmp	r0, r1
 801a95e:	d011      	beq.n	801a984 <uxr_seq_num_cmp+0x28>
 801a960:	d309      	bcc.n	801a976 <uxr_seq_num_cmp+0x1a>
 801a962:	4288      	cmp	r0, r1
 801a964:	d910      	bls.n	801a988 <uxr_seq_num_cmp+0x2c>
 801a966:	1a40      	subs	r0, r0, r1
 801a968:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a96c:	bfd4      	ite	le
 801a96e:	2001      	movle	r0, #1
 801a970:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a974:	4770      	bx	lr
 801a976:	1a0b      	subs	r3, r1, r0
 801a978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a97c:	daf1      	bge.n	801a962 <uxr_seq_num_cmp+0x6>
 801a97e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a982:	4770      	bx	lr
 801a984:	2000      	movs	r0, #0
 801a986:	4770      	bx	lr
 801a988:	2001      	movs	r0, #1
 801a98a:	4770      	bx	lr

0801a98c <rcl_get_default_domain_id>:
 801a98c:	b530      	push	{r4, r5, lr}
 801a98e:	b083      	sub	sp, #12
 801a990:	2300      	movs	r3, #0
 801a992:	9300      	str	r3, [sp, #0]
 801a994:	b1d0      	cbz	r0, 801a9cc <rcl_get_default_domain_id+0x40>
 801a996:	4604      	mov	r4, r0
 801a998:	4669      	mov	r1, sp
 801a99a:	4815      	ldr	r0, [pc, #84]	@ (801a9f0 <rcl_get_default_domain_id+0x64>)
 801a99c:	f7f5 fd96 	bl	80104cc <rcutils_get_env>
 801a9a0:	4602      	mov	r2, r0
 801a9a2:	b110      	cbz	r0, 801a9aa <rcl_get_default_domain_id+0x1e>
 801a9a4:	2001      	movs	r0, #1
 801a9a6:	b003      	add	sp, #12
 801a9a8:	bd30      	pop	{r4, r5, pc}
 801a9aa:	9b00      	ldr	r3, [sp, #0]
 801a9ac:	b18b      	cbz	r3, 801a9d2 <rcl_get_default_domain_id+0x46>
 801a9ae:	7818      	ldrb	r0, [r3, #0]
 801a9b0:	2800      	cmp	r0, #0
 801a9b2:	d0f8      	beq.n	801a9a6 <rcl_get_default_domain_id+0x1a>
 801a9b4:	a901      	add	r1, sp, #4
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	9201      	str	r2, [sp, #4]
 801a9ba:	f001 faf7 	bl	801bfac <strtoul>
 801a9be:	4605      	mov	r5, r0
 801a9c0:	b150      	cbz	r0, 801a9d8 <rcl_get_default_domain_id+0x4c>
 801a9c2:	1c43      	adds	r3, r0, #1
 801a9c4:	d00d      	beq.n	801a9e2 <rcl_get_default_domain_id+0x56>
 801a9c6:	6025      	str	r5, [r4, #0]
 801a9c8:	2000      	movs	r0, #0
 801a9ca:	e7ec      	b.n	801a9a6 <rcl_get_default_domain_id+0x1a>
 801a9cc:	200b      	movs	r0, #11
 801a9ce:	b003      	add	sp, #12
 801a9d0:	bd30      	pop	{r4, r5, pc}
 801a9d2:	4618      	mov	r0, r3
 801a9d4:	b003      	add	sp, #12
 801a9d6:	bd30      	pop	{r4, r5, pc}
 801a9d8:	9b01      	ldr	r3, [sp, #4]
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d0f2      	beq.n	801a9c6 <rcl_get_default_domain_id+0x3a>
 801a9e0:	e7e0      	b.n	801a9a4 <rcl_get_default_domain_id+0x18>
 801a9e2:	f001 fe23 	bl	801c62c <__errno>
 801a9e6:	6803      	ldr	r3, [r0, #0]
 801a9e8:	2b22      	cmp	r3, #34	@ 0x22
 801a9ea:	d1ec      	bne.n	801a9c6 <rcl_get_default_domain_id+0x3a>
 801a9ec:	e7da      	b.n	801a9a4 <rcl_get_default_domain_id+0x18>
 801a9ee:	bf00      	nop
 801a9f0:	0801dce4 	.word	0x0801dce4

0801a9f4 <rcl_expand_topic_name>:
 801a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9f8:	b08b      	sub	sp, #44	@ 0x2c
 801a9fa:	9306      	str	r3, [sp, #24]
 801a9fc:	2800      	cmp	r0, #0
 801a9fe:	f000 80ad 	beq.w	801ab5c <rcl_expand_topic_name+0x168>
 801aa02:	460e      	mov	r6, r1
 801aa04:	2900      	cmp	r1, #0
 801aa06:	f000 80a9 	beq.w	801ab5c <rcl_expand_topic_name+0x168>
 801aa0a:	4617      	mov	r7, r2
 801aa0c:	2a00      	cmp	r2, #0
 801aa0e:	f000 80a5 	beq.w	801ab5c <rcl_expand_topic_name+0x168>
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	f000 80a2 	beq.w	801ab5c <rcl_expand_topic_name+0x168>
 801aa18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	f000 809e 	beq.w	801ab5c <rcl_expand_topic_name+0x168>
 801aa20:	2200      	movs	r2, #0
 801aa22:	a909      	add	r1, sp, #36	@ 0x24
 801aa24:	4680      	mov	r8, r0
 801aa26:	f000 f949 	bl	801acbc <rcl_validate_topic_name>
 801aa2a:	4604      	mov	r4, r0
 801aa2c:	2800      	cmp	r0, #0
 801aa2e:	f040 8096 	bne.w	801ab5e <rcl_expand_topic_name+0x16a>
 801aa32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	f040 809a 	bne.w	801ab6e <rcl_expand_topic_name+0x17a>
 801aa3a:	4602      	mov	r2, r0
 801aa3c:	a909      	add	r1, sp, #36	@ 0x24
 801aa3e:	4630      	mov	r0, r6
 801aa40:	f7f5 ffe2 	bl	8010a08 <rmw_validate_node_name>
 801aa44:	2800      	cmp	r0, #0
 801aa46:	f040 808e 	bne.w	801ab66 <rcl_expand_topic_name+0x172>
 801aa4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa4c:	2a00      	cmp	r2, #0
 801aa4e:	f040 8093 	bne.w	801ab78 <rcl_expand_topic_name+0x184>
 801aa52:	a909      	add	r1, sp, #36	@ 0x24
 801aa54:	4638      	mov	r0, r7
 801aa56:	f7f5 ffb9 	bl	80109cc <rmw_validate_namespace>
 801aa5a:	2800      	cmp	r0, #0
 801aa5c:	f040 8083 	bne.w	801ab66 <rcl_expand_topic_name+0x172>
 801aa60:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801aa62:	2c00      	cmp	r4, #0
 801aa64:	f040 80ed 	bne.w	801ac42 <rcl_expand_topic_name+0x24e>
 801aa68:	217b      	movs	r1, #123	@ 0x7b
 801aa6a:	4640      	mov	r0, r8
 801aa6c:	f001 fd52 	bl	801c514 <strchr>
 801aa70:	f898 3000 	ldrb.w	r3, [r8]
 801aa74:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa76:	4605      	mov	r5, r0
 801aa78:	f000 809e 	beq.w	801abb8 <rcl_expand_topic_name+0x1c4>
 801aa7c:	2b7e      	cmp	r3, #126	@ 0x7e
 801aa7e:	f040 80a2 	bne.w	801abc6 <rcl_expand_topic_name+0x1d2>
 801aa82:	4638      	mov	r0, r7
 801aa84:	f7e5 fbce 	bl	8000224 <strlen>
 801aa88:	4a82      	ldr	r2, [pc, #520]	@ (801ac94 <rcl_expand_topic_name+0x2a0>)
 801aa8a:	4b83      	ldr	r3, [pc, #524]	@ (801ac98 <rcl_expand_topic_name+0x2a4>)
 801aa8c:	2801      	cmp	r0, #1
 801aa8e:	bf18      	it	ne
 801aa90:	4613      	movne	r3, r2
 801aa92:	9302      	str	r3, [sp, #8]
 801aa94:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801aa9c:	f108 0301 	add.w	r3, r8, #1
 801aaa0:	9305      	str	r3, [sp, #20]
 801aaa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aaa6:	9301      	str	r3, [sp, #4]
 801aaa8:	ab14      	add	r3, sp, #80	@ 0x50
 801aaaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aaac:	f7f5 fd58 	bl	8010560 <rcutils_format_string_limit>
 801aab0:	4682      	mov	sl, r0
 801aab2:	2800      	cmp	r0, #0
 801aab4:	f000 80c7 	beq.w	801ac46 <rcl_expand_topic_name+0x252>
 801aab8:	2d00      	cmp	r5, #0
 801aaba:	f000 80a2 	beq.w	801ac02 <rcl_expand_topic_name+0x20e>
 801aabe:	217b      	movs	r1, #123	@ 0x7b
 801aac0:	f001 fd28 	bl	801c514 <strchr>
 801aac4:	46d1      	mov	r9, sl
 801aac6:	4605      	mov	r5, r0
 801aac8:	9407      	str	r4, [sp, #28]
 801aaca:	46d3      	mov	fp, sl
 801aacc:	464c      	mov	r4, r9
 801aace:	2d00      	cmp	r5, #0
 801aad0:	f000 80be 	beq.w	801ac50 <rcl_expand_topic_name+0x25c>
 801aad4:	217d      	movs	r1, #125	@ 0x7d
 801aad6:	4620      	mov	r0, r4
 801aad8:	f001 fd1c 	bl	801c514 <strchr>
 801aadc:	eba0 0905 	sub.w	r9, r0, r5
 801aae0:	f109 0a01 	add.w	sl, r9, #1
 801aae4:	486d      	ldr	r0, [pc, #436]	@ (801ac9c <rcl_expand_topic_name+0x2a8>)
 801aae6:	4652      	mov	r2, sl
 801aae8:	4629      	mov	r1, r5
 801aaea:	f001 fd20 	bl	801c52e <strncmp>
 801aaee:	2800      	cmp	r0, #0
 801aaf0:	d067      	beq.n	801abc2 <rcl_expand_topic_name+0x1ce>
 801aaf2:	486b      	ldr	r0, [pc, #428]	@ (801aca0 <rcl_expand_topic_name+0x2ac>)
 801aaf4:	4652      	mov	r2, sl
 801aaf6:	4629      	mov	r1, r5
 801aaf8:	f001 fd19 	bl	801c52e <strncmp>
 801aafc:	b130      	cbz	r0, 801ab0c <rcl_expand_topic_name+0x118>
 801aafe:	4869      	ldr	r0, [pc, #420]	@ (801aca4 <rcl_expand_topic_name+0x2b0>)
 801ab00:	4652      	mov	r2, sl
 801ab02:	4629      	mov	r1, r5
 801ab04:	f001 fd13 	bl	801c52e <strncmp>
 801ab08:	2800      	cmp	r0, #0
 801ab0a:	d137      	bne.n	801ab7c <rcl_expand_topic_name+0x188>
 801ab0c:	46b9      	mov	r9, r7
 801ab0e:	ab16      	add	r3, sp, #88	@ 0x58
 801ab10:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ab14:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ab18:	ab14      	add	r3, sp, #80	@ 0x50
 801ab1a:	4628      	mov	r0, r5
 801ab1c:	cb0c      	ldmia	r3, {r2, r3}
 801ab1e:	4651      	mov	r1, sl
 801ab20:	f7f5 fe5a 	bl	80107d8 <rcutils_strndup>
 801ab24:	4605      	mov	r5, r0
 801ab26:	2800      	cmp	r0, #0
 801ab28:	f000 809c 	beq.w	801ac64 <rcl_expand_topic_name+0x270>
 801ab2c:	464a      	mov	r2, r9
 801ab2e:	4620      	mov	r0, r4
 801ab30:	ab14      	add	r3, sp, #80	@ 0x50
 801ab32:	4629      	mov	r1, r5
 801ab34:	f7f5 fd4e 	bl	80105d4 <rcutils_repl_str>
 801ab38:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ab3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	4628      	mov	r0, r5
 801ab40:	4798      	blx	r3
 801ab42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab44:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ab46:	4658      	mov	r0, fp
 801ab48:	4798      	blx	r3
 801ab4a:	2c00      	cmp	r4, #0
 801ab4c:	d07b      	beq.n	801ac46 <rcl_expand_topic_name+0x252>
 801ab4e:	217b      	movs	r1, #123	@ 0x7b
 801ab50:	4620      	mov	r0, r4
 801ab52:	f001 fcdf 	bl	801c514 <strchr>
 801ab56:	46a3      	mov	fp, r4
 801ab58:	4605      	mov	r5, r0
 801ab5a:	e7b8      	b.n	801aace <rcl_expand_topic_name+0xda>
 801ab5c:	240b      	movs	r4, #11
 801ab5e:	4620      	mov	r0, r4
 801ab60:	b00b      	add	sp, #44	@ 0x2c
 801ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab66:	f7fb ffe9 	bl	8016b3c <rcl_convert_rmw_ret_to_rcl_ret>
 801ab6a:	4604      	mov	r4, r0
 801ab6c:	e7f7      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ab6e:	2467      	movs	r4, #103	@ 0x67
 801ab70:	4620      	mov	r0, r4
 801ab72:	b00b      	add	sp, #44	@ 0x2c
 801ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab78:	24c9      	movs	r4, #201	@ 0xc9
 801ab7a:	e7f0      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ab7c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801ab80:	9806      	ldr	r0, [sp, #24]
 801ab82:	1c69      	adds	r1, r5, #1
 801ab84:	f7fe f942 	bl	8018e0c <rcutils_string_map_getn>
 801ab88:	4681      	mov	r9, r0
 801ab8a:	2800      	cmp	r0, #0
 801ab8c:	d1bf      	bne.n	801ab0e <rcl_expand_topic_name+0x11a>
 801ab8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ab90:	aa16      	add	r2, sp, #88	@ 0x58
 801ab92:	6018      	str	r0, [r3, #0]
 801ab94:	ca07      	ldmia	r2, {r0, r1, r2}
 801ab96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ab9a:	ab14      	add	r3, sp, #80	@ 0x50
 801ab9c:	cb0c      	ldmia	r3, {r2, r3}
 801ab9e:	4651      	mov	r1, sl
 801aba0:	4628      	mov	r0, r5
 801aba2:	f7f5 fe19 	bl	80107d8 <rcutils_strndup>
 801aba6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801aba8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801abaa:	4798      	blx	r3
 801abac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801abae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801abb0:	4658      	mov	r0, fp
 801abb2:	2469      	movs	r4, #105	@ 0x69
 801abb4:	4798      	blx	r3
 801abb6:	e7d2      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801abb8:	2800      	cmp	r0, #0
 801abba:	d05b      	beq.n	801ac74 <rcl_expand_topic_name+0x280>
 801abbc:	46c1      	mov	r9, r8
 801abbe:	46a2      	mov	sl, r4
 801abc0:	e782      	b.n	801aac8 <rcl_expand_topic_name+0xd4>
 801abc2:	46b1      	mov	r9, r6
 801abc4:	e7a3      	b.n	801ab0e <rcl_expand_topic_name+0x11a>
 801abc6:	2800      	cmp	r0, #0
 801abc8:	d1f8      	bne.n	801abbc <rcl_expand_topic_name+0x1c8>
 801abca:	4638      	mov	r0, r7
 801abcc:	f7e5 fb2a 	bl	8000224 <strlen>
 801abd0:	4a35      	ldr	r2, [pc, #212]	@ (801aca8 <rcl_expand_topic_name+0x2b4>)
 801abd2:	4b36      	ldr	r3, [pc, #216]	@ (801acac <rcl_expand_topic_name+0x2b8>)
 801abd4:	f8cd 8010 	str.w	r8, [sp, #16]
 801abd8:	2801      	cmp	r0, #1
 801abda:	bf18      	it	ne
 801abdc:	4613      	movne	r3, r2
 801abde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801abe2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801abe6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801abe8:	9703      	str	r7, [sp, #12]
 801abea:	9200      	str	r2, [sp, #0]
 801abec:	ab14      	add	r3, sp, #80	@ 0x50
 801abee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801abf0:	f7f5 fcb6 	bl	8010560 <rcutils_format_string_limit>
 801abf4:	4682      	mov	sl, r0
 801abf6:	4653      	mov	r3, sl
 801abf8:	b32b      	cbz	r3, 801ac46 <rcl_expand_topic_name+0x252>
 801abfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801abfc:	f8c3 a000 	str.w	sl, [r3]
 801ac00:	e7ad      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ac02:	f89a 3000 	ldrb.w	r3, [sl]
 801ac06:	2b2f      	cmp	r3, #47	@ 0x2f
 801ac08:	d0f7      	beq.n	801abfa <rcl_expand_topic_name+0x206>
 801ac0a:	4638      	mov	r0, r7
 801ac0c:	f7e5 fb0a 	bl	8000224 <strlen>
 801ac10:	4a25      	ldr	r2, [pc, #148]	@ (801aca8 <rcl_expand_topic_name+0x2b4>)
 801ac12:	4b26      	ldr	r3, [pc, #152]	@ (801acac <rcl_expand_topic_name+0x2b8>)
 801ac14:	f8cd a010 	str.w	sl, [sp, #16]
 801ac18:	2801      	cmp	r0, #1
 801ac1a:	bf18      	it	ne
 801ac1c:	4613      	movne	r3, r2
 801ac1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ac22:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ac26:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ac28:	9703      	str	r7, [sp, #12]
 801ac2a:	9200      	str	r2, [sp, #0]
 801ac2c:	ab14      	add	r3, sp, #80	@ 0x50
 801ac2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ac30:	f7f5 fc96 	bl	8010560 <rcutils_format_string_limit>
 801ac34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac36:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ac38:	4605      	mov	r5, r0
 801ac3a:	4650      	mov	r0, sl
 801ac3c:	4798      	blx	r3
 801ac3e:	46aa      	mov	sl, r5
 801ac40:	e7d9      	b.n	801abf6 <rcl_expand_topic_name+0x202>
 801ac42:	24ca      	movs	r4, #202	@ 0xca
 801ac44:	e78b      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ac46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ac48:	2300      	movs	r3, #0
 801ac4a:	6013      	str	r3, [r2, #0]
 801ac4c:	240a      	movs	r4, #10
 801ac4e:	e786      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ac50:	465b      	mov	r3, fp
 801ac52:	9c07      	ldr	r4, [sp, #28]
 801ac54:	46da      	mov	sl, fp
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d1d3      	bne.n	801ac02 <rcl_expand_topic_name+0x20e>
 801ac5a:	f898 3000 	ldrb.w	r3, [r8]
 801ac5e:	2b2f      	cmp	r3, #47	@ 0x2f
 801ac60:	d0cb      	beq.n	801abfa <rcl_expand_topic_name+0x206>
 801ac62:	e7b2      	b.n	801abca <rcl_expand_topic_name+0x1d6>
 801ac64:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801ac68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac6a:	6015      	str	r5, [r2, #0]
 801ac6c:	4658      	mov	r0, fp
 801ac6e:	4798      	blx	r3
 801ac70:	240a      	movs	r4, #10
 801ac72:	e774      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ac74:	ab17      	add	r3, sp, #92	@ 0x5c
 801ac76:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ac7a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ac7e:	ab14      	add	r3, sp, #80	@ 0x50
 801ac80:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ac82:	4640      	mov	r0, r8
 801ac84:	f7f5 fd86 	bl	8010794 <rcutils_strdup>
 801ac88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ac8a:	2800      	cmp	r0, #0
 801ac8c:	6018      	str	r0, [r3, #0]
 801ac8e:	bf08      	it	eq
 801ac90:	240a      	moveq	r4, #10
 801ac92:	e764      	b.n	801ab5e <rcl_expand_topic_name+0x16a>
 801ac94:	0801dcf4 	.word	0x0801dcf4
 801ac98:	0801d9f0 	.word	0x0801d9f0
 801ac9c:	0801dcfc 	.word	0x0801dcfc
 801aca0:	0801dd04 	.word	0x0801dd04
 801aca4:	0801dd0c 	.word	0x0801dd0c
 801aca8:	0801d6bc 	.word	0x0801d6bc
 801acac:	0801d6b4 	.word	0x0801d6b4

0801acb0 <rcl_get_default_topic_name_substitutions>:
 801acb0:	2800      	cmp	r0, #0
 801acb2:	bf0c      	ite	eq
 801acb4:	200b      	moveq	r0, #11
 801acb6:	2000      	movne	r0, #0
 801acb8:	4770      	bx	lr
 801acba:	bf00      	nop

0801acbc <rcl_validate_topic_name>:
 801acbc:	2800      	cmp	r0, #0
 801acbe:	d07a      	beq.n	801adb6 <rcl_validate_topic_name+0xfa>
 801acc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801acc4:	460e      	mov	r6, r1
 801acc6:	2900      	cmp	r1, #0
 801acc8:	d07c      	beq.n	801adc4 <rcl_validate_topic_name+0x108>
 801acca:	4617      	mov	r7, r2
 801accc:	4605      	mov	r5, r0
 801acce:	f7e5 faa9 	bl	8000224 <strlen>
 801acd2:	b1b0      	cbz	r0, 801ad02 <rcl_validate_topic_name+0x46>
 801acd4:	f895 9000 	ldrb.w	r9, [r5]
 801acd8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801ae5c <rcl_validate_topic_name+0x1a0>
 801acdc:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801ace0:	f013 0304 	ands.w	r3, r3, #4
 801ace4:	d169      	bne.n	801adba <rcl_validate_topic_name+0xfe>
 801ace6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801acea:	f815 2008 	ldrb.w	r2, [r5, r8]
 801acee:	2a2f      	cmp	r2, #47	@ 0x2f
 801acf0:	d10e      	bne.n	801ad10 <rcl_validate_topic_name+0x54>
 801acf2:	2202      	movs	r2, #2
 801acf4:	6032      	str	r2, [r6, #0]
 801acf6:	b36f      	cbz	r7, 801ad54 <rcl_validate_topic_name+0x98>
 801acf8:	f8c7 8000 	str.w	r8, [r7]
 801acfc:	4618      	mov	r0, r3
 801acfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad02:	2301      	movs	r3, #1
 801ad04:	6033      	str	r3, [r6, #0]
 801ad06:	b32f      	cbz	r7, 801ad54 <rcl_validate_topic_name+0x98>
 801ad08:	2000      	movs	r0, #0
 801ad0a:	6038      	str	r0, [r7, #0]
 801ad0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad10:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801ad14:	461c      	mov	r4, r3
 801ad16:	4619      	mov	r1, r3
 801ad18:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ad1c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ad20:	f1be 0f09 	cmp.w	lr, #9
 801ad24:	d919      	bls.n	801ad5a <rcl_validate_topic_name+0x9e>
 801ad26:	f022 0e20 	bic.w	lr, r2, #32
 801ad2a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801ad2e:	f1be 0f19 	cmp.w	lr, #25
 801ad32:	d912      	bls.n	801ad5a <rcl_validate_topic_name+0x9e>
 801ad34:	2a5f      	cmp	r2, #95	@ 0x5f
 801ad36:	d019      	beq.n	801ad6c <rcl_validate_topic_name+0xb0>
 801ad38:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad3a:	d051      	beq.n	801ade0 <rcl_validate_topic_name+0x124>
 801ad3c:	2a7e      	cmp	r2, #126	@ 0x7e
 801ad3e:	d048      	beq.n	801add2 <rcl_validate_topic_name+0x116>
 801ad40:	2a7b      	cmp	r2, #123	@ 0x7b
 801ad42:	d054      	beq.n	801adee <rcl_validate_topic_name+0x132>
 801ad44:	2a7d      	cmp	r2, #125	@ 0x7d
 801ad46:	d161      	bne.n	801ae0c <rcl_validate_topic_name+0x150>
 801ad48:	2c00      	cmp	r4, #0
 801ad4a:	d155      	bne.n	801adf8 <rcl_validate_topic_name+0x13c>
 801ad4c:	2305      	movs	r3, #5
 801ad4e:	6033      	str	r3, [r6, #0]
 801ad50:	b107      	cbz	r7, 801ad54 <rcl_validate_topic_name+0x98>
 801ad52:	6039      	str	r1, [r7, #0]
 801ad54:	2000      	movs	r0, #0
 801ad56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad5a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ad5e:	0752      	lsls	r2, r2, #29
 801ad60:	d504      	bpl.n	801ad6c <rcl_validate_topic_name+0xb0>
 801ad62:	b11c      	cbz	r4, 801ad6c <rcl_validate_topic_name+0xb0>
 801ad64:	b111      	cbz	r1, 801ad6c <rcl_validate_topic_name+0xb0>
 801ad66:	1e4a      	subs	r2, r1, #1
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d02d      	beq.n	801adc8 <rcl_validate_topic_name+0x10c>
 801ad6c:	3101      	adds	r1, #1
 801ad6e:	4288      	cmp	r0, r1
 801ad70:	d1d2      	bne.n	801ad18 <rcl_validate_topic_name+0x5c>
 801ad72:	2c00      	cmp	r4, #0
 801ad74:	d145      	bne.n	801ae02 <rcl_validate_topic_name+0x146>
 801ad76:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801ad7a:	d04f      	beq.n	801ae1c <rcl_validate_topic_name+0x160>
 801ad7c:	4620      	mov	r0, r4
 801ad7e:	2301      	movs	r3, #1
 801ad80:	e006      	b.n	801ad90 <rcl_validate_topic_name+0xd4>
 801ad82:	428b      	cmp	r3, r1
 801ad84:	f105 0501 	add.w	r5, r5, #1
 801ad88:	f103 0201 	add.w	r2, r3, #1
 801ad8c:	d236      	bcs.n	801adfc <rcl_validate_topic_name+0x140>
 801ad8e:	4613      	mov	r3, r2
 801ad90:	4580      	cmp	r8, r0
 801ad92:	f100 0001 	add.w	r0, r0, #1
 801ad96:	d0f4      	beq.n	801ad82 <rcl_validate_topic_name+0xc6>
 801ad98:	782a      	ldrb	r2, [r5, #0]
 801ad9a:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad9c:	d1f1      	bne.n	801ad82 <rcl_validate_topic_name+0xc6>
 801ad9e:	786a      	ldrb	r2, [r5, #1]
 801ada0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ada4:	0754      	lsls	r4, r2, #29
 801ada6:	d5ec      	bpl.n	801ad82 <rcl_validate_topic_name+0xc6>
 801ada8:	2204      	movs	r2, #4
 801adaa:	6032      	str	r2, [r6, #0]
 801adac:	2f00      	cmp	r7, #0
 801adae:	d0d1      	beq.n	801ad54 <rcl_validate_topic_name+0x98>
 801adb0:	603b      	str	r3, [r7, #0]
 801adb2:	2000      	movs	r0, #0
 801adb4:	e7aa      	b.n	801ad0c <rcl_validate_topic_name+0x50>
 801adb6:	200b      	movs	r0, #11
 801adb8:	4770      	bx	lr
 801adba:	2304      	movs	r3, #4
 801adbc:	6033      	str	r3, [r6, #0]
 801adbe:	2f00      	cmp	r7, #0
 801adc0:	d1a2      	bne.n	801ad08 <rcl_validate_topic_name+0x4c>
 801adc2:	e7c7      	b.n	801ad54 <rcl_validate_topic_name+0x98>
 801adc4:	200b      	movs	r0, #11
 801adc6:	e7a1      	b.n	801ad0c <rcl_validate_topic_name+0x50>
 801adc8:	2309      	movs	r3, #9
 801adca:	6033      	str	r3, [r6, #0]
 801adcc:	2f00      	cmp	r7, #0
 801adce:	d1c0      	bne.n	801ad52 <rcl_validate_topic_name+0x96>
 801add0:	e7c0      	b.n	801ad54 <rcl_validate_topic_name+0x98>
 801add2:	2900      	cmp	r1, #0
 801add4:	d0ca      	beq.n	801ad6c <rcl_validate_topic_name+0xb0>
 801add6:	2306      	movs	r3, #6
 801add8:	6033      	str	r3, [r6, #0]
 801adda:	2f00      	cmp	r7, #0
 801addc:	d1b9      	bne.n	801ad52 <rcl_validate_topic_name+0x96>
 801adde:	e7b9      	b.n	801ad54 <rcl_validate_topic_name+0x98>
 801ade0:	2c00      	cmp	r4, #0
 801ade2:	d0c3      	beq.n	801ad6c <rcl_validate_topic_name+0xb0>
 801ade4:	2308      	movs	r3, #8
 801ade6:	6033      	str	r3, [r6, #0]
 801ade8:	2f00      	cmp	r7, #0
 801adea:	d1b2      	bne.n	801ad52 <rcl_validate_topic_name+0x96>
 801adec:	e7b2      	b.n	801ad54 <rcl_validate_topic_name+0x98>
 801adee:	2c00      	cmp	r4, #0
 801adf0:	d1f8      	bne.n	801ade4 <rcl_validate_topic_name+0x128>
 801adf2:	460b      	mov	r3, r1
 801adf4:	2401      	movs	r4, #1
 801adf6:	e7b9      	b.n	801ad6c <rcl_validate_topic_name+0xb0>
 801adf8:	2400      	movs	r4, #0
 801adfa:	e7b7      	b.n	801ad6c <rcl_validate_topic_name+0xb0>
 801adfc:	2000      	movs	r0, #0
 801adfe:	6030      	str	r0, [r6, #0]
 801ae00:	e784      	b.n	801ad0c <rcl_validate_topic_name+0x50>
 801ae02:	2205      	movs	r2, #5
 801ae04:	6032      	str	r2, [r6, #0]
 801ae06:	2f00      	cmp	r7, #0
 801ae08:	d1d2      	bne.n	801adb0 <rcl_validate_topic_name+0xf4>
 801ae0a:	e7a3      	b.n	801ad54 <rcl_validate_topic_name+0x98>
 801ae0c:	2c00      	cmp	r4, #0
 801ae0e:	bf14      	ite	ne
 801ae10:	2308      	movne	r3, #8
 801ae12:	2303      	moveq	r3, #3
 801ae14:	6033      	str	r3, [r6, #0]
 801ae16:	2f00      	cmp	r7, #0
 801ae18:	d19b      	bne.n	801ad52 <rcl_validate_topic_name+0x96>
 801ae1a:	e79b      	b.n	801ad54 <rcl_validate_topic_name+0x98>
 801ae1c:	2301      	movs	r3, #1
 801ae1e:	e00a      	b.n	801ae36 <rcl_validate_topic_name+0x17a>
 801ae20:	2c01      	cmp	r4, #1
 801ae22:	d013      	beq.n	801ae4c <rcl_validate_topic_name+0x190>
 801ae24:	4299      	cmp	r1, r3
 801ae26:	f104 0401 	add.w	r4, r4, #1
 801ae2a:	f105 0501 	add.w	r5, r5, #1
 801ae2e:	f103 0201 	add.w	r2, r3, #1
 801ae32:	d9e3      	bls.n	801adfc <rcl_validate_topic_name+0x140>
 801ae34:	4613      	mov	r3, r2
 801ae36:	45a0      	cmp	r8, r4
 801ae38:	d0f4      	beq.n	801ae24 <rcl_validate_topic_name+0x168>
 801ae3a:	782a      	ldrb	r2, [r5, #0]
 801ae3c:	2a2f      	cmp	r2, #47	@ 0x2f
 801ae3e:	d1ef      	bne.n	801ae20 <rcl_validate_topic_name+0x164>
 801ae40:	786a      	ldrb	r2, [r5, #1]
 801ae42:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ae46:	0752      	lsls	r2, r2, #29
 801ae48:	d5ec      	bpl.n	801ae24 <rcl_validate_topic_name+0x168>
 801ae4a:	e7ad      	b.n	801ada8 <rcl_validate_topic_name+0xec>
 801ae4c:	2307      	movs	r3, #7
 801ae4e:	6033      	str	r3, [r6, #0]
 801ae50:	2f00      	cmp	r7, #0
 801ae52:	f43f af7f 	beq.w	801ad54 <rcl_validate_topic_name+0x98>
 801ae56:	603c      	str	r4, [r7, #0]
 801ae58:	2000      	movs	r0, #0
 801ae5a:	e757      	b.n	801ad0c <rcl_validate_topic_name+0x50>
 801ae5c:	0801e897 	.word	0x0801e897

0801ae60 <geometry_msgs__msg__Pose__init>:
 801ae60:	b570      	push	{r4, r5, r6, lr}
 801ae62:	4605      	mov	r5, r0
 801ae64:	b1a8      	cbz	r0, 801ae92 <geometry_msgs__msg__Pose__init+0x32>
 801ae66:	f000 f8e3 	bl	801b030 <geometry_msgs__msg__Point__init>
 801ae6a:	4604      	mov	r4, r0
 801ae6c:	b140      	cbz	r0, 801ae80 <geometry_msgs__msg__Pose__init+0x20>
 801ae6e:	f105 0618 	add.w	r6, r5, #24
 801ae72:	4630      	mov	r0, r6
 801ae74:	f000 f824 	bl	801aec0 <geometry_msgs__msg__Quaternion__init>
 801ae78:	4604      	mov	r4, r0
 801ae7a:	b168      	cbz	r0, 801ae98 <geometry_msgs__msg__Pose__init+0x38>
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	bd70      	pop	{r4, r5, r6, pc}
 801ae80:	4628      	mov	r0, r5
 801ae82:	f000 f8d9 	bl	801b038 <geometry_msgs__msg__Point__fini>
 801ae86:	f105 0018 	add.w	r0, r5, #24
 801ae8a:	f000 f82d 	bl	801aee8 <geometry_msgs__msg__Quaternion__fini>
 801ae8e:	4620      	mov	r0, r4
 801ae90:	bd70      	pop	{r4, r5, r6, pc}
 801ae92:	4604      	mov	r4, r0
 801ae94:	4620      	mov	r0, r4
 801ae96:	bd70      	pop	{r4, r5, r6, pc}
 801ae98:	4628      	mov	r0, r5
 801ae9a:	f000 f8cd 	bl	801b038 <geometry_msgs__msg__Point__fini>
 801ae9e:	4630      	mov	r0, r6
 801aea0:	f000 f822 	bl	801aee8 <geometry_msgs__msg__Quaternion__fini>
 801aea4:	e7ea      	b.n	801ae7c <geometry_msgs__msg__Pose__init+0x1c>
 801aea6:	bf00      	nop

0801aea8 <geometry_msgs__msg__Pose__fini>:
 801aea8:	b148      	cbz	r0, 801aebe <geometry_msgs__msg__Pose__fini+0x16>
 801aeaa:	b510      	push	{r4, lr}
 801aeac:	4604      	mov	r4, r0
 801aeae:	f000 f8c3 	bl	801b038 <geometry_msgs__msg__Point__fini>
 801aeb2:	f104 0018 	add.w	r0, r4, #24
 801aeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aeba:	f000 b815 	b.w	801aee8 <geometry_msgs__msg__Quaternion__fini>
 801aebe:	4770      	bx	lr

0801aec0 <geometry_msgs__msg__Quaternion__init>:
 801aec0:	b160      	cbz	r0, 801aedc <geometry_msgs__msg__Quaternion__init+0x1c>
 801aec2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801aee0 <geometry_msgs__msg__Quaternion__init+0x20>
 801aec6:	2200      	movs	r2, #0
 801aec8:	2300      	movs	r3, #0
 801aeca:	e9c0 2300 	strd	r2, r3, [r0]
 801aece:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801aed2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801aed6:	ed80 7b06 	vstr	d7, [r0, #24]
 801aeda:	2001      	movs	r0, #1
 801aedc:	4770      	bx	lr
 801aede:	bf00      	nop
 801aee0:	00000000 	.word	0x00000000
 801aee4:	3ff00000 	.word	0x3ff00000

0801aee8 <geometry_msgs__msg__Quaternion__fini>:
 801aee8:	4770      	bx	lr
 801aeea:	bf00      	nop

0801aeec <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 801aeec:	f000 b8a0 	b.w	801b030 <geometry_msgs__msg__Point__init>

0801aef0 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 801aef0:	f000 b8a2 	b.w	801b038 <geometry_msgs__msg__Point__fini>

0801aef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801aef4:	4b04      	ldr	r3, [pc, #16]	@ (801af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801aef6:	681a      	ldr	r2, [r3, #0]
 801aef8:	b10a      	cbz	r2, 801aefe <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 801aefa:	4803      	ldr	r0, [pc, #12]	@ (801af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801aefc:	4770      	bx	lr
 801aefe:	4a03      	ldr	r2, [pc, #12]	@ (801af0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 801af00:	4801      	ldr	r0, [pc, #4]	@ (801af08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801af02:	6812      	ldr	r2, [r2, #0]
 801af04:	601a      	str	r2, [r3, #0]
 801af06:	4770      	bx	lr
 801af08:	200008cc 	.word	0x200008cc
 801af0c:	20000310 	.word	0x20000310

0801af10 <get_serialized_size_geometry_msgs__msg__Point>:
 801af10:	b1b8      	cbz	r0, 801af42 <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801af12:	b538      	push	{r3, r4, r5, lr}
 801af14:	460d      	mov	r5, r1
 801af16:	4628      	mov	r0, r5
 801af18:	2108      	movs	r1, #8
 801af1a:	f7f3 f81b 	bl	800df54 <ucdr_alignment>
 801af1e:	f105 0308 	add.w	r3, r5, #8
 801af22:	181c      	adds	r4, r3, r0
 801af24:	2108      	movs	r1, #8
 801af26:	4620      	mov	r0, r4
 801af28:	f7f3 f814 	bl	800df54 <ucdr_alignment>
 801af2c:	3008      	adds	r0, #8
 801af2e:	4404      	add	r4, r0
 801af30:	2108      	movs	r1, #8
 801af32:	4620      	mov	r0, r4
 801af34:	f7f3 f80e 	bl	800df54 <ucdr_alignment>
 801af38:	f1c5 0508 	rsb	r5, r5, #8
 801af3c:	4428      	add	r0, r5
 801af3e:	4420      	add	r0, r4
 801af40:	bd38      	pop	{r3, r4, r5, pc}
 801af42:	4770      	bx	lr

0801af44 <_Point__cdr_deserialize>:
 801af44:	b538      	push	{r3, r4, r5, lr}
 801af46:	460c      	mov	r4, r1
 801af48:	b171      	cbz	r1, 801af68 <_Point__cdr_deserialize+0x24>
 801af4a:	4605      	mov	r5, r0
 801af4c:	f7f2 fe16 	bl	800db7c <ucdr_deserialize_double>
 801af50:	f104 0108 	add.w	r1, r4, #8
 801af54:	4628      	mov	r0, r5
 801af56:	f7f2 fe11 	bl	800db7c <ucdr_deserialize_double>
 801af5a:	f104 0110 	add.w	r1, r4, #16
 801af5e:	4628      	mov	r0, r5
 801af60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af64:	f7f2 be0a 	b.w	800db7c <ucdr_deserialize_double>
 801af68:	4608      	mov	r0, r1
 801af6a:	bd38      	pop	{r3, r4, r5, pc}

0801af6c <_Point__cdr_serialize>:
 801af6c:	b198      	cbz	r0, 801af96 <_Point__cdr_serialize+0x2a>
 801af6e:	b538      	push	{r3, r4, r5, lr}
 801af70:	ed90 0b00 	vldr	d0, [r0]
 801af74:	460d      	mov	r5, r1
 801af76:	4604      	mov	r4, r0
 801af78:	4608      	mov	r0, r1
 801af7a:	f7f2 fc5d 	bl	800d838 <ucdr_serialize_double>
 801af7e:	ed94 0b02 	vldr	d0, [r4, #8]
 801af82:	4628      	mov	r0, r5
 801af84:	f7f2 fc58 	bl	800d838 <ucdr_serialize_double>
 801af88:	ed94 0b04 	vldr	d0, [r4, #16]
 801af8c:	4628      	mov	r0, r5
 801af8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af92:	f7f2 bc51 	b.w	800d838 <ucdr_serialize_double>
 801af96:	4770      	bx	lr

0801af98 <_Point__get_serialized_size>:
 801af98:	b198      	cbz	r0, 801afc2 <_Point__get_serialized_size+0x2a>
 801af9a:	b510      	push	{r4, lr}
 801af9c:	2108      	movs	r1, #8
 801af9e:	2000      	movs	r0, #0
 801afa0:	f7f2 ffd8 	bl	800df54 <ucdr_alignment>
 801afa4:	f100 0408 	add.w	r4, r0, #8
 801afa8:	2108      	movs	r1, #8
 801afaa:	4620      	mov	r0, r4
 801afac:	f7f2 ffd2 	bl	800df54 <ucdr_alignment>
 801afb0:	3008      	adds	r0, #8
 801afb2:	4404      	add	r4, r0
 801afb4:	2108      	movs	r1, #8
 801afb6:	4620      	mov	r0, r4
 801afb8:	f7f2 ffcc 	bl	800df54 <ucdr_alignment>
 801afbc:	3008      	adds	r0, #8
 801afbe:	4420      	add	r0, r4
 801afc0:	bd10      	pop	{r4, pc}
 801afc2:	4770      	bx	lr

0801afc4 <_Point__max_serialized_size>:
 801afc4:	b538      	push	{r3, r4, r5, lr}
 801afc6:	2108      	movs	r1, #8
 801afc8:	2000      	movs	r0, #0
 801afca:	f7f2 ffc3 	bl	800df54 <ucdr_alignment>
 801afce:	f100 0508 	add.w	r5, r0, #8
 801afd2:	2108      	movs	r1, #8
 801afd4:	4628      	mov	r0, r5
 801afd6:	f7f2 ffbd 	bl	800df54 <ucdr_alignment>
 801afda:	f100 0408 	add.w	r4, r0, #8
 801afde:	442c      	add	r4, r5
 801afe0:	2108      	movs	r1, #8
 801afe2:	4620      	mov	r0, r4
 801afe4:	f7f2 ffb6 	bl	800df54 <ucdr_alignment>
 801afe8:	3008      	adds	r0, #8
 801afea:	4420      	add	r0, r4
 801afec:	bd38      	pop	{r3, r4, r5, pc}
 801afee:	bf00      	nop

0801aff0 <max_serialized_size_geometry_msgs__msg__Point>:
 801aff0:	b570      	push	{r4, r5, r6, lr}
 801aff2:	2301      	movs	r3, #1
 801aff4:	460c      	mov	r4, r1
 801aff6:	7003      	strb	r3, [r0, #0]
 801aff8:	2108      	movs	r1, #8
 801affa:	4620      	mov	r0, r4
 801affc:	f7f2 ffaa 	bl	800df54 <ucdr_alignment>
 801b000:	f104 0508 	add.w	r5, r4, #8
 801b004:	1946      	adds	r6, r0, r5
 801b006:	2108      	movs	r1, #8
 801b008:	4630      	mov	r0, r6
 801b00a:	f7f2 ffa3 	bl	800df54 <ucdr_alignment>
 801b00e:	f100 0508 	add.w	r5, r0, #8
 801b012:	4435      	add	r5, r6
 801b014:	2108      	movs	r1, #8
 801b016:	4628      	mov	r0, r5
 801b018:	f7f2 ff9c 	bl	800df54 <ucdr_alignment>
 801b01c:	f1c4 0408 	rsb	r4, r4, #8
 801b020:	4420      	add	r0, r4
 801b022:	4428      	add	r0, r5
 801b024:	bd70      	pop	{r4, r5, r6, pc}
 801b026:	bf00      	nop

0801b028 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801b028:	4800      	ldr	r0, [pc, #0]	@ (801b02c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801b02a:	4770      	bx	lr
 801b02c:	200008d8 	.word	0x200008d8

0801b030 <geometry_msgs__msg__Point__init>:
 801b030:	3800      	subs	r0, #0
 801b032:	bf18      	it	ne
 801b034:	2001      	movne	r0, #1
 801b036:	4770      	bx	lr

0801b038 <geometry_msgs__msg__Point__fini>:
 801b038:	4770      	bx	lr
 801b03a:	bf00      	nop

0801b03c <cosf>:
 801b03c:	ee10 3a10 	vmov	r3, s0
 801b040:	b507      	push	{r0, r1, r2, lr}
 801b042:	4a1e      	ldr	r2, [pc, #120]	@ (801b0bc <cosf+0x80>)
 801b044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b048:	4293      	cmp	r3, r2
 801b04a:	d806      	bhi.n	801b05a <cosf+0x1e>
 801b04c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801b0c0 <cosf+0x84>
 801b050:	b003      	add	sp, #12
 801b052:	f85d eb04 	ldr.w	lr, [sp], #4
 801b056:	f000 b87b 	b.w	801b150 <__kernel_cosf>
 801b05a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b05e:	d304      	bcc.n	801b06a <cosf+0x2e>
 801b060:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b064:	b003      	add	sp, #12
 801b066:	f85d fb04 	ldr.w	pc, [sp], #4
 801b06a:	4668      	mov	r0, sp
 801b06c:	f000 f910 	bl	801b290 <__ieee754_rem_pio2f>
 801b070:	f000 0003 	and.w	r0, r0, #3
 801b074:	2801      	cmp	r0, #1
 801b076:	d009      	beq.n	801b08c <cosf+0x50>
 801b078:	2802      	cmp	r0, #2
 801b07a:	d010      	beq.n	801b09e <cosf+0x62>
 801b07c:	b9b0      	cbnz	r0, 801b0ac <cosf+0x70>
 801b07e:	eddd 0a01 	vldr	s1, [sp, #4]
 801b082:	ed9d 0a00 	vldr	s0, [sp]
 801b086:	f000 f863 	bl	801b150 <__kernel_cosf>
 801b08a:	e7eb      	b.n	801b064 <cosf+0x28>
 801b08c:	eddd 0a01 	vldr	s1, [sp, #4]
 801b090:	ed9d 0a00 	vldr	s0, [sp]
 801b094:	f000 f8b4 	bl	801b200 <__kernel_sinf>
 801b098:	eeb1 0a40 	vneg.f32	s0, s0
 801b09c:	e7e2      	b.n	801b064 <cosf+0x28>
 801b09e:	eddd 0a01 	vldr	s1, [sp, #4]
 801b0a2:	ed9d 0a00 	vldr	s0, [sp]
 801b0a6:	f000 f853 	bl	801b150 <__kernel_cosf>
 801b0aa:	e7f5      	b.n	801b098 <cosf+0x5c>
 801b0ac:	eddd 0a01 	vldr	s1, [sp, #4]
 801b0b0:	ed9d 0a00 	vldr	s0, [sp]
 801b0b4:	2001      	movs	r0, #1
 801b0b6:	f000 f8a3 	bl	801b200 <__kernel_sinf>
 801b0ba:	e7d3      	b.n	801b064 <cosf+0x28>
 801b0bc:	3f490fd8 	.word	0x3f490fd8
 801b0c0:	00000000 	.word	0x00000000

0801b0c4 <sinf>:
 801b0c4:	ee10 3a10 	vmov	r3, s0
 801b0c8:	b507      	push	{r0, r1, r2, lr}
 801b0ca:	4a1f      	ldr	r2, [pc, #124]	@ (801b148 <sinf+0x84>)
 801b0cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b0d0:	4293      	cmp	r3, r2
 801b0d2:	d807      	bhi.n	801b0e4 <sinf+0x20>
 801b0d4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801b14c <sinf+0x88>
 801b0d8:	2000      	movs	r0, #0
 801b0da:	b003      	add	sp, #12
 801b0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0e0:	f000 b88e 	b.w	801b200 <__kernel_sinf>
 801b0e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b0e8:	d304      	bcc.n	801b0f4 <sinf+0x30>
 801b0ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b0ee:	b003      	add	sp, #12
 801b0f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0f4:	4668      	mov	r0, sp
 801b0f6:	f000 f8cb 	bl	801b290 <__ieee754_rem_pio2f>
 801b0fa:	f000 0003 	and.w	r0, r0, #3
 801b0fe:	2801      	cmp	r0, #1
 801b100:	d00a      	beq.n	801b118 <sinf+0x54>
 801b102:	2802      	cmp	r0, #2
 801b104:	d00f      	beq.n	801b126 <sinf+0x62>
 801b106:	b9c0      	cbnz	r0, 801b13a <sinf+0x76>
 801b108:	eddd 0a01 	vldr	s1, [sp, #4]
 801b10c:	ed9d 0a00 	vldr	s0, [sp]
 801b110:	2001      	movs	r0, #1
 801b112:	f000 f875 	bl	801b200 <__kernel_sinf>
 801b116:	e7ea      	b.n	801b0ee <sinf+0x2a>
 801b118:	eddd 0a01 	vldr	s1, [sp, #4]
 801b11c:	ed9d 0a00 	vldr	s0, [sp]
 801b120:	f000 f816 	bl	801b150 <__kernel_cosf>
 801b124:	e7e3      	b.n	801b0ee <sinf+0x2a>
 801b126:	eddd 0a01 	vldr	s1, [sp, #4]
 801b12a:	ed9d 0a00 	vldr	s0, [sp]
 801b12e:	2001      	movs	r0, #1
 801b130:	f000 f866 	bl	801b200 <__kernel_sinf>
 801b134:	eeb1 0a40 	vneg.f32	s0, s0
 801b138:	e7d9      	b.n	801b0ee <sinf+0x2a>
 801b13a:	eddd 0a01 	vldr	s1, [sp, #4]
 801b13e:	ed9d 0a00 	vldr	s0, [sp]
 801b142:	f000 f805 	bl	801b150 <__kernel_cosf>
 801b146:	e7f5      	b.n	801b134 <sinf+0x70>
 801b148:	3f490fd8 	.word	0x3f490fd8
 801b14c:	00000000 	.word	0x00000000

0801b150 <__kernel_cosf>:
 801b150:	ee10 3a10 	vmov	r3, s0
 801b154:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b158:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801b15c:	eef0 6a40 	vmov.f32	s13, s0
 801b160:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b164:	d204      	bcs.n	801b170 <__kernel_cosf+0x20>
 801b166:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801b16a:	ee17 2a90 	vmov	r2, s15
 801b16e:	b342      	cbz	r2, 801b1c2 <__kernel_cosf+0x72>
 801b170:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801b174:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801b1e0 <__kernel_cosf+0x90>
 801b178:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801b1e4 <__kernel_cosf+0x94>
 801b17c:	4a1a      	ldr	r2, [pc, #104]	@ (801b1e8 <__kernel_cosf+0x98>)
 801b17e:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b182:	4293      	cmp	r3, r2
 801b184:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b1ec <__kernel_cosf+0x9c>
 801b188:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b18c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801b1f0 <__kernel_cosf+0xa0>
 801b190:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b194:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801b1f4 <__kernel_cosf+0xa4>
 801b198:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b19c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801b1f8 <__kernel_cosf+0xa8>
 801b1a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b1a4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801b1a8:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b1ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b1b0:	eee7 0a06 	vfma.f32	s1, s14, s12
 801b1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b1b8:	d804      	bhi.n	801b1c4 <__kernel_cosf+0x74>
 801b1ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b1be:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b1c2:	4770      	bx	lr
 801b1c4:	4a0d      	ldr	r2, [pc, #52]	@ (801b1fc <__kernel_cosf+0xac>)
 801b1c6:	4293      	cmp	r3, r2
 801b1c8:	bf9a      	itte	ls
 801b1ca:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801b1ce:	ee07 3a10 	vmovls	s14, r3
 801b1d2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801b1d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b1da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1de:	e7ec      	b.n	801b1ba <__kernel_cosf+0x6a>
 801b1e0:	ad47d74e 	.word	0xad47d74e
 801b1e4:	310f74f6 	.word	0x310f74f6
 801b1e8:	3e999999 	.word	0x3e999999
 801b1ec:	b493f27c 	.word	0xb493f27c
 801b1f0:	37d00d01 	.word	0x37d00d01
 801b1f4:	bab60b61 	.word	0xbab60b61
 801b1f8:	3d2aaaab 	.word	0x3d2aaaab
 801b1fc:	3f480000 	.word	0x3f480000

0801b200 <__kernel_sinf>:
 801b200:	ee10 3a10 	vmov	r3, s0
 801b204:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b208:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801b20c:	d204      	bcs.n	801b218 <__kernel_sinf+0x18>
 801b20e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b212:	ee17 3a90 	vmov	r3, s15
 801b216:	b35b      	cbz	r3, 801b270 <__kernel_sinf+0x70>
 801b218:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b21c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801b274 <__kernel_sinf+0x74>
 801b220:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801b278 <__kernel_sinf+0x78>
 801b224:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b228:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801b27c <__kernel_sinf+0x7c>
 801b22c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b230:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801b280 <__kernel_sinf+0x80>
 801b234:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b238:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801b284 <__kernel_sinf+0x84>
 801b23c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801b240:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b244:	b930      	cbnz	r0, 801b254 <__kernel_sinf+0x54>
 801b246:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801b288 <__kernel_sinf+0x88>
 801b24a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b24e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b252:	4770      	bx	lr
 801b254:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801b258:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801b25c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801b260:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801b264:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801b28c <__kernel_sinf+0x8c>
 801b268:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801b26c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801b270:	4770      	bx	lr
 801b272:	bf00      	nop
 801b274:	2f2ec9d3 	.word	0x2f2ec9d3
 801b278:	b2d72f34 	.word	0xb2d72f34
 801b27c:	3638ef1b 	.word	0x3638ef1b
 801b280:	b9500d01 	.word	0xb9500d01
 801b284:	3c088889 	.word	0x3c088889
 801b288:	be2aaaab 	.word	0xbe2aaaab
 801b28c:	3e2aaaab 	.word	0x3e2aaaab

0801b290 <__ieee754_rem_pio2f>:
 801b290:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b292:	ee10 6a10 	vmov	r6, s0
 801b296:	4b88      	ldr	r3, [pc, #544]	@ (801b4b8 <__ieee754_rem_pio2f+0x228>)
 801b298:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801b29c:	429d      	cmp	r5, r3
 801b29e:	b087      	sub	sp, #28
 801b2a0:	4604      	mov	r4, r0
 801b2a2:	d805      	bhi.n	801b2b0 <__ieee754_rem_pio2f+0x20>
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	ed80 0a00 	vstr	s0, [r0]
 801b2aa:	6043      	str	r3, [r0, #4]
 801b2ac:	2000      	movs	r0, #0
 801b2ae:	e022      	b.n	801b2f6 <__ieee754_rem_pio2f+0x66>
 801b2b0:	4b82      	ldr	r3, [pc, #520]	@ (801b4bc <__ieee754_rem_pio2f+0x22c>)
 801b2b2:	429d      	cmp	r5, r3
 801b2b4:	d83a      	bhi.n	801b32c <__ieee754_rem_pio2f+0x9c>
 801b2b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b2ba:	2e00      	cmp	r6, #0
 801b2bc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801b4c0 <__ieee754_rem_pio2f+0x230>
 801b2c0:	4a80      	ldr	r2, [pc, #512]	@ (801b4c4 <__ieee754_rem_pio2f+0x234>)
 801b2c2:	f023 030f 	bic.w	r3, r3, #15
 801b2c6:	dd18      	ble.n	801b2fa <__ieee754_rem_pio2f+0x6a>
 801b2c8:	4293      	cmp	r3, r2
 801b2ca:	ee70 7a47 	vsub.f32	s15, s0, s14
 801b2ce:	bf09      	itett	eq
 801b2d0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801b4c8 <__ieee754_rem_pio2f+0x238>
 801b2d4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801b4cc <__ieee754_rem_pio2f+0x23c>
 801b2d8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801b4d0 <__ieee754_rem_pio2f+0x240>
 801b2dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801b2e0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801b2e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b2e8:	ed80 7a00 	vstr	s14, [r0]
 801b2ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b2f0:	edc0 7a01 	vstr	s15, [r0, #4]
 801b2f4:	2001      	movs	r0, #1
 801b2f6:	b007      	add	sp, #28
 801b2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2fa:	4293      	cmp	r3, r2
 801b2fc:	ee70 7a07 	vadd.f32	s15, s0, s14
 801b300:	bf09      	itett	eq
 801b302:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801b4c8 <__ieee754_rem_pio2f+0x238>
 801b306:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801b4cc <__ieee754_rem_pio2f+0x23c>
 801b30a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801b4d0 <__ieee754_rem_pio2f+0x240>
 801b30e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801b312:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b31a:	ed80 7a00 	vstr	s14, [r0]
 801b31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b322:	edc0 7a01 	vstr	s15, [r0, #4]
 801b326:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b32a:	e7e4      	b.n	801b2f6 <__ieee754_rem_pio2f+0x66>
 801b32c:	4b69      	ldr	r3, [pc, #420]	@ (801b4d4 <__ieee754_rem_pio2f+0x244>)
 801b32e:	429d      	cmp	r5, r3
 801b330:	d873      	bhi.n	801b41a <__ieee754_rem_pio2f+0x18a>
 801b332:	f000 f8dd 	bl	801b4f0 <fabsf>
 801b336:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801b4d8 <__ieee754_rem_pio2f+0x248>
 801b33a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b33e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b34a:	ee17 0a90 	vmov	r0, s15
 801b34e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b4c0 <__ieee754_rem_pio2f+0x230>
 801b352:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b356:	281f      	cmp	r0, #31
 801b358:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b4cc <__ieee754_rem_pio2f+0x23c>
 801b35c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b360:	eeb1 6a47 	vneg.f32	s12, s14
 801b364:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b368:	ee16 1a90 	vmov	r1, s13
 801b36c:	dc09      	bgt.n	801b382 <__ieee754_rem_pio2f+0xf2>
 801b36e:	4a5b      	ldr	r2, [pc, #364]	@ (801b4dc <__ieee754_rem_pio2f+0x24c>)
 801b370:	1e47      	subs	r7, r0, #1
 801b372:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b376:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801b37a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801b37e:	4293      	cmp	r3, r2
 801b380:	d107      	bne.n	801b392 <__ieee754_rem_pio2f+0x102>
 801b382:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801b386:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801b38a:	2a08      	cmp	r2, #8
 801b38c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801b390:	dc14      	bgt.n	801b3bc <__ieee754_rem_pio2f+0x12c>
 801b392:	6021      	str	r1, [r4, #0]
 801b394:	ed94 7a00 	vldr	s14, [r4]
 801b398:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b39c:	2e00      	cmp	r6, #0
 801b39e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b3a2:	ed84 0a01 	vstr	s0, [r4, #4]
 801b3a6:	daa6      	bge.n	801b2f6 <__ieee754_rem_pio2f+0x66>
 801b3a8:	eeb1 7a47 	vneg.f32	s14, s14
 801b3ac:	eeb1 0a40 	vneg.f32	s0, s0
 801b3b0:	ed84 7a00 	vstr	s14, [r4]
 801b3b4:	ed84 0a01 	vstr	s0, [r4, #4]
 801b3b8:	4240      	negs	r0, r0
 801b3ba:	e79c      	b.n	801b2f6 <__ieee754_rem_pio2f+0x66>
 801b3bc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801b4c8 <__ieee754_rem_pio2f+0x238>
 801b3c0:	eef0 6a40 	vmov.f32	s13, s0
 801b3c4:	eee6 6a25 	vfma.f32	s13, s12, s11
 801b3c8:	ee70 7a66 	vsub.f32	s15, s0, s13
 801b3cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b3d0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b4d0 <__ieee754_rem_pio2f+0x240>
 801b3d4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801b3d8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801b3dc:	ee15 2a90 	vmov	r2, s11
 801b3e0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b3e4:	1a5b      	subs	r3, r3, r1
 801b3e6:	2b19      	cmp	r3, #25
 801b3e8:	dc04      	bgt.n	801b3f4 <__ieee754_rem_pio2f+0x164>
 801b3ea:	edc4 5a00 	vstr	s11, [r4]
 801b3ee:	eeb0 0a66 	vmov.f32	s0, s13
 801b3f2:	e7cf      	b.n	801b394 <__ieee754_rem_pio2f+0x104>
 801b3f4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801b4e0 <__ieee754_rem_pio2f+0x250>
 801b3f8:	eeb0 0a66 	vmov.f32	s0, s13
 801b3fc:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b400:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b404:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801b4e4 <__ieee754_rem_pio2f+0x254>
 801b408:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b40c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b410:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b414:	ed84 7a00 	vstr	s14, [r4]
 801b418:	e7bc      	b.n	801b394 <__ieee754_rem_pio2f+0x104>
 801b41a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801b41e:	d306      	bcc.n	801b42e <__ieee754_rem_pio2f+0x19e>
 801b420:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b424:	edc0 7a01 	vstr	s15, [r0, #4]
 801b428:	edc0 7a00 	vstr	s15, [r0]
 801b42c:	e73e      	b.n	801b2ac <__ieee754_rem_pio2f+0x1c>
 801b42e:	15ea      	asrs	r2, r5, #23
 801b430:	3a86      	subs	r2, #134	@ 0x86
 801b432:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b436:	ee07 3a90 	vmov	s15, r3
 801b43a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b43e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801b4e8 <__ieee754_rem_pio2f+0x258>
 801b442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b44a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b44e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b452:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b456:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b45a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b45e:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b462:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b466:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b46e:	edcd 7a05 	vstr	s15, [sp, #20]
 801b472:	d11e      	bne.n	801b4b2 <__ieee754_rem_pio2f+0x222>
 801b474:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b47c:	bf0c      	ite	eq
 801b47e:	2301      	moveq	r3, #1
 801b480:	2302      	movne	r3, #2
 801b482:	491a      	ldr	r1, [pc, #104]	@ (801b4ec <__ieee754_rem_pio2f+0x25c>)
 801b484:	9101      	str	r1, [sp, #4]
 801b486:	2102      	movs	r1, #2
 801b488:	9100      	str	r1, [sp, #0]
 801b48a:	a803      	add	r0, sp, #12
 801b48c:	4621      	mov	r1, r4
 801b48e:	f000 f837 	bl	801b500 <__kernel_rem_pio2f>
 801b492:	2e00      	cmp	r6, #0
 801b494:	f6bf af2f 	bge.w	801b2f6 <__ieee754_rem_pio2f+0x66>
 801b498:	edd4 7a00 	vldr	s15, [r4]
 801b49c:	eef1 7a67 	vneg.f32	s15, s15
 801b4a0:	edc4 7a00 	vstr	s15, [r4]
 801b4a4:	edd4 7a01 	vldr	s15, [r4, #4]
 801b4a8:	eef1 7a67 	vneg.f32	s15, s15
 801b4ac:	edc4 7a01 	vstr	s15, [r4, #4]
 801b4b0:	e782      	b.n	801b3b8 <__ieee754_rem_pio2f+0x128>
 801b4b2:	2303      	movs	r3, #3
 801b4b4:	e7e5      	b.n	801b482 <__ieee754_rem_pio2f+0x1f2>
 801b4b6:	bf00      	nop
 801b4b8:	3f490fd8 	.word	0x3f490fd8
 801b4bc:	4016cbe3 	.word	0x4016cbe3
 801b4c0:	3fc90f80 	.word	0x3fc90f80
 801b4c4:	3fc90fd0 	.word	0x3fc90fd0
 801b4c8:	37354400 	.word	0x37354400
 801b4cc:	37354443 	.word	0x37354443
 801b4d0:	2e85a308 	.word	0x2e85a308
 801b4d4:	43490f80 	.word	0x43490f80
 801b4d8:	3f22f984 	.word	0x3f22f984
 801b4dc:	0801e3e8 	.word	0x0801e3e8
 801b4e0:	2e85a300 	.word	0x2e85a300
 801b4e4:	248d3132 	.word	0x248d3132
 801b4e8:	43800000 	.word	0x43800000
 801b4ec:	0801e468 	.word	0x0801e468

0801b4f0 <fabsf>:
 801b4f0:	ee10 3a10 	vmov	r3, s0
 801b4f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b4f8:	ee00 3a10 	vmov	s0, r3
 801b4fc:	4770      	bx	lr
	...

0801b500 <__kernel_rem_pio2f>:
 801b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b504:	ed2d 8b04 	vpush	{d8-d9}
 801b508:	b0d9      	sub	sp, #356	@ 0x164
 801b50a:	4690      	mov	r8, r2
 801b50c:	9001      	str	r0, [sp, #4]
 801b50e:	4ab6      	ldr	r2, [pc, #728]	@ (801b7e8 <__kernel_rem_pio2f+0x2e8>)
 801b510:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801b512:	f118 0f04 	cmn.w	r8, #4
 801b516:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801b51a:	460f      	mov	r7, r1
 801b51c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801b520:	db26      	blt.n	801b570 <__kernel_rem_pio2f+0x70>
 801b522:	f1b8 0203 	subs.w	r2, r8, #3
 801b526:	bf48      	it	mi
 801b528:	f108 0204 	addmi.w	r2, r8, #4
 801b52c:	10d2      	asrs	r2, r2, #3
 801b52e:	1c55      	adds	r5, r2, #1
 801b530:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b532:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b536:	00e8      	lsls	r0, r5, #3
 801b538:	eba2 060b 	sub.w	r6, r2, fp
 801b53c:	9002      	str	r0, [sp, #8]
 801b53e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801b542:	eb0a 0c0b 	add.w	ip, sl, fp
 801b546:	ac1c      	add	r4, sp, #112	@ 0x70
 801b548:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801b54c:	2000      	movs	r0, #0
 801b54e:	4560      	cmp	r0, ip
 801b550:	dd10      	ble.n	801b574 <__kernel_rem_pio2f+0x74>
 801b552:	a91c      	add	r1, sp, #112	@ 0x70
 801b554:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801b558:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801b55c:	2600      	movs	r6, #0
 801b55e:	4556      	cmp	r6, sl
 801b560:	dc24      	bgt.n	801b5ac <__kernel_rem_pio2f+0xac>
 801b562:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b566:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b56a:	4684      	mov	ip, r0
 801b56c:	2400      	movs	r4, #0
 801b56e:	e016      	b.n	801b59e <__kernel_rem_pio2f+0x9e>
 801b570:	2200      	movs	r2, #0
 801b572:	e7dc      	b.n	801b52e <__kernel_rem_pio2f+0x2e>
 801b574:	42c6      	cmn	r6, r0
 801b576:	bf5d      	ittte	pl
 801b578:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801b57c:	ee07 1a90 	vmovpl	s15, r1
 801b580:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b584:	eef0 7a47 	vmovmi.f32	s15, s14
 801b588:	ece4 7a01 	vstmia	r4!, {s15}
 801b58c:	3001      	adds	r0, #1
 801b58e:	e7de      	b.n	801b54e <__kernel_rem_pio2f+0x4e>
 801b590:	ecfe 6a01 	vldmia	lr!, {s13}
 801b594:	ed3c 7a01 	vldmdb	ip!, {s14}
 801b598:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b59c:	3401      	adds	r4, #1
 801b59e:	455c      	cmp	r4, fp
 801b5a0:	ddf6      	ble.n	801b590 <__kernel_rem_pio2f+0x90>
 801b5a2:	ece9 7a01 	vstmia	r9!, {s15}
 801b5a6:	3601      	adds	r6, #1
 801b5a8:	3004      	adds	r0, #4
 801b5aa:	e7d8      	b.n	801b55e <__kernel_rem_pio2f+0x5e>
 801b5ac:	a908      	add	r1, sp, #32
 801b5ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b5b2:	9104      	str	r1, [sp, #16]
 801b5b4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b5b6:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801b7f4 <__kernel_rem_pio2f+0x2f4>
 801b5ba:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801b7f0 <__kernel_rem_pio2f+0x2f0>
 801b5be:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801b5c2:	9203      	str	r2, [sp, #12]
 801b5c4:	4654      	mov	r4, sl
 801b5c6:	00a2      	lsls	r2, r4, #2
 801b5c8:	9205      	str	r2, [sp, #20]
 801b5ca:	aa58      	add	r2, sp, #352	@ 0x160
 801b5cc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801b5d0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801b5d4:	a944      	add	r1, sp, #272	@ 0x110
 801b5d6:	aa08      	add	r2, sp, #32
 801b5d8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801b5dc:	4694      	mov	ip, r2
 801b5de:	4626      	mov	r6, r4
 801b5e0:	2e00      	cmp	r6, #0
 801b5e2:	dc4c      	bgt.n	801b67e <__kernel_rem_pio2f+0x17e>
 801b5e4:	4628      	mov	r0, r5
 801b5e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b5ea:	f000 f9f1 	bl	801b9d0 <scalbnf>
 801b5ee:	eeb0 8a40 	vmov.f32	s16, s0
 801b5f2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801b5f6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b5fa:	f000 fa4f 	bl	801ba9c <floorf>
 801b5fe:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801b602:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b606:	2d00      	cmp	r5, #0
 801b608:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b60c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b610:	ee17 9a90 	vmov	r9, s15
 801b614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b618:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b61c:	dd41      	ble.n	801b6a2 <__kernel_rem_pio2f+0x1a2>
 801b61e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801b622:	a908      	add	r1, sp, #32
 801b624:	f1c5 0e08 	rsb	lr, r5, #8
 801b628:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801b62c:	fa46 f00e 	asr.w	r0, r6, lr
 801b630:	4481      	add	r9, r0
 801b632:	fa00 f00e 	lsl.w	r0, r0, lr
 801b636:	1a36      	subs	r6, r6, r0
 801b638:	f1c5 0007 	rsb	r0, r5, #7
 801b63c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801b640:	4106      	asrs	r6, r0
 801b642:	2e00      	cmp	r6, #0
 801b644:	dd3c      	ble.n	801b6c0 <__kernel_rem_pio2f+0x1c0>
 801b646:	f04f 0e00 	mov.w	lr, #0
 801b64a:	f109 0901 	add.w	r9, r9, #1
 801b64e:	4670      	mov	r0, lr
 801b650:	4574      	cmp	r4, lr
 801b652:	dc68      	bgt.n	801b726 <__kernel_rem_pio2f+0x226>
 801b654:	2d00      	cmp	r5, #0
 801b656:	dd03      	ble.n	801b660 <__kernel_rem_pio2f+0x160>
 801b658:	2d01      	cmp	r5, #1
 801b65a:	d074      	beq.n	801b746 <__kernel_rem_pio2f+0x246>
 801b65c:	2d02      	cmp	r5, #2
 801b65e:	d07d      	beq.n	801b75c <__kernel_rem_pio2f+0x25c>
 801b660:	2e02      	cmp	r6, #2
 801b662:	d12d      	bne.n	801b6c0 <__kernel_rem_pio2f+0x1c0>
 801b664:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b668:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b66c:	b340      	cbz	r0, 801b6c0 <__kernel_rem_pio2f+0x1c0>
 801b66e:	4628      	mov	r0, r5
 801b670:	9306      	str	r3, [sp, #24]
 801b672:	f000 f9ad 	bl	801b9d0 <scalbnf>
 801b676:	9b06      	ldr	r3, [sp, #24]
 801b678:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b67c:	e020      	b.n	801b6c0 <__kernel_rem_pio2f+0x1c0>
 801b67e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b682:	3e01      	subs	r6, #1
 801b684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b68c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b690:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b694:	ecac 0a01 	vstmia	ip!, {s0}
 801b698:	ed30 0a01 	vldmdb	r0!, {s0}
 801b69c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b6a0:	e79e      	b.n	801b5e0 <__kernel_rem_pio2f+0xe0>
 801b6a2:	d105      	bne.n	801b6b0 <__kernel_rem_pio2f+0x1b0>
 801b6a4:	1e60      	subs	r0, r4, #1
 801b6a6:	a908      	add	r1, sp, #32
 801b6a8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801b6ac:	11f6      	asrs	r6, r6, #7
 801b6ae:	e7c8      	b.n	801b642 <__kernel_rem_pio2f+0x142>
 801b6b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b6b4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6bc:	da31      	bge.n	801b722 <__kernel_rem_pio2f+0x222>
 801b6be:	2600      	movs	r6, #0
 801b6c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c8:	f040 8098 	bne.w	801b7fc <__kernel_rem_pio2f+0x2fc>
 801b6cc:	1e60      	subs	r0, r4, #1
 801b6ce:	2200      	movs	r2, #0
 801b6d0:	4550      	cmp	r0, sl
 801b6d2:	da4b      	bge.n	801b76c <__kernel_rem_pio2f+0x26c>
 801b6d4:	2a00      	cmp	r2, #0
 801b6d6:	d065      	beq.n	801b7a4 <__kernel_rem_pio2f+0x2a4>
 801b6d8:	3c01      	subs	r4, #1
 801b6da:	ab08      	add	r3, sp, #32
 801b6dc:	3d08      	subs	r5, #8
 801b6de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d0f8      	beq.n	801b6d8 <__kernel_rem_pio2f+0x1d8>
 801b6e6:	4628      	mov	r0, r5
 801b6e8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b6ec:	f000 f970 	bl	801b9d0 <scalbnf>
 801b6f0:	1c63      	adds	r3, r4, #1
 801b6f2:	aa44      	add	r2, sp, #272	@ 0x110
 801b6f4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801b7f4 <__kernel_rem_pio2f+0x2f4>
 801b6f8:	0099      	lsls	r1, r3, #2
 801b6fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b6fe:	4623      	mov	r3, r4
 801b700:	2b00      	cmp	r3, #0
 801b702:	f280 80a9 	bge.w	801b858 <__kernel_rem_pio2f+0x358>
 801b706:	4623      	mov	r3, r4
 801b708:	2b00      	cmp	r3, #0
 801b70a:	f2c0 80c7 	blt.w	801b89c <__kernel_rem_pio2f+0x39c>
 801b70e:	aa44      	add	r2, sp, #272	@ 0x110
 801b710:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b714:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801b7ec <__kernel_rem_pio2f+0x2ec>
 801b718:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b71c:	2000      	movs	r0, #0
 801b71e:	1ae2      	subs	r2, r4, r3
 801b720:	e0b1      	b.n	801b886 <__kernel_rem_pio2f+0x386>
 801b722:	2602      	movs	r6, #2
 801b724:	e78f      	b.n	801b646 <__kernel_rem_pio2f+0x146>
 801b726:	f852 1b04 	ldr.w	r1, [r2], #4
 801b72a:	b948      	cbnz	r0, 801b740 <__kernel_rem_pio2f+0x240>
 801b72c:	b121      	cbz	r1, 801b738 <__kernel_rem_pio2f+0x238>
 801b72e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801b732:	f842 1c04 	str.w	r1, [r2, #-4]
 801b736:	2101      	movs	r1, #1
 801b738:	f10e 0e01 	add.w	lr, lr, #1
 801b73c:	4608      	mov	r0, r1
 801b73e:	e787      	b.n	801b650 <__kernel_rem_pio2f+0x150>
 801b740:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801b744:	e7f5      	b.n	801b732 <__kernel_rem_pio2f+0x232>
 801b746:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801b74a:	aa08      	add	r2, sp, #32
 801b74c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b750:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801b754:	a908      	add	r1, sp, #32
 801b756:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801b75a:	e781      	b.n	801b660 <__kernel_rem_pio2f+0x160>
 801b75c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801b760:	aa08      	add	r2, sp, #32
 801b762:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b766:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b76a:	e7f3      	b.n	801b754 <__kernel_rem_pio2f+0x254>
 801b76c:	a908      	add	r1, sp, #32
 801b76e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b772:	3801      	subs	r0, #1
 801b774:	430a      	orrs	r2, r1
 801b776:	e7ab      	b.n	801b6d0 <__kernel_rem_pio2f+0x1d0>
 801b778:	3201      	adds	r2, #1
 801b77a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801b77e:	2e00      	cmp	r6, #0
 801b780:	d0fa      	beq.n	801b778 <__kernel_rem_pio2f+0x278>
 801b782:	9905      	ldr	r1, [sp, #20]
 801b784:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801b788:	eb0d 0001 	add.w	r0, sp, r1
 801b78c:	18e6      	adds	r6, r4, r3
 801b78e:	a91c      	add	r1, sp, #112	@ 0x70
 801b790:	f104 0c01 	add.w	ip, r4, #1
 801b794:	384c      	subs	r0, #76	@ 0x4c
 801b796:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801b79a:	4422      	add	r2, r4
 801b79c:	4562      	cmp	r2, ip
 801b79e:	da04      	bge.n	801b7aa <__kernel_rem_pio2f+0x2aa>
 801b7a0:	4614      	mov	r4, r2
 801b7a2:	e710      	b.n	801b5c6 <__kernel_rem_pio2f+0xc6>
 801b7a4:	9804      	ldr	r0, [sp, #16]
 801b7a6:	2201      	movs	r2, #1
 801b7a8:	e7e7      	b.n	801b77a <__kernel_rem_pio2f+0x27a>
 801b7aa:	9903      	ldr	r1, [sp, #12]
 801b7ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b7b0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b7b4:	9105      	str	r1, [sp, #20]
 801b7b6:	ee07 1a90 	vmov	s15, r1
 801b7ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7be:	2400      	movs	r4, #0
 801b7c0:	ece6 7a01 	vstmia	r6!, {s15}
 801b7c4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b7c8:	46b1      	mov	r9, r6
 801b7ca:	455c      	cmp	r4, fp
 801b7cc:	dd04      	ble.n	801b7d8 <__kernel_rem_pio2f+0x2d8>
 801b7ce:	ece0 7a01 	vstmia	r0!, {s15}
 801b7d2:	f10c 0c01 	add.w	ip, ip, #1
 801b7d6:	e7e1      	b.n	801b79c <__kernel_rem_pio2f+0x29c>
 801b7d8:	ecfe 6a01 	vldmia	lr!, {s13}
 801b7dc:	ed39 7a01 	vldmdb	r9!, {s14}
 801b7e0:	3401      	adds	r4, #1
 801b7e2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b7e6:	e7f0      	b.n	801b7ca <__kernel_rem_pio2f+0x2ca>
 801b7e8:	0801e7ac 	.word	0x0801e7ac
 801b7ec:	0801e780 	.word	0x0801e780
 801b7f0:	43800000 	.word	0x43800000
 801b7f4:	3b800000 	.word	0x3b800000
 801b7f8:	00000000 	.word	0x00000000
 801b7fc:	9b02      	ldr	r3, [sp, #8]
 801b7fe:	eeb0 0a48 	vmov.f32	s0, s16
 801b802:	eba3 0008 	sub.w	r0, r3, r8
 801b806:	f000 f8e3 	bl	801b9d0 <scalbnf>
 801b80a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801b7f0 <__kernel_rem_pio2f+0x2f0>
 801b80e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b816:	db19      	blt.n	801b84c <__kernel_rem_pio2f+0x34c>
 801b818:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801b7f4 <__kernel_rem_pio2f+0x2f4>
 801b81c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b820:	aa08      	add	r2, sp, #32
 801b822:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b826:	3508      	adds	r5, #8
 801b828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b82c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b834:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b838:	ee10 3a10 	vmov	r3, s0
 801b83c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b840:	ee17 3a90 	vmov	r3, s15
 801b844:	3401      	adds	r4, #1
 801b846:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b84a:	e74c      	b.n	801b6e6 <__kernel_rem_pio2f+0x1e6>
 801b84c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b850:	aa08      	add	r2, sp, #32
 801b852:	ee10 3a10 	vmov	r3, s0
 801b856:	e7f6      	b.n	801b846 <__kernel_rem_pio2f+0x346>
 801b858:	a808      	add	r0, sp, #32
 801b85a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b85e:	9001      	str	r0, [sp, #4]
 801b860:	ee07 0a90 	vmov	s15, r0
 801b864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b868:	3b01      	subs	r3, #1
 801b86a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b86e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b872:	ed62 7a01 	vstmdb	r2!, {s15}
 801b876:	e743      	b.n	801b700 <__kernel_rem_pio2f+0x200>
 801b878:	ecfc 6a01 	vldmia	ip!, {s13}
 801b87c:	ecb5 7a01 	vldmia	r5!, {s14}
 801b880:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b884:	3001      	adds	r0, #1
 801b886:	4550      	cmp	r0, sl
 801b888:	dc01      	bgt.n	801b88e <__kernel_rem_pio2f+0x38e>
 801b88a:	4290      	cmp	r0, r2
 801b88c:	ddf4      	ble.n	801b878 <__kernel_rem_pio2f+0x378>
 801b88e:	a858      	add	r0, sp, #352	@ 0x160
 801b890:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b894:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801b898:	3b01      	subs	r3, #1
 801b89a:	e735      	b.n	801b708 <__kernel_rem_pio2f+0x208>
 801b89c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b89e:	2b02      	cmp	r3, #2
 801b8a0:	dc09      	bgt.n	801b8b6 <__kernel_rem_pio2f+0x3b6>
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	dc27      	bgt.n	801b8f6 <__kernel_rem_pio2f+0x3f6>
 801b8a6:	d040      	beq.n	801b92a <__kernel_rem_pio2f+0x42a>
 801b8a8:	f009 0007 	and.w	r0, r9, #7
 801b8ac:	b059      	add	sp, #356	@ 0x164
 801b8ae:	ecbd 8b04 	vpop	{d8-d9}
 801b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8b6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b8b8:	2b03      	cmp	r3, #3
 801b8ba:	d1f5      	bne.n	801b8a8 <__kernel_rem_pio2f+0x3a8>
 801b8bc:	aa30      	add	r2, sp, #192	@ 0xc0
 801b8be:	1f0b      	subs	r3, r1, #4
 801b8c0:	4413      	add	r3, r2
 801b8c2:	461a      	mov	r2, r3
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	2800      	cmp	r0, #0
 801b8c8:	dc50      	bgt.n	801b96c <__kernel_rem_pio2f+0x46c>
 801b8ca:	4622      	mov	r2, r4
 801b8cc:	2a01      	cmp	r2, #1
 801b8ce:	dc5d      	bgt.n	801b98c <__kernel_rem_pio2f+0x48c>
 801b8d0:	ab30      	add	r3, sp, #192	@ 0xc0
 801b8d2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b8d6:	440b      	add	r3, r1
 801b8d8:	2c01      	cmp	r4, #1
 801b8da:	dc67      	bgt.n	801b9ac <__kernel_rem_pio2f+0x4ac>
 801b8dc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b8e0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801b8e4:	2e00      	cmp	r6, #0
 801b8e6:	d167      	bne.n	801b9b8 <__kernel_rem_pio2f+0x4b8>
 801b8e8:	edc7 6a00 	vstr	s13, [r7]
 801b8ec:	ed87 7a01 	vstr	s14, [r7, #4]
 801b8f0:	edc7 7a02 	vstr	s15, [r7, #8]
 801b8f4:	e7d8      	b.n	801b8a8 <__kernel_rem_pio2f+0x3a8>
 801b8f6:	ab30      	add	r3, sp, #192	@ 0xc0
 801b8f8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b8fc:	440b      	add	r3, r1
 801b8fe:	4622      	mov	r2, r4
 801b900:	2a00      	cmp	r2, #0
 801b902:	da24      	bge.n	801b94e <__kernel_rem_pio2f+0x44e>
 801b904:	b34e      	cbz	r6, 801b95a <__kernel_rem_pio2f+0x45a>
 801b906:	eef1 7a47 	vneg.f32	s15, s14
 801b90a:	edc7 7a00 	vstr	s15, [r7]
 801b90e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801b912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b916:	aa31      	add	r2, sp, #196	@ 0xc4
 801b918:	2301      	movs	r3, #1
 801b91a:	429c      	cmp	r4, r3
 801b91c:	da20      	bge.n	801b960 <__kernel_rem_pio2f+0x460>
 801b91e:	b10e      	cbz	r6, 801b924 <__kernel_rem_pio2f+0x424>
 801b920:	eef1 7a67 	vneg.f32	s15, s15
 801b924:	edc7 7a01 	vstr	s15, [r7, #4]
 801b928:	e7be      	b.n	801b8a8 <__kernel_rem_pio2f+0x3a8>
 801b92a:	ab30      	add	r3, sp, #192	@ 0xc0
 801b92c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801b7f8 <__kernel_rem_pio2f+0x2f8>
 801b930:	440b      	add	r3, r1
 801b932:	2c00      	cmp	r4, #0
 801b934:	da05      	bge.n	801b942 <__kernel_rem_pio2f+0x442>
 801b936:	b10e      	cbz	r6, 801b93c <__kernel_rem_pio2f+0x43c>
 801b938:	eef1 7a67 	vneg.f32	s15, s15
 801b93c:	edc7 7a00 	vstr	s15, [r7]
 801b940:	e7b2      	b.n	801b8a8 <__kernel_rem_pio2f+0x3a8>
 801b942:	ed33 7a01 	vldmdb	r3!, {s14}
 801b946:	3c01      	subs	r4, #1
 801b948:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b94c:	e7f1      	b.n	801b932 <__kernel_rem_pio2f+0x432>
 801b94e:	ed73 7a01 	vldmdb	r3!, {s15}
 801b952:	3a01      	subs	r2, #1
 801b954:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b958:	e7d2      	b.n	801b900 <__kernel_rem_pio2f+0x400>
 801b95a:	eef0 7a47 	vmov.f32	s15, s14
 801b95e:	e7d4      	b.n	801b90a <__kernel_rem_pio2f+0x40a>
 801b960:	ecb2 7a01 	vldmia	r2!, {s14}
 801b964:	3301      	adds	r3, #1
 801b966:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b96a:	e7d6      	b.n	801b91a <__kernel_rem_pio2f+0x41a>
 801b96c:	ed72 7a01 	vldmdb	r2!, {s15}
 801b970:	edd2 6a01 	vldr	s13, [r2, #4]
 801b974:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b978:	3801      	subs	r0, #1
 801b97a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b97e:	ed82 7a00 	vstr	s14, [r2]
 801b982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b986:	edc2 7a01 	vstr	s15, [r2, #4]
 801b98a:	e79c      	b.n	801b8c6 <__kernel_rem_pio2f+0x3c6>
 801b98c:	ed73 7a01 	vldmdb	r3!, {s15}
 801b990:	edd3 6a01 	vldr	s13, [r3, #4]
 801b994:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b998:	3a01      	subs	r2, #1
 801b99a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b99e:	ed83 7a00 	vstr	s14, [r3]
 801b9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b9a6:	edc3 7a01 	vstr	s15, [r3, #4]
 801b9aa:	e78f      	b.n	801b8cc <__kernel_rem_pio2f+0x3cc>
 801b9ac:	ed33 7a01 	vldmdb	r3!, {s14}
 801b9b0:	3c01      	subs	r4, #1
 801b9b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b9b6:	e78f      	b.n	801b8d8 <__kernel_rem_pio2f+0x3d8>
 801b9b8:	eef1 6a66 	vneg.f32	s13, s13
 801b9bc:	eeb1 7a47 	vneg.f32	s14, s14
 801b9c0:	edc7 6a00 	vstr	s13, [r7]
 801b9c4:	ed87 7a01 	vstr	s14, [r7, #4]
 801b9c8:	eef1 7a67 	vneg.f32	s15, s15
 801b9cc:	e790      	b.n	801b8f0 <__kernel_rem_pio2f+0x3f0>
 801b9ce:	bf00      	nop

0801b9d0 <scalbnf>:
 801b9d0:	ee10 3a10 	vmov	r3, s0
 801b9d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801b9d8:	d02b      	beq.n	801ba32 <scalbnf+0x62>
 801b9da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801b9de:	d302      	bcc.n	801b9e6 <scalbnf+0x16>
 801b9e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b9e4:	4770      	bx	lr
 801b9e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801b9ea:	d123      	bne.n	801ba34 <scalbnf+0x64>
 801b9ec:	4b24      	ldr	r3, [pc, #144]	@ (801ba80 <scalbnf+0xb0>)
 801b9ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801ba84 <scalbnf+0xb4>
 801b9f2:	4298      	cmp	r0, r3
 801b9f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b9f8:	db17      	blt.n	801ba2a <scalbnf+0x5a>
 801b9fa:	ee10 3a10 	vmov	r3, s0
 801b9fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ba02:	3a19      	subs	r2, #25
 801ba04:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ba08:	4288      	cmp	r0, r1
 801ba0a:	dd15      	ble.n	801ba38 <scalbnf+0x68>
 801ba0c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801ba88 <scalbnf+0xb8>
 801ba10:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801ba8c <scalbnf+0xbc>
 801ba14:	ee10 3a10 	vmov	r3, s0
 801ba18:	eeb0 7a67 	vmov.f32	s14, s15
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	bfb8      	it	lt
 801ba20:	eef0 7a66 	vmovlt.f32	s15, s13
 801ba24:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ba28:	4770      	bx	lr
 801ba2a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ba90 <scalbnf+0xc0>
 801ba2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ba32:	4770      	bx	lr
 801ba34:	0dd2      	lsrs	r2, r2, #23
 801ba36:	e7e5      	b.n	801ba04 <scalbnf+0x34>
 801ba38:	4410      	add	r0, r2
 801ba3a:	28fe      	cmp	r0, #254	@ 0xfe
 801ba3c:	dce6      	bgt.n	801ba0c <scalbnf+0x3c>
 801ba3e:	2800      	cmp	r0, #0
 801ba40:	dd06      	ble.n	801ba50 <scalbnf+0x80>
 801ba42:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ba46:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ba4a:	ee00 3a10 	vmov	s0, r3
 801ba4e:	4770      	bx	lr
 801ba50:	f110 0f16 	cmn.w	r0, #22
 801ba54:	da09      	bge.n	801ba6a <scalbnf+0x9a>
 801ba56:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801ba90 <scalbnf+0xc0>
 801ba5a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801ba94 <scalbnf+0xc4>
 801ba5e:	ee10 3a10 	vmov	r3, s0
 801ba62:	eeb0 7a67 	vmov.f32	s14, s15
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	e7d9      	b.n	801ba1e <scalbnf+0x4e>
 801ba6a:	3019      	adds	r0, #25
 801ba6c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ba70:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ba74:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801ba98 <scalbnf+0xc8>
 801ba78:	ee07 3a90 	vmov	s15, r3
 801ba7c:	e7d7      	b.n	801ba2e <scalbnf+0x5e>
 801ba7e:	bf00      	nop
 801ba80:	ffff3cb0 	.word	0xffff3cb0
 801ba84:	4c000000 	.word	0x4c000000
 801ba88:	7149f2ca 	.word	0x7149f2ca
 801ba8c:	f149f2ca 	.word	0xf149f2ca
 801ba90:	0da24260 	.word	0x0da24260
 801ba94:	8da24260 	.word	0x8da24260
 801ba98:	33000000 	.word	0x33000000

0801ba9c <floorf>:
 801ba9c:	ee10 3a10 	vmov	r3, s0
 801baa0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801baa4:	3a7f      	subs	r2, #127	@ 0x7f
 801baa6:	2a16      	cmp	r2, #22
 801baa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801baac:	dc2b      	bgt.n	801bb06 <floorf+0x6a>
 801baae:	2a00      	cmp	r2, #0
 801bab0:	da12      	bge.n	801bad8 <floorf+0x3c>
 801bab2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801bb18 <floorf+0x7c>
 801bab6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801baba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bac2:	dd06      	ble.n	801bad2 <floorf+0x36>
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	da24      	bge.n	801bb12 <floorf+0x76>
 801bac8:	2900      	cmp	r1, #0
 801baca:	4b14      	ldr	r3, [pc, #80]	@ (801bb1c <floorf+0x80>)
 801bacc:	bf08      	it	eq
 801bace:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801bad2:	ee00 3a10 	vmov	s0, r3
 801bad6:	4770      	bx	lr
 801bad8:	4911      	ldr	r1, [pc, #68]	@ (801bb20 <floorf+0x84>)
 801bada:	4111      	asrs	r1, r2
 801badc:	420b      	tst	r3, r1
 801bade:	d0fa      	beq.n	801bad6 <floorf+0x3a>
 801bae0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801bb18 <floorf+0x7c>
 801bae4:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bae8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801baec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baf0:	ddef      	ble.n	801bad2 <floorf+0x36>
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	bfbe      	ittt	lt
 801baf6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801bafa:	fa40 f202 	asrlt.w	r2, r0, r2
 801bafe:	189b      	addlt	r3, r3, r2
 801bb00:	ea23 0301 	bic.w	r3, r3, r1
 801bb04:	e7e5      	b.n	801bad2 <floorf+0x36>
 801bb06:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801bb0a:	d3e4      	bcc.n	801bad6 <floorf+0x3a>
 801bb0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bb10:	4770      	bx	lr
 801bb12:	2300      	movs	r3, #0
 801bb14:	e7dd      	b.n	801bad2 <floorf+0x36>
 801bb16:	bf00      	nop
 801bb18:	7149f2ca 	.word	0x7149f2ca
 801bb1c:	bf800000 	.word	0xbf800000
 801bb20:	007fffff 	.word	0x007fffff

0801bb24 <calloc>:
 801bb24:	4b02      	ldr	r3, [pc, #8]	@ (801bb30 <calloc+0xc>)
 801bb26:	460a      	mov	r2, r1
 801bb28:	4601      	mov	r1, r0
 801bb2a:	6818      	ldr	r0, [r3, #0]
 801bb2c:	f000 b802 	b.w	801bb34 <_calloc_r>
 801bb30:	2000090c 	.word	0x2000090c

0801bb34 <_calloc_r>:
 801bb34:	b570      	push	{r4, r5, r6, lr}
 801bb36:	fba1 5402 	umull	r5, r4, r1, r2
 801bb3a:	b934      	cbnz	r4, 801bb4a <_calloc_r+0x16>
 801bb3c:	4629      	mov	r1, r5
 801bb3e:	f000 f899 	bl	801bc74 <_malloc_r>
 801bb42:	4606      	mov	r6, r0
 801bb44:	b928      	cbnz	r0, 801bb52 <_calloc_r+0x1e>
 801bb46:	4630      	mov	r0, r6
 801bb48:	bd70      	pop	{r4, r5, r6, pc}
 801bb4a:	220c      	movs	r2, #12
 801bb4c:	6002      	str	r2, [r0, #0]
 801bb4e:	2600      	movs	r6, #0
 801bb50:	e7f9      	b.n	801bb46 <_calloc_r+0x12>
 801bb52:	462a      	mov	r2, r5
 801bb54:	4621      	mov	r1, r4
 801bb56:	f000 fcd5 	bl	801c504 <memset>
 801bb5a:	e7f4      	b.n	801bb46 <_calloc_r+0x12>

0801bb5c <exit>:
 801bb5c:	b508      	push	{r3, lr}
 801bb5e:	4b06      	ldr	r3, [pc, #24]	@ (801bb78 <exit+0x1c>)
 801bb60:	4604      	mov	r4, r0
 801bb62:	b113      	cbz	r3, 801bb6a <exit+0xe>
 801bb64:	2100      	movs	r1, #0
 801bb66:	f3af 8000 	nop.w
 801bb6a:	4b04      	ldr	r3, [pc, #16]	@ (801bb7c <exit+0x20>)
 801bb6c:	681b      	ldr	r3, [r3, #0]
 801bb6e:	b103      	cbz	r3, 801bb72 <exit+0x16>
 801bb70:	4798      	blx	r3
 801bb72:	4620      	mov	r0, r4
 801bb74:	f7e8 f9da 	bl	8003f2c <_exit>
 801bb78:	00000000 	.word	0x00000000
 801bb7c:	20011cdc 	.word	0x20011cdc

0801bb80 <getenv>:
 801bb80:	b507      	push	{r0, r1, r2, lr}
 801bb82:	4b04      	ldr	r3, [pc, #16]	@ (801bb94 <getenv+0x14>)
 801bb84:	4601      	mov	r1, r0
 801bb86:	aa01      	add	r2, sp, #4
 801bb88:	6818      	ldr	r0, [r3, #0]
 801bb8a:	f000 f805 	bl	801bb98 <_findenv_r>
 801bb8e:	b003      	add	sp, #12
 801bb90:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb94:	2000090c 	.word	0x2000090c

0801bb98 <_findenv_r>:
 801bb98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb9c:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801bc0c <_findenv_r+0x74>
 801bba0:	4606      	mov	r6, r0
 801bba2:	4689      	mov	r9, r1
 801bba4:	4617      	mov	r7, r2
 801bba6:	f000 fda3 	bl	801c6f0 <__env_lock>
 801bbaa:	f8da 4000 	ldr.w	r4, [sl]
 801bbae:	b134      	cbz	r4, 801bbbe <_findenv_r+0x26>
 801bbb0:	464b      	mov	r3, r9
 801bbb2:	4698      	mov	r8, r3
 801bbb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bbb8:	b13a      	cbz	r2, 801bbca <_findenv_r+0x32>
 801bbba:	2a3d      	cmp	r2, #61	@ 0x3d
 801bbbc:	d1f9      	bne.n	801bbb2 <_findenv_r+0x1a>
 801bbbe:	4630      	mov	r0, r6
 801bbc0:	f000 fd9c 	bl	801c6fc <__env_unlock>
 801bbc4:	2000      	movs	r0, #0
 801bbc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbca:	eba8 0809 	sub.w	r8, r8, r9
 801bbce:	46a3      	mov	fp, r4
 801bbd0:	f854 0b04 	ldr.w	r0, [r4], #4
 801bbd4:	2800      	cmp	r0, #0
 801bbd6:	d0f2      	beq.n	801bbbe <_findenv_r+0x26>
 801bbd8:	4642      	mov	r2, r8
 801bbda:	4649      	mov	r1, r9
 801bbdc:	f000 fca7 	bl	801c52e <strncmp>
 801bbe0:	2800      	cmp	r0, #0
 801bbe2:	d1f4      	bne.n	801bbce <_findenv_r+0x36>
 801bbe4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801bbe8:	eb03 0508 	add.w	r5, r3, r8
 801bbec:	f813 3008 	ldrb.w	r3, [r3, r8]
 801bbf0:	2b3d      	cmp	r3, #61	@ 0x3d
 801bbf2:	d1ec      	bne.n	801bbce <_findenv_r+0x36>
 801bbf4:	f8da 3000 	ldr.w	r3, [sl]
 801bbf8:	ebab 0303 	sub.w	r3, fp, r3
 801bbfc:	109b      	asrs	r3, r3, #2
 801bbfe:	4630      	mov	r0, r6
 801bc00:	603b      	str	r3, [r7, #0]
 801bc02:	f000 fd7b 	bl	801c6fc <__env_unlock>
 801bc06:	1c68      	adds	r0, r5, #1
 801bc08:	e7dd      	b.n	801bbc6 <_findenv_r+0x2e>
 801bc0a:	bf00      	nop
 801bc0c:	20000004 	.word	0x20000004

0801bc10 <malloc>:
 801bc10:	4b02      	ldr	r3, [pc, #8]	@ (801bc1c <malloc+0xc>)
 801bc12:	4601      	mov	r1, r0
 801bc14:	6818      	ldr	r0, [r3, #0]
 801bc16:	f000 b82d 	b.w	801bc74 <_malloc_r>
 801bc1a:	bf00      	nop
 801bc1c:	2000090c 	.word	0x2000090c

0801bc20 <free>:
 801bc20:	4b02      	ldr	r3, [pc, #8]	@ (801bc2c <free+0xc>)
 801bc22:	4601      	mov	r1, r0
 801bc24:	6818      	ldr	r0, [r3, #0]
 801bc26:	f000 bd6f 	b.w	801c708 <_free_r>
 801bc2a:	bf00      	nop
 801bc2c:	2000090c 	.word	0x2000090c

0801bc30 <sbrk_aligned>:
 801bc30:	b570      	push	{r4, r5, r6, lr}
 801bc32:	4e0f      	ldr	r6, [pc, #60]	@ (801bc70 <sbrk_aligned+0x40>)
 801bc34:	460c      	mov	r4, r1
 801bc36:	6831      	ldr	r1, [r6, #0]
 801bc38:	4605      	mov	r5, r0
 801bc3a:	b911      	cbnz	r1, 801bc42 <sbrk_aligned+0x12>
 801bc3c:	f000 fcd4 	bl	801c5e8 <_sbrk_r>
 801bc40:	6030      	str	r0, [r6, #0]
 801bc42:	4621      	mov	r1, r4
 801bc44:	4628      	mov	r0, r5
 801bc46:	f000 fccf 	bl	801c5e8 <_sbrk_r>
 801bc4a:	1c43      	adds	r3, r0, #1
 801bc4c:	d103      	bne.n	801bc56 <sbrk_aligned+0x26>
 801bc4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801bc52:	4620      	mov	r0, r4
 801bc54:	bd70      	pop	{r4, r5, r6, pc}
 801bc56:	1cc4      	adds	r4, r0, #3
 801bc58:	f024 0403 	bic.w	r4, r4, #3
 801bc5c:	42a0      	cmp	r0, r4
 801bc5e:	d0f8      	beq.n	801bc52 <sbrk_aligned+0x22>
 801bc60:	1a21      	subs	r1, r4, r0
 801bc62:	4628      	mov	r0, r5
 801bc64:	f000 fcc0 	bl	801c5e8 <_sbrk_r>
 801bc68:	3001      	adds	r0, #1
 801bc6a:	d1f2      	bne.n	801bc52 <sbrk_aligned+0x22>
 801bc6c:	e7ef      	b.n	801bc4e <sbrk_aligned+0x1e>
 801bc6e:	bf00      	nop
 801bc70:	20011b9c 	.word	0x20011b9c

0801bc74 <_malloc_r>:
 801bc74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc78:	1ccd      	adds	r5, r1, #3
 801bc7a:	f025 0503 	bic.w	r5, r5, #3
 801bc7e:	3508      	adds	r5, #8
 801bc80:	2d0c      	cmp	r5, #12
 801bc82:	bf38      	it	cc
 801bc84:	250c      	movcc	r5, #12
 801bc86:	2d00      	cmp	r5, #0
 801bc88:	4606      	mov	r6, r0
 801bc8a:	db01      	blt.n	801bc90 <_malloc_r+0x1c>
 801bc8c:	42a9      	cmp	r1, r5
 801bc8e:	d904      	bls.n	801bc9a <_malloc_r+0x26>
 801bc90:	230c      	movs	r3, #12
 801bc92:	6033      	str	r3, [r6, #0]
 801bc94:	2000      	movs	r0, #0
 801bc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bd70 <_malloc_r+0xfc>
 801bc9e:	f000 f869 	bl	801bd74 <__malloc_lock>
 801bca2:	f8d8 3000 	ldr.w	r3, [r8]
 801bca6:	461c      	mov	r4, r3
 801bca8:	bb44      	cbnz	r4, 801bcfc <_malloc_r+0x88>
 801bcaa:	4629      	mov	r1, r5
 801bcac:	4630      	mov	r0, r6
 801bcae:	f7ff ffbf 	bl	801bc30 <sbrk_aligned>
 801bcb2:	1c43      	adds	r3, r0, #1
 801bcb4:	4604      	mov	r4, r0
 801bcb6:	d158      	bne.n	801bd6a <_malloc_r+0xf6>
 801bcb8:	f8d8 4000 	ldr.w	r4, [r8]
 801bcbc:	4627      	mov	r7, r4
 801bcbe:	2f00      	cmp	r7, #0
 801bcc0:	d143      	bne.n	801bd4a <_malloc_r+0xd6>
 801bcc2:	2c00      	cmp	r4, #0
 801bcc4:	d04b      	beq.n	801bd5e <_malloc_r+0xea>
 801bcc6:	6823      	ldr	r3, [r4, #0]
 801bcc8:	4639      	mov	r1, r7
 801bcca:	4630      	mov	r0, r6
 801bccc:	eb04 0903 	add.w	r9, r4, r3
 801bcd0:	f000 fc8a 	bl	801c5e8 <_sbrk_r>
 801bcd4:	4581      	cmp	r9, r0
 801bcd6:	d142      	bne.n	801bd5e <_malloc_r+0xea>
 801bcd8:	6821      	ldr	r1, [r4, #0]
 801bcda:	1a6d      	subs	r5, r5, r1
 801bcdc:	4629      	mov	r1, r5
 801bcde:	4630      	mov	r0, r6
 801bce0:	f7ff ffa6 	bl	801bc30 <sbrk_aligned>
 801bce4:	3001      	adds	r0, #1
 801bce6:	d03a      	beq.n	801bd5e <_malloc_r+0xea>
 801bce8:	6823      	ldr	r3, [r4, #0]
 801bcea:	442b      	add	r3, r5
 801bcec:	6023      	str	r3, [r4, #0]
 801bcee:	f8d8 3000 	ldr.w	r3, [r8]
 801bcf2:	685a      	ldr	r2, [r3, #4]
 801bcf4:	bb62      	cbnz	r2, 801bd50 <_malloc_r+0xdc>
 801bcf6:	f8c8 7000 	str.w	r7, [r8]
 801bcfa:	e00f      	b.n	801bd1c <_malloc_r+0xa8>
 801bcfc:	6822      	ldr	r2, [r4, #0]
 801bcfe:	1b52      	subs	r2, r2, r5
 801bd00:	d420      	bmi.n	801bd44 <_malloc_r+0xd0>
 801bd02:	2a0b      	cmp	r2, #11
 801bd04:	d917      	bls.n	801bd36 <_malloc_r+0xc2>
 801bd06:	1961      	adds	r1, r4, r5
 801bd08:	42a3      	cmp	r3, r4
 801bd0a:	6025      	str	r5, [r4, #0]
 801bd0c:	bf18      	it	ne
 801bd0e:	6059      	strne	r1, [r3, #4]
 801bd10:	6863      	ldr	r3, [r4, #4]
 801bd12:	bf08      	it	eq
 801bd14:	f8c8 1000 	streq.w	r1, [r8]
 801bd18:	5162      	str	r2, [r4, r5]
 801bd1a:	604b      	str	r3, [r1, #4]
 801bd1c:	4630      	mov	r0, r6
 801bd1e:	f000 f82f 	bl	801bd80 <__malloc_unlock>
 801bd22:	f104 000b 	add.w	r0, r4, #11
 801bd26:	1d23      	adds	r3, r4, #4
 801bd28:	f020 0007 	bic.w	r0, r0, #7
 801bd2c:	1ac2      	subs	r2, r0, r3
 801bd2e:	bf1c      	itt	ne
 801bd30:	1a1b      	subne	r3, r3, r0
 801bd32:	50a3      	strne	r3, [r4, r2]
 801bd34:	e7af      	b.n	801bc96 <_malloc_r+0x22>
 801bd36:	6862      	ldr	r2, [r4, #4]
 801bd38:	42a3      	cmp	r3, r4
 801bd3a:	bf0c      	ite	eq
 801bd3c:	f8c8 2000 	streq.w	r2, [r8]
 801bd40:	605a      	strne	r2, [r3, #4]
 801bd42:	e7eb      	b.n	801bd1c <_malloc_r+0xa8>
 801bd44:	4623      	mov	r3, r4
 801bd46:	6864      	ldr	r4, [r4, #4]
 801bd48:	e7ae      	b.n	801bca8 <_malloc_r+0x34>
 801bd4a:	463c      	mov	r4, r7
 801bd4c:	687f      	ldr	r7, [r7, #4]
 801bd4e:	e7b6      	b.n	801bcbe <_malloc_r+0x4a>
 801bd50:	461a      	mov	r2, r3
 801bd52:	685b      	ldr	r3, [r3, #4]
 801bd54:	42a3      	cmp	r3, r4
 801bd56:	d1fb      	bne.n	801bd50 <_malloc_r+0xdc>
 801bd58:	2300      	movs	r3, #0
 801bd5a:	6053      	str	r3, [r2, #4]
 801bd5c:	e7de      	b.n	801bd1c <_malloc_r+0xa8>
 801bd5e:	230c      	movs	r3, #12
 801bd60:	6033      	str	r3, [r6, #0]
 801bd62:	4630      	mov	r0, r6
 801bd64:	f000 f80c 	bl	801bd80 <__malloc_unlock>
 801bd68:	e794      	b.n	801bc94 <_malloc_r+0x20>
 801bd6a:	6005      	str	r5, [r0, #0]
 801bd6c:	e7d6      	b.n	801bd1c <_malloc_r+0xa8>
 801bd6e:	bf00      	nop
 801bd70:	20011ba0 	.word	0x20011ba0

0801bd74 <__malloc_lock>:
 801bd74:	4801      	ldr	r0, [pc, #4]	@ (801bd7c <__malloc_lock+0x8>)
 801bd76:	f000 bc84 	b.w	801c682 <__retarget_lock_acquire_recursive>
 801bd7a:	bf00      	nop
 801bd7c:	20011ce5 	.word	0x20011ce5

0801bd80 <__malloc_unlock>:
 801bd80:	4801      	ldr	r0, [pc, #4]	@ (801bd88 <__malloc_unlock+0x8>)
 801bd82:	f000 bc7f 	b.w	801c684 <__retarget_lock_release_recursive>
 801bd86:	bf00      	nop
 801bd88:	20011ce5 	.word	0x20011ce5

0801bd8c <srand>:
 801bd8c:	b538      	push	{r3, r4, r5, lr}
 801bd8e:	4b10      	ldr	r3, [pc, #64]	@ (801bdd0 <srand+0x44>)
 801bd90:	681d      	ldr	r5, [r3, #0]
 801bd92:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bd94:	4604      	mov	r4, r0
 801bd96:	b9b3      	cbnz	r3, 801bdc6 <srand+0x3a>
 801bd98:	2018      	movs	r0, #24
 801bd9a:	f7ff ff39 	bl	801bc10 <malloc>
 801bd9e:	4602      	mov	r2, r0
 801bda0:	6328      	str	r0, [r5, #48]	@ 0x30
 801bda2:	b920      	cbnz	r0, 801bdae <srand+0x22>
 801bda4:	4b0b      	ldr	r3, [pc, #44]	@ (801bdd4 <srand+0x48>)
 801bda6:	480c      	ldr	r0, [pc, #48]	@ (801bdd8 <srand+0x4c>)
 801bda8:	2146      	movs	r1, #70	@ 0x46
 801bdaa:	f000 fc83 	bl	801c6b4 <__assert_func>
 801bdae:	490b      	ldr	r1, [pc, #44]	@ (801bddc <srand+0x50>)
 801bdb0:	4b0b      	ldr	r3, [pc, #44]	@ (801bde0 <srand+0x54>)
 801bdb2:	e9c0 1300 	strd	r1, r3, [r0]
 801bdb6:	4b0b      	ldr	r3, [pc, #44]	@ (801bde4 <srand+0x58>)
 801bdb8:	6083      	str	r3, [r0, #8]
 801bdba:	230b      	movs	r3, #11
 801bdbc:	8183      	strh	r3, [r0, #12]
 801bdbe:	2100      	movs	r1, #0
 801bdc0:	2001      	movs	r0, #1
 801bdc2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bdc6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bdc8:	2200      	movs	r2, #0
 801bdca:	611c      	str	r4, [r3, #16]
 801bdcc:	615a      	str	r2, [r3, #20]
 801bdce:	bd38      	pop	{r3, r4, r5, pc}
 801bdd0:	2000090c 	.word	0x2000090c
 801bdd4:	0801e7b8 	.word	0x0801e7b8
 801bdd8:	0801e7cf 	.word	0x0801e7cf
 801bddc:	abcd330e 	.word	0xabcd330e
 801bde0:	e66d1234 	.word	0xe66d1234
 801bde4:	0005deec 	.word	0x0005deec

0801bde8 <rand>:
 801bde8:	4b16      	ldr	r3, [pc, #88]	@ (801be44 <rand+0x5c>)
 801bdea:	b510      	push	{r4, lr}
 801bdec:	681c      	ldr	r4, [r3, #0]
 801bdee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bdf0:	b9b3      	cbnz	r3, 801be20 <rand+0x38>
 801bdf2:	2018      	movs	r0, #24
 801bdf4:	f7ff ff0c 	bl	801bc10 <malloc>
 801bdf8:	4602      	mov	r2, r0
 801bdfa:	6320      	str	r0, [r4, #48]	@ 0x30
 801bdfc:	b920      	cbnz	r0, 801be08 <rand+0x20>
 801bdfe:	4b12      	ldr	r3, [pc, #72]	@ (801be48 <rand+0x60>)
 801be00:	4812      	ldr	r0, [pc, #72]	@ (801be4c <rand+0x64>)
 801be02:	2152      	movs	r1, #82	@ 0x52
 801be04:	f000 fc56 	bl	801c6b4 <__assert_func>
 801be08:	4911      	ldr	r1, [pc, #68]	@ (801be50 <rand+0x68>)
 801be0a:	4b12      	ldr	r3, [pc, #72]	@ (801be54 <rand+0x6c>)
 801be0c:	e9c0 1300 	strd	r1, r3, [r0]
 801be10:	4b11      	ldr	r3, [pc, #68]	@ (801be58 <rand+0x70>)
 801be12:	6083      	str	r3, [r0, #8]
 801be14:	230b      	movs	r3, #11
 801be16:	8183      	strh	r3, [r0, #12]
 801be18:	2100      	movs	r1, #0
 801be1a:	2001      	movs	r0, #1
 801be1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801be20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801be22:	480e      	ldr	r0, [pc, #56]	@ (801be5c <rand+0x74>)
 801be24:	690b      	ldr	r3, [r1, #16]
 801be26:	694c      	ldr	r4, [r1, #20]
 801be28:	4a0d      	ldr	r2, [pc, #52]	@ (801be60 <rand+0x78>)
 801be2a:	4358      	muls	r0, r3
 801be2c:	fb02 0004 	mla	r0, r2, r4, r0
 801be30:	fba3 3202 	umull	r3, r2, r3, r2
 801be34:	3301      	adds	r3, #1
 801be36:	eb40 0002 	adc.w	r0, r0, r2
 801be3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801be3e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801be42:	bd10      	pop	{r4, pc}
 801be44:	2000090c 	.word	0x2000090c
 801be48:	0801e7b8 	.word	0x0801e7b8
 801be4c:	0801e7cf 	.word	0x0801e7cf
 801be50:	abcd330e 	.word	0xabcd330e
 801be54:	e66d1234 	.word	0xe66d1234
 801be58:	0005deec 	.word	0x0005deec
 801be5c:	5851f42d 	.word	0x5851f42d
 801be60:	4c957f2d 	.word	0x4c957f2d

0801be64 <realloc>:
 801be64:	4b02      	ldr	r3, [pc, #8]	@ (801be70 <realloc+0xc>)
 801be66:	460a      	mov	r2, r1
 801be68:	4601      	mov	r1, r0
 801be6a:	6818      	ldr	r0, [r3, #0]
 801be6c:	f000 b802 	b.w	801be74 <_realloc_r>
 801be70:	2000090c 	.word	0x2000090c

0801be74 <_realloc_r>:
 801be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be78:	4607      	mov	r7, r0
 801be7a:	4614      	mov	r4, r2
 801be7c:	460d      	mov	r5, r1
 801be7e:	b921      	cbnz	r1, 801be8a <_realloc_r+0x16>
 801be80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be84:	4611      	mov	r1, r2
 801be86:	f7ff bef5 	b.w	801bc74 <_malloc_r>
 801be8a:	b92a      	cbnz	r2, 801be98 <_realloc_r+0x24>
 801be8c:	f000 fc3c 	bl	801c708 <_free_r>
 801be90:	4625      	mov	r5, r4
 801be92:	4628      	mov	r0, r5
 801be94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be98:	f000 fc80 	bl	801c79c <_malloc_usable_size_r>
 801be9c:	4284      	cmp	r4, r0
 801be9e:	4606      	mov	r6, r0
 801bea0:	d802      	bhi.n	801bea8 <_realloc_r+0x34>
 801bea2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bea6:	d8f4      	bhi.n	801be92 <_realloc_r+0x1e>
 801bea8:	4621      	mov	r1, r4
 801beaa:	4638      	mov	r0, r7
 801beac:	f7ff fee2 	bl	801bc74 <_malloc_r>
 801beb0:	4680      	mov	r8, r0
 801beb2:	b908      	cbnz	r0, 801beb8 <_realloc_r+0x44>
 801beb4:	4645      	mov	r5, r8
 801beb6:	e7ec      	b.n	801be92 <_realloc_r+0x1e>
 801beb8:	42b4      	cmp	r4, r6
 801beba:	4622      	mov	r2, r4
 801bebc:	4629      	mov	r1, r5
 801bebe:	bf28      	it	cs
 801bec0:	4632      	movcs	r2, r6
 801bec2:	f000 fbe8 	bl	801c696 <memcpy>
 801bec6:	4629      	mov	r1, r5
 801bec8:	4638      	mov	r0, r7
 801beca:	f000 fc1d 	bl	801c708 <_free_r>
 801bece:	e7f1      	b.n	801beb4 <_realloc_r+0x40>

0801bed0 <_strtoul_l.isra.0>:
 801bed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bed4:	4e34      	ldr	r6, [pc, #208]	@ (801bfa8 <_strtoul_l.isra.0+0xd8>)
 801bed6:	4686      	mov	lr, r0
 801bed8:	460d      	mov	r5, r1
 801beda:	4628      	mov	r0, r5
 801bedc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bee0:	5d37      	ldrb	r7, [r6, r4]
 801bee2:	f017 0708 	ands.w	r7, r7, #8
 801bee6:	d1f8      	bne.n	801beda <_strtoul_l.isra.0+0xa>
 801bee8:	2c2d      	cmp	r4, #45	@ 0x2d
 801beea:	d110      	bne.n	801bf0e <_strtoul_l.isra.0+0x3e>
 801beec:	782c      	ldrb	r4, [r5, #0]
 801beee:	2701      	movs	r7, #1
 801bef0:	1c85      	adds	r5, r0, #2
 801bef2:	f033 0010 	bics.w	r0, r3, #16
 801bef6:	d115      	bne.n	801bf24 <_strtoul_l.isra.0+0x54>
 801bef8:	2c30      	cmp	r4, #48	@ 0x30
 801befa:	d10d      	bne.n	801bf18 <_strtoul_l.isra.0+0x48>
 801befc:	7828      	ldrb	r0, [r5, #0]
 801befe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801bf02:	2858      	cmp	r0, #88	@ 0x58
 801bf04:	d108      	bne.n	801bf18 <_strtoul_l.isra.0+0x48>
 801bf06:	786c      	ldrb	r4, [r5, #1]
 801bf08:	3502      	adds	r5, #2
 801bf0a:	2310      	movs	r3, #16
 801bf0c:	e00a      	b.n	801bf24 <_strtoul_l.isra.0+0x54>
 801bf0e:	2c2b      	cmp	r4, #43	@ 0x2b
 801bf10:	bf04      	itt	eq
 801bf12:	782c      	ldrbeq	r4, [r5, #0]
 801bf14:	1c85      	addeq	r5, r0, #2
 801bf16:	e7ec      	b.n	801bef2 <_strtoul_l.isra.0+0x22>
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d1f6      	bne.n	801bf0a <_strtoul_l.isra.0+0x3a>
 801bf1c:	2c30      	cmp	r4, #48	@ 0x30
 801bf1e:	bf14      	ite	ne
 801bf20:	230a      	movne	r3, #10
 801bf22:	2308      	moveq	r3, #8
 801bf24:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801bf28:	2600      	movs	r6, #0
 801bf2a:	fbb8 f8f3 	udiv	r8, r8, r3
 801bf2e:	fb03 f908 	mul.w	r9, r3, r8
 801bf32:	ea6f 0909 	mvn.w	r9, r9
 801bf36:	4630      	mov	r0, r6
 801bf38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bf3c:	f1bc 0f09 	cmp.w	ip, #9
 801bf40:	d810      	bhi.n	801bf64 <_strtoul_l.isra.0+0x94>
 801bf42:	4664      	mov	r4, ip
 801bf44:	42a3      	cmp	r3, r4
 801bf46:	dd1e      	ble.n	801bf86 <_strtoul_l.isra.0+0xb6>
 801bf48:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801bf4c:	d007      	beq.n	801bf5e <_strtoul_l.isra.0+0x8e>
 801bf4e:	4580      	cmp	r8, r0
 801bf50:	d316      	bcc.n	801bf80 <_strtoul_l.isra.0+0xb0>
 801bf52:	d101      	bne.n	801bf58 <_strtoul_l.isra.0+0x88>
 801bf54:	45a1      	cmp	r9, r4
 801bf56:	db13      	blt.n	801bf80 <_strtoul_l.isra.0+0xb0>
 801bf58:	fb00 4003 	mla	r0, r0, r3, r4
 801bf5c:	2601      	movs	r6, #1
 801bf5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf62:	e7e9      	b.n	801bf38 <_strtoul_l.isra.0+0x68>
 801bf64:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801bf68:	f1bc 0f19 	cmp.w	ip, #25
 801bf6c:	d801      	bhi.n	801bf72 <_strtoul_l.isra.0+0xa2>
 801bf6e:	3c37      	subs	r4, #55	@ 0x37
 801bf70:	e7e8      	b.n	801bf44 <_strtoul_l.isra.0+0x74>
 801bf72:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801bf76:	f1bc 0f19 	cmp.w	ip, #25
 801bf7a:	d804      	bhi.n	801bf86 <_strtoul_l.isra.0+0xb6>
 801bf7c:	3c57      	subs	r4, #87	@ 0x57
 801bf7e:	e7e1      	b.n	801bf44 <_strtoul_l.isra.0+0x74>
 801bf80:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801bf84:	e7eb      	b.n	801bf5e <_strtoul_l.isra.0+0x8e>
 801bf86:	1c73      	adds	r3, r6, #1
 801bf88:	d106      	bne.n	801bf98 <_strtoul_l.isra.0+0xc8>
 801bf8a:	2322      	movs	r3, #34	@ 0x22
 801bf8c:	f8ce 3000 	str.w	r3, [lr]
 801bf90:	4630      	mov	r0, r6
 801bf92:	b932      	cbnz	r2, 801bfa2 <_strtoul_l.isra.0+0xd2>
 801bf94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf98:	b107      	cbz	r7, 801bf9c <_strtoul_l.isra.0+0xcc>
 801bf9a:	4240      	negs	r0, r0
 801bf9c:	2a00      	cmp	r2, #0
 801bf9e:	d0f9      	beq.n	801bf94 <_strtoul_l.isra.0+0xc4>
 801bfa0:	b106      	cbz	r6, 801bfa4 <_strtoul_l.isra.0+0xd4>
 801bfa2:	1e69      	subs	r1, r5, #1
 801bfa4:	6011      	str	r1, [r2, #0]
 801bfa6:	e7f5      	b.n	801bf94 <_strtoul_l.isra.0+0xc4>
 801bfa8:	0801e897 	.word	0x0801e897

0801bfac <strtoul>:
 801bfac:	4613      	mov	r3, r2
 801bfae:	460a      	mov	r2, r1
 801bfb0:	4601      	mov	r1, r0
 801bfb2:	4802      	ldr	r0, [pc, #8]	@ (801bfbc <strtoul+0x10>)
 801bfb4:	6800      	ldr	r0, [r0, #0]
 801bfb6:	f7ff bf8b 	b.w	801bed0 <_strtoul_l.isra.0>
 801bfba:	bf00      	nop
 801bfbc:	2000090c 	.word	0x2000090c

0801bfc0 <std>:
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	b510      	push	{r4, lr}
 801bfc4:	4604      	mov	r4, r0
 801bfc6:	e9c0 3300 	strd	r3, r3, [r0]
 801bfca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bfce:	6083      	str	r3, [r0, #8]
 801bfd0:	8181      	strh	r1, [r0, #12]
 801bfd2:	6643      	str	r3, [r0, #100]	@ 0x64
 801bfd4:	81c2      	strh	r2, [r0, #14]
 801bfd6:	6183      	str	r3, [r0, #24]
 801bfd8:	4619      	mov	r1, r3
 801bfda:	2208      	movs	r2, #8
 801bfdc:	305c      	adds	r0, #92	@ 0x5c
 801bfde:	f000 fa91 	bl	801c504 <memset>
 801bfe2:	4b0d      	ldr	r3, [pc, #52]	@ (801c018 <std+0x58>)
 801bfe4:	6263      	str	r3, [r4, #36]	@ 0x24
 801bfe6:	4b0d      	ldr	r3, [pc, #52]	@ (801c01c <std+0x5c>)
 801bfe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bfea:	4b0d      	ldr	r3, [pc, #52]	@ (801c020 <std+0x60>)
 801bfec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bfee:	4b0d      	ldr	r3, [pc, #52]	@ (801c024 <std+0x64>)
 801bff0:	6323      	str	r3, [r4, #48]	@ 0x30
 801bff2:	4b0d      	ldr	r3, [pc, #52]	@ (801c028 <std+0x68>)
 801bff4:	6224      	str	r4, [r4, #32]
 801bff6:	429c      	cmp	r4, r3
 801bff8:	d006      	beq.n	801c008 <std+0x48>
 801bffa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bffe:	4294      	cmp	r4, r2
 801c000:	d002      	beq.n	801c008 <std+0x48>
 801c002:	33d0      	adds	r3, #208	@ 0xd0
 801c004:	429c      	cmp	r4, r3
 801c006:	d105      	bne.n	801c014 <std+0x54>
 801c008:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c010:	f000 bb36 	b.w	801c680 <__retarget_lock_init_recursive>
 801c014:	bd10      	pop	{r4, pc}
 801c016:	bf00      	nop
 801c018:	0801c289 	.word	0x0801c289
 801c01c:	0801c2ab 	.word	0x0801c2ab
 801c020:	0801c2e3 	.word	0x0801c2e3
 801c024:	0801c307 	.word	0x0801c307
 801c028:	20011ba4 	.word	0x20011ba4

0801c02c <stdio_exit_handler>:
 801c02c:	4a02      	ldr	r2, [pc, #8]	@ (801c038 <stdio_exit_handler+0xc>)
 801c02e:	4903      	ldr	r1, [pc, #12]	@ (801c03c <stdio_exit_handler+0x10>)
 801c030:	4803      	ldr	r0, [pc, #12]	@ (801c040 <stdio_exit_handler+0x14>)
 801c032:	f000 b869 	b.w	801c108 <_fwalk_sglue>
 801c036:	bf00      	nop
 801c038:	20000900 	.word	0x20000900
 801c03c:	0801d101 	.word	0x0801d101
 801c040:	20000910 	.word	0x20000910

0801c044 <cleanup_stdio>:
 801c044:	6841      	ldr	r1, [r0, #4]
 801c046:	4b0c      	ldr	r3, [pc, #48]	@ (801c078 <cleanup_stdio+0x34>)
 801c048:	4299      	cmp	r1, r3
 801c04a:	b510      	push	{r4, lr}
 801c04c:	4604      	mov	r4, r0
 801c04e:	d001      	beq.n	801c054 <cleanup_stdio+0x10>
 801c050:	f001 f856 	bl	801d100 <_fflush_r>
 801c054:	68a1      	ldr	r1, [r4, #8]
 801c056:	4b09      	ldr	r3, [pc, #36]	@ (801c07c <cleanup_stdio+0x38>)
 801c058:	4299      	cmp	r1, r3
 801c05a:	d002      	beq.n	801c062 <cleanup_stdio+0x1e>
 801c05c:	4620      	mov	r0, r4
 801c05e:	f001 f84f 	bl	801d100 <_fflush_r>
 801c062:	68e1      	ldr	r1, [r4, #12]
 801c064:	4b06      	ldr	r3, [pc, #24]	@ (801c080 <cleanup_stdio+0x3c>)
 801c066:	4299      	cmp	r1, r3
 801c068:	d004      	beq.n	801c074 <cleanup_stdio+0x30>
 801c06a:	4620      	mov	r0, r4
 801c06c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c070:	f001 b846 	b.w	801d100 <_fflush_r>
 801c074:	bd10      	pop	{r4, pc}
 801c076:	bf00      	nop
 801c078:	20011ba4 	.word	0x20011ba4
 801c07c:	20011c0c 	.word	0x20011c0c
 801c080:	20011c74 	.word	0x20011c74

0801c084 <global_stdio_init.part.0>:
 801c084:	b510      	push	{r4, lr}
 801c086:	4b0b      	ldr	r3, [pc, #44]	@ (801c0b4 <global_stdio_init.part.0+0x30>)
 801c088:	4c0b      	ldr	r4, [pc, #44]	@ (801c0b8 <global_stdio_init.part.0+0x34>)
 801c08a:	4a0c      	ldr	r2, [pc, #48]	@ (801c0bc <global_stdio_init.part.0+0x38>)
 801c08c:	601a      	str	r2, [r3, #0]
 801c08e:	4620      	mov	r0, r4
 801c090:	2200      	movs	r2, #0
 801c092:	2104      	movs	r1, #4
 801c094:	f7ff ff94 	bl	801bfc0 <std>
 801c098:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c09c:	2201      	movs	r2, #1
 801c09e:	2109      	movs	r1, #9
 801c0a0:	f7ff ff8e 	bl	801bfc0 <std>
 801c0a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c0a8:	2202      	movs	r2, #2
 801c0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0ae:	2112      	movs	r1, #18
 801c0b0:	f7ff bf86 	b.w	801bfc0 <std>
 801c0b4:	20011cdc 	.word	0x20011cdc
 801c0b8:	20011ba4 	.word	0x20011ba4
 801c0bc:	0801c02d 	.word	0x0801c02d

0801c0c0 <__sfp_lock_acquire>:
 801c0c0:	4801      	ldr	r0, [pc, #4]	@ (801c0c8 <__sfp_lock_acquire+0x8>)
 801c0c2:	f000 bade 	b.w	801c682 <__retarget_lock_acquire_recursive>
 801c0c6:	bf00      	nop
 801c0c8:	20011ce6 	.word	0x20011ce6

0801c0cc <__sfp_lock_release>:
 801c0cc:	4801      	ldr	r0, [pc, #4]	@ (801c0d4 <__sfp_lock_release+0x8>)
 801c0ce:	f000 bad9 	b.w	801c684 <__retarget_lock_release_recursive>
 801c0d2:	bf00      	nop
 801c0d4:	20011ce6 	.word	0x20011ce6

0801c0d8 <__sinit>:
 801c0d8:	b510      	push	{r4, lr}
 801c0da:	4604      	mov	r4, r0
 801c0dc:	f7ff fff0 	bl	801c0c0 <__sfp_lock_acquire>
 801c0e0:	6a23      	ldr	r3, [r4, #32]
 801c0e2:	b11b      	cbz	r3, 801c0ec <__sinit+0x14>
 801c0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0e8:	f7ff bff0 	b.w	801c0cc <__sfp_lock_release>
 801c0ec:	4b04      	ldr	r3, [pc, #16]	@ (801c100 <__sinit+0x28>)
 801c0ee:	6223      	str	r3, [r4, #32]
 801c0f0:	4b04      	ldr	r3, [pc, #16]	@ (801c104 <__sinit+0x2c>)
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d1f5      	bne.n	801c0e4 <__sinit+0xc>
 801c0f8:	f7ff ffc4 	bl	801c084 <global_stdio_init.part.0>
 801c0fc:	e7f2      	b.n	801c0e4 <__sinit+0xc>
 801c0fe:	bf00      	nop
 801c100:	0801c045 	.word	0x0801c045
 801c104:	20011cdc 	.word	0x20011cdc

0801c108 <_fwalk_sglue>:
 801c108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c10c:	4607      	mov	r7, r0
 801c10e:	4688      	mov	r8, r1
 801c110:	4614      	mov	r4, r2
 801c112:	2600      	movs	r6, #0
 801c114:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c118:	f1b9 0901 	subs.w	r9, r9, #1
 801c11c:	d505      	bpl.n	801c12a <_fwalk_sglue+0x22>
 801c11e:	6824      	ldr	r4, [r4, #0]
 801c120:	2c00      	cmp	r4, #0
 801c122:	d1f7      	bne.n	801c114 <_fwalk_sglue+0xc>
 801c124:	4630      	mov	r0, r6
 801c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c12a:	89ab      	ldrh	r3, [r5, #12]
 801c12c:	2b01      	cmp	r3, #1
 801c12e:	d907      	bls.n	801c140 <_fwalk_sglue+0x38>
 801c130:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c134:	3301      	adds	r3, #1
 801c136:	d003      	beq.n	801c140 <_fwalk_sglue+0x38>
 801c138:	4629      	mov	r1, r5
 801c13a:	4638      	mov	r0, r7
 801c13c:	47c0      	blx	r8
 801c13e:	4306      	orrs	r6, r0
 801c140:	3568      	adds	r5, #104	@ 0x68
 801c142:	e7e9      	b.n	801c118 <_fwalk_sglue+0x10>

0801c144 <_fwrite_r>:
 801c144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c148:	9c08      	ldr	r4, [sp, #32]
 801c14a:	468a      	mov	sl, r1
 801c14c:	4690      	mov	r8, r2
 801c14e:	fb02 f903 	mul.w	r9, r2, r3
 801c152:	4606      	mov	r6, r0
 801c154:	b118      	cbz	r0, 801c15e <_fwrite_r+0x1a>
 801c156:	6a03      	ldr	r3, [r0, #32]
 801c158:	b90b      	cbnz	r3, 801c15e <_fwrite_r+0x1a>
 801c15a:	f7ff ffbd 	bl	801c0d8 <__sinit>
 801c15e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c160:	07dd      	lsls	r5, r3, #31
 801c162:	d405      	bmi.n	801c170 <_fwrite_r+0x2c>
 801c164:	89a3      	ldrh	r3, [r4, #12]
 801c166:	0598      	lsls	r0, r3, #22
 801c168:	d402      	bmi.n	801c170 <_fwrite_r+0x2c>
 801c16a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c16c:	f000 fa89 	bl	801c682 <__retarget_lock_acquire_recursive>
 801c170:	89a3      	ldrh	r3, [r4, #12]
 801c172:	0719      	lsls	r1, r3, #28
 801c174:	d516      	bpl.n	801c1a4 <_fwrite_r+0x60>
 801c176:	6923      	ldr	r3, [r4, #16]
 801c178:	b1a3      	cbz	r3, 801c1a4 <_fwrite_r+0x60>
 801c17a:	2500      	movs	r5, #0
 801c17c:	454d      	cmp	r5, r9
 801c17e:	d01f      	beq.n	801c1c0 <_fwrite_r+0x7c>
 801c180:	68a7      	ldr	r7, [r4, #8]
 801c182:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801c186:	3f01      	subs	r7, #1
 801c188:	2f00      	cmp	r7, #0
 801c18a:	60a7      	str	r7, [r4, #8]
 801c18c:	da04      	bge.n	801c198 <_fwrite_r+0x54>
 801c18e:	69a3      	ldr	r3, [r4, #24]
 801c190:	429f      	cmp	r7, r3
 801c192:	db0f      	blt.n	801c1b4 <_fwrite_r+0x70>
 801c194:	290a      	cmp	r1, #10
 801c196:	d00d      	beq.n	801c1b4 <_fwrite_r+0x70>
 801c198:	6823      	ldr	r3, [r4, #0]
 801c19a:	1c5a      	adds	r2, r3, #1
 801c19c:	6022      	str	r2, [r4, #0]
 801c19e:	7019      	strb	r1, [r3, #0]
 801c1a0:	3501      	adds	r5, #1
 801c1a2:	e7eb      	b.n	801c17c <_fwrite_r+0x38>
 801c1a4:	4621      	mov	r1, r4
 801c1a6:	4630      	mov	r0, r6
 801c1a8:	f000 f92c 	bl	801c404 <__swsetup_r>
 801c1ac:	2800      	cmp	r0, #0
 801c1ae:	d0e4      	beq.n	801c17a <_fwrite_r+0x36>
 801c1b0:	2500      	movs	r5, #0
 801c1b2:	e005      	b.n	801c1c0 <_fwrite_r+0x7c>
 801c1b4:	4622      	mov	r2, r4
 801c1b6:	4630      	mov	r0, r6
 801c1b8:	f000 f8e6 	bl	801c388 <__swbuf_r>
 801c1bc:	3001      	adds	r0, #1
 801c1be:	d1ef      	bne.n	801c1a0 <_fwrite_r+0x5c>
 801c1c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c1c2:	07da      	lsls	r2, r3, #31
 801c1c4:	d405      	bmi.n	801c1d2 <_fwrite_r+0x8e>
 801c1c6:	89a3      	ldrh	r3, [r4, #12]
 801c1c8:	059b      	lsls	r3, r3, #22
 801c1ca:	d402      	bmi.n	801c1d2 <_fwrite_r+0x8e>
 801c1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1ce:	f000 fa59 	bl	801c684 <__retarget_lock_release_recursive>
 801c1d2:	fbb5 f0f8 	udiv	r0, r5, r8
 801c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c1dc <fwrite>:
 801c1dc:	b507      	push	{r0, r1, r2, lr}
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	4613      	mov	r3, r2
 801c1e2:	460a      	mov	r2, r1
 801c1e4:	4601      	mov	r1, r0
 801c1e6:	4803      	ldr	r0, [pc, #12]	@ (801c1f4 <fwrite+0x18>)
 801c1e8:	6800      	ldr	r0, [r0, #0]
 801c1ea:	f7ff ffab 	bl	801c144 <_fwrite_r>
 801c1ee:	b003      	add	sp, #12
 801c1f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801c1f4:	2000090c 	.word	0x2000090c

0801c1f8 <iprintf>:
 801c1f8:	b40f      	push	{r0, r1, r2, r3}
 801c1fa:	b507      	push	{r0, r1, r2, lr}
 801c1fc:	4906      	ldr	r1, [pc, #24]	@ (801c218 <iprintf+0x20>)
 801c1fe:	ab04      	add	r3, sp, #16
 801c200:	6808      	ldr	r0, [r1, #0]
 801c202:	f853 2b04 	ldr.w	r2, [r3], #4
 801c206:	6881      	ldr	r1, [r0, #8]
 801c208:	9301      	str	r3, [sp, #4]
 801c20a:	f000 fc51 	bl	801cab0 <_vfiprintf_r>
 801c20e:	b003      	add	sp, #12
 801c210:	f85d eb04 	ldr.w	lr, [sp], #4
 801c214:	b004      	add	sp, #16
 801c216:	4770      	bx	lr
 801c218:	2000090c 	.word	0x2000090c

0801c21c <sniprintf>:
 801c21c:	b40c      	push	{r2, r3}
 801c21e:	b530      	push	{r4, r5, lr}
 801c220:	4b18      	ldr	r3, [pc, #96]	@ (801c284 <sniprintf+0x68>)
 801c222:	1e0c      	subs	r4, r1, #0
 801c224:	681d      	ldr	r5, [r3, #0]
 801c226:	b09d      	sub	sp, #116	@ 0x74
 801c228:	da08      	bge.n	801c23c <sniprintf+0x20>
 801c22a:	238b      	movs	r3, #139	@ 0x8b
 801c22c:	602b      	str	r3, [r5, #0]
 801c22e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c232:	b01d      	add	sp, #116	@ 0x74
 801c234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c238:	b002      	add	sp, #8
 801c23a:	4770      	bx	lr
 801c23c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c240:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c244:	f04f 0300 	mov.w	r3, #0
 801c248:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c24a:	bf14      	ite	ne
 801c24c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c250:	4623      	moveq	r3, r4
 801c252:	9304      	str	r3, [sp, #16]
 801c254:	9307      	str	r3, [sp, #28]
 801c256:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c25a:	9002      	str	r0, [sp, #8]
 801c25c:	9006      	str	r0, [sp, #24]
 801c25e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c262:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c264:	ab21      	add	r3, sp, #132	@ 0x84
 801c266:	a902      	add	r1, sp, #8
 801c268:	4628      	mov	r0, r5
 801c26a:	9301      	str	r3, [sp, #4]
 801c26c:	f000 fafa 	bl	801c864 <_svfiprintf_r>
 801c270:	1c43      	adds	r3, r0, #1
 801c272:	bfbc      	itt	lt
 801c274:	238b      	movlt	r3, #139	@ 0x8b
 801c276:	602b      	strlt	r3, [r5, #0]
 801c278:	2c00      	cmp	r4, #0
 801c27a:	d0da      	beq.n	801c232 <sniprintf+0x16>
 801c27c:	9b02      	ldr	r3, [sp, #8]
 801c27e:	2200      	movs	r2, #0
 801c280:	701a      	strb	r2, [r3, #0]
 801c282:	e7d6      	b.n	801c232 <sniprintf+0x16>
 801c284:	2000090c 	.word	0x2000090c

0801c288 <__sread>:
 801c288:	b510      	push	{r4, lr}
 801c28a:	460c      	mov	r4, r1
 801c28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c290:	f000 f998 	bl	801c5c4 <_read_r>
 801c294:	2800      	cmp	r0, #0
 801c296:	bfab      	itete	ge
 801c298:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c29a:	89a3      	ldrhlt	r3, [r4, #12]
 801c29c:	181b      	addge	r3, r3, r0
 801c29e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c2a2:	bfac      	ite	ge
 801c2a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c2a6:	81a3      	strhlt	r3, [r4, #12]
 801c2a8:	bd10      	pop	{r4, pc}

0801c2aa <__swrite>:
 801c2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2ae:	461f      	mov	r7, r3
 801c2b0:	898b      	ldrh	r3, [r1, #12]
 801c2b2:	05db      	lsls	r3, r3, #23
 801c2b4:	4605      	mov	r5, r0
 801c2b6:	460c      	mov	r4, r1
 801c2b8:	4616      	mov	r6, r2
 801c2ba:	d505      	bpl.n	801c2c8 <__swrite+0x1e>
 801c2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2c0:	2302      	movs	r3, #2
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	f000 f96c 	bl	801c5a0 <_lseek_r>
 801c2c8:	89a3      	ldrh	r3, [r4, #12]
 801c2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c2d2:	81a3      	strh	r3, [r4, #12]
 801c2d4:	4632      	mov	r2, r6
 801c2d6:	463b      	mov	r3, r7
 801c2d8:	4628      	mov	r0, r5
 801c2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2de:	f000 b993 	b.w	801c608 <_write_r>

0801c2e2 <__sseek>:
 801c2e2:	b510      	push	{r4, lr}
 801c2e4:	460c      	mov	r4, r1
 801c2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2ea:	f000 f959 	bl	801c5a0 <_lseek_r>
 801c2ee:	1c43      	adds	r3, r0, #1
 801c2f0:	89a3      	ldrh	r3, [r4, #12]
 801c2f2:	bf15      	itete	ne
 801c2f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c2f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c2fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c2fe:	81a3      	strheq	r3, [r4, #12]
 801c300:	bf18      	it	ne
 801c302:	81a3      	strhne	r3, [r4, #12]
 801c304:	bd10      	pop	{r4, pc}

0801c306 <__sclose>:
 801c306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c30a:	f000 b939 	b.w	801c580 <_close_r>

0801c30e <_vsniprintf_r>:
 801c30e:	b530      	push	{r4, r5, lr}
 801c310:	4614      	mov	r4, r2
 801c312:	2c00      	cmp	r4, #0
 801c314:	b09b      	sub	sp, #108	@ 0x6c
 801c316:	4605      	mov	r5, r0
 801c318:	461a      	mov	r2, r3
 801c31a:	da05      	bge.n	801c328 <_vsniprintf_r+0x1a>
 801c31c:	238b      	movs	r3, #139	@ 0x8b
 801c31e:	6003      	str	r3, [r0, #0]
 801c320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c324:	b01b      	add	sp, #108	@ 0x6c
 801c326:	bd30      	pop	{r4, r5, pc}
 801c328:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c32c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c330:	f04f 0300 	mov.w	r3, #0
 801c334:	9319      	str	r3, [sp, #100]	@ 0x64
 801c336:	bf14      	ite	ne
 801c338:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c33c:	4623      	moveq	r3, r4
 801c33e:	9302      	str	r3, [sp, #8]
 801c340:	9305      	str	r3, [sp, #20]
 801c342:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c346:	9100      	str	r1, [sp, #0]
 801c348:	9104      	str	r1, [sp, #16]
 801c34a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c34e:	4669      	mov	r1, sp
 801c350:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c352:	f000 fa87 	bl	801c864 <_svfiprintf_r>
 801c356:	1c43      	adds	r3, r0, #1
 801c358:	bfbc      	itt	lt
 801c35a:	238b      	movlt	r3, #139	@ 0x8b
 801c35c:	602b      	strlt	r3, [r5, #0]
 801c35e:	2c00      	cmp	r4, #0
 801c360:	d0e0      	beq.n	801c324 <_vsniprintf_r+0x16>
 801c362:	9b00      	ldr	r3, [sp, #0]
 801c364:	2200      	movs	r2, #0
 801c366:	701a      	strb	r2, [r3, #0]
 801c368:	e7dc      	b.n	801c324 <_vsniprintf_r+0x16>
	...

0801c36c <vsniprintf>:
 801c36c:	b507      	push	{r0, r1, r2, lr}
 801c36e:	9300      	str	r3, [sp, #0]
 801c370:	4613      	mov	r3, r2
 801c372:	460a      	mov	r2, r1
 801c374:	4601      	mov	r1, r0
 801c376:	4803      	ldr	r0, [pc, #12]	@ (801c384 <vsniprintf+0x18>)
 801c378:	6800      	ldr	r0, [r0, #0]
 801c37a:	f7ff ffc8 	bl	801c30e <_vsniprintf_r>
 801c37e:	b003      	add	sp, #12
 801c380:	f85d fb04 	ldr.w	pc, [sp], #4
 801c384:	2000090c 	.word	0x2000090c

0801c388 <__swbuf_r>:
 801c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c38a:	460e      	mov	r6, r1
 801c38c:	4614      	mov	r4, r2
 801c38e:	4605      	mov	r5, r0
 801c390:	b118      	cbz	r0, 801c39a <__swbuf_r+0x12>
 801c392:	6a03      	ldr	r3, [r0, #32]
 801c394:	b90b      	cbnz	r3, 801c39a <__swbuf_r+0x12>
 801c396:	f7ff fe9f 	bl	801c0d8 <__sinit>
 801c39a:	69a3      	ldr	r3, [r4, #24]
 801c39c:	60a3      	str	r3, [r4, #8]
 801c39e:	89a3      	ldrh	r3, [r4, #12]
 801c3a0:	071a      	lsls	r2, r3, #28
 801c3a2:	d501      	bpl.n	801c3a8 <__swbuf_r+0x20>
 801c3a4:	6923      	ldr	r3, [r4, #16]
 801c3a6:	b943      	cbnz	r3, 801c3ba <__swbuf_r+0x32>
 801c3a8:	4621      	mov	r1, r4
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	f000 f82a 	bl	801c404 <__swsetup_r>
 801c3b0:	b118      	cbz	r0, 801c3ba <__swbuf_r+0x32>
 801c3b2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c3b6:	4638      	mov	r0, r7
 801c3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3ba:	6823      	ldr	r3, [r4, #0]
 801c3bc:	6922      	ldr	r2, [r4, #16]
 801c3be:	1a98      	subs	r0, r3, r2
 801c3c0:	6963      	ldr	r3, [r4, #20]
 801c3c2:	b2f6      	uxtb	r6, r6
 801c3c4:	4283      	cmp	r3, r0
 801c3c6:	4637      	mov	r7, r6
 801c3c8:	dc05      	bgt.n	801c3d6 <__swbuf_r+0x4e>
 801c3ca:	4621      	mov	r1, r4
 801c3cc:	4628      	mov	r0, r5
 801c3ce:	f000 fe97 	bl	801d100 <_fflush_r>
 801c3d2:	2800      	cmp	r0, #0
 801c3d4:	d1ed      	bne.n	801c3b2 <__swbuf_r+0x2a>
 801c3d6:	68a3      	ldr	r3, [r4, #8]
 801c3d8:	3b01      	subs	r3, #1
 801c3da:	60a3      	str	r3, [r4, #8]
 801c3dc:	6823      	ldr	r3, [r4, #0]
 801c3de:	1c5a      	adds	r2, r3, #1
 801c3e0:	6022      	str	r2, [r4, #0]
 801c3e2:	701e      	strb	r6, [r3, #0]
 801c3e4:	6962      	ldr	r2, [r4, #20]
 801c3e6:	1c43      	adds	r3, r0, #1
 801c3e8:	429a      	cmp	r2, r3
 801c3ea:	d004      	beq.n	801c3f6 <__swbuf_r+0x6e>
 801c3ec:	89a3      	ldrh	r3, [r4, #12]
 801c3ee:	07db      	lsls	r3, r3, #31
 801c3f0:	d5e1      	bpl.n	801c3b6 <__swbuf_r+0x2e>
 801c3f2:	2e0a      	cmp	r6, #10
 801c3f4:	d1df      	bne.n	801c3b6 <__swbuf_r+0x2e>
 801c3f6:	4621      	mov	r1, r4
 801c3f8:	4628      	mov	r0, r5
 801c3fa:	f000 fe81 	bl	801d100 <_fflush_r>
 801c3fe:	2800      	cmp	r0, #0
 801c400:	d0d9      	beq.n	801c3b6 <__swbuf_r+0x2e>
 801c402:	e7d6      	b.n	801c3b2 <__swbuf_r+0x2a>

0801c404 <__swsetup_r>:
 801c404:	b538      	push	{r3, r4, r5, lr}
 801c406:	4b29      	ldr	r3, [pc, #164]	@ (801c4ac <__swsetup_r+0xa8>)
 801c408:	4605      	mov	r5, r0
 801c40a:	6818      	ldr	r0, [r3, #0]
 801c40c:	460c      	mov	r4, r1
 801c40e:	b118      	cbz	r0, 801c418 <__swsetup_r+0x14>
 801c410:	6a03      	ldr	r3, [r0, #32]
 801c412:	b90b      	cbnz	r3, 801c418 <__swsetup_r+0x14>
 801c414:	f7ff fe60 	bl	801c0d8 <__sinit>
 801c418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c41c:	0719      	lsls	r1, r3, #28
 801c41e:	d422      	bmi.n	801c466 <__swsetup_r+0x62>
 801c420:	06da      	lsls	r2, r3, #27
 801c422:	d407      	bmi.n	801c434 <__swsetup_r+0x30>
 801c424:	2209      	movs	r2, #9
 801c426:	602a      	str	r2, [r5, #0]
 801c428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c42c:	81a3      	strh	r3, [r4, #12]
 801c42e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c432:	e033      	b.n	801c49c <__swsetup_r+0x98>
 801c434:	0758      	lsls	r0, r3, #29
 801c436:	d512      	bpl.n	801c45e <__swsetup_r+0x5a>
 801c438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c43a:	b141      	cbz	r1, 801c44e <__swsetup_r+0x4a>
 801c43c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c440:	4299      	cmp	r1, r3
 801c442:	d002      	beq.n	801c44a <__swsetup_r+0x46>
 801c444:	4628      	mov	r0, r5
 801c446:	f000 f95f 	bl	801c708 <_free_r>
 801c44a:	2300      	movs	r3, #0
 801c44c:	6363      	str	r3, [r4, #52]	@ 0x34
 801c44e:	89a3      	ldrh	r3, [r4, #12]
 801c450:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c454:	81a3      	strh	r3, [r4, #12]
 801c456:	2300      	movs	r3, #0
 801c458:	6063      	str	r3, [r4, #4]
 801c45a:	6923      	ldr	r3, [r4, #16]
 801c45c:	6023      	str	r3, [r4, #0]
 801c45e:	89a3      	ldrh	r3, [r4, #12]
 801c460:	f043 0308 	orr.w	r3, r3, #8
 801c464:	81a3      	strh	r3, [r4, #12]
 801c466:	6923      	ldr	r3, [r4, #16]
 801c468:	b94b      	cbnz	r3, 801c47e <__swsetup_r+0x7a>
 801c46a:	89a3      	ldrh	r3, [r4, #12]
 801c46c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c474:	d003      	beq.n	801c47e <__swsetup_r+0x7a>
 801c476:	4621      	mov	r1, r4
 801c478:	4628      	mov	r0, r5
 801c47a:	f000 fea1 	bl	801d1c0 <__smakebuf_r>
 801c47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c482:	f013 0201 	ands.w	r2, r3, #1
 801c486:	d00a      	beq.n	801c49e <__swsetup_r+0x9a>
 801c488:	2200      	movs	r2, #0
 801c48a:	60a2      	str	r2, [r4, #8]
 801c48c:	6962      	ldr	r2, [r4, #20]
 801c48e:	4252      	negs	r2, r2
 801c490:	61a2      	str	r2, [r4, #24]
 801c492:	6922      	ldr	r2, [r4, #16]
 801c494:	b942      	cbnz	r2, 801c4a8 <__swsetup_r+0xa4>
 801c496:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c49a:	d1c5      	bne.n	801c428 <__swsetup_r+0x24>
 801c49c:	bd38      	pop	{r3, r4, r5, pc}
 801c49e:	0799      	lsls	r1, r3, #30
 801c4a0:	bf58      	it	pl
 801c4a2:	6962      	ldrpl	r2, [r4, #20]
 801c4a4:	60a2      	str	r2, [r4, #8]
 801c4a6:	e7f4      	b.n	801c492 <__swsetup_r+0x8e>
 801c4a8:	2000      	movs	r0, #0
 801c4aa:	e7f7      	b.n	801c49c <__swsetup_r+0x98>
 801c4ac:	2000090c 	.word	0x2000090c

0801c4b0 <memcmp>:
 801c4b0:	b510      	push	{r4, lr}
 801c4b2:	3901      	subs	r1, #1
 801c4b4:	4402      	add	r2, r0
 801c4b6:	4290      	cmp	r0, r2
 801c4b8:	d101      	bne.n	801c4be <memcmp+0xe>
 801c4ba:	2000      	movs	r0, #0
 801c4bc:	e005      	b.n	801c4ca <memcmp+0x1a>
 801c4be:	7803      	ldrb	r3, [r0, #0]
 801c4c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c4c4:	42a3      	cmp	r3, r4
 801c4c6:	d001      	beq.n	801c4cc <memcmp+0x1c>
 801c4c8:	1b18      	subs	r0, r3, r4
 801c4ca:	bd10      	pop	{r4, pc}
 801c4cc:	3001      	adds	r0, #1
 801c4ce:	e7f2      	b.n	801c4b6 <memcmp+0x6>

0801c4d0 <memmove>:
 801c4d0:	4288      	cmp	r0, r1
 801c4d2:	b510      	push	{r4, lr}
 801c4d4:	eb01 0402 	add.w	r4, r1, r2
 801c4d8:	d902      	bls.n	801c4e0 <memmove+0x10>
 801c4da:	4284      	cmp	r4, r0
 801c4dc:	4623      	mov	r3, r4
 801c4de:	d807      	bhi.n	801c4f0 <memmove+0x20>
 801c4e0:	1e43      	subs	r3, r0, #1
 801c4e2:	42a1      	cmp	r1, r4
 801c4e4:	d008      	beq.n	801c4f8 <memmove+0x28>
 801c4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c4ee:	e7f8      	b.n	801c4e2 <memmove+0x12>
 801c4f0:	4402      	add	r2, r0
 801c4f2:	4601      	mov	r1, r0
 801c4f4:	428a      	cmp	r2, r1
 801c4f6:	d100      	bne.n	801c4fa <memmove+0x2a>
 801c4f8:	bd10      	pop	{r4, pc}
 801c4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c502:	e7f7      	b.n	801c4f4 <memmove+0x24>

0801c504 <memset>:
 801c504:	4402      	add	r2, r0
 801c506:	4603      	mov	r3, r0
 801c508:	4293      	cmp	r3, r2
 801c50a:	d100      	bne.n	801c50e <memset+0xa>
 801c50c:	4770      	bx	lr
 801c50e:	f803 1b01 	strb.w	r1, [r3], #1
 801c512:	e7f9      	b.n	801c508 <memset+0x4>

0801c514 <strchr>:
 801c514:	b2c9      	uxtb	r1, r1
 801c516:	4603      	mov	r3, r0
 801c518:	4618      	mov	r0, r3
 801c51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c51e:	b112      	cbz	r2, 801c526 <strchr+0x12>
 801c520:	428a      	cmp	r2, r1
 801c522:	d1f9      	bne.n	801c518 <strchr+0x4>
 801c524:	4770      	bx	lr
 801c526:	2900      	cmp	r1, #0
 801c528:	bf18      	it	ne
 801c52a:	2000      	movne	r0, #0
 801c52c:	4770      	bx	lr

0801c52e <strncmp>:
 801c52e:	b510      	push	{r4, lr}
 801c530:	b16a      	cbz	r2, 801c54e <strncmp+0x20>
 801c532:	3901      	subs	r1, #1
 801c534:	1884      	adds	r4, r0, r2
 801c536:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c53a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c53e:	429a      	cmp	r2, r3
 801c540:	d103      	bne.n	801c54a <strncmp+0x1c>
 801c542:	42a0      	cmp	r0, r4
 801c544:	d001      	beq.n	801c54a <strncmp+0x1c>
 801c546:	2a00      	cmp	r2, #0
 801c548:	d1f5      	bne.n	801c536 <strncmp+0x8>
 801c54a:	1ad0      	subs	r0, r2, r3
 801c54c:	bd10      	pop	{r4, pc}
 801c54e:	4610      	mov	r0, r2
 801c550:	e7fc      	b.n	801c54c <strncmp+0x1e>

0801c552 <strstr>:
 801c552:	780a      	ldrb	r2, [r1, #0]
 801c554:	b570      	push	{r4, r5, r6, lr}
 801c556:	b96a      	cbnz	r2, 801c574 <strstr+0x22>
 801c558:	bd70      	pop	{r4, r5, r6, pc}
 801c55a:	429a      	cmp	r2, r3
 801c55c:	d109      	bne.n	801c572 <strstr+0x20>
 801c55e:	460c      	mov	r4, r1
 801c560:	4605      	mov	r5, r0
 801c562:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c566:	2b00      	cmp	r3, #0
 801c568:	d0f6      	beq.n	801c558 <strstr+0x6>
 801c56a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c56e:	429e      	cmp	r6, r3
 801c570:	d0f7      	beq.n	801c562 <strstr+0x10>
 801c572:	3001      	adds	r0, #1
 801c574:	7803      	ldrb	r3, [r0, #0]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d1ef      	bne.n	801c55a <strstr+0x8>
 801c57a:	4618      	mov	r0, r3
 801c57c:	e7ec      	b.n	801c558 <strstr+0x6>
	...

0801c580 <_close_r>:
 801c580:	b538      	push	{r3, r4, r5, lr}
 801c582:	4d06      	ldr	r5, [pc, #24]	@ (801c59c <_close_r+0x1c>)
 801c584:	2300      	movs	r3, #0
 801c586:	4604      	mov	r4, r0
 801c588:	4608      	mov	r0, r1
 801c58a:	602b      	str	r3, [r5, #0]
 801c58c:	f7e7 fd12 	bl	8003fb4 <_close>
 801c590:	1c43      	adds	r3, r0, #1
 801c592:	d102      	bne.n	801c59a <_close_r+0x1a>
 801c594:	682b      	ldr	r3, [r5, #0]
 801c596:	b103      	cbz	r3, 801c59a <_close_r+0x1a>
 801c598:	6023      	str	r3, [r4, #0]
 801c59a:	bd38      	pop	{r3, r4, r5, pc}
 801c59c:	20011ce0 	.word	0x20011ce0

0801c5a0 <_lseek_r>:
 801c5a0:	b538      	push	{r3, r4, r5, lr}
 801c5a2:	4d07      	ldr	r5, [pc, #28]	@ (801c5c0 <_lseek_r+0x20>)
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	4608      	mov	r0, r1
 801c5a8:	4611      	mov	r1, r2
 801c5aa:	2200      	movs	r2, #0
 801c5ac:	602a      	str	r2, [r5, #0]
 801c5ae:	461a      	mov	r2, r3
 801c5b0:	f7e7 fd27 	bl	8004002 <_lseek>
 801c5b4:	1c43      	adds	r3, r0, #1
 801c5b6:	d102      	bne.n	801c5be <_lseek_r+0x1e>
 801c5b8:	682b      	ldr	r3, [r5, #0]
 801c5ba:	b103      	cbz	r3, 801c5be <_lseek_r+0x1e>
 801c5bc:	6023      	str	r3, [r4, #0]
 801c5be:	bd38      	pop	{r3, r4, r5, pc}
 801c5c0:	20011ce0 	.word	0x20011ce0

0801c5c4 <_read_r>:
 801c5c4:	b538      	push	{r3, r4, r5, lr}
 801c5c6:	4d07      	ldr	r5, [pc, #28]	@ (801c5e4 <_read_r+0x20>)
 801c5c8:	4604      	mov	r4, r0
 801c5ca:	4608      	mov	r0, r1
 801c5cc:	4611      	mov	r1, r2
 801c5ce:	2200      	movs	r2, #0
 801c5d0:	602a      	str	r2, [r5, #0]
 801c5d2:	461a      	mov	r2, r3
 801c5d4:	f7e7 fcb5 	bl	8003f42 <_read>
 801c5d8:	1c43      	adds	r3, r0, #1
 801c5da:	d102      	bne.n	801c5e2 <_read_r+0x1e>
 801c5dc:	682b      	ldr	r3, [r5, #0]
 801c5de:	b103      	cbz	r3, 801c5e2 <_read_r+0x1e>
 801c5e0:	6023      	str	r3, [r4, #0]
 801c5e2:	bd38      	pop	{r3, r4, r5, pc}
 801c5e4:	20011ce0 	.word	0x20011ce0

0801c5e8 <_sbrk_r>:
 801c5e8:	b538      	push	{r3, r4, r5, lr}
 801c5ea:	4d06      	ldr	r5, [pc, #24]	@ (801c604 <_sbrk_r+0x1c>)
 801c5ec:	2300      	movs	r3, #0
 801c5ee:	4604      	mov	r4, r0
 801c5f0:	4608      	mov	r0, r1
 801c5f2:	602b      	str	r3, [r5, #0]
 801c5f4:	f7e7 fd12 	bl	800401c <_sbrk>
 801c5f8:	1c43      	adds	r3, r0, #1
 801c5fa:	d102      	bne.n	801c602 <_sbrk_r+0x1a>
 801c5fc:	682b      	ldr	r3, [r5, #0]
 801c5fe:	b103      	cbz	r3, 801c602 <_sbrk_r+0x1a>
 801c600:	6023      	str	r3, [r4, #0]
 801c602:	bd38      	pop	{r3, r4, r5, pc}
 801c604:	20011ce0 	.word	0x20011ce0

0801c608 <_write_r>:
 801c608:	b538      	push	{r3, r4, r5, lr}
 801c60a:	4d07      	ldr	r5, [pc, #28]	@ (801c628 <_write_r+0x20>)
 801c60c:	4604      	mov	r4, r0
 801c60e:	4608      	mov	r0, r1
 801c610:	4611      	mov	r1, r2
 801c612:	2200      	movs	r2, #0
 801c614:	602a      	str	r2, [r5, #0]
 801c616:	461a      	mov	r2, r3
 801c618:	f7e7 fcb0 	bl	8003f7c <_write>
 801c61c:	1c43      	adds	r3, r0, #1
 801c61e:	d102      	bne.n	801c626 <_write_r+0x1e>
 801c620:	682b      	ldr	r3, [r5, #0]
 801c622:	b103      	cbz	r3, 801c626 <_write_r+0x1e>
 801c624:	6023      	str	r3, [r4, #0]
 801c626:	bd38      	pop	{r3, r4, r5, pc}
 801c628:	20011ce0 	.word	0x20011ce0

0801c62c <__errno>:
 801c62c:	4b01      	ldr	r3, [pc, #4]	@ (801c634 <__errno+0x8>)
 801c62e:	6818      	ldr	r0, [r3, #0]
 801c630:	4770      	bx	lr
 801c632:	bf00      	nop
 801c634:	2000090c 	.word	0x2000090c

0801c638 <__libc_init_array>:
 801c638:	b570      	push	{r4, r5, r6, lr}
 801c63a:	4d0d      	ldr	r5, [pc, #52]	@ (801c670 <__libc_init_array+0x38>)
 801c63c:	4c0d      	ldr	r4, [pc, #52]	@ (801c674 <__libc_init_array+0x3c>)
 801c63e:	1b64      	subs	r4, r4, r5
 801c640:	10a4      	asrs	r4, r4, #2
 801c642:	2600      	movs	r6, #0
 801c644:	42a6      	cmp	r6, r4
 801c646:	d109      	bne.n	801c65c <__libc_init_array+0x24>
 801c648:	4d0b      	ldr	r5, [pc, #44]	@ (801c678 <__libc_init_array+0x40>)
 801c64a:	4c0c      	ldr	r4, [pc, #48]	@ (801c67c <__libc_init_array+0x44>)
 801c64c:	f000 fe62 	bl	801d314 <_init>
 801c650:	1b64      	subs	r4, r4, r5
 801c652:	10a4      	asrs	r4, r4, #2
 801c654:	2600      	movs	r6, #0
 801c656:	42a6      	cmp	r6, r4
 801c658:	d105      	bne.n	801c666 <__libc_init_array+0x2e>
 801c65a:	bd70      	pop	{r4, r5, r6, pc}
 801c65c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c660:	4798      	blx	r3
 801c662:	3601      	adds	r6, #1
 801c664:	e7ee      	b.n	801c644 <__libc_init_array+0xc>
 801c666:	f855 3b04 	ldr.w	r3, [r5], #4
 801c66a:	4798      	blx	r3
 801c66c:	3601      	adds	r6, #1
 801c66e:	e7f2      	b.n	801c656 <__libc_init_array+0x1e>
 801c670:	0801e9a0 	.word	0x0801e9a0
 801c674:	0801e9a0 	.word	0x0801e9a0
 801c678:	0801e9a0 	.word	0x0801e9a0
 801c67c:	0801e9bc 	.word	0x0801e9bc

0801c680 <__retarget_lock_init_recursive>:
 801c680:	4770      	bx	lr

0801c682 <__retarget_lock_acquire_recursive>:
 801c682:	4770      	bx	lr

0801c684 <__retarget_lock_release_recursive>:
 801c684:	4770      	bx	lr

0801c686 <strcpy>:
 801c686:	4603      	mov	r3, r0
 801c688:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c68c:	f803 2b01 	strb.w	r2, [r3], #1
 801c690:	2a00      	cmp	r2, #0
 801c692:	d1f9      	bne.n	801c688 <strcpy+0x2>
 801c694:	4770      	bx	lr

0801c696 <memcpy>:
 801c696:	440a      	add	r2, r1
 801c698:	4291      	cmp	r1, r2
 801c69a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801c69e:	d100      	bne.n	801c6a2 <memcpy+0xc>
 801c6a0:	4770      	bx	lr
 801c6a2:	b510      	push	{r4, lr}
 801c6a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c6a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c6ac:	4291      	cmp	r1, r2
 801c6ae:	d1f9      	bne.n	801c6a4 <memcpy+0xe>
 801c6b0:	bd10      	pop	{r4, pc}
	...

0801c6b4 <__assert_func>:
 801c6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c6b6:	4614      	mov	r4, r2
 801c6b8:	461a      	mov	r2, r3
 801c6ba:	4b09      	ldr	r3, [pc, #36]	@ (801c6e0 <__assert_func+0x2c>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	4605      	mov	r5, r0
 801c6c0:	68d8      	ldr	r0, [r3, #12]
 801c6c2:	b14c      	cbz	r4, 801c6d8 <__assert_func+0x24>
 801c6c4:	4b07      	ldr	r3, [pc, #28]	@ (801c6e4 <__assert_func+0x30>)
 801c6c6:	9100      	str	r1, [sp, #0]
 801c6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c6cc:	4906      	ldr	r1, [pc, #24]	@ (801c6e8 <__assert_func+0x34>)
 801c6ce:	462b      	mov	r3, r5
 801c6d0:	f000 fd3e 	bl	801d150 <fiprintf>
 801c6d4:	f000 fdd2 	bl	801d27c <abort>
 801c6d8:	4b04      	ldr	r3, [pc, #16]	@ (801c6ec <__assert_func+0x38>)
 801c6da:	461c      	mov	r4, r3
 801c6dc:	e7f3      	b.n	801c6c6 <__assert_func+0x12>
 801c6de:	bf00      	nop
 801c6e0:	2000090c 	.word	0x2000090c
 801c6e4:	0801e827 	.word	0x0801e827
 801c6e8:	0801e834 	.word	0x0801e834
 801c6ec:	0801e862 	.word	0x0801e862

0801c6f0 <__env_lock>:
 801c6f0:	4801      	ldr	r0, [pc, #4]	@ (801c6f8 <__env_lock+0x8>)
 801c6f2:	f7ff bfc6 	b.w	801c682 <__retarget_lock_acquire_recursive>
 801c6f6:	bf00      	nop
 801c6f8:	20011ce4 	.word	0x20011ce4

0801c6fc <__env_unlock>:
 801c6fc:	4801      	ldr	r0, [pc, #4]	@ (801c704 <__env_unlock+0x8>)
 801c6fe:	f7ff bfc1 	b.w	801c684 <__retarget_lock_release_recursive>
 801c702:	bf00      	nop
 801c704:	20011ce4 	.word	0x20011ce4

0801c708 <_free_r>:
 801c708:	b538      	push	{r3, r4, r5, lr}
 801c70a:	4605      	mov	r5, r0
 801c70c:	2900      	cmp	r1, #0
 801c70e:	d041      	beq.n	801c794 <_free_r+0x8c>
 801c710:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c714:	1f0c      	subs	r4, r1, #4
 801c716:	2b00      	cmp	r3, #0
 801c718:	bfb8      	it	lt
 801c71a:	18e4      	addlt	r4, r4, r3
 801c71c:	f7ff fb2a 	bl	801bd74 <__malloc_lock>
 801c720:	4a1d      	ldr	r2, [pc, #116]	@ (801c798 <_free_r+0x90>)
 801c722:	6813      	ldr	r3, [r2, #0]
 801c724:	b933      	cbnz	r3, 801c734 <_free_r+0x2c>
 801c726:	6063      	str	r3, [r4, #4]
 801c728:	6014      	str	r4, [r2, #0]
 801c72a:	4628      	mov	r0, r5
 801c72c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c730:	f7ff bb26 	b.w	801bd80 <__malloc_unlock>
 801c734:	42a3      	cmp	r3, r4
 801c736:	d908      	bls.n	801c74a <_free_r+0x42>
 801c738:	6820      	ldr	r0, [r4, #0]
 801c73a:	1821      	adds	r1, r4, r0
 801c73c:	428b      	cmp	r3, r1
 801c73e:	bf01      	itttt	eq
 801c740:	6819      	ldreq	r1, [r3, #0]
 801c742:	685b      	ldreq	r3, [r3, #4]
 801c744:	1809      	addeq	r1, r1, r0
 801c746:	6021      	streq	r1, [r4, #0]
 801c748:	e7ed      	b.n	801c726 <_free_r+0x1e>
 801c74a:	461a      	mov	r2, r3
 801c74c:	685b      	ldr	r3, [r3, #4]
 801c74e:	b10b      	cbz	r3, 801c754 <_free_r+0x4c>
 801c750:	42a3      	cmp	r3, r4
 801c752:	d9fa      	bls.n	801c74a <_free_r+0x42>
 801c754:	6811      	ldr	r1, [r2, #0]
 801c756:	1850      	adds	r0, r2, r1
 801c758:	42a0      	cmp	r0, r4
 801c75a:	d10b      	bne.n	801c774 <_free_r+0x6c>
 801c75c:	6820      	ldr	r0, [r4, #0]
 801c75e:	4401      	add	r1, r0
 801c760:	1850      	adds	r0, r2, r1
 801c762:	4283      	cmp	r3, r0
 801c764:	6011      	str	r1, [r2, #0]
 801c766:	d1e0      	bne.n	801c72a <_free_r+0x22>
 801c768:	6818      	ldr	r0, [r3, #0]
 801c76a:	685b      	ldr	r3, [r3, #4]
 801c76c:	6053      	str	r3, [r2, #4]
 801c76e:	4408      	add	r0, r1
 801c770:	6010      	str	r0, [r2, #0]
 801c772:	e7da      	b.n	801c72a <_free_r+0x22>
 801c774:	d902      	bls.n	801c77c <_free_r+0x74>
 801c776:	230c      	movs	r3, #12
 801c778:	602b      	str	r3, [r5, #0]
 801c77a:	e7d6      	b.n	801c72a <_free_r+0x22>
 801c77c:	6820      	ldr	r0, [r4, #0]
 801c77e:	1821      	adds	r1, r4, r0
 801c780:	428b      	cmp	r3, r1
 801c782:	bf04      	itt	eq
 801c784:	6819      	ldreq	r1, [r3, #0]
 801c786:	685b      	ldreq	r3, [r3, #4]
 801c788:	6063      	str	r3, [r4, #4]
 801c78a:	bf04      	itt	eq
 801c78c:	1809      	addeq	r1, r1, r0
 801c78e:	6021      	streq	r1, [r4, #0]
 801c790:	6054      	str	r4, [r2, #4]
 801c792:	e7ca      	b.n	801c72a <_free_r+0x22>
 801c794:	bd38      	pop	{r3, r4, r5, pc}
 801c796:	bf00      	nop
 801c798:	20011ba0 	.word	0x20011ba0

0801c79c <_malloc_usable_size_r>:
 801c79c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c7a0:	1f18      	subs	r0, r3, #4
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	bfbc      	itt	lt
 801c7a6:	580b      	ldrlt	r3, [r1, r0]
 801c7a8:	18c0      	addlt	r0, r0, r3
 801c7aa:	4770      	bx	lr

0801c7ac <__ssputs_r>:
 801c7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7b0:	688e      	ldr	r6, [r1, #8]
 801c7b2:	461f      	mov	r7, r3
 801c7b4:	42be      	cmp	r6, r7
 801c7b6:	680b      	ldr	r3, [r1, #0]
 801c7b8:	4682      	mov	sl, r0
 801c7ba:	460c      	mov	r4, r1
 801c7bc:	4690      	mov	r8, r2
 801c7be:	d82d      	bhi.n	801c81c <__ssputs_r+0x70>
 801c7c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c7c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c7c8:	d026      	beq.n	801c818 <__ssputs_r+0x6c>
 801c7ca:	6965      	ldr	r5, [r4, #20]
 801c7cc:	6909      	ldr	r1, [r1, #16]
 801c7ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7d2:	eba3 0901 	sub.w	r9, r3, r1
 801c7d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c7da:	1c7b      	adds	r3, r7, #1
 801c7dc:	444b      	add	r3, r9
 801c7de:	106d      	asrs	r5, r5, #1
 801c7e0:	429d      	cmp	r5, r3
 801c7e2:	bf38      	it	cc
 801c7e4:	461d      	movcc	r5, r3
 801c7e6:	0553      	lsls	r3, r2, #21
 801c7e8:	d527      	bpl.n	801c83a <__ssputs_r+0x8e>
 801c7ea:	4629      	mov	r1, r5
 801c7ec:	f7ff fa42 	bl	801bc74 <_malloc_r>
 801c7f0:	4606      	mov	r6, r0
 801c7f2:	b360      	cbz	r0, 801c84e <__ssputs_r+0xa2>
 801c7f4:	6921      	ldr	r1, [r4, #16]
 801c7f6:	464a      	mov	r2, r9
 801c7f8:	f7ff ff4d 	bl	801c696 <memcpy>
 801c7fc:	89a3      	ldrh	r3, [r4, #12]
 801c7fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c806:	81a3      	strh	r3, [r4, #12]
 801c808:	6126      	str	r6, [r4, #16]
 801c80a:	6165      	str	r5, [r4, #20]
 801c80c:	444e      	add	r6, r9
 801c80e:	eba5 0509 	sub.w	r5, r5, r9
 801c812:	6026      	str	r6, [r4, #0]
 801c814:	60a5      	str	r5, [r4, #8]
 801c816:	463e      	mov	r6, r7
 801c818:	42be      	cmp	r6, r7
 801c81a:	d900      	bls.n	801c81e <__ssputs_r+0x72>
 801c81c:	463e      	mov	r6, r7
 801c81e:	6820      	ldr	r0, [r4, #0]
 801c820:	4632      	mov	r2, r6
 801c822:	4641      	mov	r1, r8
 801c824:	f7ff fe54 	bl	801c4d0 <memmove>
 801c828:	68a3      	ldr	r3, [r4, #8]
 801c82a:	1b9b      	subs	r3, r3, r6
 801c82c:	60a3      	str	r3, [r4, #8]
 801c82e:	6823      	ldr	r3, [r4, #0]
 801c830:	4433      	add	r3, r6
 801c832:	6023      	str	r3, [r4, #0]
 801c834:	2000      	movs	r0, #0
 801c836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c83a:	462a      	mov	r2, r5
 801c83c:	f7ff fb1a 	bl	801be74 <_realloc_r>
 801c840:	4606      	mov	r6, r0
 801c842:	2800      	cmp	r0, #0
 801c844:	d1e0      	bne.n	801c808 <__ssputs_r+0x5c>
 801c846:	6921      	ldr	r1, [r4, #16]
 801c848:	4650      	mov	r0, sl
 801c84a:	f7ff ff5d 	bl	801c708 <_free_r>
 801c84e:	230c      	movs	r3, #12
 801c850:	f8ca 3000 	str.w	r3, [sl]
 801c854:	89a3      	ldrh	r3, [r4, #12]
 801c856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c85a:	81a3      	strh	r3, [r4, #12]
 801c85c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c860:	e7e9      	b.n	801c836 <__ssputs_r+0x8a>
	...

0801c864 <_svfiprintf_r>:
 801c864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c868:	4698      	mov	r8, r3
 801c86a:	898b      	ldrh	r3, [r1, #12]
 801c86c:	061b      	lsls	r3, r3, #24
 801c86e:	b09d      	sub	sp, #116	@ 0x74
 801c870:	4607      	mov	r7, r0
 801c872:	460d      	mov	r5, r1
 801c874:	4614      	mov	r4, r2
 801c876:	d510      	bpl.n	801c89a <_svfiprintf_r+0x36>
 801c878:	690b      	ldr	r3, [r1, #16]
 801c87a:	b973      	cbnz	r3, 801c89a <_svfiprintf_r+0x36>
 801c87c:	2140      	movs	r1, #64	@ 0x40
 801c87e:	f7ff f9f9 	bl	801bc74 <_malloc_r>
 801c882:	6028      	str	r0, [r5, #0]
 801c884:	6128      	str	r0, [r5, #16]
 801c886:	b930      	cbnz	r0, 801c896 <_svfiprintf_r+0x32>
 801c888:	230c      	movs	r3, #12
 801c88a:	603b      	str	r3, [r7, #0]
 801c88c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c890:	b01d      	add	sp, #116	@ 0x74
 801c892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c896:	2340      	movs	r3, #64	@ 0x40
 801c898:	616b      	str	r3, [r5, #20]
 801c89a:	2300      	movs	r3, #0
 801c89c:	9309      	str	r3, [sp, #36]	@ 0x24
 801c89e:	2320      	movs	r3, #32
 801c8a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 801c8a8:	2330      	movs	r3, #48	@ 0x30
 801c8aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ca48 <_svfiprintf_r+0x1e4>
 801c8ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c8b2:	f04f 0901 	mov.w	r9, #1
 801c8b6:	4623      	mov	r3, r4
 801c8b8:	469a      	mov	sl, r3
 801c8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8be:	b10a      	cbz	r2, 801c8c4 <_svfiprintf_r+0x60>
 801c8c0:	2a25      	cmp	r2, #37	@ 0x25
 801c8c2:	d1f9      	bne.n	801c8b8 <_svfiprintf_r+0x54>
 801c8c4:	ebba 0b04 	subs.w	fp, sl, r4
 801c8c8:	d00b      	beq.n	801c8e2 <_svfiprintf_r+0x7e>
 801c8ca:	465b      	mov	r3, fp
 801c8cc:	4622      	mov	r2, r4
 801c8ce:	4629      	mov	r1, r5
 801c8d0:	4638      	mov	r0, r7
 801c8d2:	f7ff ff6b 	bl	801c7ac <__ssputs_r>
 801c8d6:	3001      	adds	r0, #1
 801c8d8:	f000 80a7 	beq.w	801ca2a <_svfiprintf_r+0x1c6>
 801c8dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c8de:	445a      	add	r2, fp
 801c8e0:	9209      	str	r2, [sp, #36]	@ 0x24
 801c8e2:	f89a 3000 	ldrb.w	r3, [sl]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	f000 809f 	beq.w	801ca2a <_svfiprintf_r+0x1c6>
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c8f6:	f10a 0a01 	add.w	sl, sl, #1
 801c8fa:	9304      	str	r3, [sp, #16]
 801c8fc:	9307      	str	r3, [sp, #28]
 801c8fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c902:	931a      	str	r3, [sp, #104]	@ 0x68
 801c904:	4654      	mov	r4, sl
 801c906:	2205      	movs	r2, #5
 801c908:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c90c:	484e      	ldr	r0, [pc, #312]	@ (801ca48 <_svfiprintf_r+0x1e4>)
 801c90e:	f7e3 fc97 	bl	8000240 <memchr>
 801c912:	9a04      	ldr	r2, [sp, #16]
 801c914:	b9d8      	cbnz	r0, 801c94e <_svfiprintf_r+0xea>
 801c916:	06d0      	lsls	r0, r2, #27
 801c918:	bf44      	itt	mi
 801c91a:	2320      	movmi	r3, #32
 801c91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c920:	0711      	lsls	r1, r2, #28
 801c922:	bf44      	itt	mi
 801c924:	232b      	movmi	r3, #43	@ 0x2b
 801c926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c92a:	f89a 3000 	ldrb.w	r3, [sl]
 801c92e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c930:	d015      	beq.n	801c95e <_svfiprintf_r+0xfa>
 801c932:	9a07      	ldr	r2, [sp, #28]
 801c934:	4654      	mov	r4, sl
 801c936:	2000      	movs	r0, #0
 801c938:	f04f 0c0a 	mov.w	ip, #10
 801c93c:	4621      	mov	r1, r4
 801c93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c942:	3b30      	subs	r3, #48	@ 0x30
 801c944:	2b09      	cmp	r3, #9
 801c946:	d94b      	bls.n	801c9e0 <_svfiprintf_r+0x17c>
 801c948:	b1b0      	cbz	r0, 801c978 <_svfiprintf_r+0x114>
 801c94a:	9207      	str	r2, [sp, #28]
 801c94c:	e014      	b.n	801c978 <_svfiprintf_r+0x114>
 801c94e:	eba0 0308 	sub.w	r3, r0, r8
 801c952:	fa09 f303 	lsl.w	r3, r9, r3
 801c956:	4313      	orrs	r3, r2
 801c958:	9304      	str	r3, [sp, #16]
 801c95a:	46a2      	mov	sl, r4
 801c95c:	e7d2      	b.n	801c904 <_svfiprintf_r+0xa0>
 801c95e:	9b03      	ldr	r3, [sp, #12]
 801c960:	1d19      	adds	r1, r3, #4
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	9103      	str	r1, [sp, #12]
 801c966:	2b00      	cmp	r3, #0
 801c968:	bfbb      	ittet	lt
 801c96a:	425b      	neglt	r3, r3
 801c96c:	f042 0202 	orrlt.w	r2, r2, #2
 801c970:	9307      	strge	r3, [sp, #28]
 801c972:	9307      	strlt	r3, [sp, #28]
 801c974:	bfb8      	it	lt
 801c976:	9204      	strlt	r2, [sp, #16]
 801c978:	7823      	ldrb	r3, [r4, #0]
 801c97a:	2b2e      	cmp	r3, #46	@ 0x2e
 801c97c:	d10a      	bne.n	801c994 <_svfiprintf_r+0x130>
 801c97e:	7863      	ldrb	r3, [r4, #1]
 801c980:	2b2a      	cmp	r3, #42	@ 0x2a
 801c982:	d132      	bne.n	801c9ea <_svfiprintf_r+0x186>
 801c984:	9b03      	ldr	r3, [sp, #12]
 801c986:	1d1a      	adds	r2, r3, #4
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	9203      	str	r2, [sp, #12]
 801c98c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c990:	3402      	adds	r4, #2
 801c992:	9305      	str	r3, [sp, #20]
 801c994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ca58 <_svfiprintf_r+0x1f4>
 801c998:	7821      	ldrb	r1, [r4, #0]
 801c99a:	2203      	movs	r2, #3
 801c99c:	4650      	mov	r0, sl
 801c99e:	f7e3 fc4f 	bl	8000240 <memchr>
 801c9a2:	b138      	cbz	r0, 801c9b4 <_svfiprintf_r+0x150>
 801c9a4:	9b04      	ldr	r3, [sp, #16]
 801c9a6:	eba0 000a 	sub.w	r0, r0, sl
 801c9aa:	2240      	movs	r2, #64	@ 0x40
 801c9ac:	4082      	lsls	r2, r0
 801c9ae:	4313      	orrs	r3, r2
 801c9b0:	3401      	adds	r4, #1
 801c9b2:	9304      	str	r3, [sp, #16]
 801c9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9b8:	4824      	ldr	r0, [pc, #144]	@ (801ca4c <_svfiprintf_r+0x1e8>)
 801c9ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c9be:	2206      	movs	r2, #6
 801c9c0:	f7e3 fc3e 	bl	8000240 <memchr>
 801c9c4:	2800      	cmp	r0, #0
 801c9c6:	d036      	beq.n	801ca36 <_svfiprintf_r+0x1d2>
 801c9c8:	4b21      	ldr	r3, [pc, #132]	@ (801ca50 <_svfiprintf_r+0x1ec>)
 801c9ca:	bb1b      	cbnz	r3, 801ca14 <_svfiprintf_r+0x1b0>
 801c9cc:	9b03      	ldr	r3, [sp, #12]
 801c9ce:	3307      	adds	r3, #7
 801c9d0:	f023 0307 	bic.w	r3, r3, #7
 801c9d4:	3308      	adds	r3, #8
 801c9d6:	9303      	str	r3, [sp, #12]
 801c9d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9da:	4433      	add	r3, r6
 801c9dc:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9de:	e76a      	b.n	801c8b6 <_svfiprintf_r+0x52>
 801c9e0:	fb0c 3202 	mla	r2, ip, r2, r3
 801c9e4:	460c      	mov	r4, r1
 801c9e6:	2001      	movs	r0, #1
 801c9e8:	e7a8      	b.n	801c93c <_svfiprintf_r+0xd8>
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	3401      	adds	r4, #1
 801c9ee:	9305      	str	r3, [sp, #20]
 801c9f0:	4619      	mov	r1, r3
 801c9f2:	f04f 0c0a 	mov.w	ip, #10
 801c9f6:	4620      	mov	r0, r4
 801c9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c9fc:	3a30      	subs	r2, #48	@ 0x30
 801c9fe:	2a09      	cmp	r2, #9
 801ca00:	d903      	bls.n	801ca0a <_svfiprintf_r+0x1a6>
 801ca02:	2b00      	cmp	r3, #0
 801ca04:	d0c6      	beq.n	801c994 <_svfiprintf_r+0x130>
 801ca06:	9105      	str	r1, [sp, #20]
 801ca08:	e7c4      	b.n	801c994 <_svfiprintf_r+0x130>
 801ca0a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca0e:	4604      	mov	r4, r0
 801ca10:	2301      	movs	r3, #1
 801ca12:	e7f0      	b.n	801c9f6 <_svfiprintf_r+0x192>
 801ca14:	ab03      	add	r3, sp, #12
 801ca16:	9300      	str	r3, [sp, #0]
 801ca18:	462a      	mov	r2, r5
 801ca1a:	4b0e      	ldr	r3, [pc, #56]	@ (801ca54 <_svfiprintf_r+0x1f0>)
 801ca1c:	a904      	add	r1, sp, #16
 801ca1e:	4638      	mov	r0, r7
 801ca20:	f3af 8000 	nop.w
 801ca24:	1c42      	adds	r2, r0, #1
 801ca26:	4606      	mov	r6, r0
 801ca28:	d1d6      	bne.n	801c9d8 <_svfiprintf_r+0x174>
 801ca2a:	89ab      	ldrh	r3, [r5, #12]
 801ca2c:	065b      	lsls	r3, r3, #25
 801ca2e:	f53f af2d 	bmi.w	801c88c <_svfiprintf_r+0x28>
 801ca32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ca34:	e72c      	b.n	801c890 <_svfiprintf_r+0x2c>
 801ca36:	ab03      	add	r3, sp, #12
 801ca38:	9300      	str	r3, [sp, #0]
 801ca3a:	462a      	mov	r2, r5
 801ca3c:	4b05      	ldr	r3, [pc, #20]	@ (801ca54 <_svfiprintf_r+0x1f0>)
 801ca3e:	a904      	add	r1, sp, #16
 801ca40:	4638      	mov	r0, r7
 801ca42:	f000 f9bb 	bl	801cdbc <_printf_i>
 801ca46:	e7ed      	b.n	801ca24 <_svfiprintf_r+0x1c0>
 801ca48:	0801e863 	.word	0x0801e863
 801ca4c:	0801e86d 	.word	0x0801e86d
 801ca50:	00000000 	.word	0x00000000
 801ca54:	0801c7ad 	.word	0x0801c7ad
 801ca58:	0801e869 	.word	0x0801e869

0801ca5c <__sfputc_r>:
 801ca5c:	6893      	ldr	r3, [r2, #8]
 801ca5e:	3b01      	subs	r3, #1
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	b410      	push	{r4}
 801ca64:	6093      	str	r3, [r2, #8]
 801ca66:	da08      	bge.n	801ca7a <__sfputc_r+0x1e>
 801ca68:	6994      	ldr	r4, [r2, #24]
 801ca6a:	42a3      	cmp	r3, r4
 801ca6c:	db01      	blt.n	801ca72 <__sfputc_r+0x16>
 801ca6e:	290a      	cmp	r1, #10
 801ca70:	d103      	bne.n	801ca7a <__sfputc_r+0x1e>
 801ca72:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca76:	f7ff bc87 	b.w	801c388 <__swbuf_r>
 801ca7a:	6813      	ldr	r3, [r2, #0]
 801ca7c:	1c58      	adds	r0, r3, #1
 801ca7e:	6010      	str	r0, [r2, #0]
 801ca80:	7019      	strb	r1, [r3, #0]
 801ca82:	4608      	mov	r0, r1
 801ca84:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca88:	4770      	bx	lr

0801ca8a <__sfputs_r>:
 801ca8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca8c:	4606      	mov	r6, r0
 801ca8e:	460f      	mov	r7, r1
 801ca90:	4614      	mov	r4, r2
 801ca92:	18d5      	adds	r5, r2, r3
 801ca94:	42ac      	cmp	r4, r5
 801ca96:	d101      	bne.n	801ca9c <__sfputs_r+0x12>
 801ca98:	2000      	movs	r0, #0
 801ca9a:	e007      	b.n	801caac <__sfputs_r+0x22>
 801ca9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801caa0:	463a      	mov	r2, r7
 801caa2:	4630      	mov	r0, r6
 801caa4:	f7ff ffda 	bl	801ca5c <__sfputc_r>
 801caa8:	1c43      	adds	r3, r0, #1
 801caaa:	d1f3      	bne.n	801ca94 <__sfputs_r+0xa>
 801caac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cab0 <_vfiprintf_r>:
 801cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab4:	460d      	mov	r5, r1
 801cab6:	b09d      	sub	sp, #116	@ 0x74
 801cab8:	4614      	mov	r4, r2
 801caba:	4698      	mov	r8, r3
 801cabc:	4606      	mov	r6, r0
 801cabe:	b118      	cbz	r0, 801cac8 <_vfiprintf_r+0x18>
 801cac0:	6a03      	ldr	r3, [r0, #32]
 801cac2:	b90b      	cbnz	r3, 801cac8 <_vfiprintf_r+0x18>
 801cac4:	f7ff fb08 	bl	801c0d8 <__sinit>
 801cac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801caca:	07d9      	lsls	r1, r3, #31
 801cacc:	d405      	bmi.n	801cada <_vfiprintf_r+0x2a>
 801cace:	89ab      	ldrh	r3, [r5, #12]
 801cad0:	059a      	lsls	r2, r3, #22
 801cad2:	d402      	bmi.n	801cada <_vfiprintf_r+0x2a>
 801cad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cad6:	f7ff fdd4 	bl	801c682 <__retarget_lock_acquire_recursive>
 801cada:	89ab      	ldrh	r3, [r5, #12]
 801cadc:	071b      	lsls	r3, r3, #28
 801cade:	d501      	bpl.n	801cae4 <_vfiprintf_r+0x34>
 801cae0:	692b      	ldr	r3, [r5, #16]
 801cae2:	b99b      	cbnz	r3, 801cb0c <_vfiprintf_r+0x5c>
 801cae4:	4629      	mov	r1, r5
 801cae6:	4630      	mov	r0, r6
 801cae8:	f7ff fc8c 	bl	801c404 <__swsetup_r>
 801caec:	b170      	cbz	r0, 801cb0c <_vfiprintf_r+0x5c>
 801caee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801caf0:	07dc      	lsls	r4, r3, #31
 801caf2:	d504      	bpl.n	801cafe <_vfiprintf_r+0x4e>
 801caf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801caf8:	b01d      	add	sp, #116	@ 0x74
 801cafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cafe:	89ab      	ldrh	r3, [r5, #12]
 801cb00:	0598      	lsls	r0, r3, #22
 801cb02:	d4f7      	bmi.n	801caf4 <_vfiprintf_r+0x44>
 801cb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb06:	f7ff fdbd 	bl	801c684 <__retarget_lock_release_recursive>
 801cb0a:	e7f3      	b.n	801caf4 <_vfiprintf_r+0x44>
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb10:	2320      	movs	r3, #32
 801cb12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cb16:	f8cd 800c 	str.w	r8, [sp, #12]
 801cb1a:	2330      	movs	r3, #48	@ 0x30
 801cb1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cccc <_vfiprintf_r+0x21c>
 801cb20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cb24:	f04f 0901 	mov.w	r9, #1
 801cb28:	4623      	mov	r3, r4
 801cb2a:	469a      	mov	sl, r3
 801cb2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb30:	b10a      	cbz	r2, 801cb36 <_vfiprintf_r+0x86>
 801cb32:	2a25      	cmp	r2, #37	@ 0x25
 801cb34:	d1f9      	bne.n	801cb2a <_vfiprintf_r+0x7a>
 801cb36:	ebba 0b04 	subs.w	fp, sl, r4
 801cb3a:	d00b      	beq.n	801cb54 <_vfiprintf_r+0xa4>
 801cb3c:	465b      	mov	r3, fp
 801cb3e:	4622      	mov	r2, r4
 801cb40:	4629      	mov	r1, r5
 801cb42:	4630      	mov	r0, r6
 801cb44:	f7ff ffa1 	bl	801ca8a <__sfputs_r>
 801cb48:	3001      	adds	r0, #1
 801cb4a:	f000 80a7 	beq.w	801cc9c <_vfiprintf_r+0x1ec>
 801cb4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb50:	445a      	add	r2, fp
 801cb52:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb54:	f89a 3000 	ldrb.w	r3, [sl]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	f000 809f 	beq.w	801cc9c <_vfiprintf_r+0x1ec>
 801cb5e:	2300      	movs	r3, #0
 801cb60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cb64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cb68:	f10a 0a01 	add.w	sl, sl, #1
 801cb6c:	9304      	str	r3, [sp, #16]
 801cb6e:	9307      	str	r3, [sp, #28]
 801cb70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cb74:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb76:	4654      	mov	r4, sl
 801cb78:	2205      	movs	r2, #5
 801cb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb7e:	4853      	ldr	r0, [pc, #332]	@ (801cccc <_vfiprintf_r+0x21c>)
 801cb80:	f7e3 fb5e 	bl	8000240 <memchr>
 801cb84:	9a04      	ldr	r2, [sp, #16]
 801cb86:	b9d8      	cbnz	r0, 801cbc0 <_vfiprintf_r+0x110>
 801cb88:	06d1      	lsls	r1, r2, #27
 801cb8a:	bf44      	itt	mi
 801cb8c:	2320      	movmi	r3, #32
 801cb8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb92:	0713      	lsls	r3, r2, #28
 801cb94:	bf44      	itt	mi
 801cb96:	232b      	movmi	r3, #43	@ 0x2b
 801cb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb9c:	f89a 3000 	ldrb.w	r3, [sl]
 801cba0:	2b2a      	cmp	r3, #42	@ 0x2a
 801cba2:	d015      	beq.n	801cbd0 <_vfiprintf_r+0x120>
 801cba4:	9a07      	ldr	r2, [sp, #28]
 801cba6:	4654      	mov	r4, sl
 801cba8:	2000      	movs	r0, #0
 801cbaa:	f04f 0c0a 	mov.w	ip, #10
 801cbae:	4621      	mov	r1, r4
 801cbb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cbb4:	3b30      	subs	r3, #48	@ 0x30
 801cbb6:	2b09      	cmp	r3, #9
 801cbb8:	d94b      	bls.n	801cc52 <_vfiprintf_r+0x1a2>
 801cbba:	b1b0      	cbz	r0, 801cbea <_vfiprintf_r+0x13a>
 801cbbc:	9207      	str	r2, [sp, #28]
 801cbbe:	e014      	b.n	801cbea <_vfiprintf_r+0x13a>
 801cbc0:	eba0 0308 	sub.w	r3, r0, r8
 801cbc4:	fa09 f303 	lsl.w	r3, r9, r3
 801cbc8:	4313      	orrs	r3, r2
 801cbca:	9304      	str	r3, [sp, #16]
 801cbcc:	46a2      	mov	sl, r4
 801cbce:	e7d2      	b.n	801cb76 <_vfiprintf_r+0xc6>
 801cbd0:	9b03      	ldr	r3, [sp, #12]
 801cbd2:	1d19      	adds	r1, r3, #4
 801cbd4:	681b      	ldr	r3, [r3, #0]
 801cbd6:	9103      	str	r1, [sp, #12]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	bfbb      	ittet	lt
 801cbdc:	425b      	neglt	r3, r3
 801cbde:	f042 0202 	orrlt.w	r2, r2, #2
 801cbe2:	9307      	strge	r3, [sp, #28]
 801cbe4:	9307      	strlt	r3, [sp, #28]
 801cbe6:	bfb8      	it	lt
 801cbe8:	9204      	strlt	r2, [sp, #16]
 801cbea:	7823      	ldrb	r3, [r4, #0]
 801cbec:	2b2e      	cmp	r3, #46	@ 0x2e
 801cbee:	d10a      	bne.n	801cc06 <_vfiprintf_r+0x156>
 801cbf0:	7863      	ldrb	r3, [r4, #1]
 801cbf2:	2b2a      	cmp	r3, #42	@ 0x2a
 801cbf4:	d132      	bne.n	801cc5c <_vfiprintf_r+0x1ac>
 801cbf6:	9b03      	ldr	r3, [sp, #12]
 801cbf8:	1d1a      	adds	r2, r3, #4
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	9203      	str	r2, [sp, #12]
 801cbfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cc02:	3402      	adds	r4, #2
 801cc04:	9305      	str	r3, [sp, #20]
 801cc06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ccdc <_vfiprintf_r+0x22c>
 801cc0a:	7821      	ldrb	r1, [r4, #0]
 801cc0c:	2203      	movs	r2, #3
 801cc0e:	4650      	mov	r0, sl
 801cc10:	f7e3 fb16 	bl	8000240 <memchr>
 801cc14:	b138      	cbz	r0, 801cc26 <_vfiprintf_r+0x176>
 801cc16:	9b04      	ldr	r3, [sp, #16]
 801cc18:	eba0 000a 	sub.w	r0, r0, sl
 801cc1c:	2240      	movs	r2, #64	@ 0x40
 801cc1e:	4082      	lsls	r2, r0
 801cc20:	4313      	orrs	r3, r2
 801cc22:	3401      	adds	r4, #1
 801cc24:	9304      	str	r3, [sp, #16]
 801cc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc2a:	4829      	ldr	r0, [pc, #164]	@ (801ccd0 <_vfiprintf_r+0x220>)
 801cc2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cc30:	2206      	movs	r2, #6
 801cc32:	f7e3 fb05 	bl	8000240 <memchr>
 801cc36:	2800      	cmp	r0, #0
 801cc38:	d03f      	beq.n	801ccba <_vfiprintf_r+0x20a>
 801cc3a:	4b26      	ldr	r3, [pc, #152]	@ (801ccd4 <_vfiprintf_r+0x224>)
 801cc3c:	bb1b      	cbnz	r3, 801cc86 <_vfiprintf_r+0x1d6>
 801cc3e:	9b03      	ldr	r3, [sp, #12]
 801cc40:	3307      	adds	r3, #7
 801cc42:	f023 0307 	bic.w	r3, r3, #7
 801cc46:	3308      	adds	r3, #8
 801cc48:	9303      	str	r3, [sp, #12]
 801cc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc4c:	443b      	add	r3, r7
 801cc4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc50:	e76a      	b.n	801cb28 <_vfiprintf_r+0x78>
 801cc52:	fb0c 3202 	mla	r2, ip, r2, r3
 801cc56:	460c      	mov	r4, r1
 801cc58:	2001      	movs	r0, #1
 801cc5a:	e7a8      	b.n	801cbae <_vfiprintf_r+0xfe>
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	3401      	adds	r4, #1
 801cc60:	9305      	str	r3, [sp, #20]
 801cc62:	4619      	mov	r1, r3
 801cc64:	f04f 0c0a 	mov.w	ip, #10
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc6e:	3a30      	subs	r2, #48	@ 0x30
 801cc70:	2a09      	cmp	r2, #9
 801cc72:	d903      	bls.n	801cc7c <_vfiprintf_r+0x1cc>
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d0c6      	beq.n	801cc06 <_vfiprintf_r+0x156>
 801cc78:	9105      	str	r1, [sp, #20]
 801cc7a:	e7c4      	b.n	801cc06 <_vfiprintf_r+0x156>
 801cc7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc80:	4604      	mov	r4, r0
 801cc82:	2301      	movs	r3, #1
 801cc84:	e7f0      	b.n	801cc68 <_vfiprintf_r+0x1b8>
 801cc86:	ab03      	add	r3, sp, #12
 801cc88:	9300      	str	r3, [sp, #0]
 801cc8a:	462a      	mov	r2, r5
 801cc8c:	4b12      	ldr	r3, [pc, #72]	@ (801ccd8 <_vfiprintf_r+0x228>)
 801cc8e:	a904      	add	r1, sp, #16
 801cc90:	4630      	mov	r0, r6
 801cc92:	f3af 8000 	nop.w
 801cc96:	4607      	mov	r7, r0
 801cc98:	1c78      	adds	r0, r7, #1
 801cc9a:	d1d6      	bne.n	801cc4a <_vfiprintf_r+0x19a>
 801cc9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc9e:	07d9      	lsls	r1, r3, #31
 801cca0:	d405      	bmi.n	801ccae <_vfiprintf_r+0x1fe>
 801cca2:	89ab      	ldrh	r3, [r5, #12]
 801cca4:	059a      	lsls	r2, r3, #22
 801cca6:	d402      	bmi.n	801ccae <_vfiprintf_r+0x1fe>
 801cca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ccaa:	f7ff fceb 	bl	801c684 <__retarget_lock_release_recursive>
 801ccae:	89ab      	ldrh	r3, [r5, #12]
 801ccb0:	065b      	lsls	r3, r3, #25
 801ccb2:	f53f af1f 	bmi.w	801caf4 <_vfiprintf_r+0x44>
 801ccb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ccb8:	e71e      	b.n	801caf8 <_vfiprintf_r+0x48>
 801ccba:	ab03      	add	r3, sp, #12
 801ccbc:	9300      	str	r3, [sp, #0]
 801ccbe:	462a      	mov	r2, r5
 801ccc0:	4b05      	ldr	r3, [pc, #20]	@ (801ccd8 <_vfiprintf_r+0x228>)
 801ccc2:	a904      	add	r1, sp, #16
 801ccc4:	4630      	mov	r0, r6
 801ccc6:	f000 f879 	bl	801cdbc <_printf_i>
 801ccca:	e7e4      	b.n	801cc96 <_vfiprintf_r+0x1e6>
 801cccc:	0801e863 	.word	0x0801e863
 801ccd0:	0801e86d 	.word	0x0801e86d
 801ccd4:	00000000 	.word	0x00000000
 801ccd8:	0801ca8b 	.word	0x0801ca8b
 801ccdc:	0801e869 	.word	0x0801e869

0801cce0 <_printf_common>:
 801cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cce4:	4616      	mov	r6, r2
 801cce6:	4698      	mov	r8, r3
 801cce8:	688a      	ldr	r2, [r1, #8]
 801ccea:	690b      	ldr	r3, [r1, #16]
 801ccec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ccf0:	4293      	cmp	r3, r2
 801ccf2:	bfb8      	it	lt
 801ccf4:	4613      	movlt	r3, r2
 801ccf6:	6033      	str	r3, [r6, #0]
 801ccf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ccfc:	4607      	mov	r7, r0
 801ccfe:	460c      	mov	r4, r1
 801cd00:	b10a      	cbz	r2, 801cd06 <_printf_common+0x26>
 801cd02:	3301      	adds	r3, #1
 801cd04:	6033      	str	r3, [r6, #0]
 801cd06:	6823      	ldr	r3, [r4, #0]
 801cd08:	0699      	lsls	r1, r3, #26
 801cd0a:	bf42      	ittt	mi
 801cd0c:	6833      	ldrmi	r3, [r6, #0]
 801cd0e:	3302      	addmi	r3, #2
 801cd10:	6033      	strmi	r3, [r6, #0]
 801cd12:	6825      	ldr	r5, [r4, #0]
 801cd14:	f015 0506 	ands.w	r5, r5, #6
 801cd18:	d106      	bne.n	801cd28 <_printf_common+0x48>
 801cd1a:	f104 0a19 	add.w	sl, r4, #25
 801cd1e:	68e3      	ldr	r3, [r4, #12]
 801cd20:	6832      	ldr	r2, [r6, #0]
 801cd22:	1a9b      	subs	r3, r3, r2
 801cd24:	42ab      	cmp	r3, r5
 801cd26:	dc26      	bgt.n	801cd76 <_printf_common+0x96>
 801cd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cd2c:	6822      	ldr	r2, [r4, #0]
 801cd2e:	3b00      	subs	r3, #0
 801cd30:	bf18      	it	ne
 801cd32:	2301      	movne	r3, #1
 801cd34:	0692      	lsls	r2, r2, #26
 801cd36:	d42b      	bmi.n	801cd90 <_printf_common+0xb0>
 801cd38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cd3c:	4641      	mov	r1, r8
 801cd3e:	4638      	mov	r0, r7
 801cd40:	47c8      	blx	r9
 801cd42:	3001      	adds	r0, #1
 801cd44:	d01e      	beq.n	801cd84 <_printf_common+0xa4>
 801cd46:	6823      	ldr	r3, [r4, #0]
 801cd48:	6922      	ldr	r2, [r4, #16]
 801cd4a:	f003 0306 	and.w	r3, r3, #6
 801cd4e:	2b04      	cmp	r3, #4
 801cd50:	bf02      	ittt	eq
 801cd52:	68e5      	ldreq	r5, [r4, #12]
 801cd54:	6833      	ldreq	r3, [r6, #0]
 801cd56:	1aed      	subeq	r5, r5, r3
 801cd58:	68a3      	ldr	r3, [r4, #8]
 801cd5a:	bf0c      	ite	eq
 801cd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cd60:	2500      	movne	r5, #0
 801cd62:	4293      	cmp	r3, r2
 801cd64:	bfc4      	itt	gt
 801cd66:	1a9b      	subgt	r3, r3, r2
 801cd68:	18ed      	addgt	r5, r5, r3
 801cd6a:	2600      	movs	r6, #0
 801cd6c:	341a      	adds	r4, #26
 801cd6e:	42b5      	cmp	r5, r6
 801cd70:	d11a      	bne.n	801cda8 <_printf_common+0xc8>
 801cd72:	2000      	movs	r0, #0
 801cd74:	e008      	b.n	801cd88 <_printf_common+0xa8>
 801cd76:	2301      	movs	r3, #1
 801cd78:	4652      	mov	r2, sl
 801cd7a:	4641      	mov	r1, r8
 801cd7c:	4638      	mov	r0, r7
 801cd7e:	47c8      	blx	r9
 801cd80:	3001      	adds	r0, #1
 801cd82:	d103      	bne.n	801cd8c <_printf_common+0xac>
 801cd84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd8c:	3501      	adds	r5, #1
 801cd8e:	e7c6      	b.n	801cd1e <_printf_common+0x3e>
 801cd90:	18e1      	adds	r1, r4, r3
 801cd92:	1c5a      	adds	r2, r3, #1
 801cd94:	2030      	movs	r0, #48	@ 0x30
 801cd96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cd9a:	4422      	add	r2, r4
 801cd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cda0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cda4:	3302      	adds	r3, #2
 801cda6:	e7c7      	b.n	801cd38 <_printf_common+0x58>
 801cda8:	2301      	movs	r3, #1
 801cdaa:	4622      	mov	r2, r4
 801cdac:	4641      	mov	r1, r8
 801cdae:	4638      	mov	r0, r7
 801cdb0:	47c8      	blx	r9
 801cdb2:	3001      	adds	r0, #1
 801cdb4:	d0e6      	beq.n	801cd84 <_printf_common+0xa4>
 801cdb6:	3601      	adds	r6, #1
 801cdb8:	e7d9      	b.n	801cd6e <_printf_common+0x8e>
	...

0801cdbc <_printf_i>:
 801cdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cdc0:	7e0f      	ldrb	r7, [r1, #24]
 801cdc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cdc4:	2f78      	cmp	r7, #120	@ 0x78
 801cdc6:	4691      	mov	r9, r2
 801cdc8:	4680      	mov	r8, r0
 801cdca:	460c      	mov	r4, r1
 801cdcc:	469a      	mov	sl, r3
 801cdce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cdd2:	d807      	bhi.n	801cde4 <_printf_i+0x28>
 801cdd4:	2f62      	cmp	r7, #98	@ 0x62
 801cdd6:	d80a      	bhi.n	801cdee <_printf_i+0x32>
 801cdd8:	2f00      	cmp	r7, #0
 801cdda:	f000 80d1 	beq.w	801cf80 <_printf_i+0x1c4>
 801cdde:	2f58      	cmp	r7, #88	@ 0x58
 801cde0:	f000 80b8 	beq.w	801cf54 <_printf_i+0x198>
 801cde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cde8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cdec:	e03a      	b.n	801ce64 <_printf_i+0xa8>
 801cdee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cdf2:	2b15      	cmp	r3, #21
 801cdf4:	d8f6      	bhi.n	801cde4 <_printf_i+0x28>
 801cdf6:	a101      	add	r1, pc, #4	@ (adr r1, 801cdfc <_printf_i+0x40>)
 801cdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cdfc:	0801ce55 	.word	0x0801ce55
 801ce00:	0801ce69 	.word	0x0801ce69
 801ce04:	0801cde5 	.word	0x0801cde5
 801ce08:	0801cde5 	.word	0x0801cde5
 801ce0c:	0801cde5 	.word	0x0801cde5
 801ce10:	0801cde5 	.word	0x0801cde5
 801ce14:	0801ce69 	.word	0x0801ce69
 801ce18:	0801cde5 	.word	0x0801cde5
 801ce1c:	0801cde5 	.word	0x0801cde5
 801ce20:	0801cde5 	.word	0x0801cde5
 801ce24:	0801cde5 	.word	0x0801cde5
 801ce28:	0801cf67 	.word	0x0801cf67
 801ce2c:	0801ce93 	.word	0x0801ce93
 801ce30:	0801cf21 	.word	0x0801cf21
 801ce34:	0801cde5 	.word	0x0801cde5
 801ce38:	0801cde5 	.word	0x0801cde5
 801ce3c:	0801cf89 	.word	0x0801cf89
 801ce40:	0801cde5 	.word	0x0801cde5
 801ce44:	0801ce93 	.word	0x0801ce93
 801ce48:	0801cde5 	.word	0x0801cde5
 801ce4c:	0801cde5 	.word	0x0801cde5
 801ce50:	0801cf29 	.word	0x0801cf29
 801ce54:	6833      	ldr	r3, [r6, #0]
 801ce56:	1d1a      	adds	r2, r3, #4
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	6032      	str	r2, [r6, #0]
 801ce5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ce60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ce64:	2301      	movs	r3, #1
 801ce66:	e09c      	b.n	801cfa2 <_printf_i+0x1e6>
 801ce68:	6833      	ldr	r3, [r6, #0]
 801ce6a:	6820      	ldr	r0, [r4, #0]
 801ce6c:	1d19      	adds	r1, r3, #4
 801ce6e:	6031      	str	r1, [r6, #0]
 801ce70:	0606      	lsls	r6, r0, #24
 801ce72:	d501      	bpl.n	801ce78 <_printf_i+0xbc>
 801ce74:	681d      	ldr	r5, [r3, #0]
 801ce76:	e003      	b.n	801ce80 <_printf_i+0xc4>
 801ce78:	0645      	lsls	r5, r0, #25
 801ce7a:	d5fb      	bpl.n	801ce74 <_printf_i+0xb8>
 801ce7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ce80:	2d00      	cmp	r5, #0
 801ce82:	da03      	bge.n	801ce8c <_printf_i+0xd0>
 801ce84:	232d      	movs	r3, #45	@ 0x2d
 801ce86:	426d      	negs	r5, r5
 801ce88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce8c:	4858      	ldr	r0, [pc, #352]	@ (801cff0 <_printf_i+0x234>)
 801ce8e:	230a      	movs	r3, #10
 801ce90:	e011      	b.n	801ceb6 <_printf_i+0xfa>
 801ce92:	6821      	ldr	r1, [r4, #0]
 801ce94:	6833      	ldr	r3, [r6, #0]
 801ce96:	0608      	lsls	r0, r1, #24
 801ce98:	f853 5b04 	ldr.w	r5, [r3], #4
 801ce9c:	d402      	bmi.n	801cea4 <_printf_i+0xe8>
 801ce9e:	0649      	lsls	r1, r1, #25
 801cea0:	bf48      	it	mi
 801cea2:	b2ad      	uxthmi	r5, r5
 801cea4:	2f6f      	cmp	r7, #111	@ 0x6f
 801cea6:	4852      	ldr	r0, [pc, #328]	@ (801cff0 <_printf_i+0x234>)
 801cea8:	6033      	str	r3, [r6, #0]
 801ceaa:	bf14      	ite	ne
 801ceac:	230a      	movne	r3, #10
 801ceae:	2308      	moveq	r3, #8
 801ceb0:	2100      	movs	r1, #0
 801ceb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ceb6:	6866      	ldr	r6, [r4, #4]
 801ceb8:	60a6      	str	r6, [r4, #8]
 801ceba:	2e00      	cmp	r6, #0
 801cebc:	db05      	blt.n	801ceca <_printf_i+0x10e>
 801cebe:	6821      	ldr	r1, [r4, #0]
 801cec0:	432e      	orrs	r6, r5
 801cec2:	f021 0104 	bic.w	r1, r1, #4
 801cec6:	6021      	str	r1, [r4, #0]
 801cec8:	d04b      	beq.n	801cf62 <_printf_i+0x1a6>
 801ceca:	4616      	mov	r6, r2
 801cecc:	fbb5 f1f3 	udiv	r1, r5, r3
 801ced0:	fb03 5711 	mls	r7, r3, r1, r5
 801ced4:	5dc7      	ldrb	r7, [r0, r7]
 801ced6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ceda:	462f      	mov	r7, r5
 801cedc:	42bb      	cmp	r3, r7
 801cede:	460d      	mov	r5, r1
 801cee0:	d9f4      	bls.n	801cecc <_printf_i+0x110>
 801cee2:	2b08      	cmp	r3, #8
 801cee4:	d10b      	bne.n	801cefe <_printf_i+0x142>
 801cee6:	6823      	ldr	r3, [r4, #0]
 801cee8:	07df      	lsls	r7, r3, #31
 801ceea:	d508      	bpl.n	801cefe <_printf_i+0x142>
 801ceec:	6923      	ldr	r3, [r4, #16]
 801ceee:	6861      	ldr	r1, [r4, #4]
 801cef0:	4299      	cmp	r1, r3
 801cef2:	bfde      	ittt	le
 801cef4:	2330      	movle	r3, #48	@ 0x30
 801cef6:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cefa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801cefe:	1b92      	subs	r2, r2, r6
 801cf00:	6122      	str	r2, [r4, #16]
 801cf02:	f8cd a000 	str.w	sl, [sp]
 801cf06:	464b      	mov	r3, r9
 801cf08:	aa03      	add	r2, sp, #12
 801cf0a:	4621      	mov	r1, r4
 801cf0c:	4640      	mov	r0, r8
 801cf0e:	f7ff fee7 	bl	801cce0 <_printf_common>
 801cf12:	3001      	adds	r0, #1
 801cf14:	d14a      	bne.n	801cfac <_printf_i+0x1f0>
 801cf16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf1a:	b004      	add	sp, #16
 801cf1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf20:	6823      	ldr	r3, [r4, #0]
 801cf22:	f043 0320 	orr.w	r3, r3, #32
 801cf26:	6023      	str	r3, [r4, #0]
 801cf28:	4832      	ldr	r0, [pc, #200]	@ (801cff4 <_printf_i+0x238>)
 801cf2a:	2778      	movs	r7, #120	@ 0x78
 801cf2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cf30:	6823      	ldr	r3, [r4, #0]
 801cf32:	6831      	ldr	r1, [r6, #0]
 801cf34:	061f      	lsls	r7, r3, #24
 801cf36:	f851 5b04 	ldr.w	r5, [r1], #4
 801cf3a:	d402      	bmi.n	801cf42 <_printf_i+0x186>
 801cf3c:	065f      	lsls	r7, r3, #25
 801cf3e:	bf48      	it	mi
 801cf40:	b2ad      	uxthmi	r5, r5
 801cf42:	6031      	str	r1, [r6, #0]
 801cf44:	07d9      	lsls	r1, r3, #31
 801cf46:	bf44      	itt	mi
 801cf48:	f043 0320 	orrmi.w	r3, r3, #32
 801cf4c:	6023      	strmi	r3, [r4, #0]
 801cf4e:	b11d      	cbz	r5, 801cf58 <_printf_i+0x19c>
 801cf50:	2310      	movs	r3, #16
 801cf52:	e7ad      	b.n	801ceb0 <_printf_i+0xf4>
 801cf54:	4826      	ldr	r0, [pc, #152]	@ (801cff0 <_printf_i+0x234>)
 801cf56:	e7e9      	b.n	801cf2c <_printf_i+0x170>
 801cf58:	6823      	ldr	r3, [r4, #0]
 801cf5a:	f023 0320 	bic.w	r3, r3, #32
 801cf5e:	6023      	str	r3, [r4, #0]
 801cf60:	e7f6      	b.n	801cf50 <_printf_i+0x194>
 801cf62:	4616      	mov	r6, r2
 801cf64:	e7bd      	b.n	801cee2 <_printf_i+0x126>
 801cf66:	6833      	ldr	r3, [r6, #0]
 801cf68:	6825      	ldr	r5, [r4, #0]
 801cf6a:	6961      	ldr	r1, [r4, #20]
 801cf6c:	1d18      	adds	r0, r3, #4
 801cf6e:	6030      	str	r0, [r6, #0]
 801cf70:	062e      	lsls	r6, r5, #24
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	d501      	bpl.n	801cf7a <_printf_i+0x1be>
 801cf76:	6019      	str	r1, [r3, #0]
 801cf78:	e002      	b.n	801cf80 <_printf_i+0x1c4>
 801cf7a:	0668      	lsls	r0, r5, #25
 801cf7c:	d5fb      	bpl.n	801cf76 <_printf_i+0x1ba>
 801cf7e:	8019      	strh	r1, [r3, #0]
 801cf80:	2300      	movs	r3, #0
 801cf82:	6123      	str	r3, [r4, #16]
 801cf84:	4616      	mov	r6, r2
 801cf86:	e7bc      	b.n	801cf02 <_printf_i+0x146>
 801cf88:	6833      	ldr	r3, [r6, #0]
 801cf8a:	1d1a      	adds	r2, r3, #4
 801cf8c:	6032      	str	r2, [r6, #0]
 801cf8e:	681e      	ldr	r6, [r3, #0]
 801cf90:	6862      	ldr	r2, [r4, #4]
 801cf92:	2100      	movs	r1, #0
 801cf94:	4630      	mov	r0, r6
 801cf96:	f7e3 f953 	bl	8000240 <memchr>
 801cf9a:	b108      	cbz	r0, 801cfa0 <_printf_i+0x1e4>
 801cf9c:	1b80      	subs	r0, r0, r6
 801cf9e:	6060      	str	r0, [r4, #4]
 801cfa0:	6863      	ldr	r3, [r4, #4]
 801cfa2:	6123      	str	r3, [r4, #16]
 801cfa4:	2300      	movs	r3, #0
 801cfa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cfaa:	e7aa      	b.n	801cf02 <_printf_i+0x146>
 801cfac:	6923      	ldr	r3, [r4, #16]
 801cfae:	4632      	mov	r2, r6
 801cfb0:	4649      	mov	r1, r9
 801cfb2:	4640      	mov	r0, r8
 801cfb4:	47d0      	blx	sl
 801cfb6:	3001      	adds	r0, #1
 801cfb8:	d0ad      	beq.n	801cf16 <_printf_i+0x15a>
 801cfba:	6823      	ldr	r3, [r4, #0]
 801cfbc:	079b      	lsls	r3, r3, #30
 801cfbe:	d413      	bmi.n	801cfe8 <_printf_i+0x22c>
 801cfc0:	68e0      	ldr	r0, [r4, #12]
 801cfc2:	9b03      	ldr	r3, [sp, #12]
 801cfc4:	4298      	cmp	r0, r3
 801cfc6:	bfb8      	it	lt
 801cfc8:	4618      	movlt	r0, r3
 801cfca:	e7a6      	b.n	801cf1a <_printf_i+0x15e>
 801cfcc:	2301      	movs	r3, #1
 801cfce:	4632      	mov	r2, r6
 801cfd0:	4649      	mov	r1, r9
 801cfd2:	4640      	mov	r0, r8
 801cfd4:	47d0      	blx	sl
 801cfd6:	3001      	adds	r0, #1
 801cfd8:	d09d      	beq.n	801cf16 <_printf_i+0x15a>
 801cfda:	3501      	adds	r5, #1
 801cfdc:	68e3      	ldr	r3, [r4, #12]
 801cfde:	9903      	ldr	r1, [sp, #12]
 801cfe0:	1a5b      	subs	r3, r3, r1
 801cfe2:	42ab      	cmp	r3, r5
 801cfe4:	dcf2      	bgt.n	801cfcc <_printf_i+0x210>
 801cfe6:	e7eb      	b.n	801cfc0 <_printf_i+0x204>
 801cfe8:	2500      	movs	r5, #0
 801cfea:	f104 0619 	add.w	r6, r4, #25
 801cfee:	e7f5      	b.n	801cfdc <_printf_i+0x220>
 801cff0:	0801e874 	.word	0x0801e874
 801cff4:	0801e885 	.word	0x0801e885

0801cff8 <__sflush_r>:
 801cff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d000:	0716      	lsls	r6, r2, #28
 801d002:	4605      	mov	r5, r0
 801d004:	460c      	mov	r4, r1
 801d006:	d454      	bmi.n	801d0b2 <__sflush_r+0xba>
 801d008:	684b      	ldr	r3, [r1, #4]
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	dc02      	bgt.n	801d014 <__sflush_r+0x1c>
 801d00e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d010:	2b00      	cmp	r3, #0
 801d012:	dd48      	ble.n	801d0a6 <__sflush_r+0xae>
 801d014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d016:	2e00      	cmp	r6, #0
 801d018:	d045      	beq.n	801d0a6 <__sflush_r+0xae>
 801d01a:	2300      	movs	r3, #0
 801d01c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d020:	682f      	ldr	r7, [r5, #0]
 801d022:	6a21      	ldr	r1, [r4, #32]
 801d024:	602b      	str	r3, [r5, #0]
 801d026:	d030      	beq.n	801d08a <__sflush_r+0x92>
 801d028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d02a:	89a3      	ldrh	r3, [r4, #12]
 801d02c:	0759      	lsls	r1, r3, #29
 801d02e:	d505      	bpl.n	801d03c <__sflush_r+0x44>
 801d030:	6863      	ldr	r3, [r4, #4]
 801d032:	1ad2      	subs	r2, r2, r3
 801d034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d036:	b10b      	cbz	r3, 801d03c <__sflush_r+0x44>
 801d038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d03a:	1ad2      	subs	r2, r2, r3
 801d03c:	2300      	movs	r3, #0
 801d03e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d040:	6a21      	ldr	r1, [r4, #32]
 801d042:	4628      	mov	r0, r5
 801d044:	47b0      	blx	r6
 801d046:	1c43      	adds	r3, r0, #1
 801d048:	89a3      	ldrh	r3, [r4, #12]
 801d04a:	d106      	bne.n	801d05a <__sflush_r+0x62>
 801d04c:	6829      	ldr	r1, [r5, #0]
 801d04e:	291d      	cmp	r1, #29
 801d050:	d82b      	bhi.n	801d0aa <__sflush_r+0xb2>
 801d052:	4a2a      	ldr	r2, [pc, #168]	@ (801d0fc <__sflush_r+0x104>)
 801d054:	40ca      	lsrs	r2, r1
 801d056:	07d6      	lsls	r6, r2, #31
 801d058:	d527      	bpl.n	801d0aa <__sflush_r+0xb2>
 801d05a:	2200      	movs	r2, #0
 801d05c:	6062      	str	r2, [r4, #4]
 801d05e:	04d9      	lsls	r1, r3, #19
 801d060:	6922      	ldr	r2, [r4, #16]
 801d062:	6022      	str	r2, [r4, #0]
 801d064:	d504      	bpl.n	801d070 <__sflush_r+0x78>
 801d066:	1c42      	adds	r2, r0, #1
 801d068:	d101      	bne.n	801d06e <__sflush_r+0x76>
 801d06a:	682b      	ldr	r3, [r5, #0]
 801d06c:	b903      	cbnz	r3, 801d070 <__sflush_r+0x78>
 801d06e:	6560      	str	r0, [r4, #84]	@ 0x54
 801d070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d072:	602f      	str	r7, [r5, #0]
 801d074:	b1b9      	cbz	r1, 801d0a6 <__sflush_r+0xae>
 801d076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d07a:	4299      	cmp	r1, r3
 801d07c:	d002      	beq.n	801d084 <__sflush_r+0x8c>
 801d07e:	4628      	mov	r0, r5
 801d080:	f7ff fb42 	bl	801c708 <_free_r>
 801d084:	2300      	movs	r3, #0
 801d086:	6363      	str	r3, [r4, #52]	@ 0x34
 801d088:	e00d      	b.n	801d0a6 <__sflush_r+0xae>
 801d08a:	2301      	movs	r3, #1
 801d08c:	4628      	mov	r0, r5
 801d08e:	47b0      	blx	r6
 801d090:	4602      	mov	r2, r0
 801d092:	1c50      	adds	r0, r2, #1
 801d094:	d1c9      	bne.n	801d02a <__sflush_r+0x32>
 801d096:	682b      	ldr	r3, [r5, #0]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d0c6      	beq.n	801d02a <__sflush_r+0x32>
 801d09c:	2b1d      	cmp	r3, #29
 801d09e:	d001      	beq.n	801d0a4 <__sflush_r+0xac>
 801d0a0:	2b16      	cmp	r3, #22
 801d0a2:	d11e      	bne.n	801d0e2 <__sflush_r+0xea>
 801d0a4:	602f      	str	r7, [r5, #0]
 801d0a6:	2000      	movs	r0, #0
 801d0a8:	e022      	b.n	801d0f0 <__sflush_r+0xf8>
 801d0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d0ae:	b21b      	sxth	r3, r3
 801d0b0:	e01b      	b.n	801d0ea <__sflush_r+0xf2>
 801d0b2:	690f      	ldr	r7, [r1, #16]
 801d0b4:	2f00      	cmp	r7, #0
 801d0b6:	d0f6      	beq.n	801d0a6 <__sflush_r+0xae>
 801d0b8:	0793      	lsls	r3, r2, #30
 801d0ba:	680e      	ldr	r6, [r1, #0]
 801d0bc:	bf08      	it	eq
 801d0be:	694b      	ldreq	r3, [r1, #20]
 801d0c0:	600f      	str	r7, [r1, #0]
 801d0c2:	bf18      	it	ne
 801d0c4:	2300      	movne	r3, #0
 801d0c6:	eba6 0807 	sub.w	r8, r6, r7
 801d0ca:	608b      	str	r3, [r1, #8]
 801d0cc:	f1b8 0f00 	cmp.w	r8, #0
 801d0d0:	dde9      	ble.n	801d0a6 <__sflush_r+0xae>
 801d0d2:	6a21      	ldr	r1, [r4, #32]
 801d0d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d0d6:	4643      	mov	r3, r8
 801d0d8:	463a      	mov	r2, r7
 801d0da:	4628      	mov	r0, r5
 801d0dc:	47b0      	blx	r6
 801d0de:	2800      	cmp	r0, #0
 801d0e0:	dc08      	bgt.n	801d0f4 <__sflush_r+0xfc>
 801d0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d0ea:	81a3      	strh	r3, [r4, #12]
 801d0ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0f4:	4407      	add	r7, r0
 801d0f6:	eba8 0800 	sub.w	r8, r8, r0
 801d0fa:	e7e7      	b.n	801d0cc <__sflush_r+0xd4>
 801d0fc:	20400001 	.word	0x20400001

0801d100 <_fflush_r>:
 801d100:	b538      	push	{r3, r4, r5, lr}
 801d102:	690b      	ldr	r3, [r1, #16]
 801d104:	4605      	mov	r5, r0
 801d106:	460c      	mov	r4, r1
 801d108:	b913      	cbnz	r3, 801d110 <_fflush_r+0x10>
 801d10a:	2500      	movs	r5, #0
 801d10c:	4628      	mov	r0, r5
 801d10e:	bd38      	pop	{r3, r4, r5, pc}
 801d110:	b118      	cbz	r0, 801d11a <_fflush_r+0x1a>
 801d112:	6a03      	ldr	r3, [r0, #32]
 801d114:	b90b      	cbnz	r3, 801d11a <_fflush_r+0x1a>
 801d116:	f7fe ffdf 	bl	801c0d8 <__sinit>
 801d11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d0f3      	beq.n	801d10a <_fflush_r+0xa>
 801d122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d124:	07d0      	lsls	r0, r2, #31
 801d126:	d404      	bmi.n	801d132 <_fflush_r+0x32>
 801d128:	0599      	lsls	r1, r3, #22
 801d12a:	d402      	bmi.n	801d132 <_fflush_r+0x32>
 801d12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d12e:	f7ff faa8 	bl	801c682 <__retarget_lock_acquire_recursive>
 801d132:	4628      	mov	r0, r5
 801d134:	4621      	mov	r1, r4
 801d136:	f7ff ff5f 	bl	801cff8 <__sflush_r>
 801d13a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d13c:	07da      	lsls	r2, r3, #31
 801d13e:	4605      	mov	r5, r0
 801d140:	d4e4      	bmi.n	801d10c <_fflush_r+0xc>
 801d142:	89a3      	ldrh	r3, [r4, #12]
 801d144:	059b      	lsls	r3, r3, #22
 801d146:	d4e1      	bmi.n	801d10c <_fflush_r+0xc>
 801d148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d14a:	f7ff fa9b 	bl	801c684 <__retarget_lock_release_recursive>
 801d14e:	e7dd      	b.n	801d10c <_fflush_r+0xc>

0801d150 <fiprintf>:
 801d150:	b40e      	push	{r1, r2, r3}
 801d152:	b503      	push	{r0, r1, lr}
 801d154:	4601      	mov	r1, r0
 801d156:	ab03      	add	r3, sp, #12
 801d158:	4805      	ldr	r0, [pc, #20]	@ (801d170 <fiprintf+0x20>)
 801d15a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d15e:	6800      	ldr	r0, [r0, #0]
 801d160:	9301      	str	r3, [sp, #4]
 801d162:	f7ff fca5 	bl	801cab0 <_vfiprintf_r>
 801d166:	b002      	add	sp, #8
 801d168:	f85d eb04 	ldr.w	lr, [sp], #4
 801d16c:	b003      	add	sp, #12
 801d16e:	4770      	bx	lr
 801d170:	2000090c 	.word	0x2000090c

0801d174 <__swhatbuf_r>:
 801d174:	b570      	push	{r4, r5, r6, lr}
 801d176:	460c      	mov	r4, r1
 801d178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d17c:	2900      	cmp	r1, #0
 801d17e:	b096      	sub	sp, #88	@ 0x58
 801d180:	4615      	mov	r5, r2
 801d182:	461e      	mov	r6, r3
 801d184:	da0d      	bge.n	801d1a2 <__swhatbuf_r+0x2e>
 801d186:	89a3      	ldrh	r3, [r4, #12]
 801d188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d18c:	f04f 0100 	mov.w	r1, #0
 801d190:	bf14      	ite	ne
 801d192:	2340      	movne	r3, #64	@ 0x40
 801d194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d198:	2000      	movs	r0, #0
 801d19a:	6031      	str	r1, [r6, #0]
 801d19c:	602b      	str	r3, [r5, #0]
 801d19e:	b016      	add	sp, #88	@ 0x58
 801d1a0:	bd70      	pop	{r4, r5, r6, pc}
 801d1a2:	466a      	mov	r2, sp
 801d1a4:	f000 f848 	bl	801d238 <_fstat_r>
 801d1a8:	2800      	cmp	r0, #0
 801d1aa:	dbec      	blt.n	801d186 <__swhatbuf_r+0x12>
 801d1ac:	9901      	ldr	r1, [sp, #4]
 801d1ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d1b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d1b6:	4259      	negs	r1, r3
 801d1b8:	4159      	adcs	r1, r3
 801d1ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d1be:	e7eb      	b.n	801d198 <__swhatbuf_r+0x24>

0801d1c0 <__smakebuf_r>:
 801d1c0:	898b      	ldrh	r3, [r1, #12]
 801d1c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d1c4:	079d      	lsls	r5, r3, #30
 801d1c6:	4606      	mov	r6, r0
 801d1c8:	460c      	mov	r4, r1
 801d1ca:	d507      	bpl.n	801d1dc <__smakebuf_r+0x1c>
 801d1cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d1d0:	6023      	str	r3, [r4, #0]
 801d1d2:	6123      	str	r3, [r4, #16]
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	6163      	str	r3, [r4, #20]
 801d1d8:	b003      	add	sp, #12
 801d1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1dc:	ab01      	add	r3, sp, #4
 801d1de:	466a      	mov	r2, sp
 801d1e0:	f7ff ffc8 	bl	801d174 <__swhatbuf_r>
 801d1e4:	9f00      	ldr	r7, [sp, #0]
 801d1e6:	4605      	mov	r5, r0
 801d1e8:	4639      	mov	r1, r7
 801d1ea:	4630      	mov	r0, r6
 801d1ec:	f7fe fd42 	bl	801bc74 <_malloc_r>
 801d1f0:	b948      	cbnz	r0, 801d206 <__smakebuf_r+0x46>
 801d1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1f6:	059a      	lsls	r2, r3, #22
 801d1f8:	d4ee      	bmi.n	801d1d8 <__smakebuf_r+0x18>
 801d1fa:	f023 0303 	bic.w	r3, r3, #3
 801d1fe:	f043 0302 	orr.w	r3, r3, #2
 801d202:	81a3      	strh	r3, [r4, #12]
 801d204:	e7e2      	b.n	801d1cc <__smakebuf_r+0xc>
 801d206:	89a3      	ldrh	r3, [r4, #12]
 801d208:	6020      	str	r0, [r4, #0]
 801d20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d20e:	81a3      	strh	r3, [r4, #12]
 801d210:	9b01      	ldr	r3, [sp, #4]
 801d212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d216:	b15b      	cbz	r3, 801d230 <__smakebuf_r+0x70>
 801d218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d21c:	4630      	mov	r0, r6
 801d21e:	f000 f81d 	bl	801d25c <_isatty_r>
 801d222:	b128      	cbz	r0, 801d230 <__smakebuf_r+0x70>
 801d224:	89a3      	ldrh	r3, [r4, #12]
 801d226:	f023 0303 	bic.w	r3, r3, #3
 801d22a:	f043 0301 	orr.w	r3, r3, #1
 801d22e:	81a3      	strh	r3, [r4, #12]
 801d230:	89a3      	ldrh	r3, [r4, #12]
 801d232:	431d      	orrs	r5, r3
 801d234:	81a5      	strh	r5, [r4, #12]
 801d236:	e7cf      	b.n	801d1d8 <__smakebuf_r+0x18>

0801d238 <_fstat_r>:
 801d238:	b538      	push	{r3, r4, r5, lr}
 801d23a:	4d07      	ldr	r5, [pc, #28]	@ (801d258 <_fstat_r+0x20>)
 801d23c:	2300      	movs	r3, #0
 801d23e:	4604      	mov	r4, r0
 801d240:	4608      	mov	r0, r1
 801d242:	4611      	mov	r1, r2
 801d244:	602b      	str	r3, [r5, #0]
 801d246:	f7e6 fec1 	bl	8003fcc <_fstat>
 801d24a:	1c43      	adds	r3, r0, #1
 801d24c:	d102      	bne.n	801d254 <_fstat_r+0x1c>
 801d24e:	682b      	ldr	r3, [r5, #0]
 801d250:	b103      	cbz	r3, 801d254 <_fstat_r+0x1c>
 801d252:	6023      	str	r3, [r4, #0]
 801d254:	bd38      	pop	{r3, r4, r5, pc}
 801d256:	bf00      	nop
 801d258:	20011ce0 	.word	0x20011ce0

0801d25c <_isatty_r>:
 801d25c:	b538      	push	{r3, r4, r5, lr}
 801d25e:	4d06      	ldr	r5, [pc, #24]	@ (801d278 <_isatty_r+0x1c>)
 801d260:	2300      	movs	r3, #0
 801d262:	4604      	mov	r4, r0
 801d264:	4608      	mov	r0, r1
 801d266:	602b      	str	r3, [r5, #0]
 801d268:	f7e6 fec0 	bl	8003fec <_isatty>
 801d26c:	1c43      	adds	r3, r0, #1
 801d26e:	d102      	bne.n	801d276 <_isatty_r+0x1a>
 801d270:	682b      	ldr	r3, [r5, #0]
 801d272:	b103      	cbz	r3, 801d276 <_isatty_r+0x1a>
 801d274:	6023      	str	r3, [r4, #0]
 801d276:	bd38      	pop	{r3, r4, r5, pc}
 801d278:	20011ce0 	.word	0x20011ce0

0801d27c <abort>:
 801d27c:	b508      	push	{r3, lr}
 801d27e:	2006      	movs	r0, #6
 801d280:	f000 f82c 	bl	801d2dc <raise>
 801d284:	2001      	movs	r0, #1
 801d286:	f7e6 fe51 	bl	8003f2c <_exit>

0801d28a <_raise_r>:
 801d28a:	291f      	cmp	r1, #31
 801d28c:	b538      	push	{r3, r4, r5, lr}
 801d28e:	4605      	mov	r5, r0
 801d290:	460c      	mov	r4, r1
 801d292:	d904      	bls.n	801d29e <_raise_r+0x14>
 801d294:	2316      	movs	r3, #22
 801d296:	6003      	str	r3, [r0, #0]
 801d298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d29c:	bd38      	pop	{r3, r4, r5, pc}
 801d29e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d2a0:	b112      	cbz	r2, 801d2a8 <_raise_r+0x1e>
 801d2a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d2a6:	b94b      	cbnz	r3, 801d2bc <_raise_r+0x32>
 801d2a8:	4628      	mov	r0, r5
 801d2aa:	f000 f831 	bl	801d310 <_getpid_r>
 801d2ae:	4622      	mov	r2, r4
 801d2b0:	4601      	mov	r1, r0
 801d2b2:	4628      	mov	r0, r5
 801d2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d2b8:	f000 b818 	b.w	801d2ec <_kill_r>
 801d2bc:	2b01      	cmp	r3, #1
 801d2be:	d00a      	beq.n	801d2d6 <_raise_r+0x4c>
 801d2c0:	1c59      	adds	r1, r3, #1
 801d2c2:	d103      	bne.n	801d2cc <_raise_r+0x42>
 801d2c4:	2316      	movs	r3, #22
 801d2c6:	6003      	str	r3, [r0, #0]
 801d2c8:	2001      	movs	r0, #1
 801d2ca:	e7e7      	b.n	801d29c <_raise_r+0x12>
 801d2cc:	2100      	movs	r1, #0
 801d2ce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d2d2:	4620      	mov	r0, r4
 801d2d4:	4798      	blx	r3
 801d2d6:	2000      	movs	r0, #0
 801d2d8:	e7e0      	b.n	801d29c <_raise_r+0x12>
	...

0801d2dc <raise>:
 801d2dc:	4b02      	ldr	r3, [pc, #8]	@ (801d2e8 <raise+0xc>)
 801d2de:	4601      	mov	r1, r0
 801d2e0:	6818      	ldr	r0, [r3, #0]
 801d2e2:	f7ff bfd2 	b.w	801d28a <_raise_r>
 801d2e6:	bf00      	nop
 801d2e8:	2000090c 	.word	0x2000090c

0801d2ec <_kill_r>:
 801d2ec:	b538      	push	{r3, r4, r5, lr}
 801d2ee:	4d07      	ldr	r5, [pc, #28]	@ (801d30c <_kill_r+0x20>)
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	4604      	mov	r4, r0
 801d2f4:	4608      	mov	r0, r1
 801d2f6:	4611      	mov	r1, r2
 801d2f8:	602b      	str	r3, [r5, #0]
 801d2fa:	f7e6 fe07 	bl	8003f0c <_kill>
 801d2fe:	1c43      	adds	r3, r0, #1
 801d300:	d102      	bne.n	801d308 <_kill_r+0x1c>
 801d302:	682b      	ldr	r3, [r5, #0]
 801d304:	b103      	cbz	r3, 801d308 <_kill_r+0x1c>
 801d306:	6023      	str	r3, [r4, #0]
 801d308:	bd38      	pop	{r3, r4, r5, pc}
 801d30a:	bf00      	nop
 801d30c:	20011ce0 	.word	0x20011ce0

0801d310 <_getpid_r>:
 801d310:	f7e6 bdf4 	b.w	8003efc <_getpid>

0801d314 <_init>:
 801d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d316:	bf00      	nop
 801d318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d31a:	bc08      	pop	{r3}
 801d31c:	469e      	mov	lr, r3
 801d31e:	4770      	bx	lr

0801d320 <_fini>:
 801d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d322:	bf00      	nop
 801d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d326:	bc08      	pop	{r3}
 801d328:	469e      	mov	lr, r3
 801d32a:	4770      	bx	lr
