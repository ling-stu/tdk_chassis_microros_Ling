
tdk_chassis_microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d144  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001668  0801d318  0801d318  0001e318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e980  0801e980  0002095c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e980  0801e980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e988  0801e988  0002095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0801e988  0801e988  0001f988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e9a4  0801e9a4  0001f9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000095c  20000000  0801e9a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011358  20000960  0801f304  00020960  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011cb8  0801f304  00020cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002095c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8c1  00000000  00000000  0002098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f22  00000000  00000000  0004f24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  00055170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001716  00000000  00000000  00056f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f075  00000000  00000000  00058656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a2f6  00000000  00000000  000876cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbfb5  00000000  00000000  000b19c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001ad976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d58  00000000  00000000  001ad9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001b6744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000960 	.word	0x20000960
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801d2fc 	.word	0x0801d2fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000964 	.word	0x20000964
 800020c:	0801d2fc 	.word	0x0801d2fc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b3a:	f000 b9d3 	b.w	8000ee4 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	f000 b988 	b.w	8000ee4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	468e      	mov	lr, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d962      	bls.n	8000cc8 <__udivmoddi4+0xdc>
 8000c02:	fab2 f682 	clz	r6, r2
 8000c06:	b14e      	cbz	r6, 8000c1c <__udivmoddi4+0x30>
 8000c08:	f1c6 0320 	rsb	r3, r6, #32
 8000c0c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c10:	fa20 f303 	lsr.w	r3, r0, r3
 8000c14:	40b7      	lsls	r7, r6
 8000c16:	ea43 0808 	orr.w	r8, r3, r8
 8000c1a:	40b4      	lsls	r4, r6
 8000c1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c20:	fa1f fc87 	uxth.w	ip, r7
 8000c24:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c32:	fb01 f20c 	mul.w	r2, r1, ip
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d909      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c40:	f080 80ea 	bcs.w	8000e18 <__udivmoddi4+0x22c>
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f240 80e7 	bls.w	8000e18 <__udivmoddi4+0x22c>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	443b      	add	r3, r7
 8000c4e:	1a9a      	subs	r2, r3, r2
 8000c50:	b2a3      	uxth	r3, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c62:	459c      	cmp	ip, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x8e>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c6c:	f080 80d6 	bcs.w	8000e1c <__udivmoddi4+0x230>
 8000c70:	459c      	cmp	ip, r3
 8000c72:	f240 80d3 	bls.w	8000e1c <__udivmoddi4+0x230>
 8000c76:	443b      	add	r3, r7
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7e:	eba3 030c 	sub.w	r3, r3, ip
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40f3      	lsrs	r3, r6
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xb6>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb0>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x14c>
 8000caa:	4573      	cmp	r3, lr
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xc8>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 8105 	bhi.w	8000ebe <__udivmoddi4+0x2d2>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4690      	mov	r8, r2
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0e5      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc2:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc6:	e7e2      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f000 8090 	beq.w	8000dee <__udivmoddi4+0x202>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f040 80a4 	bne.w	8000e20 <__udivmoddi4+0x234>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	b280      	uxth	r0, r0
 8000ce2:	b2bc      	uxth	r4, r7
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cea:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cf2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d907      	bls.n	8000d0a <__udivmoddi4+0x11e>
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x11c>
 8000d02:	429a      	cmp	r2, r3
 8000d04:	f200 80e0 	bhi.w	8000ec8 <__udivmoddi4+0x2dc>
 8000d08:	46c4      	mov	ip, r8
 8000d0a:	1a9b      	subs	r3, r3, r2
 8000d0c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d10:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d14:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d18:	fb02 f404 	mul.w	r4, r2, r4
 8000d1c:	429c      	cmp	r4, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x144>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x142>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f200 80ca 	bhi.w	8000ec2 <__udivmoddi4+0x2d6>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	1b1b      	subs	r3, r3, r4
 8000d32:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa0e f401 	lsl.w	r4, lr, r1
 8000d48:	fa20 f306 	lsr.w	r3, r0, r6
 8000d4c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d50:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d54:	4323      	orrs	r3, r4
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	fa1f fc87 	uxth.w	ip, r7
 8000d5e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d68:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d6c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1a0>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 809c 	bcs.w	8000eba <__udivmoddi4+0x2ce>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	f240 8099 	bls.w	8000eba <__udivmoddi4+0x2ce>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	443c      	add	r4, r7
 8000d8c:	eba4 040e 	sub.w	r4, r4, lr
 8000d90:	fa1f fe83 	uxth.w	lr, r3
 8000d94:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d98:	fb09 4413 	mls	r4, r9, r3, r4
 8000d9c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000da0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da4:	45a4      	cmp	ip, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1ce>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dae:	f080 8082 	bcs.w	8000eb6 <__udivmoddi4+0x2ca>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d97f      	bls.n	8000eb6 <__udivmoddi4+0x2ca>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc6:	4564      	cmp	r4, ip
 8000dc8:	4673      	mov	r3, lr
 8000dca:	46e1      	mov	r9, ip
 8000dcc:	d362      	bcc.n	8000e94 <__udivmoddi4+0x2a8>
 8000dce:	d05f      	beq.n	8000e90 <__udivmoddi4+0x2a4>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x1fe>
 8000dd2:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd6:	eb64 0409 	sbc.w	r4, r4, r9
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	431e      	orrs	r6, r3
 8000de4:	40cc      	lsrs	r4, r1
 8000de6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e74f      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000dee:	fbb1 fcf2 	udiv	ip, r1, r2
 8000df2:	0c01      	lsrs	r1, r0, #16
 8000df4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df8:	b280      	uxth	r0, r0
 8000dfa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4638      	mov	r0, r7
 8000e02:	463c      	mov	r4, r7
 8000e04:	46b8      	mov	r8, r7
 8000e06:	46be      	mov	lr, r7
 8000e08:	2620      	movs	r6, #32
 8000e0a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0e:	eba2 0208 	sub.w	r2, r2, r8
 8000e12:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e16:	e766      	b.n	8000ce6 <__udivmoddi4+0xfa>
 8000e18:	4601      	mov	r1, r0
 8000e1a:	e718      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e72c      	b.n	8000c7a <__udivmoddi4+0x8e>
 8000e20:	f1c6 0220 	rsb	r2, r6, #32
 8000e24:	fa2e f302 	lsr.w	r3, lr, r2
 8000e28:	40b7      	lsls	r7, r6
 8000e2a:	40b1      	lsls	r1, r6
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e34:	430a      	orrs	r2, r1
 8000e36:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e40:	0c11      	lsrs	r1, r2, #16
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb08 f904 	mul.w	r9, r8, r4
 8000e4a:	40b0      	lsls	r0, r6
 8000e4c:	4589      	cmp	r9, r1
 8000e4e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e52:	b280      	uxth	r0, r0
 8000e54:	d93e      	bls.n	8000ed4 <__udivmoddi4+0x2e8>
 8000e56:	1879      	adds	r1, r7, r1
 8000e58:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e5c:	d201      	bcs.n	8000e62 <__udivmoddi4+0x276>
 8000e5e:	4589      	cmp	r9, r1
 8000e60:	d81f      	bhi.n	8000ea2 <__udivmoddi4+0x2b6>
 8000e62:	eba1 0109 	sub.w	r1, r1, r9
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	b292      	uxth	r2, r2
 8000e74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e78:	4542      	cmp	r2, r8
 8000e7a:	d229      	bcs.n	8000ed0 <__udivmoddi4+0x2e4>
 8000e7c:	18ba      	adds	r2, r7, r2
 8000e7e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e82:	d2c4      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d2c2      	bcs.n	8000e0e <__udivmoddi4+0x222>
 8000e88:	f1a9 0102 	sub.w	r1, r9, #2
 8000e8c:	443a      	add	r2, r7
 8000e8e:	e7be      	b.n	8000e0e <__udivmoddi4+0x222>
 8000e90:	45f0      	cmp	r8, lr
 8000e92:	d29d      	bcs.n	8000dd0 <__udivmoddi4+0x1e4>
 8000e94:	ebbe 0302 	subs.w	r3, lr, r2
 8000e98:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	46e1      	mov	r9, ip
 8000ea0:	e796      	b.n	8000dd0 <__udivmoddi4+0x1e4>
 8000ea2:	eba7 0909 	sub.w	r9, r7, r9
 8000ea6:	4449      	add	r1, r9
 8000ea8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eac:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb0:	fb09 f804 	mul.w	r8, r9, r4
 8000eb4:	e7db      	b.n	8000e6e <__udivmoddi4+0x282>
 8000eb6:	4673      	mov	r3, lr
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1ce>
 8000eba:	4650      	mov	r0, sl
 8000ebc:	e766      	b.n	8000d8c <__udivmoddi4+0x1a0>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e6fd      	b.n	8000cbe <__udivmoddi4+0xd2>
 8000ec2:	443b      	add	r3, r7
 8000ec4:	3a02      	subs	r2, #2
 8000ec6:	e733      	b.n	8000d30 <__udivmoddi4+0x144>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	443b      	add	r3, r7
 8000ece:	e71c      	b.n	8000d0a <__udivmoddi4+0x11e>
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x222>
 8000ed4:	eba1 0109 	sub.w	r1, r1, r9
 8000ed8:	46c4      	mov	ip, r8
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fb09 f804 	mul.w	r8, r9, r4
 8000ee2:	e7c4      	b.n	8000e6e <__udivmoddi4+0x282>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <_ZN11PinpointI2CC1EP17I2C_HandleTypeDefhm>:
PinpointI2C pinpoint(&hi2c1);
PinpointI2C::BulkData bd;
bool initi_yet = 0;

// ---- 建構 ----
PinpointI2C::PinpointI2C(I2C_HandleTypeDef* hi2c, uint8_t addr7bit, uint32_t timeoutMs)
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71fb      	strb	r3, [r7, #7]
: hi2c_(hi2c),
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	601a      	str	r2, [r3, #0]
  devAddr_(static_cast<uint16_t>(addr7bit) << 1), // HAL 多數範例使用 8-bit 位址（左移 1）
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	809a      	strh	r2, [r3, #4]
  timeoutMs_(timeoutMs)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2205      	movs	r2, #5
 8000f14:	731a      	strb	r2, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	735a      	strb	r2, [r3, #13]
{}
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <_ZN11PinpointI2C13Pinpoint_InitEv>:

void PinpointI2C::Pinpoint_Init()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	initi_yet = 1;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <_ZN11PinpointI2C13Pinpoint_InitEv+0x44>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
    // 1) 連線檢測
    if (!ping()) {
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f867 	bl	800100e <_ZN11PinpointI2C4pingEv>
        // TODO: 報警或重試
    }
    // 2) 一次性配置（每次上電後都要重新送配置；手冊明確說明）
    setTicksPerMM(19.894f);       // 依你的 pod 實際數值
 8000f40:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000f74 <_ZN11PinpointI2C13Pinpoint_InitEv+0x48>
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f990 	bl	800126a <_ZN11PinpointI2C13setTicksPerMMEf>
    setOffsets(75.0f, -65.0f);  // 依你的機構量測
 8000f4a:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000f78 <_ZN11PinpointI2C13Pinpoint_InitEv+0x4c>
 8000f4e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000f7c <_ZN11PinpointI2C13Pinpoint_InitEv+0x50>
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f99a 	bl	800128c <_ZN11PinpointI2C10setOffsetsEff>
    // pinpoint.setYawScalar(1.0f);        // 通常不建議改動
    // 3) 方向確認（前+X、左+Y）
    setEncoderDirections(PinpointI2C::EncDir::Reversed,
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f9ca 	bl	80012f6 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_>
                                  PinpointI2C::EncDir::Reversed);
    // 4) 開賽或程式啟動時：確保靜止後歸零+IMU校正（~0.25s）
    resetPosAndIMU();
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f9b7 	bl	80012d6 <_ZN11PinpointI2C14resetPosAndIMUEv>

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200009b8 	.word	0x200009b8
 8000f74:	419f26e9 	.word	0x419f26e9
 8000f78:	c2820000 	.word	0xc2820000
 8000f7c:	42960000 	.word	0x42960000

08000f80 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv>:
void PinpointI2C::Pinpoint_TaskLoop()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    // a) 用 Bulk 取資料（最省 I²C 次數）
		if (readBulk(bd)) {
 8000f88:	4913      	ldr	r1, [pc, #76]	@ (8000fd8 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x58>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f926 	bl	80011dc <_ZN11PinpointI2C8readBulkERNS_8BulkDataE>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x1e>
			i2c_connected = 1;
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x5c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	701a      	strb	r2, [r3, #0]
			}else{
	        	//i2c_connected = 1;

			}
		}
}
 8000f9c:	e018      	b.n	8000fd0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x50>
			if (!isConnected()) {
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f822 	bl	8000fe8 <_ZNK11PinpointI2C11isConnectedEv>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00f      	beq.n	8000fd0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x50>
	        	i2c_connected = 0;
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
				HAL_I2C_DeInit(&hi2c1);
 8000fb6:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x60>)
 8000fb8:	f004 fc9c 	bl	80058f4 <HAL_I2C_DeInit>
				HAL_I2C_Init (&hi2c1);
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x60>)
 8000fbe:	f004 fb55 	bl	800566c <HAL_I2C_Init>
				i2c_reconnect = ping();
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f823 	bl	800100e <_ZN11PinpointI2C4pingEv>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv+0x64>)
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000990 	.word	0x20000990
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	200053f8 	.word	0x200053f8
 8000fe4:	2000097c 	.word	0x2000097c

08000fe8 <_ZNK11PinpointI2C11isConnectedEv>:
// ---- 連線檢測 ----
void PinpointI2C::setMaxConsecutiveErrors(uint8_t n) { maxConsecutiveErrors_ = n ? n : 1; }
uint8_t PinpointI2C::consecutiveErrors() const { return consecutiveErrors_; }

bool PinpointI2C::isConnected() const {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    return consecutiveErrors_ < maxConsecutiveErrors_;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	7b5a      	ldrb	r2, [r3, #13]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7b1b      	ldrb	r3, [r3, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	bf34      	ite	cc
 8000ffc:	2301      	movcc	r3, #1
 8000ffe:	2300      	movcs	r3, #0
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_ZN11PinpointI2C4pingEv>:

bool PinpointI2C::ping() {
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
    uint32_t id = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
    if (!readDeviceID(id)) return false;
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f8cc 	bl	80011be <_ZN11PinpointI2C12readDeviceIDERm>
 8001026:	4603      	mov	r3, r0
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <_ZN11PinpointI2C4pingEv+0x28>
 8001032:	2300      	movs	r3, #0
 8001034:	e005      	b.n	8001042 <_ZN11PinpointI2C4pingEv+0x34>
    return (id == 2u); // 手冊：Device ID 應為 2
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b02      	cmp	r3, #2
 800103a:	bf0c      	ite	eq
 800103c:	2301      	moveq	r3, #1
 800103e:	2300      	movne	r3, #0
 8001040:	b2db      	uxtb	r3, r3
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZN11PinpointI2C7regReadEhPvt>:

// ---- 公用讀寫 ----
bool PinpointI2C::regRead(uint8_t reg, void* buf, uint16_t len) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b088      	sub	sp, #32
 800104e:	af04      	add	r7, sp, #16
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	461a      	mov	r2, r3
 8001056:	460b      	mov	r3, r1
 8001058:	72fb      	strb	r3, [r7, #11]
 800105a:	4613      	mov	r3, r2
 800105c:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Read(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	8899      	ldrh	r1, [r3, #4]
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	b29a      	uxth	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	893b      	ldrh	r3, [r7, #8]
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	f004 fd65 	bl	8005b48 <HAL_I2C_Mem_Read>
 800107e:	4603      	mov	r3, r0
                         static_cast<uint8_t*>(buf), len, timeoutMs_) == HAL_OK) {
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf0c      	ite	eq
 8001084:	2301      	moveq	r3, #1
 8001086:	2300      	movne	r3, #0
 8001088:	b2db      	uxtb	r3, r3
    if (HAL_I2C_Mem_Read(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 800108a:	2b00      	cmp	r3, #0
 800108c:	d004      	beq.n	8001098 <_ZN11PinpointI2C7regReadEhPvt+0x4e>
        onOk();
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f870 	bl	8001174 <_ZN11PinpointI2C4onOkEv>
        return true;
 8001094:	2301      	movs	r3, #1
 8001096:	e003      	b.n	80010a0 <_ZN11PinpointI2C7regReadEhPvt+0x56>
    }
    onErr();
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f000 f87c 	bl	8001196 <_ZN11PinpointI2C5onErrEv>
    return false;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN11PinpointI2C8regWriteEhPKvt>:

bool PinpointI2C::regWrite(uint8_t reg, const void* buf, uint16_t len) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	461a      	mov	r2, r3
 80010b4:	460b      	mov	r3, r1
 80010b6:	72fb      	strb	r3, [r7, #11]
 80010b8:	4613      	mov	r3, r2
 80010ba:	813b      	strh	r3, [r7, #8]
    if (HAL_I2C_Mem_Write(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	8899      	ldrh	r1, [r3, #4]
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	893b      	ldrh	r3, [r7, #8]
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	f004 fc3c 	bl	8005954 <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
                          const_cast<uint8_t*>(static_cast<const uint8_t*>(buf)), len, timeoutMs_) == HAL_OK) {
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
    if (HAL_I2C_Mem_Write(hi2c_, devAddr_, reg, I2C_MEMADD_SIZE_8BIT,
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d004      	beq.n	80010f6 <_ZN11PinpointI2C8regWriteEhPKvt+0x4e>
        onOk();
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f000 f841 	bl	8001174 <_ZN11PinpointI2C4onOkEv>
        return true;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e003      	b.n	80010fe <_ZN11PinpointI2C8regWriteEhPKvt+0x56>
    }
    onErr();
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f000 f84d 	bl	8001196 <_ZN11PinpointI2C5onErrEv>
    return false;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <_ZN11PinpointI2C8writeU32Ehm>:

bool PinpointI2C::writeU32(uint8_t reg, uint32_t v) { return regWrite(reg, &v, sizeof(v)); }
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	460b      	mov	r3, r1
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	72fb      	strb	r3, [r7, #11]
 8001114:	1d3a      	adds	r2, r7, #4
 8001116:	7af9      	ldrb	r1, [r7, #11]
 8001118:	2304      	movs	r3, #4
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff ffc4 	bl	80010a8 <_ZN11PinpointI2C8regWriteEhPKvt>
 8001120:	4603      	mov	r3, r0
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_ZN11PinpointI2C7readU32EhRm>:
bool PinpointI2C::readU32(uint8_t reg, uint32_t& v) { return regRead(reg, &v, sizeof(v)); }
 800112a:	b580      	push	{r7, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	460b      	mov	r3, r1
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	72fb      	strb	r3, [r7, #11]
 8001138:	7af9      	ldrb	r1, [r7, #11]
 800113a:	2304      	movs	r3, #4
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f7ff ff83 	bl	800104a <_ZN11PinpointI2C7regReadEhPvt>
 8001144:	4603      	mov	r3, r0
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <_ZN11PinpointI2C8writeF32Ehf>:
bool PinpointI2C::writeF32(uint8_t reg, float v)    { return regWrite(reg, &v, sizeof(v)); }
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	60f8      	str	r0, [r7, #12]
 8001156:	460b      	mov	r3, r1
 8001158:	ed87 0a01 	vstr	s0, [r7, #4]
 800115c:	72fb      	strb	r3, [r7, #11]
 800115e:	1d3a      	adds	r2, r7, #4
 8001160:	7af9      	ldrb	r1, [r7, #11]
 8001162:	2304      	movs	r3, #4
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f7ff ff9f 	bl	80010a8 <_ZN11PinpointI2C8regWriteEhPKvt>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZN11PinpointI2C4onOkEv>:
bool PinpointI2C::readF32(uint8_t reg, float& v)    { return regRead(reg, &v, sizeof(v)); }

void PinpointI2C::onOk()  { if (consecutiveErrors_ > 0) consecutiveErrors_ = 0; }
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7b5b      	ldrb	r3, [r3, #13]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <_ZN11PinpointI2C4onOkEv+0x16>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	735a      	strb	r2, [r3, #13]
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN11PinpointI2C5onErrEv>:
void PinpointI2C::onErr() { if (consecutiveErrors_ < 0xFF) ++consecutiveErrors_; }
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b5b      	ldrb	r3, [r3, #13]
 80011a2:	2bff      	cmp	r3, #255	@ 0xff
 80011a4:	d005      	beq.n	80011b2 <_ZN11PinpointI2C5onErrEv+0x1c>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7b5b      	ldrb	r3, [r3, #13]
 80011aa:	3301      	adds	r3, #1
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	735a      	strb	r2, [r3, #13]
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <_ZN11PinpointI2C12readDeviceIDERm>:

// ---- 基礎暫存器 ----
bool PinpointI2C::readDeviceID(uint32_t& id)      { return readU32(REG_DEVICE_ID, id); }
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	2101      	movs	r1, #1
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffac 	bl	800112a <_ZN11PinpointI2C7readU32EhRm>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <_ZN11PinpointI2C8readBulkERNS_8BulkDataE>:
    bool okY = readU32(REG_ENC_Y, encY);
    return okX && okY;
}

// ---- Bulk Read ----
bool PinpointI2C::readBulk(BulkData& out) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    // 手冊：Bulk Read 總長 40 bytes，內容順序對應文件（此處採用常見版本的排列）
    uint8_t buf[40] = {0};
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	2228      	movs	r2, #40	@ 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f01b f97c 	bl	801c4ec <memset>
    if (!regRead(REG_BULK, buf, sizeof(buf))) return false;
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	2328      	movs	r3, #40	@ 0x28
 80011fa:	2112      	movs	r1, #18
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff24 	bl	800104a <_ZN11PinpointI2C7regReadEhPvt>
 8001202:	4603      	mov	r3, r0
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <_ZN11PinpointI2C8readBulkERNS_8BulkDataE+0x36>
 800120e:	2300      	movs	r3, #0
 8001210:	e027      	b.n	8001262 <_ZN11PinpointI2C8readBulkERNS_8BulkDataE+0x86>

    // 解析：依序 4-byte 對齊（uint32/float）
    std::memcpy(&out.device_status, &buf[0], 4);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.loop_time_us,  &buf[4], 4);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3304      	adds	r3, #4
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.enc_x_raw,     &buf[8], 4);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	3308      	adds	r3, #8
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.enc_y_raw,     &buf[12],4);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	330c      	adds	r3, #12
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.pos_x_mm,      &buf[16],4);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	3310      	adds	r3, #16
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.pos_y_mm,      &buf[20],4);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	3314      	adds	r3, #20
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.heading_rad,   &buf[24],4);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3318      	adds	r3, #24
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_x_mm_s,    &buf[28],4);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	331c      	adds	r3, #28
 800124c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124e:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_y_mm_s,    &buf[32],4);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3320      	adds	r3, #32
 8001254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001256:	601a      	str	r2, [r3, #0]
    std::memcpy(&out.vel_h_rad_s,   &buf[36],4);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3324      	adds	r3, #36	@ 0x24
 800125c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800125e:	601a      	str	r2, [r3, #0]
    return true;
 8001260:	2301      	movs	r3, #1
}
 8001262:	4618      	mov	r0, r3
 8001264:	3730      	adds	r7, #48	@ 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_ZN11PinpointI2C13setTicksPerMMEf>:
           readF32(REG_VEL_Y, v.vy_mm_s) &&
           readF32(REG_VEL_H, v.w_rad_s);
}

// ---- 設定 ----
bool PinpointI2C::setTicksPerMM(float tpm) {
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	ed87 0a00 	vstr	s0, [r7]
    return writeF32(REG_TICKS_PER_MM, tpm);
 8001276:	ed97 0a00 	vldr	s0, [r7]
 800127a:	210e      	movs	r1, #14
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff66 	bl	800114e <_ZN11PinpointI2C8writeF32Ehf>
 8001282:	4603      	mov	r3, r0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN11PinpointI2C10setOffsetsEff>:

bool PinpointI2C::setOffsets(float x_offset_mm, float y_offset_mm) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	ed87 0a02 	vstr	s0, [r7, #8]
 8001298:	edc7 0a01 	vstr	s1, [r7, #4]
    bool ok1 = writeF32(REG_X_OFFSET, x_offset_mm);
 800129c:	ed97 0a02 	vldr	s0, [r7, #8]
 80012a0:	210f      	movs	r1, #15
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff ff53 	bl	800114e <_ZN11PinpointI2C8writeF32Ehf>
 80012a8:	4603      	mov	r3, r0
 80012aa:	75fb      	strb	r3, [r7, #23]
    bool ok2 = writeF32(REG_Y_OFFSET, y_offset_mm);
 80012ac:	ed97 0a01 	vldr	s0, [r7, #4]
 80012b0:	2110      	movs	r1, #16
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff ff4b 	bl	800114e <_ZN11PinpointI2C8writeF32Ehf>
 80012b8:	4603      	mov	r3, r0
 80012ba:	75bb      	strb	r3, [r7, #22]
    return ok1 && ok2;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <_ZN11PinpointI2C10setOffsetsEff+0x40>
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <_ZN11PinpointI2C10setOffsetsEff+0x40>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <_ZN11PinpointI2C10setOffsetsEff+0x42>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN11PinpointI2C14resetPosAndIMUEv>:
bool PinpointI2C::resetIMU() {
    uint32_t cmd = CTRL_RESET_IMU;
    return writeU32(REG_DEVICE_CTRL, cmd);
}

bool PinpointI2C::resetPosAndIMU() {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
    uint32_t cmd = CTRL_RESET_POS_AND_IMU;
 80012de:	2302      	movs	r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
    return writeU32(REG_DEVICE_CTRL, cmd);
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	2104      	movs	r1, #4
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff0d 	bl	8001106 <_ZN11PinpointI2C8writeU32Ehm>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_>:

bool PinpointI2C::setEncoderDirections(EncDir x, EncDir y) {
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
 8001302:	4613      	mov	r3, r2
 8001304:	70bb      	strb	r3, [r7, #2]
    uint32_t cmd = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
    cmd |= (y == EncDir::Reversed) ? CTRL_SET_Y_REV : CTRL_SET_Y_FWD;
 800130a:	78bb      	ldrb	r3, [r7, #2]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x1e>
 8001310:	2304      	movs	r3, #4
 8001312:	e000      	b.n	8001316 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x20>
 8001314:	2308      	movs	r3, #8
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]
    cmd |= (x == EncDir::Reversed) ? CTRL_SET_X_REV : CTRL_SET_X_FWD;
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x30>
 8001322:	2310      	movs	r3, #16
 8001324:	e000      	b.n	8001328 <_ZN11PinpointI2C20setEncoderDirectionsENS_6EncDirES0_+0x32>
 8001326:	2320      	movs	r3, #32
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4313      	orrs	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
    return writeU32(REG_DEVICE_CTRL, cmd);
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	2104      	movs	r1, #4
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fee7 	bl	8001106 <_ZN11PinpointI2C8writeU32Ehm>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <_Z41__static_initialization_and_destruction_0v>:
bool PinpointI2C::writePosition(const Pose& p) {
    bool okx = writeF32(REG_POS_X, p.x_mm);
    bool oky = writeF32(REG_POS_Y, p.y_mm);
    bool okh = writeF32(REG_POS_H, p.heading);
    return okx && oky && okh;
}
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
PinpointI2C pinpoint(&hi2c1);
 8001348:	230a      	movs	r3, #10
 800134a:	2231      	movs	r2, #49	@ 0x31
 800134c:	4902      	ldr	r1, [pc, #8]	@ (8001358 <_Z41__static_initialization_and_destruction_0v+0x14>)
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <_Z41__static_initialization_and_destruction_0v+0x18>)
 8001350:	f7ff fdca 	bl	8000ee8 <_ZN11PinpointI2CC1EP17I2C_HandleTypeDefhm>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200053f8 	.word	0x200053f8
 800135c:	20000980 	.word	0x20000980

08001360 <_GLOBAL__sub_I_i2c_req>:
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
 8001364:	f7ff ffee 	bl	8001344 <_Z41__static_initialization_and_destruction_0v>
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <pinpoint_init>:
extern I2C_HandleTypeDef hi2c1;
extern int sec;
float pos_x, pos_y, pos_z;
bool check = 0;

 void pinpoint_init(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
 	osDelay(500);
 8001370:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001374:	f008 fcb6 	bl	8009ce4 <osDelay>
 	pinpoint.Pinpoint_Init();
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <pinpoint_init+0x18>)
 800137a:	f7ff fdd7 	bl	8000f2c <_ZN11PinpointI2C13Pinpoint_InitEv>
 }
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000980 	.word	0x20000980

08001388 <pinpoint_monitor>:
//    } else {
//        // I2C 裝置未回應，可能需要重試或報錯
//    }
//}

void pinpoint_monitor(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	if (sec == update_period){
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <pinpoint_monitor+0x28>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b05      	cmp	r3, #5
 8001392:	d10b      	bne.n	80013ac <pinpoint_monitor+0x24>
		// pinpoint.Pinpoint_TaskLoop();
		// sec = 0;
		  // 檢查連線狀態
        if (pinpoint.isConnected()) {
 8001394:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <pinpoint_monitor+0x2c>)
 8001396:	f7ff fe27 	bl	8000fe8 <_ZNK11PinpointI2C11isConnectedEv>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d002      	beq.n	80013a6 <pinpoint_monitor+0x1e>
            pinpoint.Pinpoint_TaskLoop();
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <pinpoint_monitor+0x2c>)
 80013a2:	f7ff fded 	bl	8000f80 <_ZN11PinpointI2C17Pinpoint_TaskLoopEv>
//            // I2C 連線異常，嘗試重新初始化
//            HAL_I2C_DeInit(&hi2c1);
//            osDelay(100);
//            HAL_I2C_Init(&hi2c1);
        }
        sec = 0;
 80013a6:	4b02      	ldr	r3, [pc, #8]	@ (80013b0 <pinpoint_monitor+0x28>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
	}
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000869c 	.word	0x2000869c
 80013b4:	20000980 	.word	0x20000980

080013b8 <update_pinpoint_pose>:

void update_pinpoint_pose(){
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
	pos_x = bd.pos_x_mm;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <update_pinpoint_pose+0x28>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <update_pinpoint_pose+0x2c>)
 80013c2:	6013      	str	r3, [r2, #0]
	pos_y = bd.pos_y_mm;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <update_pinpoint_pose+0x28>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <update_pinpoint_pose+0x30>)
 80013ca:	6013      	str	r3, [r2, #0]
	pos_z = bd.heading_rad;
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <update_pinpoint_pose+0x28>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <update_pinpoint_pose+0x34>)
 80013d2:	6013      	str	r3, [r2, #0]
//	vel_x = bd.vel_x_mm_s;
//	vel_y = bd.vel_y_mm_s;
//	vel_z = bd.vel_h_rad_s;
}
 80013d4:	bf00      	nop
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000990 	.word	0x20000990
 80013e4:	200009bc 	.word	0x200009bc
 80013e8:	200009c0 	.word	0x200009c0
 80013ec:	200009c4 	.word	0x200009c4

080013f0 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80013fe:	f019 fe11 	bl	801b024 <cosf>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
 800141a:	ed97 0a01 	vldr	s0, [r7, #4]
 800141e:	f019 fe45 	bl	801b0ac <sinf>
 8001422:	eef0 7a40 	vmov.f32	s15, s0
 8001426:	eeb0 0a67 	vmov.f32	s0, s15
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN7Chassis8setSpeedEfff>:
#include "chassis.hpp"
#include "motor_config.h"
float Vx_global,Vy_global,dt;
void Chassis::setSpeed(float Vx_goal, float Vy_goal, float W_goal){
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	ed87 0a02 	vstr	s0, [r7, #8]
 800143c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001440:	ed87 1a00 	vstr	s2, [r7]
	float circle = WHEEL_DIA * PI;
 8001444:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <_ZN7Chassis8setSpeedEfff+0xac>)
 8001446:	617b      	str	r3, [r7, #20]
    _Vx_goal = Vx_goal/circle; _Vy_goal = Vy_goal/circle; _W_goal = W_goal/circle;
 8001448:	edd7 6a02 	vldr	s13, [r7, #8]
 800144c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
 800145a:	edd7 6a01 	vldr	s13, [r7, #4]
 800145e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 800146c:	edd7 6a00 	vldr	s13, [r7]
 8001470:	ed97 7a05 	vldr	s14, [r7, #20]
 8001474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    Mecan_InverseKinematics();
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f9aa 	bl	80017d8 <_ZN7Chassis23Mecan_InverseKinematicsEv>
    _motorFR->setSpeed(_V_FR_goal);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	4610      	mov	r0, r2
 8001494:	f000 fae6 	bl	8001a64 <_ZN15MotorController8setSpeedEf>
    _motorFL->setSpeed(_V_FL_goal);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	4610      	mov	r0, r2
 80014a8:	f000 fadc 	bl	8001a64 <_ZN15MotorController8setSpeedEf>
    _motorBR->setSpeed(_V_BR_goal);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014b6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ba:	4610      	mov	r0, r2
 80014bc:	f000 fad2 	bl	8001a64 <_ZN15MotorController8setSpeedEf>
    _motorBL->setSpeed(_V_BL_goal);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	699a      	ldr	r2, [r3, #24]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014ca:	eeb0 0a67 	vmov.f32	s0, s15
 80014ce:	4610      	mov	r0, r2
 80014d0:	f000 fac8 	bl	8001a64 <_ZN15MotorController8setSpeedEf>
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	41fb53d1 	.word	0x41fb53d1

080014e0 <_ZN7Chassis11getLocationEv>:

void Chassis::getLocation(){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	ed2d 8b02 	vpush	{d8}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	Mecan_ForwardKinematics();
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f893 	bl	8001618 <_ZN7Chassis23Mecan_ForwardKinematicsEv>
	dt = DT;
 80014f2:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <_ZN7Chassis11getLocationEv+0x120>)
 80014f4:	4a43      	ldr	r2, [pc, #268]	@ (8001604 <_ZN7Chassis11getLocationEv+0x124>)
 80014f6:	601a      	str	r2, [r3, #0]
    theta += _W_now * DT/1000;                                              // rad
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001504:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001508:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800150c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8001608 <_ZN7Chassis11getLocationEv+0x128>
 8001510:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edc3 7a02 	vstr	s15, [r3, #8]
    Vx_global = _Vx_now * cos(theta) - _Vy_now * sin(theta);   // cm/s
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 8a07 	vldr	s16, [r3, #28]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edd3 7a02 	vldr	s15, [r3, #8]
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	f7ff ff5f 	bl	80013f0 <_ZSt3cosf>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
 8001536:	ee28 8a27 	vmul.f32	s16, s16, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edd3 8a08 	vldr	s17, [r3, #32]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	edd3 7a02 	vldr	s15, [r3, #8]
 8001546:	eeb0 0a67 	vmov.f32	s0, s15
 800154a:	f7ff ff61 	bl	8001410 <_ZSt3sinf>
 800154e:	eef0 7a40 	vmov.f32	s15, s0
 8001552:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001556:	ee78 7a67 	vsub.f32	s15, s16, s15
 800155a:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <_ZN7Chassis11getLocationEv+0x12c>)
 800155c:	edc3 7a00 	vstr	s15, [r3]
    Vy_global = _Vx_now * sin(theta) + _Vy_now * cos(theta);   // cm/s
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	ed93 8a07 	vldr	s16, [r3, #28]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edd3 7a02 	vldr	s15, [r3, #8]
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	f7ff ff4e 	bl	8001410 <_ZSt3sinf>
 8001574:	eef0 7a40 	vmov.f32	s15, s0
 8001578:	ee28 8a27 	vmul.f32	s16, s16, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 8a08 	vldr	s17, [r3, #32]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	edd3 7a02 	vldr	s15, [r3, #8]
 8001588:	eeb0 0a67 	vmov.f32	s0, s15
 800158c:	f7ff ff30 	bl	80013f0 <_ZSt3cosf>
 8001590:	eef0 7a40 	vmov.f32	s15, s0
 8001594:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001598:	ee78 7a27 	vadd.f32	s15, s16, s15
 800159c:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <_ZN7Chassis11getLocationEv+0x130>)
 800159e:	edc3 7a00 	vstr	s15, [r3]
    x += (Vx_global * (dt/1000));                                        // cm
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <_ZN7Chassis11getLocationEv+0x120>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8001608 <_ZN7Chassis11getLocationEv+0x128>
 80015b2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <_ZN7Chassis11getLocationEv+0x12c>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	edc3 7a00 	vstr	s15, [r3]
    y += (Vy_global * (dt/1000));										// cm
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80015d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <_ZN7Chassis11getLocationEv+0x120>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ed9f 6a0c 	vldr	s12, [pc, #48]	@ 8001608 <_ZN7Chassis11getLocationEv+0x128>
 80015da:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <_ZN7Chassis11getLocationEv+0x130>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	ecbd 8b02 	vpop	{d8}
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200009d0 	.word	0x200009d0
 8001604:	41200000 	.word	0x41200000
 8001608:	447a0000 	.word	0x447a0000
 800160c:	200009c8 	.word	0x200009c8
 8001610:	200009cc 	.word	0x200009cc
 8001614:	00000000 	.word	0x00000000

08001618 <_ZN7Chassis23Mecan_ForwardKinematicsEv>:

void Chassis::Mecan_ForwardKinematics(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
    _V_FR_now = _motorFR->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fa9d 	bl	8001b64 <_ZN15MotorController8getSpeedEv>
 800162a:	ee10 3a10 	vmov	r3, s0
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ffba 	bl	80005a8 <__aeabi_f2d>
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	4b65      	ldr	r3, [pc, #404]	@ (80017d0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 800163a:	f7ff f80d 	bl	8000658 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	a360      	add	r3, pc, #384	@ (adr r3, 80017c8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7ff f804 	bl	8000658 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fa10 	bl	8000a7c <__aeabi_d2f>
 800165c:	4602      	mov	r2, r0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	649a      	str	r2, [r3, #72]	@ 0x48
    _V_FL_now = _motorFL->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fa7c 	bl	8001b64 <_ZN15MotorController8getSpeedEv>
 800166c:	ee10 3a10 	vmov	r3, s0
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff99 	bl	80005a8 <__aeabi_f2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b55      	ldr	r3, [pc, #340]	@ (80017d0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 800167c:	f7fe ffec 	bl	8000658 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	a34f      	add	r3, pc, #316	@ (adr r3, 80017c8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 800168a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168e:	f7fe ffe3 	bl	8000658 <__aeabi_dmul>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9ef 	bl	8000a7c <__aeabi_d2f>
 800169e:	4602      	mov	r2, r0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    _V_BR_now = _motorBR->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 fa5b 	bl	8001b64 <_ZN15MotorController8getSpeedEv>
 80016ae:	ee10 3a10 	vmov	r3, s0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe ff78 	bl	80005a8 <__aeabi_f2d>
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b44      	ldr	r3, [pc, #272]	@ (80017d0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 80016be:	f7fe ffcb 	bl	8000658 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	a33f      	add	r3, pc, #252	@ (adr r3, 80017c8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffc2 	bl	8000658 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff f9ce 	bl	8000a7c <__aeabi_d2f>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	651a      	str	r2, [r3, #80]	@ 0x50
    _V_BL_now = _motorBL->getSpeed() * WHEEL_DIA * PI;                   // cm/s
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fa3a 	bl	8001b64 <_ZN15MotorController8getSpeedEv>
 80016f0:	ee10 3a10 	vmov	r3, s0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff57 	bl	80005a8 <__aeabi_f2d>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b34      	ldr	r3, [pc, #208]	@ (80017d0 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b8>)
 8001700:	f7fe ffaa 	bl	8000658 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	a32e      	add	r3, pc, #184	@ (adr r3, 80017c8 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1b0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ffa1 	bl	8000658 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff f9ad 	bl	8000a7c <__aeabi_d2f>
 8001722:	4602      	mov	r2, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	@ 0x54

    _Vx_now = (-_V_FR_now + _V_FL_now + _V_BR_now - _V_BL_now) / 4.0f;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001734:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800173e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001748:	ee37 7a67 	vsub.f32	s14, s14, s15
 800174c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edc3 7a07 	vstr	s15, [r3, #28]
    _Vy_now = (_V_FR_now + _V_FL_now + _V_BR_now + _V_BL_now) / 4.0f;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800177a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001782:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	edc3 7a08 	vstr	s15, [r3, #32]
    _W_now = (-_V_FR_now +   _V_FL_now - _V_BR_now + _V_BL_now) / (CHASSIS_WIDTH + CHASSIS_LENGTH);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80017a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80017ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80017d4 <_ZN7Chassis23Mecan_ForwardKinematicsEv+0x1bc>
 80017b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	4d12d84a 	.word	0x4d12d84a
 80017cc:	400921fb 	.word	0x400921fb
 80017d0:	40240000 	.word	0x40240000
 80017d4:	42600000 	.word	0x42600000

080017d8 <_ZN7Chassis23Mecan_InverseKinematicsEv>:

void Chassis::Mecan_InverseKinematics(){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    _V_FR_goal = -_Vx_goal + _Vy_goal + _W_goal * _chassis_factor;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80017ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    _V_FL_goal = _Vx_goal + _Vy_goal - _W_goal * _chassis_factor;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    _V_BR_goal = _Vx_goal + _Vy_goal + _W_goal * _chassis_factor;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    _V_BL_goal = -_Vx_goal + _Vy_goal - _W_goal * _chassis_factor;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800186a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_>:
/**********************************************************************/
extern float Vx_global,Vy_global,dt;

class Chassis {
    public:
        Chassis(MotorController* motorFR, MotorController* motorFL, MotorController* motorBR, MotorController* motorBL):
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
                _motorFR(motorFR), _motorFL(motorFL), _motorBR(motorBR), _motorBL(motorBL){}
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	619a      	str	r2, [r3, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f04f 0200 	mov.w	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	621a      	str	r2, [r3, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	@ 0x30
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	635a      	str	r2, [r3, #52]	@ 0x34
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	639a      	str	r2, [r3, #56]	@ 0x38
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	641a      	str	r2, [r3, #64]	@ 0x40
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4a0c      	ldr	r2, [pc, #48]	@ (8001958 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_+0xc4>)
 8001926:	645a      	str	r2, [r3, #68]	@ 0x44
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	655a      	str	r2, [r3, #84]	@ 0x54
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	3fe42a1f 	.word	0x3fe42a1f

0800195c <chassis_set_speed>:
//	}
	chassis.getLocation();
}

void chassis_set_speed(float vx,float vy,float vz)//阿包版的chassis monitor
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	ed87 0a03 	vstr	s0, [r7, #12]
 8001966:	edc7 0a02 	vstr	s1, [r7, #8]
 800196a:	ed87 1a01 	vstr	s2, [r7, #4]
	chassis.setSpeed(vx, vy, vz);
 800196e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001972:	edd7 0a02 	vldr	s1, [r7, #8]
 8001976:	ed97 0a03 	vldr	s0, [r7, #12]
 800197a:	4805      	ldr	r0, [pc, #20]	@ (8001990 <chassis_set_speed+0x34>)
 800197c:	f7ff fd58 	bl	8001430 <_ZN7Chassis8setSpeedEfff>
	chassis.getLocation();
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <chassis_set_speed+0x34>)
 8001982:	f7ff fdad 	bl	80014e0 <_ZN7Chassis11getLocationEv>
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200009d4 	.word	0x200009d4

08001994 <chassis_give_speed>:

void chassis_give_speed()
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	vel_x = chassis._Vx_now;
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <chassis_give_speed+0x28>)
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	4a08      	ldr	r2, [pc, #32]	@ (80019c0 <chassis_give_speed+0x2c>)
 800199e:	6013      	str	r3, [r2, #0]
	vel_y = chassis._Vy_now;
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <chassis_give_speed+0x28>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a07      	ldr	r2, [pc, #28]	@ (80019c4 <chassis_give_speed+0x30>)
 80019a6:	6013      	str	r3, [r2, #0]
	vel_z = chassis._W_now;
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <chassis_give_speed+0x28>)
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	4a06      	ldr	r2, [pc, #24]	@ (80019c8 <chassis_give_speed+0x34>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200009d4 	.word	0x200009d4
 80019c0:	20000a2c 	.word	0x20000a2c
 80019c4:	20000a30 	.word	0x20000a30
 80019c8:	20000a34 	.word	0x20000a34

080019cc <_Z41__static_initialization_and_destruction_0v>:
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af02      	add	r7, sp, #8
Chassis chassis(&Motor_FR, &Motor_FL , &Motor_BR, &Motor_BL);
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <_Z41__static_initialization_and_destruction_0v+0x20>)
 80019d8:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_Z41__static_initialization_and_destruction_0v+0x24>)
 80019da:	4906      	ldr	r1, [pc, #24]	@ (80019f4 <_Z41__static_initialization_and_destruction_0v+0x28>)
 80019dc:	4806      	ldr	r0, [pc, #24]	@ (80019f8 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 80019de:	f7ff ff59 	bl	8001894 <_ZN7ChassisC1EP15MotorControllerS1_S1_S1_>
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000b28 	.word	0x20000b28
 80019ec:	20000ad8 	.word	0x20000ad8
 80019f0:	20000a88 	.word	0x20000a88
 80019f4:	20000a38 	.word	0x20000a38
 80019f8:	200009d4 	.word	0x200009d4

080019fc <_GLOBAL__sub_I_chassis>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	f7ff ffe4 	bl	80019cc <_Z41__static_initialization_and_destruction_0v>
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	eef0 7ae7 	vabs.f32	s15, s15
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_ZN15MotorController4initEii>:
#include "motor_ctrl.hpp"
int times = 0;
uint32_t current_cnt;
void MotorController::init(int en_ctrl,int dir_ctrl) {
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
    HAL_TIM_Encoder_Start(_enc, TIM_CHANNEL_ALL);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	213c      	movs	r1, #60	@ 0x3c
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f005 fe7d 	bl	8007738 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(_pwm, _channel);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f005 fd07 	bl	800745c <HAL_TIM_PWM_Start>
    _dir_ctrl = dir_ctrl;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	64da      	str	r2, [r3, #76]	@ 0x4c
    _en_ctrl = en_ctrl;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <_ZN15MotorController8setSpeedEf>:

void MotorController::setSpeed(float speed) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	ed87 0a00 	vstr	s0, [r7]

    _targetSpeed = speed;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	631a      	str	r2, [r3, #48]	@ 0x30
//    times++;
    ComputePID();
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f886 	bl	8001b88 <_ZN15MotorController10ComputePIDEv>

//    if (_pidOutput > 80.0) _pidOutput = 80.0;
//    if (_pidOutput < -80.0) _pidOutput = -80.0;
    if (_dir_ctrl == 1){
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d112      	bne.n	8001aaa <_ZN15MotorController8setSpeedEf+0x46>
    	HAL_GPIO_WritePin(_dirGPIO, _dirPin, _pidOutput >= 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68d8      	ldr	r0, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	8a19      	ldrh	r1, [r3, #16]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001a92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	db01      	blt.n	8001aa0 <_ZN15MotorController8setSpeedEf+0x3c>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <_ZN15MotorController8setSpeedEf+0x3e>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f003 fdc8 	bl	8005638 <HAL_GPIO_WritePin>
 8001aa8:	e014      	b.n	8001ad4 <_ZN15MotorController8setSpeedEf+0x70>
    }else{
    	HAL_GPIO_WritePin(_dirGPIO, _dirPin, _pidOutput >= 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68d8      	ldr	r0, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	8a19      	ldrh	r1, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	bfac      	ite	ge
 8001ac2:	2301      	movge	r3, #1
 8001ac4:	2300      	movlt	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f083 0301 	eor.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f003 fdb2 	bl	8005638 <HAL_GPIO_WritePin>
    }
    _pwmValue = (uint16_t)(fabs(_pidOutput) * PWM_ARR );///  10.0);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ada:	eeb0 0a67 	vmov.f32	s0, s15
 8001ade:	f7ff ff92 	bl	8001a06 <_ZSt4fabsf>
 8001ae2:	eef0 7a40 	vmov.f32	s15, s0
 8001ae6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001b60 <_ZN15MotorController8setSpeedEf+0xfc>
 8001aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	84da      	strh	r2, [r3, #38]	@ 0x26
    if (_pwmValue < 10) _pwmValue = 0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d802      	bhi.n	8001b0a <_ZN15MotorController8setSpeedEf+0xa6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	84da      	strh	r2, [r3, #38]	@ 0x26
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <_ZN15MotorController8setSpeedEf+0xbc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	635a      	str	r2, [r3, #52]	@ 0x34
//	if(_pidOutput > 0) HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_SET);
//	else HAL_GPIO_WritePin(_dirGPIO, _dirPin, GPIO_PIN_RESET);
//
//	__HAL_TIM_SET_COMPARE(_pwm, _channel, (uint16_t)_pwmValue);

}
 8001b1e:	e01b      	b.n	8001b58 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d106      	bne.n	8001b36 <_ZN15MotorController8setSpeedEf+0xd2>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b34:	e010      	b.n	8001b58 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d106      	bne.n	8001b4c <_ZN15MotorController8setSpeedEf+0xe8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b4a:	e005      	b.n	8001b58 <_ZN15MotorController8setSpeedEf+0xf4>
    __HAL_TIM_SET_COMPARE(_pwm, _channel, _pwmValue);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	8cda      	ldrh	r2, [r3, #38]	@ 0x26
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	447a0000 	.word	0x447a0000

08001b64 <_ZN15MotorController8getSpeedEv>:

float MotorController::getSpeed() {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
//	updateSpeed();
    return _currentSpeed;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b70:	ee07 3a90 	vmov	s15, r3
}
 8001b74:	eeb0 0a67 	vmov.f32	s0, s15
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	0000      	movs	r0, r0
 8001b84:	0000      	movs	r0, r0
	...

08001b88 <_ZN15MotorController10ComputePIDEv>:

float MotorController::ComputePID() {
 8001b88:	b5b0      	push	{r4, r5, r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    updateSpeed();
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f8b1 	bl	8001cf8 <_ZN15MotorController11updateSpeedEv>
    _error = _targetSpeed - _currentSpeed;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    _integral += _error * (DT / 1000.0);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fcf9 	bl	80005a8 <__aeabi_f2d>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	460d      	mov	r5, r1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcf2 	bl	80005a8 <__aeabi_f2d>
 8001bc4:	a349      	add	r3, pc, #292	@ (adr r3, 8001cec <_ZN15MotorController10ComputePIDEv+0x164>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe fd45 	bl	8000658 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fb89 	bl	80002ec <__adddf3>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7fe ff4b 	bl	8000a7c <__aeabi_d2f>
 8001be6:	4602      	mov	r2, r0
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(_integral >= INTEGRAL_LIMIT) _integral = INTEGRAL_LIMIT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001bf2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	db04      	blt.n	8001c0a <_ZN15MotorController10ComputePIDEv+0x82>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c08:	e00d      	b.n	8001c26 <_ZN15MotorController10ComputePIDEv+0x9e>
    else if(_integral <= -INTEGRAL_LIMIT) _integral = -INTEGRAL_LIMIT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c10:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d803      	bhi.n	8001c26 <_ZN15MotorController10ComputePIDEv+0x9e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f04f 423f 	mov.w	r2, #3204448256	@ 0xbf000000
 8001c24:	63da      	str	r2, [r3, #60]	@ 0x3c


    float derivative = (_error - _lastError) / (DT / 1000.0);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	ee17 0a90 	vmov	r0, s15
 8001c3a:	f7fe fcb5 	bl	80005a8 <__aeabi_f2d>
 8001c3e:	a32b      	add	r3, pc, #172	@ (adr r3, 8001cec <_ZN15MotorController10ComputePIDEv+0x164>)
 8001c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c44:	f7fe fe32 	bl	80008ac <__aeabi_ddiv>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff14 	bl	8000a7c <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]

    _pidOutput = (_kp * _error) + (_ki * _integral) + (_kd * derivative);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    // Update last error
    _lastError = _error;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(_pidOutput > 1) _pidOutput = 1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd04      	ble.n	8001cba <_ZN15MotorController10ComputePIDEv+0x132>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cb6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cb8:	e00c      	b.n	8001cd4 <_ZN15MotorController10ComputePIDEv+0x14c>
    else if (_pidOutput < -1) _pidOutput = -1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001cc0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	d502      	bpl.n	8001cd4 <_ZN15MotorController10ComputePIDEv+0x14c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <_ZN15MotorController10ComputePIDEv+0x160>)
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28
    return _pidOutput;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	ee07 3a90 	vmov	s15, r3
////    pre_error = error;
//
//	if (_pidOutput > 1) _pidOutput = 1;
//	else if (_pidOutput < -1) _pidOutput = -1;
//    return _pidOutput;
}
 8001cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	bf800000 	.word	0xbf800000
 8001cec:	47ae147b 	.word	0x47ae147b
 8001cf0:	3f847ae1 	.word	0x3f847ae1
 8001cf4:	00000000 	.word	0x00000000

08001cf8 <_ZN15MotorController11updateSpeedEv>:

float MotorController::updateSpeed() {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
//    else
//        _currentSpeed = (__HAL_TIM_GET_COUNTER(_enc) / ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0); // RPS
//
//    _last_cnt = __HAL_TIM_GET_COUNTER(_enc);

	cnt = __HAL_TIM_GetCounter(_enc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	b21a      	sxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	849a      	strh	r2, [r3, #36]	@ 0x24
	_currentSpeed = (cnt/ENCODER_RESOLUTION / REDUCTION_RATIO / 4) / (DT / 1000.0);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc35 	bl	8000584 <__aeabi_i2d>
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <_ZN15MotorController11updateSpeedEv+0xb8>)
 8001d20:	f7fe fdc4 	bl	80008ac <__aeabi_ddiv>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <_ZN15MotorController11updateSpeedEv+0xbc>)
 8001d32:	f7fe fdbb 	bl	80008ac <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <_ZN15MotorController11updateSpeedEv+0xc0>)
 8001d44:	f7fe fdb2 	bl	80008ac <__aeabi_ddiv>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	a315      	add	r3, pc, #84	@ (adr r3, 8001da8 <_ZN15MotorController11updateSpeedEv+0xb0>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fda9 	bl	80008ac <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fe8b 	bl	8000a7c <__aeabi_d2f>
 8001d66:	4602      	mov	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_TIM_SET_COUNTER(_enc, 0);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
    _currentSpeed *= _en_ctrl;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d80:	ee07 3a90 	vmov	s15, r3
 8001d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    return _currentSpeed;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d96:	ee07 3a90 	vmov	s15, r3
}
 8001d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	f3af 8000 	nop.w
 8001da8:	47ae147b 	.word	0x47ae147b
 8001dac:	3f847ae1 	.word	0x3f847ae1
 8001db0:	40590000 	.word	0x40590000
 8001db4:	40500000 	.word	0x40500000
 8001db8:	40100000 	.word	0x40100000

08001dbc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>:
#include "math.h"
#include "motor_config.h"

class MotorController{
public:
    MotorController(TIM_HandleTypeDef* enc, TIM_HandleTypeDef* pwm, uint32_t channel, GPIO_TypeDef* dirGPIO, uint16_t dirPin, double kp, double ki, double kd):
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6278      	str	r0, [r7, #36]	@ 0x24
 8001dc4:	6239      	str	r1, [r7, #32]
 8001dc6:	61fa      	str	r2, [r7, #28]
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	ed87 0b04 	vstr	d0, [r7, #16]
 8001dce:	ed87 1b02 	vstr	d1, [r7, #8]
 8001dd2:	ed87 2b00 	vstr	d2, [r7]
        _enc(enc), _pwm(pwm), _channel(channel), _dirGPIO(dirGPIO), _dirPin(dirPin), _kp(kp), _ki(ki), _kd(kd){}
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	69fa      	ldr	r2, [r7, #28]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df0:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001df2:	821a      	strh	r2, [r3, #16]
 8001df4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df8:	f7fe fe40 	bl	8000a7c <__aeabi_d2f>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e06:	f7fe fe39 	bl	8000a7c <__aeabi_d2f>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	619a      	str	r2, [r3, #24]
 8001e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e14:	f7fe fe32 	bl	8000a7c <__aeabi_d2f>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2020 	strb.w	r2, [r3, #32]
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	2200      	movs	r2, #0
 8001e32:	845a      	strh	r2, [r3, #34]	@ 0x22
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	2200      	movs	r2, #0
 8001e38:	849a      	strh	r2, [r3, #36]	@ 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	84da      	strh	r2, [r3, #38]	@ 0x26
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd+0xd8>)
 8001e74:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	2200      	movs	r2, #0
 8001e88:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	42c80000 	.word	0x42c80000

08001e98 <motor_init>:
float VgoalFL = 0.0;
float VgoalBR = 0.0;
float VgoalBL = 0.0;


void motor_init(){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	Motor_FR.init( 1, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	480b      	ldr	r0, [pc, #44]	@ (8001ed0 <motor_init+0x38>)
 8001ea2:	f7ff fdc0 	bl	8001a26 <_ZN15MotorController4initEii>
	Motor_FL.init( 1,-1);
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eaa:	2101      	movs	r1, #1
 8001eac:	4809      	ldr	r0, [pc, #36]	@ (8001ed4 <motor_init+0x3c>)
 8001eae:	f7ff fdba 	bl	8001a26 <_ZN15MotorController4initEii>
	Motor_BR.init(-1, 1);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eb8:	4807      	ldr	r0, [pc, #28]	@ (8001ed8 <motor_init+0x40>)
 8001eba:	f7ff fdb4 	bl	8001a26 <_ZN15MotorController4initEii>
	Motor_BL.init( 1,-1);
 8001ebe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	4805      	ldr	r0, [pc, #20]	@ (8001edc <motor_init+0x44>)
 8001ec6:	f7ff fdae 	bl	8001a26 <_ZN15MotorController4initEii>
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000a38 	.word	0x20000a38
 8001ed4:	20000a88 	.word	0x20000a88
 8001ed8:	20000ad8 	.word	0x20000ad8
 8001edc:	20000b28 	.word	0x20000b28

08001ee0 <_Z41__static_initialization_and_destruction_0v>:
    Motor_BL.setSpeed(VgoalBL);
//    test = Motor_BR.getSpeed();
//    Motor_BL.getSpeed();
//    Motor_FR.getSpeed();
//    Motor_FL.getSpeed();
}
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af02      	add	r7, sp, #8
MotorController Motor_FR(&htim1, &htim8, TIM_CHANNEL_1, GPIOB, GPIO_PIN_12, 1.1, 40, 0);
 8001ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	ed9f 2b21 	vldr	d2, [pc, #132]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001ef4:	ed9f 1b22 	vldr	d1, [pc, #136]	@ 8001f80 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001ef8:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8001f88 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001efc:	2300      	movs	r3, #0
 8001efe:	4a25      	ldr	r2, [pc, #148]	@ (8001f94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f00:	4925      	ldr	r1, [pc, #148]	@ (8001f98 <_Z41__static_initialization_and_destruction_0v+0xb8>)
 8001f02:	4826      	ldr	r0, [pc, #152]	@ (8001f9c <_Z41__static_initialization_and_destruction_0v+0xbc>)
 8001f04:	f7ff ff5a 	bl	8001dbc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_FL(&htim2, &htim8, TIM_CHANNEL_2, GPIOA, GPIO_PIN_12, 1.1, 40, 0);
 8001f08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	4b24      	ldr	r3, [pc, #144]	@ (8001fa0 <_Z41__static_initialization_and_destruction_0v+0xc0>)
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	ed9f 2b19 	vldr	d2, [pc, #100]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f16:	ed9f 1b1a 	vldr	d1, [pc, #104]	@ 8001f80 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f1a:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8001f88 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	4a1c      	ldr	r2, [pc, #112]	@ (8001f94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f22:	4920      	ldr	r1, [pc, #128]	@ (8001fa4 <_Z41__static_initialization_and_destruction_0v+0xc4>)
 8001f24:	4820      	ldr	r0, [pc, #128]	@ (8001fa8 <_Z41__static_initialization_and_destruction_0v+0xc8>)
 8001f26:	f7ff ff49 	bl	8001dbc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_BR(&htim3, &htim8, TIM_CHANNEL_3, GPIOB, GPIO_PIN_14, 1.1, 40, 0);
 8001f2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	ed9f 2b10 	vldr	d2, [pc, #64]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f38:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001f80 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f3c:	ed9f 0b12 	vldr	d0, [pc, #72]	@ 8001f88 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f40:	2308      	movs	r3, #8
 8001f42:	4a14      	ldr	r2, [pc, #80]	@ (8001f94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f44:	4919      	ldr	r1, [pc, #100]	@ (8001fac <_Z41__static_initialization_and_destruction_0v+0xcc>)
 8001f46:	481a      	ldr	r0, [pc, #104]	@ (8001fb0 <_Z41__static_initialization_and_destruction_0v+0xd0>)
 8001f48:	f7ff ff38 	bl	8001dbc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
MotorController Motor_BL(&htim4, &htim8, TIM_CHANNEL_4, GPIOB, GPIO_PIN_15, 1.1, 40, 0);
 8001f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <_Z41__static_initialization_and_destruction_0v+0xb0>)
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8001f78 <_Z41__static_initialization_and_destruction_0v+0x98>
 8001f5a:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001f80 <_Z41__static_initialization_and_destruction_0v+0xa0>
 8001f5e:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8001f88 <_Z41__static_initialization_and_destruction_0v+0xa8>
 8001f62:	230c      	movs	r3, #12
 8001f64:	4a0b      	ldr	r2, [pc, #44]	@ (8001f94 <_Z41__static_initialization_and_destruction_0v+0xb4>)
 8001f66:	4913      	ldr	r1, [pc, #76]	@ (8001fb4 <_Z41__static_initialization_and_destruction_0v+0xd4>)
 8001f68:	4813      	ldr	r0, [pc, #76]	@ (8001fb8 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 8001f6a:	f7ff ff27 	bl	8001dbc <_ZN15MotorControllerC1EP17TIM_HandleTypeDefS1_mP12GPIO_TypeDeftddd>
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	f3af 8000 	nop.w
	...
 8001f84:	40440000 	.word	0x40440000
 8001f88:	9999999a 	.word	0x9999999a
 8001f8c:	3ff19999 	.word	0x3ff19999
 8001f90:	40020400 	.word	0x40020400
 8001f94:	200055b4 	.word	0x200055b4
 8001f98:	2000544c 	.word	0x2000544c
 8001f9c:	20000a38 	.word	0x20000a38
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	20005494 	.word	0x20005494
 8001fa8:	20000a88 	.word	0x20000a88
 8001fac:	200054dc 	.word	0x200054dc
 8001fb0:	20000ad8 	.word	0x20000ad8
 8001fb4:	20005524 	.word	0x20005524
 8001fb8:	20000b28 	.word	0x20000b28

08001fbc <_GLOBAL__sub_I_Motor_FR>:
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	f7ff ff8e 	bl	8001ee0 <_Z41__static_initialization_and_destruction_0v>
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <uros_init>:
#define MAX_PING_FAIL_COUNT 5


extern UART_HandleTypeDef USARTx;

void uros_init(void) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
  // Initialize micro-ROS
  rmw_uros_set_custom_transport(
 8001fce:	4b14      	ldr	r3, [pc, #80]	@ (8002020 <uros_init+0x58>)
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <uros_init+0x5c>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <uros_init+0x60>)
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <uros_init+0x64>)
 8001fda:	4915      	ldr	r1, [pc, #84]	@ (8002030 <uros_init+0x68>)
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f00e fd61 	bl	8010aa4 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);
  
  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f00e f975 	bl	80102d4 <rcutils_get_zero_initialized_allocator>

  freeRTOS_allocator.allocate = microros_allocate;
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <uros_init+0x6c>)
 8001fec:	607b      	str	r3, [r7, #4]
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001fee:	4b12      	ldr	r3, [pc, #72]	@ (8002038 <uros_init+0x70>)
 8001ff0:	60bb      	str	r3, [r7, #8]
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <uros_init+0x74>)
 8001ff4:	60fb      	str	r3, [r7, #12]
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001ff6:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <uros_init+0x78>)
 8001ff8:	613b      	str	r3, [r7, #16]

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001ffa:	1d3b      	adds	r3, r7, #4
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f00e f977 	bl	80102f0 <rcutils_set_default_allocator>
 8002002:	4603      	mov	r3, r0
 8002004:	f083 0301 	eor.w	r3, r3, #1
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <uros_init+0x4e>
  printf("Error on default allocators (line %d)\n", __LINE__); 
 800200e:	2140      	movs	r1, #64	@ 0x40
 8002010:	480c      	ldr	r0, [pc, #48]	@ (8002044 <uros_init+0x7c>)
 8002012:	f01a f8e5 	bl	801c1e0 <iprintf>
  }
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	08002b75 	.word	0x08002b75
 8002024:	08002b0d 	.word	0x08002b0d
 8002028:	08002aed 	.word	0x08002aed
 800202c:	08002ac1 	.word	0x08002ac1
 8002030:	200055fc 	.word	0x200055fc
 8002034:	08003455 	.word	0x08003455
 8002038:	08003499 	.word	0x08003499
 800203c:	080034d1 	.word	0x080034d1
 8002040:	0800353d 	.word	0x0800353d
 8002044:	0801d318 	.word	0x0801d318

08002048 <uros_agent_status_check>:

void uros_agent_status_check(void) {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  switch (status) {
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <uros_agent_status_check+0x4c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d81c      	bhi.n	800208e <uros_agent_status_check+0x46>
 8002054:	a201      	add	r2, pc, #4	@ (adr r2, 800205c <uros_agent_status_check+0x14>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	08002071 	.word	0x08002071
 8002060:	08002077 	.word	0x08002077
 8002064:	0800207d 	.word	0x0800207d
 8002068:	08002083 	.word	0x08002083
 800206c:	08002089 	.word	0x08002089
    case AGENT_WAITING:
      handle_state_agent_waiting();
 8002070:	f000 f812 	bl	8002098 <handle_state_agent_waiting>
      break;
 8002074:	e00c      	b.n	8002090 <uros_agent_status_check+0x48>
    case AGENT_AVAILABLE:
      handle_state_agent_available();
 8002076:	f000 f821 	bl	80020bc <handle_state_agent_available>
      break;
 800207a:	e009      	b.n	8002090 <uros_agent_status_check+0x48>
    case AGENT_CONNECTED:
      handle_state_agent_connected();
 800207c:	f000 f82a 	bl	80020d4 <handle_state_agent_connected>
      break;
 8002080:	e006      	b.n	8002090 <uros_agent_status_check+0x48>
    case AGENT_TRYING:
      handle_state_agent_trying();
 8002082:	f000 f855 	bl	8002130 <handle_state_agent_trying>
      break;
 8002086:	e003      	b.n	8002090 <uros_agent_status_check+0x48>
    case AGENT_DISCONNECTED:
      handle_state_agent_disconnected();
 8002088:	f000 f87c 	bl	8002184 <handle_state_agent_disconnected>
      break;
 800208c:	e000      	b.n	8002090 <uros_agent_status_check+0x48>
    default:
      break;
 800208e:	bf00      	nop
  }
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20000f88 	.word	0x20000f88

08002098 <handle_state_agent_waiting>:

void handle_state_agent_waiting(void) {
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  status = (rmw_uros_ping_agent(100, 10) == RMW_RET_OK) ? AGENT_AVAILABLE : AGENT_WAITING;
 800209c:	210a      	movs	r1, #10
 800209e:	2064      	movs	r0, #100	@ 0x64
 80020a0:	f00e fd16 	bl	8010ad0 <rmw_uros_ping_agent>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <handle_state_agent_waiting+0x16>
 80020aa:	2201      	movs	r2, #1
 80020ac:	e000      	b.n	80020b0 <handle_state_agent_waiting+0x18>
 80020ae:	2200      	movs	r2, #0
 80020b0:	4b01      	ldr	r3, [pc, #4]	@ (80020b8 <handle_state_agent_waiting+0x20>)
 80020b2:	701a      	strb	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000f88 	.word	0x20000f88

080020bc <handle_state_agent_available>:
void handle_state_agent_available(void) {
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  uros_create_entities();
 80020c0:	f000 f86e 	bl	80021a0 <uros_create_entities>
  status = AGENT_CONNECTED;
 80020c4:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <handle_state_agent_available+0x14>)
 80020c6:	2202      	movs	r2, #2
 80020c8:	701a      	strb	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000f88 	.word	0x20000f88

080020d4 <handle_state_agent_connected>:
void handle_state_agent_connected(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(20, 5) == RMW_RET_OK){
 80020d8:	2105      	movs	r1, #5
 80020da:	2014      	movs	r0, #20
 80020dc:	f00e fcf8 	bl	8010ad0 <rmw_uros_ping_agent>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf0c      	ite	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	2300      	movne	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <handle_state_agent_connected+0x30>
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 80020f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <handle_state_agent_connected+0x4c>)
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	480b      	ldr	r0, [pc, #44]	@ (8002124 <handle_state_agent_connected+0x50>)
 80020f8:	f00d ff78 	bl	800ffec <rclc_executor_spin_some>
    ping_fail_count = 0; // Reset ping fail count
 80020fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <handle_state_agent_connected+0x54>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
    ping_fail_count++;
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_TRYING;
    }
  }
}
 8002102:	e00b      	b.n	800211c <handle_state_agent_connected+0x48>
    ping_fail_count++;
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <handle_state_agent_connected+0x54>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a07      	ldr	r2, [pc, #28]	@ (8002128 <handle_state_agent_connected+0x54>)
 800210c:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 800210e:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <handle_state_agent_connected+0x54>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b04      	cmp	r3, #4
 8002114:	dd02      	ble.n	800211c <handle_state_agent_connected+0x48>
      status = AGENT_TRYING;
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <handle_state_agent_connected+0x58>)
 8002118:	2203      	movs	r2, #3
 800211a:	701a      	strb	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	00989680 	.word	0x00989680
 8002124:	20000f00 	.word	0x20000f00
 8002128:	20000f8c 	.word	0x20000f8c
 800212c:	20000f88 	.word	0x20000f88

08002130 <handle_state_agent_trying>:
void handle_state_agent_trying(void) {
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  if(rmw_uros_ping_agent(50, 10) == RMW_RET_OK){
 8002134:	210a      	movs	r1, #10
 8002136:	2032      	movs	r0, #50	@ 0x32
 8002138:	f00e fcca 	bl	8010ad0 <rmw_uros_ping_agent>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <handle_state_agent_trying+0x2a>
    status = AGENT_CONNECTED;
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <handle_state_agent_trying+0x4c>)
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
    ping_fail_count = 0; // Reset ping fail count
 8002152:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <handle_state_agent_trying+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
      status = AGENT_DISCONNECTED;
      ping_fail_count = 0;
    }
  }
}
 8002158:	e00e      	b.n	8002178 <handle_state_agent_trying+0x48>
    ping_fail_count++;
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <handle_state_agent_trying+0x50>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <handle_state_agent_trying+0x50>)
 8002162:	6013      	str	r3, [r2, #0]
    if(ping_fail_count >= MAX_PING_FAIL_COUNT){
 8002164:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <handle_state_agent_trying+0x50>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	dd05      	ble.n	8002178 <handle_state_agent_trying+0x48>
      status = AGENT_DISCONNECTED;
 800216c:	4b03      	ldr	r3, [pc, #12]	@ (800217c <handle_state_agent_trying+0x4c>)
 800216e:	2204      	movs	r2, #4
 8002170:	701a      	strb	r2, [r3, #0]
      ping_fail_count = 0;
 8002172:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <handle_state_agent_trying+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000f88 	.word	0x20000f88
 8002180:	20000f8c 	.word	0x20000f8c

08002184 <handle_state_agent_disconnected>:
void handle_state_agent_disconnected(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  uros_destroy_entities();
 8002188:	f000 f940 	bl	800240c <uros_destroy_entities>
  status = AGENT_WAITING;
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <handle_state_agent_disconnected+0x14>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	20000f88 	.word	0x20000f88
 800219c:	00000000 	.word	0x00000000

080021a0 <uros_create_entities>:


void uros_create_entities(void) {
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
  // 重置积分变量
  last_cmd_vel_time = 0;
 80021a6:	4b7e      	ldr	r3, [pc, #504]	@ (80023a0 <uros_create_entities+0x200>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
  last_cmd_arm_time = 0;
 80021ac:	4b7d      	ldr	r3, [pc, #500]	@ (80023a4 <uros_create_entities+0x204>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
  current_yaw = 0.0f;
 80021b2:	4b7d      	ldr	r3, [pc, #500]	@ (80023a8 <uros_create_entities+0x208>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

  allocator = rcl_get_default_allocator();
 80021ba:	4c7c      	ldr	r4, [pc, #496]	@ (80023ac <uros_create_entities+0x20c>)
 80021bc:	463b      	mov	r3, r7
 80021be:	4618      	mov	r0, r3
 80021c0:	f00e f8b4 	bl	801032c <rcutils_get_default_allocator>
 80021c4:	4625      	mov	r5, r4
 80021c6:	463c      	mov	r4, r7
 80021c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	602b      	str	r3, [r5, #0]

  init_options = rcl_get_zero_initialized_init_options();
 80021d0:	f00c f8a4 	bl	800e31c <rcl_get_zero_initialized_init_options>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4a76      	ldr	r2, [pc, #472]	@ (80023b0 <uros_create_entities+0x210>)
 80021d8:	6013      	str	r3, [r2, #0]
  rcl_init_options_init(&init_options, allocator);
 80021da:	4b74      	ldr	r3, [pc, #464]	@ (80023ac <uros_create_entities+0x20c>)
 80021dc:	466c      	mov	r4, sp
 80021de:	f103 020c 	add.w	r2, r3, #12
 80021e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80021ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ec:	4870      	ldr	r0, [pc, #448]	@ (80023b0 <uros_create_entities+0x210>)
 80021ee:	f00c f897 	bl	800e320 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, DOMAIN_ID);
 80021f2:	2100      	movs	r1, #0
 80021f4:	486e      	ldr	r0, [pc, #440]	@ (80023b0 <uros_create_entities+0x210>)
 80021f6:	f00c f98f 	bl	800e518 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator); // Initialize support structure
 80021fa:	4b6c      	ldr	r3, [pc, #432]	@ (80023ac <uros_create_entities+0x20c>)
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4b6c      	ldr	r3, [pc, #432]	@ (80023b0 <uros_create_entities+0x210>)
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	486b      	ldr	r0, [pc, #428]	@ (80023b4 <uros_create_entities+0x214>)
 8002206:	f00d ff2b 	bl	8010060 <rclc_support_init_with_options>

  rcl_init_options_fini(&init_options);
 800220a:	4869      	ldr	r0, [pc, #420]	@ (80023b0 <uros_create_entities+0x210>)
 800220c:	f00c f8ee 	bl	800e3ec <rcl_init_options_fini>
  
  rclc_node_init_default(&node, NODE_NAME, "", &support);                       // Initialize node
 8002210:	4b68      	ldr	r3, [pc, #416]	@ (80023b4 <uros_create_entities+0x214>)
 8002212:	4a69      	ldr	r2, [pc, #420]	@ (80023b8 <uros_create_entities+0x218>)
 8002214:	4969      	ldr	r1, [pc, #420]	@ (80023bc <uros_create_entities+0x21c>)
 8002216:	486a      	ldr	r0, [pc, #424]	@ (80023c0 <uros_create_entities+0x220>)
 8002218:	f00d ff80 	bl	801011c <rclc_node_init_default>

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 800221c:	f00b fef6 	bl	800e00c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002220:	4602      	mov	r2, r0
 8002222:	4b68      	ldr	r3, [pc, #416]	@ (80023c4 <uros_create_entities+0x224>)
 8002224:	4966      	ldr	r1, [pc, #408]	@ (80023c0 <uros_create_entities+0x220>)
 8002226:	4868      	ldr	r0, [pc, #416]	@ (80023c8 <uros_create_entities+0x228>)
 8002228:	f00d ffb4 	bl	8010194 <rclc_publisher_init_default>
    &pose_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
    "robot/pose");
  pose_msg.pose.pose.position.x = 830.0;
 800222c:	4967      	ldr	r1, [pc, #412]	@ (80023cc <uros_create_entities+0x22c>)
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	4b67      	ldr	r3, [pc, #412]	@ (80023d0 <uros_create_entities+0x230>)
 8002234:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = 6160.0;
 8002238:	4964      	ldr	r1, [pc, #400]	@ (80023cc <uros_create_entities+0x22c>)
 800223a:	a355      	add	r3, pc, #340	@ (adr r3, 8002390 <uros_create_entities+0x1f0>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.position.z = 0.0;
 8002244:	4961      	ldr	r1, [pc, #388]	@ (80023cc <uros_create_entities+0x22c>)
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  pose_msg.pose.pose.orientation.x = 0.0;
 8002252:	495e      	ldr	r1, [pc, #376]	@ (80023cc <uros_create_entities+0x22c>)
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
  pose_msg.pose.pose.orientation.y = 0.0;
 8002260:	495a      	ldr	r1, [pc, #360]	@ (80023cc <uros_create_entities+0x22c>)
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
  pose_msg.pose.pose.orientation.z = 0.0;
 800226e:	4957      	ldr	r1, [pc, #348]	@ (80023cc <uros_create_entities+0x22c>)
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.pose.pose.orientation.w = 0.0;
 800227c:	4953      	ldr	r1, [pc, #332]	@ (80023cc <uros_create_entities+0x22c>)
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  rclc_publisher_init_default(                                                  // Initialize publisher for pose
 800228a:	f00f ffcb 	bl	8012224 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800228e:	4602      	mov	r2, r0
 8002290:	4b50      	ldr	r3, [pc, #320]	@ (80023d4 <uros_create_entities+0x234>)
 8002292:	494b      	ldr	r1, [pc, #300]	@ (80023c0 <uros_create_entities+0x220>)
 8002294:	4850      	ldr	r0, [pc, #320]	@ (80023d8 <uros_create_entities+0x238>)
 8002296:	f00d ff7d 	bl	8010194 <rclc_publisher_init_default>
    &arm_pub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/arm_status");
  arm_msg.data = -1;
 800229a:	4b50      	ldr	r3, [pc, #320]	@ (80023dc <uros_create_entities+0x23c>)
 800229c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022a0:	601a      	str	r2, [r3, #0]

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80022a2:	4849      	ldr	r0, [pc, #292]	@ (80023c8 <uros_create_entities+0x228>)
 80022a4:	f00c fc30 	bl	800eb08 <rcl_publisher_get_rmw_handle>
 80022a8:	4603      	mov	r3, r0
 80022aa:	210a      	movs	r1, #10
 80022ac:	4618      	mov	r0, r3
 80022ae:	f00f fc01 	bl	8011ab4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&pose_pub),
    10);

  rmw_uros_set_publisher_session_timeout(                                       // Set session timeout for publisher
 80022b2:	4849      	ldr	r0, [pc, #292]	@ (80023d8 <uros_create_entities+0x238>)
 80022b4:	f00c fc28 	bl	800eb08 <rcl_publisher_get_rmw_handle>
 80022b8:	4603      	mov	r3, r0
 80022ba:	210a      	movs	r1, #10
 80022bc:	4618      	mov	r0, r3
 80022be:	f00f fbf9 	bl	8011ab4 <rmw_uros_set_publisher_session_timeout>
    rcl_publisher_get_rmw_handle(&arm_pub),
    10);

  rclc_subscription_init_default(                                               // Initialize subscriber for command velocity
 80022c2:	f00a f9d9 	bl	800c678 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b45      	ldr	r3, [pc, #276]	@ (80023e0 <uros_create_entities+0x240>)
 80022ca:	493d      	ldr	r1, [pc, #244]	@ (80023c0 <uros_create_entities+0x220>)
 80022cc:	4845      	ldr	r0, [pc, #276]	@ (80023e4 <uros_create_entities+0x244>)
 80022ce:	f00d ff95 	bl	80101fc <rclc_subscription_init_default>
    &cmd_vel_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
    "robot/cmd_vel");
  cmd_vel_msg.linear.x = 0.0;
 80022d2:	4945      	ldr	r1, [pc, #276]	@ (80023e8 <uros_create_entities+0x248>)
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9c1 2300 	strd	r2, r3, [r1]
  cmd_vel_msg.linear.y = 0.0;
 80022e0:	4941      	ldr	r1, [pc, #260]	@ (80023e8 <uros_create_entities+0x248>)
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
  cmd_vel_msg.linear.z = 0.0;
 80022ee:	493e      	ldr	r1, [pc, #248]	@ (80023e8 <uros_create_entities+0x248>)
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  cmd_vel_msg.angular.x = 0.0;
 80022fc:	493a      	ldr	r1, [pc, #232]	@ (80023e8 <uros_create_entities+0x248>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9c1 2306 	strd	r2, r3, [r1, #24]
  cmd_vel_msg.angular.y = 0.0;
 800230a:	4937      	ldr	r1, [pc, #220]	@ (80023e8 <uros_create_entities+0x248>)
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	e9c1 2308 	strd	r2, r3, [r1, #32]
  cmd_vel_msg.angular.z = 0.0;
 8002318:	4933      	ldr	r1, [pc, #204]	@ (80023e8 <uros_create_entities+0x248>)
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  rclc_subscription_init_default(                                               // Initialize subscriber for arm command
 8002326:	f00f ff7d 	bl	8012224 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800232a:	4602      	mov	r2, r0
 800232c:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <uros_create_entities+0x24c>)
 800232e:	4924      	ldr	r1, [pc, #144]	@ (80023c0 <uros_create_entities+0x220>)
 8002330:	482f      	ldr	r0, [pc, #188]	@ (80023f0 <uros_create_entities+0x250>)
 8002332:	f00d ff63 	bl	80101fc <rclc_subscription_init_default>
    &cmd_arm_sub,
    &node,
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "robot/cmd_arm");
  cmd_arm_msg.data = -1;
 8002336:	4b2f      	ldr	r3, [pc, #188]	@ (80023f4 <uros_create_entities+0x254>)
 8002338:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800233c:	601a      	str	r2, [r3, #0]


  rclc_timer_init_default(&pose_pub_timer, &support, RCL_MS_TO_NS(50), pose_pub_timer_cb);
 800233e:	4b2e      	ldr	r3, [pc, #184]	@ (80023f8 <uros_create_entities+0x258>)
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	a315      	add	r3, pc, #84	@ (adr r3, 8002398 <uros_create_entities+0x1f8>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	491a      	ldr	r1, [pc, #104]	@ (80023b4 <uros_create_entities+0x214>)
 800234a:	482c      	ldr	r0, [pc, #176]	@ (80023fc <uros_create_entities+0x25c>)
 800234c:	f00d ff8a 	bl	8010264 <rclc_timer_init_default>

  
  rclc_executor_init(&executor, &support.context, 3, &allocator); // Create executor (1 timer + 2 subscriptions)
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <uros_create_entities+0x20c>)
 8002352:	2203      	movs	r2, #3
 8002354:	4917      	ldr	r1, [pc, #92]	@ (80023b4 <uros_create_entities+0x214>)
 8002356:	482a      	ldr	r0, [pc, #168]	@ (8002400 <uros_create_entities+0x260>)
 8002358:	f00d fb5a 	bl	800fa10 <rclc_executor_init>

  rclc_executor_add_subscription(&executor, &cmd_vel_sub, &cmd_vel_msg, &cmd_vel_sub_cb, ON_NEW_DATA); // Add subscriber to executor
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <uros_create_entities+0x264>)
 8002362:	4a21      	ldr	r2, [pc, #132]	@ (80023e8 <uros_create_entities+0x248>)
 8002364:	491f      	ldr	r1, [pc, #124]	@ (80023e4 <uros_create_entities+0x244>)
 8002366:	4826      	ldr	r0, [pc, #152]	@ (8002400 <uros_create_entities+0x260>)
 8002368:	f00d fbf6 	bl	800fb58 <rclc_executor_add_subscription>
  rclc_executor_add_subscription(&executor, &cmd_arm_sub, &cmd_arm_msg, &cmd_arm_sub_cb, ON_NEW_DATA); // Add arm subscriber to executor
 800236c:	2300      	movs	r3, #0
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <uros_create_entities+0x268>)
 8002372:	4a20      	ldr	r2, [pc, #128]	@ (80023f4 <uros_create_entities+0x254>)
 8002374:	491e      	ldr	r1, [pc, #120]	@ (80023f0 <uros_create_entities+0x250>)
 8002376:	4822      	ldr	r0, [pc, #136]	@ (8002400 <uros_create_entities+0x260>)
 8002378:	f00d fbee 	bl	800fb58 <rclc_executor_add_subscription>
  rclc_executor_add_timer(&executor, &pose_pub_timer); // Add timer to executor
 800237c:	491f      	ldr	r1, [pc, #124]	@ (80023fc <uros_create_entities+0x25c>)
 800237e:	4820      	ldr	r0, [pc, #128]	@ (8002400 <uros_create_entities+0x260>)
 8002380:	f00d fc1e 	bl	800fbc0 <rclc_executor_add_timer>
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bdb0      	pop	{r4, r5, r7, pc}
 800238c:	f3af 8000 	nop.w
 8002390:	00000000 	.word	0x00000000
 8002394:	40b81000 	.word	0x40b81000
 8002398:	02faf080 	.word	0x02faf080
 800239c:	00000000 	.word	0x00000000
 80023a0:	20000e9c 	.word	0x20000e9c
 80023a4:	20000ea0 	.word	0x20000ea0
 80023a8:	20000ea4 	.word	0x20000ea4
 80023ac:	20000edc 	.word	0x20000edc
 80023b0:	20000ef8 	.word	0x20000ef8
 80023b4:	20000ea8 	.word	0x20000ea8
 80023b8:	0801d340 	.word	0x0801d340
 80023bc:	0801d344 	.word	0x0801d344
 80023c0:	20000ef0 	.word	0x20000ef0
 80023c4:	0801d350 	.word	0x0801d350
 80023c8:	20000b84 	.word	0x20000b84
 80023cc:	20000b88 	.word	0x20000b88
 80023d0:	4089f000 	.word	0x4089f000
 80023d4:	0801d35c 	.word	0x0801d35c
 80023d8:	20000e88 	.word	0x20000e88
 80023dc:	20000e8c 	.word	0x20000e8c
 80023e0:	0801d370 	.word	0x0801d370
 80023e4:	20000e50 	.word	0x20000e50
 80023e8:	20000e58 	.word	0x20000e58
 80023ec:	0801d380 	.word	0x0801d380
 80023f0:	20000e90 	.word	0x20000e90
 80023f4:	20000e94 	.word	0x20000e94
 80023f8:	08002591 	.word	0x08002591
 80023fc:	20000e98 	.word	0x20000e98
 8002400:	20000f00 	.word	0x20000f00
 8002404:	08002485 	.word	0x08002485
 8002408:	080025b9 	.word	0x080025b9

0800240c <uros_destroy_entities>:
void uros_destroy_entities(void) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  rmw_context_t* rmw_context = rcl_context_get_rmw_context(&support.context);
 8002412:	4814      	ldr	r0, [pc, #80]	@ (8002464 <uros_destroy_entities+0x58>)
 8002414:	f00b ff08 	bl	800e228 <rcl_context_get_rmw_context>
 8002418:	6078      	str	r0, [r7, #4]
  (void) rmw_uros_set_context_entity_destroy_session_timeout(rmw_context, 0);
 800241a:	2100      	movs	r1, #0
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f00f fb51 	bl	8011ac4 <rmw_uros_set_context_entity_destroy_session_timeout>

  // Destroy publisher
  rcl_publisher_fini(&pose_pub, &node);
 8002422:	4911      	ldr	r1, [pc, #68]	@ (8002468 <uros_destroy_entities+0x5c>)
 8002424:	4811      	ldr	r0, [pc, #68]	@ (800246c <uros_destroy_entities+0x60>)
 8002426:	f00c faf1 	bl	800ea0c <rcl_publisher_fini>
  rcl_publisher_fini(&arm_pub, &node);
 800242a:	490f      	ldr	r1, [pc, #60]	@ (8002468 <uros_destroy_entities+0x5c>)
 800242c:	4810      	ldr	r0, [pc, #64]	@ (8002470 <uros_destroy_entities+0x64>)
 800242e:	f00c faed 	bl	800ea0c <rcl_publisher_fini>

  // Destroy subscriber
  rcl_subscription_fini(&cmd_vel_sub, &node);
 8002432:	490d      	ldr	r1, [pc, #52]	@ (8002468 <uros_destroy_entities+0x5c>)
 8002434:	480f      	ldr	r0, [pc, #60]	@ (8002474 <uros_destroy_entities+0x68>)
 8002436:	f00c fc3d 	bl	800ecb4 <rcl_subscription_fini>
  rcl_subscription_fini(&cmd_arm_sub, &node);
 800243a:	490b      	ldr	r1, [pc, #44]	@ (8002468 <uros_destroy_entities+0x5c>)
 800243c:	480e      	ldr	r0, [pc, #56]	@ (8002478 <uros_destroy_entities+0x6c>)
 800243e:	f00c fc39 	bl	800ecb4 <rcl_subscription_fini>

  rcl_timer_fini(&pose_pub_timer);
 8002442:	480e      	ldr	r0, [pc, #56]	@ (800247c <uros_destroy_entities+0x70>)
 8002444:	f00c fe6a 	bl	800f11c <rcl_timer_fini>

  // Destroy executor
  rclc_executor_fini(&executor);
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <uros_destroy_entities+0x74>)
 800244a:	f00d fb51 	bl	800faf0 <rclc_executor_fini>

  // Destroy node
  rcl_node_fini(&node);
 800244e:	4806      	ldr	r0, [pc, #24]	@ (8002468 <uros_destroy_entities+0x5c>)
 8002450:	f00c f9ba 	bl	800e7c8 <rcl_node_fini>
  rclc_support_fini(&support);
 8002454:	4803      	ldr	r0, [pc, #12]	@ (8002464 <uros_destroy_entities+0x58>)
 8002456:	f00d fe37 	bl	80100c8 <rclc_support_fini>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000ea8 	.word	0x20000ea8
 8002468:	20000ef0 	.word	0x20000ef0
 800246c:	20000b84 	.word	0x20000b84
 8002470:	20000e88 	.word	0x20000e88
 8002474:	20000e50 	.word	0x20000e50
 8002478:	20000e90 	.word	0x20000e90
 800247c:	20000e98 	.word	0x20000e98
 8002480:	20000f00 	.word	0x20000f00

08002484 <cmd_vel_sub_cb>:

void cmd_vel_sub_cb(const void* msgin) {
 8002484:	b5b0      	push	{r4, r5, r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60fb      	str	r3, [r7, #12]
  
  // 检查消息指针是否有效
  if (msg == NULL) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d02a      	beq.n	80024ec <cmd_vel_sub_cb+0x68>
    return;
  }
  
  cmd_vel_msg = *msg;
 8002496:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <cmd_vel_sub_cb+0x70>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4614      	mov	r4, r2
 800249c:	461d      	mov	r5, r3
 800249e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  vx = cmd_vel_msg.linear.x;
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <cmd_vel_sub_cb+0x70>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe fae0 	bl	8000a7c <__aeabi_d2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a0e      	ldr	r2, [pc, #56]	@ (80024f8 <cmd_vel_sub_cb+0x74>)
 80024c0:	6013      	str	r3, [r2, #0]
  vy = cmd_vel_msg.linear.y;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <cmd_vel_sub_cb+0x70>)
 80024c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fad6 	bl	8000a7c <__aeabi_d2f>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <cmd_vel_sub_cb+0x78>)
 80024d4:	6013      	str	r3, [r2, #0]
  vz = cmd_vel_msg.angular.z;
 80024d6:	4b07      	ldr	r3, [pc, #28]	@ (80024f4 <cmd_vel_sub_cb+0x70>)
 80024d8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe facc 	bl	8000a7c <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <cmd_vel_sub_cb+0x7c>)
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e000      	b.n	80024ee <cmd_vel_sub_cb+0x6a>
    return;
 80024ec:	bf00      	nop
//
////	  rcl_publish(&pose_pub, &pose_msg, NULL);
//  }
//
//  last_cmd_vel_time = current_time;
}
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	20000e58 	.word	0x20000e58
 80024f8:	20000b78 	.word	0x20000b78
 80024fc:	20000b7c 	.word	0x20000b7c
 8002500:	20000b80 	.word	0x20000b80

08002504 <update_pose>:

void update_pose(float pos_x, float pos_y, float pos_z, float vel_x, float vel_y, float vel_z){
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	ed87 0a05 	vstr	s0, [r7, #20]
 800250e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002512:	ed87 1a03 	vstr	s2, [r7, #12]
 8002516:	edc7 1a02 	vstr	s3, [r7, #8]
 800251a:	ed87 2a01 	vstr	s4, [r7, #4]
 800251e:	edc7 2a00 	vstr	s5, [r7]
  pose_msg.pose.pose.position.x = pos_x;
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7fe f840 	bl	80005a8 <__aeabi_f2d>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4917      	ldr	r1, [pc, #92]	@ (800258c <update_pose+0x88>)
 800252e:	e9c1 2308 	strd	r2, r3, [r1, #32]
  pose_msg.pose.pose.position.y = pos_y;
 8002532:	6938      	ldr	r0, [r7, #16]
 8002534:	f7fe f838 	bl	80005a8 <__aeabi_f2d>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4913      	ldr	r1, [pc, #76]	@ (800258c <update_pose+0x88>)
 800253e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  pose_msg.pose.pose.orientation.z = pos_z;
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7fe f830 	bl	80005a8 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	490f      	ldr	r1, [pc, #60]	@ (800258c <update_pose+0x88>)
 800254e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
  pose_msg.twist.twist.linear.x = vel_x;
 8002552:	68b8      	ldr	r0, [r7, #8]
 8002554:	f7fe f828 	bl	80005a8 <__aeabi_f2d>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	490b      	ldr	r1, [pc, #44]	@ (800258c <update_pose+0x88>)
 800255e:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
  pose_msg.twist.twist.linear.y = vel_y;
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe f820 	bl	80005a8 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4907      	ldr	r1, [pc, #28]	@ (800258c <update_pose+0x88>)
 800256e:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
  pose_msg.twist.twist.angular.z = vel_z;
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	f7fe f818 	bl	80005a8 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4903      	ldr	r1, [pc, #12]	@ (800258c <update_pose+0x88>)
 800257e:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000b88 	.word	0x20000b88

08002590 <pose_pub_timer_cb>:


void pose_pub_timer_cb(rcl_timer_t * timer, int64_t last_call_time) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	e9c7 2300 	strd	r2, r3, [r7]
  
//  int64_t time_ns = rmw_uros_epoch_nanos();
//  pose_msg.header.stamp.sec = time_ns / 1000000000LL;
//  pose_msg.header.stamp.nanosec = time_ns % 1000000000LL;
//  rcl_ret_t ret = rcl_publish(&pose_pub, &pose_msg, NULL);
  rcl_publish(&pose_pub, &pose_msg, NULL);
 800259c:	2200      	movs	r2, #0
 800259e:	4904      	ldr	r1, [pc, #16]	@ (80025b0 <pose_pub_timer_cb+0x20>)
 80025a0:	4804      	ldr	r0, [pc, #16]	@ (80025b4 <pose_pub_timer_cb+0x24>)
 80025a2:	f00c fa8d 	bl	800eac0 <rcl_publish>
  // 可选：添加调试信息（如果需要的话）
  // printf("Published pose: x=%.2f, y=%.2f, yaw=%.2f, ret=%d\n", 
  //        pose_msg.pose.pose.position.x, 
  //        pose_msg.pose.pose.position.y, 
  //        current_yaw, ret);
}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000b88 	.word	0x20000b88
 80025b4:	20000b84 	.word	0x20000b84

080025b8 <cmd_arm_sub_cb>:

void cmd_arm_sub_cb(const void* msgin) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	60fb      	str	r3, [r7, #12]
  cmd_arm_msg = *msg;
 80025c4:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <cmd_arm_sub_cb+0x58>)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6013      	str	r3, [r2, #0]
  uint32_t current_time = HAL_GetTick();
 80025cc:	f001 fe4a 	bl	8004264 <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]

  if(arm_msg.data != cmd_arm_msg.data) {
 80025d2:	4b10      	ldr	r3, [pc, #64]	@ (8002614 <cmd_arm_sub_cb+0x5c>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <cmd_arm_sub_cb+0x58>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d010      	beq.n	8002600 <cmd_arm_sub_cb+0x48>
    if(current_time - last_cmd_arm_time > 2000) {
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <cmd_arm_sub_cb+0x60>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80025ea:	d90c      	bls.n	8002606 <cmd_arm_sub_cb+0x4e>
      arm_msg = cmd_arm_msg;
 80025ec:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <cmd_arm_sub_cb+0x5c>)
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <cmd_arm_sub_cb+0x58>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6013      	str	r3, [r2, #0]
      rcl_publish(&arm_pub, &arm_msg, NULL);
 80025f4:	2200      	movs	r2, #0
 80025f6:	4907      	ldr	r1, [pc, #28]	@ (8002614 <cmd_arm_sub_cb+0x5c>)
 80025f8:	4808      	ldr	r0, [pc, #32]	@ (800261c <cmd_arm_sub_cb+0x64>)
 80025fa:	f00c fa61 	bl	800eac0 <rcl_publish>
    }
  }
  else{
    last_cmd_arm_time = current_time;
  }
}
 80025fe:	e002      	b.n	8002606 <cmd_arm_sub_cb+0x4e>
    last_cmd_arm_time = current_time;
 8002600:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <cmd_arm_sub_cb+0x60>)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	6013      	str	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000e94 	.word	0x20000e94
 8002614:	20000e8c 	.word	0x20000e8c
 8002618:	20000ea0 	.word	0x20000ea0
 800261c:	20000e88 	.word	0x20000e88

08002620 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800262c:	f008 fb9c 	bl	800ad68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002630:	4b5a      	ldr	r3, [pc, #360]	@ (800279c <pvPortMallocMicroROS+0x17c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002638:	f000 f986 	bl	8002948 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800263c:	4b58      	ldr	r3, [pc, #352]	@ (80027a0 <pvPortMallocMicroROS+0x180>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	f040 8090 	bne.w	800276a <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01e      	beq.n	800268e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002650:	2208      	movs	r2, #8
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	2b00      	cmp	r3, #0
 8002660:	d015      	beq.n	800268e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f023 0307 	bic.w	r3, r3, #7
 8002668:	3308      	adds	r3, #8
 800266a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267a:	f383 8811 	msr	BASEPRI, r3
 800267e:	f3bf 8f6f 	isb	sy
 8002682:	f3bf 8f4f 	dsb	sy
 8002686:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002688:	bf00      	nop
 800268a:	bf00      	nop
 800268c:	e7fd      	b.n	800268a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d06a      	beq.n	800276a <pvPortMallocMicroROS+0x14a>
 8002694:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <pvPortMallocMicroROS+0x184>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d865      	bhi.n	800276a <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800269e:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <pvPortMallocMicroROS+0x188>)
 80026a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80026a2:	4b41      	ldr	r3, [pc, #260]	@ (80027a8 <pvPortMallocMicroROS+0x188>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026a8:	e004      	b.n	80026b4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d903      	bls.n	80026c6 <pvPortMallocMicroROS+0xa6>
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f1      	bne.n	80026aa <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80026c6:	4b35      	ldr	r3, [pc, #212]	@ (800279c <pvPortMallocMicroROS+0x17c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d04c      	beq.n	800276a <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2208      	movs	r2, #8
 80026d6:	4413      	add	r3, r2
 80026d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	1ad2      	subs	r2, r2, r3
 80026ea:	2308      	movs	r3, #8
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d920      	bls.n	8002734 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80026f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	613b      	str	r3, [r7, #16]
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800272e:	69b8      	ldr	r0, [r7, #24]
 8002730:	f000 f96c 	bl	8002a0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <pvPortMallocMicroROS+0x184>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <pvPortMallocMicroROS+0x184>)
 8002740:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <pvPortMallocMicroROS+0x184>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <pvPortMallocMicroROS+0x18c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	429a      	cmp	r2, r3
 800274c:	d203      	bcs.n	8002756 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <pvPortMallocMicroROS+0x184>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <pvPortMallocMicroROS+0x18c>)
 8002754:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4b11      	ldr	r3, [pc, #68]	@ (80027a0 <pvPortMallocMicroROS+0x180>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	431a      	orrs	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800276a:	f008 fb0b 	bl	800ad84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	60fb      	str	r3, [r7, #12]
}
 800278a:	bf00      	nop
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002790:	69fb      	ldr	r3, [r7, #28]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3728      	adds	r7, #40	@ 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20004b98 	.word	0x20004b98
 80027a0:	20004ba4 	.word	0x20004ba4
 80027a4:	20004b9c 	.word	0x20004b9c
 80027a8:	20004b90 	.word	0x20004b90
 80027ac:	20004ba0 	.word	0x20004ba0

080027b0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d04a      	beq.n	8002858 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80027c2:	2308      	movs	r3, #8
 80027c4:	425b      	negs	r3, r3
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4413      	add	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <vPortFreeMicroROS+0xb0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4013      	ands	r3, r2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10b      	bne.n	80027f6 <vPortFreeMicroROS+0x46>
	__asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	60fb      	str	r3, [r7, #12]
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	e7fd      	b.n	80027f2 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00b      	beq.n	8002816 <vPortFreeMicroROS+0x66>
	__asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	60bb      	str	r3, [r7, #8]
}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	e7fd      	b.n	8002812 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <vPortFreeMicroROS+0xb0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4013      	ands	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <vPortFreeMicroROS+0xb0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	43db      	mvns	r3, r3
 8002836:	401a      	ands	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800283c:	f008 fa94 	bl	800ad68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <vPortFreeMicroROS+0xb4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4413      	add	r3, r2
 800284a:	4a06      	ldr	r2, [pc, #24]	@ (8002864 <vPortFreeMicroROS+0xb4>)
 800284c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800284e:	6938      	ldr	r0, [r7, #16]
 8002850:	f000 f8dc 	bl	8002a0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002854:	f008 fa96 	bl	800ad84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20004ba4 	.word	0x20004ba4
 8002864:	20004b9c 	.word	0x20004b9c

08002868 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002874:	2308      	movs	r3, #8
 8002876:	425b      	negs	r3, r3
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4413      	add	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <getBlockSize+0x38>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	43db      	mvns	r3, r3
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

	return count;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20004ba4 	.word	0x20004ba4

080028a4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80028ae:	f008 fa5b 	bl	800ad68 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	f7ff feb4 	bl	8002620 <pvPortMallocMicroROS>
 80028b8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d017      	beq.n	80028f0 <pvPortReallocMicroROS+0x4c>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d014      	beq.n	80028f0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ffce 	bl	8002868 <getBlockSize>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2208      	movs	r2, #8
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d201      	bcs.n	80028e0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68b8      	ldr	r0, [r7, #8]
 80028e6:	f019 feca 	bl	801c67e <memcpy>

		vPortFreeMicroROS(pv);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff60 	bl	80027b0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80028f0:	f008 fa48 	bl	800ad84 <xTaskResumeAll>

	return newmem;
 80028f4:	68bb      	ldr	r3, [r7, #8]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002908:	f008 fa2e 	bl	800ad68 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	fb02 f303 	mul.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff fe82 	bl	8002620 <pvPortMallocMicroROS>
 800291c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002922:	e004      	b.n	800292e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	613a      	str	r2, [r7, #16]
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	617a      	str	r2, [r7, #20]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f5      	bne.n	8002924 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002938:	f008 fa24 	bl	800ad84 <xTaskResumeAll>
  	return mem;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800294e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002952:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <prvHeapInit+0xac>)
 8002956:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3307      	adds	r3, #7
 8002966:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <prvHeapInit+0xac>)
 8002978:	4413      	add	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002980:	4a1d      	ldr	r2, [pc, #116]	@ (80029f8 <prvHeapInit+0xb0>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002986:	4b1c      	ldr	r3, [pc, #112]	@ (80029f8 <prvHeapInit+0xb0>)
 8002988:	2200      	movs	r2, #0
 800298a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002994:	2208      	movs	r2, #8
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0307 	bic.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4a15      	ldr	r2, [pc, #84]	@ (80029fc <prvHeapInit+0xb4>)
 80029a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80029aa:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <prvHeapInit+0xb4>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80029b2:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <prvHeapInit+0xb4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	1ad2      	subs	r2, r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <prvHeapInit+0xb4>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a00 <prvHeapInit+0xb8>)
 80029d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <prvHeapInit+0xbc>)
 80029de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <prvHeapInit+0xc0>)
 80029e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80029e6:	601a      	str	r2, [r3, #0]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	20000f90 	.word	0x20000f90
 80029f8:	20004b90 	.word	0x20004b90
 80029fc:	20004b98 	.word	0x20004b98
 8002a00:	20004ba0 	.word	0x20004ba0
 8002a04:	20004b9c 	.word	0x20004b9c
 8002a08:	20004ba4 	.word	0x20004ba4

08002a0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <prvInsertBlockIntoFreeList+0xac>)
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e002      	b.n	8002a20 <prvInsertBlockIntoFreeList+0x14>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d8f7      	bhi.n	8002a1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	4413      	add	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d108      	bne.n	8002a4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	441a      	add	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	441a      	add	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d118      	bne.n	8002a94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <prvInsertBlockIntoFreeList+0xb0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d00d      	beq.n	8002a8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e008      	b.n	8002a9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <prvInsertBlockIntoFreeList+0xb0>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e003      	b.n	8002a9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d002      	beq.n	8002aaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20004b90 	.word	0x20004b90
 8002abc:	20004b98 	.word	0x20004b98

08002ac0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002ace:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002ad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ad4:	4904      	ldr	r1, [pc, #16]	@ (8002ae8 <cubemx_transport_open+0x28>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f005 fe22 	bl	8008720 <HAL_UART_Receive_DMA>
    return true;
 8002adc:	2301      	movs	r3, #1
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20004ba8 	.word	0x20004ba8

08002aec <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002afa:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f005 fe34 	bl	800876a <HAL_UART_DMAStop>
    return true;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b20:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d11c      	bne.n	8002b68 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	68b9      	ldr	r1, [r7, #8]
 8002b36:	6978      	ldr	r0, [r7, #20]
 8002b38:	f005 fd76 	bl	8008628 <HAL_UART_Transmit_DMA>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b40:	e002      	b.n	8002b48 <cubemx_transport_write+0x3c>
            osDelay(1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f007 f8ce 	bl	8009ce4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <cubemx_transport_write+0x4e>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d1f3      	bne.n	8002b42 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8002b5a:	7cfb      	ldrb	r3, [r7, #19]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <cubemx_transport_write+0x58>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	e002      	b.n	8002b6a <cubemx_transport_write+0x5e>
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8002b68:	2300      	movs	r3, #0
    }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002b88:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8e:	b672      	cpsid	i
}
 8002b90:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002c10 <cubemx_transport_read+0x9c>)
 8002ba0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ba2:	b662      	cpsie	i
}
 8002ba4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002bac:	2001      	movs	r0, #1
 8002bae:	f007 f899 	bl	8009ce4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002bb2:	4b18      	ldr	r3, [pc, #96]	@ (8002c14 <cubemx_transport_read+0xa0>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b16      	ldr	r3, [pc, #88]	@ (8002c10 <cubemx_transport_read+0x9c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d103      	bne.n	8002bc6 <cubemx_transport_read+0x52>
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	dbe3      	blt.n	8002b8e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002bca:	e011      	b.n	8002bf0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <cubemx_transport_read+0xa0>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	440b      	add	r3, r1
 8002bd6:	4910      	ldr	r1, [pc, #64]	@ (8002c18 <cubemx_transport_read+0xa4>)
 8002bd8:	5c8a      	ldrb	r2, [r1, r2]
 8002bda:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <cubemx_transport_read+0xa0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be6:	4a0b      	ldr	r2, [pc, #44]	@ (8002c14 <cubemx_transport_read+0xa0>)
 8002be8:	6013      	str	r3, [r2, #0]
        wrote++;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3301      	adds	r3, #1
 8002bee:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <cubemx_transport_read+0xa0>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <cubemx_transport_read+0x9c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d003      	beq.n	8002c04 <cubemx_transport_read+0x90>
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3e3      	bcc.n	8002bcc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002c04:	69bb      	ldr	r3, [r7, #24]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200053ac 	.word	0x200053ac
 8002c14:	200053a8 	.word	0x200053a8
 8002c18:	20004ba8 	.word	0x20004ba8

08002c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c20:	f001 faea 	bl	80041f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c24:	f000 f82a 	bl	8002c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c28:	f000 fba4 	bl	8003374 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c2c:	f000 fb7a 	bl	8003324 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c30:	f000 fb4e 	bl	80032d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002c34:	f000 f902 	bl	8002e3c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c38:	f000 f958 	bl	8002eec <MX_TIM2_Init>
  MX_TIM3_Init();
 8002c3c:	f000 f9aa 	bl	8002f94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c40:	f000 f9fc 	bl	800303c <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c44:	f000 fa4e 	bl	80030e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c48:	f000 fa9a 	bl	8003180 <MX_TIM8_Init>
  MX_ADC1_Init();
 8002c4c:	f000 f876 	bl	8002d3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c50:	f000 f8c6 	bl	8002de0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c54:	f006 ff6a 	bl	8009b2c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c58:	4a05      	ldr	r2, [pc, #20]	@ (8002c70 <main+0x54>)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4805      	ldr	r0, [pc, #20]	@ (8002c74 <main+0x58>)
 8002c5e:	f006 ffaf 	bl	8009bc0 <osThreadNew>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <main+0x5c>)
 8002c66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002c68:	f006 ff84 	bl	8009b74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <main+0x50>
 8002c70:	0801d3d8 	.word	0x0801d3d8
 8002c74:	08004095 	.word	0x08004095
 8002c78:	20005704 	.word	0x20005704

08002c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b094      	sub	sp, #80	@ 0x50
 8002c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	2234      	movs	r2, #52	@ 0x34
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f019 fc2e 	bl	801c4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c90:	f107 0308 	add.w	r3, r7, #8
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <SystemClock_Config+0xb8>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	4a22      	ldr	r2, [pc, #136]	@ (8002d34 <SystemClock_Config+0xb8>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb0:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <SystemClock_Config+0xb8>)
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <SystemClock_Config+0xbc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d38 <SystemClock_Config+0xbc>)
 8002cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <SystemClock_Config+0xbc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ce4:	2310      	movs	r3, #16
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 f805 	bl	8006d00 <HAL_RCC_OscConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002cfc:	f000 fba4 	bl	8003448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d00:	230f      	movs	r3, #15
 8002d02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fcfa 	bl	8006714 <HAL_RCC_ClockConfig>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002d26:	f000 fb8f 	bl	8003448 <Error_Handler>
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3750      	adds	r7, #80	@ 0x50
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40007000 	.word	0x40007000

08002d3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d42:	463b      	mov	r3, r7
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d50:	4a21      	ldr	r2, [pc, #132]	@ (8002dd8 <MX_ADC1_Init+0x9c>)
 8002d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d54:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002d60:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d66:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d74:	4b17      	ldr	r3, [pc, #92]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d7c:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <MX_ADC1_Init+0xa0>)
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d80:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002d86:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d9a:	480e      	ldr	r0, [pc, #56]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002d9c:	f001 fa6e 	bl	800427c <HAL_ADC_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002da6:	f000 fb4f 	bl	8003448 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002db6:	463b      	mov	r3, r7
 8002db8:	4619      	mov	r1, r3
 8002dba:	4806      	ldr	r0, [pc, #24]	@ (8002dd4 <MX_ADC1_Init+0x98>)
 8002dbc:	f001 faa2 	bl	8004304 <HAL_ADC_ConfigChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002dc6:	f000 fb3f 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200053b0 	.word	0x200053b0
 8002dd8:	40012000 	.word	0x40012000
 8002ddc:	0f000001 	.word	0x0f000001

08002de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002de6:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <MX_I2C1_Init+0x54>)
 8002de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002dea:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002dec:	4a12      	ldr	r2, [pc, #72]	@ (8002e38 <MX_I2C1_Init+0x58>)
 8002dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002df0:	4b0f      	ldr	r3, [pc, #60]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002df6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002dfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e04:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e10:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e1c:	4804      	ldr	r0, [pc, #16]	@ (8002e30 <MX_I2C1_Init+0x50>)
 8002e1e:	f002 fc25 	bl	800566c <HAL_I2C_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e28:	f000 fb0e 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	200053f8 	.word	0x200053f8
 8002e34:	40005400 	.word	0x40005400
 8002e38:	000186a0 	.word	0x000186a0

08002e3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	@ 0x30
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e42:	f107 030c 	add.w	r3, r7, #12
 8002e46:	2224      	movs	r2, #36	@ 0x24
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f019 fb4e 	bl	801c4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002e58:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e5a:	4a23      	ldr	r2, [pc, #140]	@ (8002ee8 <MX_TIM1_Init+0xac>)
 8002e5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002e5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e84:	2303      	movs	r3, #3
 8002e86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	4619      	mov	r1, r3
 8002eae:	480d      	ldr	r0, [pc, #52]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002eb0:	f004 fb9c 	bl	80075ec <HAL_TIM_Encoder_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002eba:	f000 fac5 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4806      	ldr	r0, [pc, #24]	@ (8002ee4 <MX_TIM1_Init+0xa8>)
 8002ecc:	f005 fa7a 	bl	80083c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002ed6:	f000 fab7 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	3730      	adds	r7, #48	@ 0x30
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000544c 	.word	0x2000544c
 8002ee8:	40010000 	.word	0x40010000

08002eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08c      	sub	sp, #48	@ 0x30
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ef2:	f107 030c 	add.w	r3, r7, #12
 8002ef6:	2224      	movs	r2, #36	@ 0x24
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f019 faf6 	bl	801c4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	1d3b      	adds	r3, r7, #4
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f08:	4b21      	ldr	r3, [pc, #132]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f10:	4b1f      	ldr	r3, [pc, #124]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f16:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f24:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002f30:	2303      	movs	r3, #3
 8002f32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f44:	2300      	movs	r3, #0
 8002f46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	4619      	mov	r1, r3
 8002f5a:	480d      	ldr	r0, [pc, #52]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f5c:	f004 fb46 	bl	80075ec <HAL_TIM_Encoder_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002f66:	f000 fa6f 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	4619      	mov	r1, r3
 8002f76:	4806      	ldr	r0, [pc, #24]	@ (8002f90 <MX_TIM2_Init+0xa4>)
 8002f78:	f005 fa24 	bl	80083c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002f82:	f000 fa61 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f86:	bf00      	nop
 8002f88:	3730      	adds	r7, #48	@ 0x30
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20005494 	.word	0x20005494

08002f94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	@ 0x30
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	2224      	movs	r2, #36	@ 0x24
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f019 faa2 	bl	801c4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fa8:	1d3b      	adds	r3, r7, #4
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fb0:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8002fb2:	4a21      	ldr	r2, [pc, #132]	@ (8003038 <MX_TIM3_Init+0xa4>)
 8002fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8002fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fca:	4b1a      	ldr	r3, [pc, #104]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd0:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4619      	mov	r1, r3
 8003000:	480c      	ldr	r0, [pc, #48]	@ (8003034 <MX_TIM3_Init+0xa0>)
 8003002:	f004 faf3 	bl	80075ec <HAL_TIM_Encoder_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800300c:	f000 fa1c 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003010:	2300      	movs	r3, #0
 8003012:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	4619      	mov	r1, r3
 800301c:	4805      	ldr	r0, [pc, #20]	@ (8003034 <MX_TIM3_Init+0xa0>)
 800301e:	f005 f9d1 	bl	80083c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003028:	f000 fa0e 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800302c:	bf00      	nop
 800302e:	3730      	adds	r7, #48	@ 0x30
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	200054dc 	.word	0x200054dc
 8003038:	40000400 	.word	0x40000400

0800303c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	@ 0x30
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003042:	f107 030c 	add.w	r3, r7, #12
 8003046:	2224      	movs	r2, #36	@ 0x24
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f019 fa4e 	bl	801c4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003050:	1d3b      	adds	r3, r7, #4
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003058:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <MX_TIM4_Init+0xa0>)
 800305a:	4a21      	ldr	r2, [pc, #132]	@ (80030e0 <MX_TIM4_Init+0xa4>)
 800305c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800305e:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <MX_TIM4_Init+0xa0>)
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003064:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <MX_TIM4_Init+0xa0>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800306a:	4b1c      	ldr	r3, [pc, #112]	@ (80030dc <MX_TIM4_Init+0xa0>)
 800306c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003070:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003072:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <MX_TIM4_Init+0xa0>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003078:	4b18      	ldr	r3, [pc, #96]	@ (80030dc <MX_TIM4_Init+0xa0>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800307e:	2303      	movs	r3, #3
 8003080:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003086:	2301      	movs	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800309a:	2300      	movs	r3, #0
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80030a2:	f107 030c 	add.w	r3, r7, #12
 80030a6:	4619      	mov	r1, r3
 80030a8:	480c      	ldr	r0, [pc, #48]	@ (80030dc <MX_TIM4_Init+0xa0>)
 80030aa:	f004 fa9f 	bl	80075ec <HAL_TIM_Encoder_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80030b4:	f000 f9c8 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030b8:	2300      	movs	r3, #0
 80030ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	@ (80030dc <MX_TIM4_Init+0xa0>)
 80030c6:	f005 f97d 	bl	80083c4 <HAL_TIMEx_MasterConfigSynchronization>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80030d0:	f000 f9ba 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3730      	adds	r7, #48	@ 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20005524 	.word	0x20005524
 80030e0:	40000800 	.word	0x40000800

080030e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f8:	463b      	mov	r3, r7
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003100:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003102:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <MX_TIM5_Init+0x98>)
 8003104:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8003106:	4b1c      	ldr	r3, [pc, #112]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003108:	220f      	movs	r2, #15
 800310a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b1a      	ldr	r3, [pc, #104]	@ (8003178 <MX_TIM5_Init+0x94>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8003112:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003114:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003118:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311a:	4b17      	ldr	r3, [pc, #92]	@ (8003178 <MX_TIM5_Init+0x94>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003120:	4b15      	ldr	r3, [pc, #84]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003126:	4814      	ldr	r0, [pc, #80]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003128:	f004 f888 	bl	800723c <HAL_TIM_Base_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003132:	f000 f989 	bl	8003448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800313a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	4619      	mov	r1, r3
 8003142:	480d      	ldr	r0, [pc, #52]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003144:	f004 fd38 	bl	8007bb8 <HAL_TIM_ConfigClockSource>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800314e:	f000 f97b 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800315a:	463b      	mov	r3, r7
 800315c:	4619      	mov	r1, r3
 800315e:	4806      	ldr	r0, [pc, #24]	@ (8003178 <MX_TIM5_Init+0x94>)
 8003160:	f005 f930 	bl	80083c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800316a:	f000 f96d 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800316e:	bf00      	nop
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	2000556c 	.word	0x2000556c
 800317c:	40000c00 	.word	0x40000c00

08003180 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b092      	sub	sp, #72	@ 0x48
 8003184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003186:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003190:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
 80031a0:	615a      	str	r2, [r3, #20]
 80031a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	2220      	movs	r2, #32
 80031a8:	2100      	movs	r1, #0
 80031aa:	4618      	mov	r0, r3
 80031ac:	f019 f99e 	bl	801c4ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80031b0:	4b45      	ldr	r3, [pc, #276]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031b2:	4a46      	ldr	r2, [pc, #280]	@ (80032cc <MX_TIM8_Init+0x14c>)
 80031b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80031b6:	4b44      	ldr	r3, [pc, #272]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031b8:	22b3      	movs	r2, #179	@ 0xb3
 80031ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031bc:	4b42      	ldr	r3, [pc, #264]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ca:	4b3f      	ldr	r3, [pc, #252]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80031d0:	4b3d      	ldr	r3, [pc, #244]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d6:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80031dc:	483a      	ldr	r0, [pc, #232]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031de:	f004 f8ed 	bl	80073bc <HAL_TIM_PWM_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80031e8:	f000 f92e 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ec:	2300      	movs	r3, #0
 80031ee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80031f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80031f8:	4619      	mov	r1, r3
 80031fa:	4833      	ldr	r0, [pc, #204]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80031fc:	f005 f8e2 	bl	80083c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003206:	f000 f91f 	bl	8003448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800320a:	2360      	movs	r3, #96	@ 0x60
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003212:	2300      	movs	r3, #0
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003216:	2300      	movs	r3, #0
 8003218:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800321e:	2300      	movs	r3, #0
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003222:	2300      	movs	r3, #0
 8003224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322a:	2200      	movs	r2, #0
 800322c:	4619      	mov	r1, r3
 800322e:	4826      	ldr	r0, [pc, #152]	@ (80032c8 <MX_TIM8_Init+0x148>)
 8003230:	f004 fc00 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800323a:	f000 f905 	bl	8003448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800323e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003242:	2204      	movs	r2, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4820      	ldr	r0, [pc, #128]	@ (80032c8 <MX_TIM8_Init+0x148>)
 8003248:	f004 fbf4 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003252:	f000 f8f9 	bl	8003448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325a:	2208      	movs	r2, #8
 800325c:	4619      	mov	r1, r3
 800325e:	481a      	ldr	r0, [pc, #104]	@ (80032c8 <MX_TIM8_Init+0x148>)
 8003260:	f004 fbe8 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800326a:	f000 f8ed 	bl	8003448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800326e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003272:	220c      	movs	r2, #12
 8003274:	4619      	mov	r1, r3
 8003276:	4814      	ldr	r0, [pc, #80]	@ (80032c8 <MX_TIM8_Init+0x148>)
 8003278:	f004 fbdc 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 8003282:	f000 f8e1 	bl	8003448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800329a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800329e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	4619      	mov	r1, r3
 80032a8:	4807      	ldr	r0, [pc, #28]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80032aa:	f005 f907 	bl	80084bc <HAL_TIMEx_ConfigBreakDeadTime>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 80032b4:	f000 f8c8 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80032b8:	4803      	ldr	r0, [pc, #12]	@ (80032c8 <MX_TIM8_Init+0x148>)
 80032ba:	f000 fc57 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 80032be:	bf00      	nop
 80032c0:	3748      	adds	r7, #72	@ 0x48
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200055b4 	.word	0x200055b4
 80032cc:	40010400 	.word	0x40010400

080032d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032d6:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <MX_USART2_UART_Init+0x50>)
 80032d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032da:	4b10      	ldr	r3, [pc, #64]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ee:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032f6:	220c      	movs	r2, #12
 80032f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003300:	4b06      	ldr	r3, [pc, #24]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003306:	4805      	ldr	r0, [pc, #20]	@ (800331c <MX_USART2_UART_Init+0x4c>)
 8003308:	f005 f93e 	bl	8008588 <HAL_UART_Init>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003312:	f000 f899 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200055fc 	.word	0x200055fc
 8003320:	40004400 	.word	0x40004400

08003324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <MX_DMA_Init+0x4c>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003332:	4a0f      	ldr	r2, [pc, #60]	@ (8003370 <MX_DMA_Init+0x4c>)
 8003334:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003338:	6313      	str	r3, [r2, #48]	@ 0x30
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <MX_DMA_Init+0x4c>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2105      	movs	r1, #5
 800334a:	2010      	movs	r0, #16
 800334c:	f001 fac0 	bl	80048d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003350:	2010      	movs	r0, #16
 8003352:	f001 fad9 	bl	8004908 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	2105      	movs	r1, #5
 800335a:	2011      	movs	r0, #17
 800335c:	f001 fab8 	bl	80048d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003360:	2011      	movs	r0, #17
 8003362:	f001 fad1 	bl	8004908 <HAL_NVIC_EnableIRQ>

}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	60da      	str	r2, [r3, #12]
 8003388:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <MX_GPIO_Init+0xc8>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	4a2a      	ldr	r2, [pc, #168]	@ (800343c <MX_GPIO_Init+0xc8>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	@ 0x30
 800339a:	4b28      	ldr	r3, [pc, #160]	@ (800343c <MX_GPIO_Init+0xc8>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	4b24      	ldr	r3, [pc, #144]	@ (800343c <MX_GPIO_Init+0xc8>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ae:	4a23      	ldr	r2, [pc, #140]	@ (800343c <MX_GPIO_Init+0xc8>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b6:	4b21      	ldr	r3, [pc, #132]	@ (800343c <MX_GPIO_Init+0xc8>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <MX_GPIO_Init+0xc8>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <MX_GPIO_Init+0xc8>)
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <MX_GPIO_Init+0xc8>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80033de:	2200      	movs	r2, #0
 80033e0:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80033e4:	4816      	ldr	r0, [pc, #88]	@ (8003440 <MX_GPIO_Init+0xcc>)
 80033e6:	f002 f927 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80033ea:	2200      	movs	r2, #0
 80033ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033f0:	4814      	ldr	r0, [pc, #80]	@ (8003444 <MX_GPIO_Init+0xd0>)
 80033f2:	f002 f921 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80033f6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80033fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	4619      	mov	r1, r3
 800340e:	480c      	ldr	r0, [pc, #48]	@ (8003440 <MX_GPIO_Init+0xcc>)
 8003410:	f001 fe8a 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003418:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341a:	2301      	movs	r3, #1
 800341c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	4619      	mov	r1, r3
 800342c:	4805      	ldr	r0, [pc, #20]	@ (8003444 <MX_GPIO_Init+0xd0>)
 800342e:	f001 fe7b 	bl	8005128 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003432:	bf00      	nop
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800
 8003440:	40020400 	.word	0x40020400
 8003444:	40020000 	.word	0x40020000

08003448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800344c:	b672      	cpsid	i
}
 800344e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <Error_Handler+0x8>

08003454 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800345e:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <microros_allocate+0x3c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	461a      	mov	r2, r3
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <microros_allocate+0x3c>)
 800346c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800346e:	4b09      	ldr	r3, [pc, #36]	@ (8003494 <microros_allocate+0x40>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <microros_allocate+0x40>)
 800347c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff f8ce 	bl	8002620 <pvPortMallocMicroROS>
 8003484:	4603      	mov	r3, r0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20008644 	.word	0x20008644
 8003494:	20008648 	.word	0x20008648

08003498 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff f9dd 	bl	8002868 <getBlockSize>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <microros_deallocate+0x34>)
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <microros_deallocate+0x34>)
 80034ba:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff f977 	bl	80027b0 <vPortFreeMicroROS>
  }
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20008648 	.word	0x20008648

080034d0 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <microros_reallocate+0x64>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4413      	add	r3, r2
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <microros_reallocate+0x64>)
 80034ea:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <microros_reallocate+0x68>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4413      	add	r3, r2
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003538 <microros_reallocate+0x68>)
 80034fa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8003502:	68b8      	ldr	r0, [r7, #8]
 8003504:	f7ff f88c 	bl	8002620 <pvPortMallocMicroROS>
 8003508:	4603      	mov	r3, r0
 800350a:	e00e      	b.n	800352a <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f7ff f9ab 	bl	8002868 <getBlockSize>
 8003512:	4603      	mov	r3, r0
 8003514:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <microros_reallocate+0x68>)
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	461a      	mov	r2, r3
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <microros_reallocate+0x68>)
 800351e:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7ff f9be 	bl	80028a4 <pvPortReallocMicroROS>
 8003528:	4603      	mov	r3, r0
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20008644 	.word	0x20008644
 8003538:	20008648 	.word	0x20008648

0800353c <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	4a0c      	ldr	r2, [pc, #48]	@ (8003584 <microros_zero_allocate+0x48>)
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	4413      	add	r3, r2
 8003556:	461a      	mov	r2, r3
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <microros_zero_allocate+0x48>)
 800355a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	4a08      	ldr	r2, [pc, #32]	@ (8003588 <microros_zero_allocate+0x4c>)
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	4413      	add	r3, r2
 800356a:	461a      	mov	r2, r3
 800356c:	4b06      	ldr	r3, [pc, #24]	@ (8003588 <microros_zero_allocate+0x4c>)
 800356e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff f9c3 	bl	80028fe <pvPortCallocMicroROS>
 8003578:	4603      	mov	r3, r0
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20008644 	.word	0x20008644
 8003588:	20008648 	.word	0x20008648
 800358c:	00000000 	.word	0x00000000

08003590 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003590:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80035a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035a6:	a320      	add	r3, pc, #128	@ (adr r3, 8003628 <UTILS_NanosecondsToTimespec+0x98>)
 80035a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ac:	f7fd fab6 	bl	8000b1c <__aeabi_ldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	a31a      	add	r3, pc, #104	@ (adr r3, 8003628 <UTILS_NanosecondsToTimespec+0x98>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fd faaa 	bl	8000b1c <__aeabi_ldivmod>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da20      	bge.n	8003616 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a11      	ldr	r2, [pc, #68]	@ (8003620 <UTILS_NanosecondsToTimespec+0x90>)
 80035da:	fb82 1203 	smull	r1, r2, r2, r3
 80035de:	1712      	asrs	r2, r2, #28
 80035e0:	17db      	asrs	r3, r3, #31
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	6979      	ldr	r1, [r7, #20]
 80035f0:	17c8      	asrs	r0, r1, #31
 80035f2:	460c      	mov	r4, r1
 80035f4:	4605      	mov	r5, r0
 80035f6:	ebb2 0804 	subs.w	r8, r2, r4
 80035fa:	eb63 0905 	sbc.w	r9, r3, r5
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4906      	ldr	r1, [pc, #24]	@ (8003624 <UTILS_NanosecondsToTimespec+0x94>)
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	609a      	str	r2, [r3, #8]
    }
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003620:	44b82fa1 	.word	0x44b82fa1
 8003624:	3b9aca00 	.word	0x3b9aca00
 8003628:	3b9aca00 	.word	0x3b9aca00
 800362c:	00000000 	.word	0x00000000

08003630 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003634:	b08e      	sub	sp, #56	@ 0x38
 8003636:	af00      	add	r7, sp, #0
 8003638:	6278      	str	r0, [r7, #36]	@ 0x24
 800363a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800363c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003640:	2300      	movs	r3, #0
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003652:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003656:	4618      	mov	r0, r3
 8003658:	f007 fe10 	bl	800b27c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	17da      	asrs	r2, r3, #31
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	61fa      	str	r2, [r7, #28]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	000b      	movs	r3, r1
 8003670:	2200      	movs	r2, #0
 8003672:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	2200      	movs	r2, #0
 800367a:	461c      	mov	r4, r3
 800367c:	4615      	mov	r5, r2
 800367e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003682:	1911      	adds	r1, r2, r4
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	416b      	adcs	r3, r5
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800368e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003692:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	f04f 0400 	mov.w	r4, #0
 800369e:	f04f 0500 	mov.w	r5, #0
 80036a2:	015d      	lsls	r5, r3, #5
 80036a4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80036a8:	0154      	lsls	r4, r2, #5
 80036aa:	4622      	mov	r2, r4
 80036ac:	462b      	mov	r3, r5
 80036ae:	ebb2 0800 	subs.w	r8, r2, r0
 80036b2:	eb63 0901 	sbc.w	r9, r3, r1
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80036c2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80036c6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80036ca:	4690      	mov	r8, r2
 80036cc:	4699      	mov	r9, r3
 80036ce:	eb18 0a00 	adds.w	sl, r8, r0
 80036d2:	eb49 0b01 	adc.w	fp, r9, r1
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036ea:	ebb2 040a 	subs.w	r4, r2, sl
 80036ee:	603c      	str	r4, [r7, #0]
 80036f0:	eb63 030b 	sbc.w	r3, r3, fp
 80036f4:	607b      	str	r3, [r7, #4]
 80036f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036fa:	4623      	mov	r3, r4
 80036fc:	181b      	adds	r3, r3, r0
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	462b      	mov	r3, r5
 8003702:	eb41 0303 	adc.w	r3, r1, r3
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800370e:	f7ff ff3f 	bl	8003590 <UTILS_NanosecondsToTimespec>

    return 0;
 8003712:	2300      	movs	r3, #0
 8003714:	4618      	mov	r0, r3
 8003716:	3738      	adds	r7, #56	@ 0x38
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003720 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <HAL_MspInit+0x54>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_MspInit+0x54>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003734:	6453      	str	r3, [r2, #68]	@ 0x44
 8003736:	4b0f      	ldr	r3, [pc, #60]	@ (8003774 <HAL_MspInit+0x54>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_MspInit+0x54>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <HAL_MspInit+0x54>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	@ 0x40
 8003752:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <HAL_MspInit+0x54>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	210f      	movs	r1, #15
 8003762:	f06f 0001 	mvn.w	r0, #1
 8003766:	f001 f8b3 	bl	80048d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	@ 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a24      	ldr	r2, [pc, #144]	@ (8003828 <HAL_ADC_MspInit+0xb0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d141      	bne.n	800381e <HAL_ADC_MspInit+0xa6>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	4b23      	ldr	r3, [pc, #140]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	4a22      	ldr	r2, [pc, #136]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037aa:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b1c      	ldr	r3, [pc, #112]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c6:	4b19      	ldr	r3, [pc, #100]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	4a14      	ldr	r2, [pc, #80]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037e2:	4b12      	ldr	r3, [pc, #72]	@ (800382c <HAL_ADC_MspInit+0xb4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80037ee:	233f      	movs	r3, #63	@ 0x3f
 80037f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f2:	2303      	movs	r3, #3
 80037f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fa:	f107 0314 	add.w	r3, r7, #20
 80037fe:	4619      	mov	r1, r3
 8003800:	480b      	ldr	r0, [pc, #44]	@ (8003830 <HAL_ADC_MspInit+0xb8>)
 8003802:	f001 fc91 	bl	8005128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003806:	2301      	movs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800380a:	2303      	movs	r3, #3
 800380c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	4619      	mov	r1, r3
 8003818:	4806      	ldr	r0, [pc, #24]	@ (8003834 <HAL_ADC_MspInit+0xbc>)
 800381a:	f001 fc85 	bl	8005128 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800381e:	bf00      	nop
 8003820:	3728      	adds	r7, #40	@ 0x28
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40012000 	.word	0x40012000
 800382c:	40023800 	.word	0x40023800
 8003830:	40020800 	.word	0x40020800
 8003834:	40020000 	.word	0x40020000

08003838 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a19      	ldr	r2, [pc, #100]	@ (80038bc <HAL_I2C_MspInit+0x84>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d12c      	bne.n	80038b4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <HAL_I2C_MspInit+0x88>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	4a17      	ldr	r2, [pc, #92]	@ (80038c0 <HAL_I2C_MspInit+0x88>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6313      	str	r3, [r2, #48]	@ 0x30
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <HAL_I2C_MspInit+0x88>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003876:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800387a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800387c:	2312      	movs	r3, #18
 800387e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003880:	2300      	movs	r3, #0
 8003882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003884:	2303      	movs	r3, #3
 8003886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003888:	2304      	movs	r3, #4
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4619      	mov	r1, r3
 8003892:	480c      	ldr	r0, [pc, #48]	@ (80038c4 <HAL_I2C_MspInit+0x8c>)
 8003894:	f001 fc48 	bl	8005128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_I2C_MspInit+0x88>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a0:	4a07      	ldr	r2, [pc, #28]	@ (80038c0 <HAL_I2C_MspInit+0x88>)
 80038a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80038a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_I2C_MspInit+0x88>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80038b4:	bf00      	nop
 80038b6:	3728      	adds	r7, #40	@ 0x28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40005400 	.word	0x40005400
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40020400 	.word	0x40020400

080038c8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003904 <HAL_I2C_MspDeInit+0x3c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10f      	bne.n	80038fa <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80038da:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <HAL_I2C_MspDeInit+0x40>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	4a0a      	ldr	r2, [pc, #40]	@ (8003908 <HAL_I2C_MspDeInit+0x40>)
 80038e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038e4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80038e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038ea:	4808      	ldr	r0, [pc, #32]	@ (800390c <HAL_I2C_MspDeInit+0x44>)
 80038ec:	f001 fdb0 	bl	8005450 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80038f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038f4:	4805      	ldr	r0, [pc, #20]	@ (800390c <HAL_I2C_MspDeInit+0x44>)
 80038f6:	f001 fdab 	bl	8005450 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40005400 	.word	0x40005400
 8003908:	40023800 	.word	0x40023800
 800390c:	40020400 	.word	0x40020400

08003910 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b090      	sub	sp, #64	@ 0x40
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a64      	ldr	r2, [pc, #400]	@ (8003ac0 <HAL_TIM_Encoder_MspInit+0x1b0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d12d      	bne.n	800398e <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003936:	4b63      	ldr	r3, [pc, #396]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	4a62      	ldr	r2, [pc, #392]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6453      	str	r3, [r2, #68]	@ 0x44
 8003942:	4b60      	ldr	r3, [pc, #384]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
 8003952:	4b5c      	ldr	r3, [pc, #368]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	4a5b      	ldr	r2, [pc, #364]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	6313      	str	r3, [r2, #48]	@ 0x30
 800395e:	4b59      	ldr	r3, [pc, #356]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800396a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800397c:	2301      	movs	r3, #1
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003984:	4619      	mov	r1, r3
 8003986:	4850      	ldr	r0, [pc, #320]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003988:	f001 fbce 	bl	8005128 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800398c:	e094      	b.n	8003ab8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM2)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003996:	d12c      	bne.n	80039f2 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003998:	2300      	movs	r3, #0
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	4b49      	ldr	r3, [pc, #292]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	4a48      	ldr	r2, [pc, #288]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a8:	4b46      	ldr	r3, [pc, #280]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	623b      	str	r3, [r7, #32]
 80039b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	4b42      	ldr	r3, [pc, #264]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	4a41      	ldr	r2, [pc, #260]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80039d0:	2322      	movs	r3, #34	@ 0x22
 80039d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d4:	2302      	movs	r3, #2
 80039d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	2300      	movs	r3, #0
 80039de:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80039e0:	2301      	movs	r3, #1
 80039e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039e8:	4619      	mov	r1, r3
 80039ea:	4837      	ldr	r0, [pc, #220]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80039ec:	f001 fb9c 	bl	8005128 <HAL_GPIO_Init>
}
 80039f0:	e062      	b.n	8003ab8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a35      	ldr	r2, [pc, #212]	@ (8003acc <HAL_TIM_Encoder_MspInit+0x1bc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d12c      	bne.n	8003a56 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	4b30      	ldr	r3, [pc, #192]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	4b29      	ldr	r3, [pc, #164]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a20:	4a28      	ldr	r2, [pc, #160]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a28:	4b26      	ldr	r3, [pc, #152]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a34:	23c0      	movs	r3, #192	@ 0xc0
 8003a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a40:	2300      	movs	r3, #0
 8003a42:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003a44:	2302      	movs	r3, #2
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	481e      	ldr	r0, [pc, #120]	@ (8003ac8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003a50:	f001 fb6a 	bl	8005128 <HAL_GPIO_Init>
}
 8003a54:	e030      	b.n	8003ab8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM4)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_TIM_Encoder_MspInit+0x1c0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d12b      	bne.n	8003ab8 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a60:	2300      	movs	r3, #0
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	4b17      	ldr	r3, [pc, #92]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	4a16      	ldr	r2, [pc, #88]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a6a:	f043 0304 	orr.w	r3, r3, #4
 8003a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a70:	4b14      	ldr	r3, [pc, #80]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a84:	4a0f      	ldr	r2, [pc, #60]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a86:	f043 0302 	orr.w	r3, r3, #2
 8003a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a98:	23c0      	movs	r3, #192	@ 0xc0
 8003a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4808      	ldr	r0, [pc, #32]	@ (8003ad4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003ab4:	f001 fb38 	bl	8005128 <HAL_GPIO_Init>
}
 8003ab8:	bf00      	nop
 8003aba:	3740      	adds	r7, #64	@ 0x40
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40020400 	.word	0x40020400

08003ad8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8003b20 <HAL_TIM_Base_MspInit+0x48>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d115      	bne.n	8003b16 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <HAL_TIM_Base_MspInit+0x4c>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b24 <HAL_TIM_Base_MspInit+0x4c>)
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <HAL_TIM_Base_MspInit+0x4c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2105      	movs	r1, #5
 8003b0a:	2032      	movs	r0, #50	@ 0x32
 8003b0c:	f000 fee0 	bl	80048d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b10:	2032      	movs	r0, #50	@ 0x32
 8003b12:	f000 fef9 	bl	8004908 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a0b      	ldr	r2, [pc, #44]	@ (8003b64 <HAL_TIM_PWM_MspInit+0x3c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10d      	bne.n	8003b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <HAL_TIM_PWM_MspInit+0x40>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	4a09      	ldr	r2, [pc, #36]	@ (8003b68 <HAL_TIM_PWM_MspInit+0x40>)
 8003b44:	f043 0302 	orr.w	r3, r3, #2
 8003b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4a:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <HAL_TIM_PWM_MspInit+0x40>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010400 	.word	0x40010400
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <HAL_TIM_MspPostInit+0x68>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11e      	bne.n	8003bcc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_TIM_MspPostInit+0x6c>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	4a10      	ldr	r2, [pc, #64]	@ (8003bd8 <HAL_TIM_MspPostInit+0x6c>)
 8003b98:	f043 0304 	orr.w	r3, r3, #4
 8003b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd8 <HAL_TIM_MspPostInit+0x6c>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	60bb      	str	r3, [r7, #8]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003baa:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003bae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc0:	f107 030c 	add.w	r3, r7, #12
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4805      	ldr	r0, [pc, #20]	@ (8003bdc <HAL_TIM_MspPostInit+0x70>)
 8003bc8:	f001 faae 	bl	8005128 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003bcc:	bf00      	nop
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40010400 	.word	0x40010400
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40020800 	.word	0x40020800

08003be0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8003d34 <HAL_UART_MspInit+0x154>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	f040 8093 	bne.w	8003d2a <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	4b4b      	ldr	r3, [pc, #300]	@ (8003d38 <HAL_UART_MspInit+0x158>)
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d38 <HAL_UART_MspInit+0x158>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c14:	4b48      	ldr	r3, [pc, #288]	@ (8003d38 <HAL_UART_MspInit+0x158>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	4b44      	ldr	r3, [pc, #272]	@ (8003d38 <HAL_UART_MspInit+0x158>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	4a43      	ldr	r2, [pc, #268]	@ (8003d38 <HAL_UART_MspInit+0x158>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c30:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <HAL_UART_MspInit+0x158>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c4c:	2307      	movs	r3, #7
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c50:	f107 0314 	add.w	r3, r7, #20
 8003c54:	4619      	mov	r1, r3
 8003c56:	4839      	ldr	r0, [pc, #228]	@ (8003d3c <HAL_UART_MspInit+0x15c>)
 8003c58:	f001 fa66 	bl	8005128 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003c5c:	4b38      	ldr	r3, [pc, #224]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c5e:	4a39      	ldr	r2, [pc, #228]	@ (8003d44 <HAL_UART_MspInit+0x164>)
 8003c60:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003c62:	4b37      	ldr	r3, [pc, #220]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c64:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c68:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c6a:	4b35      	ldr	r3, [pc, #212]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c70:	4b33      	ldr	r3, [pc, #204]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c76:	4b32      	ldr	r3, [pc, #200]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c7e:	4b30      	ldr	r3, [pc, #192]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c84:	4b2e      	ldr	r3, [pc, #184]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c92:	4b2b      	ldr	r3, [pc, #172]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c94:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c98:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c9a:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ca0:	4827      	ldr	r0, [pc, #156]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003ca2:	f000 fe3f 	bl	8004924 <HAL_DMA_Init>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8003cac:	f7ff fbcc 	bl	8003448 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a23      	ldr	r2, [pc, #140]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cb6:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <HAL_UART_MspInit+0x160>)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003cbc:	4b22      	ldr	r3, [pc, #136]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cbe:	4a23      	ldr	r2, [pc, #140]	@ (8003d4c <HAL_UART_MspInit+0x16c>)
 8003cc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003cc2:	4b21      	ldr	r3, [pc, #132]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003cc8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cca:	4b1f      	ldr	r3, [pc, #124]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003ccc:	2240      	movs	r2, #64	@ 0x40
 8003cce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cdc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cde:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ce4:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003cea:	4b17      	ldr	r3, [pc, #92]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cf0:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cf2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003cf6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cf8:	4b13      	ldr	r3, [pc, #76]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003cfe:	4812      	ldr	r0, [pc, #72]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003d00:	f000 fe10 	bl	8004924 <HAL_DMA_Init>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003d0a:	f7ff fb9d 	bl	8003448 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003d12:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d14:	4a0c      	ldr	r2, [pc, #48]	@ (8003d48 <HAL_UART_MspInit+0x168>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2105      	movs	r1, #5
 8003d1e:	2026      	movs	r0, #38	@ 0x26
 8003d20:	f000 fdd6 	bl	80048d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d24:	2026      	movs	r0, #38	@ 0x26
 8003d26:	f000 fdef 	bl	8004908 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003d2a:	bf00      	nop
 8003d2c:	3728      	adds	r7, #40	@ 0x28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40004400 	.word	0x40004400
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	20005644 	.word	0x20005644
 8003d44:	40026088 	.word	0x40026088
 8003d48:	200056a4 	.word	0x200056a4
 8003d4c:	400260a0 	.word	0x400260a0

08003d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	@ 0x38
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	4b33      	ldr	r3, [pc, #204]	@ (8003e34 <HAL_InitTick+0xe4>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <HAL_InitTick+0xe4>)
 8003d6a:	f043 0310 	orr.w	r3, r3, #16
 8003d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d70:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <HAL_InitTick+0xe4>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d7c:	f107 0210 	add.w	r2, r7, #16
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 fdde 	bl	8006948 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d96:	f002 fdaf 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 8003d9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d9c:	e004      	b.n	8003da8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d9e:	f002 fdab 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 8003da2:	4603      	mov	r3, r0
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	4a23      	ldr	r2, [pc, #140]	@ (8003e38 <HAL_InitTick+0xe8>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	0c9b      	lsrs	r3, r3, #18
 8003db2:	3b01      	subs	r3, #1
 8003db4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003db6:	4b21      	ldr	r3, [pc, #132]	@ (8003e3c <HAL_InitTick+0xec>)
 8003db8:	4a21      	ldr	r2, [pc, #132]	@ (8003e40 <HAL_InitTick+0xf0>)
 8003dba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e3c <HAL_InitTick+0xec>)
 8003dbe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <HAL_InitTick+0xec>)
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003dca:	4b1c      	ldr	r3, [pc, #112]	@ (8003e3c <HAL_InitTick+0xec>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <HAL_InitTick+0xec>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd6:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_InitTick+0xec>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003ddc:	4817      	ldr	r0, [pc, #92]	@ (8003e3c <HAL_InitTick+0xec>)
 8003dde:	f003 fa2d 	bl	800723c <HAL_TIM_Base_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003de8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d11b      	bne.n	8003e28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003df0:	4812      	ldr	r0, [pc, #72]	@ (8003e3c <HAL_InitTick+0xec>)
 8003df2:	f003 fa73 	bl	80072dc <HAL_TIM_Base_Start_IT>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e04:	2036      	movs	r0, #54	@ 0x36
 8003e06:	f000 fd7f 	bl	8004908 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b0f      	cmp	r3, #15
 8003e0e:	d808      	bhi.n	8003e22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003e10:	2200      	movs	r2, #0
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	2036      	movs	r0, #54	@ 0x36
 8003e16:	f000 fd5b 	bl	80048d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e44 <HAL_InitTick+0xf4>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e002      	b.n	8003e28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3738      	adds	r7, #56	@ 0x38
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	431bde83 	.word	0x431bde83
 8003e3c:	2000864c 	.word	0x2000864c
 8003e40:	40001000 	.word	0x40001000
 8003e44:	2000000c 	.word	0x2000000c

08003e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <NMI_Handler+0x4>

08003e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <HardFault_Handler+0x4>

08003e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <MemManage_Handler+0x4>

08003e60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <BusFault_Handler+0x4>

08003e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <UsageFault_Handler+0x4>

08003e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e84:	4802      	ldr	r0, [pc, #8]	@ (8003e90 <DMA1_Stream5_IRQHandler+0x10>)
 8003e86:	f000 fee5 	bl	8004c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20005644 	.word	0x20005644

08003e94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003e98:	4802      	ldr	r0, [pc, #8]	@ (8003ea4 <DMA1_Stream6_IRQHandler+0x10>)
 8003e9a:	f000 fedb 	bl	8004c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	200056a4 	.word	0x200056a4

08003ea8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003eac:	4802      	ldr	r0, [pc, #8]	@ (8003eb8 <USART2_IRQHandler+0x10>)
 8003eae:	f004 fcdb 	bl	8008868 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	200055fc 	.word	0x200055fc

08003ebc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ec0:	4802      	ldr	r0, [pc, #8]	@ (8003ecc <TIM5_IRQHandler+0x10>)
 8003ec2:	f003 fcc7 	bl	8007854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000556c 	.word	0x2000556c

08003ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ed4:	4802      	ldr	r0, [pc, #8]	@ (8003ee0 <TIM6_DAC_IRQHandler+0x10>)
 8003ed6:	f003 fcbd 	bl	8007854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000864c 	.word	0x2000864c

08003ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return 1;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <_kill>:

int _kill(int pid, int sig)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003efe:	f018 fb89 	bl	801c614 <__errno>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2216      	movs	r2, #22
 8003f06:	601a      	str	r2, [r3, #0]
  return -1;
 8003f08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_exit>:

void _exit (int status)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ffe7 	bl	8003ef4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f26:	bf00      	nop
 8003f28:	e7fd      	b.n	8003f26 <_exit+0x12>

08003f2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e00a      	b.n	8003f52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f3c:	f3af 8000 	nop.w
 8003f40:	4601      	mov	r1, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	60ba      	str	r2, [r7, #8]
 8003f48:	b2ca      	uxtb	r2, r1
 8003f4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	dbf0      	blt.n	8003f3c <_read+0x12>
  }

  return len;
 8003f5a:	687b      	ldr	r3, [r7, #4]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e009      	b.n	8003f8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	60ba      	str	r2, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3301      	adds	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	dbf1      	blt.n	8003f76 <_write+0x12>
  }
  return len;
 8003f92:	687b      	ldr	r3, [r7, #4]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <_close>:

int _close(int file)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fc4:	605a      	str	r2, [r3, #4]
  return 0;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_isatty>:

int _isatty(int file)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fdc:	2301      	movs	r3, #1
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800400c:	4a14      	ldr	r2, [pc, #80]	@ (8004060 <_sbrk+0x5c>)
 800400e:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <_sbrk+0x60>)
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004018:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <_sbrk+0x64>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004020:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <_sbrk+0x64>)
 8004022:	4a12      	ldr	r2, [pc, #72]	@ (800406c <_sbrk+0x68>)
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <_sbrk+0x64>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d207      	bcs.n	8004044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004034:	f018 faee 	bl	801c614 <__errno>
 8004038:	4603      	mov	r3, r0
 800403a:	220c      	movs	r2, #12
 800403c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800403e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004042:	e009      	b.n	8004058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004044:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <_sbrk+0x64>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800404a:	4b07      	ldr	r3, [pc, #28]	@ (8004068 <_sbrk+0x64>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	4a05      	ldr	r2, [pc, #20]	@ (8004068 <_sbrk+0x64>)
 8004054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004056:	68fb      	ldr	r3, [r7, #12]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20020000 	.word	0x20020000
 8004064:	00000400 	.word	0x00000400
 8004068:	20008698 	.word	0x20008698
 800406c:	20011cb8 	.word	0x20011cb8

08004070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <SystemInit+0x20>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407a:	4a05      	ldr	r2, [pc, #20]	@ (8004090 <SystemInit+0x20>)
 800407c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <StartDefaultTask>:
//TimerHandle_t xTimer;

//void motorTimerCallback(TimerHandle_t xTimer);

void StartDefaultTask(void *argument)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
//    xTimer = xTimerCreate("MotorTimer", pdMS_TO_TICKS(1), pdTRUE, (void *)0, motorTimerCallback);
//    xTimerStart(xTimer, 0);
//    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
	HAL_TIM_Base_Start_IT(&htim5);
 800409c:	4808      	ldr	r0, [pc, #32]	@ (80040c0 <StartDefaultTask+0x2c>)
 800409e:	f003 f91d 	bl	80072dc <HAL_TIM_Base_Start_IT>
	uros_init();
 80040a2:	f7fd ff91 	bl	8001fc8 <uros_init>
    motor_init();
 80040a6:	f7fd fef7 	bl	8001e98 <motor_init>
    pinpoint_init();
 80040aa:	f7fd f95f 	bl	800136c <pinpoint_init>
//    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
//    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
    uros_init();
 80040ae:	f7fd ff8b 	bl	8001fc8 <uros_init>
//    trace_init();

    for(;;)
    {
        uros_agent_status_check();
 80040b2:	f7fd ffc9 	bl	8002048 <uros_agent_status_check>
        osDelay(1000/FREQUENCY);
 80040b6:	200a      	movs	r0, #10
 80040b8:	f005 fe14 	bl	8009ce4 <osDelay>
        uros_agent_status_check();
 80040bc:	bf00      	nop
 80040be:	e7f8      	b.n	80040b2 <StartDefaultTask+0x1e>
 80040c0:	2000556c 	.word	0x2000556c

080040c4 <HAL_TIM_PeriodElapsedCallback>:
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a27      	ldr	r2, [pc, #156]	@ (8004170 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d140      	bne.n	8004158 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		sec++;
 80040d6:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a25      	ldr	r2, [pc, #148]	@ (8004174 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80040de:	6013      	str	r3, [r2, #0]
		tct++;
 80040e0:	4b25      	ldr	r3, [pc, #148]	@ (8004178 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80040e8:	6013      	str	r3, [r2, #0]
//		chassis_monitor();
		chassis_set_speed(vx, vy, vz);
 80040ea:	4b24      	ldr	r3, [pc, #144]	@ (800417c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80040ec:	edd3 7a00 	vldr	s15, [r3]
 80040f0:	4b23      	ldr	r3, [pc, #140]	@ (8004180 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80040f2:	ed93 7a00 	vldr	s14, [r3]
 80040f6:	4b23      	ldr	r3, [pc, #140]	@ (8004184 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80040f8:	edd3 6a00 	vldr	s13, [r3]
 80040fc:	eeb0 1a66 	vmov.f32	s2, s13
 8004100:	eef0 0a47 	vmov.f32	s1, s14
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	f7fd fc28 	bl	800195c <chassis_set_speed>
		update_pinpoint_pose();
 800410c:	f7fd f954 	bl	80013b8 <update_pinpoint_pose>
		chassis_give_speed();
 8004110:	f7fd fc40 	bl	8001994 <chassis_give_speed>
		update_pose(pos_x, pos_y, pos_z, vel_x, vel_y, vel_z);
 8004114:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	4b1c      	ldr	r3, [pc, #112]	@ (800418c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800411c:	ed93 7a00 	vldr	s14, [r3]
 8004120:	4b1b      	ldr	r3, [pc, #108]	@ (8004190 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8004122:	edd3 6a00 	vldr	s13, [r3]
 8004126:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8004128:	ed93 6a00 	vldr	s12, [r3]
 800412c:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800412e:	edd3 5a00 	vldr	s11, [r3]
 8004132:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8004134:	ed93 5a00 	vldr	s10, [r3]
 8004138:	eef0 2a45 	vmov.f32	s5, s10
 800413c:	eeb0 2a65 	vmov.f32	s4, s11
 8004140:	eef0 1a46 	vmov.f32	s3, s12
 8004144:	eeb0 1a66 	vmov.f32	s2, s13
 8004148:	eef0 0a47 	vmov.f32	s1, s14
 800414c:	eeb0 0a67 	vmov.f32	s0, s15
 8004150:	f7fe f9d8 	bl	8002504 <update_pose>
		pinpoint_monitor();
 8004154:	f7fd f918 	bl	8001388 <pinpoint_monitor>
	}
  /* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a10      	ldr	r2, [pc, #64]	@ (80041a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		HAL_IncTick();
 8004162:	f000 f86b 	bl	800423c <HAL_IncTick>
	}
  /* USER CODE BEGIN Callback 1 */
//
  /* USER CODE END Callback 1 */
}
 8004166:	bf00      	nop
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40000c00 	.word	0x40000c00
 8004174:	2000869c 	.word	0x2000869c
 8004178:	200086a0 	.word	0x200086a0
 800417c:	20000b78 	.word	0x20000b78
 8004180:	20000b7c 	.word	0x20000b7c
 8004184:	20000b80 	.word	0x20000b80
 8004188:	200009bc 	.word	0x200009bc
 800418c:	200009c0 	.word	0x200009c0
 8004190:	200009c4 	.word	0x200009c4
 8004194:	20000a2c 	.word	0x20000a2c
 8004198:	20000a30 	.word	0x20000a30
 800419c:	20000a34 	.word	0x20000a34
 80041a0:	40001000 	.word	0x40001000

080041a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80041dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80041a8:	f7ff ff62 	bl	8004070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041ac:	480c      	ldr	r0, [pc, #48]	@ (80041e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80041ae:	490d      	ldr	r1, [pc, #52]	@ (80041e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80041b0:	4a0d      	ldr	r2, [pc, #52]	@ (80041e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80041b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041b4:	e002      	b.n	80041bc <LoopCopyDataInit>

080041b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ba:	3304      	adds	r3, #4

080041bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041c0:	d3f9      	bcc.n	80041b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041c2:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80041c4:	4c0a      	ldr	r4, [pc, #40]	@ (80041f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80041c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041c8:	e001      	b.n	80041ce <LoopFillZerobss>

080041ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041cc:	3204      	adds	r2, #4

080041ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041d0:	d3fb      	bcc.n	80041ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80041d2:	f018 fa25 	bl	801c620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041d6:	f7fe fd21 	bl	8002c1c <main>
  bx  lr    
 80041da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041e4:	2000095c 	.word	0x2000095c
  ldr r2, =_sidata
 80041e8:	0801e9a8 	.word	0x0801e9a8
  ldr r2, =_sbss
 80041ec:	20000960 	.word	0x20000960
  ldr r4, =_ebss
 80041f0:	20011cb8 	.word	0x20011cb8

080041f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041f4:	e7fe      	b.n	80041f4 <ADC_IRQHandler>
	...

080041f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <HAL_Init+0x40>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a0d      	ldr	r2, [pc, #52]	@ (8004238 <HAL_Init+0x40>)
 8004202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_Init+0x40>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0a      	ldr	r2, [pc, #40]	@ (8004238 <HAL_Init+0x40>)
 800420e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004214:	4b08      	ldr	r3, [pc, #32]	@ (8004238 <HAL_Init+0x40>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <HAL_Init+0x40>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004220:	2003      	movs	r0, #3
 8004222:	f000 fb4a 	bl	80048ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004226:	200f      	movs	r0, #15
 8004228:	f7ff fd92 	bl	8003d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800422c:	f7ff fa78 	bl	8003720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00

0800423c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004240:	4b06      	ldr	r3, [pc, #24]	@ (800425c <HAL_IncTick+0x20>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_IncTick+0x24>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4413      	add	r3, r2
 800424c:	4a04      	ldr	r2, [pc, #16]	@ (8004260 <HAL_IncTick+0x24>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000010 	.word	0x20000010
 8004260:	200086a4 	.word	0x200086a4

08004264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return uwTick;
 8004268:	4b03      	ldr	r3, [pc, #12]	@ (8004278 <HAL_GetTick+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	200086a4 	.word	0x200086a4

0800427c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e033      	b.n	80042fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff fa6c 	bl	8003778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042c2:	f023 0302 	bic.w	r3, r3, #2
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f94a 	bl	8004568 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042de:	f023 0303 	bic.w	r3, r3, #3
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80042ea:	e001      	b.n	80042f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x1c>
 800431c:	2302      	movs	r3, #2
 800431e:	e113      	b.n	8004548 <HAL_ADC_ConfigChannel+0x244>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b09      	cmp	r3, #9
 800432e:	d925      	bls.n	800437c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	4613      	mov	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	4413      	add	r3, r2
 8004344:	3b1e      	subs	r3, #30
 8004346:	2207      	movs	r2, #7
 8004348:	fa02 f303 	lsl.w	r3, r2, r3
 800434c:	43da      	mvns	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	400a      	ands	r2, r1
 8004354:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68d9      	ldr	r1, [r3, #12]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	4618      	mov	r0, r3
 8004368:	4603      	mov	r3, r0
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4403      	add	r3, r0
 800436e:	3b1e      	subs	r3, #30
 8004370:	409a      	lsls	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	60da      	str	r2, [r3, #12]
 800437a:	e022      	b.n	80043c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4613      	mov	r3, r2
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	4413      	add	r3, r2
 8004390:	2207      	movs	r2, #7
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	400a      	ands	r2, r1
 800439e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6919      	ldr	r1, [r3, #16]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4618      	mov	r0, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4403      	add	r3, r0
 80043b8:	409a      	lsls	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d824      	bhi.n	8004414 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	3b05      	subs	r3, #5
 80043dc:	221f      	movs	r2, #31
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	43da      	mvns	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	400a      	ands	r2, r1
 80043ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	3b05      	subs	r3, #5
 8004406:	fa00 f203 	lsl.w	r2, r0, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	635a      	str	r2, [r3, #52]	@ 0x34
 8004412:	e04c      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d824      	bhi.n	8004466 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	3b23      	subs	r3, #35	@ 0x23
 800442e:	221f      	movs	r2, #31
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43da      	mvns	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	400a      	ands	r2, r1
 800443c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	4618      	mov	r0, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	3b23      	subs	r3, #35	@ 0x23
 8004458:	fa00 f203 	lsl.w	r2, r0, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30
 8004464:	e023      	b.n	80044ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	3b41      	subs	r3, #65	@ 0x41
 8004478:	221f      	movs	r2, #31
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43da      	mvns	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	400a      	ands	r2, r1
 8004486:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	4618      	mov	r0, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	3b41      	subs	r3, #65	@ 0x41
 80044a2:	fa00 f203 	lsl.w	r2, r0, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ae:	4b29      	ldr	r3, [pc, #164]	@ (8004554 <HAL_ADC_ConfigChannel+0x250>)
 80044b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a28      	ldr	r2, [pc, #160]	@ (8004558 <HAL_ADC_ConfigChannel+0x254>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d10f      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1d8>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b12      	cmp	r3, #18
 80044c2:	d10b      	bne.n	80044dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <HAL_ADC_ConfigChannel+0x254>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d12b      	bne.n	800453e <HAL_ADC_ConfigChannel+0x23a>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a1c      	ldr	r2, [pc, #112]	@ (800455c <HAL_ADC_ConfigChannel+0x258>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <HAL_ADC_ConfigChannel+0x1f4>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b11      	cmp	r3, #17
 80044f6:	d122      	bne.n	800453e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a11      	ldr	r2, [pc, #68]	@ (800455c <HAL_ADC_ConfigChannel+0x258>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d111      	bne.n	800453e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800451a:	4b11      	ldr	r3, [pc, #68]	@ (8004560 <HAL_ADC_ConfigChannel+0x25c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a11      	ldr	r2, [pc, #68]	@ (8004564 <HAL_ADC_ConfigChannel+0x260>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	0c9a      	lsrs	r2, r3, #18
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004530:	e002      	b.n	8004538 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	3b01      	subs	r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f9      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40012300 	.word	0x40012300
 8004558:	40012000 	.word	0x40012000
 800455c:	10000012 	.word	0x10000012
 8004560:	20000008 	.word	0x20000008
 8004564:	431bde83 	.word	0x431bde83

08004568 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004570:	4b79      	ldr	r3, [pc, #484]	@ (8004758 <ADC_Init+0x1f0>)
 8004572:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800459c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80045c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6859      	ldr	r1, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fa:	4a58      	ldr	r2, [pc, #352]	@ (800475c <ADC_Init+0x1f4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d022      	beq.n	8004646 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800460e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	e00f      	b.n	8004666 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004654:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0202 	bic.w	r2, r2, #2
 8004674:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	7e1b      	ldrb	r3, [r3, #24]
 8004680:	005a      	lsls	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01b      	beq.n	80046cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80046b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6859      	ldr	r1, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	3b01      	subs	r3, #1
 80046c0:	035a      	lsls	r2, r3, #13
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	e007      	b.n	80046dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	051a      	lsls	r2, r3, #20
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6899      	ldr	r1, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800471e:	025a      	lsls	r2, r3, #9
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6899      	ldr	r1, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	029a      	lsls	r2, r3, #10
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40012300 	.word	0x40012300
 800475c:	0f000001 	.word	0x0f000001

08004760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800478c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004792:	4a04      	ldr	r2, [pc, #16]	@ (80047a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	60d3      	str	r3, [r2, #12]
}
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	e000ed00 	.word	0xe000ed00

080047a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047ac:	4b04      	ldr	r3, [pc, #16]	@ (80047c0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 0307 	and.w	r3, r3, #7
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	e000ed00 	.word	0xe000ed00

080047c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	db0b      	blt.n	80047ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d6:	79fb      	ldrb	r3, [r7, #7]
 80047d8:	f003 021f 	and.w	r2, r3, #31
 80047dc:	4907      	ldr	r1, [pc, #28]	@ (80047fc <__NVIC_EnableIRQ+0x38>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	2001      	movs	r0, #1
 80047e6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	e000e100 	.word	0xe000e100

08004800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	db0a      	blt.n	800482a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	490c      	ldr	r1, [pc, #48]	@ (800484c <__NVIC_SetPriority+0x4c>)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	0112      	lsls	r2, r2, #4
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	440b      	add	r3, r1
 8004824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004828:	e00a      	b.n	8004840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4908      	ldr	r1, [pc, #32]	@ (8004850 <__NVIC_SetPriority+0x50>)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	3b04      	subs	r3, #4
 8004838:	0112      	lsls	r2, r2, #4
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	440b      	add	r3, r1
 800483e:	761a      	strb	r2, [r3, #24]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000e100 	.word	0xe000e100
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004854:	b480      	push	{r7}
 8004856:	b089      	sub	sp, #36	@ 0x24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f1c3 0307 	rsb	r3, r3, #7
 800486e:	2b04      	cmp	r3, #4
 8004870:	bf28      	it	cs
 8004872:	2304      	movcs	r3, #4
 8004874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3304      	adds	r3, #4
 800487a:	2b06      	cmp	r3, #6
 800487c:	d902      	bls.n	8004884 <NVIC_EncodePriority+0x30>
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	3b03      	subs	r3, #3
 8004882:	e000      	b.n	8004886 <NVIC_EncodePriority+0x32>
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	401a      	ands	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800489c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	43d9      	mvns	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	4313      	orrs	r3, r2
         );
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3724      	adds	r7, #36	@ 0x24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff ff4c 	bl	8004760 <__NVIC_SetPriorityGrouping>
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048e2:	f7ff ff61 	bl	80047a8 <__NVIC_GetPriorityGrouping>
 80048e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f7ff ffb1 	bl	8004854 <NVIC_EncodePriority>
 80048f2:	4602      	mov	r2, r0
 80048f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f8:	4611      	mov	r1, r2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff ff80 	bl	8004800 <__NVIC_SetPriority>
}
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff ff54 	bl	80047c4 <__NVIC_EnableIRQ>
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004930:	f7ff fc98 	bl	8004264 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e099      	b.n	8004a74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004960:	e00f      	b.n	8004982 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004962:	f7ff fc7f 	bl	8004264 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b05      	cmp	r3, #5
 800496e:	d908      	bls.n	8004982 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e078      	b.n	8004a74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e8      	bne.n	8004962 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4b38      	ldr	r3, [pc, #224]	@ (8004a7c <HAL_DMA_Init+0x158>)
 800499c:	4013      	ands	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d107      	bne.n	80049ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	4313      	orrs	r3, r2
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0307 	bic.w	r3, r3, #7
 8004a02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d117      	bne.n	8004a46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fb01 	bl	8005030 <DMA_CheckFifoParam>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2240      	movs	r2, #64	@ 0x40
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a42:	2301      	movs	r3, #1
 8004a44:	e016      	b.n	8004a74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fab8 	bl	8004fc4 <DMA_CalcBaseAndBitshift>
 8004a54:	4603      	mov	r3, r0
 8004a56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5c:	223f      	movs	r2, #63	@ 0x3f
 8004a5e:	409a      	lsls	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	f010803f 	.word	0xf010803f

08004a80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_DMA_Start_IT+0x26>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e040      	b.n	8004b28 <HAL_DMA_Start_IT+0xa8>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d12f      	bne.n	8004b1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fa4a 	bl	8004f68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	223f      	movs	r2, #63	@ 0x3f
 8004ada:	409a      	lsls	r2, r3
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0216 	orr.w	r2, r2, #22
 8004aee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0208 	orr.w	r2, r2, #8
 8004b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e005      	b.n	8004b26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b22:	2302      	movs	r3, #2
 8004b24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b3e:	f7ff fb91 	bl	8004264 <HAL_GetTick>
 8004b42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d008      	beq.n	8004b62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e052      	b.n	8004c08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0216 	bic.w	r2, r2, #22
 8004b70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d103      	bne.n	8004b92 <HAL_DMA_Abort+0x62>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0208 	bic.w	r2, r2, #8
 8004ba0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bb2:	e013      	b.n	8004bdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bb4:	f7ff fb56 	bl	8004264 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d90c      	bls.n	8004bdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2203      	movs	r2, #3
 8004bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e015      	b.n	8004c08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e4      	bne.n	8004bb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bee:	223f      	movs	r2, #63	@ 0x3f
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d004      	beq.n	8004c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00c      	b.n	8004c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2205      	movs	r2, #5
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c60:	4b8e      	ldr	r3, [pc, #568]	@ (8004e9c <HAL_DMA_IRQHandler+0x248>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a8e      	ldr	r2, [pc, #568]	@ (8004ea0 <HAL_DMA_IRQHandler+0x24c>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0a9b      	lsrs	r3, r3, #10
 8004c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c7e:	2208      	movs	r2, #8
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01a      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	2208      	movs	r2, #8
 8004cae:	409a      	lsls	r2, r3
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb8:	f043 0201 	orr.w	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	409a      	lsls	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d18:	2204      	movs	r2, #4
 8004d1a:	409a      	lsls	r2, r3
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d24:	f043 0204 	orr.w	r2, r3, #4
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	2210      	movs	r2, #16
 8004d32:	409a      	lsls	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d043      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d03c      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4e:	2210      	movs	r2, #16
 8004d50:	409a      	lsls	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d108      	bne.n	8004d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d024      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
 8004d82:	e01f      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01b      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
 8004d94:	e016      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d107      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0208 	bic.w	r2, r2, #8
 8004db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc8:	2220      	movs	r2, #32
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 808f 	beq.w	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 8087 	beq.w	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dea:	2220      	movs	r2, #32
 8004dec:	409a      	lsls	r2, r3
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d136      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0216 	bic.w	r2, r2, #22
 8004e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <HAL_DMA_IRQHandler+0x1da>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0208 	bic.w	r2, r2, #8
 8004e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e42:	223f      	movs	r2, #63	@ 0x3f
 8004e44:	409a      	lsls	r2, r3
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d07e      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
        }
        return;
 8004e6a:	e079      	b.n	8004f60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d01d      	beq.n	8004eb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d031      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
 8004e98:	e02c      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
 8004e9a:	bf00      	nop
 8004e9c:	20000008 	.word	0x20000008
 8004ea0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d023      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
 8004eb4:	e01e      	b.n	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10f      	bne.n	8004ee4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0210 	bic.w	r2, r2, #16
 8004ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d032      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d022      	beq.n	8004f4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d307      	bcc.n	8004f3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f2      	bne.n	8004f20 <HAL_DMA_IRQHandler+0x2cc>
 8004f3a:	e000      	b.n	8004f3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	e000      	b.n	8004f62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f60:	bf00      	nop
    }
  }
}
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b40      	cmp	r3, #64	@ 0x40
 8004f94:	d108      	bne.n	8004fa8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fa6:	e007      	b.n	8004fb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	3b10      	subs	r3, #16
 8004fd4:	4a14      	ldr	r2, [pc, #80]	@ (8005028 <DMA_CalcBaseAndBitshift+0x64>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fde:	4a13      	ldr	r2, [pc, #76]	@ (800502c <DMA_CalcBaseAndBitshift+0x68>)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d909      	bls.n	8005006 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	659a      	str	r2, [r3, #88]	@ 0x58
 8005004:	e007      	b.n	8005016 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800500e:	f023 0303 	bic.w	r3, r3, #3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	aaaaaaab 	.word	0xaaaaaaab
 800502c:	0801d414 	.word	0x0801d414

08005030 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11f      	bne.n	800508a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d856      	bhi.n	80050fe <DMA_CheckFifoParam+0xce>
 8005050:	a201      	add	r2, pc, #4	@ (adr r2, 8005058 <DMA_CheckFifoParam+0x28>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	08005069 	.word	0x08005069
 800505c:	0800507b 	.word	0x0800507b
 8005060:	08005069 	.word	0x08005069
 8005064:	080050ff 	.word	0x080050ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d046      	beq.n	8005102 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005078:	e043      	b.n	8005102 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005082:	d140      	bne.n	8005106 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005088:	e03d      	b.n	8005106 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005092:	d121      	bne.n	80050d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d837      	bhi.n	800510a <DMA_CheckFifoParam+0xda>
 800509a:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <DMA_CheckFifoParam+0x70>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050b7 	.word	0x080050b7
 80050a8:	080050b1 	.word	0x080050b1
 80050ac:	080050c9 	.word	0x080050c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
      break;
 80050b4:	e030      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d025      	beq.n	800510e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c6:	e022      	b.n	800510e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050d0:	d11f      	bne.n	8005112 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050d6:	e01c      	b.n	8005112 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d903      	bls.n	80050e6 <DMA_CheckFifoParam+0xb6>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d003      	beq.n	80050ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050e4:	e018      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ea:	e015      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00e      	beq.n	8005116 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e00b      	b.n	8005116 <DMA_CheckFifoParam+0xe6>
      break;
 80050fe:	bf00      	nop
 8005100:	e00a      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 8005102:	bf00      	nop
 8005104:	e008      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 8005106:	bf00      	nop
 8005108:	e006      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 800510a:	bf00      	nop
 800510c:	e004      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 800510e:	bf00      	nop
 8005110:	e002      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;   
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <DMA_CheckFifoParam+0xe8>
      break;
 8005116:	bf00      	nop
    }
  } 
  
  return status; 
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop

08005128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	@ 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800513e:	2300      	movs	r3, #0
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e165      	b.n	8005410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005144:	2201      	movs	r2, #1
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	f040 8154 	bne.w	800540a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d005      	beq.n	800517a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005176:	2b02      	cmp	r3, #2
 8005178:	d130      	bne.n	80051dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	2203      	movs	r2, #3
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051b0:	2201      	movs	r2, #1
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 0201 	and.w	r2, r3, #1
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d017      	beq.n	8005218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2203      	movs	r2, #3
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4013      	ands	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d123      	bne.n	800526c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	08da      	lsrs	r2, r3, #3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3208      	adds	r2, #8
 800522c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	220f      	movs	r2, #15
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3208      	adds	r2, #8
 8005266:	69b9      	ldr	r1, [r7, #24]
 8005268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 0203 	and.w	r2, r3, #3
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80ae 	beq.w	800540a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4b5d      	ldr	r3, [pc, #372]	@ (8005428 <HAL_GPIO_Init+0x300>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	4a5c      	ldr	r2, [pc, #368]	@ (8005428 <HAL_GPIO_Init+0x300>)
 80052b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80052be:	4b5a      	ldr	r3, [pc, #360]	@ (8005428 <HAL_GPIO_Init+0x300>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ca:	4a58      	ldr	r2, [pc, #352]	@ (800542c <HAL_GPIO_Init+0x304>)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	089b      	lsrs	r3, r3, #2
 80052d0:	3302      	adds	r3, #2
 80052d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005430 <HAL_GPIO_Init+0x308>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d025      	beq.n	8005342 <HAL_GPIO_Init+0x21a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a4e      	ldr	r2, [pc, #312]	@ (8005434 <HAL_GPIO_Init+0x30c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <HAL_GPIO_Init+0x216>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a4d      	ldr	r2, [pc, #308]	@ (8005438 <HAL_GPIO_Init+0x310>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d019      	beq.n	800533a <HAL_GPIO_Init+0x212>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a4c      	ldr	r2, [pc, #304]	@ (800543c <HAL_GPIO_Init+0x314>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_GPIO_Init+0x20e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a4b      	ldr	r2, [pc, #300]	@ (8005440 <HAL_GPIO_Init+0x318>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00d      	beq.n	8005332 <HAL_GPIO_Init+0x20a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a4a      	ldr	r2, [pc, #296]	@ (8005444 <HAL_GPIO_Init+0x31c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <HAL_GPIO_Init+0x206>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a49      	ldr	r2, [pc, #292]	@ (8005448 <HAL_GPIO_Init+0x320>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d101      	bne.n	800532a <HAL_GPIO_Init+0x202>
 8005326:	2306      	movs	r3, #6
 8005328:	e00c      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 800532a:	2307      	movs	r3, #7
 800532c:	e00a      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 800532e:	2305      	movs	r3, #5
 8005330:	e008      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 8005332:	2304      	movs	r3, #4
 8005334:	e006      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 8005336:	2303      	movs	r3, #3
 8005338:	e004      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 800533a:	2302      	movs	r3, #2
 800533c:	e002      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_GPIO_Init+0x21c>
 8005342:	2300      	movs	r3, #0
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	f002 0203 	and.w	r2, r2, #3
 800534a:	0092      	lsls	r2, r2, #2
 800534c:	4093      	lsls	r3, r2
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005354:	4935      	ldr	r1, [pc, #212]	@ (800542c <HAL_GPIO_Init+0x304>)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	089b      	lsrs	r3, r3, #2
 800535a:	3302      	adds	r3, #2
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005362:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <HAL_GPIO_Init+0x324>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	43db      	mvns	r3, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4013      	ands	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4313      	orrs	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005386:	4a31      	ldr	r2, [pc, #196]	@ (800544c <HAL_GPIO_Init+0x324>)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800538c:	4b2f      	ldr	r3, [pc, #188]	@ (800544c <HAL_GPIO_Init+0x324>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	43db      	mvns	r3, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053b0:	4a26      	ldr	r2, [pc, #152]	@ (800544c <HAL_GPIO_Init+0x324>)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053b6:	4b25      	ldr	r3, [pc, #148]	@ (800544c <HAL_GPIO_Init+0x324>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053da:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_GPIO_Init+0x324>)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053e0:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <HAL_GPIO_Init+0x324>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005404:	4a11      	ldr	r2, [pc, #68]	@ (800544c <HAL_GPIO_Init+0x324>)
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3301      	adds	r3, #1
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	f67f ae96 	bls.w	8005144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	3724      	adds	r7, #36	@ 0x24
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	40023800 	.word	0x40023800
 800542c:	40013800 	.word	0x40013800
 8005430:	40020000 	.word	0x40020000
 8005434:	40020400 	.word	0x40020400
 8005438:	40020800 	.word	0x40020800
 800543c:	40020c00 	.word	0x40020c00
 8005440:	40021000 	.word	0x40021000
 8005444:	40021400 	.word	0x40021400
 8005448:	40021800 	.word	0x40021800
 800544c:	40013c00 	.word	0x40013c00

08005450 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545a:	2300      	movs	r3, #0
 800545c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e0c7      	b.n	80055fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800546c:	2201      	movs	r2, #1
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4013      	ands	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	429a      	cmp	r2, r3
 8005484:	f040 80b7 	bne.w	80055f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005488:	4a62      	ldr	r2, [pc, #392]	@ (8005614 <HAL_GPIO_DeInit+0x1c4>)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	3302      	adds	r3, #2
 8005490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005494:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f003 0303 	and.w	r3, r3, #3
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	220f      	movs	r2, #15
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	4013      	ands	r3, r2
 80054a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a5a      	ldr	r2, [pc, #360]	@ (8005618 <HAL_GPIO_DeInit+0x1c8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d025      	beq.n	80054fe <HAL_GPIO_DeInit+0xae>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a59      	ldr	r2, [pc, #356]	@ (800561c <HAL_GPIO_DeInit+0x1cc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01f      	beq.n	80054fa <HAL_GPIO_DeInit+0xaa>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a58      	ldr	r2, [pc, #352]	@ (8005620 <HAL_GPIO_DeInit+0x1d0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d019      	beq.n	80054f6 <HAL_GPIO_DeInit+0xa6>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a57      	ldr	r2, [pc, #348]	@ (8005624 <HAL_GPIO_DeInit+0x1d4>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_GPIO_DeInit+0xa2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a56      	ldr	r2, [pc, #344]	@ (8005628 <HAL_GPIO_DeInit+0x1d8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00d      	beq.n	80054ee <HAL_GPIO_DeInit+0x9e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a55      	ldr	r2, [pc, #340]	@ (800562c <HAL_GPIO_DeInit+0x1dc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <HAL_GPIO_DeInit+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a54      	ldr	r2, [pc, #336]	@ (8005630 <HAL_GPIO_DeInit+0x1e0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <HAL_GPIO_DeInit+0x96>
 80054e2:	2306      	movs	r3, #6
 80054e4:	e00c      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054e6:	2307      	movs	r3, #7
 80054e8:	e00a      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054ea:	2305      	movs	r3, #5
 80054ec:	e008      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054ee:	2304      	movs	r3, #4
 80054f0:	e006      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054f2:	2303      	movs	r3, #3
 80054f4:	e004      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e002      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_GPIO_DeInit+0xb0>
 80054fe:	2300      	movs	r3, #0
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	f002 0203 	and.w	r2, r2, #3
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	4093      	lsls	r3, r2
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	429a      	cmp	r2, r3
 800550e:	d132      	bne.n	8005576 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005510:	4b48      	ldr	r3, [pc, #288]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	43db      	mvns	r3, r3
 8005518:	4946      	ldr	r1, [pc, #280]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 800551a:	4013      	ands	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800551e:	4b45      	ldr	r3, [pc, #276]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	43db      	mvns	r3, r3
 8005526:	4943      	ldr	r1, [pc, #268]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005528:	4013      	ands	r3, r2
 800552a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800552c:	4b41      	ldr	r3, [pc, #260]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	43db      	mvns	r3, r3
 8005534:	493f      	ldr	r1, [pc, #252]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005536:	4013      	ands	r3, r2
 8005538:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800553a:	4b3e      	ldr	r3, [pc, #248]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	43db      	mvns	r3, r3
 8005542:	493c      	ldr	r1, [pc, #240]	@ (8005634 <HAL_GPIO_DeInit+0x1e4>)
 8005544:	4013      	ands	r3, r2
 8005546:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	220f      	movs	r2, #15
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005558:	4a2e      	ldr	r2, [pc, #184]	@ (8005614 <HAL_GPIO_DeInit+0x1c4>)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	3302      	adds	r3, #2
 8005560:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	43da      	mvns	r2, r3
 8005568:	482a      	ldr	r0, [pc, #168]	@ (8005614 <HAL_GPIO_DeInit+0x1c4>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	089b      	lsrs	r3, r3, #2
 800556e:	400a      	ands	r2, r1
 8005570:	3302      	adds	r3, #2
 8005572:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2103      	movs	r1, #3
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	401a      	ands	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	08da      	lsrs	r2, r3, #3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3208      	adds	r2, #8
 8005594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	220f      	movs	r2, #15
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	08d2      	lsrs	r2, r2, #3
 80055ac:	4019      	ands	r1, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3208      	adds	r2, #8
 80055b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	005b      	lsls	r3, r3, #1
 80055be:	2103      	movs	r1, #3
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	401a      	ands	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	2101      	movs	r1, #1
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2103      	movs	r1, #3
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	401a      	ands	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2b0f      	cmp	r3, #15
 8005600:	f67f af34 	bls.w	800546c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40013800 	.word	0x40013800
 8005618:	40020000 	.word	0x40020000
 800561c:	40020400 	.word	0x40020400
 8005620:	40020800 	.word	0x40020800
 8005624:	40020c00 	.word	0x40020c00
 8005628:	40021000 	.word	0x40021000
 800562c:	40021400 	.word	0x40021400
 8005630:	40021800 	.word	0x40021800
 8005634:	40013c00 	.word	0x40013c00

08005638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
 8005644:	4613      	mov	r3, r2
 8005646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005648:	787b      	ldrb	r3, [r7, #1]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005654:	e003      	b.n	800565e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	041a      	lsls	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e12b      	b.n	80058d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fe f8d0 	bl	8003838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	@ 0x24
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0201 	bic.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80056d0:	f001 f912 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 80056d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	4a81      	ldr	r2, [pc, #516]	@ (80058e0 <HAL_I2C_Init+0x274>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d807      	bhi.n	80056f0 <HAL_I2C_Init+0x84>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4a80      	ldr	r2, [pc, #512]	@ (80058e4 <HAL_I2C_Init+0x278>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bf94      	ite	ls
 80056e8:	2301      	movls	r3, #1
 80056ea:	2300      	movhi	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e006      	b.n	80056fe <HAL_I2C_Init+0x92>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4a7d      	ldr	r2, [pc, #500]	@ (80058e8 <HAL_I2C_Init+0x27c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	bf94      	ite	ls
 80056f8:	2301      	movls	r3, #1
 80056fa:	2300      	movhi	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e0e7      	b.n	80058d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4a78      	ldr	r2, [pc, #480]	@ (80058ec <HAL_I2C_Init+0x280>)
 800570a:	fba2 2303 	umull	r2, r3, r2, r3
 800570e:	0c9b      	lsrs	r3, r3, #18
 8005710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a6a      	ldr	r2, [pc, #424]	@ (80058e0 <HAL_I2C_Init+0x274>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d802      	bhi.n	8005740 <HAL_I2C_Init+0xd4>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	3301      	adds	r3, #1
 800573e:	e009      	b.n	8005754 <HAL_I2C_Init+0xe8>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005746:	fb02 f303 	mul.w	r3, r2, r3
 800574a:	4a69      	ldr	r2, [pc, #420]	@ (80058f0 <HAL_I2C_Init+0x284>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	099b      	lsrs	r3, r3, #6
 8005752:	3301      	adds	r3, #1
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	430b      	orrs	r3, r1
 800575a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	495c      	ldr	r1, [pc, #368]	@ (80058e0 <HAL_I2C_Init+0x274>)
 8005770:	428b      	cmp	r3, r1
 8005772:	d819      	bhi.n	80057a8 <HAL_I2C_Init+0x13c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	1e59      	subs	r1, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005788:	400b      	ands	r3, r1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_I2C_Init+0x138>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1e59      	subs	r1, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fbb1 f3f3 	udiv	r3, r1, r3
 800579c:	3301      	adds	r3, #1
 800579e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057a2:	e051      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 80057a4:	2304      	movs	r3, #4
 80057a6:	e04f      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d111      	bne.n	80057d4 <HAL_I2C_Init+0x168>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	1e58      	subs	r0, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6859      	ldr	r1, [r3, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	440b      	add	r3, r1
 80057be:	fbb0 f3f3 	udiv	r3, r0, r3
 80057c2:	3301      	adds	r3, #1
 80057c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf0c      	ite	eq
 80057cc:	2301      	moveq	r3, #1
 80057ce:	2300      	movne	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e012      	b.n	80057fa <HAL_I2C_Init+0x18e>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1e58      	subs	r0, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	0099      	lsls	r1, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057ea:	3301      	adds	r3, #1
 80057ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf0c      	ite	eq
 80057f4:	2301      	moveq	r3, #1
 80057f6:	2300      	movne	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Init+0x196>
 80057fe:	2301      	movs	r3, #1
 8005800:	e022      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10e      	bne.n	8005828 <HAL_I2C_Init+0x1bc>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1e58      	subs	r0, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6859      	ldr	r1, [r3, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	440b      	add	r3, r1
 8005818:	fbb0 f3f3 	udiv	r3, r0, r3
 800581c:	3301      	adds	r3, #1
 800581e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005826:	e00f      	b.n	8005848 <HAL_I2C_Init+0x1dc>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	1e58      	subs	r0, r3, #1
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6859      	ldr	r1, [r3, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	0099      	lsls	r1, r3, #2
 8005838:	440b      	add	r3, r1
 800583a:	fbb0 f3f3 	udiv	r3, r0, r3
 800583e:	3301      	adds	r3, #1
 8005840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	6809      	ldr	r1, [r1, #0]
 800584c:	4313      	orrs	r3, r2
 800584e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69da      	ldr	r2, [r3, #28]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6911      	ldr	r1, [r2, #16]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	68d2      	ldr	r2, [r2, #12]
 8005882:	4311      	orrs	r1, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	430b      	orrs	r3, r1
 800588a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	000186a0 	.word	0x000186a0
 80058e4:	001e847f 	.word	0x001e847f
 80058e8:	003d08ff 	.word	0x003d08ff
 80058ec:	431bde83 	.word	0x431bde83
 80058f0:	10624dd3 	.word	0x10624dd3

080058f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e021      	b.n	800594a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2224      	movs	r2, #36	@ 0x24
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fd ffd2 	bl	80038c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af02      	add	r7, sp, #8
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	461a      	mov	r2, r3
 8005962:	4603      	mov	r3, r0
 8005964:	817b      	strh	r3, [r7, #10]
 8005966:	460b      	mov	r3, r1
 8005968:	813b      	strh	r3, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800596e:	f7fe fc79 	bl	8004264 <HAL_GetTick>
 8005972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b20      	cmp	r3, #32
 800597e:	f040 80d9 	bne.w	8005b34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	2319      	movs	r3, #25
 8005988:	2201      	movs	r2, #1
 800598a:	496d      	ldr	r1, [pc, #436]	@ (8005b40 <HAL_I2C_Mem_Write+0x1ec>)
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fc8b 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
 800599a:	e0cc      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_I2C_Mem_Write+0x56>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e0c5      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d007      	beq.n	80059d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2221      	movs	r2, #33	@ 0x21
 80059e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2240      	movs	r2, #64	@ 0x40
 80059ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005a00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4a4d      	ldr	r2, [pc, #308]	@ (8005b44 <HAL_I2C_Mem_Write+0x1f0>)
 8005a10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a12:	88f8      	ldrh	r0, [r7, #6]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	8979      	ldrh	r1, [r7, #10]
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	4603      	mov	r3, r0
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fac2 	bl	8005fac <I2C_RequestMemoryWrite>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d052      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e081      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fd50 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d107      	bne.n	8005a5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e06b      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	781a      	ldrb	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_I2C_Mem_Write+0x180>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d017      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1aa      	bne.n	8005a32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fd43 	bl	800656c <I2C_WaitOnBTFFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00d      	beq.n	8005b08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d107      	bne.n	8005b04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e016      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	00100002 	.word	0x00100002
 8005b44:	ffff0000 	.word	0xffff0000

08005b48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	@ 0x30
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	461a      	mov	r2, r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	817b      	strh	r3, [r7, #10]
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	813b      	strh	r3, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b62:	f7fe fb7f 	bl	8004264 <HAL_GetTick>
 8005b66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	f040 8214 	bne.w	8005f9e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2319      	movs	r3, #25
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	497b      	ldr	r1, [pc, #492]	@ (8005d6c <HAL_I2C_Mem_Read+0x224>)
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fb91 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e207      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_I2C_Mem_Read+0x56>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e200      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d007      	beq.n	8005bc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2222      	movs	r2, #34	@ 0x22
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2240      	movs	r2, #64	@ 0x40
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a5b      	ldr	r2, [pc, #364]	@ (8005d70 <HAL_I2C_Mem_Read+0x228>)
 8005c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c06:	88f8      	ldrh	r0, [r7, #6]
 8005c08:	893a      	ldrh	r2, [r7, #8]
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	4603      	mov	r3, r0
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 fa5e 	bl	80060d8 <I2C_RequestMemoryRead>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e1bc      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d113      	bne.n	8005c56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e190      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d11b      	bne.n	8005c96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e170      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	e150      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cec:	e144      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	f200 80f1 	bhi.w	8005eda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d123      	bne.n	8005d48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fc79 	bl	80065fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e145      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d46:	e117      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d14e      	bne.n	8005dee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d56:	2200      	movs	r2, #0
 8005d58:	4906      	ldr	r1, [pc, #24]	@ (8005d74 <HAL_I2C_Mem_Read+0x22c>)
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 faa4 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e11a      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
 8005d6a:	bf00      	nop
 8005d6c:	00100002 	.word	0x00100002
 8005d70:	ffff0000 	.word	0xffff0000
 8005d74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dec:	e0c4      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	2200      	movs	r2, #0
 8005df6:	496c      	ldr	r1, [pc, #432]	@ (8005fa8 <HAL_I2C_Mem_Read+0x460>)
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fa55 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e0cb      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	2200      	movs	r2, #0
 8005e52:	4955      	ldr	r1, [pc, #340]	@ (8005fa8 <HAL_I2C_Mem_Read+0x460>)
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fa27 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e09d      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	b2d2      	uxtb	r2, r2
 8005e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ed8:	e04e      	b.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005edc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fb8c 	bl	80065fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e058      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d124      	bne.n	8005f78 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d107      	bne.n	8005f46 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f47f aeb6 	bne.w	8005cee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e000      	b.n	8005fa0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005f9e:	2302      	movs	r3, #2
  }
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3728      	adds	r7, #40	@ 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	00010004 	.word	0x00010004

08005fac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f960 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ffc:	d103      	bne.n	8006006 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006004:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e05f      	b.n	80060ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800600a:	897b      	ldrh	r3, [r7, #10]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	461a      	mov	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006018:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800601a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601c:	6a3a      	ldr	r2, [r7, #32]
 800601e:	492d      	ldr	r1, [pc, #180]	@ (80060d4 <I2C_RequestMemoryWrite+0x128>)
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f9bb 	bl	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e04c      	b.n	80060ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006030:	2300      	movs	r3, #0
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006048:	6a39      	ldr	r1, [r7, #32]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fa46 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00d      	beq.n	8006072 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605a:	2b04      	cmp	r3, #4
 800605c:	d107      	bne.n	800606e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e02b      	b.n	80060ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d105      	bne.n	8006084 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006078:	893b      	ldrh	r3, [r7, #8]
 800607a:	b2da      	uxtb	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	611a      	str	r2, [r3, #16]
 8006082:	e021      	b.n	80060c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006084:	893b      	ldrh	r3, [r7, #8]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	b29b      	uxth	r3, r3
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006094:	6a39      	ldr	r1, [r7, #32]
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fa20 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00d      	beq.n	80060be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d107      	bne.n	80060ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e005      	b.n	80060ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060be:	893b      	ldrh	r3, [r7, #8]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	00010002 	.word	0x00010002

080060d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af02      	add	r7, sp, #8
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	4608      	mov	r0, r1
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	4603      	mov	r3, r0
 80060e8:	817b      	strh	r3, [r7, #10]
 80060ea:	460b      	mov	r3, r1
 80060ec:	813b      	strh	r3, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006100:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2200      	movs	r2, #0
 800611a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f8c2 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00d      	beq.n	8006146 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006138:	d103      	bne.n	8006142 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006140:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e0aa      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006146:	897b      	ldrh	r3, [r7, #10]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	4952      	ldr	r1, [pc, #328]	@ (80062a4 <I2C_RequestMemoryRead+0x1cc>)
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f91d 	bl	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e097      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006184:	6a39      	ldr	r1, [r7, #32]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f000 f9a8 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	2b04      	cmp	r3, #4
 8006198:	d107      	bne.n	80061aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e076      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d105      	bne.n	80061c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061b4:	893b      	ldrh	r3, [r7, #8]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	611a      	str	r2, [r3, #16]
 80061be:	e021      	b.n	8006204 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061c0:	893b      	ldrh	r3, [r7, #8]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d0:	6a39      	ldr	r1, [r7, #32]
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 f982 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00d      	beq.n	80061fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d107      	bne.n	80061f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e050      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061fa:	893b      	ldrh	r3, [r7, #8]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006206:	6a39      	ldr	r1, [r7, #32]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f967 	bl	80064dc <I2C_WaitOnTXEFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006218:	2b04      	cmp	r3, #4
 800621a:	d107      	bne.n	800622c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800622a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e035      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800623e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2200      	movs	r2, #0
 8006248:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f82b 	bl	80062a8 <I2C_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00d      	beq.n	8006274 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006266:	d103      	bne.n	8006270 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800626e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e013      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006274:	897b      	ldrh	r3, [r7, #10]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	b2da      	uxtb	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	6a3a      	ldr	r2, [r7, #32]
 8006288:	4906      	ldr	r1, [pc, #24]	@ (80062a4 <I2C_RequestMemoryRead+0x1cc>)
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f886 	bl	800639c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	00010002 	.word	0x00010002

080062a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062b8:	e048      	b.n	800634c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062c0:	d044      	beq.n	800634c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c2:	f7fd ffcf 	bl	8004264 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d302      	bcc.n	80062d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d139      	bne.n	800634c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10d      	bne.n	80062fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	43da      	mvns	r2, r3
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4013      	ands	r3, r2
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf0c      	ite	eq
 80062f4:	2301      	moveq	r3, #1
 80062f6:	2300      	movne	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	e00c      	b.n	8006318 <I2C_WaitOnFlagUntilTimeout+0x70>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	43da      	mvns	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	429a      	cmp	r2, r3
 800631c:	d116      	bne.n	800634c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2220      	movs	r2, #32
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e023      	b.n	8006394 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	0c1b      	lsrs	r3, r3, #16
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10d      	bne.n	8006372 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	43da      	mvns	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	e00c      	b.n	800638c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	43da      	mvns	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	429a      	cmp	r2, r3
 8006390:	d093      	beq.n	80062ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063aa:	e071      	b.n	8006490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ba:	d123      	bne.n	8006404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80063d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	f043 0204 	orr.w	r2, r3, #4
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e067      	b.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800640a:	d041      	beq.n	8006490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640c:	f7fd ff2a 	bl	8004264 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d302      	bcc.n	8006422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d136      	bne.n	8006490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10c      	bne.n	8006446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	43da      	mvns	r2, r3
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	bf14      	ite	ne
 800643e:	2301      	movne	r3, #1
 8006440:	2300      	moveq	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	e00b      	b.n	800645e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	43da      	mvns	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e021      	b.n	80064d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10c      	bne.n	80064b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	43da      	mvns	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4013      	ands	r3, r2
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	e00b      	b.n	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	43da      	mvns	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f47f af6d 	bne.w	80063ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064e8:	e034      	b.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 f8e3 	bl	80066b6 <I2C_IsAcknowledgeFailed>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e034      	b.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006500:	d028      	beq.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fd feaf 	bl	8004264 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d11d      	bne.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006522:	2b80      	cmp	r3, #128	@ 0x80
 8006524:	d016      	beq.n	8006554 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e007      	b.n	8006564 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655e:	2b80      	cmp	r3, #128	@ 0x80
 8006560:	d1c3      	bne.n	80064ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006578:	e034      	b.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f89b 	bl	80066b6 <I2C_IsAcknowledgeFailed>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e034      	b.n	80065f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006590:	d028      	beq.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006592:	f7fd fe67 	bl	8004264 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11d      	bne.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0304 	and.w	r3, r3, #4
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d016      	beq.n	80065e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d0:	f043 0220 	orr.w	r2, r3, #32
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e007      	b.n	80065f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d1c3      	bne.n	800657a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006608:	e049      	b.n	800669e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b10      	cmp	r3, #16
 8006616:	d119      	bne.n	800664c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0210 	mvn.w	r2, #16
 8006620:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e030      	b.n	80066ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800664c:	f7fd fe0a 	bl	8004264 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d11d      	bne.n	800669e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666c:	2b40      	cmp	r3, #64	@ 0x40
 800666e:	d016      	beq.n	800669e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668a:	f043 0220 	orr.w	r2, r3, #32
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e007      	b.n	80066ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	d1ae      	bne.n	800660a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066cc:	d11b      	bne.n	8006706 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	f043 0204 	orr.w	r2, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e0cc      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006728:	4b68      	ldr	r3, [pc, #416]	@ (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	683a      	ldr	r2, [r7, #0]
 8006732:	429a      	cmp	r2, r3
 8006734:	d90c      	bls.n	8006750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006736:	4b65      	ldr	r3, [pc, #404]	@ (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800673e:	4b63      	ldr	r3, [pc, #396]	@ (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d001      	beq.n	8006750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e0b8      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d020      	beq.n	800679e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006768:	4b59      	ldr	r3, [pc, #356]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	4a58      	ldr	r2, [pc, #352]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006780:	4b53      	ldr	r3, [pc, #332]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4a52      	ldr	r2, [pc, #328]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800678a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800678c:	4b50      	ldr	r3, [pc, #320]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	494d      	ldr	r1, [pc, #308]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	4313      	orrs	r3, r2
 800679c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d044      	beq.n	8006834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d107      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067b2:	4b47      	ldr	r3, [pc, #284]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d119      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e07f      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d003      	beq.n	80067d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d107      	bne.n	80067e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067d2:	4b3f      	ldr	r3, [pc, #252]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e06f      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e2:	4b3b      	ldr	r3, [pc, #236]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e067      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067f2:	4b37      	ldr	r3, [pc, #220]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f023 0203 	bic.w	r2, r3, #3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4934      	ldr	r1, [pc, #208]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	4313      	orrs	r3, r2
 8006802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006804:	f7fd fd2e 	bl	8004264 <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800680a:	e00a      	b.n	8006822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800680c:	f7fd fd2a 	bl	8004264 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e04f      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006822:	4b2b      	ldr	r3, [pc, #172]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 020c 	and.w	r2, r3, #12
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	429a      	cmp	r2, r3
 8006832:	d1eb      	bne.n	800680c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006834:	4b25      	ldr	r3, [pc, #148]	@ (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d20c      	bcs.n	800685c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006842:	4b22      	ldr	r3, [pc, #136]	@ (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684a:	4b20      	ldr	r3, [pc, #128]	@ (80068cc <HAL_RCC_ClockConfig+0x1b8>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d001      	beq.n	800685c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e032      	b.n	80068c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d008      	beq.n	800687a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006868:	4b19      	ldr	r3, [pc, #100]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4916      	ldr	r1, [pc, #88]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	4313      	orrs	r3, r2
 8006878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d009      	beq.n	800689a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006886:	4b12      	ldr	r3, [pc, #72]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	490e      	ldr	r1, [pc, #56]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800689a:	f000 f887 	bl	80069ac <HAL_RCC_GetSysClockFreq>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	091b      	lsrs	r3, r3, #4
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	490a      	ldr	r1, [pc, #40]	@ (80068d4 <HAL_RCC_ClockConfig+0x1c0>)
 80068ac:	5ccb      	ldrb	r3, [r1, r3]
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	4a09      	ldr	r2, [pc, #36]	@ (80068d8 <HAL_RCC_ClockConfig+0x1c4>)
 80068b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068b6:	4b09      	ldr	r3, [pc, #36]	@ (80068dc <HAL_RCC_ClockConfig+0x1c8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd fa48 	bl	8003d50 <HAL_InitTick>

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40023c00 	.word	0x40023c00
 80068d0:	40023800 	.word	0x40023800
 80068d4:	0801d3fc 	.word	0x0801d3fc
 80068d8:	20000008 	.word	0x20000008
 80068dc:	2000000c 	.word	0x2000000c

080068e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e4:	4b03      	ldr	r3, [pc, #12]	@ (80068f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80068e6:	681b      	ldr	r3, [r3, #0]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20000008 	.word	0x20000008

080068f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068fc:	f7ff fff0 	bl	80068e0 <HAL_RCC_GetHCLKFreq>
 8006900:	4602      	mov	r2, r0
 8006902:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	0a9b      	lsrs	r3, r3, #10
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	4903      	ldr	r1, [pc, #12]	@ (800691c <HAL_RCC_GetPCLK1Freq+0x24>)
 800690e:	5ccb      	ldrb	r3, [r1, r3]
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006914:	4618      	mov	r0, r3
 8006916:	bd80      	pop	{r7, pc}
 8006918:	40023800 	.word	0x40023800
 800691c:	0801d40c 	.word	0x0801d40c

08006920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006924:	f7ff ffdc 	bl	80068e0 <HAL_RCC_GetHCLKFreq>
 8006928:	4602      	mov	r2, r0
 800692a:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	0b5b      	lsrs	r3, r3, #13
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	4903      	ldr	r1, [pc, #12]	@ (8006944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006936:	5ccb      	ldrb	r3, [r1, r3]
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40023800 	.word	0x40023800
 8006944:	0801d40c 	.word	0x0801d40c

08006948 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	220f      	movs	r2, #15
 8006956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006958:	4b12      	ldr	r3, [pc, #72]	@ (80069a4 <HAL_RCC_GetClockConfig+0x5c>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 0203 	and.w	r2, r3, #3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006964:	4b0f      	ldr	r3, [pc, #60]	@ (80069a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006970:	4b0c      	ldr	r3, [pc, #48]	@ (80069a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800697c:	4b09      	ldr	r3, [pc, #36]	@ (80069a4 <HAL_RCC_GetClockConfig+0x5c>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	08db      	lsrs	r3, r3, #3
 8006982:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800698a:	4b07      	ldr	r3, [pc, #28]	@ (80069a8 <HAL_RCC_GetClockConfig+0x60>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 020f 	and.w	r2, r3, #15
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	601a      	str	r2, [r3, #0]
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40023800 	.word	0x40023800
 80069a8:	40023c00 	.word	0x40023c00

080069ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b0:	b0a6      	sub	sp, #152	@ 0x98
 80069b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069d2:	4bc8      	ldr	r3, [pc, #800]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 030c 	and.w	r3, r3, #12
 80069da:	2b0c      	cmp	r3, #12
 80069dc:	f200 817e 	bhi.w	8006cdc <HAL_RCC_GetSysClockFreq+0x330>
 80069e0:	a201      	add	r2, pc, #4	@ (adr r2, 80069e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a1d 	.word	0x08006a1d
 80069ec:	08006cdd 	.word	0x08006cdd
 80069f0:	08006cdd 	.word	0x08006cdd
 80069f4:	08006cdd 	.word	0x08006cdd
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	08006cdd 	.word	0x08006cdd
 8006a00:	08006cdd 	.word	0x08006cdd
 8006a04:	08006cdd 	.word	0x08006cdd
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006cdd 	.word	0x08006cdd
 8006a10:	08006cdd 	.word	0x08006cdd
 8006a14:	08006cdd 	.word	0x08006cdd
 8006a18:	08006b97 	.word	0x08006b97
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a1c:	4bb6      	ldr	r3, [pc, #728]	@ (8006cf8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006a22:	e15f      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a24:	4bb5      	ldr	r3, [pc, #724]	@ (8006cfc <HAL_RCC_GetSysClockFreq+0x350>)
 8006a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006a2a:	e15b      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a2c:	4bb1      	ldr	r3, [pc, #708]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a38:	4bae      	ldr	r3, [pc, #696]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d031      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a44:	4bab      	ldr	r3, [pc, #684]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	099b      	lsrs	r3, r3, #6
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a56:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a58:	2300      	movs	r3, #0
 8006a5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a5c:	4ba7      	ldr	r3, [pc, #668]	@ (8006cfc <HAL_RCC_GetSysClockFreq+0x350>)
 8006a5e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006a62:	462a      	mov	r2, r5
 8006a64:	fb03 f202 	mul.w	r2, r3, r2
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	4aa2      	ldr	r2, [pc, #648]	@ (8006cfc <HAL_RCC_GetSysClockFreq+0x350>)
 8006a74:	4621      	mov	r1, r4
 8006a76:	fba1 1202 	umull	r1, r2, r1, r2
 8006a7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8006a80:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006a82:	4413      	add	r3, r2
 8006a84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006a90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a94:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8006a98:	f7fa f890 	bl	8000bbc <__aeabi_uldivmod>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006aa6:	e064      	b.n	8006b72 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa8:	4b92      	ldr	r3, [pc, #584]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	099b      	lsrs	r3, r3, #6
 8006aae:	2200      	movs	r2, #0
 8006ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ab2:	657a      	str	r2, [r7, #84]	@ 0x54
 8006ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006abc:	2300      	movs	r3, #0
 8006abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	462b      	mov	r3, r5
 8006ac8:	f04f 0000 	mov.w	r0, #0
 8006acc:	f04f 0100 	mov.w	r1, #0
 8006ad0:	0159      	lsls	r1, r3, #5
 8006ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ad6:	0150      	lsls	r0, r2, #5
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4621      	mov	r1, r4
 8006ade:	1a51      	subs	r1, r2, r1
 8006ae0:	6139      	str	r1, [r7, #16]
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006af6:	4659      	mov	r1, fp
 8006af8:	018b      	lsls	r3, r1, #6
 8006afa:	4651      	mov	r1, sl
 8006afc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b00:	4651      	mov	r1, sl
 8006b02:	018a      	lsls	r2, r1, #6
 8006b04:	4651      	mov	r1, sl
 8006b06:	ebb2 0801 	subs.w	r8, r2, r1
 8006b0a:	4659      	mov	r1, fp
 8006b0c:	eb63 0901 	sbc.w	r9, r3, r1
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b24:	4690      	mov	r8, r2
 8006b26:	4699      	mov	r9, r3
 8006b28:	4623      	mov	r3, r4
 8006b2a:	eb18 0303 	adds.w	r3, r8, r3
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	462b      	mov	r3, r5
 8006b32:	eb49 0303 	adc.w	r3, r9, r3
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	f04f 0200 	mov.w	r2, #0
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b44:	4629      	mov	r1, r5
 8006b46:	028b      	lsls	r3, r1, #10
 8006b48:	4621      	mov	r1, r4
 8006b4a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b4e:	4621      	mov	r1, r4
 8006b50:	028a      	lsls	r2, r1, #10
 8006b52:	4610      	mov	r0, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006b60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b64:	f7fa f82a 	bl	8000bbc <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b72:	4b60      	ldr	r3, [pc, #384]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	0c1b      	lsrs	r3, r3, #16
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8006b84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006b94:	e0a6      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b96:	4b57      	ldr	r3, [pc, #348]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ba2:	4b54      	ldr	r3, [pc, #336]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d02a      	beq.n	8006c04 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bae:	4b51      	ldr	r3, [pc, #324]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	099b      	lsrs	r3, r3, #6
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4b4e      	ldr	r3, [pc, #312]	@ (8006cfc <HAL_RCC_GetSysClockFreq+0x350>)
 8006bc4:	fb03 f201 	mul.w	r2, r3, r1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	fb00 f303 	mul.w	r3, r0, r3
 8006bce:	4413      	add	r3, r2
 8006bd0:	4a4a      	ldr	r2, [pc, #296]	@ (8006cfc <HAL_RCC_GetSysClockFreq+0x350>)
 8006bd2:	fba0 1202 	umull	r1, r2, r0, r2
 8006bd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bd8:	460a      	mov	r2, r1
 8006bda:	673a      	str	r2, [r7, #112]	@ 0x70
 8006bdc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006bde:	4413      	add	r3, r2
 8006be0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006be6:	2200      	movs	r2, #0
 8006be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bea:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006bf0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006bf4:	f7f9 ffe2 	bl	8000bbc <__aeabi_uldivmod>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c02:	e05b      	b.n	8006cbc <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c04:	4b3b      	ldr	r3, [pc, #236]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	099b      	lsrs	r3, r3, #6
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	623b      	str	r3, [r7, #32]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	f04f 0000 	mov.w	r0, #0
 8006c28:	f04f 0100 	mov.w	r1, #0
 8006c2c:	0159      	lsls	r1, r3, #5
 8006c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c32:	0150      	lsls	r0, r2, #5
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c3e:	4649      	mov	r1, r9
 8006c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c58:	ebb2 040a 	subs.w	r4, r2, sl
 8006c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	00eb      	lsls	r3, r5, #3
 8006c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c6e:	00e2      	lsls	r2, r4, #3
 8006c70:	4614      	mov	r4, r2
 8006c72:	461d      	mov	r5, r3
 8006c74:	4643      	mov	r3, r8
 8006c76:	18e3      	adds	r3, r4, r3
 8006c78:	603b      	str	r3, [r7, #0]
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	eb45 0303 	adc.w	r3, r5, r3
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c8e:	4629      	mov	r1, r5
 8006c90:	028b      	lsls	r3, r1, #10
 8006c92:	4621      	mov	r1, r4
 8006c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c98:	4621      	mov	r1, r4
 8006c9a:	028a      	lsls	r2, r1, #10
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	61fa      	str	r2, [r7, #28]
 8006caa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cae:	f7f9 ff85 	bl	8000bbc <__aeabi_uldivmod>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf4 <HAL_RCC_GetSysClockFreq+0x348>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	0f1b      	lsrs	r3, r3, #28
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8006cca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006cce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006cda:	e003      	b.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8006cde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8006ce2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ce4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3798      	adds	r7, #152	@ 0x98
 8006cec:	46bd      	mov	sp, r7
 8006cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cf2:	bf00      	nop
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	00f42400 	.word	0x00f42400
 8006cfc:	017d7840 	.word	0x017d7840

08006d00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e28d      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 8083 	beq.w	8006e26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d20:	4b94      	ldr	r3, [pc, #592]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 030c 	and.w	r3, r3, #12
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d019      	beq.n	8006d60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006d2c:	4b91      	ldr	r3, [pc, #580]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 030c 	and.w	r3, r3, #12
        || \
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006d38:	4b8e      	ldr	r3, [pc, #568]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d44:	d00c      	beq.n	8006d60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d46:	4b8b      	ldr	r3, [pc, #556]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006d4e:	2b0c      	cmp	r3, #12
 8006d50:	d112      	bne.n	8006d78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d52:	4b88      	ldr	r3, [pc, #544]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d5e:	d10b      	bne.n	8006d78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d60:	4b84      	ldr	r3, [pc, #528]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d05b      	beq.n	8006e24 <HAL_RCC_OscConfig+0x124>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d157      	bne.n	8006e24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e25a      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d80:	d106      	bne.n	8006d90 <HAL_RCC_OscConfig+0x90>
 8006d82:	4b7c      	ldr	r3, [pc, #496]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a7b      	ldr	r2, [pc, #492]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e01d      	b.n	8006dcc <HAL_RCC_OscConfig+0xcc>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0xb4>
 8006d9a:	4b76      	ldr	r3, [pc, #472]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a75      	ldr	r2, [pc, #468]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b73      	ldr	r3, [pc, #460]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a72      	ldr	r2, [pc, #456]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e00b      	b.n	8006dcc <HAL_RCC_OscConfig+0xcc>
 8006db4:	4b6f      	ldr	r3, [pc, #444]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a6e      	ldr	r2, [pc, #440]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	4b6c      	ldr	r3, [pc, #432]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d013      	beq.n	8006dfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fd fa46 	bl	8004264 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fa42 	bl	8004264 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b64      	cmp	r3, #100	@ 0x64
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e21f      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dee:	4b61      	ldr	r3, [pc, #388]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0xdc>
 8006dfa:	e014      	b.n	8006e26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fd fa32 	bl	8004264 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fd fa2e 	bl	8004264 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	@ 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e20b      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e16:	4b57      	ldr	r3, [pc, #348]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x104>
 8006e22:	e000      	b.n	8006e26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d06f      	beq.n	8006f12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006e32:	4b50      	ldr	r3, [pc, #320]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 030c 	and.w	r3, r3, #12
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006e3e:	4b4d      	ldr	r3, [pc, #308]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d105      	bne.n	8006e56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e56:	4b47      	ldr	r3, [pc, #284]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006e5e:	2b0c      	cmp	r3, #12
 8006e60:	d11c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e62:	4b44      	ldr	r3, [pc, #272]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d116      	bne.n	8006e9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e6e:	4b41      	ldr	r3, [pc, #260]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d005      	beq.n	8006e86 <HAL_RCC_OscConfig+0x186>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d001      	beq.n	8006e86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e1d3      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e86:	4b3b      	ldr	r3, [pc, #236]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4937      	ldr	r1, [pc, #220]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9a:	e03a      	b.n	8006f12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d020      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea4:	4b34      	ldr	r3, [pc, #208]	@ (8006f78 <HAL_RCC_OscConfig+0x278>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eaa:	f7fd f9db 	bl	8004264 <HAL_GetTick>
 8006eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb0:	e008      	b.n	8006ec4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb2:	f7fd f9d7 	bl	8004264 <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d901      	bls.n	8006ec4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e1b4      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0f0      	beq.n	8006eb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed0:	4b28      	ldr	r3, [pc, #160]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4925      	ldr	r1, [pc, #148]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	600b      	str	r3, [r1, #0]
 8006ee4:	e015      	b.n	8006f12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ee6:	4b24      	ldr	r3, [pc, #144]	@ (8006f78 <HAL_RCC_OscConfig+0x278>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eec:	f7fd f9ba 	bl	8004264 <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ef4:	f7fd f9b6 	bl	8004264 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e193      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f06:	4b1b      	ldr	r3, [pc, #108]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f0      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d036      	beq.n	8006f8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d016      	beq.n	8006f54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f26:	4b15      	ldr	r3, [pc, #84]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2c:	f7fd f99a 	bl	8004264 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f34:	f7fd f996 	bl	8004264 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e173      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <HAL_RCC_OscConfig+0x274>)
 8006f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x234>
 8006f52:	e01b      	b.n	8006f8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f54:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <HAL_RCC_OscConfig+0x27c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5a:	f7fd f983 	bl	8004264 <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f60:	e00e      	b.n	8006f80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f62:	f7fd f97f 	bl	8004264 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d907      	bls.n	8006f80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e15c      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
 8006f74:	40023800 	.word	0x40023800
 8006f78:	42470000 	.word	0x42470000
 8006f7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f80:	4b8a      	ldr	r3, [pc, #552]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8006f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1ea      	bne.n	8006f62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 8097 	beq.w	80070c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f9e:	4b83      	ldr	r3, [pc, #524]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10f      	bne.n	8006fca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	4b7f      	ldr	r3, [pc, #508]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8006fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fba:	4b7c      	ldr	r3, [pc, #496]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc2:	60bb      	str	r3, [r7, #8]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fca:	4b79      	ldr	r3, [pc, #484]	@ (80071b0 <HAL_RCC_OscConfig+0x4b0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d118      	bne.n	8007008 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fd6:	4b76      	ldr	r3, [pc, #472]	@ (80071b0 <HAL_RCC_OscConfig+0x4b0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a75      	ldr	r2, [pc, #468]	@ (80071b0 <HAL_RCC_OscConfig+0x4b0>)
 8006fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fe2:	f7fd f93f 	bl	8004264 <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fea:	f7fd f93b 	bl	8004264 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e118      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80071b0 <HAL_RCC_OscConfig+0x4b0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0f0      	beq.n	8006fea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d106      	bne.n	800701e <HAL_RCC_OscConfig+0x31e>
 8007010:	4b66      	ldr	r3, [pc, #408]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007014:	4a65      	ldr	r2, [pc, #404]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007016:	f043 0301 	orr.w	r3, r3, #1
 800701a:	6713      	str	r3, [r2, #112]	@ 0x70
 800701c:	e01c      	b.n	8007058 <HAL_RCC_OscConfig+0x358>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b05      	cmp	r3, #5
 8007024:	d10c      	bne.n	8007040 <HAL_RCC_OscConfig+0x340>
 8007026:	4b61      	ldr	r3, [pc, #388]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	4a60      	ldr	r2, [pc, #384]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 800702c:	f043 0304 	orr.w	r3, r3, #4
 8007030:	6713      	str	r3, [r2, #112]	@ 0x70
 8007032:	4b5e      	ldr	r3, [pc, #376]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007036:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	6713      	str	r3, [r2, #112]	@ 0x70
 800703e:	e00b      	b.n	8007058 <HAL_RCC_OscConfig+0x358>
 8007040:	4b5a      	ldr	r3, [pc, #360]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007044:	4a59      	ldr	r2, [pc, #356]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	6713      	str	r3, [r2, #112]	@ 0x70
 800704c:	4b57      	ldr	r3, [pc, #348]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007050:	4a56      	ldr	r2, [pc, #344]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007052:	f023 0304 	bic.w	r3, r3, #4
 8007056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d015      	beq.n	800708c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007060:	f7fd f900 	bl	8004264 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007066:	e00a      	b.n	800707e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007068:	f7fd f8fc 	bl	8004264 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007076:	4293      	cmp	r3, r2
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e0d7      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707e:	4b4b      	ldr	r3, [pc, #300]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d0ee      	beq.n	8007068 <HAL_RCC_OscConfig+0x368>
 800708a:	e014      	b.n	80070b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708c:	f7fd f8ea 	bl	8004264 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007092:	e00a      	b.n	80070aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007094:	f7fd f8e6 	bl	8004264 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e0c1      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070aa:	4b40      	ldr	r3, [pc, #256]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 80070ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1ee      	bne.n	8007094 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d105      	bne.n	80070c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070bc:	4b3b      	ldr	r3, [pc, #236]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 80070be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c0:	4a3a      	ldr	r2, [pc, #232]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 80070c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 80ad 	beq.w	800722c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070d2:	4b36      	ldr	r3, [pc, #216]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 030c 	and.w	r3, r3, #12
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d060      	beq.n	80071a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d145      	bne.n	8007172 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e6:	4b33      	ldr	r3, [pc, #204]	@ (80071b4 <HAL_RCC_OscConfig+0x4b4>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fd f8ba 	bl	8004264 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fd f8b6 	bl	8004264 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e093      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007106:	4b29      	ldr	r3, [pc, #164]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69da      	ldr	r2, [r3, #28]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	431a      	orrs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	019b      	lsls	r3, r3, #6
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	3b01      	subs	r3, #1
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713c:	071b      	lsls	r3, r3, #28
 800713e:	491b      	ldr	r1, [pc, #108]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007140:	4313      	orrs	r3, r2
 8007142:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007144:	4b1b      	ldr	r3, [pc, #108]	@ (80071b4 <HAL_RCC_OscConfig+0x4b4>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fd f88b 	bl	8004264 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007152:	f7fd f887 	bl	8004264 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e064      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007164:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x452>
 8007170:	e05c      	b.n	800722c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007172:	4b10      	ldr	r3, [pc, #64]	@ (80071b4 <HAL_RCC_OscConfig+0x4b4>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fd f874 	bl	8004264 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007180:	f7fd f870 	bl	8004264 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e04d      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007192:	4b06      	ldr	r3, [pc, #24]	@ (80071ac <HAL_RCC_OscConfig+0x4ac>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x480>
 800719e:	e045      	b.n	800722c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d107      	bne.n	80071b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e040      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
 80071ac:	40023800 	.word	0x40023800
 80071b0:	40007000 	.word	0x40007000
 80071b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007238 <HAL_RCC_OscConfig+0x538>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d030      	beq.n	8007228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d129      	bne.n	8007228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071de:	429a      	cmp	r2, r3
 80071e0:	d122      	bne.n	8007228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80071e8:	4013      	ands	r3, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d119      	bne.n	8007228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	3b01      	subs	r3, #1
 8007202:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007204:	429a      	cmp	r2, r3
 8007206:	d10f      	bne.n	8007228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007214:	429a      	cmp	r2, r3
 8007216:	d107      	bne.n	8007228 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007222:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007224:	429a      	cmp	r2, r3
 8007226:	d001      	beq.n	800722c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40023800 	.word	0x40023800

0800723c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e041      	b.n	80072d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d106      	bne.n	8007268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fc fc38 	bl	8003ad8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f000 fd8c 	bl	8007d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
	...

080072dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d001      	beq.n	80072f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e04e      	b.n	8007392 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0201 	orr.w	r2, r2, #1
 800730a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a23      	ldr	r2, [pc, #140]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d022      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731e:	d01d      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1f      	ldr	r2, [pc, #124]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d018      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1e      	ldr	r2, [pc, #120]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d013      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1c      	ldr	r2, [pc, #112]	@ (80073ac <HAL_TIM_Base_Start_IT+0xd0>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00e      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1b      	ldr	r2, [pc, #108]	@ (80073b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d009      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a19      	ldr	r2, [pc, #100]	@ (80073b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIM_Base_Start_IT+0x80>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a18      	ldr	r2, [pc, #96]	@ (80073b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d111      	bne.n	8007380 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b06      	cmp	r3, #6
 800736c:	d010      	beq.n	8007390 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737e:	e007      	b.n	8007390 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0201 	orr.w	r2, r2, #1
 800738e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	40010400 	.word	0x40010400
 80073b4:	40014000 	.word	0x40014000
 80073b8:	40001800 	.word	0x40001800

080073bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e041      	b.n	8007452 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fc fba0 	bl	8003b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f000 fccc 	bl	8007d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d109      	bne.n	8007480 <HAL_TIM_PWM_Start+0x24>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	e022      	b.n	80074c6 <HAL_TIM_PWM_Start+0x6a>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b04      	cmp	r3, #4
 8007484:	d109      	bne.n	800749a <HAL_TIM_PWM_Start+0x3e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b01      	cmp	r3, #1
 8007490:	bf14      	ite	ne
 8007492:	2301      	movne	r3, #1
 8007494:	2300      	moveq	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	e015      	b.n	80074c6 <HAL_TIM_PWM_Start+0x6a>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d109      	bne.n	80074b4 <HAL_TIM_PWM_Start+0x58>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	bf14      	ite	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	2300      	moveq	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	e008      	b.n	80074c6 <HAL_TIM_PWM_Start+0x6a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e07c      	b.n	80075c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_TIM_PWM_Start+0x82>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074dc:	e013      	b.n	8007506 <HAL_TIM_PWM_Start+0xaa>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_PWM_Start+0x92>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074ec:	e00b      	b.n	8007506 <HAL_TIM_PWM_Start+0xaa>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start+0xa2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074fc:	e003      	b.n	8007506 <HAL_TIM_PWM_Start+0xaa>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 ff32 	bl	8008378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2d      	ldr	r2, [pc, #180]	@ (80075d0 <HAL_TIM_PWM_Start+0x174>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_TIM_PWM_Start+0xcc>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a2c      	ldr	r2, [pc, #176]	@ (80075d4 <HAL_TIM_PWM_Start+0x178>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d101      	bne.n	800752c <HAL_TIM_PWM_Start+0xd0>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <HAL_TIM_PWM_Start+0xd2>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007540:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <HAL_TIM_PWM_Start+0x174>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007554:	d01d      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1f      	ldr	r2, [pc, #124]	@ (80075d8 <HAL_TIM_PWM_Start+0x17c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d018      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1d      	ldr	r2, [pc, #116]	@ (80075dc <HAL_TIM_PWM_Start+0x180>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1c      	ldr	r2, [pc, #112]	@ (80075e0 <HAL_TIM_PWM_Start+0x184>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a16      	ldr	r2, [pc, #88]	@ (80075d4 <HAL_TIM_PWM_Start+0x178>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a18      	ldr	r2, [pc, #96]	@ (80075e4 <HAL_TIM_PWM_Start+0x188>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a16      	ldr	r2, [pc, #88]	@ (80075e8 <HAL_TIM_PWM_Start+0x18c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d111      	bne.n	80075b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b06      	cmp	r3, #6
 80075a2:	d010      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b4:	e007      	b.n	80075c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0201 	orr.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40010000 	.word	0x40010000
 80075d4:	40010400 	.word	0x40010400
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40014000 	.word	0x40014000
 80075e8:	40001800 	.word	0x40001800

080075ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e097      	b.n	8007730 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7fc f97b 	bl	8003910 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007630:	f023 0307 	bic.w	r3, r3, #7
 8007634:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3304      	adds	r3, #4
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f000 fba9 	bl	8007d98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800766e:	f023 0303 	bic.w	r3, r3, #3
 8007672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689a      	ldr	r2, [r3, #8]
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	4313      	orrs	r3, r2
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800768c:	f023 030c 	bic.w	r3, r3, #12
 8007690:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007698:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800769c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	69db      	ldr	r3, [r3, #28]
 80076a6:	021b      	lsls	r3, r3, #8
 80076a8:	4313      	orrs	r3, r2
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	011a      	lsls	r2, r3, #4
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	031b      	lsls	r3, r3, #12
 80076bc:	4313      	orrs	r3, r2
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80076ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	4313      	orrs	r3, r2
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007748:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007750:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007758:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007760:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d110      	bne.n	800778a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d102      	bne.n	8007774 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800776e:	7b7b      	ldrb	r3, [r7, #13]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d001      	beq.n	8007778 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e069      	b.n	800784c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2202      	movs	r2, #2
 8007784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007788:	e031      	b.n	80077ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b04      	cmp	r3, #4
 800778e:	d110      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d102      	bne.n	800779c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007796:	7b3b      	ldrb	r3, [r7, #12]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d001      	beq.n	80077a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e055      	b.n	800784c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077b0:	e01d      	b.n	80077ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d108      	bne.n	80077ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d105      	bne.n	80077ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077be:	7b7b      	ldrb	r3, [r7, #13]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d102      	bne.n	80077ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077c4:	7b3b      	ldrb	r3, [r7, #12]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d001      	beq.n	80077ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e03e      	b.n	800784c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d003      	beq.n	80077fc <HAL_TIM_Encoder_Start+0xc4>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d008      	beq.n	800780c <HAL_TIM_Encoder_Start+0xd4>
 80077fa:	e00f      	b.n	800781c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2201      	movs	r2, #1
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fdb7 	bl	8008378 <TIM_CCxChannelCmd>
      break;
 800780a:	e016      	b.n	800783a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2201      	movs	r2, #1
 8007812:	2104      	movs	r1, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f000 fdaf 	bl	8008378 <TIM_CCxChannelCmd>
      break;
 800781a:	e00e      	b.n	800783a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2201      	movs	r2, #1
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f000 fda7 	bl	8008378 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2201      	movs	r2, #1
 8007830:	2104      	movs	r1, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fda0 	bl	8008378 <TIM_CCxChannelCmd>
      break;
 8007838:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0201 	orr.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d020      	beq.n	80078b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01b      	beq.n	80078b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0202 	mvn.w	r2, #2
 8007888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa5b 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 80078a4:	e005      	b.n	80078b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa4d 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa5e 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d020      	beq.n	8007904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01b      	beq.n	8007904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0204 	mvn.w	r2, #4
 80078d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2202      	movs	r2, #2
 80078da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fa35 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 80078f0:	e005      	b.n	80078fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa27 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fa38 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0308 	and.w	r3, r3, #8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d020      	beq.n	8007950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b00      	cmp	r3, #0
 8007916:	d01b      	beq.n	8007950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0208 	mvn.w	r2, #8
 8007920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2204      	movs	r2, #4
 8007926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa0f 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 800793c:	e005      	b.n	800794a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa01 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fa12 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d020      	beq.n	800799c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 0310 	and.w	r3, r3, #16
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01b      	beq.n	800799c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0210 	mvn.w	r2, #16
 800796c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2208      	movs	r2, #8
 8007972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9e9 	bl	8007d5a <HAL_TIM_IC_CaptureCallback>
 8007988:	e005      	b.n	8007996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9db 	bl	8007d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f9ec 	bl	8007d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d007      	beq.n	80079c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0201 	mvn.w	r2, #1
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fc fb82 	bl	80040c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00c      	beq.n	80079e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 fdc8 	bl	8008574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00c      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d007      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f9bd 	bl	8007d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0220 	mvn.w	r2, #32
 8007a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fd9a 	bl	8008560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e0ae      	b.n	8007bb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b0c      	cmp	r3, #12
 8007a5e:	f200 809f 	bhi.w	8007ba0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a62:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a9d 	.word	0x08007a9d
 8007a6c:	08007ba1 	.word	0x08007ba1
 8007a70:	08007ba1 	.word	0x08007ba1
 8007a74:	08007ba1 	.word	0x08007ba1
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007ba1 	.word	0x08007ba1
 8007a80:	08007ba1 	.word	0x08007ba1
 8007a84:	08007ba1 	.word	0x08007ba1
 8007a88:	08007b1f 	.word	0x08007b1f
 8007a8c:	08007ba1 	.word	0x08007ba1
 8007a90:	08007ba1 	.word	0x08007ba1
 8007a94:	08007ba1 	.word	0x08007ba1
 8007a98:	08007b5f 	.word	0x08007b5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fa1e 	bl	8007ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699a      	ldr	r2, [r3, #24]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0208 	orr.w	r2, r2, #8
 8007ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699a      	ldr	r2, [r3, #24]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0204 	bic.w	r2, r2, #4
 8007ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6999      	ldr	r1, [r3, #24]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	691a      	ldr	r2, [r3, #16]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	619a      	str	r2, [r3, #24]
      break;
 8007ada:	e064      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68b9      	ldr	r1, [r7, #8]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 fa6e 	bl	8007fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699a      	ldr	r2, [r3, #24]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6999      	ldr	r1, [r3, #24]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	021a      	lsls	r2, r3, #8
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	619a      	str	r2, [r3, #24]
      break;
 8007b1c:	e043      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 fac3 	bl	80080b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	69da      	ldr	r2, [r3, #28]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0208 	orr.w	r2, r2, #8
 8007b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69da      	ldr	r2, [r3, #28]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f022 0204 	bic.w	r2, r2, #4
 8007b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69d9      	ldr	r1, [r3, #28]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	691a      	ldr	r2, [r3, #16]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	61da      	str	r2, [r3, #28]
      break;
 8007b5c:	e023      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fb17 	bl	8008198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	69da      	ldr	r2, [r3, #28]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69da      	ldr	r2, [r3, #28]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69d9      	ldr	r1, [r3, #28]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	021a      	lsls	r2, r3, #8
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	61da      	str	r2, [r3, #28]
      break;
 8007b9e:	e002      	b.n	8007ba6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIM_ConfigClockSource+0x1c>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e0b4      	b.n	8007d3e <HAL_TIM_ConfigClockSource+0x186>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c0c:	d03e      	beq.n	8007c8c <HAL_TIM_ConfigClockSource+0xd4>
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c12:	f200 8087 	bhi.w	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1a:	f000 8086 	beq.w	8007d2a <HAL_TIM_ConfigClockSource+0x172>
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c22:	d87f      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c24:	2b70      	cmp	r3, #112	@ 0x70
 8007c26:	d01a      	beq.n	8007c5e <HAL_TIM_ConfigClockSource+0xa6>
 8007c28:	2b70      	cmp	r3, #112	@ 0x70
 8007c2a:	d87b      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c2c:	2b60      	cmp	r3, #96	@ 0x60
 8007c2e:	d050      	beq.n	8007cd2 <HAL_TIM_ConfigClockSource+0x11a>
 8007c30:	2b60      	cmp	r3, #96	@ 0x60
 8007c32:	d877      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c34:	2b50      	cmp	r3, #80	@ 0x50
 8007c36:	d03c      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0xfa>
 8007c38:	2b50      	cmp	r3, #80	@ 0x50
 8007c3a:	d873      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c3c:	2b40      	cmp	r3, #64	@ 0x40
 8007c3e:	d058      	beq.n	8007cf2 <HAL_TIM_ConfigClockSource+0x13a>
 8007c40:	2b40      	cmp	r3, #64	@ 0x40
 8007c42:	d86f      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c44:	2b30      	cmp	r3, #48	@ 0x30
 8007c46:	d064      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15a>
 8007c48:	2b30      	cmp	r3, #48	@ 0x30
 8007c4a:	d86b      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d060      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15a>
 8007c50:	2b20      	cmp	r3, #32
 8007c52:	d867      	bhi.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05c      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15a>
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d05a      	beq.n	8007d12 <HAL_TIM_ConfigClockSource+0x15a>
 8007c5c:	e062      	b.n	8007d24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c6e:	f000 fb63 	bl	8008338 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	609a      	str	r2, [r3, #8]
      break;
 8007c8a:	e04f      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c9c:	f000 fb4c 	bl	8008338 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cae:	609a      	str	r2, [r3, #8]
      break;
 8007cb0:	e03c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f000 fac0 	bl	8008244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2150      	movs	r1, #80	@ 0x50
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fb19 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 8007cd0:	e02c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f000 fadf 	bl	80082a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2160      	movs	r1, #96	@ 0x60
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fb09 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 8007cf0:	e01c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f000 faa0 	bl	8008244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2140      	movs	r1, #64	@ 0x40
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f000 faf9 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 8007d10:	e00c      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f000 faf0 	bl	8008302 <TIM_ITRx_SetConfig>
      break;
 8007d22:	e003      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	73fb      	strb	r3, [r7, #15]
      break;
 8007d28:	e000      	b.n	8007d2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b083      	sub	sp, #12
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d62:	bf00      	nop
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b083      	sub	sp, #12
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a43      	ldr	r2, [pc, #268]	@ (8007eb8 <TIM_Base_SetConfig+0x120>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d013      	beq.n	8007dd8 <TIM_Base_SetConfig+0x40>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db6:	d00f      	beq.n	8007dd8 <TIM_Base_SetConfig+0x40>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a40      	ldr	r2, [pc, #256]	@ (8007ebc <TIM_Base_SetConfig+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00b      	beq.n	8007dd8 <TIM_Base_SetConfig+0x40>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8007ec0 <TIM_Base_SetConfig+0x128>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d007      	beq.n	8007dd8 <TIM_Base_SetConfig+0x40>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a3e      	ldr	r2, [pc, #248]	@ (8007ec4 <TIM_Base_SetConfig+0x12c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_Base_SetConfig+0x40>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8007ec8 <TIM_Base_SetConfig+0x130>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d108      	bne.n	8007dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a32      	ldr	r2, [pc, #200]	@ (8007eb8 <TIM_Base_SetConfig+0x120>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d02b      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007df8:	d027      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8007ebc <TIM_Base_SetConfig+0x124>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d023      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a2e      	ldr	r2, [pc, #184]	@ (8007ec0 <TIM_Base_SetConfig+0x128>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01f      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ec4 <TIM_Base_SetConfig+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d01b      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a2c      	ldr	r2, [pc, #176]	@ (8007ec8 <TIM_Base_SetConfig+0x130>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d017      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007ecc <TIM_Base_SetConfig+0x134>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d013      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed0 <TIM_Base_SetConfig+0x138>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00f      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a29      	ldr	r2, [pc, #164]	@ (8007ed4 <TIM_Base_SetConfig+0x13c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d00b      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a28      	ldr	r2, [pc, #160]	@ (8007ed8 <TIM_Base_SetConfig+0x140>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d007      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a27      	ldr	r2, [pc, #156]	@ (8007edc <TIM_Base_SetConfig+0x144>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d003      	beq.n	8007e4a <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a26      	ldr	r2, [pc, #152]	@ (8007ee0 <TIM_Base_SetConfig+0x148>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d108      	bne.n	8007e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	68fa      	ldr	r2, [r7, #12]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8007eb8 <TIM_Base_SetConfig+0x120>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_Base_SetConfig+0xf2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a10      	ldr	r2, [pc, #64]	@ (8007ec8 <TIM_Base_SetConfig+0x130>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d103      	bne.n	8007e92 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f043 0204 	orr.w	r2, r3, #4
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	40010000 	.word	0x40010000
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40000c00 	.word	0x40000c00
 8007ec8:	40010400 	.word	0x40010400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40014400 	.word	0x40014400
 8007ed4:	40014800 	.word	0x40014800
 8007ed8:	40001800 	.word	0x40001800
 8007edc:	40001c00 	.word	0x40001c00
 8007ee0:	40002000 	.word	0x40002000

08007ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f023 0201 	bic.w	r2, r3, #1
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f023 0302 	bic.w	r3, r3, #2
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a20      	ldr	r2, [pc, #128]	@ (8007fbc <TIM_OC1_SetConfig+0xd8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC1_SetConfig+0x64>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc0 <TIM_OC1_SetConfig+0xdc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10c      	bne.n	8007f62 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f023 0308 	bic.w	r3, r3, #8
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f023 0304 	bic.w	r3, r3, #4
 8007f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <TIM_OC1_SetConfig+0xd8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_OC1_SetConfig+0x8e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a14      	ldr	r2, [pc, #80]	@ (8007fc0 <TIM_OC1_SetConfig+0xdc>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d111      	bne.n	8007f96 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	621a      	str	r2, [r3, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	40010000 	.word	0x40010000
 8007fc0:	40010400 	.word	0x40010400

08007fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	f023 0210 	bic.w	r2, r3, #16
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f023 0320 	bic.w	r3, r3, #32
 800800e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a22      	ldr	r2, [pc, #136]	@ (80080a8 <TIM_OC2_SetConfig+0xe4>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d003      	beq.n	800802c <TIM_OC2_SetConfig+0x68>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a21      	ldr	r2, [pc, #132]	@ (80080ac <TIM_OC2_SetConfig+0xe8>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d10d      	bne.n	8008048 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	011b      	lsls	r3, r3, #4
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008046:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a17      	ldr	r2, [pc, #92]	@ (80080a8 <TIM_OC2_SetConfig+0xe4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d003      	beq.n	8008058 <TIM_OC2_SetConfig+0x94>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a16      	ldr	r2, [pc, #88]	@ (80080ac <TIM_OC2_SetConfig+0xe8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d113      	bne.n	8008080 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800805e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	4313      	orrs	r3, r2
 8008072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685a      	ldr	r2, [r3, #4]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40010400 	.word	0x40010400

080080b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0303 	bic.w	r3, r3, #3
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a21      	ldr	r2, [pc, #132]	@ (8008190 <TIM_OC3_SetConfig+0xe0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d003      	beq.n	8008116 <TIM_OC3_SetConfig+0x66>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a20      	ldr	r2, [pc, #128]	@ (8008194 <TIM_OC3_SetConfig+0xe4>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d10d      	bne.n	8008132 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800811c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a16      	ldr	r2, [pc, #88]	@ (8008190 <TIM_OC3_SetConfig+0xe0>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_OC3_SetConfig+0x92>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a15      	ldr	r2, [pc, #84]	@ (8008194 <TIM_OC3_SetConfig+0xe4>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d113      	bne.n	800816a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	4313      	orrs	r3, r2
 800815c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	4313      	orrs	r3, r2
 8008168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	621a      	str	r2, [r3, #32]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	40010000 	.word	0x40010000
 8008194:	40010400 	.word	0x40010400

08008198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	031b      	lsls	r3, r3, #12
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a12      	ldr	r2, [pc, #72]	@ (800823c <TIM_OC4_SetConfig+0xa4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d003      	beq.n	8008200 <TIM_OC4_SetConfig+0x68>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a11      	ldr	r2, [pc, #68]	@ (8008240 <TIM_OC4_SetConfig+0xa8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d109      	bne.n	8008214 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008206:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	019b      	lsls	r3, r3, #6
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	4313      	orrs	r3, r2
 8008212:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	685a      	ldr	r2, [r3, #4]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	40010000 	.word	0x40010000
 8008240:	40010400 	.word	0x40010400

08008244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	f023 0201 	bic.w	r2, r3, #1
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800826e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f023 030a 	bic.w	r3, r3, #10
 8008280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	621a      	str	r2, [r3, #32]
}
 8008296:	bf00      	nop
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b087      	sub	sp, #28
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a1b      	ldr	r3, [r3, #32]
 80082b8:	f023 0210 	bic.w	r2, r3, #16
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	031b      	lsls	r3, r3, #12
 80082d2:	693a      	ldr	r2, [r7, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	011b      	lsls	r3, r3, #4
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	621a      	str	r2, [r3, #32]
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	f043 0307 	orr.w	r3, r3, #7
 8008324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	609a      	str	r2, [r3, #8]
}
 800832c:	bf00      	nop
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	431a      	orrs	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	4313      	orrs	r3, r2
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	609a      	str	r2, [r3, #8]
}
 800836c:	bf00      	nop
 800836e:	371c      	adds	r7, #28
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 031f 	and.w	r3, r3, #31
 800838a:	2201      	movs	r2, #1
 800838c:	fa02 f303 	lsl.w	r3, r2, r3
 8008390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1a      	ldr	r2, [r3, #32]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	43db      	mvns	r3, r3
 800839a:	401a      	ands	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a1a      	ldr	r2, [r3, #32]
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f003 031f 	and.w	r3, r3, #31
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	fa01 f303 	lsl.w	r3, r1, r3
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	621a      	str	r2, [r3, #32]
}
 80083b6:	bf00      	nop
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80083d8:	2302      	movs	r3, #2
 80083da:	e05a      	b.n	8008492 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2202      	movs	r2, #2
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	4313      	orrs	r3, r2
 800840c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a21      	ldr	r2, [pc, #132]	@ (80084a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d022      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008428:	d01d      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a1d      	ldr	r2, [pc, #116]	@ (80084a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d018      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1b      	ldr	r2, [pc, #108]	@ (80084a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d013      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a1a      	ldr	r2, [pc, #104]	@ (80084ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00e      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a18      	ldr	r2, [pc, #96]	@ (80084b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d009      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a17      	ldr	r2, [pc, #92]	@ (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d004      	beq.n	8008466 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a15      	ldr	r2, [pc, #84]	@ (80084b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d10c      	bne.n	8008480 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800846c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	4313      	orrs	r3, r2
 8008476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	40010000 	.word	0x40010000
 80084a4:	40000400 	.word	0x40000400
 80084a8:	40000800 	.word	0x40000800
 80084ac:	40000c00 	.word	0x40000c00
 80084b0:	40010400 	.word	0x40010400
 80084b4:	40014000 	.word	0x40014000
 80084b8:	40001800 	.word	0x40001800

080084bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d101      	bne.n	80084d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80084d4:	2302      	movs	r3, #2
 80084d6:	e03d      	b.n	8008554 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	4313      	orrs	r3, r2
 8008508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	4313      	orrs	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e042      	b.n	8008620 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d106      	bne.n	80085b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fb fb16 	bl	8003be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2224      	movs	r2, #36	@ 0x24
 80085b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80085ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fff5 	bl	80095bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	691a      	ldr	r2, [r3, #16]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	695a      	ldr	r2, [r3, #20]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2220      	movs	r2, #32
 800860c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08c      	sub	sp, #48	@ 0x30
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b20      	cmp	r3, #32
 8008640:	d162      	bne.n	8008708 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d002      	beq.n	800864e <HAL_UART_Transmit_DMA+0x26>
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e05b      	b.n	800870a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	88fa      	ldrh	r2, [r7, #6]
 800865c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	88fa      	ldrh	r2, [r7, #6]
 8008662:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2221      	movs	r2, #33	@ 0x21
 800866e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008676:	4a27      	ldr	r2, [pc, #156]	@ (8008714 <HAL_UART_Transmit_DMA+0xec>)
 8008678:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867e:	4a26      	ldr	r2, [pc, #152]	@ (8008718 <HAL_UART_Transmit_DMA+0xf0>)
 8008680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	4a25      	ldr	r2, [pc, #148]	@ (800871c <HAL_UART_Transmit_DMA+0xf4>)
 8008688:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800868e:	2200      	movs	r2, #0
 8008690:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008692:	f107 0308 	add.w	r3, r7, #8
 8008696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	6819      	ldr	r1, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3304      	adds	r3, #4
 80086a6:	461a      	mov	r2, r3
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	f7fc f9e9 	bl	8004a80 <HAL_DMA_Start_IT>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2210      	movs	r2, #16
 80086b8:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2220      	movs	r2, #32
 80086be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e021      	b.n	800870a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3314      	adds	r3, #20
 80086d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	617b      	str	r3, [r7, #20]
   return(result);
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3314      	adds	r3, #20
 80086ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80086f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6a39      	ldr	r1, [r7, #32]
 80086f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e5      	bne.n	80086d0 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	e000      	b.n	800870a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008708:	2302      	movs	r3, #2
  }
}
 800870a:	4618      	mov	r0, r3
 800870c:	3730      	adds	r7, #48	@ 0x30
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	08008e39 	.word	0x08008e39
 8008718:	08008ed3 	.word	0x08008ed3
 800871c:	08009057 	.word	0x08009057

08008720 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b20      	cmp	r3, #32
 8008738:	d112      	bne.n	8008760 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <HAL_UART_Receive_DMA+0x26>
 8008740:	88fb      	ldrh	r3, [r7, #6]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e00b      	b.n	8008762 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008750:	88fb      	ldrh	r3, [r7, #6]
 8008752:	461a      	mov	r2, r3
 8008754:	68b9      	ldr	r1, [r7, #8]
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 fcc8 	bl	80090ec <UART_Start_Receive_DMA>
 800875c:	4603      	mov	r3, r0
 800875e:	e000      	b.n	8008762 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008760:	2302      	movs	r3, #2
  }
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b090      	sub	sp, #64	@ 0x40
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008772:	2300      	movs	r3, #0
 8008774:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008780:	2b80      	cmp	r3, #128	@ 0x80
 8008782:	bf0c      	ite	eq
 8008784:	2301      	moveq	r3, #1
 8008786:	2300      	movne	r3, #0
 8008788:	b2db      	uxtb	r3, r3
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b21      	cmp	r3, #33	@ 0x21
 8008796:	d128      	bne.n	80087ea <HAL_UART_DMAStop+0x80>
 8008798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800879a:	2b00      	cmp	r3, #0
 800879c:	d025      	beq.n	80087ea <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3314      	adds	r3, #20
 80087a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	623b      	str	r3, [r7, #32]
   return(result);
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3314      	adds	r3, #20
 80087bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087be:	633a      	str	r2, [r7, #48]	@ 0x30
 80087c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e5      	bne.n	800879e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fc f9a6 	bl	8004b30 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fd27 	bl	8009238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b22      	cmp	r3, #34	@ 0x22
 800880a:	d128      	bne.n	800885e <HAL_UART_DMAStop+0xf4>
 800880c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d025      	beq.n	800885e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3314      	adds	r3, #20
 8008818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60fb      	str	r3, [r7, #12]
   return(result);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3314      	adds	r3, #20
 8008830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008832:	61fa      	str	r2, [r7, #28]
 8008834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	69b9      	ldr	r1, [r7, #24]
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	617b      	str	r3, [r7, #20]
   return(result);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e5      	bne.n	8008812 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d004      	beq.n	8008858 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	4618      	mov	r0, r3
 8008854:	f7fc f96c 	bl	8004b30 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fd15 	bl	8009288 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3740      	adds	r7, #64	@ 0x40
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b0ba      	sub	sp, #232	@ 0xe8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800888e:	2300      	movs	r3, #0
 8008890:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008894:	2300      	movs	r3, #0
 8008896:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800889a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80088a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10f      	bne.n	80088ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <HAL_UART_IRQHandler+0x66>
 80088ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fdba 	bl	8009440 <UART_Receive_IT>
      return;
 80088cc:	e273      	b.n	8008db6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f000 80de 	beq.w	8008a94 <HAL_UART_IRQHandler+0x22c>
 80088d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80d1 	beq.w	8008a94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f6:	f003 0301 	and.w	r3, r3, #1
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <HAL_UART_IRQHandler+0xae>
 80088fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890e:	f043 0201 	orr.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <HAL_UART_IRQHandler+0xd2>
 8008922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	2b00      	cmp	r3, #0
 800892c:	d005      	beq.n	800893a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008932:	f043 0202 	orr.w	r2, r3, #2
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893e:	f003 0302 	and.w	r3, r3, #2
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00b      	beq.n	800895e <HAL_UART_IRQHandler+0xf6>
 8008946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008956:	f043 0204 	orr.w	r2, r3, #4
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d011      	beq.n	800898e <HAL_UART_IRQHandler+0x126>
 800896a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008986:	f043 0208 	orr.w	r2, r3, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 820a 	beq.w	8008dac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_UART_IRQHandler+0x14e>
 80089a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a8:	f003 0320 	and.w	r3, r3, #32
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fd45 	bl	8009440 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c0:	2b40      	cmp	r3, #64	@ 0x40
 80089c2:	bf0c      	ite	eq
 80089c4:	2301      	moveq	r3, #1
 80089c6:	2300      	movne	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d103      	bne.n	80089e2 <HAL_UART_IRQHandler+0x17a>
 80089da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d04f      	beq.n	8008a82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fc50 	bl	8009288 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f2:	2b40      	cmp	r3, #64	@ 0x40
 80089f4:	d141      	bne.n	8008a7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3314      	adds	r3, #20
 80089fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3314      	adds	r3, #20
 8008a1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1d9      	bne.n	80089f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d013      	beq.n	8008a72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4e:	4a8a      	ldr	r2, [pc, #552]	@ (8008c78 <HAL_UART_IRQHandler+0x410>)
 8008a50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fc f8da 	bl	8004c10 <HAL_DMA_Abort_IT>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a70:	e00e      	b.n	8008a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f9ca 	bl	8008e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a78:	e00a      	b.n	8008a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f9c6 	bl	8008e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	e006      	b.n	8008a90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9c2 	bl	8008e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008a8e:	e18d      	b.n	8008dac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	bf00      	nop
    return;
 8008a92:	e18b      	b.n	8008dac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	f040 8167 	bne.w	8008d6c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 8160 	beq.w	8008d6c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 8159 	beq.w	8008d6c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	60bb      	str	r3, [r7, #8]
 8008ace:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ada:	2b40      	cmp	r3, #64	@ 0x40
 8008adc:	f040 80ce 	bne.w	8008c7c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008aec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 80a9 	beq.w	8008c48 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008afe:	429a      	cmp	r2, r3
 8008b00:	f080 80a2 	bcs.w	8008c48 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b16:	f000 8088 	beq.w	8008c2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	330c      	adds	r3, #12
 8008b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	330c      	adds	r3, #12
 8008b42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008b46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1d9      	bne.n	8008b1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3314      	adds	r3, #20
 8008b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e1      	bne.n	8008b66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	3314      	adds	r3, #20
 8008ba8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008baa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bac:	e853 3f00 	ldrex	r3, [r3]
 8008bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3314      	adds	r3, #20
 8008bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e3      	bne.n	8008ba2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	330c      	adds	r3, #12
 8008bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bfa:	f023 0310 	bic.w	r3, r3, #16
 8008bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	330c      	adds	r3, #12
 8008c08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e3      	bne.n	8008be8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fb ff83 	bl	8004b30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8ed 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008c46:	e0b3      	b.n	8008db0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c50:	429a      	cmp	r2, r3
 8008c52:	f040 80ad 	bne.w	8008db0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c60:	f040 80a6 	bne.w	8008db0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2202      	movs	r2, #2
 8008c68:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f8d5 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
      return;
 8008c76:	e09b      	b.n	8008db0 <HAL_UART_IRQHandler+0x548>
 8008c78:	0800934f 	.word	0x0800934f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 808e 	beq.w	8008db4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8008c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8089 	beq.w	8008db4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008cc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e3      	bne.n	8008ca2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3314      	adds	r3, #20
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3314      	adds	r3, #20
 8008cfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008cfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e3      	bne.n	8008cda <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0310 	bic.w	r3, r3, #16
 8008d36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d44:	61fa      	str	r2, [r7, #28]
 8008d46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	69b9      	ldr	r1, [r7, #24]
 8008d4a:	69fa      	ldr	r2, [r7, #28]
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	617b      	str	r3, [r7, #20]
   return(result);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e3      	bne.n	8008d20 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f85b 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d6a:	e023      	b.n	8008db4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <HAL_UART_IRQHandler+0x524>
 8008d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 faf3 	bl	8009370 <UART_Transmit_IT>
    return;
 8008d8a:	e014      	b.n	8008db6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00e      	beq.n	8008db6 <HAL_UART_IRQHandler+0x54e>
 8008d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d008      	beq.n	8008db6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fb33 	bl	8009410 <UART_EndTransmit_IT>
    return;
 8008daa:	e004      	b.n	8008db6 <HAL_UART_IRQHandler+0x54e>
    return;
 8008dac:	bf00      	nop
 8008dae:	e002      	b.n	8008db6 <HAL_UART_IRQHandler+0x54e>
      return;
 8008db0:	bf00      	nop
 8008db2:	e000      	b.n	8008db6 <HAL_UART_IRQHandler+0x54e>
      return;
 8008db4:	bf00      	nop
  }
}
 8008db6:	37e8      	adds	r7, #232	@ 0xe8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b090      	sub	sp, #64	@ 0x40
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d137      	bne.n	8008ec4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e56:	2200      	movs	r2, #0
 8008e58:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3314      	adds	r3, #20
 8008e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	623b      	str	r3, [r7, #32]
   return(result);
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3314      	adds	r3, #20
 8008e78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e5      	bne.n	8008e5a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	330c      	adds	r3, #12
 8008e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	330c      	adds	r3, #12
 8008eac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eae:	61fa      	str	r2, [r7, #28]
 8008eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	69b9      	ldr	r1, [r7, #24]
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	617b      	str	r3, [r7, #20]
   return(result);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ec2:	e002      	b.n	8008eca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ec4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008ec6:	f7ff ff79 	bl	8008dbc <HAL_UART_TxCpltCallback>
}
 8008eca:	bf00      	nop
 8008ecc:	3740      	adds	r7, #64	@ 0x40
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ede:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff ff75 	bl	8008dd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b09c      	sub	sp, #112	@ 0x70
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d172      	bne.n	8008ff0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	330c      	adds	r3, #12
 8008f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f1a:	e853 3f00 	ldrex	r3, [r3]
 8008f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e5      	bne.n	8008f10 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3314      	adds	r3, #20
 8008f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3314      	adds	r3, #20
 8008f62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f64:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e5      	bne.n	8008f44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3314      	adds	r3, #20
 8008f7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	623b      	str	r3, [r7, #32]
   return(result);
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3314      	adds	r3, #20
 8008f96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f98:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e5      	bne.n	8008f78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d119      	bne.n	8008ff0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	330c      	adds	r3, #12
 8008fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0310 	bic.w	r3, r3, #16
 8008fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fdc:	61fa      	str	r2, [r7, #28]
 8008fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	69b9      	ldr	r1, [r7, #24]
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e5      	bne.n	8008fbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d106      	bne.n	800900c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009002:	4619      	mov	r1, r3
 8009004:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009006:	f7ff ff0b 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800900a:	e002      	b.n	8009012 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800900c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800900e:	f7ff fee9 	bl	8008de4 <HAL_UART_RxCpltCallback>
}
 8009012:	bf00      	nop
 8009014:	3770      	adds	r7, #112	@ 0x70
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b084      	sub	sp, #16
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009026:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2201      	movs	r2, #1
 800902c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009032:	2b01      	cmp	r3, #1
 8009034:	d108      	bne.n	8009048 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	b29b      	uxth	r3, r3
 800903e:	4619      	mov	r1, r3
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f7ff feed 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009046:	e002      	b.n	800904e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff fed5 	bl	8008df8 <HAL_UART_RxHalfCpltCallback>
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009066:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009072:	2b80      	cmp	r3, #128	@ 0x80
 8009074:	bf0c      	ite	eq
 8009076:	2301      	moveq	r3, #1
 8009078:	2300      	movne	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b21      	cmp	r3, #33	@ 0x21
 8009088:	d108      	bne.n	800909c <UART_DMAError+0x46>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d005      	beq.n	800909c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8ce 	bl	8009238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a6:	2b40      	cmp	r3, #64	@ 0x40
 80090a8:	bf0c      	ite	eq
 80090aa:	2301      	moveq	r3, #1
 80090ac:	2300      	movne	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b22      	cmp	r3, #34	@ 0x22
 80090bc:	d108      	bne.n	80090d0 <UART_DMAError+0x7a>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2200      	movs	r2, #0
 80090c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80090ca:	68b8      	ldr	r0, [r7, #8]
 80090cc:	f000 f8dc 	bl	8009288 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d4:	f043 0210 	orr.w	r2, r3, #16
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090dc:	68b8      	ldr	r0, [r7, #8]
 80090de:	f7ff fe95 	bl	8008e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e2:	bf00      	nop
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b098      	sub	sp, #96	@ 0x60
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2222      	movs	r2, #34	@ 0x22
 8009110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009118:	4a44      	ldr	r2, [pc, #272]	@ (800922c <UART_Start_Receive_DMA+0x140>)
 800911a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009120:	4a43      	ldr	r2, [pc, #268]	@ (8009230 <UART_Start_Receive_DMA+0x144>)
 8009122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009128:	4a42      	ldr	r2, [pc, #264]	@ (8009234 <UART_Start_Receive_DMA+0x148>)
 800912a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009130:	2200      	movs	r2, #0
 8009132:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3304      	adds	r3, #4
 8009144:	4619      	mov	r1, r3
 8009146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	f7fb fc98 	bl	8004a80 <HAL_DMA_Start_IT>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d008      	beq.n	8009168 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2210      	movs	r2, #16
 800915a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2220      	movs	r2, #32
 8009160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e05d      	b.n	8009224 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009168:	2300      	movs	r3, #0
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	613b      	str	r3, [r7, #16]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d019      	beq.n	80091ba <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009190:	e853 3f00 	ldrex	r3, [r3]
 8009194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800919c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	330c      	adds	r3, #12
 80091a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80091a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80091ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80091b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e5      	bne.n	8009186 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091cc:	f043 0301 	orr.w	r3, r3, #1
 80091d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	3314      	adds	r3, #20
 80091d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80091e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e5      	bne.n	80091ba <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3314      	adds	r3, #20
 80091f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	e853 3f00 	ldrex	r3, [r3]
 80091fc:	617b      	str	r3, [r7, #20]
   return(result);
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009204:	653b      	str	r3, [r7, #80]	@ 0x50
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3314      	adds	r3, #20
 800920c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800920e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6a39      	ldr	r1, [r7, #32]
 8009214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	61fb      	str	r3, [r7, #28]
   return(result);
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e5      	bne.n	80091ee <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3760      	adds	r7, #96	@ 0x60
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}
 800922c:	08008eef 	.word	0x08008eef
 8009230:	0800901b 	.word	0x0800901b
 8009234:	08009057 	.word	0x08009057

08009238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009238:	b480      	push	{r7}
 800923a:	b089      	sub	sp, #36	@ 0x24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	330c      	adds	r3, #12
 8009246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009256:	61fb      	str	r3, [r7, #28]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	69fa      	ldr	r2, [r7, #28]
 8009260:	61ba      	str	r2, [r7, #24]
 8009262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	613b      	str	r3, [r7, #16]
   return(result);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e5      	bne.n	8009240 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800927c:	bf00      	nop
 800927e:	3724      	adds	r7, #36	@ 0x24
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b095      	sub	sp, #84	@ 0x54
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330c      	adds	r3, #12
 8009296:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80092a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	330c      	adds	r3, #12
 80092ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80092b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80092b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d1e5      	bne.n	8009290 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	3314      	adds	r3, #20
 80092ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	6a3b      	ldr	r3, [r7, #32]
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3314      	adds	r3, #20
 80092e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e5      	bne.n	80092c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d119      	bne.n	8009334 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 0310 	bic.w	r3, r3, #16
 8009316:	647b      	str	r3, [r7, #68]	@ 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009320:	61ba      	str	r2, [r7, #24]
 8009322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009342:	bf00      	nop
 8009344:	3754      	adds	r7, #84	@ 0x54
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fd52 	bl	8008e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b21      	cmp	r3, #33	@ 0x21
 8009382:	d13e      	bne.n	8009402 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800938c:	d114      	bne.n	80093b8 <UART_Transmit_IT+0x48>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d110      	bne.n	80093b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	1c9a      	adds	r2, r3, #2
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]
 80093b6:	e008      	b.n	80093ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	1c59      	adds	r1, r3, #1
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6211      	str	r1, [r2, #32]
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	3b01      	subs	r3, #1
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	4619      	mov	r1, r3
 80093d8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10f      	bne.n	80093fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68da      	ldr	r2, [r3, #12]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68da      	ldr	r2, [r3, #12]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	e000      	b.n	8009404 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009402:	2302      	movs	r3, #2
  }
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68da      	ldr	r2, [r3, #12]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009426:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2220      	movs	r2, #32
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fcc3 	bl	8008dbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08c      	sub	sp, #48	@ 0x30
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009448:	2300      	movs	r3, #0
 800944a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800944c:	2300      	movs	r3, #0
 800944e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b22      	cmp	r3, #34	@ 0x22
 800945a:	f040 80aa 	bne.w	80095b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009466:	d115      	bne.n	8009494 <UART_Receive_IT+0x54>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d111      	bne.n	8009494 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009474:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	b29b      	uxth	r3, r3
 800947e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009482:	b29a      	uxth	r2, r3
 8009484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800948c:	1c9a      	adds	r2, r3, #2
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	629a      	str	r2, [r3, #40]	@ 0x28
 8009492:	e024      	b.n	80094de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009498:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a2:	d007      	beq.n	80094b4 <UART_Receive_IT+0x74>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10a      	bne.n	80094c2 <UART_Receive_IT+0x82>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	e008      	b.n	80094d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b01      	subs	r3, #1
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	4619      	mov	r1, r3
 80094ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d15d      	bne.n	80095ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68da      	ldr	r2, [r3, #12]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f022 0220 	bic.w	r2, r2, #32
 8009500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f022 0201 	bic.w	r2, r2, #1
 8009520:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009534:	2b01      	cmp	r3, #1
 8009536:	d135      	bne.n	80095a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	330c      	adds	r3, #12
 8009544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	613b      	str	r3, [r7, #16]
   return(result);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f023 0310 	bic.w	r3, r3, #16
 8009554:	627b      	str	r3, [r7, #36]	@ 0x24
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	330c      	adds	r3, #12
 800955c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800955e:	623a      	str	r2, [r7, #32]
 8009560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009562:	69f9      	ldr	r1, [r7, #28]
 8009564:	6a3a      	ldr	r2, [r7, #32]
 8009566:	e841 2300 	strex	r3, r2, [r1]
 800956a:	61bb      	str	r3, [r7, #24]
   return(result);
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e5      	bne.n	800953e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b10      	cmp	r3, #16
 800957e:	d10a      	bne.n	8009596 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009580:	2300      	movs	r3, #0
 8009582:	60fb      	str	r3, [r7, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	60fb      	str	r3, [r7, #12]
 8009594:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f7ff fc3f 	bl	8008e20 <HAL_UARTEx_RxEventCallback>
 80095a2:	e002      	b.n	80095aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7ff fc1d 	bl	8008de4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e002      	b.n	80095b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e000      	b.n	80095b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80095b2:	2302      	movs	r3, #2
  }
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3730      	adds	r7, #48	@ 0x30
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095c0:	b0c0      	sub	sp, #256	@ 0x100
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80095d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095d8:	68d9      	ldr	r1, [r3, #12]
 80095da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	ea40 0301 	orr.w	r3, r0, r1
 80095e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	4313      	orrs	r3, r2
 8009604:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009614:	f021 010c 	bic.w	r1, r1, #12
 8009618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009622:	430b      	orrs	r3, r1
 8009624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	695b      	ldr	r3, [r3, #20]
 800962e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009636:	6999      	ldr	r1, [r3, #24]
 8009638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	ea40 0301 	orr.w	r3, r0, r1
 8009642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	4b8f      	ldr	r3, [pc, #572]	@ (8009888 <UART_SetConfig+0x2cc>)
 800964c:	429a      	cmp	r2, r3
 800964e:	d005      	beq.n	800965c <UART_SetConfig+0xa0>
 8009650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	4b8d      	ldr	r3, [pc, #564]	@ (800988c <UART_SetConfig+0x2d0>)
 8009658:	429a      	cmp	r2, r3
 800965a:	d104      	bne.n	8009666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800965c:	f7fd f960 	bl	8006920 <HAL_RCC_GetPCLK2Freq>
 8009660:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009664:	e003      	b.n	800966e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009666:	f7fd f947 	bl	80068f8 <HAL_RCC_GetPCLK1Freq>
 800966a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800966e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009678:	f040 810c 	bne.w	8009894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800967c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009680:	2200      	movs	r2, #0
 8009682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009686:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800968a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	1891      	adds	r1, r2, r2
 8009694:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009696:	415b      	adcs	r3, r3
 8009698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800969a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800969e:	4621      	mov	r1, r4
 80096a0:	eb12 0801 	adds.w	r8, r2, r1
 80096a4:	4629      	mov	r1, r5
 80096a6:	eb43 0901 	adc.w	r9, r3, r1
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096be:	4690      	mov	r8, r2
 80096c0:	4699      	mov	r9, r3
 80096c2:	4623      	mov	r3, r4
 80096c4:	eb18 0303 	adds.w	r3, r8, r3
 80096c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80096cc:	462b      	mov	r3, r5
 80096ce:	eb49 0303 	adc.w	r3, r9, r3
 80096d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80096d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80096e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80096e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80096ea:	460b      	mov	r3, r1
 80096ec:	18db      	adds	r3, r3, r3
 80096ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80096f0:	4613      	mov	r3, r2
 80096f2:	eb42 0303 	adc.w	r3, r2, r3
 80096f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80096f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80096fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009700:	f7f7 fa5c 	bl	8000bbc <__aeabi_uldivmod>
 8009704:	4602      	mov	r2, r0
 8009706:	460b      	mov	r3, r1
 8009708:	4b61      	ldr	r3, [pc, #388]	@ (8009890 <UART_SetConfig+0x2d4>)
 800970a:	fba3 2302 	umull	r2, r3, r3, r2
 800970e:	095b      	lsrs	r3, r3, #5
 8009710:	011c      	lsls	r4, r3, #4
 8009712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009716:	2200      	movs	r2, #0
 8009718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800971c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009724:	4642      	mov	r2, r8
 8009726:	464b      	mov	r3, r9
 8009728:	1891      	adds	r1, r2, r2
 800972a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800972c:	415b      	adcs	r3, r3
 800972e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009734:	4641      	mov	r1, r8
 8009736:	eb12 0a01 	adds.w	sl, r2, r1
 800973a:	4649      	mov	r1, r9
 800973c:	eb43 0b01 	adc.w	fp, r3, r1
 8009740:	f04f 0200 	mov.w	r2, #0
 8009744:	f04f 0300 	mov.w	r3, #0
 8009748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800974c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009754:	4692      	mov	sl, r2
 8009756:	469b      	mov	fp, r3
 8009758:	4643      	mov	r3, r8
 800975a:	eb1a 0303 	adds.w	r3, sl, r3
 800975e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009762:	464b      	mov	r3, r9
 8009764:	eb4b 0303 	adc.w	r3, fp, r3
 8009768:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009778:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800977c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009780:	460b      	mov	r3, r1
 8009782:	18db      	adds	r3, r3, r3
 8009784:	643b      	str	r3, [r7, #64]	@ 0x40
 8009786:	4613      	mov	r3, r2
 8009788:	eb42 0303 	adc.w	r3, r2, r3
 800978c:	647b      	str	r3, [r7, #68]	@ 0x44
 800978e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009796:	f7f7 fa11 	bl	8000bbc <__aeabi_uldivmod>
 800979a:	4602      	mov	r2, r0
 800979c:	460b      	mov	r3, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009890 <UART_SetConfig+0x2d4>)
 80097a2:	fba3 2301 	umull	r2, r3, r3, r1
 80097a6:	095b      	lsrs	r3, r3, #5
 80097a8:	2264      	movs	r2, #100	@ 0x64
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	1acb      	subs	r3, r1, r3
 80097b0:	00db      	lsls	r3, r3, #3
 80097b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80097b6:	4b36      	ldr	r3, [pc, #216]	@ (8009890 <UART_SetConfig+0x2d4>)
 80097b8:	fba3 2302 	umull	r2, r3, r3, r2
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	005b      	lsls	r3, r3, #1
 80097c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80097c4:	441c      	add	r4, r3
 80097c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80097d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80097d8:	4642      	mov	r2, r8
 80097da:	464b      	mov	r3, r9
 80097dc:	1891      	adds	r1, r2, r2
 80097de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80097e0:	415b      	adcs	r3, r3
 80097e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80097e8:	4641      	mov	r1, r8
 80097ea:	1851      	adds	r1, r2, r1
 80097ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80097ee:	4649      	mov	r1, r9
 80097f0:	414b      	adcs	r3, r1
 80097f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f4:	f04f 0200 	mov.w	r2, #0
 80097f8:	f04f 0300 	mov.w	r3, #0
 80097fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009800:	4659      	mov	r1, fp
 8009802:	00cb      	lsls	r3, r1, #3
 8009804:	4651      	mov	r1, sl
 8009806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800980a:	4651      	mov	r1, sl
 800980c:	00ca      	lsls	r2, r1, #3
 800980e:	4610      	mov	r0, r2
 8009810:	4619      	mov	r1, r3
 8009812:	4603      	mov	r3, r0
 8009814:	4642      	mov	r2, r8
 8009816:	189b      	adds	r3, r3, r2
 8009818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800981c:	464b      	mov	r3, r9
 800981e:	460a      	mov	r2, r1
 8009820:	eb42 0303 	adc.w	r3, r2, r3
 8009824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009834:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800983c:	460b      	mov	r3, r1
 800983e:	18db      	adds	r3, r3, r3
 8009840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009842:	4613      	mov	r3, r2
 8009844:	eb42 0303 	adc.w	r3, r2, r3
 8009848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800984a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800984e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009852:	f7f7 f9b3 	bl	8000bbc <__aeabi_uldivmod>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4b0d      	ldr	r3, [pc, #52]	@ (8009890 <UART_SetConfig+0x2d4>)
 800985c:	fba3 1302 	umull	r1, r3, r3, r2
 8009860:	095b      	lsrs	r3, r3, #5
 8009862:	2164      	movs	r1, #100	@ 0x64
 8009864:	fb01 f303 	mul.w	r3, r1, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	3332      	adds	r3, #50	@ 0x32
 800986e:	4a08      	ldr	r2, [pc, #32]	@ (8009890 <UART_SetConfig+0x2d4>)
 8009870:	fba2 2303 	umull	r2, r3, r2, r3
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	f003 0207 	and.w	r2, r3, #7
 800987a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4422      	add	r2, r4
 8009882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009884:	e106      	b.n	8009a94 <UART_SetConfig+0x4d8>
 8009886:	bf00      	nop
 8009888:	40011000 	.word	0x40011000
 800988c:	40011400 	.word	0x40011400
 8009890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009898:	2200      	movs	r2, #0
 800989a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800989e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80098a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80098a6:	4642      	mov	r2, r8
 80098a8:	464b      	mov	r3, r9
 80098aa:	1891      	adds	r1, r2, r2
 80098ac:	6239      	str	r1, [r7, #32]
 80098ae:	415b      	adcs	r3, r3
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80098b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098b6:	4641      	mov	r1, r8
 80098b8:	1854      	adds	r4, r2, r1
 80098ba:	4649      	mov	r1, r9
 80098bc:	eb43 0501 	adc.w	r5, r3, r1
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	00eb      	lsls	r3, r5, #3
 80098ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098ce:	00e2      	lsls	r2, r4, #3
 80098d0:	4614      	mov	r4, r2
 80098d2:	461d      	mov	r5, r3
 80098d4:	4643      	mov	r3, r8
 80098d6:	18e3      	adds	r3, r4, r3
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098dc:	464b      	mov	r3, r9
 80098de:	eb45 0303 	adc.w	r3, r5, r3
 80098e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80098e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80098f6:	f04f 0200 	mov.w	r2, #0
 80098fa:	f04f 0300 	mov.w	r3, #0
 80098fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009902:	4629      	mov	r1, r5
 8009904:	008b      	lsls	r3, r1, #2
 8009906:	4621      	mov	r1, r4
 8009908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800990c:	4621      	mov	r1, r4
 800990e:	008a      	lsls	r2, r1, #2
 8009910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009914:	f7f7 f952 	bl	8000bbc <__aeabi_uldivmod>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4b60      	ldr	r3, [pc, #384]	@ (8009aa0 <UART_SetConfig+0x4e4>)
 800991e:	fba3 2302 	umull	r2, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	011c      	lsls	r4, r3, #4
 8009926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800992a:	2200      	movs	r2, #0
 800992c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009930:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009938:	4642      	mov	r2, r8
 800993a:	464b      	mov	r3, r9
 800993c:	1891      	adds	r1, r2, r2
 800993e:	61b9      	str	r1, [r7, #24]
 8009940:	415b      	adcs	r3, r3
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009948:	4641      	mov	r1, r8
 800994a:	1851      	adds	r1, r2, r1
 800994c:	6139      	str	r1, [r7, #16]
 800994e:	4649      	mov	r1, r9
 8009950:	414b      	adcs	r3, r1
 8009952:	617b      	str	r3, [r7, #20]
 8009954:	f04f 0200 	mov.w	r2, #0
 8009958:	f04f 0300 	mov.w	r3, #0
 800995c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009960:	4659      	mov	r1, fp
 8009962:	00cb      	lsls	r3, r1, #3
 8009964:	4651      	mov	r1, sl
 8009966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800996a:	4651      	mov	r1, sl
 800996c:	00ca      	lsls	r2, r1, #3
 800996e:	4610      	mov	r0, r2
 8009970:	4619      	mov	r1, r3
 8009972:	4603      	mov	r3, r0
 8009974:	4642      	mov	r2, r8
 8009976:	189b      	adds	r3, r3, r2
 8009978:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800997c:	464b      	mov	r3, r9
 800997e:	460a      	mov	r2, r1
 8009980:	eb42 0303 	adc.w	r3, r2, r3
 8009984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009992:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80099a0:	4649      	mov	r1, r9
 80099a2:	008b      	lsls	r3, r1, #2
 80099a4:	4641      	mov	r1, r8
 80099a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099aa:	4641      	mov	r1, r8
 80099ac:	008a      	lsls	r2, r1, #2
 80099ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80099b2:	f7f7 f903 	bl	8000bbc <__aeabi_uldivmod>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4611      	mov	r1, r2
 80099bc:	4b38      	ldr	r3, [pc, #224]	@ (8009aa0 <UART_SetConfig+0x4e4>)
 80099be:	fba3 2301 	umull	r2, r3, r3, r1
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	2264      	movs	r2, #100	@ 0x64
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	1acb      	subs	r3, r1, r3
 80099cc:	011b      	lsls	r3, r3, #4
 80099ce:	3332      	adds	r3, #50	@ 0x32
 80099d0:	4a33      	ldr	r2, [pc, #204]	@ (8009aa0 <UART_SetConfig+0x4e4>)
 80099d2:	fba2 2303 	umull	r2, r3, r2, r3
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099dc:	441c      	add	r4, r3
 80099de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099e2:	2200      	movs	r2, #0
 80099e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80099e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80099e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80099ec:	4642      	mov	r2, r8
 80099ee:	464b      	mov	r3, r9
 80099f0:	1891      	adds	r1, r2, r2
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	415b      	adcs	r3, r3
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099fc:	4641      	mov	r1, r8
 80099fe:	1851      	adds	r1, r2, r1
 8009a00:	6039      	str	r1, [r7, #0]
 8009a02:	4649      	mov	r1, r9
 8009a04:	414b      	adcs	r3, r1
 8009a06:	607b      	str	r3, [r7, #4]
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a14:	4659      	mov	r1, fp
 8009a16:	00cb      	lsls	r3, r1, #3
 8009a18:	4651      	mov	r1, sl
 8009a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a1e:	4651      	mov	r1, sl
 8009a20:	00ca      	lsls	r2, r1, #3
 8009a22:	4610      	mov	r0, r2
 8009a24:	4619      	mov	r1, r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	4642      	mov	r2, r8
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a2e:	464b      	mov	r3, r9
 8009a30:	460a      	mov	r2, r1
 8009a32:	eb42 0303 	adc.w	r3, r2, r3
 8009a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a42:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a44:	f04f 0200 	mov.w	r2, #0
 8009a48:	f04f 0300 	mov.w	r3, #0
 8009a4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009a50:	4649      	mov	r1, r9
 8009a52:	008b      	lsls	r3, r1, #2
 8009a54:	4641      	mov	r1, r8
 8009a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	008a      	lsls	r2, r1, #2
 8009a5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009a62:	f7f7 f8ab 	bl	8000bbc <__aeabi_uldivmod>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009aa0 <UART_SetConfig+0x4e4>)
 8009a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	2164      	movs	r1, #100	@ 0x64
 8009a74:	fb01 f303 	mul.w	r3, r1, r3
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	3332      	adds	r3, #50	@ 0x32
 8009a7e:	4a08      	ldr	r2, [pc, #32]	@ (8009aa0 <UART_SetConfig+0x4e4>)
 8009a80:	fba2 2303 	umull	r2, r3, r2, r3
 8009a84:	095b      	lsrs	r3, r3, #5
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4422      	add	r2, r4
 8009a92:	609a      	str	r2, [r3, #8]
}
 8009a94:	bf00      	nop
 8009a96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009aa0:	51eb851f 	.word	0x51eb851f

08009aa4 <__NVIC_SetPriority>:
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	db0a      	blt.n	8009ace <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	490c      	ldr	r1, [pc, #48]	@ (8009af0 <__NVIC_SetPriority+0x4c>)
 8009abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ac2:	0112      	lsls	r2, r2, #4
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009acc:	e00a      	b.n	8009ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	4908      	ldr	r1, [pc, #32]	@ (8009af4 <__NVIC_SetPriority+0x50>)
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	f003 030f 	and.w	r3, r3, #15
 8009ada:	3b04      	subs	r3, #4
 8009adc:	0112      	lsls	r2, r2, #4
 8009ade:	b2d2      	uxtb	r2, r2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	761a      	strb	r2, [r3, #24]
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	e000e100 	.word	0xe000e100
 8009af4:	e000ed00 	.word	0xe000ed00

08009af8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009afc:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <SysTick_Handler+0x1c>)
 8009afe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009b00:	f001 fd40 	bl	800b584 <xTaskGetSchedulerState>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d001      	beq.n	8009b0e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009b0a:	f002 fb35 	bl	800c178 <xPortSysTickHandler>
  }
}
 8009b0e:	bf00      	nop
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	e000e010 	.word	0xe000e010

08009b18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	f06f 0004 	mvn.w	r0, #4
 8009b22:	f7ff ffbf 	bl	8009aa4 <__NVIC_SetPriority>
#endif
}
 8009b26:	bf00      	nop
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b32:	f3ef 8305 	mrs	r3, IPSR
 8009b36:	603b      	str	r3, [r7, #0]
  return(result);
 8009b38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009b3e:	f06f 0305 	mvn.w	r3, #5
 8009b42:	607b      	str	r3, [r7, #4]
 8009b44:	e00c      	b.n	8009b60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b46:	4b0a      	ldr	r3, [pc, #40]	@ (8009b70 <osKernelInitialize+0x44>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d105      	bne.n	8009b5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b4e:	4b08      	ldr	r3, [pc, #32]	@ (8009b70 <osKernelInitialize+0x44>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	e002      	b.n	8009b60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b60:	687b      	ldr	r3, [r7, #4]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	200086a8 	.word	0x200086a8

08009b74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b7a:	f3ef 8305 	mrs	r3, IPSR
 8009b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8009b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b86:	f06f 0305 	mvn.w	r3, #5
 8009b8a:	607b      	str	r3, [r7, #4]
 8009b8c:	e010      	b.n	8009bb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b8e:	4b0b      	ldr	r3, [pc, #44]	@ (8009bbc <osKernelStart+0x48>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d109      	bne.n	8009baa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b96:	f7ff ffbf 	bl	8009b18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b9a:	4b08      	ldr	r3, [pc, #32]	@ (8009bbc <osKernelStart+0x48>)
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ba0:	f001 f87a 	bl	800ac98 <vTaskStartScheduler>
      stat = osOK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	607b      	str	r3, [r7, #4]
 8009ba8:	e002      	b.n	8009bb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009baa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009bae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009bb0:	687b      	ldr	r3, [r7, #4]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200086a8 	.word	0x200086a8

08009bc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	@ 0x38
 8009bc4:	af04      	add	r7, sp, #16
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bd0:	f3ef 8305 	mrs	r3, IPSR
 8009bd4:	617b      	str	r3, [r7, #20]
  return(result);
 8009bd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d17e      	bne.n	8009cda <osThreadNew+0x11a>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d07b      	beq.n	8009cda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009be2:	2380      	movs	r3, #128	@ 0x80
 8009be4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009be6:	2318      	movs	r3, #24
 8009be8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009bea:	2300      	movs	r3, #0
 8009bec:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009bf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d045      	beq.n	8009c86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d002      	beq.n	8009c08 <osThreadNew+0x48>
        name = attr->name;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d008      	beq.n	8009c2e <osThreadNew+0x6e>
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	2b38      	cmp	r3, #56	@ 0x38
 8009c20:	d805      	bhi.n	8009c2e <osThreadNew+0x6e>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <osThreadNew+0x72>
        return (NULL);
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e054      	b.n	8009cdc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	089b      	lsrs	r3, r3, #2
 8009c40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00e      	beq.n	8009c68 <osThreadNew+0xa8>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	2b5b      	cmp	r3, #91	@ 0x5b
 8009c50:	d90a      	bls.n	8009c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d006      	beq.n	8009c68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <osThreadNew+0xa8>
        mem = 1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	61bb      	str	r3, [r7, #24]
 8009c66:	e010      	b.n	8009c8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10c      	bne.n	8009c8a <osThreadNew+0xca>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d108      	bne.n	8009c8a <osThreadNew+0xca>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d104      	bne.n	8009c8a <osThreadNew+0xca>
          mem = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	61bb      	str	r3, [r7, #24]
 8009c84:	e001      	b.n	8009c8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d110      	bne.n	8009cb2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c98:	9202      	str	r2, [sp, #8]
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	6a3a      	ldr	r2, [r7, #32]
 8009ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 fe1a 	bl	800a8e0 <xTaskCreateStatic>
 8009cac:	4603      	mov	r3, r0
 8009cae:	613b      	str	r3, [r7, #16]
 8009cb0:	e013      	b.n	8009cda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d110      	bne.n	8009cda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f107 0310 	add.w	r3, r7, #16
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 fe68 	bl	800a9a0 <xTaskCreate>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d001      	beq.n	8009cda <osThreadNew+0x11a>
            hTask = NULL;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009cda:	693b      	ldr	r3, [r7, #16]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3728      	adds	r7, #40	@ 0x28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cec:	f3ef 8305 	mrs	r3, IPSR
 8009cf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <osDelay+0x1c>
    stat = osErrorISR;
 8009cf8:	f06f 0305 	mvn.w	r3, #5
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e007      	b.n	8009d10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 ff8e 	bl	800ac2c <vTaskDelay>
    }
  }

  return (stat);
 8009d10:	68fb      	ldr	r3, [r7, #12]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
	...

08009d1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4a07      	ldr	r2, [pc, #28]	@ (8009d48 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	4a06      	ldr	r2, [pc, #24]	@ (8009d4c <vApplicationGetIdleTaskMemory+0x30>)
 8009d32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2280      	movs	r2, #128	@ 0x80
 8009d38:	601a      	str	r2, [r3, #0]
}
 8009d3a:	bf00      	nop
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	200086ac 	.word	0x200086ac
 8009d4c:	20008708 	.word	0x20008708

08009d50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a07      	ldr	r2, [pc, #28]	@ (8009d7c <vApplicationGetTimerTaskMemory+0x2c>)
 8009d60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4a06      	ldr	r2, [pc, #24]	@ (8009d80 <vApplicationGetTimerTaskMemory+0x30>)
 8009d66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d6e:	601a      	str	r2, [r3, #0]
}
 8009d70:	bf00      	nop
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20008908 	.word	0x20008908
 8009d80:	20008964 	.word	0x20008964

08009d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f103 0208 	add.w	r2, r3, #8
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f103 0208 	add.w	r2, r3, #8
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f103 0208 	add.w	r2, r3, #8
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dd2:	bf00      	nop
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	689a      	ldr	r2, [r3, #8]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	601a      	str	r2, [r3, #0]
}
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e26:	b480      	push	{r7}
 8009e28:	b085      	sub	sp, #20
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e3c:	d103      	bne.n	8009e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e00c      	b.n	8009e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3308      	adds	r3, #8
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e002      	b.n	8009e54 <vListInsert+0x2e>
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d2f6      	bcs.n	8009e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	601a      	str	r2, [r3, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6892      	ldr	r2, [r2, #8]
 8009eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6852      	ldr	r2, [r2, #4]
 8009eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d103      	bne.n	8009ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <xQueueGenericReset+0x2c>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	60bb      	str	r3, [r7, #8]
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	e7fd      	b.n	8009f14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f18:	f002 f89e 	bl	800c058 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f24:	68f9      	ldr	r1, [r7, #12]
 8009f26:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f28:	fb01 f303 	mul.w	r3, r1, r3
 8009f2c:	441a      	add	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	441a      	add	r2, r3
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	22ff      	movs	r2, #255	@ 0xff
 8009f5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	22ff      	movs	r2, #255	@ 0xff
 8009f64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d114      	bne.n	8009f98 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d01a      	beq.n	8009fac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3310      	adds	r3, #16
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 f91a 	bl	800b1b4 <xTaskRemoveFromEventList>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d012      	beq.n	8009fac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f86:	4b0d      	ldr	r3, [pc, #52]	@ (8009fbc <xQueueGenericReset+0xd0>)
 8009f88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	e009      	b.n	8009fac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3310      	adds	r3, #16
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff fef1 	bl	8009d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3324      	adds	r3, #36	@ 0x24
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff feec 	bl	8009d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fac:	f002 f886 	bl	800c0bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fb0:	2301      	movs	r3, #1
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b08e      	sub	sp, #56	@ 0x38
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10b      	bne.n	8009fec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009fe6:	bf00      	nop
 8009fe8:	bf00      	nop
 8009fea:	e7fd      	b.n	8009fe8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10b      	bne.n	800a00a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <xQueueGenericCreateStatic+0x56>
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <xQueueGenericCreateStatic+0x5a>
 800a016:	2301      	movs	r3, #1
 800a018:	e000      	b.n	800a01c <xQueueGenericCreateStatic+0x5c>
 800a01a:	2300      	movs	r3, #0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10b      	bne.n	800a038 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	623b      	str	r3, [r7, #32]
}
 800a032:	bf00      	nop
 800a034:	bf00      	nop
 800a036:	e7fd      	b.n	800a034 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <xQueueGenericCreateStatic+0x84>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <xQueueGenericCreateStatic+0x88>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <xQueueGenericCreateStatic+0x8a>
 800a048:	2300      	movs	r3, #0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10b      	bne.n	800a066 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	61fb      	str	r3, [r7, #28]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a066:	2350      	movs	r3, #80	@ 0x50
 800a068:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b50      	cmp	r3, #80	@ 0x50
 800a06e:	d00b      	beq.n	800a088 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	61bb      	str	r3, [r7, #24]
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00d      	beq.n	800a0b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	2201      	movs	r2, #1
 800a098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a09c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	68b9      	ldr	r1, [r7, #8]
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	f000 f805 	bl	800a0ba <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3730      	adds	r7, #48	@ 0x30
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b084      	sub	sp, #16
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	607a      	str	r2, [r7, #4]
 800a0c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e002      	b.n	800a0dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	69b8      	ldr	r0, [r7, #24]
 800a0ec:	f7ff fefe 	bl	8009eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	78fa      	ldrb	r2, [r7, #3]
 800a0f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0f8:	bf00      	nop
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b08e      	sub	sp, #56	@ 0x38
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
 800a10c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a10e:	2300      	movs	r3, #0
 800a110:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10b      	bne.n	800a134 <xQueueGenericSend+0x34>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a12e:	bf00      	nop
 800a130:	bf00      	nop
 800a132:	e7fd      	b.n	800a130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <xQueueGenericSend+0x42>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <xQueueGenericSend+0x46>
 800a142:	2301      	movs	r3, #1
 800a144:	e000      	b.n	800a148 <xQueueGenericSend+0x48>
 800a146:	2300      	movs	r3, #0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d10b      	bne.n	800a164 <xQueueGenericSend+0x64>
	__asm volatile
 800a14c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a15e:	bf00      	nop
 800a160:	bf00      	nop
 800a162:	e7fd      	b.n	800a160 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	2b02      	cmp	r3, #2
 800a168:	d103      	bne.n	800a172 <xQueueGenericSend+0x72>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d101      	bne.n	800a176 <xQueueGenericSend+0x76>
 800a172:	2301      	movs	r3, #1
 800a174:	e000      	b.n	800a178 <xQueueGenericSend+0x78>
 800a176:	2300      	movs	r3, #0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10b      	bne.n	800a194 <xQueueGenericSend+0x94>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	623b      	str	r3, [r7, #32]
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a194:	f001 f9f6 	bl	800b584 <xTaskGetSchedulerState>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <xQueueGenericSend+0xa4>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <xQueueGenericSend+0xa8>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e000      	b.n	800a1aa <xQueueGenericSend+0xaa>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10b      	bne.n	800a1c6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	61fb      	str	r3, [r7, #28]
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	e7fd      	b.n	800a1c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1c6:	f001 ff47 	bl	800c058 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d302      	bcc.n	800a1dc <xQueueGenericSend+0xdc>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d129      	bne.n	800a230 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	68b9      	ldr	r1, [r7, #8]
 800a1e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a1e2:	f000 fa0f 	bl	800a604 <prvCopyDataToQueue>
 800a1e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d010      	beq.n	800a212 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f2:	3324      	adds	r3, #36	@ 0x24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 ffdd 	bl	800b1b4 <xTaskRemoveFromEventList>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d013      	beq.n	800a228 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a200:	4b3f      	ldr	r3, [pc, #252]	@ (800a300 <xQueueGenericSend+0x200>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	e00a      	b.n	800a228 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a218:	4b39      	ldr	r3, [pc, #228]	@ (800a300 <xQueueGenericSend+0x200>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a228:	f001 ff48 	bl	800c0bc <vPortExitCritical>
				return pdPASS;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e063      	b.n	800a2f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d103      	bne.n	800a23e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a236:	f001 ff41 	bl	800c0bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e05c      	b.n	800a2f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a244:	f107 0314 	add.w	r3, r7, #20
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 f83f 	bl	800b2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a24e:	2301      	movs	r3, #1
 800a250:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a252:	f001 ff33 	bl	800c0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a256:	f000 fd87 	bl	800ad68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a25a:	f001 fefd 	bl	800c058 <vPortEnterCritical>
 800a25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a264:	b25b      	sxtb	r3, r3
 800a266:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a26a:	d103      	bne.n	800a274 <xQueueGenericSend+0x174>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a27a:	b25b      	sxtb	r3, r3
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a280:	d103      	bne.n	800a28a <xQueueGenericSend+0x18a>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a28a:	f001 ff17 	bl	800c0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a28e:	1d3a      	adds	r2, r7, #4
 800a290:	f107 0314 	add.w	r3, r7, #20
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f001 f82e 	bl	800b2f8 <xTaskCheckForTimeOut>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d124      	bne.n	800a2ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2a4:	f000 faa6 	bl	800a7f4 <prvIsQueueFull>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d018      	beq.n	800a2e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 ff2a 	bl	800b110 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2be:	f000 fa31 	bl	800a724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2c2:	f000 fd5f 	bl	800ad84 <xTaskResumeAll>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f47f af7c 	bne.w	800a1c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a300 <xQueueGenericSend+0x200>)
 800a2d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	e772      	b.n	800a1c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2e2:	f000 fa1f 	bl	800a724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2e6:	f000 fd4d 	bl	800ad84 <xTaskResumeAll>
 800a2ea:	e76c      	b.n	800a1c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2ee:	f000 fa19 	bl	800a724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2f2:	f000 fd47 	bl	800ad84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3738      	adds	r7, #56	@ 0x38
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	e000ed04 	.word	0xe000ed04

0800a304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b090      	sub	sp, #64	@ 0x40
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10b      	bne.n	800a334 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a32e:	bf00      	nop
 800a330:	bf00      	nop
 800a332:	e7fd      	b.n	800a330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d103      	bne.n	800a342 <xQueueGenericSendFromISR+0x3e>
 800a33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <xQueueGenericSendFromISR+0x42>
 800a342:	2301      	movs	r3, #1
 800a344:	e000      	b.n	800a348 <xQueueGenericSendFromISR+0x44>
 800a346:	2300      	movs	r3, #0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d10b      	bne.n	800a364 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a34c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a350:	f383 8811 	msr	BASEPRI, r3
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a35e:	bf00      	nop
 800a360:	bf00      	nop
 800a362:	e7fd      	b.n	800a360 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2b02      	cmp	r3, #2
 800a368:	d103      	bne.n	800a372 <xQueueGenericSendFromISR+0x6e>
 800a36a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d101      	bne.n	800a376 <xQueueGenericSendFromISR+0x72>
 800a372:	2301      	movs	r3, #1
 800a374:	e000      	b.n	800a378 <xQueueGenericSendFromISR+0x74>
 800a376:	2300      	movs	r3, #0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d10b      	bne.n	800a394 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a380:	f383 8811 	msr	BASEPRI, r3
 800a384:	f3bf 8f6f 	isb	sy
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	623b      	str	r3, [r7, #32]
}
 800a38e:	bf00      	nop
 800a390:	bf00      	nop
 800a392:	e7fd      	b.n	800a390 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a394:	f001 ff40 	bl	800c218 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a398:	f3ef 8211 	mrs	r2, BASEPRI
 800a39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	61fa      	str	r2, [r7, #28]
 800a3ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d302      	bcc.n	800a3c6 <xQueueGenericSendFromISR+0xc2>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d12f      	bne.n	800a426 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	68b9      	ldr	r1, [r7, #8]
 800a3da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3dc:	f000 f912 	bl	800a604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3e8:	d112      	bne.n	800a410 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d016      	beq.n	800a420 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	3324      	adds	r3, #36	@ 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f000 fedc 	bl	800b1b4 <xTaskRemoveFromEventList>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00e      	beq.n	800a420 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00b      	beq.n	800a420 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	e007      	b.n	800a420 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a414:	3301      	adds	r3, #1
 800a416:	b2db      	uxtb	r3, r3
 800a418:	b25a      	sxtb	r2, r3
 800a41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a420:	2301      	movs	r3, #1
 800a422:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a424:	e001      	b.n	800a42a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a426:	2300      	movs	r3, #0
 800a428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a42a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a42c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3740      	adds	r7, #64	@ 0x40
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08c      	sub	sp, #48	@ 0x30
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a44c:	2300      	movs	r3, #0
 800a44e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <xQueueReceive+0x32>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	623b      	str	r3, [r7, #32]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <xQueueReceive+0x40>
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d101      	bne.n	800a484 <xQueueReceive+0x44>
 800a480:	2301      	movs	r3, #1
 800a482:	e000      	b.n	800a486 <xQueueReceive+0x46>
 800a484:	2300      	movs	r3, #0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10b      	bne.n	800a4a2 <xQueueReceive+0x62>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61fb      	str	r3, [r7, #28]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4a2:	f001 f86f 	bl	800b584 <xTaskGetSchedulerState>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d102      	bne.n	800a4b2 <xQueueReceive+0x72>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <xQueueReceive+0x76>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e000      	b.n	800a4b8 <xQueueReceive+0x78>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10b      	bne.n	800a4d4 <xQueueReceive+0x94>
	__asm volatile
 800a4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c0:	f383 8811 	msr	BASEPRI, r3
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	f3bf 8f4f 	dsb	sy
 800a4cc:	61bb      	str	r3, [r7, #24]
}
 800a4ce:	bf00      	nop
 800a4d0:	bf00      	nop
 800a4d2:	e7fd      	b.n	800a4d0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4d4:	f001 fdc0 	bl	800c058 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d01f      	beq.n	800a524 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4e8:	f000 f8f6 	bl	800a6d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	1e5a      	subs	r2, r3, #1
 800a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00f      	beq.n	800a51c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	3310      	adds	r3, #16
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fe57 	bl	800b1b4 <xTaskRemoveFromEventList>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a50c:	4b3c      	ldr	r3, [pc, #240]	@ (800a600 <xQueueReceive+0x1c0>)
 800a50e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	f3bf 8f4f 	dsb	sy
 800a518:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a51c:	f001 fdce 	bl	800c0bc <vPortExitCritical>
				return pdPASS;
 800a520:	2301      	movs	r3, #1
 800a522:	e069      	b.n	800a5f8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d103      	bne.n	800a532 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a52a:	f001 fdc7 	bl	800c0bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a52e:	2300      	movs	r3, #0
 800a530:	e062      	b.n	800a5f8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a538:	f107 0310 	add.w	r3, r7, #16
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fec5 	bl	800b2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a542:	2301      	movs	r3, #1
 800a544:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a546:	f001 fdb9 	bl	800c0bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a54a:	f000 fc0d 	bl	800ad68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a54e:	f001 fd83 	bl	800c058 <vPortEnterCritical>
 800a552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a55e:	d103      	bne.n	800a568 <xQueueReceive+0x128>
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a56a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a56e:	b25b      	sxtb	r3, r3
 800a570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a574:	d103      	bne.n	800a57e <xQueueReceive+0x13e>
 800a576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a57e:	f001 fd9d 	bl	800c0bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a582:	1d3a      	adds	r2, r7, #4
 800a584:	f107 0310 	add.w	r3, r7, #16
 800a588:	4611      	mov	r1, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 feb4 	bl	800b2f8 <xTaskCheckForTimeOut>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d123      	bne.n	800a5de <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a598:	f000 f916 	bl	800a7c8 <prvIsQueueEmpty>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d017      	beq.n	800a5d2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a4:	3324      	adds	r3, #36	@ 0x24
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fdb0 	bl	800b110 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5b2:	f000 f8b7 	bl	800a724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5b6:	f000 fbe5 	bl	800ad84 <xTaskResumeAll>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d189      	bne.n	800a4d4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a600 <xQueueReceive+0x1c0>)
 800a5c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	e780      	b.n	800a4d4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5d4:	f000 f8a6 	bl	800a724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5d8:	f000 fbd4 	bl	800ad84 <xTaskResumeAll>
 800a5dc:	e77a      	b.n	800a4d4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e0:	f000 f8a0 	bl	800a724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5e4:	f000 fbce 	bl	800ad84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5ea:	f000 f8ed 	bl	800a7c8 <prvIsQueueEmpty>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f43f af6f 	beq.w	800a4d4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3730      	adds	r7, #48	@ 0x30
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a610:	2300      	movs	r3, #0
 800a612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10d      	bne.n	800a63e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d14d      	bne.n	800a6c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 ffc6 	bl	800b5c0 <xTaskPriorityDisinherit>
 800a634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	609a      	str	r2, [r3, #8]
 800a63c:	e043      	b.n	800a6c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d119      	bne.n	800a678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6858      	ldr	r0, [r3, #4]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a64c:	461a      	mov	r2, r3
 800a64e:	68b9      	ldr	r1, [r7, #8]
 800a650:	f012 f815 	bl	801c67e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65c:	441a      	add	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d32b      	bcc.n	800a6c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	605a      	str	r2, [r3, #4]
 800a676:	e026      	b.n	800a6c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	68d8      	ldr	r0, [r3, #12]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a680:	461a      	mov	r2, r3
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	f011 fffb 	bl	801c67e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a690:	425b      	negs	r3, r3
 800a692:	441a      	add	r2, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d207      	bcs.n	800a6b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ac:	425b      	negs	r3, r3
 800a6ae:	441a      	add	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d105      	bne.n	800a6c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3b01      	subs	r3, #1
 800a6c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a6ce:	697b      	ldr	r3, [r7, #20]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d018      	beq.n	800a71c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68da      	ldr	r2, [r3, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f2:	441a      	add	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	429a      	cmp	r2, r3
 800a702:	d303      	bcc.n	800a70c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68d9      	ldr	r1, [r3, #12]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a714:	461a      	mov	r2, r3
 800a716:	6838      	ldr	r0, [r7, #0]
 800a718:	f011 ffb1 	bl	801c67e <memcpy>
	}
}
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a72c:	f001 fc94 	bl	800c058 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a738:	e011      	b.n	800a75e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d012      	beq.n	800a768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3324      	adds	r3, #36	@ 0x24
 800a746:	4618      	mov	r0, r3
 800a748:	f000 fd34 	bl	800b1b4 <xTaskRemoveFromEventList>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a752:	f000 fe35 	bl	800b3c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a756:	7bfb      	ldrb	r3, [r7, #15]
 800a758:	3b01      	subs	r3, #1
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a762:	2b00      	cmp	r3, #0
 800a764:	dce9      	bgt.n	800a73a <prvUnlockQueue+0x16>
 800a766:	e000      	b.n	800a76a <prvUnlockQueue+0x46>
					break;
 800a768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	22ff      	movs	r2, #255	@ 0xff
 800a76e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a772:	f001 fca3 	bl	800c0bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a776:	f001 fc6f 	bl	800c058 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a782:	e011      	b.n	800a7a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d012      	beq.n	800a7b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3310      	adds	r3, #16
 800a790:	4618      	mov	r0, r3
 800a792:	f000 fd0f 	bl	800b1b4 <xTaskRemoveFromEventList>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a79c:	f000 fe10 	bl	800b3c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a7a0:	7bbb      	ldrb	r3, [r7, #14]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	dce9      	bgt.n	800a784 <prvUnlockQueue+0x60>
 800a7b0:	e000      	b.n	800a7b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	22ff      	movs	r2, #255	@ 0xff
 800a7b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a7bc:	f001 fc7e 	bl	800c0bc <vPortExitCritical>
}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7d0:	f001 fc42 	bl	800c058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	60fb      	str	r3, [r7, #12]
 800a7e0:	e001      	b.n	800a7e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7e6:	f001 fc69 	bl	800c0bc <vPortExitCritical>

	return xReturn;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7fc:	f001 fc2c 	bl	800c058 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a808:	429a      	cmp	r2, r3
 800a80a:	d102      	bne.n	800a812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a80c:	2301      	movs	r3, #1
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	e001      	b.n	800a816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a812:	2300      	movs	r3, #0
 800a814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a816:	f001 fc51 	bl	800c0bc <vPortExitCritical>

	return xReturn;
 800a81a:	68fb      	ldr	r3, [r7, #12]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a82e:	2300      	movs	r3, #0
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	e014      	b.n	800a85e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a834:	4a0f      	ldr	r2, [pc, #60]	@ (800a874 <vQueueAddToRegistry+0x50>)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10b      	bne.n	800a858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a840:	490c      	ldr	r1, [pc, #48]	@ (800a874 <vQueueAddToRegistry+0x50>)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a84a:	4a0a      	ldr	r2, [pc, #40]	@ (800a874 <vQueueAddToRegistry+0x50>)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	4413      	add	r3, r2
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a856:	e006      	b.n	800a866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3301      	adds	r3, #1
 800a85c:	60fb      	str	r3, [r7, #12]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2b07      	cmp	r3, #7
 800a862:	d9e7      	bls.n	800a834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20008d64 	.word	0x20008d64

0800a878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	60b9      	str	r1, [r7, #8]
 800a882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a888:	f001 fbe6 	bl	800c058 <vPortEnterCritical>
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a892:	b25b      	sxtb	r3, r3
 800a894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a898:	d103      	bne.n	800a8a2 <vQueueWaitForMessageRestricted+0x2a>
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8a8:	b25b      	sxtb	r3, r3
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8ae:	d103      	bne.n	800a8b8 <vQueueWaitForMessageRestricted+0x40>
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8b8:	f001 fc00 	bl	800c0bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d106      	bne.n	800a8d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	3324      	adds	r3, #36	@ 0x24
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	68b9      	ldr	r1, [r7, #8]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fc45 	bl	800b15c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8d2:	6978      	ldr	r0, [r7, #20]
 800a8d4:	f7ff ff26 	bl	800a724 <prvUnlockQueue>
	}
 800a8d8:	bf00      	nop
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08e      	sub	sp, #56	@ 0x38
 800a8e4:	af04      	add	r7, sp, #16
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10b      	bne.n	800a90c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	623b      	str	r3, [r7, #32]
}
 800a906:	bf00      	nop
 800a908:	bf00      	nop
 800a90a:	e7fd      	b.n	800a908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10b      	bne.n	800a92a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	61fb      	str	r3, [r7, #28]
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop
 800a928:	e7fd      	b.n	800a926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a92a:	235c      	movs	r3, #92	@ 0x5c
 800a92c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	2b5c      	cmp	r3, #92	@ 0x5c
 800a932:	d00b      	beq.n	800a94c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	61bb      	str	r3, [r7, #24]
}
 800a946:	bf00      	nop
 800a948:	bf00      	nop
 800a94a:	e7fd      	b.n	800a948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a94c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	2b00      	cmp	r3, #0
 800a952:	d01e      	beq.n	800a992 <xTaskCreateStatic+0xb2>
 800a954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a956:	2b00      	cmp	r3, #0
 800a958:	d01b      	beq.n	800a992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	2202      	movs	r2, #2
 800a968:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a96c:	2300      	movs	r3, #0
 800a96e:	9303      	str	r3, [sp, #12]
 800a970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a972:	9302      	str	r3, [sp, #8]
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	9301      	str	r3, [sp, #4]
 800a97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 f850 	bl	800aa2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a98a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a98c:	f000 f8de 	bl	800ab4c <prvAddNewTaskToReadyList>
 800a990:	e001      	b.n	800a996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a992:	2300      	movs	r3, #0
 800a994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a996:	697b      	ldr	r3, [r7, #20]
	}
 800a998:	4618      	mov	r0, r3
 800a99a:	3728      	adds	r7, #40	@ 0x28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b08c      	sub	sp, #48	@ 0x30
 800a9a4:	af04      	add	r7, sp, #16
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	603b      	str	r3, [r7, #0]
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f001 fc71 	bl	800c29c <pvPortMalloc>
 800a9ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00e      	beq.n	800a9e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9c2:	205c      	movs	r0, #92	@ 0x5c
 800a9c4:	f001 fc6a 	bl	800c29c <pvPortMalloc>
 800a9c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	631a      	str	r2, [r3, #48]	@ 0x30
 800a9d6:	e005      	b.n	800a9e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9d8:	6978      	ldr	r0, [r7, #20]
 800a9da:	f001 fd2d 	bl	800c438 <vPortFree>
 800a9de:	e001      	b.n	800a9e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d017      	beq.n	800aa1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9f2:	88fa      	ldrh	r2, [r7, #6]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9303      	str	r3, [sp, #12]
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	9302      	str	r3, [sp, #8]
 800a9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa02:	9300      	str	r3, [sp, #0]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f80e 	bl	800aa2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa0e:	69f8      	ldr	r0, [r7, #28]
 800aa10:	f000 f89c 	bl	800ab4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa14:	2301      	movs	r3, #1
 800aa16:	61bb      	str	r3, [r7, #24]
 800aa18:	e002      	b.n	800aa20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa20:	69bb      	ldr	r3, [r7, #24]
	}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3720      	adds	r7, #32
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b088      	sub	sp, #32
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	60f8      	str	r0, [r7, #12]
 800aa32:	60b9      	str	r1, [r7, #8]
 800aa34:	607a      	str	r2, [r7, #4]
 800aa36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	461a      	mov	r2, r3
 800aa42:	21a5      	movs	r1, #165	@ 0xa5
 800aa44:	f011 fd52 	bl	801c4ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aa52:	3b01      	subs	r3, #1
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	f023 0307 	bic.w	r3, r3, #7
 800aa60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	f003 0307 	and.w	r3, r3, #7
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00b      	beq.n	800aa84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	617b      	str	r3, [r7, #20]
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01f      	beq.n	800aaca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]
 800aa8e:	e012      	b.n	800aab6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	4413      	add	r3, r2
 800aa96:	7819      	ldrb	r1, [r3, #0]
 800aa98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	3334      	adds	r3, #52	@ 0x34
 800aaa0:	460a      	mov	r2, r1
 800aaa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaa4:	68ba      	ldr	r2, [r7, #8]
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d006      	beq.n	800aabe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	3301      	adds	r3, #1
 800aab4:	61fb      	str	r3, [r7, #28]
 800aab6:	69fb      	ldr	r3, [r7, #28]
 800aab8:	2b0f      	cmp	r3, #15
 800aaba:	d9e9      	bls.n	800aa90 <prvInitialiseNewTask+0x66>
 800aabc:	e000      	b.n	800aac0 <prvInitialiseNewTask+0x96>
			{
				break;
 800aabe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aac8:	e003      	b.n	800aad2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aaca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad4:	2b37      	cmp	r3, #55	@ 0x37
 800aad6:	d901      	bls.n	800aadc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aad8:	2337      	movs	r3, #55	@ 0x37
 800aada:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aae0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aae6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaea:	2200      	movs	r2, #0
 800aaec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff f966 	bl	8009dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	3318      	adds	r3, #24
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7ff f961 	bl	8009dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab26:	683a      	ldr	r2, [r7, #0]
 800ab28:	68f9      	ldr	r1, [r7, #12]
 800ab2a:	69b8      	ldr	r0, [r7, #24]
 800ab2c:	f001 f966 	bl	800bdfc <pxPortInitialiseStack>
 800ab30:	4602      	mov	r2, r0
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab42:	bf00      	nop
 800ab44:	3720      	adds	r7, #32
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab54:	f001 fa80 	bl	800c058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab58:	4b2d      	ldr	r3, [pc, #180]	@ (800ac10 <prvAddNewTaskToReadyList+0xc4>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	4a2c      	ldr	r2, [pc, #176]	@ (800ac10 <prvAddNewTaskToReadyList+0xc4>)
 800ab60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab62:	4b2c      	ldr	r3, [pc, #176]	@ (800ac14 <prvAddNewTaskToReadyList+0xc8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab6a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac14 <prvAddNewTaskToReadyList+0xc8>)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab70:	4b27      	ldr	r3, [pc, #156]	@ (800ac10 <prvAddNewTaskToReadyList+0xc4>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d110      	bne.n	800ab9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab78:	f000 fc46 	bl	800b408 <prvInitialiseTaskLists>
 800ab7c:	e00d      	b.n	800ab9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab7e:	4b26      	ldr	r3, [pc, #152]	@ (800ac18 <prvAddNewTaskToReadyList+0xcc>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d109      	bne.n	800ab9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab86:	4b23      	ldr	r3, [pc, #140]	@ (800ac14 <prvAddNewTaskToReadyList+0xc8>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d802      	bhi.n	800ab9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab94:	4a1f      	ldr	r2, [pc, #124]	@ (800ac14 <prvAddNewTaskToReadyList+0xc8>)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab9a:	4b20      	ldr	r3, [pc, #128]	@ (800ac1c <prvAddNewTaskToReadyList+0xd0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	4a1e      	ldr	r2, [pc, #120]	@ (800ac1c <prvAddNewTaskToReadyList+0xd0>)
 800aba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aba4:	4b1d      	ldr	r3, [pc, #116]	@ (800ac1c <prvAddNewTaskToReadyList+0xd0>)
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abb0:	4b1b      	ldr	r3, [pc, #108]	@ (800ac20 <prvAddNewTaskToReadyList+0xd4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d903      	bls.n	800abc0 <prvAddNewTaskToReadyList+0x74>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abbc:	4a18      	ldr	r2, [pc, #96]	@ (800ac20 <prvAddNewTaskToReadyList+0xd4>)
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abc4:	4613      	mov	r3, r2
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	4413      	add	r3, r2
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	4a15      	ldr	r2, [pc, #84]	@ (800ac24 <prvAddNewTaskToReadyList+0xd8>)
 800abce:	441a      	add	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	3304      	adds	r3, #4
 800abd4:	4619      	mov	r1, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	f7ff f901 	bl	8009dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abdc:	f001 fa6e 	bl	800c0bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abe0:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <prvAddNewTaskToReadyList+0xcc>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00e      	beq.n	800ac06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ac14 <prvAddNewTaskToReadyList+0xc8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d207      	bcs.n	800ac06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac28 <prvAddNewTaskToReadyList+0xdc>)
 800abf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20009278 	.word	0x20009278
 800ac14:	20008da4 	.word	0x20008da4
 800ac18:	20009284 	.word	0x20009284
 800ac1c:	20009294 	.word	0x20009294
 800ac20:	20009280 	.word	0x20009280
 800ac24:	20008da8 	.word	0x20008da8
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d018      	beq.n	800ac70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac3e:	4b14      	ldr	r3, [pc, #80]	@ (800ac90 <vTaskDelay+0x64>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00b      	beq.n	800ac5e <vTaskDelay+0x32>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	60bb      	str	r3, [r7, #8]
}
 800ac58:	bf00      	nop
 800ac5a:	bf00      	nop
 800ac5c:	e7fd      	b.n	800ac5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac5e:	f000 f883 	bl	800ad68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac62:	2100      	movs	r1, #0
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fd1b 	bl	800b6a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac6a:	f000 f88b 	bl	800ad84 <xTaskResumeAll>
 800ac6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d107      	bne.n	800ac86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ac76:	4b07      	ldr	r3, [pc, #28]	@ (800ac94 <vTaskDelay+0x68>)
 800ac78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	200092a0 	.word	0x200092a0
 800ac94:	e000ed04 	.word	0xe000ed04

0800ac98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08a      	sub	sp, #40	@ 0x28
 800ac9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aca2:	2300      	movs	r3, #0
 800aca4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aca6:	463a      	mov	r2, r7
 800aca8:	1d39      	adds	r1, r7, #4
 800acaa:	f107 0308 	add.w	r3, r7, #8
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff f834 	bl	8009d1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800acb4:	6839      	ldr	r1, [r7, #0]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	9202      	str	r2, [sp, #8]
 800acbc:	9301      	str	r3, [sp, #4]
 800acbe:	2300      	movs	r3, #0
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	2300      	movs	r3, #0
 800acc4:	460a      	mov	r2, r1
 800acc6:	4922      	ldr	r1, [pc, #136]	@ (800ad50 <vTaskStartScheduler+0xb8>)
 800acc8:	4822      	ldr	r0, [pc, #136]	@ (800ad54 <vTaskStartScheduler+0xbc>)
 800acca:	f7ff fe09 	bl	800a8e0 <xTaskCreateStatic>
 800acce:	4603      	mov	r3, r0
 800acd0:	4a21      	ldr	r2, [pc, #132]	@ (800ad58 <vTaskStartScheduler+0xc0>)
 800acd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800acd4:	4b20      	ldr	r3, [pc, #128]	@ (800ad58 <vTaskStartScheduler+0xc0>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800acdc:	2301      	movs	r3, #1
 800acde:	617b      	str	r3, [r7, #20]
 800ace0:	e001      	b.n	800ace6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d102      	bne.n	800acf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acec:	f000 fd2c 	bl	800b748 <xTimerCreateTimerTask>
 800acf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d116      	bne.n	800ad26 <vTaskStartScheduler+0x8e>
	__asm volatile
 800acf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acfc:	f383 8811 	msr	BASEPRI, r3
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	f3bf 8f4f 	dsb	sy
 800ad08:	613b      	str	r3, [r7, #16]
}
 800ad0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad0c:	4b13      	ldr	r3, [pc, #76]	@ (800ad5c <vTaskStartScheduler+0xc4>)
 800ad0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad14:	4b12      	ldr	r3, [pc, #72]	@ (800ad60 <vTaskStartScheduler+0xc8>)
 800ad16:	2201      	movs	r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad1a:	4b12      	ldr	r3, [pc, #72]	@ (800ad64 <vTaskStartScheduler+0xcc>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad20:	f001 f8f6 	bl	800bf10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad24:	e00f      	b.n	800ad46 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad2c:	d10b      	bne.n	800ad46 <vTaskStartScheduler+0xae>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	60fb      	str	r3, [r7, #12]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <vTaskStartScheduler+0xaa>
}
 800ad46:	bf00      	nop
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	0801d39c 	.word	0x0801d39c
 800ad54:	0800b3d9 	.word	0x0800b3d9
 800ad58:	2000929c 	.word	0x2000929c
 800ad5c:	20009298 	.word	0x20009298
 800ad60:	20009284 	.word	0x20009284
 800ad64:	2000927c 	.word	0x2000927c

0800ad68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad6c:	4b04      	ldr	r3, [pc, #16]	@ (800ad80 <vTaskSuspendAll+0x18>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3301      	adds	r3, #1
 800ad72:	4a03      	ldr	r2, [pc, #12]	@ (800ad80 <vTaskSuspendAll+0x18>)
 800ad74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad76:	bf00      	nop
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	200092a0 	.word	0x200092a0

0800ad84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad92:	4b42      	ldr	r3, [pc, #264]	@ (800ae9c <xTaskResumeAll+0x118>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <xTaskResumeAll+0x2e>
	__asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	603b      	str	r3, [r7, #0]
}
 800adac:	bf00      	nop
 800adae:	bf00      	nop
 800adb0:	e7fd      	b.n	800adae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800adb2:	f001 f951 	bl	800c058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800adb6:	4b39      	ldr	r3, [pc, #228]	@ (800ae9c <xTaskResumeAll+0x118>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3b01      	subs	r3, #1
 800adbc:	4a37      	ldr	r2, [pc, #220]	@ (800ae9c <xTaskResumeAll+0x118>)
 800adbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc0:	4b36      	ldr	r3, [pc, #216]	@ (800ae9c <xTaskResumeAll+0x118>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d162      	bne.n	800ae8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800adc8:	4b35      	ldr	r3, [pc, #212]	@ (800aea0 <xTaskResumeAll+0x11c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d05e      	beq.n	800ae8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800add0:	e02f      	b.n	800ae32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800add2:	4b34      	ldr	r3, [pc, #208]	@ (800aea4 <xTaskResumeAll+0x120>)
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3318      	adds	r3, #24
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff f85a 	bl	8009e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	3304      	adds	r3, #4
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff f855 	bl	8009e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf2:	4b2d      	ldr	r3, [pc, #180]	@ (800aea8 <xTaskResumeAll+0x124>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d903      	bls.n	800ae02 <xTaskResumeAll+0x7e>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfe:	4a2a      	ldr	r2, [pc, #168]	@ (800aea8 <xTaskResumeAll+0x124>)
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4a27      	ldr	r2, [pc, #156]	@ (800aeac <xTaskResumeAll+0x128>)
 800ae10:	441a      	add	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3304      	adds	r3, #4
 800ae16:	4619      	mov	r1, r3
 800ae18:	4610      	mov	r0, r2
 800ae1a:	f7fe ffe0 	bl	8009dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae22:	4b23      	ldr	r3, [pc, #140]	@ (800aeb0 <xTaskResumeAll+0x12c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d302      	bcc.n	800ae32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ae2c:	4b21      	ldr	r3, [pc, #132]	@ (800aeb4 <xTaskResumeAll+0x130>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae32:	4b1c      	ldr	r3, [pc, #112]	@ (800aea4 <xTaskResumeAll+0x120>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1cb      	bne.n	800add2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae40:	f000 fb80 	bl	800b544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae44:	4b1c      	ldr	r3, [pc, #112]	@ (800aeb8 <xTaskResumeAll+0x134>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d010      	beq.n	800ae72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae50:	f000 f846 	bl	800aee0 <xTaskIncrementTick>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ae5a:	4b16      	ldr	r3, [pc, #88]	@ (800aeb4 <xTaskResumeAll+0x130>)
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1f1      	bne.n	800ae50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ae6c:	4b12      	ldr	r3, [pc, #72]	@ (800aeb8 <xTaskResumeAll+0x134>)
 800ae6e:	2200      	movs	r2, #0
 800ae70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae72:	4b10      	ldr	r3, [pc, #64]	@ (800aeb4 <xTaskResumeAll+0x130>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d009      	beq.n	800ae8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae7e:	4b0f      	ldr	r3, [pc, #60]	@ (800aebc <xTaskResumeAll+0x138>)
 800ae80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae84:	601a      	str	r2, [r3, #0]
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae8e:	f001 f915 	bl	800c0bc <vPortExitCritical>

	return xAlreadyYielded;
 800ae92:	68bb      	ldr	r3, [r7, #8]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	200092a0 	.word	0x200092a0
 800aea0:	20009278 	.word	0x20009278
 800aea4:	20009238 	.word	0x20009238
 800aea8:	20009280 	.word	0x20009280
 800aeac:	20008da8 	.word	0x20008da8
 800aeb0:	20008da4 	.word	0x20008da4
 800aeb4:	2000928c 	.word	0x2000928c
 800aeb8:	20009288 	.word	0x20009288
 800aebc:	e000ed04 	.word	0xe000ed04

0800aec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aec6:	4b05      	ldr	r3, [pc, #20]	@ (800aedc <xTaskGetTickCount+0x1c>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aecc:	687b      	ldr	r3, [r7, #4]
}
 800aece:	4618      	mov	r0, r3
 800aed0:	370c      	adds	r7, #12
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	2000927c 	.word	0x2000927c

0800aee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aee6:	2300      	movs	r3, #0
 800aee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeea:	4b4f      	ldr	r3, [pc, #316]	@ (800b028 <xTaskIncrementTick+0x148>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 8090 	bne.w	800b014 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aef4:	4b4d      	ldr	r3, [pc, #308]	@ (800b02c <xTaskIncrementTick+0x14c>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aefc:	4a4b      	ldr	r2, [pc, #300]	@ (800b02c <xTaskIncrementTick+0x14c>)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d121      	bne.n	800af4c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800af08:	4b49      	ldr	r3, [pc, #292]	@ (800b030 <xTaskIncrementTick+0x150>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00b      	beq.n	800af2a <xTaskIncrementTick+0x4a>
	__asm volatile
 800af12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	603b      	str	r3, [r7, #0]
}
 800af24:	bf00      	nop
 800af26:	bf00      	nop
 800af28:	e7fd      	b.n	800af26 <xTaskIncrementTick+0x46>
 800af2a:	4b41      	ldr	r3, [pc, #260]	@ (800b030 <xTaskIncrementTick+0x150>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	60fb      	str	r3, [r7, #12]
 800af30:	4b40      	ldr	r3, [pc, #256]	@ (800b034 <xTaskIncrementTick+0x154>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a3e      	ldr	r2, [pc, #248]	@ (800b030 <xTaskIncrementTick+0x150>)
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	4a3e      	ldr	r2, [pc, #248]	@ (800b034 <xTaskIncrementTick+0x154>)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	4b3e      	ldr	r3, [pc, #248]	@ (800b038 <xTaskIncrementTick+0x158>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3301      	adds	r3, #1
 800af44:	4a3c      	ldr	r2, [pc, #240]	@ (800b038 <xTaskIncrementTick+0x158>)
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	f000 fafc 	bl	800b544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af4c:	4b3b      	ldr	r3, [pc, #236]	@ (800b03c <xTaskIncrementTick+0x15c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	429a      	cmp	r2, r3
 800af54:	d349      	bcc.n	800afea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af56:	4b36      	ldr	r3, [pc, #216]	@ (800b030 <xTaskIncrementTick+0x150>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d104      	bne.n	800af6a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af60:	4b36      	ldr	r3, [pc, #216]	@ (800b03c <xTaskIncrementTick+0x15c>)
 800af62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af66:	601a      	str	r2, [r3, #0]
					break;
 800af68:	e03f      	b.n	800afea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af6a:	4b31      	ldr	r3, [pc, #196]	@ (800b030 <xTaskIncrementTick+0x150>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d203      	bcs.n	800af8a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af82:	4a2e      	ldr	r2, [pc, #184]	@ (800b03c <xTaskIncrementTick+0x15c>)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af88:	e02f      	b.n	800afea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	3304      	adds	r3, #4
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe ff82 	bl	8009e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	3318      	adds	r3, #24
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe ff79 	bl	8009e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afaa:	4b25      	ldr	r3, [pc, #148]	@ (800b040 <xTaskIncrementTick+0x160>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d903      	bls.n	800afba <xTaskIncrementTick+0xda>
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb6:	4a22      	ldr	r2, [pc, #136]	@ (800b040 <xTaskIncrementTick+0x160>)
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	4a1f      	ldr	r2, [pc, #124]	@ (800b044 <xTaskIncrementTick+0x164>)
 800afc8:	441a      	add	r2, r3
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	3304      	adds	r3, #4
 800afce:	4619      	mov	r1, r3
 800afd0:	4610      	mov	r0, r2
 800afd2:	f7fe ff04 	bl	8009dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afda:	4b1b      	ldr	r3, [pc, #108]	@ (800b048 <xTaskIncrementTick+0x168>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d3b8      	bcc.n	800af56 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800afe4:	2301      	movs	r3, #1
 800afe6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afe8:	e7b5      	b.n	800af56 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afea:	4b17      	ldr	r3, [pc, #92]	@ (800b048 <xTaskIncrementTick+0x168>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff0:	4914      	ldr	r1, [pc, #80]	@ (800b044 <xTaskIncrementTick+0x164>)
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d901      	bls.n	800b006 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b002:	2301      	movs	r3, #1
 800b004:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b006:	4b11      	ldr	r3, [pc, #68]	@ (800b04c <xTaskIncrementTick+0x16c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b00e:	2301      	movs	r3, #1
 800b010:	617b      	str	r3, [r7, #20]
 800b012:	e004      	b.n	800b01e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b014:	4b0e      	ldr	r3, [pc, #56]	@ (800b050 <xTaskIncrementTick+0x170>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	4a0d      	ldr	r2, [pc, #52]	@ (800b050 <xTaskIncrementTick+0x170>)
 800b01c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b01e:	697b      	ldr	r3, [r7, #20]
}
 800b020:	4618      	mov	r0, r3
 800b022:	3718      	adds	r7, #24
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	200092a0 	.word	0x200092a0
 800b02c:	2000927c 	.word	0x2000927c
 800b030:	20009230 	.word	0x20009230
 800b034:	20009234 	.word	0x20009234
 800b038:	20009290 	.word	0x20009290
 800b03c:	20009298 	.word	0x20009298
 800b040:	20009280 	.word	0x20009280
 800b044:	20008da8 	.word	0x20008da8
 800b048:	20008da4 	.word	0x20008da4
 800b04c:	2000928c 	.word	0x2000928c
 800b050:	20009288 	.word	0x20009288

0800b054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b05a:	4b28      	ldr	r3, [pc, #160]	@ (800b0fc <vTaskSwitchContext+0xa8>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d003      	beq.n	800b06a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b062:	4b27      	ldr	r3, [pc, #156]	@ (800b100 <vTaskSwitchContext+0xac>)
 800b064:	2201      	movs	r2, #1
 800b066:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b068:	e042      	b.n	800b0f0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b06a:	4b25      	ldr	r3, [pc, #148]	@ (800b100 <vTaskSwitchContext+0xac>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b070:	4b24      	ldr	r3, [pc, #144]	@ (800b104 <vTaskSwitchContext+0xb0>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	e011      	b.n	800b09c <vTaskSwitchContext+0x48>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10b      	bne.n	800b096 <vTaskSwitchContext+0x42>
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	607b      	str	r3, [r7, #4]
}
 800b090:	bf00      	nop
 800b092:	bf00      	nop
 800b094:	e7fd      	b.n	800b092 <vTaskSwitchContext+0x3e>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3b01      	subs	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	491a      	ldr	r1, [pc, #104]	@ (800b108 <vTaskSwitchContext+0xb4>)
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	440b      	add	r3, r1
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0e3      	beq.n	800b078 <vTaskSwitchContext+0x24>
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	4a13      	ldr	r2, [pc, #76]	@ (800b108 <vTaskSwitchContext+0xb4>)
 800b0bc:	4413      	add	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	685a      	ldr	r2, [r3, #4]
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	605a      	str	r2, [r3, #4]
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d104      	bne.n	800b0e0 <vTaskSwitchContext+0x8c>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	605a      	str	r2, [r3, #4]
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	4a09      	ldr	r2, [pc, #36]	@ (800b10c <vTaskSwitchContext+0xb8>)
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	4a06      	ldr	r2, [pc, #24]	@ (800b104 <vTaskSwitchContext+0xb0>)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6013      	str	r3, [r2, #0]
}
 800b0f0:	bf00      	nop
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	200092a0 	.word	0x200092a0
 800b100:	2000928c 	.word	0x2000928c
 800b104:	20009280 	.word	0x20009280
 800b108:	20008da8 	.word	0x20008da8
 800b10c:	20008da4 	.word	0x20008da4

0800b110 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10b      	bne.n	800b138 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	bf00      	nop
 800b136:	e7fd      	b.n	800b134 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b138:	4b07      	ldr	r3, [pc, #28]	@ (800b158 <vTaskPlaceOnEventList+0x48>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3318      	adds	r3, #24
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7fe fe70 	bl	8009e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b146:	2101      	movs	r1, #1
 800b148:	6838      	ldr	r0, [r7, #0]
 800b14a:	f000 faa9 	bl	800b6a0 <prvAddCurrentTaskToDelayedList>
}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20008da4 	.word	0x20008da4

0800b15c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10b      	bne.n	800b186 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b172:	f383 8811 	msr	BASEPRI, r3
 800b176:	f3bf 8f6f 	isb	sy
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	617b      	str	r3, [r7, #20]
}
 800b180:	bf00      	nop
 800b182:	bf00      	nop
 800b184:	e7fd      	b.n	800b182 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b186:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3318      	adds	r3, #24
 800b18c:	4619      	mov	r1, r3
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7fe fe25 	bl	8009dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b19a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b19e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	68b8      	ldr	r0, [r7, #8]
 800b1a4:	f000 fa7c 	bl	800b6a0 <prvAddCurrentTaskToDelayedList>
	}
 800b1a8:	bf00      	nop
 800b1aa:	3718      	adds	r7, #24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20008da4 	.word	0x20008da4

0800b1b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	68db      	ldr	r3, [r3, #12]
 800b1c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10b      	bne.n	800b1e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	60fb      	str	r3, [r7, #12]
}
 800b1dc:	bf00      	nop
 800b1de:	bf00      	nop
 800b1e0:	e7fd      	b.n	800b1de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	3318      	adds	r3, #24
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fe fe56 	bl	8009e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ec:	4b1d      	ldr	r3, [pc, #116]	@ (800b264 <xTaskRemoveFromEventList+0xb0>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d11d      	bne.n	800b230 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe fe4d 	bl	8009e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b202:	4b19      	ldr	r3, [pc, #100]	@ (800b268 <xTaskRemoveFromEventList+0xb4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	429a      	cmp	r2, r3
 800b208:	d903      	bls.n	800b212 <xTaskRemoveFromEventList+0x5e>
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20e:	4a16      	ldr	r2, [pc, #88]	@ (800b268 <xTaskRemoveFromEventList+0xb4>)
 800b210:	6013      	str	r3, [r2, #0]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b216:	4613      	mov	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4413      	add	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4a13      	ldr	r2, [pc, #76]	@ (800b26c <xTaskRemoveFromEventList+0xb8>)
 800b220:	441a      	add	r2, r3
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	3304      	adds	r3, #4
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f7fe fdd8 	bl	8009dde <vListInsertEnd>
 800b22e:	e005      	b.n	800b23c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	3318      	adds	r3, #24
 800b234:	4619      	mov	r1, r3
 800b236:	480e      	ldr	r0, [pc, #56]	@ (800b270 <xTaskRemoveFromEventList+0xbc>)
 800b238:	f7fe fdd1 	bl	8009dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b240:	4b0c      	ldr	r3, [pc, #48]	@ (800b274 <xTaskRemoveFromEventList+0xc0>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	429a      	cmp	r2, r3
 800b248:	d905      	bls.n	800b256 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b24e:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <xTaskRemoveFromEventList+0xc4>)
 800b250:	2201      	movs	r2, #1
 800b252:	601a      	str	r2, [r3, #0]
 800b254:	e001      	b.n	800b25a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b25a:	697b      	ldr	r3, [r7, #20]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200092a0 	.word	0x200092a0
 800b268:	20009280 	.word	0x20009280
 800b26c:	20008da8 	.word	0x20008da8
 800b270:	20009238 	.word	0x20009238
 800b274:	20008da4 	.word	0x20008da4
 800b278:	2000928c 	.word	0x2000928c

0800b27c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10b      	bne.n	800b2a2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	60fb      	str	r3, [r7, #12]
}
 800b29c:	bf00      	nop
 800b29e:	bf00      	nop
 800b2a0:	e7fd      	b.n	800b29e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b2a2:	f000 fed9 	bl	800c058 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2a6:	4b07      	ldr	r3, [pc, #28]	@ (800b2c4 <vTaskSetTimeOutState+0x48>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b2ae:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <vTaskSetTimeOutState+0x4c>)
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b2b6:	f000 ff01 	bl	800c0bc <vPortExitCritical>
}
 800b2ba:	bf00      	nop
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20009290 	.word	0x20009290
 800b2c8:	2000927c 	.word	0x2000927c

0800b2cc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2d4:	4b06      	ldr	r3, [pc, #24]	@ (800b2f0 <vTaskInternalSetTimeOutState+0x24>)
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2dc:	4b05      	ldr	r3, [pc, #20]	@ (800b2f4 <vTaskInternalSetTimeOutState+0x28>)
 800b2de:	681a      	ldr	r2, [r3, #0]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	605a      	str	r2, [r3, #4]
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20009290 	.word	0x20009290
 800b2f4:	2000927c 	.word	0x2000927c

0800b2f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10b      	bne.n	800b320 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	613b      	str	r3, [r7, #16]
}
 800b31a:	bf00      	nop
 800b31c:	bf00      	nop
 800b31e:	e7fd      	b.n	800b31c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	60fb      	str	r3, [r7, #12]
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	e7fd      	b.n	800b33a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b33e:	f000 fe8b 	bl	800c058 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b342:	4b1d      	ldr	r3, [pc, #116]	@ (800b3b8 <xTaskCheckForTimeOut+0xc0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b35a:	d102      	bne.n	800b362 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	61fb      	str	r3, [r7, #28]
 800b360:	e023      	b.n	800b3aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	4b15      	ldr	r3, [pc, #84]	@ (800b3bc <xTaskCheckForTimeOut+0xc4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d007      	beq.n	800b37e <xTaskCheckForTimeOut+0x86>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	429a      	cmp	r2, r3
 800b376:	d302      	bcc.n	800b37e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	61fb      	str	r3, [r7, #28]
 800b37c:	e015      	b.n	800b3aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	697a      	ldr	r2, [r7, #20]
 800b384:	429a      	cmp	r2, r3
 800b386:	d20b      	bcs.n	800b3a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	1ad2      	subs	r2, r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ff99 	bl	800b2cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61fb      	str	r3, [r7, #28]
 800b39e:	e004      	b.n	800b3aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3aa:	f000 fe87 	bl	800c0bc <vPortExitCritical>

	return xReturn;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3720      	adds	r7, #32
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	2000927c 	.word	0x2000927c
 800b3bc:	20009290 	.word	0x20009290

0800b3c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3c4:	4b03      	ldr	r3, [pc, #12]	@ (800b3d4 <vTaskMissedYield+0x14>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr
 800b3d4:	2000928c 	.word	0x2000928c

0800b3d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3e0:	f000 f852 	bl	800b488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3e4:	4b06      	ldr	r3, [pc, #24]	@ (800b400 <prvIdleTask+0x28>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d9f9      	bls.n	800b3e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b3ec:	4b05      	ldr	r3, [pc, #20]	@ (800b404 <prvIdleTask+0x2c>)
 800b3ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b3fc:	e7f0      	b.n	800b3e0 <prvIdleTask+0x8>
 800b3fe:	bf00      	nop
 800b400:	20008da8 	.word	0x20008da8
 800b404:	e000ed04 	.word	0xe000ed04

0800b408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b40e:	2300      	movs	r3, #0
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	e00c      	b.n	800b42e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4a12      	ldr	r2, [pc, #72]	@ (800b468 <prvInitialiseTaskLists+0x60>)
 800b420:	4413      	add	r3, r2
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fcae 	bl	8009d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3301      	adds	r3, #1
 800b42c:	607b      	str	r3, [r7, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b37      	cmp	r3, #55	@ 0x37
 800b432:	d9ef      	bls.n	800b414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b434:	480d      	ldr	r0, [pc, #52]	@ (800b46c <prvInitialiseTaskLists+0x64>)
 800b436:	f7fe fca5 	bl	8009d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b43a:	480d      	ldr	r0, [pc, #52]	@ (800b470 <prvInitialiseTaskLists+0x68>)
 800b43c:	f7fe fca2 	bl	8009d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b440:	480c      	ldr	r0, [pc, #48]	@ (800b474 <prvInitialiseTaskLists+0x6c>)
 800b442:	f7fe fc9f 	bl	8009d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b446:	480c      	ldr	r0, [pc, #48]	@ (800b478 <prvInitialiseTaskLists+0x70>)
 800b448:	f7fe fc9c 	bl	8009d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b44c:	480b      	ldr	r0, [pc, #44]	@ (800b47c <prvInitialiseTaskLists+0x74>)
 800b44e:	f7fe fc99 	bl	8009d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b452:	4b0b      	ldr	r3, [pc, #44]	@ (800b480 <prvInitialiseTaskLists+0x78>)
 800b454:	4a05      	ldr	r2, [pc, #20]	@ (800b46c <prvInitialiseTaskLists+0x64>)
 800b456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b458:	4b0a      	ldr	r3, [pc, #40]	@ (800b484 <prvInitialiseTaskLists+0x7c>)
 800b45a:	4a05      	ldr	r2, [pc, #20]	@ (800b470 <prvInitialiseTaskLists+0x68>)
 800b45c:	601a      	str	r2, [r3, #0]
}
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	20008da8 	.word	0x20008da8
 800b46c:	20009208 	.word	0x20009208
 800b470:	2000921c 	.word	0x2000921c
 800b474:	20009238 	.word	0x20009238
 800b478:	2000924c 	.word	0x2000924c
 800b47c:	20009264 	.word	0x20009264
 800b480:	20009230 	.word	0x20009230
 800b484:	20009234 	.word	0x20009234

0800b488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b48e:	e019      	b.n	800b4c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b490:	f000 fde2 	bl	800c058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b494:	4b10      	ldr	r3, [pc, #64]	@ (800b4d8 <prvCheckTasksWaitingTermination+0x50>)
 800b496:	68db      	ldr	r3, [r3, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	3304      	adds	r3, #4
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fe fcf9 	bl	8009e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4dc <prvCheckTasksWaitingTermination+0x54>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4a0b      	ldr	r2, [pc, #44]	@ (800b4dc <prvCheckTasksWaitingTermination+0x54>)
 800b4ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3b01      	subs	r3, #1
 800b4b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4ba:	f000 fdff 	bl	800c0bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f810 	bl	800b4e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4c4:	4b06      	ldr	r3, [pc, #24]	@ (800b4e0 <prvCheckTasksWaitingTermination+0x58>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e1      	bne.n	800b490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000924c 	.word	0x2000924c
 800b4dc:	20009278 	.word	0x20009278
 800b4e0:	20009260 	.word	0x20009260

0800b4e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d108      	bne.n	800b508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f000 ff9c 	bl	800c438 <vPortFree>
				vPortFree( pxTCB );
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 ff99 	bl	800c438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b506:	e019      	b.n	800b53c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d103      	bne.n	800b51a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 ff90 	bl	800c438 <vPortFree>
	}
 800b518:	e010      	b.n	800b53c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b520:	2b02      	cmp	r3, #2
 800b522:	d00b      	beq.n	800b53c <prvDeleteTCB+0x58>
	__asm volatile
 800b524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b528:	f383 8811 	msr	BASEPRI, r3
 800b52c:	f3bf 8f6f 	isb	sy
 800b530:	f3bf 8f4f 	dsb	sy
 800b534:	60fb      	str	r3, [r7, #12]
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	e7fd      	b.n	800b538 <prvDeleteTCB+0x54>
	}
 800b53c:	bf00      	nop
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b54a:	4b0c      	ldr	r3, [pc, #48]	@ (800b57c <prvResetNextTaskUnblockTime+0x38>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d104      	bne.n	800b55e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b554:	4b0a      	ldr	r3, [pc, #40]	@ (800b580 <prvResetNextTaskUnblockTime+0x3c>)
 800b556:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b55a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b55c:	e008      	b.n	800b570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b55e:	4b07      	ldr	r3, [pc, #28]	@ (800b57c <prvResetNextTaskUnblockTime+0x38>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	4a04      	ldr	r2, [pc, #16]	@ (800b580 <prvResetNextTaskUnblockTime+0x3c>)
 800b56e:	6013      	str	r3, [r2, #0]
}
 800b570:	bf00      	nop
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20009230 	.word	0x20009230
 800b580:	20009298 	.word	0x20009298

0800b584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b58a:	4b0b      	ldr	r3, [pc, #44]	@ (800b5b8 <xTaskGetSchedulerState+0x34>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b592:	2301      	movs	r3, #1
 800b594:	607b      	str	r3, [r7, #4]
 800b596:	e008      	b.n	800b5aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b598:	4b08      	ldr	r3, [pc, #32]	@ (800b5bc <xTaskGetSchedulerState+0x38>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d102      	bne.n	800b5a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	607b      	str	r3, [r7, #4]
 800b5a4:	e001      	b.n	800b5aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5aa:	687b      	ldr	r3, [r7, #4]
	}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	20009284 	.word	0x20009284
 800b5bc:	200092a0 	.word	0x200092a0

0800b5c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d058      	beq.n	800b688 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5d6:	4b2f      	ldr	r3, [pc, #188]	@ (800b694 <xTaskPriorityDisinherit+0xd4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d00b      	beq.n	800b5f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60fb      	str	r3, [r7, #12]
}
 800b5f2:	bf00      	nop
 800b5f4:	bf00      	nop
 800b5f6:	e7fd      	b.n	800b5f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10b      	bne.n	800b618 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	60bb      	str	r3, [r7, #8]
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	e7fd      	b.n	800b614 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b61c:	1e5a      	subs	r2, r3, #1
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d02c      	beq.n	800b688 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b632:	2b00      	cmp	r3, #0
 800b634:	d128      	bne.n	800b688 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	3304      	adds	r3, #4
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fc2c 	bl	8009e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b658:	4b0f      	ldr	r3, [pc, #60]	@ (800b698 <xTaskPriorityDisinherit+0xd8>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d903      	bls.n	800b668 <xTaskPriorityDisinherit+0xa8>
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b664:	4a0c      	ldr	r2, [pc, #48]	@ (800b698 <xTaskPriorityDisinherit+0xd8>)
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4a09      	ldr	r2, [pc, #36]	@ (800b69c <xTaskPriorityDisinherit+0xdc>)
 800b676:	441a      	add	r2, r3
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f7fe fbad 	bl	8009dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b684:	2301      	movs	r3, #1
 800b686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b688:	697b      	ldr	r3, [r7, #20]
	}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3718      	adds	r7, #24
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20008da4 	.word	0x20008da4
 800b698:	20009280 	.word	0x20009280
 800b69c:	20008da8 	.word	0x20008da8

0800b6a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6aa:	4b21      	ldr	r3, [pc, #132]	@ (800b730 <prvAddCurrentTaskToDelayedList+0x90>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6b0:	4b20      	ldr	r3, [pc, #128]	@ (800b734 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fe fbee 	bl	8009e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6c2:	d10a      	bne.n	800b6da <prvAddCurrentTaskToDelayedList+0x3a>
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6ca:	4b1a      	ldr	r3, [pc, #104]	@ (800b734 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4819      	ldr	r0, [pc, #100]	@ (800b738 <prvAddCurrentTaskToDelayedList+0x98>)
 800b6d4:	f7fe fb83 	bl	8009dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b6d8:	e026      	b.n	800b728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4413      	add	r3, r2
 800b6e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b6e2:	4b14      	ldr	r3, [pc, #80]	@ (800b734 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d209      	bcs.n	800b706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b6f2:	4b12      	ldr	r3, [pc, #72]	@ (800b73c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b734 <prvAddCurrentTaskToDelayedList+0x94>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4610      	mov	r0, r2
 800b700:	f7fe fb91 	bl	8009e26 <vListInsert>
}
 800b704:	e010      	b.n	800b728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b706:	4b0e      	ldr	r3, [pc, #56]	@ (800b740 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	4b0a      	ldr	r3, [pc, #40]	@ (800b734 <prvAddCurrentTaskToDelayedList+0x94>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3304      	adds	r3, #4
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fe fb87 	bl	8009e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b718:	4b0a      	ldr	r3, [pc, #40]	@ (800b744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d202      	bcs.n	800b728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b722:	4a08      	ldr	r2, [pc, #32]	@ (800b744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6013      	str	r3, [r2, #0]
}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	2000927c 	.word	0x2000927c
 800b734:	20008da4 	.word	0x20008da4
 800b738:	20009264 	.word	0x20009264
 800b73c:	20009234 	.word	0x20009234
 800b740:	20009230 	.word	0x20009230
 800b744:	20009298 	.word	0x20009298

0800b748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08a      	sub	sp, #40	@ 0x28
 800b74c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b74e:	2300      	movs	r3, #0
 800b750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b752:	f000 fb13 	bl	800bd7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b756:	4b1d      	ldr	r3, [pc, #116]	@ (800b7cc <xTimerCreateTimerTask+0x84>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d021      	beq.n	800b7a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b75e:	2300      	movs	r3, #0
 800b760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b762:	2300      	movs	r3, #0
 800b764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b766:	1d3a      	adds	r2, r7, #4
 800b768:	f107 0108 	add.w	r1, r7, #8
 800b76c:	f107 030c 	add.w	r3, r7, #12
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe faed 	bl	8009d50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b776:	6879      	ldr	r1, [r7, #4]
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	68fa      	ldr	r2, [r7, #12]
 800b77c:	9202      	str	r2, [sp, #8]
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	2302      	movs	r3, #2
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	2300      	movs	r3, #0
 800b786:	460a      	mov	r2, r1
 800b788:	4911      	ldr	r1, [pc, #68]	@ (800b7d0 <xTimerCreateTimerTask+0x88>)
 800b78a:	4812      	ldr	r0, [pc, #72]	@ (800b7d4 <xTimerCreateTimerTask+0x8c>)
 800b78c:	f7ff f8a8 	bl	800a8e0 <xTaskCreateStatic>
 800b790:	4603      	mov	r3, r0
 800b792:	4a11      	ldr	r2, [pc, #68]	@ (800b7d8 <xTimerCreateTimerTask+0x90>)
 800b794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b796:	4b10      	ldr	r3, [pc, #64]	@ (800b7d8 <xTimerCreateTimerTask+0x90>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d001      	beq.n	800b7a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10b      	bne.n	800b7c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ac:	f383 8811 	msr	BASEPRI, r3
 800b7b0:	f3bf 8f6f 	isb	sy
 800b7b4:	f3bf 8f4f 	dsb	sy
 800b7b8:	613b      	str	r3, [r7, #16]
}
 800b7ba:	bf00      	nop
 800b7bc:	bf00      	nop
 800b7be:	e7fd      	b.n	800b7bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b7c0:	697b      	ldr	r3, [r7, #20]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	200092d4 	.word	0x200092d4
 800b7d0:	0801d3a4 	.word	0x0801d3a4
 800b7d4:	0800b915 	.word	0x0800b915
 800b7d8:	200092d8 	.word	0x200092d8

0800b7dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08a      	sub	sp, #40	@ 0x28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d10b      	bne.n	800b80c <xTimerGenericCommand+0x30>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	623b      	str	r3, [r7, #32]
}
 800b806:	bf00      	nop
 800b808:	bf00      	nop
 800b80a:	e7fd      	b.n	800b808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b80c:	4b19      	ldr	r3, [pc, #100]	@ (800b874 <xTimerGenericCommand+0x98>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d02a      	beq.n	800b86a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b05      	cmp	r3, #5
 800b824:	dc18      	bgt.n	800b858 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b826:	f7ff fead 	bl	800b584 <xTaskGetSchedulerState>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d109      	bne.n	800b844 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b830:	4b10      	ldr	r3, [pc, #64]	@ (800b874 <xTimerGenericCommand+0x98>)
 800b832:	6818      	ldr	r0, [r3, #0]
 800b834:	f107 0110 	add.w	r1, r7, #16
 800b838:	2300      	movs	r3, #0
 800b83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b83c:	f7fe fc60 	bl	800a100 <xQueueGenericSend>
 800b840:	6278      	str	r0, [r7, #36]	@ 0x24
 800b842:	e012      	b.n	800b86a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b844:	4b0b      	ldr	r3, [pc, #44]	@ (800b874 <xTimerGenericCommand+0x98>)
 800b846:	6818      	ldr	r0, [r3, #0]
 800b848:	f107 0110 	add.w	r1, r7, #16
 800b84c:	2300      	movs	r3, #0
 800b84e:	2200      	movs	r2, #0
 800b850:	f7fe fc56 	bl	800a100 <xQueueGenericSend>
 800b854:	6278      	str	r0, [r7, #36]	@ 0x24
 800b856:	e008      	b.n	800b86a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b858:	4b06      	ldr	r3, [pc, #24]	@ (800b874 <xTimerGenericCommand+0x98>)
 800b85a:	6818      	ldr	r0, [r3, #0]
 800b85c:	f107 0110 	add.w	r1, r7, #16
 800b860:	2300      	movs	r3, #0
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	f7fe fd4e 	bl	800a304 <xQueueGenericSendFromISR>
 800b868:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3728      	adds	r7, #40	@ 0x28
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	200092d4 	.word	0x200092d4

0800b878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b882:	4b23      	ldr	r3, [pc, #140]	@ (800b910 <prvProcessExpiredTimer+0x98>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	3304      	adds	r3, #4
 800b890:	4618      	mov	r0, r3
 800b892:	f7fe fb01 	bl	8009e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d023      	beq.n	800b8ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	699a      	ldr	r2, [r3, #24]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	18d1      	adds	r1, r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	6978      	ldr	r0, [r7, #20]
 800b8b2:	f000 f8d5 	bl	800ba60 <prvInsertTimerInActiveList>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d020      	beq.n	800b8fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	2100      	movs	r1, #0
 800b8c6:	6978      	ldr	r0, [r7, #20]
 800b8c8:	f7ff ff88 	bl	800b7dc <xTimerGenericCommand>
 800b8cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d114      	bne.n	800b8fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d8:	f383 8811 	msr	BASEPRI, r3
 800b8dc:	f3bf 8f6f 	isb	sy
 800b8e0:	f3bf 8f4f 	dsb	sy
 800b8e4:	60fb      	str	r3, [r7, #12]
}
 800b8e6:	bf00      	nop
 800b8e8:	bf00      	nop
 800b8ea:	e7fd      	b.n	800b8e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b8f2:	f023 0301 	bic.w	r3, r3, #1
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	697b      	ldr	r3, [r7, #20]
 800b8fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	6978      	ldr	r0, [r7, #20]
 800b904:	4798      	blx	r3
}
 800b906:	bf00      	nop
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	200092cc 	.word	0x200092cc

0800b914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b91c:	f107 0308 	add.w	r3, r7, #8
 800b920:	4618      	mov	r0, r3
 800b922:	f000 f859 	bl	800b9d8 <prvGetNextExpireTime>
 800b926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	4619      	mov	r1, r3
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f000 f805 	bl	800b93c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b932:	f000 f8d7 	bl	800bae4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b936:	bf00      	nop
 800b938:	e7f0      	b.n	800b91c <prvTimerTask+0x8>
	...

0800b93c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b946:	f7ff fa0f 	bl	800ad68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b94a:	f107 0308 	add.w	r3, r7, #8
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 f866 	bl	800ba20 <prvSampleTimeNow>
 800b954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d130      	bne.n	800b9be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <prvProcessTimerOrBlockTask+0x3c>
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	429a      	cmp	r2, r3
 800b968:	d806      	bhi.n	800b978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b96a:	f7ff fa0b 	bl	800ad84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b96e:	68f9      	ldr	r1, [r7, #12]
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ff81 	bl	800b878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b976:	e024      	b.n	800b9c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d008      	beq.n	800b990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b97e:	4b13      	ldr	r3, [pc, #76]	@ (800b9cc <prvProcessTimerOrBlockTask+0x90>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <prvProcessTimerOrBlockTask+0x50>
 800b988:	2301      	movs	r3, #1
 800b98a:	e000      	b.n	800b98e <prvProcessTimerOrBlockTask+0x52>
 800b98c:	2300      	movs	r3, #0
 800b98e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b990:	4b0f      	ldr	r3, [pc, #60]	@ (800b9d0 <prvProcessTimerOrBlockTask+0x94>)
 800b992:	6818      	ldr	r0, [r3, #0]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4619      	mov	r1, r3
 800b99e:	f7fe ff6b 	bl	800a878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b9a2:	f7ff f9ef 	bl	800ad84 <xTaskResumeAll>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d10a      	bne.n	800b9c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b9ac:	4b09      	ldr	r3, [pc, #36]	@ (800b9d4 <prvProcessTimerOrBlockTask+0x98>)
 800b9ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	f3bf 8f6f 	isb	sy
}
 800b9bc:	e001      	b.n	800b9c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b9be:	f7ff f9e1 	bl	800ad84 <xTaskResumeAll>
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	200092d0 	.word	0x200092d0
 800b9d0:	200092d4 	.word	0x200092d4
 800b9d4:	e000ed04 	.word	0xe000ed04

0800b9d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b9e0:	4b0e      	ldr	r3, [pc, #56]	@ (800ba1c <prvGetNextExpireTime+0x44>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <prvGetNextExpireTime+0x16>
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	e000      	b.n	800b9f0 <prvGetNextExpireTime+0x18>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d105      	bne.n	800ba08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ba1c <prvGetNextExpireTime+0x44>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60fb      	str	r3, [r7, #12]
 800ba06:	e001      	b.n	800ba0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
 800ba1a:	bf00      	nop
 800ba1c:	200092cc 	.word	0x200092cc

0800ba20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ba28:	f7ff fa4a 	bl	800aec0 <xTaskGetTickCount>
 800ba2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ba2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ba5c <prvSampleTimeNow+0x3c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d205      	bcs.n	800ba44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ba38:	f000 f93a 	bl	800bcb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	601a      	str	r2, [r3, #0]
 800ba42:	e002      	b.n	800ba4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ba4a:	4a04      	ldr	r2, [pc, #16]	@ (800ba5c <prvSampleTimeNow+0x3c>)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ba50:	68fb      	ldr	r3, [r7, #12]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	200092dc 	.word	0x200092dc

0800ba60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b086      	sub	sp, #24
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d812      	bhi.n	800baac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	1ad2      	subs	r2, r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d302      	bcc.n	800ba9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ba94:	2301      	movs	r3, #1
 800ba96:	617b      	str	r3, [r7, #20]
 800ba98:	e01b      	b.n	800bad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba9a:	4b10      	ldr	r3, [pc, #64]	@ (800badc <prvInsertTimerInActiveList+0x7c>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	3304      	adds	r3, #4
 800baa2:	4619      	mov	r1, r3
 800baa4:	4610      	mov	r0, r2
 800baa6:	f7fe f9be 	bl	8009e26 <vListInsert>
 800baaa:	e012      	b.n	800bad2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d206      	bcs.n	800bac2 <prvInsertTimerInActiveList+0x62>
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d302      	bcc.n	800bac2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800babc:	2301      	movs	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e007      	b.n	800bad2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bac2:	4b07      	ldr	r3, [pc, #28]	@ (800bae0 <prvInsertTimerInActiveList+0x80>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3304      	adds	r3, #4
 800baca:	4619      	mov	r1, r3
 800bacc:	4610      	mov	r0, r2
 800bace:	f7fe f9aa 	bl	8009e26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bad2:	697b      	ldr	r3, [r7, #20]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3718      	adds	r7, #24
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	200092d0 	.word	0x200092d0
 800bae0:	200092cc 	.word	0x200092cc

0800bae4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08e      	sub	sp, #56	@ 0x38
 800bae8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baea:	e0ce      	b.n	800bc8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	da19      	bge.n	800bb26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800baf2:	1d3b      	adds	r3, r7, #4
 800baf4:	3304      	adds	r3, #4
 800baf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800baf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10b      	bne.n	800bb16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	61fb      	str	r3, [r7, #28]
}
 800bb10:	bf00      	nop
 800bb12:	bf00      	nop
 800bb14:	e7fd      	b.n	800bb12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb1c:	6850      	ldr	r0, [r2, #4]
 800bb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb20:	6892      	ldr	r2, [r2, #8]
 800bb22:	4611      	mov	r1, r2
 800bb24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f2c0 80ae 	blt.w	800bc8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d004      	beq.n	800bb44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe f9aa 	bl	8009e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb44:	463b      	mov	r3, r7
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7ff ff6a 	bl	800ba20 <prvSampleTimeNow>
 800bb4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2b09      	cmp	r3, #9
 800bb52:	f200 8097 	bhi.w	800bc84 <prvProcessReceivedCommands+0x1a0>
 800bb56:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <prvProcessReceivedCommands+0x78>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb85 	.word	0x0800bb85
 800bb60:	0800bb85 	.word	0x0800bb85
 800bb64:	0800bb85 	.word	0x0800bb85
 800bb68:	0800bbfb 	.word	0x0800bbfb
 800bb6c:	0800bc0f 	.word	0x0800bc0f
 800bb70:	0800bc5b 	.word	0x0800bc5b
 800bb74:	0800bb85 	.word	0x0800bb85
 800bb78:	0800bb85 	.word	0x0800bb85
 800bb7c:	0800bbfb 	.word	0x0800bbfb
 800bb80:	0800bc0f 	.word	0x0800bc0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb8a:	f043 0301 	orr.w	r3, r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	18d1      	adds	r1, r2, r3
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bba4:	f7ff ff5c 	bl	800ba60 <prvInsertTimerInActiveList>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d06c      	beq.n	800bc88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbbc:	f003 0304 	and.w	r3, r3, #4
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d061      	beq.n	800bc88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	441a      	add	r2, r3
 800bbcc:	2300      	movs	r3, #0
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bbd6:	f7ff fe01 	bl	800b7dc <xTimerGenericCommand>
 800bbda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bbdc:	6a3b      	ldr	r3, [r7, #32]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d152      	bne.n	800bc88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	61bb      	str	r3, [r7, #24]
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop
 800bbf8:	e7fd      	b.n	800bbf6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc00:	f023 0301 	bic.w	r3, r3, #1
 800bc04:	b2da      	uxtb	r2, r3
 800bc06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc0c:	e03d      	b.n	800bc8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc14:	f043 0301 	orr.w	r3, r3, #1
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10b      	bne.n	800bc46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	f383 8811 	msr	BASEPRI, r3
 800bc36:	f3bf 8f6f 	isb	sy
 800bc3a:	f3bf 8f4f 	dsb	sy
 800bc3e:	617b      	str	r3, [r7, #20]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc48:	699a      	ldr	r2, [r3, #24]
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4c:	18d1      	adds	r1, r2, r3
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc54:	f7ff ff04 	bl	800ba60 <prvInsertTimerInActiveList>
					break;
 800bc58:	e017      	b.n	800bc8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc60:	f003 0302 	and.w	r3, r3, #2
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d103      	bne.n	800bc70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bc68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc6a:	f000 fbe5 	bl	800c438 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bc6e:	e00c      	b.n	800bc8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc76:	f023 0301 	bic.w	r3, r3, #1
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc82:	e002      	b.n	800bc8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bc84:	bf00      	nop
 800bc86:	e000      	b.n	800bc8a <prvProcessReceivedCommands+0x1a6>
					break;
 800bc88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc8a:	4b08      	ldr	r3, [pc, #32]	@ (800bcac <prvProcessReceivedCommands+0x1c8>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	1d39      	adds	r1, r7, #4
 800bc90:	2200      	movs	r2, #0
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe fbd4 	bl	800a440 <xQueueReceive>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f47f af26 	bne.w	800baec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bca0:	bf00      	nop
 800bca2:	bf00      	nop
 800bca4:	3730      	adds	r7, #48	@ 0x30
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	200092d4 	.word	0x200092d4

0800bcb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bcb6:	e049      	b.n	800bd4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcb8:	4b2e      	ldr	r3, [pc, #184]	@ (800bd74 <prvSwitchTimerLists+0xc4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcc2:	4b2c      	ldr	r3, [pc, #176]	@ (800bd74 <prvSwitchTimerLists+0xc4>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	68db      	ldr	r3, [r3, #12]
 800bcca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	3304      	adds	r3, #4
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fe f8e1 	bl	8009e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d02f      	beq.n	800bd4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d90e      	bls.n	800bd1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	68ba      	ldr	r2, [r7, #8]
 800bd02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd0a:	4b1a      	ldr	r3, [pc, #104]	@ (800bd74 <prvSwitchTimerLists+0xc4>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3304      	adds	r3, #4
 800bd12:	4619      	mov	r1, r3
 800bd14:	4610      	mov	r0, r2
 800bd16:	f7fe f886 	bl	8009e26 <vListInsert>
 800bd1a:	e017      	b.n	800bd4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	2300      	movs	r3, #0
 800bd22:	693a      	ldr	r2, [r7, #16]
 800bd24:	2100      	movs	r1, #0
 800bd26:	68f8      	ldr	r0, [r7, #12]
 800bd28:	f7ff fd58 	bl	800b7dc <xTimerGenericCommand>
 800bd2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	603b      	str	r3, [r7, #0]
}
 800bd46:	bf00      	nop
 800bd48:	bf00      	nop
 800bd4a:	e7fd      	b.n	800bd48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd4c:	4b09      	ldr	r3, [pc, #36]	@ (800bd74 <prvSwitchTimerLists+0xc4>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1b0      	bne.n	800bcb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bd56:	4b07      	ldr	r3, [pc, #28]	@ (800bd74 <prvSwitchTimerLists+0xc4>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bd5c:	4b06      	ldr	r3, [pc, #24]	@ (800bd78 <prvSwitchTimerLists+0xc8>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a04      	ldr	r2, [pc, #16]	@ (800bd74 <prvSwitchTimerLists+0xc4>)
 800bd62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bd64:	4a04      	ldr	r2, [pc, #16]	@ (800bd78 <prvSwitchTimerLists+0xc8>)
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	6013      	str	r3, [r2, #0]
}
 800bd6a:	bf00      	nop
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	200092cc 	.word	0x200092cc
 800bd78:	200092d0 	.word	0x200092d0

0800bd7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bd82:	f000 f969 	bl	800c058 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bd86:	4b15      	ldr	r3, [pc, #84]	@ (800bddc <prvCheckForValidListAndQueue+0x60>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d120      	bne.n	800bdd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bd8e:	4814      	ldr	r0, [pc, #80]	@ (800bde0 <prvCheckForValidListAndQueue+0x64>)
 800bd90:	f7fd fff8 	bl	8009d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bd94:	4813      	ldr	r0, [pc, #76]	@ (800bde4 <prvCheckForValidListAndQueue+0x68>)
 800bd96:	f7fd fff5 	bl	8009d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bd9a:	4b13      	ldr	r3, [pc, #76]	@ (800bde8 <prvCheckForValidListAndQueue+0x6c>)
 800bd9c:	4a10      	ldr	r2, [pc, #64]	@ (800bde0 <prvCheckForValidListAndQueue+0x64>)
 800bd9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bda0:	4b12      	ldr	r3, [pc, #72]	@ (800bdec <prvCheckForValidListAndQueue+0x70>)
 800bda2:	4a10      	ldr	r2, [pc, #64]	@ (800bde4 <prvCheckForValidListAndQueue+0x68>)
 800bda4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bda6:	2300      	movs	r3, #0
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	4b11      	ldr	r3, [pc, #68]	@ (800bdf0 <prvCheckForValidListAndQueue+0x74>)
 800bdac:	4a11      	ldr	r2, [pc, #68]	@ (800bdf4 <prvCheckForValidListAndQueue+0x78>)
 800bdae:	2110      	movs	r1, #16
 800bdb0:	200a      	movs	r0, #10
 800bdb2:	f7fe f905 	bl	8009fc0 <xQueueGenericCreateStatic>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	4a08      	ldr	r2, [pc, #32]	@ (800bddc <prvCheckForValidListAndQueue+0x60>)
 800bdba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bdbc:	4b07      	ldr	r3, [pc, #28]	@ (800bddc <prvCheckForValidListAndQueue+0x60>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d005      	beq.n	800bdd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bdc4:	4b05      	ldr	r3, [pc, #20]	@ (800bddc <prvCheckForValidListAndQueue+0x60>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	490b      	ldr	r1, [pc, #44]	@ (800bdf8 <prvCheckForValidListAndQueue+0x7c>)
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fd2a 	bl	800a824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdd0:	f000 f974 	bl	800c0bc <vPortExitCritical>
}
 800bdd4:	bf00      	nop
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	200092d4 	.word	0x200092d4
 800bde0:	200092a4 	.word	0x200092a4
 800bde4:	200092b8 	.word	0x200092b8
 800bde8:	200092cc 	.word	0x200092cc
 800bdec:	200092d0 	.word	0x200092d0
 800bdf0:	20009380 	.word	0x20009380
 800bdf4:	200092e0 	.word	0x200092e0
 800bdf8:	0801d3ac 	.word	0x0801d3ac

0800bdfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	3b04      	subs	r3, #4
 800be0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3b04      	subs	r3, #4
 800be1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f023 0201 	bic.w	r2, r3, #1
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3b04      	subs	r3, #4
 800be2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be2c:	4a0c      	ldr	r2, [pc, #48]	@ (800be60 <pxPortInitialiseStack+0x64>)
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3b14      	subs	r3, #20
 800be36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	3b04      	subs	r3, #4
 800be42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f06f 0202 	mvn.w	r2, #2
 800be4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3b20      	subs	r3, #32
 800be50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800be52:	68fb      	ldr	r3, [r7, #12]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	0800be65 	.word	0x0800be65

0800be64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be6e:	4b13      	ldr	r3, [pc, #76]	@ (800bebc <prvTaskExitError+0x58>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be76:	d00b      	beq.n	800be90 <prvTaskExitError+0x2c>
	__asm volatile
 800be78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	60fb      	str	r3, [r7, #12]
}
 800be8a:	bf00      	nop
 800be8c:	bf00      	nop
 800be8e:	e7fd      	b.n	800be8c <prvTaskExitError+0x28>
	__asm volatile
 800be90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be94:	f383 8811 	msr	BASEPRI, r3
 800be98:	f3bf 8f6f 	isb	sy
 800be9c:	f3bf 8f4f 	dsb	sy
 800bea0:	60bb      	str	r3, [r7, #8]
}
 800bea2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bea4:	bf00      	nop
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d0fc      	beq.n	800bea6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800beac:	bf00      	nop
 800beae:	bf00      	nop
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	20000014 	.word	0x20000014

0800bec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bec0:	4b07      	ldr	r3, [pc, #28]	@ (800bee0 <pxCurrentTCBConst2>)
 800bec2:	6819      	ldr	r1, [r3, #0]
 800bec4:	6808      	ldr	r0, [r1, #0]
 800bec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beca:	f380 8809 	msr	PSP, r0
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	f04f 0000 	mov.w	r0, #0
 800bed6:	f380 8811 	msr	BASEPRI, r0
 800beda:	4770      	bx	lr
 800bedc:	f3af 8000 	nop.w

0800bee0 <pxCurrentTCBConst2>:
 800bee0:	20008da4 	.word	0x20008da4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop

0800bee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bee8:	4808      	ldr	r0, [pc, #32]	@ (800bf0c <prvPortStartFirstTask+0x24>)
 800beea:	6800      	ldr	r0, [r0, #0]
 800beec:	6800      	ldr	r0, [r0, #0]
 800beee:	f380 8808 	msr	MSP, r0
 800bef2:	f04f 0000 	mov.w	r0, #0
 800bef6:	f380 8814 	msr	CONTROL, r0
 800befa:	b662      	cpsie	i
 800befc:	b661      	cpsie	f
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	df00      	svc	0
 800bf08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf0a:	bf00      	nop
 800bf0c:	e000ed08 	.word	0xe000ed08

0800bf10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf16:	4b47      	ldr	r3, [pc, #284]	@ (800c034 <xPortStartScheduler+0x124>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a47      	ldr	r2, [pc, #284]	@ (800c038 <xPortStartScheduler+0x128>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d10b      	bne.n	800bf38 <xPortStartScheduler+0x28>
	__asm volatile
 800bf20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf24:	f383 8811 	msr	BASEPRI, r3
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	f3bf 8f4f 	dsb	sy
 800bf30:	60fb      	str	r3, [r7, #12]
}
 800bf32:	bf00      	nop
 800bf34:	bf00      	nop
 800bf36:	e7fd      	b.n	800bf34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bf38:	4b3e      	ldr	r3, [pc, #248]	@ (800c034 <xPortStartScheduler+0x124>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a3f      	ldr	r2, [pc, #252]	@ (800c03c <xPortStartScheduler+0x12c>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d10b      	bne.n	800bf5a <xPortStartScheduler+0x4a>
	__asm volatile
 800bf42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf46:	f383 8811 	msr	BASEPRI, r3
 800bf4a:	f3bf 8f6f 	isb	sy
 800bf4e:	f3bf 8f4f 	dsb	sy
 800bf52:	613b      	str	r3, [r7, #16]
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop
 800bf58:	e7fd      	b.n	800bf56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bf5a:	4b39      	ldr	r3, [pc, #228]	@ (800c040 <xPortStartScheduler+0x130>)
 800bf5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	22ff      	movs	r2, #255	@ 0xff
 800bf6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	4b31      	ldr	r3, [pc, #196]	@ (800c044 <xPortStartScheduler+0x134>)
 800bf80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf82:	4b31      	ldr	r3, [pc, #196]	@ (800c048 <xPortStartScheduler+0x138>)
 800bf84:	2207      	movs	r2, #7
 800bf86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf88:	e009      	b.n	800bf9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf8a:	4b2f      	ldr	r3, [pc, #188]	@ (800c048 <xPortStartScheduler+0x138>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	4a2d      	ldr	r2, [pc, #180]	@ (800c048 <xPortStartScheduler+0x138>)
 800bf92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf9e:	78fb      	ldrb	r3, [r7, #3]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfa6:	2b80      	cmp	r3, #128	@ 0x80
 800bfa8:	d0ef      	beq.n	800bf8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bfaa:	4b27      	ldr	r3, [pc, #156]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f1c3 0307 	rsb	r3, r3, #7
 800bfb2:	2b04      	cmp	r3, #4
 800bfb4:	d00b      	beq.n	800bfce <xPortStartScheduler+0xbe>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	60bb      	str	r3, [r7, #8]
}
 800bfc8:	bf00      	nop
 800bfca:	bf00      	nop
 800bfcc:	e7fd      	b.n	800bfca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bfce:	4b1e      	ldr	r3, [pc, #120]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	4a1c      	ldr	r2, [pc, #112]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bfd8:	4b1b      	ldr	r3, [pc, #108]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bfe0:	4a19      	ldr	r2, [pc, #100]	@ (800c048 <xPortStartScheduler+0x138>)
 800bfe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bfec:	4b17      	ldr	r3, [pc, #92]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a16      	ldr	r2, [pc, #88]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bff8:	4b14      	ldr	r3, [pc, #80]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a13      	ldr	r2, [pc, #76]	@ (800c04c <xPortStartScheduler+0x13c>)
 800bffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c004:	f000 f8da 	bl	800c1bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c008:	4b11      	ldr	r3, [pc, #68]	@ (800c050 <xPortStartScheduler+0x140>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c00e:	f000 f8f9 	bl	800c204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c012:	4b10      	ldr	r3, [pc, #64]	@ (800c054 <xPortStartScheduler+0x144>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4a0f      	ldr	r2, [pc, #60]	@ (800c054 <xPortStartScheduler+0x144>)
 800c018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c01c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c01e:	f7ff ff63 	bl	800bee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c022:	f7ff f817 	bl	800b054 <vTaskSwitchContext>
	prvTaskExitError();
 800c026:	f7ff ff1d 	bl	800be64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	e000ed00 	.word	0xe000ed00
 800c038:	410fc271 	.word	0x410fc271
 800c03c:	410fc270 	.word	0x410fc270
 800c040:	e000e400 	.word	0xe000e400
 800c044:	200093d0 	.word	0x200093d0
 800c048:	200093d4 	.word	0x200093d4
 800c04c:	e000ed20 	.word	0xe000ed20
 800c050:	20000014 	.word	0x20000014
 800c054:	e000ef34 	.word	0xe000ef34

0800c058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
	__asm volatile
 800c05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	607b      	str	r3, [r7, #4]
}
 800c070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c072:	4b10      	ldr	r3, [pc, #64]	@ (800c0b4 <vPortEnterCritical+0x5c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3301      	adds	r3, #1
 800c078:	4a0e      	ldr	r2, [pc, #56]	@ (800c0b4 <vPortEnterCritical+0x5c>)
 800c07a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c07c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b4 <vPortEnterCritical+0x5c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d110      	bne.n	800c0a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c084:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <vPortEnterCritical+0x60>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00b      	beq.n	800c0a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	603b      	str	r3, [r7, #0]
}
 800c0a0:	bf00      	nop
 800c0a2:	bf00      	nop
 800c0a4:	e7fd      	b.n	800c0a2 <vPortEnterCritical+0x4a>
	}
}
 800c0a6:	bf00      	nop
 800c0a8:	370c      	adds	r7, #12
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	20000014 	.word	0x20000014
 800c0b8:	e000ed04 	.word	0xe000ed04

0800c0bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c0c2:	4b12      	ldr	r3, [pc, #72]	@ (800c10c <vPortExitCritical+0x50>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10b      	bne.n	800c0e2 <vPortExitCritical+0x26>
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	607b      	str	r3, [r7, #4]
}
 800c0dc:	bf00      	nop
 800c0de:	bf00      	nop
 800c0e0:	e7fd      	b.n	800c0de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c10c <vPortExitCritical+0x50>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	4a08      	ldr	r2, [pc, #32]	@ (800c10c <vPortExitCritical+0x50>)
 800c0ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c0ec:	4b07      	ldr	r3, [pc, #28]	@ (800c10c <vPortExitCritical+0x50>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d105      	bne.n	800c100 <vPortExitCritical+0x44>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	f383 8811 	msr	BASEPRI, r3
}
 800c0fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr
 800c10c:	20000014 	.word	0x20000014

0800c110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c110:	f3ef 8009 	mrs	r0, PSP
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	4b15      	ldr	r3, [pc, #84]	@ (800c170 <pxCurrentTCBConst>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	f01e 0f10 	tst.w	lr, #16
 800c120:	bf08      	it	eq
 800c122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12a:	6010      	str	r0, [r2, #0]
 800c12c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c134:	f380 8811 	msr	BASEPRI, r0
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	f3bf 8f6f 	isb	sy
 800c140:	f7fe ff88 	bl	800b054 <vTaskSwitchContext>
 800c144:	f04f 0000 	mov.w	r0, #0
 800c148:	f380 8811 	msr	BASEPRI, r0
 800c14c:	bc09      	pop	{r0, r3}
 800c14e:	6819      	ldr	r1, [r3, #0]
 800c150:	6808      	ldr	r0, [r1, #0]
 800c152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c156:	f01e 0f10 	tst.w	lr, #16
 800c15a:	bf08      	it	eq
 800c15c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c160:	f380 8809 	msr	PSP, r0
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	f3af 8000 	nop.w

0800c170 <pxCurrentTCBConst>:
 800c170:	20008da4 	.word	0x20008da4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop

0800c178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	607b      	str	r3, [r7, #4]
}
 800c190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c192:	f7fe fea5 	bl	800aee0 <xTaskIncrementTick>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d003      	beq.n	800c1a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c19c:	4b06      	ldr	r3, [pc, #24]	@ (800c1b8 <xPortSysTickHandler+0x40>)
 800c19e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f383 8811 	msr	BASEPRI, r3
}
 800c1ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	e000ed04 	.word	0xe000ed04

0800c1bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f0 <vPortSetupTimerInterrupt+0x34>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f4 <vPortSetupTimerInterrupt+0x38>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c1f8 <vPortSetupTimerInterrupt+0x3c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c1fc <vPortSetupTimerInterrupt+0x40>)
 800c1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d6:	099b      	lsrs	r3, r3, #6
 800c1d8:	4a09      	ldr	r2, [pc, #36]	@ (800c200 <vPortSetupTimerInterrupt+0x44>)
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c1de:	4b04      	ldr	r3, [pc, #16]	@ (800c1f0 <vPortSetupTimerInterrupt+0x34>)
 800c1e0:	2207      	movs	r2, #7
 800c1e2:	601a      	str	r2, [r3, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	e000e010 	.word	0xe000e010
 800c1f4:	e000e018 	.word	0xe000e018
 800c1f8:	20000008 	.word	0x20000008
 800c1fc:	10624dd3 	.word	0x10624dd3
 800c200:	e000e014 	.word	0xe000e014

0800c204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c214 <vPortEnableVFP+0x10>
 800c208:	6801      	ldr	r1, [r0, #0]
 800c20a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c20e:	6001      	str	r1, [r0, #0]
 800c210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c212:	bf00      	nop
 800c214:	e000ed88 	.word	0xe000ed88

0800c218 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c21e:	f3ef 8305 	mrs	r3, IPSR
 800c222:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b0f      	cmp	r3, #15
 800c228:	d915      	bls.n	800c256 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c22a:	4a18      	ldr	r2, [pc, #96]	@ (800c28c <vPortValidateInterruptPriority+0x74>)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c234:	4b16      	ldr	r3, [pc, #88]	@ (800c290 <vPortValidateInterruptPriority+0x78>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	7afa      	ldrb	r2, [r7, #11]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d20b      	bcs.n	800c256 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c242:	f383 8811 	msr	BASEPRI, r3
 800c246:	f3bf 8f6f 	isb	sy
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	607b      	str	r3, [r7, #4]
}
 800c250:	bf00      	nop
 800c252:	bf00      	nop
 800c254:	e7fd      	b.n	800c252 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c256:	4b0f      	ldr	r3, [pc, #60]	@ (800c294 <vPortValidateInterruptPriority+0x7c>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c25e:	4b0e      	ldr	r3, [pc, #56]	@ (800c298 <vPortValidateInterruptPriority+0x80>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	429a      	cmp	r2, r3
 800c264:	d90b      	bls.n	800c27e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	603b      	str	r3, [r7, #0]
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	e7fd      	b.n	800c27a <vPortValidateInterruptPriority+0x62>
	}
 800c27e:	bf00      	nop
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	e000e3f0 	.word	0xe000e3f0
 800c290:	200093d0 	.word	0x200093d0
 800c294:	e000ed0c 	.word	0xe000ed0c
 800c298:	200093d4 	.word	0x200093d4

0800c29c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b08a      	sub	sp, #40	@ 0x28
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2a8:	f7fe fd5e 	bl	800ad68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c420 <pvPortMalloc+0x184>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2b4:	f000 f924 	bl	800c500 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c424 <pvPortMalloc+0x188>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 8095 	bne.w	800c3f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d01e      	beq.n	800c30a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c2cc:	2208      	movs	r2, #8
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f003 0307 	and.w	r3, r3, #7
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d015      	beq.n	800c30a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f023 0307 	bic.w	r3, r3, #7
 800c2e4:	3308      	adds	r3, #8
 800c2e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f003 0307 	and.w	r3, r3, #7
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00b      	beq.n	800c30a <pvPortMalloc+0x6e>
	__asm volatile
 800c2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	617b      	str	r3, [r7, #20]
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	e7fd      	b.n	800c306 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d06f      	beq.n	800c3f0 <pvPortMalloc+0x154>
 800c310:	4b45      	ldr	r3, [pc, #276]	@ (800c428 <pvPortMalloc+0x18c>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	429a      	cmp	r2, r3
 800c318:	d86a      	bhi.n	800c3f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c31a:	4b44      	ldr	r3, [pc, #272]	@ (800c42c <pvPortMalloc+0x190>)
 800c31c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c31e:	4b43      	ldr	r3, [pc, #268]	@ (800c42c <pvPortMalloc+0x190>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c324:	e004      	b.n	800c330 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	429a      	cmp	r2, r3
 800c338:	d903      	bls.n	800c342 <pvPortMalloc+0xa6>
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1f1      	bne.n	800c326 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c342:	4b37      	ldr	r3, [pc, #220]	@ (800c420 <pvPortMalloc+0x184>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c348:	429a      	cmp	r2, r3
 800c34a:	d051      	beq.n	800c3f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2208      	movs	r2, #8
 800c352:	4413      	add	r3, r2
 800c354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	1ad2      	subs	r2, r2, r3
 800c366:	2308      	movs	r3, #8
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d920      	bls.n	800c3b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c36e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4413      	add	r3, r2
 800c374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	f003 0307 	and.w	r3, r3, #7
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00b      	beq.n	800c398 <pvPortMalloc+0xfc>
	__asm volatile
 800c380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	613b      	str	r3, [r7, #16]
}
 800c392:	bf00      	nop
 800c394:	bf00      	nop
 800c396:	e7fd      	b.n	800c394 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3aa:	69b8      	ldr	r0, [r7, #24]
 800c3ac:	f000 f90a 	bl	800c5c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3be:	4b1a      	ldr	r3, [pc, #104]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3c0:	681a      	ldr	r2, [r3, #0]
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c430 <pvPortMalloc+0x194>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d203      	bcs.n	800c3d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3ca:	4b17      	ldr	r3, [pc, #92]	@ (800c428 <pvPortMalloc+0x18c>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a18      	ldr	r2, [pc, #96]	@ (800c430 <pvPortMalloc+0x194>)
 800c3d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	4b13      	ldr	r3, [pc, #76]	@ (800c424 <pvPortMalloc+0x188>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	431a      	orrs	r2, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3e6:	4b13      	ldr	r3, [pc, #76]	@ (800c434 <pvPortMalloc+0x198>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	4a11      	ldr	r2, [pc, #68]	@ (800c434 <pvPortMalloc+0x198>)
 800c3ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3f0:	f7fe fcc8 	bl	800ad84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	f003 0307 	and.w	r3, r3, #7
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00b      	beq.n	800c416 <pvPortMalloc+0x17a>
	__asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	60fb      	str	r3, [r7, #12]
}
 800c410:	bf00      	nop
 800c412:	bf00      	nop
 800c414:	e7fd      	b.n	800c412 <pvPortMalloc+0x176>
	return pvReturn;
 800c416:	69fb      	ldr	r3, [r7, #28]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3728      	adds	r7, #40	@ 0x28
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	2000cfe0 	.word	0x2000cfe0
 800c424:	2000cff4 	.word	0x2000cff4
 800c428:	2000cfe4 	.word	0x2000cfe4
 800c42c:	2000cfd8 	.word	0x2000cfd8
 800c430:	2000cfe8 	.word	0x2000cfe8
 800c434:	2000cfec 	.word	0x2000cfec

0800c438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b086      	sub	sp, #24
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d04f      	beq.n	800c4ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c44a:	2308      	movs	r3, #8
 800c44c:	425b      	negs	r3, r3
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	4413      	add	r3, r2
 800c452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b25      	ldr	r3, [pc, #148]	@ (800c4f4 <vPortFree+0xbc>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4013      	ands	r3, r2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d10b      	bne.n	800c47e <vPortFree+0x46>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60fb      	str	r3, [r7, #12]
}
 800c478:	bf00      	nop
 800c47a:	bf00      	nop
 800c47c:	e7fd      	b.n	800c47a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <vPortFree+0x66>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	60bb      	str	r3, [r7, #8]
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	e7fd      	b.n	800c49a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	4b14      	ldr	r3, [pc, #80]	@ (800c4f4 <vPortFree+0xbc>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d01e      	beq.n	800c4ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d11a      	bne.n	800c4ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f4 <vPortFree+0xbc>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	43db      	mvns	r3, r3
 800c4be:	401a      	ands	r2, r3
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4c4:	f7fe fc50 	bl	800ad68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f8 <vPortFree+0xc0>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	4a09      	ldr	r2, [pc, #36]	@ (800c4f8 <vPortFree+0xc0>)
 800c4d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4d6:	6938      	ldr	r0, [r7, #16]
 800c4d8:	f000 f874 	bl	800c5c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4dc:	4b07      	ldr	r3, [pc, #28]	@ (800c4fc <vPortFree+0xc4>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	4a06      	ldr	r2, [pc, #24]	@ (800c4fc <vPortFree+0xc4>)
 800c4e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4e6:	f7fe fc4d 	bl	800ad84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4ea:	bf00      	nop
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	2000cff4 	.word	0x2000cff4
 800c4f8:	2000cfe4 	.word	0x2000cfe4
 800c4fc:	2000cff0 	.word	0x2000cff0

0800c500 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c506:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c50a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c50c:	4b27      	ldr	r3, [pc, #156]	@ (800c5ac <prvHeapInit+0xac>)
 800c50e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f003 0307 	and.w	r3, r3, #7
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00c      	beq.n	800c534 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	3307      	adds	r3, #7
 800c51e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 0307 	bic.w	r3, r3, #7
 800c526:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	4a1f      	ldr	r2, [pc, #124]	@ (800c5ac <prvHeapInit+0xac>)
 800c530:	4413      	add	r3, r2
 800c532:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c538:	4a1d      	ldr	r2, [pc, #116]	@ (800c5b0 <prvHeapInit+0xb0>)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c53e:	4b1c      	ldr	r3, [pc, #112]	@ (800c5b0 <prvHeapInit+0xb0>)
 800c540:	2200      	movs	r2, #0
 800c542:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	4413      	add	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c54c:	2208      	movs	r2, #8
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	1a9b      	subs	r3, r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0307 	bic.w	r3, r3, #7
 800c55a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4a15      	ldr	r2, [pc, #84]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c560:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c562:	4b14      	ldr	r3, [pc, #80]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2200      	movs	r2, #0
 800c568:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c56a:	4b12      	ldr	r3, [pc, #72]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	2200      	movs	r2, #0
 800c570:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	1ad2      	subs	r2, r2, r3
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c580:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b4 <prvHeapInit+0xb4>)
 800c582:	681a      	ldr	r2, [r3, #0]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	4a0a      	ldr	r2, [pc, #40]	@ (800c5b8 <prvHeapInit+0xb8>)
 800c58e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	4a09      	ldr	r2, [pc, #36]	@ (800c5bc <prvHeapInit+0xbc>)
 800c596:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c598:	4b09      	ldr	r3, [pc, #36]	@ (800c5c0 <prvHeapInit+0xc0>)
 800c59a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c59e:	601a      	str	r2, [r3, #0]
}
 800c5a0:	bf00      	nop
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	200093d8 	.word	0x200093d8
 800c5b0:	2000cfd8 	.word	0x2000cfd8
 800c5b4:	2000cfe0 	.word	0x2000cfe0
 800c5b8:	2000cfe8 	.word	0x2000cfe8
 800c5bc:	2000cfe4 	.word	0x2000cfe4
 800c5c0:	2000cff4 	.word	0x2000cff4

0800c5c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b085      	sub	sp, #20
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5cc:	4b28      	ldr	r3, [pc, #160]	@ (800c670 <prvInsertBlockIntoFreeList+0xac>)
 800c5ce:	60fb      	str	r3, [r7, #12]
 800c5d0:	e002      	b.n	800c5d8 <prvInsertBlockIntoFreeList+0x14>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d8f7      	bhi.n	800c5d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d108      	bne.n	800c606 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	441a      	add	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	441a      	add	r2, r3
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d118      	bne.n	800c64c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b15      	ldr	r3, [pc, #84]	@ (800c674 <prvInsertBlockIntoFreeList+0xb0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d00d      	beq.n	800c642 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	441a      	add	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	e008      	b.n	800c654 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c642:	4b0c      	ldr	r3, [pc, #48]	@ (800c674 <prvInsertBlockIntoFreeList+0xb0>)
 800c644:	681a      	ldr	r2, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	e003      	b.n	800c654 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d002      	beq.n	800c662 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c662:	bf00      	nop
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	2000cfd8 	.word	0x2000cfd8
 800c674:	2000cfe0 	.word	0x2000cfe0

0800c678 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c678:	4b04      	ldr	r3, [pc, #16]	@ (800c68c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	b10a      	cbz	r2, 800c682 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800c67e:	4803      	ldr	r0, [pc, #12]	@ (800c68c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c680:	4770      	bx	lr
 800c682:	4a03      	ldr	r2, [pc, #12]	@ (800c690 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800c684:	4801      	ldr	r0, [pc, #4]	@ (800c68c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800c686:	6812      	ldr	r2, [r2, #0]
 800c688:	601a      	str	r2, [r3, #0]
 800c68a:	4770      	bx	lr
 800c68c:	20000020 	.word	0x20000020
 800c690:	2000030c 	.word	0x2000030c

0800c694 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c694:	4a02      	ldr	r2, [pc, #8]	@ (800c6a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800c696:	4b03      	ldr	r3, [pc, #12]	@ (800c6a4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800c698:	6812      	ldr	r2, [r2, #0]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	2000030c 	.word	0x2000030c
 800c6a4:	20000020 	.word	0x20000020

0800c6a8 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800c6a8:	f005 bf3c 	b.w	8012524 <geometry_msgs__msg__Twist__init>

0800c6ac <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800c6ac:	f005 bf5e 	b.w	801256c <geometry_msgs__msg__Twist__fini>

0800c6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c6b0:	b510      	push	{r4, lr}
 800c6b2:	f000 f819 	bl	800c6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c6b6:	4c07      	ldr	r4, [pc, #28]	@ (800c6d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800c6b8:	60e0      	str	r0, [r4, #12]
 800c6ba:	f000 f815 	bl	800c6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c6be:	4b06      	ldr	r3, [pc, #24]	@ (800c6d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c6c0:	64a0      	str	r0, [r4, #72]	@ 0x48
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	b10a      	cbz	r2, 800c6ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800c6c6:	4804      	ldr	r0, [pc, #16]	@ (800c6d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c6c8:	bd10      	pop	{r4, pc}
 800c6ca:	4a04      	ldr	r2, [pc, #16]	@ (800c6dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800c6cc:	4802      	ldr	r0, [pc, #8]	@ (800c6d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	601a      	str	r2, [r3, #0]
 800c6d2:	bd10      	pop	{r4, pc}
 800c6d4:	2000002c 	.word	0x2000002c
 800c6d8:	200000a4 	.word	0x200000a4
 800c6dc:	20000310 	.word	0x20000310

0800c6e0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800c6e0:	f005 bf50 	b.w	8012584 <geometry_msgs__msg__Vector3__init>

0800c6e4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800c6e4:	f005 bf52 	b.w	801258c <geometry_msgs__msg__Vector3__fini>

0800c6e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c6e8:	4b04      	ldr	r3, [pc, #16]	@ (800c6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	b10a      	cbz	r2, 800c6f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800c6ee:	4803      	ldr	r0, [pc, #12]	@ (800c6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c6f0:	4770      	bx	lr
 800c6f2:	4a03      	ldr	r2, [pc, #12]	@ (800c700 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800c6f4:	4801      	ldr	r0, [pc, #4]	@ (800c6fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800c6f6:	6812      	ldr	r2, [r2, #0]
 800c6f8:	601a      	str	r2, [r3, #0]
 800c6fa:	4770      	bx	lr
 800c6fc:	20000164 	.word	0x20000164
 800c700:	20000310 	.word	0x20000310

0800c704 <get_serialized_size_geometry_msgs__msg__Twist>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	4604      	mov	r4, r0
 800c708:	b148      	cbz	r0, 800c71e <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800c70a:	460d      	mov	r5, r1
 800c70c:	f000 f86e 	bl	800c7ec <get_serialized_size_geometry_msgs__msg__Vector3>
 800c710:	4606      	mov	r6, r0
 800c712:	1829      	adds	r1, r5, r0
 800c714:	f104 0018 	add.w	r0, r4, #24
 800c718:	f000 f868 	bl	800c7ec <get_serialized_size_geometry_msgs__msg__Vector3>
 800c71c:	4430      	add	r0, r6
 800c71e:	bd70      	pop	{r4, r5, r6, pc}

0800c720 <_Twist__cdr_deserialize>:
 800c720:	b570      	push	{r4, r5, r6, lr}
 800c722:	460c      	mov	r4, r1
 800c724:	b189      	cbz	r1, 800c74a <_Twist__cdr_deserialize+0x2a>
 800c726:	4605      	mov	r5, r0
 800c728:	f000 f8ec 	bl	800c904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c72c:	6843      	ldr	r3, [r0, #4]
 800c72e:	4621      	mov	r1, r4
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	4628      	mov	r0, r5
 800c734:	4798      	blx	r3
 800c736:	f000 f8e5 	bl	800c904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c73a:	6843      	ldr	r3, [r0, #4]
 800c73c:	f104 0118 	add.w	r1, r4, #24
 800c740:	4628      	mov	r0, r5
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c748:	4718      	bx	r3
 800c74a:	4608      	mov	r0, r1
 800c74c:	bd70      	pop	{r4, r5, r6, pc}
 800c74e:	bf00      	nop

0800c750 <_Twist__cdr_serialize>:
 800c750:	b510      	push	{r4, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	9101      	str	r1, [sp, #4]
 800c756:	b190      	cbz	r0, 800c77e <_Twist__cdr_serialize+0x2e>
 800c758:	4604      	mov	r4, r0
 800c75a:	f000 f8d3 	bl	800c904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c75e:	6843      	ldr	r3, [r0, #4]
 800c760:	9901      	ldr	r1, [sp, #4]
 800c762:	689b      	ldr	r3, [r3, #8]
 800c764:	4620      	mov	r0, r4
 800c766:	4798      	blx	r3
 800c768:	f000 f8cc 	bl	800c904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800c76c:	6843      	ldr	r3, [r0, #4]
 800c76e:	9901      	ldr	r1, [sp, #4]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	f104 0018 	add.w	r0, r4, #24
 800c776:	b002      	add	sp, #8
 800c778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c77c:	4718      	bx	r3
 800c77e:	b002      	add	sp, #8
 800c780:	bd10      	pop	{r4, pc}
 800c782:	bf00      	nop

0800c784 <_Twist__get_serialized_size>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4604      	mov	r4, r0
 800c788:	b148      	cbz	r0, 800c79e <_Twist__get_serialized_size+0x1a>
 800c78a:	2100      	movs	r1, #0
 800c78c:	f000 f82e 	bl	800c7ec <get_serialized_size_geometry_msgs__msg__Vector3>
 800c790:	4605      	mov	r5, r0
 800c792:	4601      	mov	r1, r0
 800c794:	f104 0018 	add.w	r0, r4, #24
 800c798:	f000 f828 	bl	800c7ec <get_serialized_size_geometry_msgs__msg__Vector3>
 800c79c:	4428      	add	r0, r5
 800c79e:	bd38      	pop	{r3, r4, r5, pc}

0800c7a0 <_Twist__max_serialized_size>:
 800c7a0:	b510      	push	{r4, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	f10d 0007 	add.w	r0, sp, #7
 800c7ac:	f88d 3007 	strb.w	r3, [sp, #7]
 800c7b0:	f000 f88c 	bl	800c8cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	4601      	mov	r1, r0
 800c7b8:	f10d 0007 	add.w	r0, sp, #7
 800c7bc:	f000 f886 	bl	800c8cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7c0:	4420      	add	r0, r4
 800c7c2:	b002      	add	sp, #8
 800c7c4:	bd10      	pop	{r4, pc}
 800c7c6:	bf00      	nop

0800c7c8 <max_serialized_size_geometry_msgs__msg__Twist>:
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	b570      	push	{r4, r5, r6, lr}
 800c7cc:	7003      	strb	r3, [r0, #0]
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	460e      	mov	r6, r1
 800c7d2:	f000 f87b 	bl	800c8cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	1831      	adds	r1, r6, r0
 800c7da:	4628      	mov	r0, r5
 800c7dc:	f000 f876 	bl	800c8cc <max_serialized_size_geometry_msgs__msg__Vector3>
 800c7e0:	4420      	add	r0, r4
 800c7e2:	bd70      	pop	{r4, r5, r6, pc}

0800c7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800c7e4:	4800      	ldr	r0, [pc, #0]	@ (800c7e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800c7e6:	4770      	bx	lr
 800c7e8:	20000170 	.word	0x20000170

0800c7ec <get_serialized_size_geometry_msgs__msg__Vector3>:
 800c7ec:	b1b8      	cbz	r0, 800c81e <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800c7ee:	b538      	push	{r3, r4, r5, lr}
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	2108      	movs	r1, #8
 800c7f6:	f001 fb9d 	bl	800df34 <ucdr_alignment>
 800c7fa:	f105 0308 	add.w	r3, r5, #8
 800c7fe:	181c      	adds	r4, r3, r0
 800c800:	2108      	movs	r1, #8
 800c802:	4620      	mov	r0, r4
 800c804:	f001 fb96 	bl	800df34 <ucdr_alignment>
 800c808:	3008      	adds	r0, #8
 800c80a:	4404      	add	r4, r0
 800c80c:	2108      	movs	r1, #8
 800c80e:	4620      	mov	r0, r4
 800c810:	f001 fb90 	bl	800df34 <ucdr_alignment>
 800c814:	f1c5 0508 	rsb	r5, r5, #8
 800c818:	4428      	add	r0, r5
 800c81a:	4420      	add	r0, r4
 800c81c:	bd38      	pop	{r3, r4, r5, pc}
 800c81e:	4770      	bx	lr

0800c820 <_Vector3__cdr_deserialize>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	460c      	mov	r4, r1
 800c824:	b171      	cbz	r1, 800c844 <_Vector3__cdr_deserialize+0x24>
 800c826:	4605      	mov	r5, r0
 800c828:	f001 f998 	bl	800db5c <ucdr_deserialize_double>
 800c82c:	f104 0108 	add.w	r1, r4, #8
 800c830:	4628      	mov	r0, r5
 800c832:	f001 f993 	bl	800db5c <ucdr_deserialize_double>
 800c836:	f104 0110 	add.w	r1, r4, #16
 800c83a:	4628      	mov	r0, r5
 800c83c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c840:	f001 b98c 	b.w	800db5c <ucdr_deserialize_double>
 800c844:	4608      	mov	r0, r1
 800c846:	bd38      	pop	{r3, r4, r5, pc}

0800c848 <_Vector3__cdr_serialize>:
 800c848:	b198      	cbz	r0, 800c872 <_Vector3__cdr_serialize+0x2a>
 800c84a:	b538      	push	{r3, r4, r5, lr}
 800c84c:	ed90 0b00 	vldr	d0, [r0]
 800c850:	460d      	mov	r5, r1
 800c852:	4604      	mov	r4, r0
 800c854:	4608      	mov	r0, r1
 800c856:	f000 ffdf 	bl	800d818 <ucdr_serialize_double>
 800c85a:	ed94 0b02 	vldr	d0, [r4, #8]
 800c85e:	4628      	mov	r0, r5
 800c860:	f000 ffda 	bl	800d818 <ucdr_serialize_double>
 800c864:	ed94 0b04 	vldr	d0, [r4, #16]
 800c868:	4628      	mov	r0, r5
 800c86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c86e:	f000 bfd3 	b.w	800d818 <ucdr_serialize_double>
 800c872:	4770      	bx	lr

0800c874 <_Vector3__get_serialized_size>:
 800c874:	b198      	cbz	r0, 800c89e <_Vector3__get_serialized_size+0x2a>
 800c876:	b510      	push	{r4, lr}
 800c878:	2108      	movs	r1, #8
 800c87a:	2000      	movs	r0, #0
 800c87c:	f001 fb5a 	bl	800df34 <ucdr_alignment>
 800c880:	f100 0408 	add.w	r4, r0, #8
 800c884:	2108      	movs	r1, #8
 800c886:	4620      	mov	r0, r4
 800c888:	f001 fb54 	bl	800df34 <ucdr_alignment>
 800c88c:	3008      	adds	r0, #8
 800c88e:	4404      	add	r4, r0
 800c890:	2108      	movs	r1, #8
 800c892:	4620      	mov	r0, r4
 800c894:	f001 fb4e 	bl	800df34 <ucdr_alignment>
 800c898:	3008      	adds	r0, #8
 800c89a:	4420      	add	r0, r4
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	4770      	bx	lr

0800c8a0 <_Vector3__max_serialized_size>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	2108      	movs	r1, #8
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	f001 fb45 	bl	800df34 <ucdr_alignment>
 800c8aa:	f100 0508 	add.w	r5, r0, #8
 800c8ae:	2108      	movs	r1, #8
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f001 fb3f 	bl	800df34 <ucdr_alignment>
 800c8b6:	f100 0408 	add.w	r4, r0, #8
 800c8ba:	442c      	add	r4, r5
 800c8bc:	2108      	movs	r1, #8
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f001 fb38 	bl	800df34 <ucdr_alignment>
 800c8c4:	3008      	adds	r0, #8
 800c8c6:	4420      	add	r0, r4
 800c8c8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ca:	bf00      	nop

0800c8cc <max_serialized_size_geometry_msgs__msg__Vector3>:
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	7003      	strb	r3, [r0, #0]
 800c8d4:	2108      	movs	r1, #8
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f001 fb2c 	bl	800df34 <ucdr_alignment>
 800c8dc:	f104 0508 	add.w	r5, r4, #8
 800c8e0:	1946      	adds	r6, r0, r5
 800c8e2:	2108      	movs	r1, #8
 800c8e4:	4630      	mov	r0, r6
 800c8e6:	f001 fb25 	bl	800df34 <ucdr_alignment>
 800c8ea:	f100 0508 	add.w	r5, r0, #8
 800c8ee:	4435      	add	r5, r6
 800c8f0:	2108      	movs	r1, #8
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f001 fb1e 	bl	800df34 <ucdr_alignment>
 800c8f8:	f1c4 0408 	rsb	r4, r4, #8
 800c8fc:	4420      	add	r0, r4
 800c8fe:	4428      	add	r0, r5
 800c900:	bd70      	pop	{r4, r5, r6, pc}
 800c902:	bf00      	nop

0800c904 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800c904:	4800      	ldr	r0, [pc, #0]	@ (800c908 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800c906:	4770      	bx	lr
 800c908:	20000198 	.word	0x20000198

0800c90c <ucdr_serialize_bool>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	460d      	mov	r5, r1
 800c910:	2101      	movs	r1, #1
 800c912:	4604      	mov	r4, r0
 800c914:	f001 fac2 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800c918:	b148      	cbz	r0, 800c92e <ucdr_serialize_bool+0x22>
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	701d      	strb	r5, [r3, #0]
 800c91e:	68a2      	ldr	r2, [r4, #8]
 800c920:	6923      	ldr	r3, [r4, #16]
 800c922:	2101      	movs	r1, #1
 800c924:	440a      	add	r2, r1
 800c926:	440b      	add	r3, r1
 800c928:	60a2      	str	r2, [r4, #8]
 800c92a:	6123      	str	r3, [r4, #16]
 800c92c:	7561      	strb	r1, [r4, #21]
 800c92e:	7da0      	ldrb	r0, [r4, #22]
 800c930:	f080 0001 	eor.w	r0, r0, #1
 800c934:	bd38      	pop	{r3, r4, r5, pc}
 800c936:	bf00      	nop

0800c938 <ucdr_deserialize_bool>:
 800c938:	b538      	push	{r3, r4, r5, lr}
 800c93a:	460d      	mov	r5, r1
 800c93c:	2101      	movs	r1, #1
 800c93e:	4604      	mov	r4, r0
 800c940:	f001 faac 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800c944:	b160      	cbz	r0, 800c960 <ucdr_deserialize_bool+0x28>
 800c946:	68a2      	ldr	r2, [r4, #8]
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c94e:	3900      	subs	r1, #0
 800c950:	bf18      	it	ne
 800c952:	2101      	movne	r1, #1
 800c954:	7029      	strb	r1, [r5, #0]
 800c956:	3301      	adds	r3, #1
 800c958:	2101      	movs	r1, #1
 800c95a:	60a2      	str	r2, [r4, #8]
 800c95c:	6123      	str	r3, [r4, #16]
 800c95e:	7561      	strb	r1, [r4, #21]
 800c960:	7da0      	ldrb	r0, [r4, #22]
 800c962:	f080 0001 	eor.w	r0, r0, #1
 800c966:	bd38      	pop	{r3, r4, r5, pc}

0800c968 <ucdr_serialize_uint8_t>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	460d      	mov	r5, r1
 800c96c:	2101      	movs	r1, #1
 800c96e:	4604      	mov	r4, r0
 800c970:	f001 fa94 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800c974:	b148      	cbz	r0, 800c98a <ucdr_serialize_uint8_t+0x22>
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	701d      	strb	r5, [r3, #0]
 800c97a:	68a2      	ldr	r2, [r4, #8]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	2101      	movs	r1, #1
 800c980:	440a      	add	r2, r1
 800c982:	440b      	add	r3, r1
 800c984:	60a2      	str	r2, [r4, #8]
 800c986:	6123      	str	r3, [r4, #16]
 800c988:	7561      	strb	r1, [r4, #21]
 800c98a:	7da0      	ldrb	r0, [r4, #22]
 800c98c:	f080 0001 	eor.w	r0, r0, #1
 800c990:	bd38      	pop	{r3, r4, r5, pc}
 800c992:	bf00      	nop

0800c994 <ucdr_deserialize_uint8_t>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	460d      	mov	r5, r1
 800c998:	2101      	movs	r1, #1
 800c99a:	4604      	mov	r4, r0
 800c99c:	f001 fa7e 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800c9a0:	b150      	cbz	r0, 800c9b8 <ucdr_deserialize_uint8_t+0x24>
 800c9a2:	68a3      	ldr	r3, [r4, #8]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	702b      	strb	r3, [r5, #0]
 800c9a8:	68a2      	ldr	r2, [r4, #8]
 800c9aa:	6923      	ldr	r3, [r4, #16]
 800c9ac:	2101      	movs	r1, #1
 800c9ae:	440a      	add	r2, r1
 800c9b0:	440b      	add	r3, r1
 800c9b2:	60a2      	str	r2, [r4, #8]
 800c9b4:	6123      	str	r3, [r4, #16]
 800c9b6:	7561      	strb	r1, [r4, #21]
 800c9b8:	7da0      	ldrb	r0, [r4, #22]
 800c9ba:	f080 0001 	eor.w	r0, r0, #1
 800c9be:	bd38      	pop	{r3, r4, r5, pc}

0800c9c0 <ucdr_serialize_uint16_t>:
 800c9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	2102      	movs	r1, #2
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c9d0:	f001 fab8 	bl	800df44 <ucdr_buffer_alignment>
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	7d67      	ldrb	r7, [r4, #21]
 800c9da:	f001 faf7 	bl	800dfcc <ucdr_advance_buffer>
 800c9de:	2102      	movs	r1, #2
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f001 fa4f 	bl	800de84 <ucdr_check_buffer_available_for>
 800c9e6:	bb78      	cbnz	r0, 800ca48 <ucdr_serialize_uint16_t+0x88>
 800c9e8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c9ec:	42ab      	cmp	r3, r5
 800c9ee:	d926      	bls.n	800ca3e <ucdr_serialize_uint16_t+0x7e>
 800c9f0:	1b5e      	subs	r6, r3, r5
 800c9f2:	60a3      	str	r3, [r4, #8]
 800c9f4:	6923      	ldr	r3, [r4, #16]
 800c9f6:	f1c6 0802 	rsb	r8, r6, #2
 800c9fa:	4433      	add	r3, r6
 800c9fc:	6123      	str	r3, [r4, #16]
 800c9fe:	4641      	mov	r1, r8
 800ca00:	4620      	mov	r0, r4
 800ca02:	f001 fa4b 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d03b      	beq.n	800ca82 <ucdr_serialize_uint16_t+0xc2>
 800ca0a:	7d23      	ldrb	r3, [r4, #20]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d04a      	beq.n	800caa6 <ucdr_serialize_uint16_t+0xe6>
 800ca10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca14:	702b      	strb	r3, [r5, #0]
 800ca16:	2e00      	cmp	r6, #0
 800ca18:	d040      	beq.n	800ca9c <ucdr_serialize_uint16_t+0xdc>
 800ca1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca1e:	706b      	strb	r3, [r5, #1]
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	68a2      	ldr	r2, [r4, #8]
 800ca24:	7da0      	ldrb	r0, [r4, #22]
 800ca26:	3302      	adds	r3, #2
 800ca28:	1b9e      	subs	r6, r3, r6
 800ca2a:	4442      	add	r2, r8
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	f080 0001 	eor.w	r0, r0, #1
 800ca32:	60a2      	str	r2, [r4, #8]
 800ca34:	6126      	str	r6, [r4, #16]
 800ca36:	7563      	strb	r3, [r4, #21]
 800ca38:	b002      	add	sp, #8
 800ca3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3e:	2102      	movs	r1, #2
 800ca40:	4620      	mov	r0, r4
 800ca42:	f001 fa2b 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800ca46:	b190      	cbz	r0, 800ca6e <ucdr_serialize_uint16_t+0xae>
 800ca48:	7d23      	ldrb	r3, [r4, #20]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	68a3      	ldr	r3, [r4, #8]
 800ca4e:	d014      	beq.n	800ca7a <ucdr_serialize_uint16_t+0xba>
 800ca50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	68a3      	ldr	r3, [r4, #8]
 800ca58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca5c:	705a      	strb	r2, [r3, #1]
 800ca5e:	68a2      	ldr	r2, [r4, #8]
 800ca60:	6923      	ldr	r3, [r4, #16]
 800ca62:	3202      	adds	r2, #2
 800ca64:	3302      	adds	r3, #2
 800ca66:	2102      	movs	r1, #2
 800ca68:	60a2      	str	r2, [r4, #8]
 800ca6a:	6123      	str	r3, [r4, #16]
 800ca6c:	7561      	strb	r1, [r4, #21]
 800ca6e:	7da0      	ldrb	r0, [r4, #22]
 800ca70:	f080 0001 	eor.w	r0, r0, #1
 800ca74:	b002      	add	sp, #8
 800ca76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ca7e:	801a      	strh	r2, [r3, #0]
 800ca80:	e7ed      	b.n	800ca5e <ucdr_serialize_uint16_t+0x9e>
 800ca82:	68a2      	ldr	r2, [r4, #8]
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	7da0      	ldrb	r0, [r4, #22]
 800ca88:	7567      	strb	r7, [r4, #21]
 800ca8a:	1b92      	subs	r2, r2, r6
 800ca8c:	1b9b      	subs	r3, r3, r6
 800ca8e:	f080 0001 	eor.w	r0, r0, #1
 800ca92:	60a2      	str	r2, [r4, #8]
 800ca94:	6123      	str	r3, [r4, #16]
 800ca96:	b002      	add	sp, #8
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	68a3      	ldr	r3, [r4, #8]
 800ca9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caa2:	701a      	strb	r2, [r3, #0]
 800caa4:	e7bc      	b.n	800ca20 <ucdr_serialize_uint16_t+0x60>
 800caa6:	4628      	mov	r0, r5
 800caa8:	f10d 0506 	add.w	r5, sp, #6
 800caac:	4629      	mov	r1, r5
 800caae:	4632      	mov	r2, r6
 800cab0:	f00f fde5 	bl	801c67e <memcpy>
 800cab4:	68a0      	ldr	r0, [r4, #8]
 800cab6:	4642      	mov	r2, r8
 800cab8:	19a9      	adds	r1, r5, r6
 800caba:	f00f fde0 	bl	801c67e <memcpy>
 800cabe:	e7af      	b.n	800ca20 <ucdr_serialize_uint16_t+0x60>

0800cac0 <ucdr_serialize_endian_uint16_t>:
 800cac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cac4:	b083      	sub	sp, #12
 800cac6:	460d      	mov	r5, r1
 800cac8:	2102      	movs	r1, #2
 800caca:	4604      	mov	r4, r0
 800cacc:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cad0:	f001 fa38 	bl	800df44 <ucdr_buffer_alignment>
 800cad4:	4601      	mov	r1, r0
 800cad6:	4620      	mov	r0, r4
 800cad8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cadc:	f001 fa76 	bl	800dfcc <ucdr_advance_buffer>
 800cae0:	2102      	movs	r1, #2
 800cae2:	4620      	mov	r0, r4
 800cae4:	f001 f9ce 	bl	800de84 <ucdr_check_buffer_available_for>
 800cae8:	bb70      	cbnz	r0, 800cb48 <ucdr_serialize_endian_uint16_t+0x88>
 800caea:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800caee:	42be      	cmp	r6, r7
 800caf0:	d925      	bls.n	800cb3e <ucdr_serialize_endian_uint16_t+0x7e>
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	60a6      	str	r6, [r4, #8]
 800caf6:	1bf6      	subs	r6, r6, r7
 800caf8:	4433      	add	r3, r6
 800cafa:	f1c6 0902 	rsb	r9, r6, #2
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	4649      	mov	r1, r9
 800cb02:	4620      	mov	r0, r4
 800cb04:	f001 f9ca 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d039      	beq.n	800cb80 <ucdr_serialize_endian_uint16_t+0xc0>
 800cb0c:	2d01      	cmp	r5, #1
 800cb0e:	d04a      	beq.n	800cba6 <ucdr_serialize_endian_uint16_t+0xe6>
 800cb10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb14:	703b      	strb	r3, [r7, #0]
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	d040      	beq.n	800cb9c <ucdr_serialize_endian_uint16_t+0xdc>
 800cb1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cb1e:	707b      	strb	r3, [r7, #1]
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	68a2      	ldr	r2, [r4, #8]
 800cb24:	7da0      	ldrb	r0, [r4, #22]
 800cb26:	3302      	adds	r3, #2
 800cb28:	444a      	add	r2, r9
 800cb2a:	1b9b      	subs	r3, r3, r6
 800cb2c:	2102      	movs	r1, #2
 800cb2e:	f080 0001 	eor.w	r0, r0, #1
 800cb32:	60a2      	str	r2, [r4, #8]
 800cb34:	6123      	str	r3, [r4, #16]
 800cb36:	7561      	strb	r1, [r4, #21]
 800cb38:	b003      	add	sp, #12
 800cb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	2102      	movs	r1, #2
 800cb40:	4620      	mov	r0, r4
 800cb42:	f001 f9ab 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cb46:	b188      	cbz	r0, 800cb6c <ucdr_serialize_endian_uint16_t+0xac>
 800cb48:	2d01      	cmp	r5, #1
 800cb4a:	68a3      	ldr	r3, [r4, #8]
 800cb4c:	d014      	beq.n	800cb78 <ucdr_serialize_endian_uint16_t+0xb8>
 800cb4e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb52:	701a      	strb	r2, [r3, #0]
 800cb54:	68a3      	ldr	r3, [r4, #8]
 800cb56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb5a:	705a      	strb	r2, [r3, #1]
 800cb5c:	68a2      	ldr	r2, [r4, #8]
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	3202      	adds	r2, #2
 800cb62:	3302      	adds	r3, #2
 800cb64:	2102      	movs	r1, #2
 800cb66:	60a2      	str	r2, [r4, #8]
 800cb68:	6123      	str	r3, [r4, #16]
 800cb6a:	7561      	strb	r1, [r4, #21]
 800cb6c:	7da0      	ldrb	r0, [r4, #22]
 800cb6e:	f080 0001 	eor.w	r0, r0, #1
 800cb72:	b003      	add	sp, #12
 800cb74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cb7c:	801a      	strh	r2, [r3, #0]
 800cb7e:	e7ed      	b.n	800cb5c <ucdr_serialize_endian_uint16_t+0x9c>
 800cb80:	68a2      	ldr	r2, [r4, #8]
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	7da0      	ldrb	r0, [r4, #22]
 800cb86:	f884 8015 	strb.w	r8, [r4, #21]
 800cb8a:	1b92      	subs	r2, r2, r6
 800cb8c:	1b9b      	subs	r3, r3, r6
 800cb8e:	f080 0001 	eor.w	r0, r0, #1
 800cb92:	60a2      	str	r2, [r4, #8]
 800cb94:	6123      	str	r3, [r4, #16]
 800cb96:	b003      	add	sp, #12
 800cb98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb9c:	68a3      	ldr	r3, [r4, #8]
 800cb9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	e7bc      	b.n	800cb20 <ucdr_serialize_endian_uint16_t+0x60>
 800cba6:	f10d 0506 	add.w	r5, sp, #6
 800cbaa:	4629      	mov	r1, r5
 800cbac:	4632      	mov	r2, r6
 800cbae:	4638      	mov	r0, r7
 800cbb0:	f00f fd65 	bl	801c67e <memcpy>
 800cbb4:	68a0      	ldr	r0, [r4, #8]
 800cbb6:	464a      	mov	r2, r9
 800cbb8:	19a9      	adds	r1, r5, r6
 800cbba:	f00f fd60 	bl	801c67e <memcpy>
 800cbbe:	e7af      	b.n	800cb20 <ucdr_serialize_endian_uint16_t+0x60>

0800cbc0 <ucdr_deserialize_uint16_t>:
 800cbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc4:	460d      	mov	r5, r1
 800cbc6:	2102      	movs	r1, #2
 800cbc8:	4604      	mov	r4, r0
 800cbca:	f001 f9bb 	bl	800df44 <ucdr_buffer_alignment>
 800cbce:	4601      	mov	r1, r0
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cbd6:	f001 f9f9 	bl	800dfcc <ucdr_advance_buffer>
 800cbda:	2102      	movs	r1, #2
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f001 f951 	bl	800de84 <ucdr_check_buffer_available_for>
 800cbe2:	bb60      	cbnz	r0, 800cc3e <ucdr_deserialize_uint16_t+0x7e>
 800cbe4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cbe8:	42be      	cmp	r6, r7
 800cbea:	d923      	bls.n	800cc34 <ucdr_deserialize_uint16_t+0x74>
 800cbec:	6923      	ldr	r3, [r4, #16]
 800cbee:	60a6      	str	r6, [r4, #8]
 800cbf0:	1bf6      	subs	r6, r6, r7
 800cbf2:	4433      	add	r3, r6
 800cbf4:	f1c6 0902 	rsb	r9, r6, #2
 800cbf8:	6123      	str	r3, [r4, #16]
 800cbfa:	4649      	mov	r1, r9
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	f001 f94d 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d034      	beq.n	800cc70 <ucdr_deserialize_uint16_t+0xb0>
 800cc06:	7d23      	ldrb	r3, [r4, #20]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d042      	beq.n	800cc92 <ucdr_deserialize_uint16_t+0xd2>
 800cc0c:	787b      	ldrb	r3, [r7, #1]
 800cc0e:	702b      	strb	r3, [r5, #0]
 800cc10:	2e00      	cmp	r6, #0
 800cc12:	d03a      	beq.n	800cc8a <ucdr_deserialize_uint16_t+0xca>
 800cc14:	783b      	ldrb	r3, [r7, #0]
 800cc16:	706b      	strb	r3, [r5, #1]
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	68a2      	ldr	r2, [r4, #8]
 800cc1c:	7da0      	ldrb	r0, [r4, #22]
 800cc1e:	2102      	movs	r1, #2
 800cc20:	3302      	adds	r3, #2
 800cc22:	444a      	add	r2, r9
 800cc24:	1b9b      	subs	r3, r3, r6
 800cc26:	7561      	strb	r1, [r4, #21]
 800cc28:	60a2      	str	r2, [r4, #8]
 800cc2a:	6123      	str	r3, [r4, #16]
 800cc2c:	f080 0001 	eor.w	r0, r0, #1
 800cc30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc34:	2102      	movs	r1, #2
 800cc36:	4620      	mov	r0, r4
 800cc38:	f001 f930 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cc3c:	b180      	cbz	r0, 800cc60 <ucdr_deserialize_uint16_t+0xa0>
 800cc3e:	7d23      	ldrb	r3, [r4, #20]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	68a3      	ldr	r3, [r4, #8]
 800cc44:	d011      	beq.n	800cc6a <ucdr_deserialize_uint16_t+0xaa>
 800cc46:	785b      	ldrb	r3, [r3, #1]
 800cc48:	702b      	strb	r3, [r5, #0]
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	706b      	strb	r3, [r5, #1]
 800cc50:	68a2      	ldr	r2, [r4, #8]
 800cc52:	6923      	ldr	r3, [r4, #16]
 800cc54:	3202      	adds	r2, #2
 800cc56:	3302      	adds	r3, #2
 800cc58:	2102      	movs	r1, #2
 800cc5a:	60a2      	str	r2, [r4, #8]
 800cc5c:	6123      	str	r3, [r4, #16]
 800cc5e:	7561      	strb	r1, [r4, #21]
 800cc60:	7da0      	ldrb	r0, [r4, #22]
 800cc62:	f080 0001 	eor.w	r0, r0, #1
 800cc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc6a:	881b      	ldrh	r3, [r3, #0]
 800cc6c:	802b      	strh	r3, [r5, #0]
 800cc6e:	e7ef      	b.n	800cc50 <ucdr_deserialize_uint16_t+0x90>
 800cc70:	68a2      	ldr	r2, [r4, #8]
 800cc72:	6923      	ldr	r3, [r4, #16]
 800cc74:	7da0      	ldrb	r0, [r4, #22]
 800cc76:	f884 8015 	strb.w	r8, [r4, #21]
 800cc7a:	1b92      	subs	r2, r2, r6
 800cc7c:	1b9b      	subs	r3, r3, r6
 800cc7e:	60a2      	str	r2, [r4, #8]
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	f080 0001 	eor.w	r0, r0, #1
 800cc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8a:	68a3      	ldr	r3, [r4, #8]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	706b      	strb	r3, [r5, #1]
 800cc90:	e7c2      	b.n	800cc18 <ucdr_deserialize_uint16_t+0x58>
 800cc92:	4639      	mov	r1, r7
 800cc94:	4632      	mov	r2, r6
 800cc96:	4628      	mov	r0, r5
 800cc98:	f00f fcf1 	bl	801c67e <memcpy>
 800cc9c:	68a1      	ldr	r1, [r4, #8]
 800cc9e:	464a      	mov	r2, r9
 800cca0:	19a8      	adds	r0, r5, r6
 800cca2:	f00f fcec 	bl	801c67e <memcpy>
 800cca6:	e7b7      	b.n	800cc18 <ucdr_deserialize_uint16_t+0x58>

0800cca8 <ucdr_deserialize_endian_uint16_t>:
 800cca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccac:	460e      	mov	r6, r1
 800ccae:	2102      	movs	r1, #2
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	4615      	mov	r5, r2
 800ccb4:	f001 f946 	bl	800df44 <ucdr_buffer_alignment>
 800ccb8:	4601      	mov	r1, r0
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ccc0:	f001 f984 	bl	800dfcc <ucdr_advance_buffer>
 800ccc4:	2102      	movs	r1, #2
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f001 f8dc 	bl	800de84 <ucdr_check_buffer_available_for>
 800cccc:	bb70      	cbnz	r0, 800cd2c <ucdr_deserialize_endian_uint16_t+0x84>
 800ccce:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ccd2:	4547      	cmp	r7, r8
 800ccd4:	d925      	bls.n	800cd22 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	60a7      	str	r7, [r4, #8]
 800ccda:	eba7 0708 	sub.w	r7, r7, r8
 800ccde:	443b      	add	r3, r7
 800cce0:	f1c7 0a02 	rsb	sl, r7, #2
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	4651      	mov	r1, sl
 800cce8:	4620      	mov	r0, r4
 800ccea:	f001 f8d7 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d034      	beq.n	800cd5c <ucdr_deserialize_endian_uint16_t+0xb4>
 800ccf2:	2e01      	cmp	r6, #1
 800ccf4:	d043      	beq.n	800cd7e <ucdr_deserialize_endian_uint16_t+0xd6>
 800ccf6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ccfa:	702b      	strb	r3, [r5, #0]
 800ccfc:	2f00      	cmp	r7, #0
 800ccfe:	d03a      	beq.n	800cd76 <ucdr_deserialize_endian_uint16_t+0xce>
 800cd00:	f898 3000 	ldrb.w	r3, [r8]
 800cd04:	706b      	strb	r3, [r5, #1]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	68a2      	ldr	r2, [r4, #8]
 800cd0a:	7da0      	ldrb	r0, [r4, #22]
 800cd0c:	2102      	movs	r1, #2
 800cd0e:	3302      	adds	r3, #2
 800cd10:	4452      	add	r2, sl
 800cd12:	1bdb      	subs	r3, r3, r7
 800cd14:	7561      	strb	r1, [r4, #21]
 800cd16:	60a2      	str	r2, [r4, #8]
 800cd18:	6123      	str	r3, [r4, #16]
 800cd1a:	f080 0001 	eor.w	r0, r0, #1
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	2102      	movs	r1, #2
 800cd24:	4620      	mov	r0, r4
 800cd26:	f001 f8b9 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cd2a:	b178      	cbz	r0, 800cd4c <ucdr_deserialize_endian_uint16_t+0xa4>
 800cd2c:	2e01      	cmp	r6, #1
 800cd2e:	68a3      	ldr	r3, [r4, #8]
 800cd30:	d011      	beq.n	800cd56 <ucdr_deserialize_endian_uint16_t+0xae>
 800cd32:	785b      	ldrb	r3, [r3, #1]
 800cd34:	702b      	strb	r3, [r5, #0]
 800cd36:	68a3      	ldr	r3, [r4, #8]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	706b      	strb	r3, [r5, #1]
 800cd3c:	68a2      	ldr	r2, [r4, #8]
 800cd3e:	6923      	ldr	r3, [r4, #16]
 800cd40:	3202      	adds	r2, #2
 800cd42:	3302      	adds	r3, #2
 800cd44:	2102      	movs	r1, #2
 800cd46:	60a2      	str	r2, [r4, #8]
 800cd48:	6123      	str	r3, [r4, #16]
 800cd4a:	7561      	strb	r1, [r4, #21]
 800cd4c:	7da0      	ldrb	r0, [r4, #22]
 800cd4e:	f080 0001 	eor.w	r0, r0, #1
 800cd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	802b      	strh	r3, [r5, #0]
 800cd5a:	e7ef      	b.n	800cd3c <ucdr_deserialize_endian_uint16_t+0x94>
 800cd5c:	68a2      	ldr	r2, [r4, #8]
 800cd5e:	6923      	ldr	r3, [r4, #16]
 800cd60:	7da0      	ldrb	r0, [r4, #22]
 800cd62:	f884 9015 	strb.w	r9, [r4, #21]
 800cd66:	1bd2      	subs	r2, r2, r7
 800cd68:	1bdb      	subs	r3, r3, r7
 800cd6a:	60a2      	str	r2, [r4, #8]
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	f080 0001 	eor.w	r0, r0, #1
 800cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd76:	68a3      	ldr	r3, [r4, #8]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	706b      	strb	r3, [r5, #1]
 800cd7c:	e7c3      	b.n	800cd06 <ucdr_deserialize_endian_uint16_t+0x5e>
 800cd7e:	4641      	mov	r1, r8
 800cd80:	463a      	mov	r2, r7
 800cd82:	4628      	mov	r0, r5
 800cd84:	f00f fc7b 	bl	801c67e <memcpy>
 800cd88:	68a1      	ldr	r1, [r4, #8]
 800cd8a:	4652      	mov	r2, sl
 800cd8c:	19e8      	adds	r0, r5, r7
 800cd8e:	f00f fc76 	bl	801c67e <memcpy>
 800cd92:	e7b8      	b.n	800cd06 <ucdr_deserialize_endian_uint16_t+0x5e>

0800cd94 <ucdr_serialize_uint32_t>:
 800cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	9101      	str	r1, [sp, #4]
 800cd9e:	2104      	movs	r1, #4
 800cda0:	f001 f8d0 	bl	800df44 <ucdr_buffer_alignment>
 800cda4:	4601      	mov	r1, r0
 800cda6:	4620      	mov	r0, r4
 800cda8:	7d67      	ldrb	r7, [r4, #21]
 800cdaa:	f001 f90f 	bl	800dfcc <ucdr_advance_buffer>
 800cdae:	2104      	movs	r1, #4
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f001 f867 	bl	800de84 <ucdr_check_buffer_available_for>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d139      	bne.n	800ce2e <ucdr_serialize_uint32_t+0x9a>
 800cdba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cdbe:	42ab      	cmp	r3, r5
 800cdc0:	d930      	bls.n	800ce24 <ucdr_serialize_uint32_t+0x90>
 800cdc2:	1b5e      	subs	r6, r3, r5
 800cdc4:	60a3      	str	r3, [r4, #8]
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	f1c6 0804 	rsb	r8, r6, #4
 800cdcc:	4433      	add	r3, r6
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	4641      	mov	r1, r8
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f001 f862 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d04c      	beq.n	800ce76 <ucdr_serialize_uint32_t+0xe2>
 800cddc:	7d23      	ldrb	r3, [r4, #20]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d063      	beq.n	800ceaa <ucdr_serialize_uint32_t+0x116>
 800cde2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cde6:	702b      	strb	r3, [r5, #0]
 800cde8:	2e00      	cmp	r6, #0
 800cdea:	d051      	beq.n	800ce90 <ucdr_serialize_uint32_t+0xfc>
 800cdec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cdf0:	706b      	strb	r3, [r5, #1]
 800cdf2:	2e01      	cmp	r6, #1
 800cdf4:	d050      	beq.n	800ce98 <ucdr_serialize_uint32_t+0x104>
 800cdf6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cdfa:	70ab      	strb	r3, [r5, #2]
 800cdfc:	2e02      	cmp	r6, #2
 800cdfe:	d04f      	beq.n	800cea0 <ucdr_serialize_uint32_t+0x10c>
 800ce00:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce04:	70eb      	strb	r3, [r5, #3]
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	68a2      	ldr	r2, [r4, #8]
 800ce0a:	7da0      	ldrb	r0, [r4, #22]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	1b9e      	subs	r6, r3, r6
 800ce10:	4442      	add	r2, r8
 800ce12:	2304      	movs	r3, #4
 800ce14:	f080 0001 	eor.w	r0, r0, #1
 800ce18:	60a2      	str	r2, [r4, #8]
 800ce1a:	6126      	str	r6, [r4, #16]
 800ce1c:	7563      	strb	r3, [r4, #21]
 800ce1e:	b002      	add	sp, #8
 800ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce24:	2104      	movs	r1, #4
 800ce26:	4620      	mov	r0, r4
 800ce28:	f001 f838 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800ce2c:	b1d0      	cbz	r0, 800ce64 <ucdr_serialize_uint32_t+0xd0>
 800ce2e:	7d23      	ldrb	r3, [r4, #20]
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	68a3      	ldr	r3, [r4, #8]
 800ce34:	d01c      	beq.n	800ce70 <ucdr_serialize_uint32_t+0xdc>
 800ce36:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ce3a:	701a      	strb	r2, [r3, #0]
 800ce3c:	68a3      	ldr	r3, [r4, #8]
 800ce3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce42:	705a      	strb	r2, [r3, #1]
 800ce44:	68a3      	ldr	r3, [r4, #8]
 800ce46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce4a:	709a      	strb	r2, [r3, #2]
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ce52:	70da      	strb	r2, [r3, #3]
 800ce54:	68a2      	ldr	r2, [r4, #8]
 800ce56:	6923      	ldr	r3, [r4, #16]
 800ce58:	3204      	adds	r2, #4
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	2104      	movs	r1, #4
 800ce5e:	60a2      	str	r2, [r4, #8]
 800ce60:	6123      	str	r3, [r4, #16]
 800ce62:	7561      	strb	r1, [r4, #21]
 800ce64:	7da0      	ldrb	r0, [r4, #22]
 800ce66:	f080 0001 	eor.w	r0, r0, #1
 800ce6a:	b002      	add	sp, #8
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	9a01      	ldr	r2, [sp, #4]
 800ce72:	601a      	str	r2, [r3, #0]
 800ce74:	e7ee      	b.n	800ce54 <ucdr_serialize_uint32_t+0xc0>
 800ce76:	68a2      	ldr	r2, [r4, #8]
 800ce78:	6923      	ldr	r3, [r4, #16]
 800ce7a:	7da0      	ldrb	r0, [r4, #22]
 800ce7c:	7567      	strb	r7, [r4, #21]
 800ce7e:	1b92      	subs	r2, r2, r6
 800ce80:	1b9b      	subs	r3, r3, r6
 800ce82:	f080 0001 	eor.w	r0, r0, #1
 800ce86:	60a2      	str	r2, [r4, #8]
 800ce88:	6123      	str	r3, [r4, #16]
 800ce8a:	b002      	add	sp, #8
 800ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce90:	68a3      	ldr	r3, [r4, #8]
 800ce92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	68a3      	ldr	r3, [r4, #8]
 800ce9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ce9e:	701a      	strb	r2, [r3, #0]
 800cea0:	68a3      	ldr	r3, [r4, #8]
 800cea2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cea6:	701a      	strb	r2, [r3, #0]
 800cea8:	e7ad      	b.n	800ce06 <ucdr_serialize_uint32_t+0x72>
 800ceaa:	4628      	mov	r0, r5
 800ceac:	ad01      	add	r5, sp, #4
 800ceae:	4629      	mov	r1, r5
 800ceb0:	4632      	mov	r2, r6
 800ceb2:	f00f fbe4 	bl	801c67e <memcpy>
 800ceb6:	68a0      	ldr	r0, [r4, #8]
 800ceb8:	4642      	mov	r2, r8
 800ceba:	19a9      	adds	r1, r5, r6
 800cebc:	f00f fbdf 	bl	801c67e <memcpy>
 800cec0:	e7a1      	b.n	800ce06 <ucdr_serialize_uint32_t+0x72>
 800cec2:	bf00      	nop

0800cec4 <ucdr_serialize_endian_uint32_t>:
 800cec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec8:	b083      	sub	sp, #12
 800ceca:	460d      	mov	r5, r1
 800cecc:	2104      	movs	r1, #4
 800cece:	4604      	mov	r4, r0
 800ced0:	9201      	str	r2, [sp, #4]
 800ced2:	f001 f837 	bl	800df44 <ucdr_buffer_alignment>
 800ced6:	4601      	mov	r1, r0
 800ced8:	4620      	mov	r0, r4
 800ceda:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cede:	f001 f875 	bl	800dfcc <ucdr_advance_buffer>
 800cee2:	2104      	movs	r1, #4
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 ffcd 	bl	800de84 <ucdr_check_buffer_available_for>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d138      	bne.n	800cf60 <ucdr_serialize_endian_uint32_t+0x9c>
 800ceee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cef2:	42b7      	cmp	r7, r6
 800cef4:	d92f      	bls.n	800cf56 <ucdr_serialize_endian_uint32_t+0x92>
 800cef6:	6923      	ldr	r3, [r4, #16]
 800cef8:	60a7      	str	r7, [r4, #8]
 800cefa:	1bbf      	subs	r7, r7, r6
 800cefc:	443b      	add	r3, r7
 800cefe:	f1c7 0904 	rsb	r9, r7, #4
 800cf02:	6123      	str	r3, [r4, #16]
 800cf04:	4649      	mov	r1, r9
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 ffc8 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d04a      	beq.n	800cfa6 <ucdr_serialize_endian_uint32_t+0xe2>
 800cf10:	2d01      	cmp	r5, #1
 800cf12:	d063      	beq.n	800cfdc <ucdr_serialize_endian_uint32_t+0x118>
 800cf14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cf18:	7033      	strb	r3, [r6, #0]
 800cf1a:	2f00      	cmp	r7, #0
 800cf1c:	d051      	beq.n	800cfc2 <ucdr_serialize_endian_uint32_t+0xfe>
 800cf1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cf22:	7073      	strb	r3, [r6, #1]
 800cf24:	2f01      	cmp	r7, #1
 800cf26:	d050      	beq.n	800cfca <ucdr_serialize_endian_uint32_t+0x106>
 800cf28:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cf2c:	70b3      	strb	r3, [r6, #2]
 800cf2e:	2f02      	cmp	r7, #2
 800cf30:	d04f      	beq.n	800cfd2 <ucdr_serialize_endian_uint32_t+0x10e>
 800cf32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cf36:	70f3      	strb	r3, [r6, #3]
 800cf38:	6923      	ldr	r3, [r4, #16]
 800cf3a:	68a2      	ldr	r2, [r4, #8]
 800cf3c:	7da0      	ldrb	r0, [r4, #22]
 800cf3e:	3304      	adds	r3, #4
 800cf40:	444a      	add	r2, r9
 800cf42:	1bdb      	subs	r3, r3, r7
 800cf44:	2104      	movs	r1, #4
 800cf46:	f080 0001 	eor.w	r0, r0, #1
 800cf4a:	60a2      	str	r2, [r4, #8]
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	7561      	strb	r1, [r4, #21]
 800cf50:	b003      	add	sp, #12
 800cf52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf56:	2104      	movs	r1, #4
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f000 ff9f 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800cf5e:	b1c8      	cbz	r0, 800cf94 <ucdr_serialize_endian_uint32_t+0xd0>
 800cf60:	2d01      	cmp	r5, #1
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	d01c      	beq.n	800cfa0 <ucdr_serialize_endian_uint32_t+0xdc>
 800cf66:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cf6a:	701a      	strb	r2, [r3, #0]
 800cf6c:	68a3      	ldr	r3, [r4, #8]
 800cf6e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cf72:	705a      	strb	r2, [r3, #1]
 800cf74:	68a3      	ldr	r3, [r4, #8]
 800cf76:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cf7a:	709a      	strb	r2, [r3, #2]
 800cf7c:	68a3      	ldr	r3, [r4, #8]
 800cf7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cf82:	70da      	strb	r2, [r3, #3]
 800cf84:	68a2      	ldr	r2, [r4, #8]
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	3204      	adds	r2, #4
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	2104      	movs	r1, #4
 800cf8e:	60a2      	str	r2, [r4, #8]
 800cf90:	6123      	str	r3, [r4, #16]
 800cf92:	7561      	strb	r1, [r4, #21]
 800cf94:	7da0      	ldrb	r0, [r4, #22]
 800cf96:	f080 0001 	eor.w	r0, r0, #1
 800cf9a:	b003      	add	sp, #12
 800cf9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfa0:	9a01      	ldr	r2, [sp, #4]
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	e7ee      	b.n	800cf84 <ucdr_serialize_endian_uint32_t+0xc0>
 800cfa6:	68a2      	ldr	r2, [r4, #8]
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	7da0      	ldrb	r0, [r4, #22]
 800cfac:	f884 8015 	strb.w	r8, [r4, #21]
 800cfb0:	1bd2      	subs	r2, r2, r7
 800cfb2:	1bdb      	subs	r3, r3, r7
 800cfb4:	f080 0001 	eor.w	r0, r0, #1
 800cfb8:	60a2      	str	r2, [r4, #8]
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	b003      	add	sp, #12
 800cfbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfc2:	68a3      	ldr	r3, [r4, #8]
 800cfc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	68a3      	ldr	r3, [r4, #8]
 800cfd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cfd8:	701a      	strb	r2, [r3, #0]
 800cfda:	e7ad      	b.n	800cf38 <ucdr_serialize_endian_uint32_t+0x74>
 800cfdc:	ad01      	add	r5, sp, #4
 800cfde:	4629      	mov	r1, r5
 800cfe0:	463a      	mov	r2, r7
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f00f fb4b 	bl	801c67e <memcpy>
 800cfe8:	68a0      	ldr	r0, [r4, #8]
 800cfea:	464a      	mov	r2, r9
 800cfec:	19e9      	adds	r1, r5, r7
 800cfee:	f00f fb46 	bl	801c67e <memcpy>
 800cff2:	e7a1      	b.n	800cf38 <ucdr_serialize_endian_uint32_t+0x74>

0800cff4 <ucdr_deserialize_uint32_t>:
 800cff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff8:	460d      	mov	r5, r1
 800cffa:	2104      	movs	r1, #4
 800cffc:	4604      	mov	r4, r0
 800cffe:	f000 ffa1 	bl	800df44 <ucdr_buffer_alignment>
 800d002:	4601      	mov	r1, r0
 800d004:	4620      	mov	r0, r4
 800d006:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d00a:	f000 ffdf 	bl	800dfcc <ucdr_advance_buffer>
 800d00e:	2104      	movs	r1, #4
 800d010:	4620      	mov	r0, r4
 800d012:	f000 ff37 	bl	800de84 <ucdr_check_buffer_available_for>
 800d016:	2800      	cmp	r0, #0
 800d018:	d138      	bne.n	800d08c <ucdr_deserialize_uint32_t+0x98>
 800d01a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d01e:	42b7      	cmp	r7, r6
 800d020:	d92f      	bls.n	800d082 <ucdr_deserialize_uint32_t+0x8e>
 800d022:	6923      	ldr	r3, [r4, #16]
 800d024:	60a7      	str	r7, [r4, #8]
 800d026:	1bbf      	subs	r7, r7, r6
 800d028:	443b      	add	r3, r7
 800d02a:	f1c7 0904 	rsb	r9, r7, #4
 800d02e:	6123      	str	r3, [r4, #16]
 800d030:	4649      	mov	r1, r9
 800d032:	4620      	mov	r0, r4
 800d034:	f000 ff32 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d046      	beq.n	800d0ca <ucdr_deserialize_uint32_t+0xd6>
 800d03c:	7d23      	ldrb	r3, [r4, #20]
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d05c      	beq.n	800d0fc <ucdr_deserialize_uint32_t+0x108>
 800d042:	78f3      	ldrb	r3, [r6, #3]
 800d044:	702b      	strb	r3, [r5, #0]
 800d046:	2f00      	cmp	r7, #0
 800d048:	d04c      	beq.n	800d0e4 <ucdr_deserialize_uint32_t+0xf0>
 800d04a:	78b3      	ldrb	r3, [r6, #2]
 800d04c:	706b      	strb	r3, [r5, #1]
 800d04e:	2f01      	cmp	r7, #1
 800d050:	f105 0302 	add.w	r3, r5, #2
 800d054:	d04a      	beq.n	800d0ec <ucdr_deserialize_uint32_t+0xf8>
 800d056:	7873      	ldrb	r3, [r6, #1]
 800d058:	70ab      	strb	r3, [r5, #2]
 800d05a:	2f02      	cmp	r7, #2
 800d05c:	f105 0303 	add.w	r3, r5, #3
 800d060:	d048      	beq.n	800d0f4 <ucdr_deserialize_uint32_t+0x100>
 800d062:	7833      	ldrb	r3, [r6, #0]
 800d064:	70eb      	strb	r3, [r5, #3]
 800d066:	6923      	ldr	r3, [r4, #16]
 800d068:	68a2      	ldr	r2, [r4, #8]
 800d06a:	7da0      	ldrb	r0, [r4, #22]
 800d06c:	2104      	movs	r1, #4
 800d06e:	3304      	adds	r3, #4
 800d070:	444a      	add	r2, r9
 800d072:	1bdb      	subs	r3, r3, r7
 800d074:	7561      	strb	r1, [r4, #21]
 800d076:	60a2      	str	r2, [r4, #8]
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	f080 0001 	eor.w	r0, r0, #1
 800d07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d082:	2104      	movs	r1, #4
 800d084:	4620      	mov	r0, r4
 800d086:	f000 ff09 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d08a:	b1b0      	cbz	r0, 800d0ba <ucdr_deserialize_uint32_t+0xc6>
 800d08c:	7d23      	ldrb	r3, [r4, #20]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	68a3      	ldr	r3, [r4, #8]
 800d092:	d017      	beq.n	800d0c4 <ucdr_deserialize_uint32_t+0xd0>
 800d094:	78db      	ldrb	r3, [r3, #3]
 800d096:	702b      	strb	r3, [r5, #0]
 800d098:	68a3      	ldr	r3, [r4, #8]
 800d09a:	789b      	ldrb	r3, [r3, #2]
 800d09c:	706b      	strb	r3, [r5, #1]
 800d09e:	68a3      	ldr	r3, [r4, #8]
 800d0a0:	785b      	ldrb	r3, [r3, #1]
 800d0a2:	70ab      	strb	r3, [r5, #2]
 800d0a4:	68a3      	ldr	r3, [r4, #8]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	70eb      	strb	r3, [r5, #3]
 800d0aa:	68a2      	ldr	r2, [r4, #8]
 800d0ac:	6923      	ldr	r3, [r4, #16]
 800d0ae:	3204      	adds	r2, #4
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	2104      	movs	r1, #4
 800d0b4:	60a2      	str	r2, [r4, #8]
 800d0b6:	6123      	str	r3, [r4, #16]
 800d0b8:	7561      	strb	r1, [r4, #21]
 800d0ba:	7da0      	ldrb	r0, [r4, #22]
 800d0bc:	f080 0001 	eor.w	r0, r0, #1
 800d0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	602b      	str	r3, [r5, #0]
 800d0c8:	e7ef      	b.n	800d0aa <ucdr_deserialize_uint32_t+0xb6>
 800d0ca:	68a2      	ldr	r2, [r4, #8]
 800d0cc:	6923      	ldr	r3, [r4, #16]
 800d0ce:	7da0      	ldrb	r0, [r4, #22]
 800d0d0:	f884 8015 	strb.w	r8, [r4, #21]
 800d0d4:	1bd2      	subs	r2, r2, r7
 800d0d6:	1bdb      	subs	r3, r3, r7
 800d0d8:	60a2      	str	r2, [r4, #8]
 800d0da:	6123      	str	r3, [r4, #16]
 800d0dc:	f080 0001 	eor.w	r0, r0, #1
 800d0e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0e4:	68a3      	ldr	r3, [r4, #8]
 800d0e6:	789b      	ldrb	r3, [r3, #2]
 800d0e8:	706b      	strb	r3, [r5, #1]
 800d0ea:	1cab      	adds	r3, r5, #2
 800d0ec:	68a2      	ldr	r2, [r4, #8]
 800d0ee:	7852      	ldrb	r2, [r2, #1]
 800d0f0:	f803 2b01 	strb.w	r2, [r3], #1
 800d0f4:	68a2      	ldr	r2, [r4, #8]
 800d0f6:	7812      	ldrb	r2, [r2, #0]
 800d0f8:	701a      	strb	r2, [r3, #0]
 800d0fa:	e7b4      	b.n	800d066 <ucdr_deserialize_uint32_t+0x72>
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	463a      	mov	r2, r7
 800d100:	4628      	mov	r0, r5
 800d102:	f00f fabc 	bl	801c67e <memcpy>
 800d106:	68a1      	ldr	r1, [r4, #8]
 800d108:	464a      	mov	r2, r9
 800d10a:	19e8      	adds	r0, r5, r7
 800d10c:	f00f fab7 	bl	801c67e <memcpy>
 800d110:	e7a9      	b.n	800d066 <ucdr_deserialize_uint32_t+0x72>
 800d112:	bf00      	nop

0800d114 <ucdr_deserialize_endian_uint32_t>:
 800d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d118:	460e      	mov	r6, r1
 800d11a:	2104      	movs	r1, #4
 800d11c:	4604      	mov	r4, r0
 800d11e:	4615      	mov	r5, r2
 800d120:	f000 ff10 	bl	800df44 <ucdr_buffer_alignment>
 800d124:	4601      	mov	r1, r0
 800d126:	4620      	mov	r0, r4
 800d128:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d12c:	f000 ff4e 	bl	800dfcc <ucdr_advance_buffer>
 800d130:	2104      	movs	r1, #4
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fea6 	bl	800de84 <ucdr_check_buffer_available_for>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d13c      	bne.n	800d1b6 <ucdr_deserialize_endian_uint32_t+0xa2>
 800d13c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d140:	42bb      	cmp	r3, r7
 800d142:	d933      	bls.n	800d1ac <ucdr_deserialize_endian_uint32_t+0x98>
 800d144:	eba3 0807 	sub.w	r8, r3, r7
 800d148:	60a3      	str	r3, [r4, #8]
 800d14a:	6923      	ldr	r3, [r4, #16]
 800d14c:	f1c8 0a04 	rsb	sl, r8, #4
 800d150:	4443      	add	r3, r8
 800d152:	6123      	str	r3, [r4, #16]
 800d154:	4651      	mov	r1, sl
 800d156:	4620      	mov	r0, r4
 800d158:	f000 fea0 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d048      	beq.n	800d1f2 <ucdr_deserialize_endian_uint32_t+0xde>
 800d160:	2e01      	cmp	r6, #1
 800d162:	d061      	beq.n	800d228 <ucdr_deserialize_endian_uint32_t+0x114>
 800d164:	78fb      	ldrb	r3, [r7, #3]
 800d166:	702b      	strb	r3, [r5, #0]
 800d168:	f1b8 0f00 	cmp.w	r8, #0
 800d16c:	d050      	beq.n	800d210 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d16e:	78bb      	ldrb	r3, [r7, #2]
 800d170:	706b      	strb	r3, [r5, #1]
 800d172:	f1b8 0f01 	cmp.w	r8, #1
 800d176:	f105 0302 	add.w	r3, r5, #2
 800d17a:	d04d      	beq.n	800d218 <ucdr_deserialize_endian_uint32_t+0x104>
 800d17c:	787b      	ldrb	r3, [r7, #1]
 800d17e:	70ab      	strb	r3, [r5, #2]
 800d180:	f1b8 0f02 	cmp.w	r8, #2
 800d184:	f105 0303 	add.w	r3, r5, #3
 800d188:	d04a      	beq.n	800d220 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d18a:	783b      	ldrb	r3, [r7, #0]
 800d18c:	70eb      	strb	r3, [r5, #3]
 800d18e:	6923      	ldr	r3, [r4, #16]
 800d190:	68a2      	ldr	r2, [r4, #8]
 800d192:	7da0      	ldrb	r0, [r4, #22]
 800d194:	2104      	movs	r1, #4
 800d196:	3304      	adds	r3, #4
 800d198:	4452      	add	r2, sl
 800d19a:	eba3 0308 	sub.w	r3, r3, r8
 800d19e:	7561      	strb	r1, [r4, #21]
 800d1a0:	60a2      	str	r2, [r4, #8]
 800d1a2:	6123      	str	r3, [r4, #16]
 800d1a4:	f080 0001 	eor.w	r0, r0, #1
 800d1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ac:	2104      	movs	r1, #4
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f000 fe74 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d1b4:	b1a8      	cbz	r0, 800d1e2 <ucdr_deserialize_endian_uint32_t+0xce>
 800d1b6:	2e01      	cmp	r6, #1
 800d1b8:	68a3      	ldr	r3, [r4, #8]
 800d1ba:	d017      	beq.n	800d1ec <ucdr_deserialize_endian_uint32_t+0xd8>
 800d1bc:	78db      	ldrb	r3, [r3, #3]
 800d1be:	702b      	strb	r3, [r5, #0]
 800d1c0:	68a3      	ldr	r3, [r4, #8]
 800d1c2:	789b      	ldrb	r3, [r3, #2]
 800d1c4:	706b      	strb	r3, [r5, #1]
 800d1c6:	68a3      	ldr	r3, [r4, #8]
 800d1c8:	785b      	ldrb	r3, [r3, #1]
 800d1ca:	70ab      	strb	r3, [r5, #2]
 800d1cc:	68a3      	ldr	r3, [r4, #8]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	70eb      	strb	r3, [r5, #3]
 800d1d2:	68a2      	ldr	r2, [r4, #8]
 800d1d4:	6923      	ldr	r3, [r4, #16]
 800d1d6:	3204      	adds	r2, #4
 800d1d8:	3304      	adds	r3, #4
 800d1da:	2104      	movs	r1, #4
 800d1dc:	60a2      	str	r2, [r4, #8]
 800d1de:	6123      	str	r3, [r4, #16]
 800d1e0:	7561      	strb	r1, [r4, #21]
 800d1e2:	7da0      	ldrb	r0, [r4, #22]
 800d1e4:	f080 0001 	eor.w	r0, r0, #1
 800d1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	602b      	str	r3, [r5, #0]
 800d1f0:	e7ef      	b.n	800d1d2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d1f2:	68a2      	ldr	r2, [r4, #8]
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	7da0      	ldrb	r0, [r4, #22]
 800d1f8:	f884 9015 	strb.w	r9, [r4, #21]
 800d1fc:	eba2 0208 	sub.w	r2, r2, r8
 800d200:	eba3 0308 	sub.w	r3, r3, r8
 800d204:	60a2      	str	r2, [r4, #8]
 800d206:	6123      	str	r3, [r4, #16]
 800d208:	f080 0001 	eor.w	r0, r0, #1
 800d20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d210:	68a3      	ldr	r3, [r4, #8]
 800d212:	789b      	ldrb	r3, [r3, #2]
 800d214:	706b      	strb	r3, [r5, #1]
 800d216:	1cab      	adds	r3, r5, #2
 800d218:	68a2      	ldr	r2, [r4, #8]
 800d21a:	7852      	ldrb	r2, [r2, #1]
 800d21c:	f803 2b01 	strb.w	r2, [r3], #1
 800d220:	68a2      	ldr	r2, [r4, #8]
 800d222:	7812      	ldrb	r2, [r2, #0]
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	e7b2      	b.n	800d18e <ucdr_deserialize_endian_uint32_t+0x7a>
 800d228:	4639      	mov	r1, r7
 800d22a:	4642      	mov	r2, r8
 800d22c:	4628      	mov	r0, r5
 800d22e:	f00f fa26 	bl	801c67e <memcpy>
 800d232:	68a1      	ldr	r1, [r4, #8]
 800d234:	4652      	mov	r2, sl
 800d236:	eb05 0008 	add.w	r0, r5, r8
 800d23a:	f00f fa20 	bl	801c67e <memcpy>
 800d23e:	e7a6      	b.n	800d18e <ucdr_deserialize_endian_uint32_t+0x7a>

0800d240 <ucdr_serialize_uint64_t>:
 800d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	2108      	movs	r1, #8
 800d246:	b082      	sub	sp, #8
 800d248:	4604      	mov	r4, r0
 800d24a:	e9cd 2300 	strd	r2, r3, [sp]
 800d24e:	f000 fe79 	bl	800df44 <ucdr_buffer_alignment>
 800d252:	4601      	mov	r1, r0
 800d254:	4620      	mov	r0, r4
 800d256:	7d67      	ldrb	r7, [r4, #21]
 800d258:	f000 feb8 	bl	800dfcc <ucdr_advance_buffer>
 800d25c:	2108      	movs	r1, #8
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fe10 	bl	800de84 <ucdr_check_buffer_available_for>
 800d264:	2800      	cmp	r0, #0
 800d266:	d14e      	bne.n	800d306 <ucdr_serialize_uint64_t+0xc6>
 800d268:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d26c:	42ab      	cmp	r3, r5
 800d26e:	d945      	bls.n	800d2fc <ucdr_serialize_uint64_t+0xbc>
 800d270:	1b5e      	subs	r6, r3, r5
 800d272:	60a3      	str	r3, [r4, #8]
 800d274:	6923      	ldr	r3, [r4, #16]
 800d276:	f1c6 0808 	rsb	r8, r6, #8
 800d27a:	4433      	add	r3, r6
 800d27c:	6123      	str	r3, [r4, #16]
 800d27e:	4641      	mov	r1, r8
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fe0b 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d286:	2800      	cmp	r0, #0
 800d288:	d074      	beq.n	800d374 <ucdr_serialize_uint64_t+0x134>
 800d28a:	7d23      	ldrb	r3, [r4, #20]
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	f000 809b 	beq.w	800d3c8 <ucdr_serialize_uint64_t+0x188>
 800d292:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d296:	702b      	strb	r3, [r5, #0]
 800d298:	2e00      	cmp	r6, #0
 800d29a:	d078      	beq.n	800d38e <ucdr_serialize_uint64_t+0x14e>
 800d29c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d2a0:	706b      	strb	r3, [r5, #1]
 800d2a2:	2e01      	cmp	r6, #1
 800d2a4:	d077      	beq.n	800d396 <ucdr_serialize_uint64_t+0x156>
 800d2a6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d2aa:	70ab      	strb	r3, [r5, #2]
 800d2ac:	2e02      	cmp	r6, #2
 800d2ae:	d076      	beq.n	800d39e <ucdr_serialize_uint64_t+0x15e>
 800d2b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d2b4:	70eb      	strb	r3, [r5, #3]
 800d2b6:	2e03      	cmp	r6, #3
 800d2b8:	d075      	beq.n	800d3a6 <ucdr_serialize_uint64_t+0x166>
 800d2ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d2be:	712b      	strb	r3, [r5, #4]
 800d2c0:	2e04      	cmp	r6, #4
 800d2c2:	d074      	beq.n	800d3ae <ucdr_serialize_uint64_t+0x16e>
 800d2c4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d2c8:	716b      	strb	r3, [r5, #5]
 800d2ca:	2e05      	cmp	r6, #5
 800d2cc:	d073      	beq.n	800d3b6 <ucdr_serialize_uint64_t+0x176>
 800d2ce:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d2d2:	71ab      	strb	r3, [r5, #6]
 800d2d4:	2e06      	cmp	r6, #6
 800d2d6:	d072      	beq.n	800d3be <ucdr_serialize_uint64_t+0x17e>
 800d2d8:	f89d 3000 	ldrb.w	r3, [sp]
 800d2dc:	71eb      	strb	r3, [r5, #7]
 800d2de:	6923      	ldr	r3, [r4, #16]
 800d2e0:	68a2      	ldr	r2, [r4, #8]
 800d2e2:	7da0      	ldrb	r0, [r4, #22]
 800d2e4:	3308      	adds	r3, #8
 800d2e6:	1b9e      	subs	r6, r3, r6
 800d2e8:	4442      	add	r2, r8
 800d2ea:	2308      	movs	r3, #8
 800d2ec:	f080 0001 	eor.w	r0, r0, #1
 800d2f0:	60a2      	str	r2, [r4, #8]
 800d2f2:	6126      	str	r6, [r4, #16]
 800d2f4:	7563      	strb	r3, [r4, #21]
 800d2f6:	b002      	add	sp, #8
 800d2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2fc:	2108      	movs	r1, #8
 800d2fe:	4620      	mov	r0, r4
 800d300:	f000 fdcc 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d304:	b350      	cbz	r0, 800d35c <ucdr_serialize_uint64_t+0x11c>
 800d306:	7d23      	ldrb	r3, [r4, #20]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d02d      	beq.n	800d368 <ucdr_serialize_uint64_t+0x128>
 800d30c:	68a3      	ldr	r3, [r4, #8]
 800d30e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	68a3      	ldr	r3, [r4, #8]
 800d316:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d31a:	705a      	strb	r2, [r3, #1]
 800d31c:	68a3      	ldr	r3, [r4, #8]
 800d31e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d322:	709a      	strb	r2, [r3, #2]
 800d324:	68a3      	ldr	r3, [r4, #8]
 800d326:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d32a:	70da      	strb	r2, [r3, #3]
 800d32c:	68a3      	ldr	r3, [r4, #8]
 800d32e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d332:	711a      	strb	r2, [r3, #4]
 800d334:	68a3      	ldr	r3, [r4, #8]
 800d336:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d33a:	715a      	strb	r2, [r3, #5]
 800d33c:	68a3      	ldr	r3, [r4, #8]
 800d33e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d342:	719a      	strb	r2, [r3, #6]
 800d344:	68a3      	ldr	r3, [r4, #8]
 800d346:	f89d 2000 	ldrb.w	r2, [sp]
 800d34a:	71da      	strb	r2, [r3, #7]
 800d34c:	68a2      	ldr	r2, [r4, #8]
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	3208      	adds	r2, #8
 800d352:	3308      	adds	r3, #8
 800d354:	2108      	movs	r1, #8
 800d356:	60a2      	str	r2, [r4, #8]
 800d358:	6123      	str	r3, [r4, #16]
 800d35a:	7561      	strb	r1, [r4, #21]
 800d35c:	7da0      	ldrb	r0, [r4, #22]
 800d35e:	f080 0001 	eor.w	r0, r0, #1
 800d362:	b002      	add	sp, #8
 800d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d368:	466b      	mov	r3, sp
 800d36a:	cb03      	ldmia	r3!, {r0, r1}
 800d36c:	68a3      	ldr	r3, [r4, #8]
 800d36e:	6018      	str	r0, [r3, #0]
 800d370:	6059      	str	r1, [r3, #4]
 800d372:	e7eb      	b.n	800d34c <ucdr_serialize_uint64_t+0x10c>
 800d374:	68a2      	ldr	r2, [r4, #8]
 800d376:	6923      	ldr	r3, [r4, #16]
 800d378:	7da0      	ldrb	r0, [r4, #22]
 800d37a:	7567      	strb	r7, [r4, #21]
 800d37c:	1b92      	subs	r2, r2, r6
 800d37e:	1b9b      	subs	r3, r3, r6
 800d380:	f080 0001 	eor.w	r0, r0, #1
 800d384:	60a2      	str	r2, [r4, #8]
 800d386:	6123      	str	r3, [r4, #16]
 800d388:	b002      	add	sp, #8
 800d38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d38e:	68a3      	ldr	r3, [r4, #8]
 800d390:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d394:	701a      	strb	r2, [r3, #0]
 800d396:	68a3      	ldr	r3, [r4, #8]
 800d398:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d39c:	701a      	strb	r2, [r3, #0]
 800d39e:	68a3      	ldr	r3, [r4, #8]
 800d3a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	68a3      	ldr	r3, [r4, #8]
 800d3a8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	68a3      	ldr	r3, [r4, #8]
 800d3b8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	68a3      	ldr	r3, [r4, #8]
 800d3c0:	f89d 2000 	ldrb.w	r2, [sp]
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	e78a      	b.n	800d2de <ucdr_serialize_uint64_t+0x9e>
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	466d      	mov	r5, sp
 800d3cc:	4629      	mov	r1, r5
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	f00f f955 	bl	801c67e <memcpy>
 800d3d4:	68a0      	ldr	r0, [r4, #8]
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	19a9      	adds	r1, r5, r6
 800d3da:	f00f f950 	bl	801c67e <memcpy>
 800d3de:	e77e      	b.n	800d2de <ucdr_serialize_uint64_t+0x9e>

0800d3e0 <ucdr_serialize_int16_t>:
 800d3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3e4:	b082      	sub	sp, #8
 800d3e6:	460b      	mov	r3, r1
 800d3e8:	2102      	movs	r1, #2
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d3f0:	f000 fda8 	bl	800df44 <ucdr_buffer_alignment>
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	7d67      	ldrb	r7, [r4, #21]
 800d3fa:	f000 fde7 	bl	800dfcc <ucdr_advance_buffer>
 800d3fe:	2102      	movs	r1, #2
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fd3f 	bl	800de84 <ucdr_check_buffer_available_for>
 800d406:	bb78      	cbnz	r0, 800d468 <ucdr_serialize_int16_t+0x88>
 800d408:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d40c:	42ab      	cmp	r3, r5
 800d40e:	d926      	bls.n	800d45e <ucdr_serialize_int16_t+0x7e>
 800d410:	1b5e      	subs	r6, r3, r5
 800d412:	60a3      	str	r3, [r4, #8]
 800d414:	6923      	ldr	r3, [r4, #16]
 800d416:	f1c6 0802 	rsb	r8, r6, #2
 800d41a:	4433      	add	r3, r6
 800d41c:	6123      	str	r3, [r4, #16]
 800d41e:	4641      	mov	r1, r8
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fd3b 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d426:	2800      	cmp	r0, #0
 800d428:	d03b      	beq.n	800d4a2 <ucdr_serialize_int16_t+0xc2>
 800d42a:	7d23      	ldrb	r3, [r4, #20]
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d04a      	beq.n	800d4c6 <ucdr_serialize_int16_t+0xe6>
 800d430:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d434:	702b      	strb	r3, [r5, #0]
 800d436:	2e00      	cmp	r6, #0
 800d438:	d040      	beq.n	800d4bc <ucdr_serialize_int16_t+0xdc>
 800d43a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d43e:	706b      	strb	r3, [r5, #1]
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	68a2      	ldr	r2, [r4, #8]
 800d444:	7da0      	ldrb	r0, [r4, #22]
 800d446:	3302      	adds	r3, #2
 800d448:	1b9e      	subs	r6, r3, r6
 800d44a:	4442      	add	r2, r8
 800d44c:	2302      	movs	r3, #2
 800d44e:	f080 0001 	eor.w	r0, r0, #1
 800d452:	60a2      	str	r2, [r4, #8]
 800d454:	6126      	str	r6, [r4, #16]
 800d456:	7563      	strb	r3, [r4, #21]
 800d458:	b002      	add	sp, #8
 800d45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45e:	2102      	movs	r1, #2
 800d460:	4620      	mov	r0, r4
 800d462:	f000 fd1b 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d466:	b190      	cbz	r0, 800d48e <ucdr_serialize_int16_t+0xae>
 800d468:	7d23      	ldrb	r3, [r4, #20]
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	d014      	beq.n	800d49a <ucdr_serialize_int16_t+0xba>
 800d470:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	68a3      	ldr	r3, [r4, #8]
 800d478:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d47c:	705a      	strb	r2, [r3, #1]
 800d47e:	68a2      	ldr	r2, [r4, #8]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	3202      	adds	r2, #2
 800d484:	3302      	adds	r3, #2
 800d486:	2102      	movs	r1, #2
 800d488:	60a2      	str	r2, [r4, #8]
 800d48a:	6123      	str	r3, [r4, #16]
 800d48c:	7561      	strb	r1, [r4, #21]
 800d48e:	7da0      	ldrb	r0, [r4, #22]
 800d490:	f080 0001 	eor.w	r0, r0, #1
 800d494:	b002      	add	sp, #8
 800d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d49e:	801a      	strh	r2, [r3, #0]
 800d4a0:	e7ed      	b.n	800d47e <ucdr_serialize_int16_t+0x9e>
 800d4a2:	68a2      	ldr	r2, [r4, #8]
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	7da0      	ldrb	r0, [r4, #22]
 800d4a8:	7567      	strb	r7, [r4, #21]
 800d4aa:	1b92      	subs	r2, r2, r6
 800d4ac:	1b9b      	subs	r3, r3, r6
 800d4ae:	f080 0001 	eor.w	r0, r0, #1
 800d4b2:	60a2      	str	r2, [r4, #8]
 800d4b4:	6123      	str	r3, [r4, #16]
 800d4b6:	b002      	add	sp, #8
 800d4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4bc:	68a3      	ldr	r3, [r4, #8]
 800d4be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4c2:	701a      	strb	r2, [r3, #0]
 800d4c4:	e7bc      	b.n	800d440 <ucdr_serialize_int16_t+0x60>
 800d4c6:	4628      	mov	r0, r5
 800d4c8:	f10d 0506 	add.w	r5, sp, #6
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4632      	mov	r2, r6
 800d4d0:	f00f f8d5 	bl	801c67e <memcpy>
 800d4d4:	68a0      	ldr	r0, [r4, #8]
 800d4d6:	4642      	mov	r2, r8
 800d4d8:	19a9      	adds	r1, r5, r6
 800d4da:	f00f f8d0 	bl	801c67e <memcpy>
 800d4de:	e7af      	b.n	800d440 <ucdr_serialize_int16_t+0x60>

0800d4e0 <ucdr_deserialize_int16_t>:
 800d4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e4:	460d      	mov	r5, r1
 800d4e6:	2102      	movs	r1, #2
 800d4e8:	4604      	mov	r4, r0
 800d4ea:	f000 fd2b 	bl	800df44 <ucdr_buffer_alignment>
 800d4ee:	4601      	mov	r1, r0
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d4f6:	f000 fd69 	bl	800dfcc <ucdr_advance_buffer>
 800d4fa:	2102      	movs	r1, #2
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fcc1 	bl	800de84 <ucdr_check_buffer_available_for>
 800d502:	bb60      	cbnz	r0, 800d55e <ucdr_deserialize_int16_t+0x7e>
 800d504:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d508:	42be      	cmp	r6, r7
 800d50a:	d923      	bls.n	800d554 <ucdr_deserialize_int16_t+0x74>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	60a6      	str	r6, [r4, #8]
 800d510:	1bf6      	subs	r6, r6, r7
 800d512:	4433      	add	r3, r6
 800d514:	f1c6 0902 	rsb	r9, r6, #2
 800d518:	6123      	str	r3, [r4, #16]
 800d51a:	4649      	mov	r1, r9
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 fcbd 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d522:	2800      	cmp	r0, #0
 800d524:	d034      	beq.n	800d590 <ucdr_deserialize_int16_t+0xb0>
 800d526:	7d23      	ldrb	r3, [r4, #20]
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d042      	beq.n	800d5b2 <ucdr_deserialize_int16_t+0xd2>
 800d52c:	787b      	ldrb	r3, [r7, #1]
 800d52e:	702b      	strb	r3, [r5, #0]
 800d530:	2e00      	cmp	r6, #0
 800d532:	d03a      	beq.n	800d5aa <ucdr_deserialize_int16_t+0xca>
 800d534:	783b      	ldrb	r3, [r7, #0]
 800d536:	706b      	strb	r3, [r5, #1]
 800d538:	6923      	ldr	r3, [r4, #16]
 800d53a:	68a2      	ldr	r2, [r4, #8]
 800d53c:	7da0      	ldrb	r0, [r4, #22]
 800d53e:	2102      	movs	r1, #2
 800d540:	3302      	adds	r3, #2
 800d542:	444a      	add	r2, r9
 800d544:	1b9b      	subs	r3, r3, r6
 800d546:	7561      	strb	r1, [r4, #21]
 800d548:	60a2      	str	r2, [r4, #8]
 800d54a:	6123      	str	r3, [r4, #16]
 800d54c:	f080 0001 	eor.w	r0, r0, #1
 800d550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d554:	2102      	movs	r1, #2
 800d556:	4620      	mov	r0, r4
 800d558:	f000 fca0 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d55c:	b180      	cbz	r0, 800d580 <ucdr_deserialize_int16_t+0xa0>
 800d55e:	7d23      	ldrb	r3, [r4, #20]
 800d560:	2b01      	cmp	r3, #1
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	d011      	beq.n	800d58a <ucdr_deserialize_int16_t+0xaa>
 800d566:	785b      	ldrb	r3, [r3, #1]
 800d568:	702b      	strb	r3, [r5, #0]
 800d56a:	68a3      	ldr	r3, [r4, #8]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	706b      	strb	r3, [r5, #1]
 800d570:	68a2      	ldr	r2, [r4, #8]
 800d572:	6923      	ldr	r3, [r4, #16]
 800d574:	3202      	adds	r2, #2
 800d576:	3302      	adds	r3, #2
 800d578:	2102      	movs	r1, #2
 800d57a:	60a2      	str	r2, [r4, #8]
 800d57c:	6123      	str	r3, [r4, #16]
 800d57e:	7561      	strb	r1, [r4, #21]
 800d580:	7da0      	ldrb	r0, [r4, #22]
 800d582:	f080 0001 	eor.w	r0, r0, #1
 800d586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d58a:	881b      	ldrh	r3, [r3, #0]
 800d58c:	802b      	strh	r3, [r5, #0]
 800d58e:	e7ef      	b.n	800d570 <ucdr_deserialize_int16_t+0x90>
 800d590:	68a2      	ldr	r2, [r4, #8]
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	7da0      	ldrb	r0, [r4, #22]
 800d596:	f884 8015 	strb.w	r8, [r4, #21]
 800d59a:	1b92      	subs	r2, r2, r6
 800d59c:	1b9b      	subs	r3, r3, r6
 800d59e:	60a2      	str	r2, [r4, #8]
 800d5a0:	6123      	str	r3, [r4, #16]
 800d5a2:	f080 0001 	eor.w	r0, r0, #1
 800d5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	706b      	strb	r3, [r5, #1]
 800d5b0:	e7c2      	b.n	800d538 <ucdr_deserialize_int16_t+0x58>
 800d5b2:	4639      	mov	r1, r7
 800d5b4:	4632      	mov	r2, r6
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f00f f861 	bl	801c67e <memcpy>
 800d5bc:	68a1      	ldr	r1, [r4, #8]
 800d5be:	464a      	mov	r2, r9
 800d5c0:	19a8      	adds	r0, r5, r6
 800d5c2:	f00f f85c 	bl	801c67e <memcpy>
 800d5c6:	e7b7      	b.n	800d538 <ucdr_deserialize_int16_t+0x58>

0800d5c8 <ucdr_serialize_int32_t>:
 800d5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	9101      	str	r1, [sp, #4]
 800d5d2:	2104      	movs	r1, #4
 800d5d4:	f000 fcb6 	bl	800df44 <ucdr_buffer_alignment>
 800d5d8:	4601      	mov	r1, r0
 800d5da:	4620      	mov	r0, r4
 800d5dc:	7d67      	ldrb	r7, [r4, #21]
 800d5de:	f000 fcf5 	bl	800dfcc <ucdr_advance_buffer>
 800d5e2:	2104      	movs	r1, #4
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 fc4d 	bl	800de84 <ucdr_check_buffer_available_for>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d139      	bne.n	800d662 <ucdr_serialize_int32_t+0x9a>
 800d5ee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d5f2:	42ab      	cmp	r3, r5
 800d5f4:	d930      	bls.n	800d658 <ucdr_serialize_int32_t+0x90>
 800d5f6:	1b5e      	subs	r6, r3, r5
 800d5f8:	60a3      	str	r3, [r4, #8]
 800d5fa:	6923      	ldr	r3, [r4, #16]
 800d5fc:	f1c6 0804 	rsb	r8, r6, #4
 800d600:	4433      	add	r3, r6
 800d602:	6123      	str	r3, [r4, #16]
 800d604:	4641      	mov	r1, r8
 800d606:	4620      	mov	r0, r4
 800d608:	f000 fc48 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d04c      	beq.n	800d6aa <ucdr_serialize_int32_t+0xe2>
 800d610:	7d23      	ldrb	r3, [r4, #20]
 800d612:	2b01      	cmp	r3, #1
 800d614:	d063      	beq.n	800d6de <ucdr_serialize_int32_t+0x116>
 800d616:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d61a:	702b      	strb	r3, [r5, #0]
 800d61c:	2e00      	cmp	r6, #0
 800d61e:	d051      	beq.n	800d6c4 <ucdr_serialize_int32_t+0xfc>
 800d620:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d624:	706b      	strb	r3, [r5, #1]
 800d626:	2e01      	cmp	r6, #1
 800d628:	d050      	beq.n	800d6cc <ucdr_serialize_int32_t+0x104>
 800d62a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d62e:	70ab      	strb	r3, [r5, #2]
 800d630:	2e02      	cmp	r6, #2
 800d632:	d04f      	beq.n	800d6d4 <ucdr_serialize_int32_t+0x10c>
 800d634:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d638:	70eb      	strb	r3, [r5, #3]
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	68a2      	ldr	r2, [r4, #8]
 800d63e:	7da0      	ldrb	r0, [r4, #22]
 800d640:	3304      	adds	r3, #4
 800d642:	1b9e      	subs	r6, r3, r6
 800d644:	4442      	add	r2, r8
 800d646:	2304      	movs	r3, #4
 800d648:	f080 0001 	eor.w	r0, r0, #1
 800d64c:	60a2      	str	r2, [r4, #8]
 800d64e:	6126      	str	r6, [r4, #16]
 800d650:	7563      	strb	r3, [r4, #21]
 800d652:	b002      	add	sp, #8
 800d654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d658:	2104      	movs	r1, #4
 800d65a:	4620      	mov	r0, r4
 800d65c:	f000 fc1e 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d660:	b1d0      	cbz	r0, 800d698 <ucdr_serialize_int32_t+0xd0>
 800d662:	7d23      	ldrb	r3, [r4, #20]
 800d664:	2b01      	cmp	r3, #1
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	d01c      	beq.n	800d6a4 <ucdr_serialize_int32_t+0xdc>
 800d66a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d66e:	701a      	strb	r2, [r3, #0]
 800d670:	68a3      	ldr	r3, [r4, #8]
 800d672:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d676:	705a      	strb	r2, [r3, #1]
 800d678:	68a3      	ldr	r3, [r4, #8]
 800d67a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d67e:	709a      	strb	r2, [r3, #2]
 800d680:	68a3      	ldr	r3, [r4, #8]
 800d682:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d686:	70da      	strb	r2, [r3, #3]
 800d688:	68a2      	ldr	r2, [r4, #8]
 800d68a:	6923      	ldr	r3, [r4, #16]
 800d68c:	3204      	adds	r2, #4
 800d68e:	3304      	adds	r3, #4
 800d690:	2104      	movs	r1, #4
 800d692:	60a2      	str	r2, [r4, #8]
 800d694:	6123      	str	r3, [r4, #16]
 800d696:	7561      	strb	r1, [r4, #21]
 800d698:	7da0      	ldrb	r0, [r4, #22]
 800d69a:	f080 0001 	eor.w	r0, r0, #1
 800d69e:	b002      	add	sp, #8
 800d6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a4:	9a01      	ldr	r2, [sp, #4]
 800d6a6:	601a      	str	r2, [r3, #0]
 800d6a8:	e7ee      	b.n	800d688 <ucdr_serialize_int32_t+0xc0>
 800d6aa:	68a2      	ldr	r2, [r4, #8]
 800d6ac:	6923      	ldr	r3, [r4, #16]
 800d6ae:	7da0      	ldrb	r0, [r4, #22]
 800d6b0:	7567      	strb	r7, [r4, #21]
 800d6b2:	1b92      	subs	r2, r2, r6
 800d6b4:	1b9b      	subs	r3, r3, r6
 800d6b6:	f080 0001 	eor.w	r0, r0, #1
 800d6ba:	60a2      	str	r2, [r4, #8]
 800d6bc:	6123      	str	r3, [r4, #16]
 800d6be:	b002      	add	sp, #8
 800d6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c4:	68a3      	ldr	r3, [r4, #8]
 800d6c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6ca:	701a      	strb	r2, [r3, #0]
 800d6cc:	68a3      	ldr	r3, [r4, #8]
 800d6ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6d2:	701a      	strb	r2, [r3, #0]
 800d6d4:	68a3      	ldr	r3, [r4, #8]
 800d6d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	e7ad      	b.n	800d63a <ucdr_serialize_int32_t+0x72>
 800d6de:	4628      	mov	r0, r5
 800d6e0:	ad01      	add	r5, sp, #4
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	4632      	mov	r2, r6
 800d6e6:	f00e ffca 	bl	801c67e <memcpy>
 800d6ea:	68a0      	ldr	r0, [r4, #8]
 800d6ec:	4642      	mov	r2, r8
 800d6ee:	19a9      	adds	r1, r5, r6
 800d6f0:	f00e ffc5 	bl	801c67e <memcpy>
 800d6f4:	e7a1      	b.n	800d63a <ucdr_serialize_int32_t+0x72>
 800d6f6:	bf00      	nop

0800d6f8 <ucdr_deserialize_int32_t>:
 800d6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6fc:	460d      	mov	r5, r1
 800d6fe:	2104      	movs	r1, #4
 800d700:	4604      	mov	r4, r0
 800d702:	f000 fc1f 	bl	800df44 <ucdr_buffer_alignment>
 800d706:	4601      	mov	r1, r0
 800d708:	4620      	mov	r0, r4
 800d70a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d70e:	f000 fc5d 	bl	800dfcc <ucdr_advance_buffer>
 800d712:	2104      	movs	r1, #4
 800d714:	4620      	mov	r0, r4
 800d716:	f000 fbb5 	bl	800de84 <ucdr_check_buffer_available_for>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d138      	bne.n	800d790 <ucdr_deserialize_int32_t+0x98>
 800d71e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d722:	42b7      	cmp	r7, r6
 800d724:	d92f      	bls.n	800d786 <ucdr_deserialize_int32_t+0x8e>
 800d726:	6923      	ldr	r3, [r4, #16]
 800d728:	60a7      	str	r7, [r4, #8]
 800d72a:	1bbf      	subs	r7, r7, r6
 800d72c:	443b      	add	r3, r7
 800d72e:	f1c7 0904 	rsb	r9, r7, #4
 800d732:	6123      	str	r3, [r4, #16]
 800d734:	4649      	mov	r1, r9
 800d736:	4620      	mov	r0, r4
 800d738:	f000 fbb0 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d046      	beq.n	800d7ce <ucdr_deserialize_int32_t+0xd6>
 800d740:	7d23      	ldrb	r3, [r4, #20]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d05c      	beq.n	800d800 <ucdr_deserialize_int32_t+0x108>
 800d746:	78f3      	ldrb	r3, [r6, #3]
 800d748:	702b      	strb	r3, [r5, #0]
 800d74a:	2f00      	cmp	r7, #0
 800d74c:	d04c      	beq.n	800d7e8 <ucdr_deserialize_int32_t+0xf0>
 800d74e:	78b3      	ldrb	r3, [r6, #2]
 800d750:	706b      	strb	r3, [r5, #1]
 800d752:	2f01      	cmp	r7, #1
 800d754:	f105 0302 	add.w	r3, r5, #2
 800d758:	d04a      	beq.n	800d7f0 <ucdr_deserialize_int32_t+0xf8>
 800d75a:	7873      	ldrb	r3, [r6, #1]
 800d75c:	70ab      	strb	r3, [r5, #2]
 800d75e:	2f02      	cmp	r7, #2
 800d760:	f105 0303 	add.w	r3, r5, #3
 800d764:	d048      	beq.n	800d7f8 <ucdr_deserialize_int32_t+0x100>
 800d766:	7833      	ldrb	r3, [r6, #0]
 800d768:	70eb      	strb	r3, [r5, #3]
 800d76a:	6923      	ldr	r3, [r4, #16]
 800d76c:	68a2      	ldr	r2, [r4, #8]
 800d76e:	7da0      	ldrb	r0, [r4, #22]
 800d770:	2104      	movs	r1, #4
 800d772:	3304      	adds	r3, #4
 800d774:	444a      	add	r2, r9
 800d776:	1bdb      	subs	r3, r3, r7
 800d778:	7561      	strb	r1, [r4, #21]
 800d77a:	60a2      	str	r2, [r4, #8]
 800d77c:	6123      	str	r3, [r4, #16]
 800d77e:	f080 0001 	eor.w	r0, r0, #1
 800d782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d786:	2104      	movs	r1, #4
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 fb87 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d78e:	b1b0      	cbz	r0, 800d7be <ucdr_deserialize_int32_t+0xc6>
 800d790:	7d23      	ldrb	r3, [r4, #20]
 800d792:	2b01      	cmp	r3, #1
 800d794:	68a3      	ldr	r3, [r4, #8]
 800d796:	d017      	beq.n	800d7c8 <ucdr_deserialize_int32_t+0xd0>
 800d798:	78db      	ldrb	r3, [r3, #3]
 800d79a:	702b      	strb	r3, [r5, #0]
 800d79c:	68a3      	ldr	r3, [r4, #8]
 800d79e:	789b      	ldrb	r3, [r3, #2]
 800d7a0:	706b      	strb	r3, [r5, #1]
 800d7a2:	68a3      	ldr	r3, [r4, #8]
 800d7a4:	785b      	ldrb	r3, [r3, #1]
 800d7a6:	70ab      	strb	r3, [r5, #2]
 800d7a8:	68a3      	ldr	r3, [r4, #8]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	70eb      	strb	r3, [r5, #3]
 800d7ae:	68a2      	ldr	r2, [r4, #8]
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	3204      	adds	r2, #4
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	2104      	movs	r1, #4
 800d7b8:	60a2      	str	r2, [r4, #8]
 800d7ba:	6123      	str	r3, [r4, #16]
 800d7bc:	7561      	strb	r1, [r4, #21]
 800d7be:	7da0      	ldrb	r0, [r4, #22]
 800d7c0:	f080 0001 	eor.w	r0, r0, #1
 800d7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	602b      	str	r3, [r5, #0]
 800d7cc:	e7ef      	b.n	800d7ae <ucdr_deserialize_int32_t+0xb6>
 800d7ce:	68a2      	ldr	r2, [r4, #8]
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	7da0      	ldrb	r0, [r4, #22]
 800d7d4:	f884 8015 	strb.w	r8, [r4, #21]
 800d7d8:	1bd2      	subs	r2, r2, r7
 800d7da:	1bdb      	subs	r3, r3, r7
 800d7dc:	60a2      	str	r2, [r4, #8]
 800d7de:	6123      	str	r3, [r4, #16]
 800d7e0:	f080 0001 	eor.w	r0, r0, #1
 800d7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e8:	68a3      	ldr	r3, [r4, #8]
 800d7ea:	789b      	ldrb	r3, [r3, #2]
 800d7ec:	706b      	strb	r3, [r5, #1]
 800d7ee:	1cab      	adds	r3, r5, #2
 800d7f0:	68a2      	ldr	r2, [r4, #8]
 800d7f2:	7852      	ldrb	r2, [r2, #1]
 800d7f4:	f803 2b01 	strb.w	r2, [r3], #1
 800d7f8:	68a2      	ldr	r2, [r4, #8]
 800d7fa:	7812      	ldrb	r2, [r2, #0]
 800d7fc:	701a      	strb	r2, [r3, #0]
 800d7fe:	e7b4      	b.n	800d76a <ucdr_deserialize_int32_t+0x72>
 800d800:	4631      	mov	r1, r6
 800d802:	463a      	mov	r2, r7
 800d804:	4628      	mov	r0, r5
 800d806:	f00e ff3a 	bl	801c67e <memcpy>
 800d80a:	68a1      	ldr	r1, [r4, #8]
 800d80c:	464a      	mov	r2, r9
 800d80e:	19e8      	adds	r0, r5, r7
 800d810:	f00e ff35 	bl	801c67e <memcpy>
 800d814:	e7a9      	b.n	800d76a <ucdr_deserialize_int32_t+0x72>
 800d816:	bf00      	nop

0800d818 <ucdr_serialize_double>:
 800d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	2108      	movs	r1, #8
 800d81e:	b082      	sub	sp, #8
 800d820:	4604      	mov	r4, r0
 800d822:	ed8d 0b00 	vstr	d0, [sp]
 800d826:	f000 fb8d 	bl	800df44 <ucdr_buffer_alignment>
 800d82a:	4601      	mov	r1, r0
 800d82c:	4620      	mov	r0, r4
 800d82e:	7d67      	ldrb	r7, [r4, #21]
 800d830:	f000 fbcc 	bl	800dfcc <ucdr_advance_buffer>
 800d834:	2108      	movs	r1, #8
 800d836:	4620      	mov	r0, r4
 800d838:	f000 fb24 	bl	800de84 <ucdr_check_buffer_available_for>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d14e      	bne.n	800d8de <ucdr_serialize_double+0xc6>
 800d840:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d844:	42ab      	cmp	r3, r5
 800d846:	d945      	bls.n	800d8d4 <ucdr_serialize_double+0xbc>
 800d848:	1b5e      	subs	r6, r3, r5
 800d84a:	60a3      	str	r3, [r4, #8]
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	f1c6 0808 	rsb	r8, r6, #8
 800d852:	4433      	add	r3, r6
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	4641      	mov	r1, r8
 800d858:	4620      	mov	r0, r4
 800d85a:	f000 fb1f 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d074      	beq.n	800d94c <ucdr_serialize_double+0x134>
 800d862:	7d23      	ldrb	r3, [r4, #20]
 800d864:	2b01      	cmp	r3, #1
 800d866:	f000 809b 	beq.w	800d9a0 <ucdr_serialize_double+0x188>
 800d86a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d86e:	702b      	strb	r3, [r5, #0]
 800d870:	2e00      	cmp	r6, #0
 800d872:	d078      	beq.n	800d966 <ucdr_serialize_double+0x14e>
 800d874:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d878:	706b      	strb	r3, [r5, #1]
 800d87a:	2e01      	cmp	r6, #1
 800d87c:	d077      	beq.n	800d96e <ucdr_serialize_double+0x156>
 800d87e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d882:	70ab      	strb	r3, [r5, #2]
 800d884:	2e02      	cmp	r6, #2
 800d886:	d076      	beq.n	800d976 <ucdr_serialize_double+0x15e>
 800d888:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d88c:	70eb      	strb	r3, [r5, #3]
 800d88e:	2e03      	cmp	r6, #3
 800d890:	d075      	beq.n	800d97e <ucdr_serialize_double+0x166>
 800d892:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d896:	712b      	strb	r3, [r5, #4]
 800d898:	2e04      	cmp	r6, #4
 800d89a:	d074      	beq.n	800d986 <ucdr_serialize_double+0x16e>
 800d89c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d8a0:	716b      	strb	r3, [r5, #5]
 800d8a2:	2e05      	cmp	r6, #5
 800d8a4:	d073      	beq.n	800d98e <ucdr_serialize_double+0x176>
 800d8a6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d8aa:	71ab      	strb	r3, [r5, #6]
 800d8ac:	2e06      	cmp	r6, #6
 800d8ae:	d072      	beq.n	800d996 <ucdr_serialize_double+0x17e>
 800d8b0:	f89d 3000 	ldrb.w	r3, [sp]
 800d8b4:	71eb      	strb	r3, [r5, #7]
 800d8b6:	6923      	ldr	r3, [r4, #16]
 800d8b8:	68a2      	ldr	r2, [r4, #8]
 800d8ba:	7da0      	ldrb	r0, [r4, #22]
 800d8bc:	3308      	adds	r3, #8
 800d8be:	1b9e      	subs	r6, r3, r6
 800d8c0:	4442      	add	r2, r8
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	f080 0001 	eor.w	r0, r0, #1
 800d8c8:	60a2      	str	r2, [r4, #8]
 800d8ca:	6126      	str	r6, [r4, #16]
 800d8cc:	7563      	strb	r3, [r4, #21]
 800d8ce:	b002      	add	sp, #8
 800d8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d4:	2108      	movs	r1, #8
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f000 fae0 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800d8dc:	b350      	cbz	r0, 800d934 <ucdr_serialize_double+0x11c>
 800d8de:	7d23      	ldrb	r3, [r4, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d02d      	beq.n	800d940 <ucdr_serialize_double+0x128>
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d8ea:	701a      	strb	r2, [r3, #0]
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8f2:	705a      	strb	r2, [r3, #1]
 800d8f4:	68a3      	ldr	r3, [r4, #8]
 800d8f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8fa:	709a      	strb	r2, [r3, #2]
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d902:	70da      	strb	r2, [r3, #3]
 800d904:	68a3      	ldr	r3, [r4, #8]
 800d906:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d90a:	711a      	strb	r2, [r3, #4]
 800d90c:	68a3      	ldr	r3, [r4, #8]
 800d90e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d912:	715a      	strb	r2, [r3, #5]
 800d914:	68a3      	ldr	r3, [r4, #8]
 800d916:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d91a:	719a      	strb	r2, [r3, #6]
 800d91c:	68a3      	ldr	r3, [r4, #8]
 800d91e:	f89d 2000 	ldrb.w	r2, [sp]
 800d922:	71da      	strb	r2, [r3, #7]
 800d924:	68a2      	ldr	r2, [r4, #8]
 800d926:	6923      	ldr	r3, [r4, #16]
 800d928:	3208      	adds	r2, #8
 800d92a:	3308      	adds	r3, #8
 800d92c:	2108      	movs	r1, #8
 800d92e:	60a2      	str	r2, [r4, #8]
 800d930:	6123      	str	r3, [r4, #16]
 800d932:	7561      	strb	r1, [r4, #21]
 800d934:	7da0      	ldrb	r0, [r4, #22]
 800d936:	f080 0001 	eor.w	r0, r0, #1
 800d93a:	b002      	add	sp, #8
 800d93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d940:	466b      	mov	r3, sp
 800d942:	cb03      	ldmia	r3!, {r0, r1}
 800d944:	68a3      	ldr	r3, [r4, #8]
 800d946:	6018      	str	r0, [r3, #0]
 800d948:	6059      	str	r1, [r3, #4]
 800d94a:	e7eb      	b.n	800d924 <ucdr_serialize_double+0x10c>
 800d94c:	68a2      	ldr	r2, [r4, #8]
 800d94e:	6923      	ldr	r3, [r4, #16]
 800d950:	7da0      	ldrb	r0, [r4, #22]
 800d952:	7567      	strb	r7, [r4, #21]
 800d954:	1b92      	subs	r2, r2, r6
 800d956:	1b9b      	subs	r3, r3, r6
 800d958:	f080 0001 	eor.w	r0, r0, #1
 800d95c:	60a2      	str	r2, [r4, #8]
 800d95e:	6123      	str	r3, [r4, #16]
 800d960:	b002      	add	sp, #8
 800d962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d966:	68a3      	ldr	r3, [r4, #8]
 800d968:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d96c:	701a      	strb	r2, [r3, #0]
 800d96e:	68a3      	ldr	r3, [r4, #8]
 800d970:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d974:	701a      	strb	r2, [r3, #0]
 800d976:	68a3      	ldr	r3, [r4, #8]
 800d978:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d97c:	701a      	strb	r2, [r3, #0]
 800d97e:	68a3      	ldr	r3, [r4, #8]
 800d980:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d984:	701a      	strb	r2, [r3, #0]
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d98c:	701a      	strb	r2, [r3, #0]
 800d98e:	68a3      	ldr	r3, [r4, #8]
 800d990:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d994:	701a      	strb	r2, [r3, #0]
 800d996:	68a3      	ldr	r3, [r4, #8]
 800d998:	f89d 2000 	ldrb.w	r2, [sp]
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e78a      	b.n	800d8b6 <ucdr_serialize_double+0x9e>
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	466d      	mov	r5, sp
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	f00e fe69 	bl	801c67e <memcpy>
 800d9ac:	68a0      	ldr	r0, [r4, #8]
 800d9ae:	4642      	mov	r2, r8
 800d9b0:	19a9      	adds	r1, r5, r6
 800d9b2:	f00e fe64 	bl	801c67e <memcpy>
 800d9b6:	e77e      	b.n	800d8b6 <ucdr_serialize_double+0x9e>

0800d9b8 <ucdr_serialize_endian_double>:
 800d9b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9bc:	460e      	mov	r6, r1
 800d9be:	b083      	sub	sp, #12
 800d9c0:	2108      	movs	r1, #8
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	ed8d 0b00 	vstr	d0, [sp]
 800d9c8:	f000 fabc 	bl	800df44 <ucdr_buffer_alignment>
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d9d4:	f000 fafa 	bl	800dfcc <ucdr_advance_buffer>
 800d9d8:	2108      	movs	r1, #8
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fa52 	bl	800de84 <ucdr_check_buffer_available_for>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d14d      	bne.n	800da80 <ucdr_serialize_endian_double+0xc8>
 800d9e4:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800d9e8:	42bd      	cmp	r5, r7
 800d9ea:	d944      	bls.n	800da76 <ucdr_serialize_endian_double+0xbe>
 800d9ec:	6923      	ldr	r3, [r4, #16]
 800d9ee:	60a5      	str	r5, [r4, #8]
 800d9f0:	1bed      	subs	r5, r5, r7
 800d9f2:	442b      	add	r3, r5
 800d9f4:	f1c5 0908 	rsb	r9, r5, #8
 800d9f8:	6123      	str	r3, [r4, #16]
 800d9fa:	4649      	mov	r1, r9
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	f000 fa4d 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800da02:	2800      	cmp	r0, #0
 800da04:	d072      	beq.n	800daec <ucdr_serialize_endian_double+0x134>
 800da06:	2e01      	cmp	r6, #1
 800da08:	f000 809b 	beq.w	800db42 <ucdr_serialize_endian_double+0x18a>
 800da0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da10:	703b      	strb	r3, [r7, #0]
 800da12:	2d00      	cmp	r5, #0
 800da14:	d078      	beq.n	800db08 <ucdr_serialize_endian_double+0x150>
 800da16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800da1a:	707b      	strb	r3, [r7, #1]
 800da1c:	2d01      	cmp	r5, #1
 800da1e:	d077      	beq.n	800db10 <ucdr_serialize_endian_double+0x158>
 800da20:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800da24:	70bb      	strb	r3, [r7, #2]
 800da26:	2d02      	cmp	r5, #2
 800da28:	d076      	beq.n	800db18 <ucdr_serialize_endian_double+0x160>
 800da2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800da2e:	70fb      	strb	r3, [r7, #3]
 800da30:	2d03      	cmp	r5, #3
 800da32:	d075      	beq.n	800db20 <ucdr_serialize_endian_double+0x168>
 800da34:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800da38:	713b      	strb	r3, [r7, #4]
 800da3a:	2d04      	cmp	r5, #4
 800da3c:	d074      	beq.n	800db28 <ucdr_serialize_endian_double+0x170>
 800da3e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800da42:	717b      	strb	r3, [r7, #5]
 800da44:	2d05      	cmp	r5, #5
 800da46:	d073      	beq.n	800db30 <ucdr_serialize_endian_double+0x178>
 800da48:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800da4c:	71bb      	strb	r3, [r7, #6]
 800da4e:	2d06      	cmp	r5, #6
 800da50:	d072      	beq.n	800db38 <ucdr_serialize_endian_double+0x180>
 800da52:	f89d 3000 	ldrb.w	r3, [sp]
 800da56:	71fb      	strb	r3, [r7, #7]
 800da58:	6923      	ldr	r3, [r4, #16]
 800da5a:	68a2      	ldr	r2, [r4, #8]
 800da5c:	7da0      	ldrb	r0, [r4, #22]
 800da5e:	3308      	adds	r3, #8
 800da60:	1b5d      	subs	r5, r3, r5
 800da62:	444a      	add	r2, r9
 800da64:	2308      	movs	r3, #8
 800da66:	f080 0001 	eor.w	r0, r0, #1
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	6125      	str	r5, [r4, #16]
 800da6e:	7563      	strb	r3, [r4, #21]
 800da70:	b003      	add	sp, #12
 800da72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da76:	2108      	movs	r1, #8
 800da78:	4620      	mov	r0, r4
 800da7a:	f000 fa0f 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800da7e:	b348      	cbz	r0, 800dad4 <ucdr_serialize_endian_double+0x11c>
 800da80:	2e01      	cmp	r6, #1
 800da82:	d02d      	beq.n	800dae0 <ucdr_serialize_endian_double+0x128>
 800da84:	68a3      	ldr	r3, [r4, #8]
 800da86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800da8a:	701a      	strb	r2, [r3, #0]
 800da8c:	68a3      	ldr	r3, [r4, #8]
 800da8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da92:	705a      	strb	r2, [r3, #1]
 800da94:	68a3      	ldr	r3, [r4, #8]
 800da96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da9a:	709a      	strb	r2, [r3, #2]
 800da9c:	68a3      	ldr	r3, [r4, #8]
 800da9e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800daa2:	70da      	strb	r2, [r3, #3]
 800daa4:	68a3      	ldr	r3, [r4, #8]
 800daa6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800daaa:	711a      	strb	r2, [r3, #4]
 800daac:	68a3      	ldr	r3, [r4, #8]
 800daae:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dab2:	715a      	strb	r2, [r3, #5]
 800dab4:	68a3      	ldr	r3, [r4, #8]
 800dab6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800daba:	719a      	strb	r2, [r3, #6]
 800dabc:	68a3      	ldr	r3, [r4, #8]
 800dabe:	f89d 2000 	ldrb.w	r2, [sp]
 800dac2:	71da      	strb	r2, [r3, #7]
 800dac4:	68a2      	ldr	r2, [r4, #8]
 800dac6:	6923      	ldr	r3, [r4, #16]
 800dac8:	3208      	adds	r2, #8
 800daca:	3308      	adds	r3, #8
 800dacc:	2108      	movs	r1, #8
 800dace:	60a2      	str	r2, [r4, #8]
 800dad0:	6123      	str	r3, [r4, #16]
 800dad2:	7561      	strb	r1, [r4, #21]
 800dad4:	7da0      	ldrb	r0, [r4, #22]
 800dad6:	f080 0001 	eor.w	r0, r0, #1
 800dada:	b003      	add	sp, #12
 800dadc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dae0:	466b      	mov	r3, sp
 800dae2:	cb03      	ldmia	r3!, {r0, r1}
 800dae4:	68a3      	ldr	r3, [r4, #8]
 800dae6:	6018      	str	r0, [r3, #0]
 800dae8:	6059      	str	r1, [r3, #4]
 800daea:	e7eb      	b.n	800dac4 <ucdr_serialize_endian_double+0x10c>
 800daec:	68a2      	ldr	r2, [r4, #8]
 800daee:	6923      	ldr	r3, [r4, #16]
 800daf0:	7da0      	ldrb	r0, [r4, #22]
 800daf2:	f884 8015 	strb.w	r8, [r4, #21]
 800daf6:	1b52      	subs	r2, r2, r5
 800daf8:	1b5b      	subs	r3, r3, r5
 800dafa:	f080 0001 	eor.w	r0, r0, #1
 800dafe:	60a2      	str	r2, [r4, #8]
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	b003      	add	sp, #12
 800db04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db08:	68a3      	ldr	r3, [r4, #8]
 800db0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db0e:	701a      	strb	r2, [r3, #0]
 800db10:	68a3      	ldr	r3, [r4, #8]
 800db12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800db16:	701a      	strb	r2, [r3, #0]
 800db18:	68a3      	ldr	r3, [r4, #8]
 800db1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db1e:	701a      	strb	r2, [r3, #0]
 800db20:	68a3      	ldr	r3, [r4, #8]
 800db22:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800db26:	701a      	strb	r2, [r3, #0]
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800db2e:	701a      	strb	r2, [r3, #0]
 800db30:	68a3      	ldr	r3, [r4, #8]
 800db32:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	f89d 2000 	ldrb.w	r2, [sp]
 800db3e:	701a      	strb	r2, [r3, #0]
 800db40:	e78a      	b.n	800da58 <ucdr_serialize_endian_double+0xa0>
 800db42:	466e      	mov	r6, sp
 800db44:	4631      	mov	r1, r6
 800db46:	462a      	mov	r2, r5
 800db48:	4638      	mov	r0, r7
 800db4a:	f00e fd98 	bl	801c67e <memcpy>
 800db4e:	68a0      	ldr	r0, [r4, #8]
 800db50:	464a      	mov	r2, r9
 800db52:	1971      	adds	r1, r6, r5
 800db54:	f00e fd93 	bl	801c67e <memcpy>
 800db58:	e77e      	b.n	800da58 <ucdr_serialize_endian_double+0xa0>
 800db5a:	bf00      	nop

0800db5c <ucdr_deserialize_double>:
 800db5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db60:	460d      	mov	r5, r1
 800db62:	2108      	movs	r1, #8
 800db64:	4604      	mov	r4, r0
 800db66:	f000 f9ed 	bl	800df44 <ucdr_buffer_alignment>
 800db6a:	4601      	mov	r1, r0
 800db6c:	4620      	mov	r0, r4
 800db6e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800db72:	f000 fa2b 	bl	800dfcc <ucdr_advance_buffer>
 800db76:	2108      	movs	r1, #8
 800db78:	4620      	mov	r0, r4
 800db7a:	f000 f983 	bl	800de84 <ucdr_check_buffer_available_for>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d151      	bne.n	800dc26 <ucdr_deserialize_double+0xca>
 800db82:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800db86:	42be      	cmp	r6, r7
 800db88:	d948      	bls.n	800dc1c <ucdr_deserialize_double+0xc0>
 800db8a:	6923      	ldr	r3, [r4, #16]
 800db8c:	60a6      	str	r6, [r4, #8]
 800db8e:	1bf6      	subs	r6, r6, r7
 800db90:	4433      	add	r3, r6
 800db92:	f1c6 0808 	rsb	r8, r6, #8
 800db96:	6123      	str	r3, [r4, #16]
 800db98:	4641      	mov	r1, r8
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 f97e 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d06d      	beq.n	800dc80 <ucdr_deserialize_double+0x124>
 800dba4:	7d23      	ldrb	r3, [r4, #20]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	f000 8093 	beq.w	800dcd2 <ucdr_deserialize_double+0x176>
 800dbac:	79fb      	ldrb	r3, [r7, #7]
 800dbae:	702b      	strb	r3, [r5, #0]
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	d072      	beq.n	800dc9a <ucdr_deserialize_double+0x13e>
 800dbb4:	79bb      	ldrb	r3, [r7, #6]
 800dbb6:	706b      	strb	r3, [r5, #1]
 800dbb8:	2e01      	cmp	r6, #1
 800dbba:	f105 0302 	add.w	r3, r5, #2
 800dbbe:	d070      	beq.n	800dca2 <ucdr_deserialize_double+0x146>
 800dbc0:	797b      	ldrb	r3, [r7, #5]
 800dbc2:	70ab      	strb	r3, [r5, #2]
 800dbc4:	2e02      	cmp	r6, #2
 800dbc6:	f105 0303 	add.w	r3, r5, #3
 800dbca:	d06e      	beq.n	800dcaa <ucdr_deserialize_double+0x14e>
 800dbcc:	793b      	ldrb	r3, [r7, #4]
 800dbce:	70eb      	strb	r3, [r5, #3]
 800dbd0:	2e03      	cmp	r6, #3
 800dbd2:	f105 0304 	add.w	r3, r5, #4
 800dbd6:	d06c      	beq.n	800dcb2 <ucdr_deserialize_double+0x156>
 800dbd8:	78fb      	ldrb	r3, [r7, #3]
 800dbda:	712b      	strb	r3, [r5, #4]
 800dbdc:	2e04      	cmp	r6, #4
 800dbde:	f105 0305 	add.w	r3, r5, #5
 800dbe2:	d06a      	beq.n	800dcba <ucdr_deserialize_double+0x15e>
 800dbe4:	78bb      	ldrb	r3, [r7, #2]
 800dbe6:	716b      	strb	r3, [r5, #5]
 800dbe8:	2e05      	cmp	r6, #5
 800dbea:	f105 0306 	add.w	r3, r5, #6
 800dbee:	d068      	beq.n	800dcc2 <ucdr_deserialize_double+0x166>
 800dbf0:	787b      	ldrb	r3, [r7, #1]
 800dbf2:	71ab      	strb	r3, [r5, #6]
 800dbf4:	2e06      	cmp	r6, #6
 800dbf6:	f105 0307 	add.w	r3, r5, #7
 800dbfa:	d066      	beq.n	800dcca <ucdr_deserialize_double+0x16e>
 800dbfc:	783b      	ldrb	r3, [r7, #0]
 800dbfe:	71eb      	strb	r3, [r5, #7]
 800dc00:	6923      	ldr	r3, [r4, #16]
 800dc02:	68a2      	ldr	r2, [r4, #8]
 800dc04:	7da0      	ldrb	r0, [r4, #22]
 800dc06:	3308      	adds	r3, #8
 800dc08:	1b9e      	subs	r6, r3, r6
 800dc0a:	2308      	movs	r3, #8
 800dc0c:	4442      	add	r2, r8
 800dc0e:	7563      	strb	r3, [r4, #21]
 800dc10:	60a2      	str	r2, [r4, #8]
 800dc12:	6126      	str	r6, [r4, #16]
 800dc14:	f080 0001 	eor.w	r0, r0, #1
 800dc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc1c:	2108      	movs	r1, #8
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f000 f93c 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800dc24:	b310      	cbz	r0, 800dc6c <ucdr_deserialize_double+0x110>
 800dc26:	7d23      	ldrb	r3, [r4, #20]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	d023      	beq.n	800dc76 <ucdr_deserialize_double+0x11a>
 800dc2e:	79db      	ldrb	r3, [r3, #7]
 800dc30:	702b      	strb	r3, [r5, #0]
 800dc32:	68a3      	ldr	r3, [r4, #8]
 800dc34:	799b      	ldrb	r3, [r3, #6]
 800dc36:	706b      	strb	r3, [r5, #1]
 800dc38:	68a3      	ldr	r3, [r4, #8]
 800dc3a:	795b      	ldrb	r3, [r3, #5]
 800dc3c:	70ab      	strb	r3, [r5, #2]
 800dc3e:	68a3      	ldr	r3, [r4, #8]
 800dc40:	791b      	ldrb	r3, [r3, #4]
 800dc42:	70eb      	strb	r3, [r5, #3]
 800dc44:	68a3      	ldr	r3, [r4, #8]
 800dc46:	78db      	ldrb	r3, [r3, #3]
 800dc48:	712b      	strb	r3, [r5, #4]
 800dc4a:	68a3      	ldr	r3, [r4, #8]
 800dc4c:	789b      	ldrb	r3, [r3, #2]
 800dc4e:	716b      	strb	r3, [r5, #5]
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	785b      	ldrb	r3, [r3, #1]
 800dc54:	71ab      	strb	r3, [r5, #6]
 800dc56:	68a3      	ldr	r3, [r4, #8]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	71eb      	strb	r3, [r5, #7]
 800dc5c:	68a2      	ldr	r2, [r4, #8]
 800dc5e:	6923      	ldr	r3, [r4, #16]
 800dc60:	3208      	adds	r2, #8
 800dc62:	3308      	adds	r3, #8
 800dc64:	2108      	movs	r1, #8
 800dc66:	60a2      	str	r2, [r4, #8]
 800dc68:	6123      	str	r3, [r4, #16]
 800dc6a:	7561      	strb	r1, [r4, #21]
 800dc6c:	7da0      	ldrb	r0, [r4, #22]
 800dc6e:	f080 0001 	eor.w	r0, r0, #1
 800dc72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	606b      	str	r3, [r5, #4]
 800dc7c:	602a      	str	r2, [r5, #0]
 800dc7e:	e7ed      	b.n	800dc5c <ucdr_deserialize_double+0x100>
 800dc80:	68a2      	ldr	r2, [r4, #8]
 800dc82:	6923      	ldr	r3, [r4, #16]
 800dc84:	7da0      	ldrb	r0, [r4, #22]
 800dc86:	f884 9015 	strb.w	r9, [r4, #21]
 800dc8a:	1b92      	subs	r2, r2, r6
 800dc8c:	1b9b      	subs	r3, r3, r6
 800dc8e:	60a2      	str	r2, [r4, #8]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	f080 0001 	eor.w	r0, r0, #1
 800dc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc9a:	68a3      	ldr	r3, [r4, #8]
 800dc9c:	799b      	ldrb	r3, [r3, #6]
 800dc9e:	706b      	strb	r3, [r5, #1]
 800dca0:	1cab      	adds	r3, r5, #2
 800dca2:	68a2      	ldr	r2, [r4, #8]
 800dca4:	7952      	ldrb	r2, [r2, #5]
 800dca6:	f803 2b01 	strb.w	r2, [r3], #1
 800dcaa:	68a2      	ldr	r2, [r4, #8]
 800dcac:	7912      	ldrb	r2, [r2, #4]
 800dcae:	f803 2b01 	strb.w	r2, [r3], #1
 800dcb2:	68a2      	ldr	r2, [r4, #8]
 800dcb4:	78d2      	ldrb	r2, [r2, #3]
 800dcb6:	f803 2b01 	strb.w	r2, [r3], #1
 800dcba:	68a2      	ldr	r2, [r4, #8]
 800dcbc:	7892      	ldrb	r2, [r2, #2]
 800dcbe:	f803 2b01 	strb.w	r2, [r3], #1
 800dcc2:	68a2      	ldr	r2, [r4, #8]
 800dcc4:	7852      	ldrb	r2, [r2, #1]
 800dcc6:	f803 2b01 	strb.w	r2, [r3], #1
 800dcca:	68a2      	ldr	r2, [r4, #8]
 800dccc:	7812      	ldrb	r2, [r2, #0]
 800dcce:	701a      	strb	r2, [r3, #0]
 800dcd0:	e796      	b.n	800dc00 <ucdr_deserialize_double+0xa4>
 800dcd2:	4639      	mov	r1, r7
 800dcd4:	4632      	mov	r2, r6
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f00e fcd1 	bl	801c67e <memcpy>
 800dcdc:	68a1      	ldr	r1, [r4, #8]
 800dcde:	4642      	mov	r2, r8
 800dce0:	19a8      	adds	r0, r5, r6
 800dce2:	f00e fccc 	bl	801c67e <memcpy>
 800dce6:	e78b      	b.n	800dc00 <ucdr_deserialize_double+0xa4>

0800dce8 <ucdr_deserialize_endian_double>:
 800dce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcec:	460f      	mov	r7, r1
 800dcee:	2108      	movs	r1, #8
 800dcf0:	4604      	mov	r4, r0
 800dcf2:	4615      	mov	r5, r2
 800dcf4:	f000 f926 	bl	800df44 <ucdr_buffer_alignment>
 800dcf8:	4601      	mov	r1, r0
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800dd00:	f000 f964 	bl	800dfcc <ucdr_advance_buffer>
 800dd04:	2108      	movs	r1, #8
 800dd06:	4620      	mov	r0, r4
 800dd08:	f000 f8bc 	bl	800de84 <ucdr_check_buffer_available_for>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d159      	bne.n	800ddc4 <ucdr_deserialize_endian_double+0xdc>
 800dd10:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800dd14:	4546      	cmp	r6, r8
 800dd16:	d950      	bls.n	800ddba <ucdr_deserialize_endian_double+0xd2>
 800dd18:	6923      	ldr	r3, [r4, #16]
 800dd1a:	60a6      	str	r6, [r4, #8]
 800dd1c:	eba6 0608 	sub.w	r6, r6, r8
 800dd20:	4433      	add	r3, r6
 800dd22:	f1c6 0a08 	rsb	sl, r6, #8
 800dd26:	6123      	str	r3, [r4, #16]
 800dd28:	4651      	mov	r1, sl
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 f8b6 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d073      	beq.n	800de1c <ucdr_deserialize_endian_double+0x134>
 800dd34:	2f01      	cmp	r7, #1
 800dd36:	f000 809a 	beq.w	800de6e <ucdr_deserialize_endian_double+0x186>
 800dd3a:	f898 3007 	ldrb.w	r3, [r8, #7]
 800dd3e:	702b      	strb	r3, [r5, #0]
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	d078      	beq.n	800de36 <ucdr_deserialize_endian_double+0x14e>
 800dd44:	f898 3006 	ldrb.w	r3, [r8, #6]
 800dd48:	706b      	strb	r3, [r5, #1]
 800dd4a:	2e01      	cmp	r6, #1
 800dd4c:	f105 0302 	add.w	r3, r5, #2
 800dd50:	d075      	beq.n	800de3e <ucdr_deserialize_endian_double+0x156>
 800dd52:	f898 3005 	ldrb.w	r3, [r8, #5]
 800dd56:	70ab      	strb	r3, [r5, #2]
 800dd58:	2e02      	cmp	r6, #2
 800dd5a:	f105 0303 	add.w	r3, r5, #3
 800dd5e:	d072      	beq.n	800de46 <ucdr_deserialize_endian_double+0x15e>
 800dd60:	f898 3004 	ldrb.w	r3, [r8, #4]
 800dd64:	70eb      	strb	r3, [r5, #3]
 800dd66:	2e03      	cmp	r6, #3
 800dd68:	f105 0304 	add.w	r3, r5, #4
 800dd6c:	d06f      	beq.n	800de4e <ucdr_deserialize_endian_double+0x166>
 800dd6e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800dd72:	712b      	strb	r3, [r5, #4]
 800dd74:	2e04      	cmp	r6, #4
 800dd76:	f105 0305 	add.w	r3, r5, #5
 800dd7a:	d06c      	beq.n	800de56 <ucdr_deserialize_endian_double+0x16e>
 800dd7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd80:	716b      	strb	r3, [r5, #5]
 800dd82:	2e05      	cmp	r6, #5
 800dd84:	f105 0306 	add.w	r3, r5, #6
 800dd88:	d069      	beq.n	800de5e <ucdr_deserialize_endian_double+0x176>
 800dd8a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dd8e:	71ab      	strb	r3, [r5, #6]
 800dd90:	2e06      	cmp	r6, #6
 800dd92:	f105 0307 	add.w	r3, r5, #7
 800dd96:	d066      	beq.n	800de66 <ucdr_deserialize_endian_double+0x17e>
 800dd98:	f898 3000 	ldrb.w	r3, [r8]
 800dd9c:	71eb      	strb	r3, [r5, #7]
 800dd9e:	6923      	ldr	r3, [r4, #16]
 800dda0:	68a2      	ldr	r2, [r4, #8]
 800dda2:	7da0      	ldrb	r0, [r4, #22]
 800dda4:	3308      	adds	r3, #8
 800dda6:	1b9e      	subs	r6, r3, r6
 800dda8:	2308      	movs	r3, #8
 800ddaa:	4452      	add	r2, sl
 800ddac:	7563      	strb	r3, [r4, #21]
 800ddae:	60a2      	str	r2, [r4, #8]
 800ddb0:	6126      	str	r6, [r4, #16]
 800ddb2:	f080 0001 	eor.w	r0, r0, #1
 800ddb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddba:	2108      	movs	r1, #8
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 f86d 	bl	800de9c <ucdr_check_final_buffer_behavior>
 800ddc2:	b308      	cbz	r0, 800de08 <ucdr_deserialize_endian_double+0x120>
 800ddc4:	2f01      	cmp	r7, #1
 800ddc6:	68a3      	ldr	r3, [r4, #8]
 800ddc8:	d023      	beq.n	800de12 <ucdr_deserialize_endian_double+0x12a>
 800ddca:	79db      	ldrb	r3, [r3, #7]
 800ddcc:	702b      	strb	r3, [r5, #0]
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	799b      	ldrb	r3, [r3, #6]
 800ddd2:	706b      	strb	r3, [r5, #1]
 800ddd4:	68a3      	ldr	r3, [r4, #8]
 800ddd6:	795b      	ldrb	r3, [r3, #5]
 800ddd8:	70ab      	strb	r3, [r5, #2]
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	791b      	ldrb	r3, [r3, #4]
 800ddde:	70eb      	strb	r3, [r5, #3]
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	78db      	ldrb	r3, [r3, #3]
 800dde4:	712b      	strb	r3, [r5, #4]
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	789b      	ldrb	r3, [r3, #2]
 800ddea:	716b      	strb	r3, [r5, #5]
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	785b      	ldrb	r3, [r3, #1]
 800ddf0:	71ab      	strb	r3, [r5, #6]
 800ddf2:	68a3      	ldr	r3, [r4, #8]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	71eb      	strb	r3, [r5, #7]
 800ddf8:	68a2      	ldr	r2, [r4, #8]
 800ddfa:	6923      	ldr	r3, [r4, #16]
 800ddfc:	3208      	adds	r2, #8
 800ddfe:	3308      	adds	r3, #8
 800de00:	2108      	movs	r1, #8
 800de02:	60a2      	str	r2, [r4, #8]
 800de04:	6123      	str	r3, [r4, #16]
 800de06:	7561      	strb	r1, [r4, #21]
 800de08:	7da0      	ldrb	r0, [r4, #22]
 800de0a:	f080 0001 	eor.w	r0, r0, #1
 800de0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	606b      	str	r3, [r5, #4]
 800de18:	602a      	str	r2, [r5, #0]
 800de1a:	e7ed      	b.n	800ddf8 <ucdr_deserialize_endian_double+0x110>
 800de1c:	68a2      	ldr	r2, [r4, #8]
 800de1e:	6923      	ldr	r3, [r4, #16]
 800de20:	7da0      	ldrb	r0, [r4, #22]
 800de22:	f884 9015 	strb.w	r9, [r4, #21]
 800de26:	1b92      	subs	r2, r2, r6
 800de28:	1b9b      	subs	r3, r3, r6
 800de2a:	60a2      	str	r2, [r4, #8]
 800de2c:	6123      	str	r3, [r4, #16]
 800de2e:	f080 0001 	eor.w	r0, r0, #1
 800de32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de36:	68a3      	ldr	r3, [r4, #8]
 800de38:	799b      	ldrb	r3, [r3, #6]
 800de3a:	706b      	strb	r3, [r5, #1]
 800de3c:	1cab      	adds	r3, r5, #2
 800de3e:	68a2      	ldr	r2, [r4, #8]
 800de40:	7952      	ldrb	r2, [r2, #5]
 800de42:	f803 2b01 	strb.w	r2, [r3], #1
 800de46:	68a2      	ldr	r2, [r4, #8]
 800de48:	7912      	ldrb	r2, [r2, #4]
 800de4a:	f803 2b01 	strb.w	r2, [r3], #1
 800de4e:	68a2      	ldr	r2, [r4, #8]
 800de50:	78d2      	ldrb	r2, [r2, #3]
 800de52:	f803 2b01 	strb.w	r2, [r3], #1
 800de56:	68a2      	ldr	r2, [r4, #8]
 800de58:	7892      	ldrb	r2, [r2, #2]
 800de5a:	f803 2b01 	strb.w	r2, [r3], #1
 800de5e:	68a2      	ldr	r2, [r4, #8]
 800de60:	7852      	ldrb	r2, [r2, #1]
 800de62:	f803 2b01 	strb.w	r2, [r3], #1
 800de66:	68a2      	ldr	r2, [r4, #8]
 800de68:	7812      	ldrb	r2, [r2, #0]
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	e797      	b.n	800dd9e <ucdr_deserialize_endian_double+0xb6>
 800de6e:	4641      	mov	r1, r8
 800de70:	4632      	mov	r2, r6
 800de72:	4628      	mov	r0, r5
 800de74:	f00e fc03 	bl	801c67e <memcpy>
 800de78:	68a1      	ldr	r1, [r4, #8]
 800de7a:	4652      	mov	r2, sl
 800de7c:	19a8      	adds	r0, r5, r6
 800de7e:	f00e fbfe 	bl	801c67e <memcpy>
 800de82:	e78c      	b.n	800dd9e <ucdr_deserialize_endian_double+0xb6>

0800de84 <ucdr_check_buffer_available_for>:
 800de84:	7d83      	ldrb	r3, [r0, #22]
 800de86:	b93b      	cbnz	r3, 800de98 <ucdr_check_buffer_available_for+0x14>
 800de88:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800de8c:	4419      	add	r1, r3
 800de8e:	4288      	cmp	r0, r1
 800de90:	bf34      	ite	cc
 800de92:	2000      	movcc	r0, #0
 800de94:	2001      	movcs	r0, #1
 800de96:	4770      	bx	lr
 800de98:	2000      	movs	r0, #0
 800de9a:	4770      	bx	lr

0800de9c <ucdr_check_final_buffer_behavior>:
 800de9c:	7d83      	ldrb	r3, [r0, #22]
 800de9e:	b943      	cbnz	r3, 800deb2 <ucdr_check_final_buffer_behavior+0x16>
 800dea0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800dea4:	4291      	cmp	r1, r2
 800dea6:	b510      	push	{r4, lr}
 800dea8:	4604      	mov	r4, r0
 800deaa:	d205      	bcs.n	800deb8 <ucdr_check_final_buffer_behavior+0x1c>
 800deac:	2301      	movs	r3, #1
 800deae:	4618      	mov	r0, r3
 800deb0:	bd10      	pop	{r4, pc}
 800deb2:	2300      	movs	r3, #0
 800deb4:	4618      	mov	r0, r3
 800deb6:	4770      	bx	lr
 800deb8:	6982      	ldr	r2, [r0, #24]
 800deba:	b13a      	cbz	r2, 800decc <ucdr_check_final_buffer_behavior+0x30>
 800debc:	69c1      	ldr	r1, [r0, #28]
 800debe:	4790      	blx	r2
 800dec0:	f080 0301 	eor.w	r3, r0, #1
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	75a0      	strb	r0, [r4, #22]
 800dec8:	4618      	mov	r0, r3
 800deca:	bd10      	pop	{r4, pc}
 800decc:	2001      	movs	r0, #1
 800dece:	75a0      	strb	r0, [r4, #22]
 800ded0:	e7fa      	b.n	800dec8 <ucdr_check_final_buffer_behavior+0x2c>
 800ded2:	bf00      	nop

0800ded4 <ucdr_set_on_full_buffer_callback>:
 800ded4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop

0800dedc <ucdr_init_buffer_origin_offset_endian>:
 800dedc:	b410      	push	{r4}
 800dede:	9c01      	ldr	r4, [sp, #4]
 800dee0:	6001      	str	r1, [r0, #0]
 800dee2:	440a      	add	r2, r1
 800dee4:	6042      	str	r2, [r0, #4]
 800dee6:	190a      	adds	r2, r1, r4
 800dee8:	441c      	add	r4, r3
 800deea:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800deee:	6082      	str	r2, [r0, #8]
 800def0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800def4:	7503      	strb	r3, [r0, #20]
 800def6:	2200      	movs	r2, #0
 800def8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800defc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df00:	7542      	strb	r2, [r0, #21]
 800df02:	7582      	strb	r2, [r0, #22]
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop

0800df08 <ucdr_init_buffer_origin_offset>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	9c04      	ldr	r4, [sp, #16]
 800df0e:	9400      	str	r4, [sp, #0]
 800df10:	2401      	movs	r4, #1
 800df12:	9401      	str	r4, [sp, #4]
 800df14:	f7ff ffe2 	bl	800dedc <ucdr_init_buffer_origin_offset_endian>
 800df18:	b002      	add	sp, #8
 800df1a:	bd10      	pop	{r4, pc}

0800df1c <ucdr_init_buffer_origin>:
 800df1c:	b510      	push	{r4, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	2400      	movs	r4, #0
 800df22:	9400      	str	r4, [sp, #0]
 800df24:	f7ff fff0 	bl	800df08 <ucdr_init_buffer_origin_offset>
 800df28:	b002      	add	sp, #8
 800df2a:	bd10      	pop	{r4, pc}

0800df2c <ucdr_init_buffer>:
 800df2c:	2300      	movs	r3, #0
 800df2e:	f7ff bff5 	b.w	800df1c <ucdr_init_buffer_origin>
 800df32:	bf00      	nop

0800df34 <ucdr_alignment>:
 800df34:	fbb0 f3f1 	udiv	r3, r0, r1
 800df38:	fb03 0011 	mls	r0, r3, r1, r0
 800df3c:	1a08      	subs	r0, r1, r0
 800df3e:	3901      	subs	r1, #1
 800df40:	4008      	ands	r0, r1
 800df42:	4770      	bx	lr

0800df44 <ucdr_buffer_alignment>:
 800df44:	7d43      	ldrb	r3, [r0, #21]
 800df46:	428b      	cmp	r3, r1
 800df48:	d208      	bcs.n	800df5c <ucdr_buffer_alignment+0x18>
 800df4a:	6900      	ldr	r0, [r0, #16]
 800df4c:	fbb0 f3f1 	udiv	r3, r0, r1
 800df50:	fb01 0013 	mls	r0, r1, r3, r0
 800df54:	1a08      	subs	r0, r1, r0
 800df56:	3901      	subs	r1, #1
 800df58:	4008      	ands	r0, r1
 800df5a:	4770      	bx	lr
 800df5c:	2000      	movs	r0, #0
 800df5e:	4770      	bx	lr

0800df60 <ucdr_align_to>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	4604      	mov	r4, r0
 800df64:	460d      	mov	r5, r1
 800df66:	f7ff ffed 	bl	800df44 <ucdr_buffer_alignment>
 800df6a:	68a3      	ldr	r3, [r4, #8]
 800df6c:	6921      	ldr	r1, [r4, #16]
 800df6e:	7565      	strb	r5, [r4, #21]
 800df70:	181a      	adds	r2, r3, r0
 800df72:	6863      	ldr	r3, [r4, #4]
 800df74:	4293      	cmp	r3, r2
 800df76:	4408      	add	r0, r1
 800df78:	bf28      	it	cs
 800df7a:	4613      	movcs	r3, r2
 800df7c:	6120      	str	r0, [r4, #16]
 800df7e:	60a3      	str	r3, [r4, #8]
 800df80:	bd38      	pop	{r3, r4, r5, pc}
 800df82:	bf00      	nop

0800df84 <ucdr_buffer_length>:
 800df84:	6882      	ldr	r2, [r0, #8]
 800df86:	6800      	ldr	r0, [r0, #0]
 800df88:	1a10      	subs	r0, r2, r0
 800df8a:	4770      	bx	lr

0800df8c <ucdr_buffer_remaining>:
 800df8c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800df90:	1a10      	subs	r0, r2, r0
 800df92:	4770      	bx	lr

0800df94 <ucdr_check_final_buffer_behavior_array>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	7d83      	ldrb	r3, [r0, #22]
 800df98:	b963      	cbnz	r3, 800dfb4 <ucdr_check_final_buffer_behavior_array+0x20>
 800df9a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	460d      	mov	r5, r1
 800dfa4:	d308      	bcc.n	800dfb8 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfa6:	b139      	cbz	r1, 800dfb8 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfa8:	6983      	ldr	r3, [r0, #24]
 800dfaa:	b163      	cbz	r3, 800dfc6 <ucdr_check_final_buffer_behavior_array+0x32>
 800dfac:	69c1      	ldr	r1, [r0, #28]
 800dfae:	4798      	blx	r3
 800dfb0:	75a0      	strb	r0, [r4, #22]
 800dfb2:	b108      	cbz	r0, 800dfb8 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	bd38      	pop	{r3, r4, r5, pc}
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f7ff ffe7 	bl	800df8c <ucdr_buffer_remaining>
 800dfbe:	42a8      	cmp	r0, r5
 800dfc0:	bf28      	it	cs
 800dfc2:	4628      	movcs	r0, r5
 800dfc4:	bd38      	pop	{r3, r4, r5, pc}
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	7583      	strb	r3, [r0, #22]
 800dfca:	e7f3      	b.n	800dfb4 <ucdr_check_final_buffer_behavior_array+0x20>

0800dfcc <ucdr_advance_buffer>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	4604      	mov	r4, r0
 800dfd0:	460d      	mov	r5, r1
 800dfd2:	f7ff ff57 	bl	800de84 <ucdr_check_buffer_available_for>
 800dfd6:	b178      	cbz	r0, 800dff8 <ucdr_advance_buffer+0x2c>
 800dfd8:	6923      	ldr	r3, [r4, #16]
 800dfda:	68a2      	ldr	r2, [r4, #8]
 800dfdc:	442b      	add	r3, r5
 800dfde:	6123      	str	r3, [r4, #16]
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	442a      	add	r2, r5
 800dfe4:	7563      	strb	r3, [r4, #21]
 800dfe6:	60a2      	str	r2, [r4, #8]
 800dfe8:	bd38      	pop	{r3, r4, r5, pc}
 800dfea:	68a2      	ldr	r2, [r4, #8]
 800dfec:	6923      	ldr	r3, [r4, #16]
 800dfee:	4402      	add	r2, r0
 800dff0:	4403      	add	r3, r0
 800dff2:	1a2d      	subs	r5, r5, r0
 800dff4:	60a2      	str	r2, [r4, #8]
 800dff6:	6123      	str	r3, [r4, #16]
 800dff8:	4629      	mov	r1, r5
 800dffa:	2201      	movs	r2, #1
 800dffc:	4620      	mov	r0, r4
 800dffe:	f7ff ffc9 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 800e002:	2800      	cmp	r0, #0
 800e004:	d1f1      	bne.n	800dfea <ucdr_advance_buffer+0x1e>
 800e006:	2301      	movs	r3, #1
 800e008:	7563      	strb	r3, [r4, #21]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}

0800e00c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e00c:	4b04      	ldr	r3, [pc, #16]	@ (800e020 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e00e:	681a      	ldr	r2, [r3, #0]
 800e010:	b10a      	cbz	r2, 800e016 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800e012:	4803      	ldr	r0, [pc, #12]	@ (800e020 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e014:	4770      	bx	lr
 800e016:	4a03      	ldr	r2, [pc, #12]	@ (800e024 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800e018:	4801      	ldr	r0, [pc, #4]	@ (800e020 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800e01a:	6812      	ldr	r2, [r2, #0]
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	4770      	bx	lr
 800e020:	200001c8 	.word	0x200001c8
 800e024:	2000030c 	.word	0x2000030c

0800e028 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e028:	4a02      	ldr	r2, [pc, #8]	@ (800e034 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800e02a:	4b03      	ldr	r3, [pc, #12]	@ (800e038 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	2000030c 	.word	0x2000030c
 800e038:	200001c8 	.word	0x200001c8

0800e03c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800e03c:	f008 bc68 	b.w	8016910 <nav_msgs__msg__Odometry__init>

0800e040 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800e040:	f008 bcbc 	b.w	80169bc <nav_msgs__msg__Odometry__fini>

0800e044 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e044:	b510      	push	{r4, lr}
 800e046:	f004 f909 	bl	801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e04a:	4c0a      	ldr	r4, [pc, #40]	@ (800e074 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800e04c:	60e0      	str	r0, [r4, #12]
 800e04e:	f004 fabd 	bl	80125cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e052:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e056:	f004 faed 	bl	8012634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e05a:	4b07      	ldr	r3, [pc, #28]	@ (800e078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e05c:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	b10a      	cbz	r2, 800e068 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800e064:	4804      	ldr	r0, [pc, #16]	@ (800e078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e066:	bd10      	pop	{r4, pc}
 800e068:	4a04      	ldr	r2, [pc, #16]	@ (800e07c <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800e06a:	4803      	ldr	r0, [pc, #12]	@ (800e078 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800e06c:	6812      	ldr	r2, [r2, #0]
 800e06e:	601a      	str	r2, [r3, #0]
 800e070:	bd10      	pop	{r4, pc}
 800e072:	bf00      	nop
 800e074:	200001d4 	.word	0x200001d4
 800e078:	200002c4 	.word	0x200002c4
 800e07c:	20000310 	.word	0x20000310

0800e080 <get_serialized_size_nav_msgs__msg__Odometry>:
 800e080:	b5d0      	push	{r4, r6, r7, lr}
 800e082:	4604      	mov	r4, r0
 800e084:	b1c0      	cbz	r0, 800e0b8 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800e086:	460f      	mov	r7, r1
 800e088:	f004 f91e 	bl	80122c8 <get_serialized_size_std_msgs__msg__Header>
 800e08c:	183e      	adds	r6, r7, r0
 800e08e:	2104      	movs	r1, #4
 800e090:	4630      	mov	r0, r6
 800e092:	f7ff ff4f 	bl	800df34 <ucdr_alignment>
 800e096:	69a3      	ldr	r3, [r4, #24]
 800e098:	3305      	adds	r3, #5
 800e09a:	4403      	add	r3, r0
 800e09c:	441e      	add	r6, r3
 800e09e:	4631      	mov	r1, r6
 800e0a0:	f104 0020 	add.w	r0, r4, #32
 800e0a4:	f004 fadc 	bl	8012660 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e0a8:	4406      	add	r6, r0
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e0b0:	f004 fb46 	bl	8012740 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e0b4:	1bc0      	subs	r0, r0, r7
 800e0b6:	4430      	add	r0, r6
 800e0b8:	bdd0      	pop	{r4, r6, r7, pc}
 800e0ba:	bf00      	nop

0800e0bc <_Odometry__cdr_deserialize>:
 800e0bc:	b570      	push	{r4, r5, r6, lr}
 800e0be:	460c      	mov	r4, r1
 800e0c0:	b082      	sub	sp, #8
 800e0c2:	b351      	cbz	r1, 800e11a <_Odometry__cdr_deserialize+0x5e>
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	f004 f981 	bl	80123cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e0ca:	6843      	ldr	r3, [r0, #4]
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	68db      	ldr	r3, [r3, #12]
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	4798      	blx	r3
 800e0d4:	69e6      	ldr	r6, [r4, #28]
 800e0d6:	6961      	ldr	r1, [r4, #20]
 800e0d8:	ab01      	add	r3, sp, #4
 800e0da:	4632      	mov	r2, r6
 800e0dc:	4628      	mov	r0, r5
 800e0de:	f004 fd87 	bl	8012bf0 <ucdr_deserialize_sequence_char>
 800e0e2:	b9a8      	cbnz	r0, 800e110 <_Odometry__cdr_deserialize+0x54>
 800e0e4:	9a01      	ldr	r2, [sp, #4]
 800e0e6:	4296      	cmp	r6, r2
 800e0e8:	d31a      	bcc.n	800e120 <_Odometry__cdr_deserialize+0x64>
 800e0ea:	f004 fb25 	bl	8012738 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e0ee:	6843      	ldr	r3, [r0, #4]
 800e0f0:	f104 0120 	add.w	r1, r4, #32
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	4798      	blx	r3
 800e0fa:	f004 fb8d 	bl	8012818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e0fe:	6843      	ldr	r3, [r0, #4]
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800e106:	4628      	mov	r0, r5
 800e108:	b002      	add	sp, #8
 800e10a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e10e:	4718      	bx	r3
 800e110:	9b01      	ldr	r3, [sp, #4]
 800e112:	b103      	cbz	r3, 800e116 <_Odometry__cdr_deserialize+0x5a>
 800e114:	3b01      	subs	r3, #1
 800e116:	61a3      	str	r3, [r4, #24]
 800e118:	e7e7      	b.n	800e0ea <_Odometry__cdr_deserialize+0x2e>
 800e11a:	4608      	mov	r0, r1
 800e11c:	b002      	add	sp, #8
 800e11e:	bd70      	pop	{r4, r5, r6, pc}
 800e120:	2101      	movs	r1, #1
 800e122:	75a8      	strb	r0, [r5, #22]
 800e124:	7569      	strb	r1, [r5, #21]
 800e126:	61a0      	str	r0, [r4, #24]
 800e128:	4628      	mov	r0, r5
 800e12a:	f7ff ff19 	bl	800df60 <ucdr_align_to>
 800e12e:	9901      	ldr	r1, [sp, #4]
 800e130:	4628      	mov	r0, r5
 800e132:	f7ff ff4b 	bl	800dfcc <ucdr_advance_buffer>
 800e136:	e7d8      	b.n	800e0ea <_Odometry__cdr_deserialize+0x2e>

0800e138 <_Odometry__cdr_serialize>:
 800e138:	b348      	cbz	r0, 800e18e <_Odometry__cdr_serialize+0x56>
 800e13a:	b570      	push	{r4, r5, r6, lr}
 800e13c:	4604      	mov	r4, r0
 800e13e:	460e      	mov	r6, r1
 800e140:	f004 f944 	bl	80123cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800e144:	6843      	ldr	r3, [r0, #4]
 800e146:	4631      	mov	r1, r6
 800e148:	689b      	ldr	r3, [r3, #8]
 800e14a:	4620      	mov	r0, r4
 800e14c:	4798      	blx	r3
 800e14e:	6965      	ldr	r5, [r4, #20]
 800e150:	b1d5      	cbz	r5, 800e188 <_Odometry__cdr_serialize+0x50>
 800e152:	4628      	mov	r0, r5
 800e154:	f7f2 f866 	bl	8000224 <strlen>
 800e158:	1c42      	adds	r2, r0, #1
 800e15a:	4629      	mov	r1, r5
 800e15c:	61a0      	str	r0, [r4, #24]
 800e15e:	4630      	mov	r0, r6
 800e160:	f004 fd34 	bl	8012bcc <ucdr_serialize_sequence_char>
 800e164:	f004 fae8 	bl	8012738 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800e168:	6843      	ldr	r3, [r0, #4]
 800e16a:	4631      	mov	r1, r6
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	f104 0020 	add.w	r0, r4, #32
 800e172:	4798      	blx	r3
 800e174:	f004 fb50 	bl	8012818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800e178:	6843      	ldr	r3, [r0, #4]
 800e17a:	4631      	mov	r1, r6
 800e17c:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e186:	4718      	bx	r3
 800e188:	462a      	mov	r2, r5
 800e18a:	4628      	mov	r0, r5
 800e18c:	e7e5      	b.n	800e15a <_Odometry__cdr_serialize+0x22>
 800e18e:	4770      	bx	lr

0800e190 <_Odometry__max_serialized_size>:
 800e190:	b510      	push	{r4, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	2301      	movs	r3, #1
 800e196:	2100      	movs	r1, #0
 800e198:	f10d 0007 	add.w	r0, sp, #7
 800e19c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1a0:	f004 f90a 	bl	80123b8 <max_serialized_size_std_msgs__msg__Header>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	f10d 0007 	add.w	r0, sp, #7
 800e1ae:	f88d 3007 	strb.w	r3, [sp, #7]
 800e1b2:	f004 fab1 	bl	8012718 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e1b6:	4404      	add	r4, r0
 800e1b8:	4621      	mov	r1, r4
 800e1ba:	f10d 0007 	add.w	r0, sp, #7
 800e1be:	f004 fb1b 	bl	80127f8 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e1c2:	4420      	add	r0, r4
 800e1c4:	b002      	add	sp, #8
 800e1c6:	bd10      	pop	{r4, pc}

0800e1c8 <_Odometry__get_serialized_size>:
 800e1c8:	b5d0      	push	{r4, r6, r7, lr}
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	b1b8      	cbz	r0, 800e1fe <_Odometry__get_serialized_size+0x36>
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	f004 f87a 	bl	80122c8 <get_serialized_size_std_msgs__msg__Header>
 800e1d4:	2104      	movs	r1, #4
 800e1d6:	4607      	mov	r7, r0
 800e1d8:	f7ff feac 	bl	800df34 <ucdr_alignment>
 800e1dc:	69a3      	ldr	r3, [r4, #24]
 800e1de:	1d5a      	adds	r2, r3, #5
 800e1e0:	19d3      	adds	r3, r2, r7
 800e1e2:	4606      	mov	r6, r0
 800e1e4:	441e      	add	r6, r3
 800e1e6:	4631      	mov	r1, r6
 800e1e8:	f104 0020 	add.w	r0, r4, #32
 800e1ec:	f004 fa38 	bl	8012660 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800e1f0:	4406      	add	r6, r0
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800e1f8:	f004 faa2 	bl	8012740 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800e1fc:	4430      	add	r0, r6
 800e1fe:	bdd0      	pop	{r4, r6, r7, pc}

0800e200 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800e200:	4800      	ldr	r0, [pc, #0]	@ (800e204 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800e202:	4770      	bx	lr
 800e204:	200002d0 	.word	0x200002d0

0800e208 <rcl_get_zero_initialized_context>:
 800e208:	4a03      	ldr	r2, [pc, #12]	@ (800e218 <rcl_get_zero_initialized_context+0x10>)
 800e20a:	4603      	mov	r3, r0
 800e20c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e210:	e883 0003 	stmia.w	r3, {r0, r1}
 800e214:	4618      	mov	r0, r3
 800e216:	4770      	bx	lr
 800e218:	0801dda4 	.word	0x0801dda4

0800e21c <rcl_context_is_valid>:
 800e21c:	b118      	cbz	r0, 800e226 <rcl_context_is_valid+0xa>
 800e21e:	6840      	ldr	r0, [r0, #4]
 800e220:	3800      	subs	r0, #0
 800e222:	bf18      	it	ne
 800e224:	2001      	movne	r0, #1
 800e226:	4770      	bx	lr

0800e228 <rcl_context_get_rmw_context>:
 800e228:	b110      	cbz	r0, 800e230 <rcl_context_get_rmw_context+0x8>
 800e22a:	6800      	ldr	r0, [r0, #0]
 800e22c:	b100      	cbz	r0, 800e230 <rcl_context_get_rmw_context+0x8>
 800e22e:	3028      	adds	r0, #40	@ 0x28
 800e230:	4770      	bx	lr
 800e232:	bf00      	nop

0800e234 <__cleanup_context>:
 800e234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e238:	4606      	mov	r6, r0
 800e23a:	6800      	ldr	r0, [r0, #0]
 800e23c:	2300      	movs	r3, #0
 800e23e:	6073      	str	r3, [r6, #4]
 800e240:	2800      	cmp	r0, #0
 800e242:	d049      	beq.n	800e2d8 <__cleanup_context+0xa4>
 800e244:	6947      	ldr	r7, [r0, #20]
 800e246:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e24a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e24e:	b137      	cbz	r7, 800e25e <__cleanup_context+0x2a>
 800e250:	3014      	adds	r0, #20
 800e252:	f000 f8cb 	bl	800e3ec <rcl_init_options_fini>
 800e256:	4607      	mov	r7, r0
 800e258:	2800      	cmp	r0, #0
 800e25a:	d144      	bne.n	800e2e6 <__cleanup_context+0xb2>
 800e25c:	6830      	ldr	r0, [r6, #0]
 800e25e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e260:	b143      	cbz	r3, 800e274 <__cleanup_context+0x40>
 800e262:	3028      	adds	r0, #40	@ 0x28
 800e264:	f002 ff3a 	bl	80110dc <rmw_context_fini>
 800e268:	b118      	cbz	r0, 800e272 <__cleanup_context+0x3e>
 800e26a:	2f00      	cmp	r7, #0
 800e26c:	d03e      	beq.n	800e2ec <__cleanup_context+0xb8>
 800e26e:	f002 f94b 	bl	8010508 <rcutils_reset_error>
 800e272:	6830      	ldr	r0, [r6, #0]
 800e274:	6a03      	ldr	r3, [r0, #32]
 800e276:	b1db      	cbz	r3, 800e2b0 <__cleanup_context+0x7c>
 800e278:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e27c:	2a01      	cmp	r2, #1
 800e27e:	f17c 0100 	sbcs.w	r1, ip, #0
 800e282:	db11      	blt.n	800e2a8 <__cleanup_context+0x74>
 800e284:	2400      	movs	r4, #0
 800e286:	4625      	mov	r5, r4
 800e288:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e28c:	4649      	mov	r1, r9
 800e28e:	b1b8      	cbz	r0, 800e2c0 <__cleanup_context+0x8c>
 800e290:	47c0      	blx	r8
 800e292:	6833      	ldr	r3, [r6, #0]
 800e294:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e298:	3401      	adds	r4, #1
 800e29a:	f145 0500 	adc.w	r5, r5, #0
 800e29e:	4294      	cmp	r4, r2
 800e2a0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	dbef      	blt.n	800e288 <__cleanup_context+0x54>
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	4649      	mov	r1, r9
 800e2ac:	47c0      	blx	r8
 800e2ae:	6830      	ldr	r0, [r6, #0]
 800e2b0:	4649      	mov	r1, r9
 800e2b2:	47c0      	blx	r8
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	e9c6 3300 	strd	r3, r3, [r6]
 800e2ba:	4638      	mov	r0, r7
 800e2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2c0:	3401      	adds	r4, #1
 800e2c2:	f145 0500 	adc.w	r5, r5, #0
 800e2c6:	4294      	cmp	r4, r2
 800e2c8:	eb75 010c 	sbcs.w	r1, r5, ip
 800e2cc:	dbdc      	blt.n	800e288 <__cleanup_context+0x54>
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	4649      	mov	r1, r9
 800e2d2:	47c0      	blx	r8
 800e2d4:	6830      	ldr	r0, [r6, #0]
 800e2d6:	e7eb      	b.n	800e2b0 <__cleanup_context+0x7c>
 800e2d8:	4607      	mov	r7, r0
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e9c6 3300 	strd	r3, r3, [r6]
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2e6:	f002 f90f 	bl	8010508 <rcutils_reset_error>
 800e2ea:	e7b7      	b.n	800e25c <__cleanup_context+0x28>
 800e2ec:	f008 fc0a 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800e2f0:	4607      	mov	r7, r0
 800e2f2:	e7bc      	b.n	800e26e <__cleanup_context+0x3a>

0800e2f4 <rcl_context_fini>:
 800e2f4:	b178      	cbz	r0, 800e316 <rcl_context_fini+0x22>
 800e2f6:	b510      	push	{r4, lr}
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	6800      	ldr	r0, [r0, #0]
 800e2fc:	b150      	cbz	r0, 800e314 <rcl_context_fini+0x20>
 800e2fe:	6863      	ldr	r3, [r4, #4]
 800e300:	b93b      	cbnz	r3, 800e312 <rcl_context_fini+0x1e>
 800e302:	f002 f821 	bl	8010348 <rcutils_allocator_is_valid>
 800e306:	b120      	cbz	r0, 800e312 <rcl_context_fini+0x1e>
 800e308:	4620      	mov	r0, r4
 800e30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e30e:	f7ff bf91 	b.w	800e234 <__cleanup_context>
 800e312:	200b      	movs	r0, #11
 800e314:	bd10      	pop	{r4, pc}
 800e316:	200b      	movs	r0, #11
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop

0800e31c <rcl_get_zero_initialized_init_options>:
 800e31c:	2000      	movs	r0, #0
 800e31e:	4770      	bx	lr

0800e320 <rcl_init_options_init>:
 800e320:	b084      	sub	sp, #16
 800e322:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e324:	b097      	sub	sp, #92	@ 0x5c
 800e326:	ae1d      	add	r6, sp, #116	@ 0x74
 800e328:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e32c:	2800      	cmp	r0, #0
 800e32e:	d058      	beq.n	800e3e2 <rcl_init_options_init+0xc2>
 800e330:	6803      	ldr	r3, [r0, #0]
 800e332:	4605      	mov	r5, r0
 800e334:	b133      	cbz	r3, 800e344 <rcl_init_options_init+0x24>
 800e336:	2464      	movs	r4, #100	@ 0x64
 800e338:	4620      	mov	r0, r4
 800e33a:	b017      	add	sp, #92	@ 0x5c
 800e33c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e340:	b004      	add	sp, #16
 800e342:	4770      	bx	lr
 800e344:	4630      	mov	r0, r6
 800e346:	f001 ffff 	bl	8010348 <rcutils_allocator_is_valid>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d049      	beq.n	800e3e2 <rcl_init_options_init+0xc2>
 800e34e:	46b4      	mov	ip, r6
 800e350:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e354:	ac11      	add	r4, sp, #68	@ 0x44
 800e356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e358:	f8dc 3000 	ldr.w	r3, [ip]
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e360:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e362:	2050      	movs	r0, #80	@ 0x50
 800e364:	4798      	blx	r3
 800e366:	4604      	mov	r4, r0
 800e368:	6028      	str	r0, [r5, #0]
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d03b      	beq.n	800e3e6 <rcl_init_options_init+0xc6>
 800e36e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e372:	4686      	mov	lr, r0
 800e374:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e378:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e37c:	f8dc 3000 	ldr.w	r3, [ip]
 800e380:	f8ce 3000 	str.w	r3, [lr]
 800e384:	a802      	add	r0, sp, #8
 800e386:	f002 fa83 	bl	8010890 <rmw_get_zero_initialized_init_options>
 800e38a:	f10d 0e08 	add.w	lr, sp, #8
 800e38e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e392:	f104 0c18 	add.w	ip, r4, #24
 800e396:	682f      	ldr	r7, [r5, #0]
 800e398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e39c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e3b0:	ac20      	add	r4, sp, #128	@ 0x80
 800e3b2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e3b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e3ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e3be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e3c2:	f107 0018 	add.w	r0, r7, #24
 800e3c6:	f002 fbcd 	bl	8010b64 <rmw_init_options_init>
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	d0b3      	beq.n	800e338 <rcl_init_options_init+0x18>
 800e3d0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e3d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e3d4:	6828      	ldr	r0, [r5, #0]
 800e3d6:	4798      	blx	r3
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f008 fb93 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800e3de:	4604      	mov	r4, r0
 800e3e0:	e7aa      	b.n	800e338 <rcl_init_options_init+0x18>
 800e3e2:	240b      	movs	r4, #11
 800e3e4:	e7a8      	b.n	800e338 <rcl_init_options_init+0x18>
 800e3e6:	240a      	movs	r4, #10
 800e3e8:	e7a6      	b.n	800e338 <rcl_init_options_init+0x18>
 800e3ea:	bf00      	nop

0800e3ec <rcl_init_options_fini>:
 800e3ec:	b530      	push	{r4, r5, lr}
 800e3ee:	b087      	sub	sp, #28
 800e3f0:	b1f0      	cbz	r0, 800e430 <rcl_init_options_fini+0x44>
 800e3f2:	6803      	ldr	r3, [r0, #0]
 800e3f4:	4604      	mov	r4, r0
 800e3f6:	b1db      	cbz	r3, 800e430 <rcl_init_options_fini+0x44>
 800e3f8:	469c      	mov	ip, r3
 800e3fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3fe:	f10d 0e04 	add.w	lr, sp, #4
 800e402:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e406:	f8dc 3000 	ldr.w	r3, [ip]
 800e40a:	f8ce 3000 	str.w	r3, [lr]
 800e40e:	a801      	add	r0, sp, #4
 800e410:	f001 ff9a 	bl	8010348 <rcutils_allocator_is_valid>
 800e414:	b160      	cbz	r0, 800e430 <rcl_init_options_fini+0x44>
 800e416:	6820      	ldr	r0, [r4, #0]
 800e418:	3018      	adds	r0, #24
 800e41a:	f002 fc79 	bl	8010d10 <rmw_init_options_fini>
 800e41e:	4605      	mov	r5, r0
 800e420:	b950      	cbnz	r0, 800e438 <rcl_init_options_fini+0x4c>
 800e422:	6820      	ldr	r0, [r4, #0]
 800e424:	9b02      	ldr	r3, [sp, #8]
 800e426:	9905      	ldr	r1, [sp, #20]
 800e428:	4798      	blx	r3
 800e42a:	4628      	mov	r0, r5
 800e42c:	b007      	add	sp, #28
 800e42e:	bd30      	pop	{r4, r5, pc}
 800e430:	250b      	movs	r5, #11
 800e432:	4628      	mov	r0, r5
 800e434:	b007      	add	sp, #28
 800e436:	bd30      	pop	{r4, r5, pc}
 800e438:	f008 fb64 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800e43c:	4605      	mov	r5, r0
 800e43e:	e7f8      	b.n	800e432 <rcl_init_options_fini+0x46>

0800e440 <rcl_init_options_copy>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	b094      	sub	sp, #80	@ 0x50
 800e446:	2800      	cmp	r0, #0
 800e448:	d058      	beq.n	800e4fc <rcl_init_options_copy+0xbc>
 800e44a:	4604      	mov	r4, r0
 800e44c:	6800      	ldr	r0, [r0, #0]
 800e44e:	2800      	cmp	r0, #0
 800e450:	d054      	beq.n	800e4fc <rcl_init_options_copy+0xbc>
 800e452:	460e      	mov	r6, r1
 800e454:	f001 ff78 	bl	8010348 <rcutils_allocator_is_valid>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d04f      	beq.n	800e4fc <rcl_init_options_copy+0xbc>
 800e45c:	2e00      	cmp	r6, #0
 800e45e:	d04d      	beq.n	800e4fc <rcl_init_options_copy+0xbc>
 800e460:	6833      	ldr	r3, [r6, #0]
 800e462:	b123      	cbz	r3, 800e46e <rcl_init_options_copy+0x2e>
 800e464:	2464      	movs	r4, #100	@ 0x64
 800e466:	4620      	mov	r0, r4
 800e468:	b014      	add	sp, #80	@ 0x50
 800e46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e46e:	6827      	ldr	r7, [r4, #0]
 800e470:	46bc      	mov	ip, r7
 800e472:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e476:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e47a:	f8dc 3000 	ldr.w	r3, [ip]
 800e47e:	f8d7 8000 	ldr.w	r8, [r7]
 800e482:	602b      	str	r3, [r5, #0]
 800e484:	4619      	mov	r1, r3
 800e486:	2050      	movs	r0, #80	@ 0x50
 800e488:	47c0      	blx	r8
 800e48a:	4605      	mov	r5, r0
 800e48c:	6030      	str	r0, [r6, #0]
 800e48e:	b3d0      	cbz	r0, 800e506 <rcl_init_options_copy+0xc6>
 800e490:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e494:	4686      	mov	lr, r0
 800e496:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e49a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e49e:	f8dc 3000 	ldr.w	r3, [ip]
 800e4a2:	f8ce 3000 	str.w	r3, [lr]
 800e4a6:	4668      	mov	r0, sp
 800e4a8:	f002 f9f2 	bl	8010890 <rmw_get_zero_initialized_init_options>
 800e4ac:	46ee      	mov	lr, sp
 800e4ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4b2:	f105 0c18 	add.w	ip, r5, #24
 800e4b6:	6824      	ldr	r4, [r4, #0]
 800e4b8:	6835      	ldr	r5, [r6, #0]
 800e4ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e4ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e4ce:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e4d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e4d6:	f104 0018 	add.w	r0, r4, #24
 800e4da:	f105 0118 	add.w	r1, r5, #24
 800e4de:	f002 fba3 	bl	8010c28 <rmw_init_options_copy>
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d0be      	beq.n	800e466 <rcl_init_options_copy+0x26>
 800e4e8:	f001 fff8 	bl	80104dc <rcutils_get_error_string>
 800e4ec:	f002 f80c 	bl	8010508 <rcutils_reset_error>
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7ff ff7b 	bl	800e3ec <rcl_init_options_fini>
 800e4f6:	b140      	cbz	r0, 800e50a <rcl_init_options_copy+0xca>
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	e7b4      	b.n	800e466 <rcl_init_options_copy+0x26>
 800e4fc:	240b      	movs	r4, #11
 800e4fe:	4620      	mov	r0, r4
 800e500:	b014      	add	sp, #80	@ 0x50
 800e502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e506:	240a      	movs	r4, #10
 800e508:	e7ad      	b.n	800e466 <rcl_init_options_copy+0x26>
 800e50a:	4620      	mov	r0, r4
 800e50c:	b014      	add	sp, #80	@ 0x50
 800e50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e512:	f008 baf7 	b.w	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800e516:	bf00      	nop

0800e518 <rcl_init_options_set_domain_id>:
 800e518:	b120      	cbz	r0, 800e524 <rcl_init_options_set_domain_id+0xc>
 800e51a:	6803      	ldr	r3, [r0, #0]
 800e51c:	b113      	cbz	r3, 800e524 <rcl_init_options_set_domain_id+0xc>
 800e51e:	6259      	str	r1, [r3, #36]	@ 0x24
 800e520:	2000      	movs	r0, #0
 800e522:	4770      	bx	lr
 800e524:	200b      	movs	r0, #11
 800e526:	4770      	bx	lr

0800e528 <rcl_get_zero_initialized_node>:
 800e528:	4a03      	ldr	r2, [pc, #12]	@ (800e538 <rcl_get_zero_initialized_node+0x10>)
 800e52a:	4603      	mov	r3, r0
 800e52c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e530:	e883 0003 	stmia.w	r3, {r0, r1}
 800e534:	4618      	mov	r0, r3
 800e536:	4770      	bx	lr
 800e538:	0801ddac 	.word	0x0801ddac

0800e53c <rcl_node_init>:
 800e53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e540:	b0a9      	sub	sp, #164	@ 0xa4
 800e542:	4604      	mov	r4, r0
 800e544:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800e548:	a823      	add	r0, sp, #140	@ 0x8c
 800e54a:	460e      	mov	r6, r1
 800e54c:	4615      	mov	r5, r2
 800e54e:	461f      	mov	r7, r3
 800e550:	f008 fbc8 	bl	8016ce4 <rcl_guard_condition_get_default_options>
 800e554:	f1b8 0f00 	cmp.w	r8, #0
 800e558:	f000 80e6 	beq.w	800e728 <rcl_node_init+0x1ec>
 800e55c:	4640      	mov	r0, r8
 800e55e:	f001 fef3 	bl	8010348 <rcutils_allocator_is_valid>
 800e562:	2800      	cmp	r0, #0
 800e564:	f000 80e0 	beq.w	800e728 <rcl_node_init+0x1ec>
 800e568:	2e00      	cmp	r6, #0
 800e56a:	f000 80dd 	beq.w	800e728 <rcl_node_init+0x1ec>
 800e56e:	2d00      	cmp	r5, #0
 800e570:	f000 80da 	beq.w	800e728 <rcl_node_init+0x1ec>
 800e574:	2c00      	cmp	r4, #0
 800e576:	f000 80d7 	beq.w	800e728 <rcl_node_init+0x1ec>
 800e57a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e57e:	f1b9 0f00 	cmp.w	r9, #0
 800e582:	f040 80fd 	bne.w	800e780 <rcl_node_init+0x244>
 800e586:	2f00      	cmp	r7, #0
 800e588:	f000 80ce 	beq.w	800e728 <rcl_node_init+0x1ec>
 800e58c:	4638      	mov	r0, r7
 800e58e:	f7ff fe45 	bl	800e21c <rcl_context_is_valid>
 800e592:	4682      	mov	sl, r0
 800e594:	2800      	cmp	r0, #0
 800e596:	f000 80cd 	beq.w	800e734 <rcl_node_init+0x1f8>
 800e59a:	464a      	mov	r2, r9
 800e59c:	a922      	add	r1, sp, #136	@ 0x88
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800e5a4:	f002 fa20 	bl	80109e8 <rmw_validate_node_name>
 800e5a8:	4681      	mov	r9, r0
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	f040 80be 	bne.w	800e72c <rcl_node_init+0x1f0>
 800e5b0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	f040 80f0 	bne.w	800e798 <rcl_node_init+0x25c>
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	f7f1 fe33 	bl	8000224 <strlen>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	f040 80bb 	bne.w	800e73a <rcl_node_init+0x1fe>
 800e5c4:	4d7c      	ldr	r5, [pc, #496]	@ (800e7b8 <rcl_node_init+0x27c>)
 800e5c6:	a922      	add	r1, sp, #136	@ 0x88
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	f002 f9ee 	bl	80109ac <rmw_validate_namespace>
 800e5d0:	4681      	mov	r9, r0
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f040 80aa 	bne.w	800e72c <rcl_node_init+0x1f0>
 800e5d8:	4682      	mov	sl, r0
 800e5da:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	f040 80e0 	bne.w	800e7a2 <rcl_node_init+0x266>
 800e5e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e5e6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e5ea:	2078      	movs	r0, #120	@ 0x78
 800e5ec:	4798      	blx	r3
 800e5ee:	4681      	mov	r9, r0
 800e5f0:	6060      	str	r0, [r4, #4]
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f000 80ca 	beq.w	800e78c <rcl_node_init+0x250>
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800e600:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800e604:	a808      	add	r0, sp, #32
 800e606:	f000 f939 	bl	800e87c <rcl_node_get_default_options>
 800e60a:	a908      	add	r1, sp, #32
 800e60c:	4648      	mov	r0, r9
 800e60e:	2268      	movs	r2, #104	@ 0x68
 800e610:	f00e f835 	bl	801c67e <memcpy>
 800e614:	6861      	ldr	r1, [r4, #4]
 800e616:	6027      	str	r7, [r4, #0]
 800e618:	4640      	mov	r0, r8
 800e61a:	f000 f93d 	bl	800e898 <rcl_node_options_copy>
 800e61e:	2800      	cmp	r0, #0
 800e620:	d158      	bne.n	800e6d4 <rcl_node_init+0x198>
 800e622:	4628      	mov	r0, r5
 800e624:	f7f1 fdfe 	bl	8000224 <strlen>
 800e628:	4428      	add	r0, r5
 800e62a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e62e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e632:	2b2f      	cmp	r3, #47	@ 0x2f
 800e634:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	bf0c      	ite	eq
 800e63c:	4b5f      	ldreq	r3, [pc, #380]	@ (800e7bc <rcl_node_init+0x280>)
 800e63e:	4b60      	ldrne	r3, [pc, #384]	@ (800e7c0 <rcl_node_init+0x284>)
 800e640:	9302      	str	r3, [sp, #8]
 800e642:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e64c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e650:	f001 ff76 	bl	8010540 <rcutils_format_string_limit>
 800e654:	6823      	ldr	r3, [r4, #0]
 800e656:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800e65a:	6818      	ldr	r0, [r3, #0]
 800e65c:	4631      	mov	r1, r6
 800e65e:	3028      	adds	r0, #40	@ 0x28
 800e660:	462a      	mov	r2, r5
 800e662:	6866      	ldr	r6, [r4, #4]
 800e664:	f002 fde6 	bl	8011234 <rmw_create_node>
 800e668:	6863      	ldr	r3, [r4, #4]
 800e66a:	66b0      	str	r0, [r6, #104]	@ 0x68
 800e66c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e66e:	2800      	cmp	r0, #0
 800e670:	d032      	beq.n	800e6d8 <rcl_node_init+0x19c>
 800e672:	f002 fe73 	bl	801135c <rmw_node_get_graph_guard_condition>
 800e676:	4681      	mov	r9, r0
 800e678:	b360      	cbz	r0, 800e6d4 <rcl_node_init+0x198>
 800e67a:	f8d8 3000 	ldr.w	r3, [r8]
 800e67e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e682:	6866      	ldr	r6, [r4, #4]
 800e684:	2008      	movs	r0, #8
 800e686:	4798      	blx	r3
 800e688:	6863      	ldr	r3, [r4, #4]
 800e68a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800e68c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800e690:	f1bb 0f00 	cmp.w	fp, #0
 800e694:	d020      	beq.n	800e6d8 <rcl_node_init+0x19c>
 800e696:	a806      	add	r0, sp, #24
 800e698:	f008 fa48 	bl	8016b2c <rcl_get_zero_initialized_guard_condition>
 800e69c:	a806      	add	r0, sp, #24
 800e69e:	c803      	ldmia	r0, {r0, r1}
 800e6a0:	6863      	ldr	r3, [r4, #4]
 800e6a2:	46c4      	mov	ip, r8
 800e6a4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800e6a8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e6ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6b0:	ae23      	add	r6, sp, #140	@ 0x8c
 800e6b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e6b4:	f8dc 3000 	ldr.w	r3, [ip]
 800e6b8:	6033      	str	r3, [r6, #0]
 800e6ba:	ab28      	add	r3, sp, #160	@ 0xa0
 800e6bc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e6c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e6c4:	4649      	mov	r1, r9
 800e6c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6c8:	463a      	mov	r2, r7
 800e6ca:	4670      	mov	r0, lr
 800e6cc:	f008 fa84 	bl	8016bd8 <rcl_guard_condition_init_from_rmw>
 800e6d0:	4681      	mov	r9, r0
 800e6d2:	b328      	cbz	r0, 800e720 <rcl_node_init+0x1e4>
 800e6d4:	6863      	ldr	r3, [r4, #4]
 800e6d6:	b1f3      	cbz	r3, 800e716 <rcl_node_init+0x1da>
 800e6d8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e6da:	b128      	cbz	r0, 800e6e8 <rcl_node_init+0x1ac>
 800e6dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e6e0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e6e4:	4798      	blx	r3
 800e6e6:	6863      	ldr	r3, [r4, #4]
 800e6e8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800e6ea:	b110      	cbz	r0, 800e6f2 <rcl_node_init+0x1b6>
 800e6ec:	f002 fdba 	bl	8011264 <rmw_destroy_node>
 800e6f0:	6863      	ldr	r3, [r4, #4]
 800e6f2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e6f4:	b148      	cbz	r0, 800e70a <rcl_node_init+0x1ce>
 800e6f6:	f008 facf 	bl	8016c98 <rcl_guard_condition_fini>
 800e6fa:	6863      	ldr	r3, [r4, #4]
 800e6fc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e700:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e702:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e706:	4798      	blx	r3
 800e708:	6863      	ldr	r3, [r4, #4]
 800e70a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e70e:	4618      	mov	r0, r3
 800e710:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e714:	4798      	blx	r3
 800e716:	2300      	movs	r3, #0
 800e718:	e9c4 3300 	strd	r3, r3, [r4]
 800e71c:	f04f 0901 	mov.w	r9, #1
 800e720:	f1ba 0f00 	cmp.w	sl, #0
 800e724:	d125      	bne.n	800e772 <rcl_node_init+0x236>
 800e726:	e001      	b.n	800e72c <rcl_node_init+0x1f0>
 800e728:	f04f 090b 	mov.w	r9, #11
 800e72c:	4648      	mov	r0, r9
 800e72e:	b029      	add	sp, #164	@ 0xa4
 800e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e734:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800e738:	e7f8      	b.n	800e72c <rcl_node_init+0x1f0>
 800e73a:	782b      	ldrb	r3, [r5, #0]
 800e73c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e73e:	f43f af42 	beq.w	800e5c6 <rcl_node_init+0x8a>
 800e742:	9503      	str	r5, [sp, #12]
 800e744:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e748:	9300      	str	r3, [sp, #0]
 800e74a:	4b1e      	ldr	r3, [pc, #120]	@ (800e7c4 <rcl_node_init+0x288>)
 800e74c:	9302      	str	r3, [sp, #8]
 800e74e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e758:	f001 fef2 	bl	8010540 <rcutils_format_string_limit>
 800e75c:	4605      	mov	r5, r0
 800e75e:	b340      	cbz	r0, 800e7b2 <rcl_node_init+0x276>
 800e760:	2200      	movs	r2, #0
 800e762:	a922      	add	r1, sp, #136	@ 0x88
 800e764:	9222      	str	r2, [sp, #136]	@ 0x88
 800e766:	f002 f921 	bl	80109ac <rmw_validate_namespace>
 800e76a:	4681      	mov	r9, r0
 800e76c:	2800      	cmp	r0, #0
 800e76e:	f43f af34 	beq.w	800e5da <rcl_node_init+0x9e>
 800e772:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e776:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e77a:	4628      	mov	r0, r5
 800e77c:	4798      	blx	r3
 800e77e:	e7d5      	b.n	800e72c <rcl_node_init+0x1f0>
 800e780:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800e784:	4648      	mov	r0, r9
 800e786:	b029      	add	sp, #164	@ 0xa4
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78c:	f04f 090a 	mov.w	r9, #10
 800e790:	f1ba 0f00 	cmp.w	sl, #0
 800e794:	d1ed      	bne.n	800e772 <rcl_node_init+0x236>
 800e796:	e7c9      	b.n	800e72c <rcl_node_init+0x1f0>
 800e798:	f002 f978 	bl	8010a8c <rmw_node_name_validation_result_string>
 800e79c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800e7a0:	e7c4      	b.n	800e72c <rcl_node_init+0x1f0>
 800e7a2:	f002 f915 	bl	80109d0 <rmw_namespace_validation_result_string>
 800e7a6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800e7aa:	f1ba 0f00 	cmp.w	sl, #0
 800e7ae:	d1e0      	bne.n	800e772 <rcl_node_init+0x236>
 800e7b0:	e7bc      	b.n	800e72c <rcl_node_init+0x1f0>
 800e7b2:	f04f 090a 	mov.w	r9, #10
 800e7b6:	e7b9      	b.n	800e72c <rcl_node_init+0x1f0>
 800e7b8:	0801d694 	.word	0x0801d694
 800e7bc:	0801d69c 	.word	0x0801d69c
 800e7c0:	0801d6a4 	.word	0x0801d6a4
 800e7c4:	0801d698 	.word	0x0801d698

0800e7c8 <rcl_node_fini>:
 800e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ca:	b320      	cbz	r0, 800e816 <rcl_node_fini+0x4e>
 800e7cc:	6845      	ldr	r5, [r0, #4]
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	b1fd      	cbz	r5, 800e812 <rcl_node_fini+0x4a>
 800e7d2:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800e7d4:	686f      	ldr	r7, [r5, #4]
 800e7d6:	692e      	ldr	r6, [r5, #16]
 800e7d8:	f002 fd44 	bl	8011264 <rmw_destroy_node>
 800e7dc:	6863      	ldr	r3, [r4, #4]
 800e7de:	4605      	mov	r5, r0
 800e7e0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e7e2:	f008 fa59 	bl	8016c98 <rcl_guard_condition_fini>
 800e7e6:	ea55 0300 	orrs.w	r3, r5, r0
 800e7ea:	6863      	ldr	r3, [r4, #4]
 800e7ec:	4631      	mov	r1, r6
 800e7ee:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800e7f0:	bf14      	ite	ne
 800e7f2:	2501      	movne	r5, #1
 800e7f4:	2500      	moveq	r5, #0
 800e7f6:	47b8      	blx	r7
 800e7f8:	6863      	ldr	r3, [r4, #4]
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800e7fe:	47b8      	blx	r7
 800e800:	6863      	ldr	r3, [r4, #4]
 800e802:	4631      	mov	r1, r6
 800e804:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e806:	47b8      	blx	r7
 800e808:	6860      	ldr	r0, [r4, #4]
 800e80a:	4631      	mov	r1, r6
 800e80c:	47b8      	blx	r7
 800e80e:	2300      	movs	r3, #0
 800e810:	6063      	str	r3, [r4, #4]
 800e812:	4628      	mov	r0, r5
 800e814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e816:	25c8      	movs	r5, #200	@ 0xc8
 800e818:	4628      	mov	r0, r5
 800e81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e81c <rcl_node_is_valid_except_context>:
 800e81c:	b128      	cbz	r0, 800e82a <rcl_node_is_valid_except_context+0xe>
 800e81e:	6840      	ldr	r0, [r0, #4]
 800e820:	b118      	cbz	r0, 800e82a <rcl_node_is_valid_except_context+0xe>
 800e822:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e824:	3800      	subs	r0, #0
 800e826:	bf18      	it	ne
 800e828:	2001      	movne	r0, #1
 800e82a:	4770      	bx	lr

0800e82c <rcl_node_is_valid>:
 800e82c:	b130      	cbz	r0, 800e83c <rcl_node_is_valid+0x10>
 800e82e:	6843      	ldr	r3, [r0, #4]
 800e830:	b123      	cbz	r3, 800e83c <rcl_node_is_valid+0x10>
 800e832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e834:	b113      	cbz	r3, 800e83c <rcl_node_is_valid+0x10>
 800e836:	6800      	ldr	r0, [r0, #0]
 800e838:	f7ff bcf0 	b.w	800e21c <rcl_context_is_valid>
 800e83c:	2000      	movs	r0, #0
 800e83e:	4770      	bx	lr

0800e840 <rcl_node_get_name>:
 800e840:	b120      	cbz	r0, 800e84c <rcl_node_get_name+0xc>
 800e842:	6840      	ldr	r0, [r0, #4]
 800e844:	b110      	cbz	r0, 800e84c <rcl_node_get_name+0xc>
 800e846:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e848:	b100      	cbz	r0, 800e84c <rcl_node_get_name+0xc>
 800e84a:	6880      	ldr	r0, [r0, #8]
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop

0800e850 <rcl_node_get_namespace>:
 800e850:	b120      	cbz	r0, 800e85c <rcl_node_get_namespace+0xc>
 800e852:	6840      	ldr	r0, [r0, #4]
 800e854:	b110      	cbz	r0, 800e85c <rcl_node_get_namespace+0xc>
 800e856:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e858:	b100      	cbz	r0, 800e85c <rcl_node_get_namespace+0xc>
 800e85a:	68c0      	ldr	r0, [r0, #12]
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop

0800e860 <rcl_node_get_options>:
 800e860:	b128      	cbz	r0, 800e86e <rcl_node_get_options+0xe>
 800e862:	6840      	ldr	r0, [r0, #4]
 800e864:	b118      	cbz	r0, 800e86e <rcl_node_get_options+0xe>
 800e866:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800e868:	2b00      	cmp	r3, #0
 800e86a:	bf08      	it	eq
 800e86c:	2000      	moveq	r0, #0
 800e86e:	4770      	bx	lr

0800e870 <rcl_node_get_rmw_handle>:
 800e870:	b110      	cbz	r0, 800e878 <rcl_node_get_rmw_handle+0x8>
 800e872:	6840      	ldr	r0, [r0, #4]
 800e874:	b100      	cbz	r0, 800e878 <rcl_node_get_rmw_handle+0x8>
 800e876:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop

0800e87c <rcl_node_get_default_options>:
 800e87c:	b510      	push	{r4, lr}
 800e87e:	2268      	movs	r2, #104	@ 0x68
 800e880:	4604      	mov	r4, r0
 800e882:	2100      	movs	r1, #0
 800e884:	f00d fe32 	bl	801c4ec <memset>
 800e888:	4620      	mov	r0, r4
 800e88a:	f001 fd4f 	bl	801032c <rcutils_get_default_allocator>
 800e88e:	2301      	movs	r3, #1
 800e890:	7523      	strb	r3, [r4, #20]
 800e892:	4620      	mov	r0, r4
 800e894:	bd10      	pop	{r4, pc}
 800e896:	bf00      	nop

0800e898 <rcl_node_options_copy>:
 800e898:	b1d0      	cbz	r0, 800e8d0 <rcl_node_options_copy+0x38>
 800e89a:	b570      	push	{r4, r5, r6, lr}
 800e89c:	460c      	mov	r4, r1
 800e89e:	b1a9      	cbz	r1, 800e8cc <rcl_node_options_copy+0x34>
 800e8a0:	4288      	cmp	r0, r1
 800e8a2:	4684      	mov	ip, r0
 800e8a4:	d012      	beq.n	800e8cc <rcl_node_options_copy+0x34>
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	8a86      	ldrh	r6, [r0, #20]
 800e8aa:	468e      	mov	lr, r1
 800e8ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e8b2:	682b      	ldr	r3, [r5, #0]
 800e8b4:	f8ce 3000 	str.w	r3, [lr]
 800e8b8:	f10c 0118 	add.w	r1, ip, #24
 800e8bc:	2250      	movs	r2, #80	@ 0x50
 800e8be:	82a6      	strh	r6, [r4, #20]
 800e8c0:	f104 0018 	add.w	r0, r4, #24
 800e8c4:	f00d fedb 	bl	801c67e <memcpy>
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	bd70      	pop	{r4, r5, r6, pc}
 800e8cc:	200b      	movs	r0, #11
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	200b      	movs	r0, #11
 800e8d2:	4770      	bx	lr

0800e8d4 <rcl_get_zero_initialized_publisher>:
 800e8d4:	4b01      	ldr	r3, [pc, #4]	@ (800e8dc <rcl_get_zero_initialized_publisher+0x8>)
 800e8d6:	6818      	ldr	r0, [r3, #0]
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	0801ddb4 	.word	0x0801ddb4

0800e8e0 <rcl_publisher_init>:
 800e8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e4:	b088      	sub	sp, #32
 800e8e6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800e8e8:	2d00      	cmp	r5, #0
 800e8ea:	d069      	beq.n	800e9c0 <rcl_publisher_init+0xe0>
 800e8ec:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	4648      	mov	r0, r9
 800e8f4:	460e      	mov	r6, r1
 800e8f6:	4690      	mov	r8, r2
 800e8f8:	461f      	mov	r7, r3
 800e8fa:	f001 fd25 	bl	8010348 <rcutils_allocator_is_valid>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	d05e      	beq.n	800e9c0 <rcl_publisher_init+0xe0>
 800e902:	2c00      	cmp	r4, #0
 800e904:	d05c      	beq.n	800e9c0 <rcl_publisher_init+0xe0>
 800e906:	f8d4 a000 	ldr.w	sl, [r4]
 800e90a:	f1ba 0f00 	cmp.w	sl, #0
 800e90e:	d004      	beq.n	800e91a <rcl_publisher_init+0x3a>
 800e910:	2764      	movs	r7, #100	@ 0x64
 800e912:	4638      	mov	r0, r7
 800e914:	b008      	add	sp, #32
 800e916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7ff ff86 	bl	800e82c <rcl_node_is_valid>
 800e920:	2800      	cmp	r0, #0
 800e922:	d052      	beq.n	800e9ca <rcl_publisher_init+0xea>
 800e924:	f1b8 0f00 	cmp.w	r8, #0
 800e928:	d04a      	beq.n	800e9c0 <rcl_publisher_init+0xe0>
 800e92a:	2f00      	cmp	r7, #0
 800e92c:	d048      	beq.n	800e9c0 <rcl_publisher_init+0xe0>
 800e92e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800e932:	aa07      	add	r2, sp, #28
 800e934:	9205      	str	r2, [sp, #20]
 800e936:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800e93a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e93e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e942:	f8cd a01c 	str.w	sl, [sp, #28]
 800e946:	4639      	mov	r1, r7
 800e948:	e899 000c 	ldmia.w	r9, {r2, r3}
 800e94c:	4630      	mov	r0, r6
 800e94e:	f008 fb29 	bl	8016fa4 <rcl_node_resolve_name>
 800e952:	4607      	mov	r7, r0
 800e954:	2800      	cmp	r0, #0
 800e956:	d14f      	bne.n	800e9f8 <rcl_publisher_init+0x118>
 800e958:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800e95a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e95c:	20c8      	movs	r0, #200	@ 0xc8
 800e95e:	4798      	blx	r3
 800e960:	6020      	str	r0, [r4, #0]
 800e962:	2800      	cmp	r0, #0
 800e964:	d04e      	beq.n	800ea04 <rcl_publisher_init+0x124>
 800e966:	4630      	mov	r0, r6
 800e968:	f7ff ff82 	bl	800e870 <rcl_node_get_rmw_handle>
 800e96c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e970:	9300      	str	r3, [sp, #0]
 800e972:	9a07      	ldr	r2, [sp, #28]
 800e974:	6827      	ldr	r7, [r4, #0]
 800e976:	462b      	mov	r3, r5
 800e978:	4641      	mov	r1, r8
 800e97a:	f002 fd59 	bl	8011430 <rmw_create_publisher>
 800e97e:	6823      	ldr	r3, [r4, #0]
 800e980:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800e984:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e988:	b370      	cbz	r0, 800e9e8 <rcl_publisher_init+0x108>
 800e98a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e98e:	f002 fe2d 	bl	80115ec <rmw_publisher_get_actual_qos>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	4607      	mov	r7, r0
 800e996:	b9d0      	cbnz	r0, 800e9ce <rcl_publisher_init+0xee>
 800e998:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800e99c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	2270      	movs	r2, #112	@ 0x70
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f00d fe6a 	bl	801c67e <memcpy>
 800e9aa:	6832      	ldr	r2, [r6, #0]
 800e9ac:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e9b0:	9807      	ldr	r0, [sp, #28]
 800e9b2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800e9b4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e9b6:	4798      	blx	r3
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	b008      	add	sp, #32
 800e9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c0:	270b      	movs	r7, #11
 800e9c2:	4638      	mov	r0, r7
 800e9c4:	b008      	add	sp, #32
 800e9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ca:	27c8      	movs	r7, #200	@ 0xc8
 800e9cc:	e7a1      	b.n	800e912 <rcl_publisher_init+0x32>
 800e9ce:	b18b      	cbz	r3, 800e9f4 <rcl_publisher_init+0x114>
 800e9d0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e9d4:	b142      	cbz	r2, 800e9e8 <rcl_publisher_init+0x108>
 800e9d6:	4630      	mov	r0, r6
 800e9d8:	f7ff ff4a 	bl	800e870 <rcl_node_get_rmw_handle>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e9e2:	f002 fe13 	bl	801160c <rmw_destroy_publisher>
 800e9e6:	6823      	ldr	r3, [r4, #0]
 800e9e8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800e9ea:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	4790      	blx	r2
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	6023      	str	r3, [r4, #0]
 800e9f4:	2701      	movs	r7, #1
 800e9f6:	e7db      	b.n	800e9b0 <rcl_publisher_init+0xd0>
 800e9f8:	2867      	cmp	r0, #103	@ 0x67
 800e9fa:	d0d9      	beq.n	800e9b0 <rcl_publisher_init+0xd0>
 800e9fc:	2869      	cmp	r0, #105	@ 0x69
 800e9fe:	d003      	beq.n	800ea08 <rcl_publisher_init+0x128>
 800ea00:	280a      	cmp	r0, #10
 800ea02:	d1f7      	bne.n	800e9f4 <rcl_publisher_init+0x114>
 800ea04:	270a      	movs	r7, #10
 800ea06:	e7d3      	b.n	800e9b0 <rcl_publisher_init+0xd0>
 800ea08:	2767      	movs	r7, #103	@ 0x67
 800ea0a:	e7d1      	b.n	800e9b0 <rcl_publisher_init+0xd0>

0800ea0c <rcl_publisher_fini>:
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	b300      	cbz	r0, 800ea52 <rcl_publisher_fini+0x46>
 800ea10:	4604      	mov	r4, r0
 800ea12:	4608      	mov	r0, r1
 800ea14:	460d      	mov	r5, r1
 800ea16:	f7ff ff01 	bl	800e81c <rcl_node_is_valid_except_context>
 800ea1a:	b1f0      	cbz	r0, 800ea5a <rcl_publisher_fini+0x4e>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	b1ab      	cbz	r3, 800ea4c <rcl_publisher_fini+0x40>
 800ea20:	4628      	mov	r0, r5
 800ea22:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
 800ea24:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800ea26:	f7ff ff23 	bl	800e870 <rcl_node_get_rmw_handle>
 800ea2a:	b1c8      	cbz	r0, 800ea60 <rcl_publisher_fini+0x54>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ea32:	f002 fdeb 	bl	801160c <rmw_destroy_publisher>
 800ea36:	4603      	mov	r3, r0
 800ea38:	4629      	mov	r1, r5
 800ea3a:	6820      	ldr	r0, [r4, #0]
 800ea3c:	1e1d      	subs	r5, r3, #0
 800ea3e:	bf18      	it	ne
 800ea40:	2501      	movne	r5, #1
 800ea42:	47b0      	blx	r6
 800ea44:	2300      	movs	r3, #0
 800ea46:	6023      	str	r3, [r4, #0]
 800ea48:	4628      	mov	r0, r5
 800ea4a:	bd70      	pop	{r4, r5, r6, pc}
 800ea4c:	461d      	mov	r5, r3
 800ea4e:	4628      	mov	r0, r5
 800ea50:	bd70      	pop	{r4, r5, r6, pc}
 800ea52:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800ea56:	4628      	mov	r0, r5
 800ea58:	bd70      	pop	{r4, r5, r6, pc}
 800ea5a:	25c8      	movs	r5, #200	@ 0xc8
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	bd70      	pop	{r4, r5, r6, pc}
 800ea60:	250b      	movs	r5, #11
 800ea62:	e7f1      	b.n	800ea48 <rcl_publisher_fini+0x3c>

0800ea64 <rcl_publisher_get_default_options>:
 800ea64:	b570      	push	{r4, r5, r6, lr}
 800ea66:	4d14      	ldr	r5, [pc, #80]	@ (800eab8 <rcl_publisher_get_default_options+0x54>)
 800ea68:	4914      	ldr	r1, [pc, #80]	@ (800eabc <rcl_publisher_get_default_options+0x58>)
 800ea6a:	b088      	sub	sp, #32
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	2250      	movs	r2, #80	@ 0x50
 800ea70:	4628      	mov	r0, r5
 800ea72:	f00d fe04 	bl	801c67e <memcpy>
 800ea76:	a802      	add	r0, sp, #8
 800ea78:	f001 fc58 	bl	801032c <rcutils_get_default_allocator>
 800ea7c:	f10d 0c08 	add.w	ip, sp, #8
 800ea80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ea84:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ea88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea8c:	466e      	mov	r6, sp
 800ea8e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea92:	f8ce 3000 	str.w	r3, [lr]
 800ea96:	4630      	mov	r0, r6
 800ea98:	f001 ff0a 	bl	80108b0 <rmw_get_default_publisher_options>
 800ea9c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800eaa0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800eaa4:	e883 0003 	stmia.w	r3, {r0, r1}
 800eaa8:	2270      	movs	r2, #112	@ 0x70
 800eaaa:	4629      	mov	r1, r5
 800eaac:	4620      	mov	r0, r4
 800eaae:	f00d fde6 	bl	801c67e <memcpy>
 800eab2:	4620      	mov	r0, r4
 800eab4:	b008      	add	sp, #32
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	2000cff8 	.word	0x2000cff8
 800eabc:	0801ddb8 	.word	0x0801ddb8

0800eac0 <rcl_publish>:
 800eac0:	b1f8      	cbz	r0, 800eb02 <rcl_publish+0x42>
 800eac2:	6803      	ldr	r3, [r0, #0]
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	4604      	mov	r4, r0
 800eac8:	b1b3      	cbz	r3, 800eaf8 <rcl_publish+0x38>
 800eaca:	4616      	mov	r6, r2
 800eacc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ead0:	b192      	cbz	r2, 800eaf8 <rcl_publish+0x38>
 800ead2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ead6:	460d      	mov	r5, r1
 800ead8:	f7ff fba0 	bl	800e21c <rcl_context_is_valid>
 800eadc:	b160      	cbz	r0, 800eaf8 <rcl_publish+0x38>
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eae4:	b140      	cbz	r0, 800eaf8 <rcl_publish+0x38>
 800eae6:	b155      	cbz	r5, 800eafe <rcl_publish+0x3e>
 800eae8:	4632      	mov	r2, r6
 800eaea:	4629      	mov	r1, r5
 800eaec:	f002 fc40 	bl	8011370 <rmw_publish>
 800eaf0:	3800      	subs	r0, #0
 800eaf2:	bf18      	it	ne
 800eaf4:	2001      	movne	r0, #1
 800eaf6:	bd70      	pop	{r4, r5, r6, pc}
 800eaf8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	200b      	movs	r0, #11
 800eb00:	bd70      	pop	{r4, r5, r6, pc}
 800eb02:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800eb06:	4770      	bx	lr

0800eb08 <rcl_publisher_get_rmw_handle>:
 800eb08:	b118      	cbz	r0, 800eb12 <rcl_publisher_get_rmw_handle+0xa>
 800eb0a:	6800      	ldr	r0, [r0, #0]
 800eb0c:	b108      	cbz	r0, 800eb12 <rcl_publisher_get_rmw_handle+0xa>
 800eb0e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800eb12:	4770      	bx	lr

0800eb14 <rcl_publisher_is_valid>:
 800eb14:	b1a0      	cbz	r0, 800eb40 <rcl_publisher_is_valid+0x2c>
 800eb16:	6803      	ldr	r3, [r0, #0]
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	b173      	cbz	r3, 800eb3c <rcl_publisher_is_valid+0x28>
 800eb1e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800eb22:	b15a      	cbz	r2, 800eb3c <rcl_publisher_is_valid+0x28>
 800eb24:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800eb28:	f7ff fb78 	bl	800e21c <rcl_context_is_valid>
 800eb2c:	b130      	cbz	r0, 800eb3c <rcl_publisher_is_valid+0x28>
 800eb2e:	6823      	ldr	r3, [r4, #0]
 800eb30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800eb34:	3800      	subs	r0, #0
 800eb36:	bf18      	it	ne
 800eb38:	2001      	movne	r0, #1
 800eb3a:	bd10      	pop	{r4, pc}
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	bd10      	pop	{r4, pc}
 800eb40:	2000      	movs	r0, #0
 800eb42:	4770      	bx	lr

0800eb44 <rcl_publisher_is_valid_except_context>:
 800eb44:	b130      	cbz	r0, 800eb54 <rcl_publisher_is_valid_except_context+0x10>
 800eb46:	6800      	ldr	r0, [r0, #0]
 800eb48:	b120      	cbz	r0, 800eb54 <rcl_publisher_is_valid_except_context+0x10>
 800eb4a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800eb4e:	3800      	subs	r0, #0
 800eb50:	bf18      	it	ne
 800eb52:	2001      	movne	r0, #1
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop

0800eb58 <rcl_get_zero_initialized_subscription>:
 800eb58:	4b01      	ldr	r3, [pc, #4]	@ (800eb60 <rcl_get_zero_initialized_subscription+0x8>)
 800eb5a:	6818      	ldr	r0, [r3, #0]
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	0801de08 	.word	0x0801de08

0800eb64 <rcl_subscription_init>:
 800eb64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb68:	b089      	sub	sp, #36	@ 0x24
 800eb6a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800eb6c:	b1d6      	cbz	r6, 800eba4 <rcl_subscription_init+0x40>
 800eb6e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800eb72:	4604      	mov	r4, r0
 800eb74:	4648      	mov	r0, r9
 800eb76:	460d      	mov	r5, r1
 800eb78:	4690      	mov	r8, r2
 800eb7a:	461f      	mov	r7, r3
 800eb7c:	f001 fbe4 	bl	8010348 <rcutils_allocator_is_valid>
 800eb80:	b180      	cbz	r0, 800eba4 <rcl_subscription_init+0x40>
 800eb82:	b17c      	cbz	r4, 800eba4 <rcl_subscription_init+0x40>
 800eb84:	4628      	mov	r0, r5
 800eb86:	f7ff fe51 	bl	800e82c <rcl_node_is_valid>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d054      	beq.n	800ec38 <rcl_subscription_init+0xd4>
 800eb8e:	f1b8 0f00 	cmp.w	r8, #0
 800eb92:	d007      	beq.n	800eba4 <rcl_subscription_init+0x40>
 800eb94:	b137      	cbz	r7, 800eba4 <rcl_subscription_init+0x40>
 800eb96:	6823      	ldr	r3, [r4, #0]
 800eb98:	b14b      	cbz	r3, 800ebae <rcl_subscription_init+0x4a>
 800eb9a:	2764      	movs	r7, #100	@ 0x64
 800eb9c:	4638      	mov	r0, r7
 800eb9e:	b009      	add	sp, #36	@ 0x24
 800eba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eba4:	270b      	movs	r7, #11
 800eba6:	4638      	mov	r0, r7
 800eba8:	b009      	add	sp, #36	@ 0x24
 800ebaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ebb2:	aa07      	add	r2, sp, #28
 800ebb4:	9205      	str	r2, [sp, #20]
 800ebb6:	9307      	str	r3, [sp, #28]
 800ebb8:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800ebbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ebc0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f008 f9ea 	bl	8016fa4 <rcl_node_resolve_name>
 800ebd0:	4607      	mov	r7, r0
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	d15f      	bne.n	800ec96 <rcl_subscription_init+0x132>
 800ebd6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 800ebda:	21c8      	movs	r1, #200	@ 0xc8
 800ebdc:	2001      	movs	r0, #1
 800ebde:	4798      	blx	r3
 800ebe0:	6020      	str	r0, [r4, #0]
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	d05d      	beq.n	800eca2 <rcl_subscription_init+0x13e>
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f7ff fe42 	bl	800e870 <rcl_node_get_rmw_handle>
 800ebec:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	9a07      	ldr	r2, [sp, #28]
 800ebf4:	6827      	ldr	r7, [r4, #0]
 800ebf6:	4641      	mov	r1, r8
 800ebf8:	4633      	mov	r3, r6
 800ebfa:	f002 fd9d 	bl	8011738 <rmw_create_subscription>
 800ebfe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 800ec02:	6827      	ldr	r7, [r4, #0]
 800ec04:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800ec08:	b348      	cbz	r0, 800ec5e <rcl_subscription_init+0xfa>
 800ec0a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ec0e:	f002 fe75 	bl	80118fc <rmw_subscription_get_actual_qos>
 800ec12:	4607      	mov	r7, r0
 800ec14:	b9a8      	cbnz	r0, 800ec42 <rcl_subscription_init+0xde>
 800ec16:	6820      	ldr	r0, [r4, #0]
 800ec18:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800ec1c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 800ec20:	2270      	movs	r2, #112	@ 0x70
 800ec22:	4631      	mov	r1, r6
 800ec24:	f00d fd2b 	bl	801c67e <memcpy>
 800ec28:	9807      	ldr	r0, [sp, #28]
 800ec2a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ec2c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ec2e:	4798      	blx	r3
 800ec30:	4638      	mov	r0, r7
 800ec32:	b009      	add	sp, #36	@ 0x24
 800ec34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec38:	27c8      	movs	r7, #200	@ 0xc8
 800ec3a:	4638      	mov	r0, r7
 800ec3c:	b009      	add	sp, #36	@ 0x24
 800ec3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec42:	6827      	ldr	r7, [r4, #0]
 800ec44:	b32f      	cbz	r7, 800ec92 <rcl_subscription_init+0x12e>
 800ec46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ec4a:	b14b      	cbz	r3, 800ec60 <rcl_subscription_init+0xfc>
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	f7ff fe0f 	bl	800e870 <rcl_node_get_rmw_handle>
 800ec52:	6823      	ldr	r3, [r4, #0]
 800ec54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ec58:	f002 fe60 	bl	801191c <rmw_destroy_subscription>
 800ec5c:	6827      	ldr	r7, [r4, #0]
 800ec5e:	b197      	cbz	r7, 800ec86 <rcl_subscription_init+0x122>
 800ec60:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800ec64:	4628      	mov	r0, r5
 800ec66:	f001 fb6f 	bl	8010348 <rcutils_allocator_is_valid>
 800ec6a:	b158      	cbz	r0, 800ec84 <rcl_subscription_init+0x120>
 800ec6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec6e:	b148      	cbz	r0, 800ec84 <rcl_subscription_init+0x120>
 800ec70:	4629      	mov	r1, r5
 800ec72:	f001 fe25 	bl	80108c0 <rmw_subscription_content_filter_options_fini>
 800ec76:	4605      	mov	r5, r0
 800ec78:	b9b8      	cbnz	r0, 800ecaa <rcl_subscription_init+0x146>
 800ec7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec7c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ec7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ec80:	4798      	blx	r3
 800ec82:	66fd      	str	r5, [r7, #108]	@ 0x6c
 800ec84:	6827      	ldr	r7, [r4, #0]
 800ec86:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ec88:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ec8a:	4638      	mov	r0, r7
 800ec8c:	4798      	blx	r3
 800ec8e:	2300      	movs	r3, #0
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	2701      	movs	r7, #1
 800ec94:	e7c8      	b.n	800ec28 <rcl_subscription_init+0xc4>
 800ec96:	2867      	cmp	r0, #103	@ 0x67
 800ec98:	d0c6      	beq.n	800ec28 <rcl_subscription_init+0xc4>
 800ec9a:	2869      	cmp	r0, #105	@ 0x69
 800ec9c:	d003      	beq.n	800eca6 <rcl_subscription_init+0x142>
 800ec9e:	280a      	cmp	r0, #10
 800eca0:	d1f7      	bne.n	800ec92 <rcl_subscription_init+0x12e>
 800eca2:	270a      	movs	r7, #10
 800eca4:	e7c0      	b.n	800ec28 <rcl_subscription_init+0xc4>
 800eca6:	2767      	movs	r7, #103	@ 0x67
 800eca8:	e7be      	b.n	800ec28 <rcl_subscription_init+0xc4>
 800ecaa:	f007 ff2b 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800ecae:	6827      	ldr	r7, [r4, #0]
 800ecb0:	e7e9      	b.n	800ec86 <rcl_subscription_init+0x122>
 800ecb2:	bf00      	nop

0800ecb4 <rcl_subscription_fini>:
 800ecb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d039      	beq.n	800ed30 <rcl_subscription_fini+0x7c>
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	4608      	mov	r0, r1
 800ecc0:	460d      	mov	r5, r1
 800ecc2:	f7ff fdab 	bl	800e81c <rcl_node_is_valid_except_context>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d037      	beq.n	800ed3a <rcl_subscription_fini+0x86>
 800ecca:	6823      	ldr	r3, [r4, #0]
 800eccc:	b363      	cbz	r3, 800ed28 <rcl_subscription_fini+0x74>
 800ecce:	4628      	mov	r0, r5
 800ecd0:	6d5f      	ldr	r7, [r3, #84]	@ 0x54
 800ecd2:	f8d3 8060 	ldr.w	r8, [r3, #96]	@ 0x60
 800ecd6:	f7ff fdcb 	bl	800e870 <rcl_node_get_rmw_handle>
 800ecda:	b390      	cbz	r0, 800ed42 <rcl_subscription_fini+0x8e>
 800ecdc:	6823      	ldr	r3, [r4, #0]
 800ecde:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800ece2:	f002 fe1b 	bl	801191c <rmw_destroy_subscription>
 800ece6:	6826      	ldr	r6, [r4, #0]
 800ece8:	1e05      	subs	r5, r0, #0
 800ecea:	bf18      	it	ne
 800ecec:	2501      	movne	r5, #1
 800ecee:	b37e      	cbz	r6, 800ed50 <rcl_subscription_fini+0x9c>
 800ecf0:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 800ecf4:	4648      	mov	r0, r9
 800ecf6:	f001 fb27 	bl	8010348 <rcutils_allocator_is_valid>
 800ecfa:	b358      	cbz	r0, 800ed54 <rcl_subscription_fini+0xa0>
 800ecfc:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800ecfe:	b150      	cbz	r0, 800ed16 <rcl_subscription_fini+0x62>
 800ed00:	4649      	mov	r1, r9
 800ed02:	f001 fddd 	bl	80108c0 <rmw_subscription_content_filter_options_fini>
 800ed06:	4681      	mov	r9, r0
 800ed08:	b9e8      	cbnz	r0, 800ed46 <rcl_subscription_fini+0x92>
 800ed0a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ed0c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800ed0e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 800ed10:	4798      	blx	r3
 800ed12:	f8c6 906c 	str.w	r9, [r6, #108]	@ 0x6c
 800ed16:	6826      	ldr	r6, [r4, #0]
 800ed18:	4630      	mov	r0, r6
 800ed1a:	4641      	mov	r1, r8
 800ed1c:	47b8      	blx	r7
 800ed1e:	2300      	movs	r3, #0
 800ed20:	6023      	str	r3, [r4, #0]
 800ed22:	4628      	mov	r0, r5
 800ed24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed28:	461d      	mov	r5, r3
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed30:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 800ed34:	4628      	mov	r0, r5
 800ed36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed3a:	25c8      	movs	r5, #200	@ 0xc8
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed42:	250b      	movs	r5, #11
 800ed44:	e7f1      	b.n	800ed2a <rcl_subscription_fini+0x76>
 800ed46:	f007 fedd 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800ed4a:	6826      	ldr	r6, [r4, #0]
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d0e3      	beq.n	800ed18 <rcl_subscription_fini+0x64>
 800ed50:	2501      	movs	r5, #1
 800ed52:	e7e1      	b.n	800ed18 <rcl_subscription_fini+0x64>
 800ed54:	6826      	ldr	r6, [r4, #0]
 800ed56:	2501      	movs	r5, #1
 800ed58:	e7de      	b.n	800ed18 <rcl_subscription_fini+0x64>
 800ed5a:	bf00      	nop

0800ed5c <rcl_subscription_get_default_options>:
 800ed5c:	b570      	push	{r4, r5, r6, lr}
 800ed5e:	4d14      	ldr	r5, [pc, #80]	@ (800edb0 <rcl_subscription_get_default_options+0x54>)
 800ed60:	4914      	ldr	r1, [pc, #80]	@ (800edb4 <rcl_subscription_get_default_options+0x58>)
 800ed62:	b08a      	sub	sp, #40	@ 0x28
 800ed64:	4604      	mov	r4, r0
 800ed66:	2250      	movs	r2, #80	@ 0x50
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f00d fc88 	bl	801c67e <memcpy>
 800ed6e:	a804      	add	r0, sp, #16
 800ed70:	f001 fadc 	bl	801032c <rcutils_get_default_allocator>
 800ed74:	f10d 0c10 	add.w	ip, sp, #16
 800ed78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed7c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ed80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed84:	466e      	mov	r6, sp
 800ed86:	f8dc 3000 	ldr.w	r3, [ip]
 800ed8a:	f8ce 3000 	str.w	r3, [lr]
 800ed8e:	4630      	mov	r0, r6
 800ed90:	f001 fdb0 	bl	80108f4 <rmw_get_default_subscription_options>
 800ed94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ed98:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ed9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eda0:	2270      	movs	r2, #112	@ 0x70
 800eda2:	4629      	mov	r1, r5
 800eda4:	4620      	mov	r0, r4
 800eda6:	f00d fc6a 	bl	801c67e <memcpy>
 800edaa:	4620      	mov	r0, r4
 800edac:	b00a      	add	sp, #40	@ 0x28
 800edae:	bd70      	pop	{r4, r5, r6, pc}
 800edb0:	2000d068 	.word	0x2000d068
 800edb4:	0801de10 	.word	0x0801de10

0800edb8 <rcl_take>:
 800edb8:	2800      	cmp	r0, #0
 800edba:	d04a      	beq.n	800ee52 <rcl_take+0x9a>
 800edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edc0:	4604      	mov	r4, r0
 800edc2:	6800      	ldr	r0, [r0, #0]
 800edc4:	b0a4      	sub	sp, #144	@ 0x90
 800edc6:	2800      	cmp	r0, #0
 800edc8:	d03b      	beq.n	800ee42 <rcl_take+0x8a>
 800edca:	461f      	mov	r7, r3
 800edcc:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d036      	beq.n	800ee42 <rcl_take+0x8a>
 800edd4:	460e      	mov	r6, r1
 800edd6:	2900      	cmp	r1, #0
 800edd8:	d039      	beq.n	800ee4e <rcl_take+0x96>
 800edda:	4615      	mov	r5, r2
 800eddc:	2a00      	cmp	r2, #0
 800edde:	d03c      	beq.n	800ee5a <rcl_take+0xa2>
 800ede0:	a802      	add	r0, sp, #8
 800ede2:	f001 fd8d 	bl	8010900 <rmw_get_zero_initialized_message_info>
 800ede6:	f10d 0c08 	add.w	ip, sp, #8
 800edea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edee:	46ae      	mov	lr, r5
 800edf0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edf4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edf8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee00:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee04:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800ee08:	f04f 0800 	mov.w	r8, #0
 800ee0c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800ee10:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 800ee14:	6822      	ldr	r2, [r4, #0]
 800ee16:	462b      	mov	r3, r5
 800ee18:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 800ee1c:	9700      	str	r7, [sp, #0]
 800ee1e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 800ee22:	4631      	mov	r1, r6
 800ee24:	f002 fdda 	bl	80119dc <rmw_take_with_info>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	b9c0      	cbnz	r0, 800ee5e <rcl_take+0xa6>
 800ee2c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 800ee30:	f240 1291 	movw	r2, #401	@ 0x191
 800ee34:	2900      	cmp	r1, #0
 800ee36:	bf08      	it	eq
 800ee38:	4613      	moveq	r3, r2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	b024      	add	sp, #144	@ 0x90
 800ee3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee42:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ee46:	4618      	mov	r0, r3
 800ee48:	b024      	add	sp, #144	@ 0x90
 800ee4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4e:	230b      	movs	r3, #11
 800ee50:	e7f3      	b.n	800ee3a <rcl_take+0x82>
 800ee52:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800ee56:	4618      	mov	r0, r3
 800ee58:	4770      	bx	lr
 800ee5a:	ad14      	add	r5, sp, #80	@ 0x50
 800ee5c:	e7c0      	b.n	800ede0 <rcl_take+0x28>
 800ee5e:	f007 fe51 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 800ee62:	4603      	mov	r3, r0
 800ee64:	e7e9      	b.n	800ee3a <rcl_take+0x82>
 800ee66:	bf00      	nop

0800ee68 <rcl_subscription_get_rmw_handle>:
 800ee68:	b118      	cbz	r0, 800ee72 <rcl_subscription_get_rmw_handle+0xa>
 800ee6a:	6800      	ldr	r0, [r0, #0]
 800ee6c:	b108      	cbz	r0, 800ee72 <rcl_subscription_get_rmw_handle+0xa>
 800ee6e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ee72:	4770      	bx	lr

0800ee74 <rcl_subscription_is_valid>:
 800ee74:	b130      	cbz	r0, 800ee84 <rcl_subscription_is_valid+0x10>
 800ee76:	6800      	ldr	r0, [r0, #0]
 800ee78:	b120      	cbz	r0, 800ee84 <rcl_subscription_is_valid+0x10>
 800ee7a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 800ee7e:	3800      	subs	r0, #0
 800ee80:	bf18      	it	ne
 800ee82:	2001      	movne	r0, #1
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop

0800ee88 <_rcl_timer_time_jump>:
 800ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	b084      	sub	sp, #16
 800ee90:	4614      	mov	r4, r2
 800ee92:	b131      	cbz	r1, 800eea2 <_rcl_timer_time_jump+0x1a>
 800ee94:	7803      	ldrb	r3, [r0, #0]
 800ee96:	3b02      	subs	r3, #2
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d93f      	bls.n	800ef1c <_rcl_timer_time_jump+0x94>
 800ee9c:	b004      	add	sp, #16
 800ee9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea2:	6813      	ldr	r3, [r2, #0]
 800eea4:	a902      	add	r1, sp, #8
 800eea6:	6818      	ldr	r0, [r3, #0]
 800eea8:	f008 fa4e 	bl	8017348 <rcl_clock_get_now>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d1f5      	bne.n	800ee9c <_rcl_timer_time_jump+0x14>
 800eeb0:	6820      	ldr	r0, [r4, #0]
 800eeb2:	2105      	movs	r1, #5
 800eeb4:	3020      	adds	r0, #32
 800eeb6:	f001 fa55 	bl	8010364 <__atomic_load_8>
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	4681      	mov	r9, r0
 800eebe:	4688      	mov	r8, r1
 800eec0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800eec4:	2105      	movs	r1, #5
 800eec6:	f001 fa4d 	bl	8010364 <__atomic_load_8>
 800eeca:	4607      	mov	r7, r0
 800eecc:	6820      	ldr	r0, [r4, #0]
 800eece:	460e      	mov	r6, r1
 800eed0:	3018      	adds	r0, #24
 800eed2:	2105      	movs	r1, #5
 800eed4:	f001 fa46 	bl	8010364 <__atomic_load_8>
 800eed8:	782b      	ldrb	r3, [r5, #0]
 800eeda:	9a02      	ldr	r2, [sp, #8]
 800eedc:	3b02      	subs	r3, #2
 800eede:	2b01      	cmp	r3, #1
 800eee0:	460d      	mov	r5, r1
 800eee2:	9b03      	ldr	r3, [sp, #12]
 800eee4:	4682      	mov	sl, r0
 800eee6:	d937      	bls.n	800ef58 <_rcl_timer_time_jump+0xd0>
 800eee8:	42ba      	cmp	r2, r7
 800eeea:	eb73 0106 	sbcs.w	r1, r3, r6
 800eeee:	da5f      	bge.n	800efb0 <_rcl_timer_time_jump+0x128>
 800eef0:	454a      	cmp	r2, r9
 800eef2:	eb73 0108 	sbcs.w	r1, r3, r8
 800eef6:	dad1      	bge.n	800ee9c <_rcl_timer_time_jump+0x14>
 800eef8:	6820      	ldr	r0, [r4, #0]
 800eefa:	eb1a 0202 	adds.w	r2, sl, r2
 800eefe:	eb43 0305 	adc.w	r3, r3, r5
 800ef02:	2505      	movs	r5, #5
 800ef04:	3028      	adds	r0, #40	@ 0x28
 800ef06:	9500      	str	r5, [sp, #0]
 800ef08:	f001 fa62 	bl	80103d0 <__atomic_store_8>
 800ef0c:	6820      	ldr	r0, [r4, #0]
 800ef0e:	9500      	str	r5, [sp, #0]
 800ef10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef14:	3020      	adds	r0, #32
 800ef16:	f001 fa5b 	bl	80103d0 <__atomic_store_8>
 800ef1a:	e7bf      	b.n	800ee9c <_rcl_timer_time_jump+0x14>
 800ef1c:	6813      	ldr	r3, [r2, #0]
 800ef1e:	a902      	add	r1, sp, #8
 800ef20:	6818      	ldr	r0, [r3, #0]
 800ef22:	f008 fa11 	bl	8017348 <rcl_clock_get_now>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d1b8      	bne.n	800ee9c <_rcl_timer_time_jump+0x14>
 800ef2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	d0b4      	beq.n	800ee9c <_rcl_timer_time_jump+0x14>
 800ef32:	6820      	ldr	r0, [r4, #0]
 800ef34:	2105      	movs	r1, #5
 800ef36:	3028      	adds	r0, #40	@ 0x28
 800ef38:	f001 fa14 	bl	8010364 <__atomic_load_8>
 800ef3c:	9d02      	ldr	r5, [sp, #8]
 800ef3e:	9b03      	ldr	r3, [sp, #12]
 800ef40:	4602      	mov	r2, r0
 800ef42:	6820      	ldr	r0, [r4, #0]
 800ef44:	1b52      	subs	r2, r2, r5
 800ef46:	f04f 0405 	mov.w	r4, #5
 800ef4a:	9400      	str	r4, [sp, #0]
 800ef4c:	eb61 0303 	sbc.w	r3, r1, r3
 800ef50:	3030      	adds	r0, #48	@ 0x30
 800ef52:	f001 fa3d 	bl	80103d0 <__atomic_store_8>
 800ef56:	e7a1      	b.n	800ee9c <_rcl_timer_time_jump+0x14>
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	d09f      	beq.n	800ee9c <_rcl_timer_time_jump+0x14>
 800ef5c:	6820      	ldr	r0, [r4, #0]
 800ef5e:	f04f 0805 	mov.w	r8, #5
 800ef62:	2300      	movs	r3, #0
 800ef64:	f8cd 8000 	str.w	r8, [sp]
 800ef68:	3030      	adds	r0, #48	@ 0x30
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f001 fa66 	bl	801043c <__atomic_exchange_8>
 800ef70:	ea51 0300 	orrs.w	r3, r1, r0
 800ef74:	4606      	mov	r6, r0
 800ef76:	460f      	mov	r7, r1
 800ef78:	d090      	beq.n	800ee9c <_rcl_timer_time_jump+0x14>
 800ef7a:	9a02      	ldr	r2, [sp, #8]
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	f8cd 8000 	str.w	r8, [sp]
 800ef82:	1a12      	subs	r2, r2, r0
 800ef84:	6820      	ldr	r0, [r4, #0]
 800ef86:	eb63 0301 	sbc.w	r3, r3, r1
 800ef8a:	eb12 020a 	adds.w	r2, r2, sl
 800ef8e:	eb43 0305 	adc.w	r3, r3, r5
 800ef92:	3028      	adds	r0, #40	@ 0x28
 800ef94:	f001 fa1c 	bl	80103d0 <__atomic_store_8>
 800ef98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef9c:	f8cd 8000 	str.w	r8, [sp]
 800efa0:	6820      	ldr	r0, [r4, #0]
 800efa2:	1b92      	subs	r2, r2, r6
 800efa4:	eb63 0307 	sbc.w	r3, r3, r7
 800efa8:	3020      	adds	r0, #32
 800efaa:	f001 fa11 	bl	80103d0 <__atomic_store_8>
 800efae:	e775      	b.n	800ee9c <_rcl_timer_time_jump+0x14>
 800efb0:	6820      	ldr	r0, [r4, #0]
 800efb2:	3008      	adds	r0, #8
 800efb4:	f007 feb2 	bl	8016d1c <rcl_trigger_guard_condition>
 800efb8:	e770      	b.n	800ee9c <_rcl_timer_time_jump+0x14>
 800efba:	bf00      	nop

0800efbc <rcl_get_zero_initialized_timer>:
 800efbc:	4b01      	ldr	r3, [pc, #4]	@ (800efc4 <rcl_get_zero_initialized_timer+0x8>)
 800efbe:	6818      	ldr	r0, [r3, #0]
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	0801de60 	.word	0x0801de60

0800efc8 <rcl_timer_init>:
 800efc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efcc:	b0aa      	sub	sp, #168	@ 0xa8
 800efce:	4604      	mov	r4, r0
 800efd0:	a835      	add	r0, sp, #212	@ 0xd4
 800efd2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 800efd6:	460d      	mov	r5, r1
 800efd8:	4692      	mov	sl, r2
 800efda:	f001 f9b5 	bl	8010348 <rcutils_allocator_is_valid>
 800efde:	2800      	cmp	r0, #0
 800efe0:	d064      	beq.n	800f0ac <rcl_timer_init+0xe4>
 800efe2:	2c00      	cmp	r4, #0
 800efe4:	d062      	beq.n	800f0ac <rcl_timer_init+0xe4>
 800efe6:	2d00      	cmp	r5, #0
 800efe8:	d060      	beq.n	800f0ac <rcl_timer_init+0xe4>
 800efea:	2f00      	cmp	r7, #0
 800efec:	db5e      	blt.n	800f0ac <rcl_timer_init+0xe4>
 800efee:	6823      	ldr	r3, [r4, #0]
 800eff0:	b123      	cbz	r3, 800effc <rcl_timer_init+0x34>
 800eff2:	2664      	movs	r6, #100	@ 0x64
 800eff4:	4630      	mov	r0, r6
 800eff6:	b02a      	add	sp, #168	@ 0xa8
 800eff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800effc:	a908      	add	r1, sp, #32
 800effe:	4628      	mov	r0, r5
 800f000:	f008 f9a2 	bl	8017348 <rcl_clock_get_now>
 800f004:	4606      	mov	r6, r0
 800f006:	2800      	cmp	r0, #0
 800f008:	d1f4      	bne.n	800eff4 <rcl_timer_init+0x2c>
 800f00a:	ae06      	add	r6, sp, #24
 800f00c:	4630      	mov	r0, r6
 800f00e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 800f012:	f007 fd8b 	bl	8016b2c <rcl_get_zero_initialized_guard_condition>
 800f016:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f01a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 800f01e:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f020:	e889 0003 	stmia.w	r9, {r0, r1}
 800f024:	4630      	mov	r0, r6
 800f026:	f007 fe5d 	bl	8016ce4 <rcl_guard_condition_get_default_options>
 800f02a:	ab0d      	add	r3, sp, #52	@ 0x34
 800f02c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f030:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f034:	4651      	mov	r1, sl
 800f036:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f03a:	4648      	mov	r0, r9
 800f03c:	f007 fd80 	bl	8016b40 <rcl_guard_condition_init>
 800f040:	4606      	mov	r6, r0
 800f042:	2800      	cmp	r0, #0
 800f044:	d1d6      	bne.n	800eff4 <rcl_timer_init+0x2c>
 800f046:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d033      	beq.n	800f0b6 <rcl_timer_init+0xee>
 800f04e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 800f050:	911a      	str	r1, [sp, #104]	@ 0x68
 800f052:	4642      	mov	r2, r8
 800f054:	463b      	mov	r3, r7
 800f056:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 800f05a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f05e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800f110 <rcl_timer_init+0x148>
 800f062:	eb12 0008 	adds.w	r0, r2, r8
 800f066:	eb47 0103 	adc.w	r1, r7, r3
 800f06a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 800f06e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 800f072:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 800f076:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 800f07a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f07e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 800f082:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f086:	f8de 3000 	ldr.w	r3, [lr]
 800f08a:	f8cc 3000 	str.w	r3, [ip]
 800f08e:	f04f 0a00 	mov.w	sl, #0
 800f092:	4619      	mov	r1, r3
 800f094:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 800f098:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800f09a:	2050      	movs	r0, #80	@ 0x50
 800f09c:	4798      	blx	r3
 800f09e:	6020      	str	r0, [r4, #0]
 800f0a0:	b358      	cbz	r0, 800f0fa <rcl_timer_init+0x132>
 800f0a2:	2250      	movs	r2, #80	@ 0x50
 800f0a4:	a916      	add	r1, sp, #88	@ 0x58
 800f0a6:	f00d faea 	bl	801c67e <memcpy>
 800f0aa:	e7a3      	b.n	800eff4 <rcl_timer_init+0x2c>
 800f0ac:	260b      	movs	r6, #11
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	b02a      	add	sp, #168	@ 0xa8
 800f0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b6:	2001      	movs	r0, #1
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 800f0be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f0c6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 800f0ca:	4a13      	ldr	r2, [pc, #76]	@ (800f118 <rcl_timer_init+0x150>)
 800f0cc:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800f0d0:	9405      	str	r4, [sp, #20]
 800f0d2:	9204      	str	r2, [sp, #16]
 800f0d4:	ab12      	add	r3, sp, #72	@ 0x48
 800f0d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f0d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f0dc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800f0e0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	f008 f93b 	bl	8017360 <rcl_clock_add_jump_callback>
 800f0ea:	4682      	mov	sl, r0
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d0ae      	beq.n	800f04e <rcl_timer_init+0x86>
 800f0f0:	4648      	mov	r0, r9
 800f0f2:	f007 fdd1 	bl	8016c98 <rcl_guard_condition_fini>
 800f0f6:	4656      	mov	r6, sl
 800f0f8:	e77c      	b.n	800eff4 <rcl_timer_init+0x2c>
 800f0fa:	4648      	mov	r0, r9
 800f0fc:	f007 fdcc 	bl	8016c98 <rcl_guard_condition_fini>
 800f100:	4905      	ldr	r1, [pc, #20]	@ (800f118 <rcl_timer_init+0x150>)
 800f102:	4622      	mov	r2, r4
 800f104:	4628      	mov	r0, r5
 800f106:	f008 f98d 	bl	8017424 <rcl_clock_remove_jump_callback>
 800f10a:	260a      	movs	r6, #10
 800f10c:	e772      	b.n	800eff4 <rcl_timer_init+0x2c>
 800f10e:	bf00      	nop
	...
 800f118:	0800ee89 	.word	0x0800ee89

0800f11c <rcl_timer_fini>:
 800f11c:	b310      	cbz	r0, 800f164 <rcl_timer_fini+0x48>
 800f11e:	6803      	ldr	r3, [r0, #0]
 800f120:	b570      	push	{r4, r5, r6, lr}
 800f122:	4604      	mov	r4, r0
 800f124:	b1b3      	cbz	r3, 800f154 <rcl_timer_fini+0x38>
 800f126:	f3bf 8f5b 	dmb	ish
 800f12a:	2201      	movs	r2, #1
 800f12c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f130:	f3bf 8f5b 	dmb	ish
 800f134:	6803      	ldr	r3, [r0, #0]
 800f136:	6818      	ldr	r0, [r3, #0]
 800f138:	6c1d      	ldr	r5, [r3, #64]	@ 0x40
 800f13a:	7802      	ldrb	r2, [r0, #0]
 800f13c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800f13e:	2a01      	cmp	r2, #1
 800f140:	d00a      	beq.n	800f158 <rcl_timer_fini+0x3c>
 800f142:	f103 0008 	add.w	r0, r3, #8
 800f146:	f007 fda7 	bl	8016c98 <rcl_guard_condition_fini>
 800f14a:	6820      	ldr	r0, [r4, #0]
 800f14c:	4631      	mov	r1, r6
 800f14e:	47a8      	blx	r5
 800f150:	2300      	movs	r3, #0
 800f152:	6023      	str	r3, [r4, #0]
 800f154:	2000      	movs	r0, #0
 800f156:	bd70      	pop	{r4, r5, r6, pc}
 800f158:	4903      	ldr	r1, [pc, #12]	@ (800f168 <rcl_timer_fini+0x4c>)
 800f15a:	4622      	mov	r2, r4
 800f15c:	f008 f962 	bl	8017424 <rcl_clock_remove_jump_callback>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	e7ee      	b.n	800f142 <rcl_timer_fini+0x26>
 800f164:	2000      	movs	r0, #0
 800f166:	4770      	bx	lr
 800f168:	0800ee89 	.word	0x0800ee89

0800f16c <rcl_timer_call>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	b087      	sub	sp, #28
 800f172:	2800      	cmp	r0, #0
 800f174:	d06d      	beq.n	800f252 <rcl_timer_call+0xe6>
 800f176:	6803      	ldr	r3, [r0, #0]
 800f178:	4604      	mov	r4, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d063      	beq.n	800f246 <rcl_timer_call+0xda>
 800f17e:	f3bf 8f5b 	dmb	ish
 800f182:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f186:	f3bf 8f5b 	dmb	ish
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d150      	bne.n	800f230 <rcl_timer_call+0xc4>
 800f18e:	6803      	ldr	r3, [r0, #0]
 800f190:	a904      	add	r1, sp, #16
 800f192:	6818      	ldr	r0, [r3, #0]
 800f194:	f008 f8d8 	bl	8017348 <rcl_clock_get_now>
 800f198:	4605      	mov	r5, r0
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d14a      	bne.n	800f234 <rcl_timer_call+0xc8>
 800f19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	db4a      	blt.n	800f23c <rcl_timer_call+0xd0>
 800f1a6:	6820      	ldr	r0, [r4, #0]
 800f1a8:	f04f 0a05 	mov.w	sl, #5
 800f1ac:	f8cd a000 	str.w	sl, [sp]
 800f1b0:	3020      	adds	r0, #32
 800f1b2:	f001 f943 	bl	801043c <__atomic_exchange_8>
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	f3bf 8f5b 	dmb	ish
 800f1bc:	4680      	mov	r8, r0
 800f1be:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800f1c2:	f3bf 8f5b 	dmb	ish
 800f1c6:	6820      	ldr	r0, [r4, #0]
 800f1c8:	4689      	mov	r9, r1
 800f1ca:	3028      	adds	r0, #40	@ 0x28
 800f1cc:	4651      	mov	r1, sl
 800f1ce:	f001 f8c9 	bl	8010364 <__atomic_load_8>
 800f1d2:	4606      	mov	r6, r0
 800f1d4:	6820      	ldr	r0, [r4, #0]
 800f1d6:	460f      	mov	r7, r1
 800f1d8:	3018      	adds	r0, #24
 800f1da:	4651      	mov	r1, sl
 800f1dc:	f001 f8c2 	bl	8010364 <__atomic_load_8>
 800f1e0:	1836      	adds	r6, r6, r0
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800f1ea:	eb47 0701 	adc.w	r7, r7, r1
 800f1ee:	4286      	cmp	r6, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	eb77 010c 	sbcs.w	r1, r7, ip
 800f1f6:	da04      	bge.n	800f202 <rcl_timer_call+0x96>
 800f1f8:	ea53 0102 	orrs.w	r1, r3, r2
 800f1fc:	d12e      	bne.n	800f25c <rcl_timer_call+0xf0>
 800f1fe:	4606      	mov	r6, r0
 800f200:	4667      	mov	r7, ip
 800f202:	6820      	ldr	r0, [r4, #0]
 800f204:	2105      	movs	r1, #5
 800f206:	4632      	mov	r2, r6
 800f208:	463b      	mov	r3, r7
 800f20a:	3028      	adds	r0, #40	@ 0x28
 800f20c:	9100      	str	r1, [sp, #0]
 800f20e:	f001 f8df 	bl	80103d0 <__atomic_store_8>
 800f212:	f1bb 0f00 	cmp.w	fp, #0
 800f216:	d00d      	beq.n	800f234 <rcl_timer_call+0xc8>
 800f218:	9a04      	ldr	r2, [sp, #16]
 800f21a:	9b05      	ldr	r3, [sp, #20]
 800f21c:	ebb2 0208 	subs.w	r2, r2, r8
 800f220:	4620      	mov	r0, r4
 800f222:	eb63 0309 	sbc.w	r3, r3, r9
 800f226:	47d8      	blx	fp
 800f228:	4628      	mov	r0, r5
 800f22a:	b007      	add	sp, #28
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f230:	f240 3521 	movw	r5, #801	@ 0x321
 800f234:	4628      	mov	r0, r5
 800f236:	b007      	add	sp, #28
 800f238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f23c:	2501      	movs	r5, #1
 800f23e:	4628      	mov	r0, r5
 800f240:	b007      	add	sp, #28
 800f242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f246:	f44f 7548 	mov.w	r5, #800	@ 0x320
 800f24a:	4628      	mov	r0, r5
 800f24c:	b007      	add	sp, #28
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f252:	250b      	movs	r5, #11
 800f254:	4628      	mov	r0, r5
 800f256:	b007      	add	sp, #28
 800f258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f25c:	1b80      	subs	r0, r0, r6
 800f25e:	eb6c 0107 	sbc.w	r1, ip, r7
 800f262:	3801      	subs	r0, #1
 800f264:	f161 0100 	sbc.w	r1, r1, #0
 800f268:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800f26c:	f7f1 fc56 	bl	8000b1c <__aeabi_ldivmod>
 800f270:	9b02      	ldr	r3, [sp, #8]
 800f272:	3001      	adds	r0, #1
 800f274:	f141 0100 	adc.w	r1, r1, #0
 800f278:	fb00 f303 	mul.w	r3, r0, r3
 800f27c:	fb01 330a 	mla	r3, r1, sl, r3
 800f280:	fba0 0a0a 	umull	r0, sl, r0, sl
 800f284:	1986      	adds	r6, r0, r6
 800f286:	4453      	add	r3, sl
 800f288:	eb43 0707 	adc.w	r7, r3, r7
 800f28c:	e7b9      	b.n	800f202 <rcl_timer_call+0x96>
 800f28e:	bf00      	nop

0800f290 <rcl_timer_is_ready>:
 800f290:	b570      	push	{r4, r5, r6, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	b378      	cbz	r0, 800f2f6 <rcl_timer_is_ready+0x66>
 800f296:	6803      	ldr	r3, [r0, #0]
 800f298:	4604      	mov	r4, r0
 800f29a:	b383      	cbz	r3, 800f2fe <rcl_timer_is_ready+0x6e>
 800f29c:	460d      	mov	r5, r1
 800f29e:	b351      	cbz	r1, 800f2f6 <rcl_timer_is_ready+0x66>
 800f2a0:	f3bf 8f5b 	dmb	ish
 800f2a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f2a8:	f3bf 8f5b 	dmb	ish
 800f2ac:	b953      	cbnz	r3, 800f2c4 <rcl_timer_is_ready+0x34>
 800f2ae:	6803      	ldr	r3, [r0, #0]
 800f2b0:	4669      	mov	r1, sp
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	f008 f848 	bl	8017348 <rcl_clock_get_now>
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	b140      	cbz	r0, 800f2ce <rcl_timer_is_ready+0x3e>
 800f2bc:	f240 3321 	movw	r3, #801	@ 0x321
 800f2c0:	4298      	cmp	r0, r3
 800f2c2:	d101      	bne.n	800f2c8 <rcl_timer_is_ready+0x38>
 800f2c4:	2600      	movs	r6, #0
 800f2c6:	702e      	strb	r6, [r5, #0]
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	b002      	add	sp, #8
 800f2cc:	bd70      	pop	{r4, r5, r6, pc}
 800f2ce:	6820      	ldr	r0, [r4, #0]
 800f2d0:	2105      	movs	r1, #5
 800f2d2:	3028      	adds	r0, #40	@ 0x28
 800f2d4:	f001 f846 	bl	8010364 <__atomic_load_8>
 800f2d8:	9b00      	ldr	r3, [sp, #0]
 800f2da:	1ac0      	subs	r0, r0, r3
 800f2dc:	9b01      	ldr	r3, [sp, #4]
 800f2de:	eb61 0103 	sbc.w	r1, r1, r3
 800f2e2:	2801      	cmp	r0, #1
 800f2e4:	f171 0300 	sbcs.w	r3, r1, #0
 800f2e8:	bfb4      	ite	lt
 800f2ea:	2301      	movlt	r3, #1
 800f2ec:	2300      	movge	r3, #0
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	702b      	strb	r3, [r5, #0]
 800f2f2:	b002      	add	sp, #8
 800f2f4:	bd70      	pop	{r4, r5, r6, pc}
 800f2f6:	260b      	movs	r6, #11
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	b002      	add	sp, #8
 800f2fc:	bd70      	pop	{r4, r5, r6, pc}
 800f2fe:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f302:	e7e1      	b.n	800f2c8 <rcl_timer_is_ready+0x38>

0800f304 <rcl_timer_get_time_until_next_call>:
 800f304:	b570      	push	{r4, r5, r6, lr}
 800f306:	b082      	sub	sp, #8
 800f308:	b330      	cbz	r0, 800f358 <rcl_timer_get_time_until_next_call+0x54>
 800f30a:	6803      	ldr	r3, [r0, #0]
 800f30c:	4604      	mov	r4, r0
 800f30e:	b33b      	cbz	r3, 800f360 <rcl_timer_get_time_until_next_call+0x5c>
 800f310:	460d      	mov	r5, r1
 800f312:	b309      	cbz	r1, 800f358 <rcl_timer_get_time_until_next_call+0x54>
 800f314:	f3bf 8f5b 	dmb	ish
 800f318:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f31c:	f3bf 8f5b 	dmb	ish
 800f320:	b9ab      	cbnz	r3, 800f34e <rcl_timer_get_time_until_next_call+0x4a>
 800f322:	6803      	ldr	r3, [r0, #0]
 800f324:	4669      	mov	r1, sp
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	f008 f80e 	bl	8017348 <rcl_clock_get_now>
 800f32c:	4606      	mov	r6, r0
 800f32e:	b958      	cbnz	r0, 800f348 <rcl_timer_get_time_until_next_call+0x44>
 800f330:	6820      	ldr	r0, [r4, #0]
 800f332:	2105      	movs	r1, #5
 800f334:	3028      	adds	r0, #40	@ 0x28
 800f336:	f001 f815 	bl	8010364 <__atomic_load_8>
 800f33a:	9b00      	ldr	r3, [sp, #0]
 800f33c:	1ac0      	subs	r0, r0, r3
 800f33e:	9b01      	ldr	r3, [sp, #4]
 800f340:	6028      	str	r0, [r5, #0]
 800f342:	eb61 0103 	sbc.w	r1, r1, r3
 800f346:	6069      	str	r1, [r5, #4]
 800f348:	4630      	mov	r0, r6
 800f34a:	b002      	add	sp, #8
 800f34c:	bd70      	pop	{r4, r5, r6, pc}
 800f34e:	f240 3621 	movw	r6, #801	@ 0x321
 800f352:	4630      	mov	r0, r6
 800f354:	b002      	add	sp, #8
 800f356:	bd70      	pop	{r4, r5, r6, pc}
 800f358:	260b      	movs	r6, #11
 800f35a:	4630      	mov	r0, r6
 800f35c:	b002      	add	sp, #8
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	f44f 7648 	mov.w	r6, #800	@ 0x320
 800f364:	e7f0      	b.n	800f348 <rcl_timer_get_time_until_next_call+0x44>
 800f366:	bf00      	nop

0800f368 <rcl_timer_get_guard_condition>:
 800f368:	b130      	cbz	r0, 800f378 <rcl_timer_get_guard_condition+0x10>
 800f36a:	6800      	ldr	r0, [r0, #0]
 800f36c:	b120      	cbz	r0, 800f378 <rcl_timer_get_guard_condition+0x10>
 800f36e:	68c3      	ldr	r3, [r0, #12]
 800f370:	b10b      	cbz	r3, 800f376 <rcl_timer_get_guard_condition+0xe>
 800f372:	3008      	adds	r0, #8
 800f374:	4770      	bx	lr
 800f376:	4618      	mov	r0, r3
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop

0800f37c <_rclc_check_for_new_data>:
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d046      	beq.n	800f40e <_rclc_check_for_new_data+0x92>
 800f380:	b510      	push	{r4, lr}
 800f382:	7802      	ldrb	r2, [r0, #0]
 800f384:	b084      	sub	sp, #16
 800f386:	4603      	mov	r3, r0
 800f388:	2a0a      	cmp	r2, #10
 800f38a:	d842      	bhi.n	800f412 <_rclc_check_for_new_data+0x96>
 800f38c:	e8df f002 	tbb	[pc, r2]
 800f390:	14181212 	.word	0x14181212
 800f394:	06060614 	.word	0x06060614
 800f398:	2e1a      	.short	0x2e1a
 800f39a:	16          	.byte	0x16
 800f39b:	00          	.byte	0x00
 800f39c:	6a0a      	ldr	r2, [r1, #32]
 800f39e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f3a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f3a4:	2000      	movs	r0, #0
 800f3a6:	1a12      	subs	r2, r2, r0
 800f3a8:	bf18      	it	ne
 800f3aa:	2201      	movne	r2, #1
 800f3ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f3b0:	b004      	add	sp, #16
 800f3b2:	bd10      	pop	{r4, pc}
 800f3b4:	680a      	ldr	r2, [r1, #0]
 800f3b6:	e7f2      	b.n	800f39e <_rclc_check_for_new_data+0x22>
 800f3b8:	698a      	ldr	r2, [r1, #24]
 800f3ba:	e7f0      	b.n	800f39e <_rclc_check_for_new_data+0x22>
 800f3bc:	688a      	ldr	r2, [r1, #8]
 800f3be:	e7ee      	b.n	800f39e <_rclc_check_for_new_data+0x22>
 800f3c0:	690a      	ldr	r2, [r1, #16]
 800f3c2:	e7ec      	b.n	800f39e <_rclc_check_for_new_data+0x22>
 800f3c4:	685c      	ldr	r4, [r3, #4]
 800f3c6:	4608      	mov	r0, r1
 800f3c8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800f3cc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800f3d0:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800f3d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800f3de:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800f3e2:	f104 0110 	add.w	r1, r4, #16
 800f3e6:	f008 ffeb 	bl	80183c0 <rcl_action_client_wait_set_get_entities_ready>
 800f3ea:	e7e1      	b.n	800f3b0 <_rclc_check_for_new_data+0x34>
 800f3ec:	685c      	ldr	r4, [r3, #4]
 800f3ee:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800f3f2:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800f3f6:	e9cd 3200 	strd	r3, r2, [sp]
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f400:	f104 0220 	add.w	r2, r4, #32
 800f404:	f104 0110 	add.w	r1, r4, #16
 800f408:	f009 f9f2 	bl	80187f0 <rcl_action_server_wait_set_get_entities_ready>
 800f40c:	e7d0      	b.n	800f3b0 <_rclc_check_for_new_data+0x34>
 800f40e:	200b      	movs	r0, #11
 800f410:	4770      	bx	lr
 800f412:	2001      	movs	r0, #1
 800f414:	e7cc      	b.n	800f3b0 <_rclc_check_for_new_data+0x34>
 800f416:	bf00      	nop

0800f418 <_rclc_take_new_data>:
 800f418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41a:	b09b      	sub	sp, #108	@ 0x6c
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f000 8088 	beq.w	800f532 <_rclc_take_new_data+0x11a>
 800f422:	7803      	ldrb	r3, [r0, #0]
 800f424:	4604      	mov	r4, r0
 800f426:	2b0a      	cmp	r3, #10
 800f428:	f200 8167 	bhi.w	800f6fa <_rclc_take_new_data+0x2e2>
 800f42c:	e8df f003 	tbb	[pc, r3]
 800f430:	44152d2d 	.word	0x44152d2d
 800f434:	19191944 	.word	0x19191944
 800f438:	065a      	.short	0x065a
 800f43a:	15          	.byte	0x15
 800f43b:	00          	.byte	0x00
 800f43c:	6840      	ldr	r0, [r0, #4]
 800f43e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	f040 80b2 	bne.w	800f5ac <_rclc_take_new_data+0x194>
 800f448:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f040 80e4 	bne.w	800f61a <_rclc_take_new_data+0x202>
 800f452:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f456:	2b00      	cmp	r3, #0
 800f458:	d16f      	bne.n	800f53a <_rclc_take_new_data+0x122>
 800f45a:	2500      	movs	r5, #0
 800f45c:	4628      	mov	r0, r5
 800f45e:	b01b      	add	sp, #108	@ 0x6c
 800f460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f462:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f464:	6a0b      	ldr	r3, [r1, #32]
 800f466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d0f5      	beq.n	800f45a <_rclc_take_new_data+0x42>
 800f46e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f472:	f104 0110 	add.w	r1, r4, #16
 800f476:	f007 fe43 	bl	8017100 <rcl_take_request>
 800f47a:	4605      	mov	r5, r0
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d0ec      	beq.n	800f45a <_rclc_take_new_data+0x42>
 800f480:	f240 2359 	movw	r3, #601	@ 0x259
 800f484:	4298      	cmp	r0, r3
 800f486:	d013      	beq.n	800f4b0 <_rclc_take_new_data+0x98>
 800f488:	e029      	b.n	800f4de <_rclc_take_new_data+0xc6>
 800f48a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f48c:	680b      	ldr	r3, [r1, #0]
 800f48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d0e1      	beq.n	800f45a <_rclc_take_new_data+0x42>
 800f496:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f49a:	2300      	movs	r3, #0
 800f49c:	aa0a      	add	r2, sp, #40	@ 0x28
 800f49e:	f7ff fc8b 	bl	800edb8 <rcl_take>
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d0d9      	beq.n	800f45c <_rclc_take_new_data+0x44>
 800f4a8:	f240 1391 	movw	r3, #401	@ 0x191
 800f4ac:	4298      	cmp	r0, r3
 800f4ae:	d116      	bne.n	800f4de <_rclc_take_new_data+0xc6>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800f4b6:	e7d1      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f4b8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800f4ba:	698b      	ldr	r3, [r1, #24]
 800f4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d0ca      	beq.n	800f45a <_rclc_take_new_data+0x42>
 800f4c4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800f4c8:	f104 0110 	add.w	r1, r4, #16
 800f4cc:	f007 fac8 	bl	8016a60 <rcl_take_response>
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d0c1      	beq.n	800f45a <_rclc_take_new_data+0x42>
 800f4d6:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f4da:	4298      	cmp	r0, r3
 800f4dc:	d0be      	beq.n	800f45c <_rclc_take_new_data+0x44>
 800f4de:	f001 f813 	bl	8010508 <rcutils_reset_error>
 800f4e2:	e7bb      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f4e4:	6840      	ldr	r0, [r0, #4]
 800f4e6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d17d      	bne.n	800f5ea <_rclc_take_new_data+0x1d2>
 800f4ee:	69c3      	ldr	r3, [r0, #28]
 800f4f0:	b11b      	cbz	r3, 800f4fa <_rclc_take_new_data+0xe2>
 800f4f2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d144      	bne.n	800f584 <_rclc_take_new_data+0x16c>
 800f4fa:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f040 80ac 	bne.w	800f65c <_rclc_take_new_data+0x244>
 800f504:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d0a6      	beq.n	800f45a <_rclc_take_new_data+0x42>
 800f50c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800f50e:	a90a      	add	r1, sp, #40	@ 0x28
 800f510:	3010      	adds	r0, #16
 800f512:	f008 fe2d 	bl	8018170 <rcl_action_take_result_response>
 800f516:	4605      	mov	r5, r0
 800f518:	2800      	cmp	r0, #0
 800f51a:	d1e0      	bne.n	800f4de <_rclc_take_new_data+0xc6>
 800f51c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f520:	6860      	ldr	r0, [r4, #4]
 800f522:	f009 fa89 	bl	8018a38 <rclc_action_find_handle_by_result_request_sequence_number>
 800f526:	2800      	cmp	r0, #0
 800f528:	d098      	beq.n	800f45c <_rclc_take_new_data+0x44>
 800f52a:	2301      	movs	r3, #1
 800f52c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800f530:	e794      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f532:	250b      	movs	r5, #11
 800f534:	4628      	mov	r0, r5
 800f536:	b01b      	add	sp, #108	@ 0x6c
 800f538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f53a:	ae04      	add	r6, sp, #16
 800f53c:	aa0a      	add	r2, sp, #40	@ 0x28
 800f53e:	3010      	adds	r0, #16
 800f540:	4631      	mov	r1, r6
 800f542:	f009 f889 	bl	8018658 <rcl_action_take_cancel_request>
 800f546:	4605      	mov	r5, r0
 800f548:	2800      	cmp	r0, #0
 800f54a:	d1c8      	bne.n	800f4de <_rclc_take_new_data+0xc6>
 800f54c:	6860      	ldr	r0, [r4, #4]
 800f54e:	a90a      	add	r1, sp, #40	@ 0x28
 800f550:	f009 fa30 	bl	80189b4 <rclc_action_find_goal_handle_by_uuid>
 800f554:	4607      	mov	r7, r0
 800f556:	2800      	cmp	r0, #0
 800f558:	f000 80bb 	beq.w	800f6d2 <_rclc_take_new_data+0x2ba>
 800f55c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800f560:	2101      	movs	r1, #1
 800f562:	f009 f9b1 	bl	80188c8 <rcl_action_transition_goal_state>
 800f566:	2803      	cmp	r0, #3
 800f568:	4684      	mov	ip, r0
 800f56a:	f040 80a7 	bne.w	800f6bc <_rclc_take_new_data+0x2a4>
 800f56e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f570:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800f574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f576:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f57a:	e884 0003 	stmia.w	r4, {r0, r1}
 800f57e:	f887 c008 	strb.w	ip, [r7, #8]
 800f582:	e76b      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f584:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f586:	3010      	adds	r0, #16
 800f588:	f008 fe72 	bl	8018270 <rcl_action_take_feedback>
 800f58c:	4605      	mov	r5, r0
 800f58e:	2800      	cmp	r0, #0
 800f590:	d1a5      	bne.n	800f4de <_rclc_take_new_data+0xc6>
 800f592:	6860      	ldr	r0, [r4, #4]
 800f594:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f596:	f009 fa0d 	bl	80189b4 <rclc_action_find_goal_handle_by_uuid>
 800f59a:	4603      	mov	r3, r0
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f000 80a3 	beq.w	800f6e8 <_rclc_take_new_data+0x2d0>
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	6860      	ldr	r0, [r4, #4]
 800f5a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800f5aa:	e7a6      	b.n	800f4fa <_rclc_take_new_data+0xe2>
 800f5ac:	f009 f9dc 	bl	8018968 <rclc_action_take_goal_handle>
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	6860      	ldr	r0, [r4, #4]
 800f5b4:	2e00      	cmp	r6, #0
 800f5b6:	f43f af47 	beq.w	800f448 <_rclc_take_new_data+0x30>
 800f5ba:	6070      	str	r0, [r6, #4]
 800f5bc:	69f2      	ldr	r2, [r6, #28]
 800f5be:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800f5c2:	3010      	adds	r0, #16
 800f5c4:	f008 ff90 	bl	80184e8 <rcl_action_take_goal_request>
 800f5c8:	4605      	mov	r5, r0
 800f5ca:	2800      	cmp	r0, #0
 800f5cc:	f040 808e 	bne.w	800f6ec <_rclc_take_new_data+0x2d4>
 800f5d0:	69f7      	ldr	r7, [r6, #28]
 800f5d2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f5d4:	7235      	strb	r5, [r6, #8]
 800f5d6:	f8c6 0009 	str.w	r0, [r6, #9]
 800f5da:	f8c6 100d 	str.w	r1, [r6, #13]
 800f5de:	6860      	ldr	r0, [r4, #4]
 800f5e0:	f8c6 2011 	str.w	r2, [r6, #17]
 800f5e4:	f8c6 3015 	str.w	r3, [r6, #21]
 800f5e8:	e72e      	b.n	800f448 <_rclc_take_new_data+0x30>
 800f5ea:	aa04      	add	r2, sp, #16
 800f5ec:	a90a      	add	r1, sp, #40	@ 0x28
 800f5ee:	3010      	adds	r0, #16
 800f5f0:	f008 fd46 	bl	8018080 <rcl_action_take_goal_response>
 800f5f4:	4605      	mov	r5, r0
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f47f af71 	bne.w	800f4de <_rclc_take_new_data+0xc6>
 800f5fc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f600:	6860      	ldr	r0, [r4, #4]
 800f602:	f009 fa07 	bl	8018a14 <rclc_action_find_handle_by_goal_request_sequence_number>
 800f606:	b130      	cbz	r0, 800f616 <_rclc_take_new_data+0x1fe>
 800f608:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800f60c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f610:	2201      	movs	r2, #1
 800f612:	f880 2020 	strb.w	r2, [r0, #32]
 800f616:	6860      	ldr	r0, [r4, #4]
 800f618:	e769      	b.n	800f4ee <_rclc_take_new_data+0xd6>
 800f61a:	aa04      	add	r2, sp, #16
 800f61c:	3010      	adds	r0, #16
 800f61e:	a90a      	add	r1, sp, #40	@ 0x28
 800f620:	f008 ffda 	bl	80185d8 <rcl_action_take_result_request>
 800f624:	4605      	mov	r5, r0
 800f626:	2800      	cmp	r0, #0
 800f628:	f47f af59 	bne.w	800f4de <_rclc_take_new_data+0xc6>
 800f62c:	6860      	ldr	r0, [r4, #4]
 800f62e:	a904      	add	r1, sp, #16
 800f630:	f009 f9c0 	bl	80189b4 <rclc_action_find_goal_handle_by_uuid>
 800f634:	4607      	mov	r7, r0
 800f636:	b160      	cbz	r0, 800f652 <_rclc_take_new_data+0x23a>
 800f638:	ad0a      	add	r5, sp, #40	@ 0x28
 800f63a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800f63e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f640:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f642:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f646:	f04f 0c02 	mov.w	ip, #2
 800f64a:	e886 0003 	stmia.w	r6, {r0, r1}
 800f64e:	f887 c008 	strb.w	ip, [r7, #8]
 800f652:	6860      	ldr	r0, [r4, #4]
 800f654:	2300      	movs	r3, #0
 800f656:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800f65a:	e6fa      	b.n	800f452 <_rclc_take_new_data+0x3a>
 800f65c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800f660:	a90a      	add	r1, sp, #40	@ 0x28
 800f662:	3010      	adds	r0, #16
 800f664:	f008 fdc4 	bl	80181f0 <rcl_action_take_cancel_response>
 800f668:	4605      	mov	r5, r0
 800f66a:	2800      	cmp	r0, #0
 800f66c:	f47f af37 	bne.w	800f4de <_rclc_take_new_data+0xc6>
 800f670:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f674:	6860      	ldr	r0, [r4, #4]
 800f676:	f009 f9f1 	bl	8018a5c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800f67a:	4606      	mov	r6, r0
 800f67c:	6860      	ldr	r0, [r4, #4]
 800f67e:	2e00      	cmp	r6, #0
 800f680:	f43f af40 	beq.w	800f504 <_rclc_take_new_data+0xec>
 800f684:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f686:	2701      	movs	r7, #1
 800f688:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f43f af3a 	beq.w	800f504 <_rclc_take_new_data+0xec>
 800f690:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f692:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800f696:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f69a:	f009 f98b 	bl	80189b4 <rclc_action_find_goal_handle_by_uuid>
 800f69e:	b138      	cbz	r0, 800f6b0 <_rclc_take_new_data+0x298>
 800f6a0:	6860      	ldr	r0, [r4, #4]
 800f6a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f6a4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800f6a8:	3501      	adds	r5, #1
 800f6aa:	42ab      	cmp	r3, r5
 800f6ac:	d8f0      	bhi.n	800f690 <_rclc_take_new_data+0x278>
 800f6ae:	e729      	b.n	800f504 <_rclc_take_new_data+0xec>
 800f6b0:	6860      	ldr	r0, [r4, #4]
 800f6b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800f6b4:	3501      	adds	r5, #1
 800f6b6:	42ab      	cmp	r3, r5
 800f6b8:	d8ea      	bhi.n	800f690 <_rclc_take_new_data+0x278>
 800f6ba:	e723      	b.n	800f504 <_rclc_take_new_data+0xec>
 800f6bc:	ab06      	add	r3, sp, #24
 800f6be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6c0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f6c4:	2103      	movs	r1, #3
 800f6c6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f6ca:	6860      	ldr	r0, [r4, #4]
 800f6cc:	f009 fa3c 	bl	8018b48 <rclc_action_server_goal_cancel_reject>
 800f6d0:	e6c4      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f6d2:	ab06      	add	r3, sp, #24
 800f6d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f6d6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f6da:	2102      	movs	r1, #2
 800f6dc:	e896 000c 	ldmia.w	r6, {r2, r3}
 800f6e0:	6860      	ldr	r0, [r4, #4]
 800f6e2:	f009 fa31 	bl	8018b48 <rclc_action_server_goal_cancel_reject>
 800f6e6:	e6b9      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f6e8:	6860      	ldr	r0, [r4, #4]
 800f6ea:	e706      	b.n	800f4fa <_rclc_take_new_data+0xe2>
 800f6ec:	6860      	ldr	r0, [r4, #4]
 800f6ee:	4631      	mov	r1, r6
 800f6f0:	f009 f94a 	bl	8018988 <rclc_action_remove_used_goal_handle>
 800f6f4:	f000 ff08 	bl	8010508 <rcutils_reset_error>
 800f6f8:	e6b0      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f6fa:	2501      	movs	r5, #1
 800f6fc:	e6ae      	b.n	800f45c <_rclc_take_new_data+0x44>
 800f6fe:	bf00      	nop

0800f700 <_rclc_execute.part.0>:
 800f700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f702:	7803      	ldrb	r3, [r0, #0]
 800f704:	b087      	sub	sp, #28
 800f706:	4604      	mov	r4, r0
 800f708:	2b0a      	cmp	r3, #10
 800f70a:	f200 8136 	bhi.w	800f97a <_rclc_execute.part.0+0x27a>
 800f70e:	e8df f003 	tbb	[pc, r3]
 800f712:	435e      	.short	0x435e
 800f714:	06a1664f 	.word	0x06a1664f
 800f718:	6c1e0606 	.word	0x6c1e0606
 800f71c:	59          	.byte	0x59
 800f71d:	00          	.byte	0x00
 800f71e:	2b06      	cmp	r3, #6
 800f720:	f000 8122 	beq.w	800f968 <_rclc_execute.part.0+0x268>
 800f724:	2b07      	cmp	r3, #7
 800f726:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f728:	f040 8118 	bne.w	800f95c <_rclc_execute.part.0+0x25c>
 800f72c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800f730:	6880      	ldr	r0, [r0, #8]
 800f732:	4798      	blx	r3
 800f734:	f104 0110 	add.w	r1, r4, #16
 800f738:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800f73a:	6860      	ldr	r0, [r4, #4]
 800f73c:	f007 fd20 	bl	8017180 <rcl_send_response>
 800f740:	2800      	cmp	r0, #0
 800f742:	d033      	beq.n	800f7ac <_rclc_execute.part.0+0xac>
 800f744:	9005      	str	r0, [sp, #20]
 800f746:	f000 fedf 	bl	8010508 <rcutils_reset_error>
 800f74a:	9805      	ldr	r0, [sp, #20]
 800f74c:	e02e      	b.n	800f7ac <_rclc_execute.part.0+0xac>
 800f74e:	6840      	ldr	r0, [r0, #4]
 800f750:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800f754:	2b00      	cmp	r3, #0
 800f756:	f000 8086 	beq.w	800f866 <_rclc_execute.part.0+0x166>
 800f75a:	2600      	movs	r6, #0
 800f75c:	2701      	movs	r7, #1
 800f75e:	e004      	b.n	800f76a <_rclc_execute.part.0+0x6a>
 800f760:	f009 f8dc 	bl	801891c <rclc_action_send_result_request>
 800f764:	b998      	cbnz	r0, 800f78e <_rclc_execute.part.0+0x8e>
 800f766:	722f      	strb	r7, [r5, #8]
 800f768:	6860      	ldr	r0, [r4, #4]
 800f76a:	f009 f989 	bl	8018a80 <rclc_action_find_first_handle_with_goal_response>
 800f76e:	4605      	mov	r5, r0
 800f770:	2800      	cmp	r0, #0
 800f772:	d077      	beq.n	800f864 <_rclc_execute.part.0+0x164>
 800f774:	6863      	ldr	r3, [r4, #4]
 800f776:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f778:	699b      	ldr	r3, [r3, #24]
 800f77a:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800f77e:	f885 6020 	strb.w	r6, [r5, #32]
 800f782:	4798      	blx	r3
 800f784:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800f788:	4628      	mov	r0, r5
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d1e8      	bne.n	800f760 <_rclc_execute.part.0+0x60>
 800f78e:	6860      	ldr	r0, [r4, #4]
 800f790:	4629      	mov	r1, r5
 800f792:	f009 f8f9 	bl	8018988 <rclc_action_remove_used_goal_handle>
 800f796:	e7e7      	b.n	800f768 <_rclc_execute.part.0+0x68>
 800f798:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800f79c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800f7a0:	2d00      	cmp	r5, #0
 800f7a2:	f000 80c9 	beq.w	800f938 <_rclc_execute.part.0+0x238>
 800f7a6:	6880      	ldr	r0, [r0, #8]
 800f7a8:	4798      	blx	r3
 800f7aa:	2000      	movs	r0, #0
 800f7ac:	b007      	add	sp, #28
 800f7ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7b0:	6840      	ldr	r0, [r0, #4]
 800f7b2:	f7ff fcdb 	bl	800f16c <rcl_timer_call>
 800f7b6:	f240 3321 	movw	r3, #801	@ 0x321
 800f7ba:	4298      	cmp	r0, r3
 800f7bc:	d004      	beq.n	800f7c8 <_rclc_execute.part.0+0xc8>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d0f4      	beq.n	800f7ac <_rclc_execute.part.0+0xac>
 800f7c2:	e7bf      	b.n	800f744 <_rclc_execute.part.0+0x44>
 800f7c4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f7c6:	4798      	blx	r3
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	b007      	add	sp, #28
 800f7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ce:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800f7d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f7d4:	b925      	cbnz	r5, 800f7e0 <_rclc_execute.part.0+0xe0>
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	4798      	blx	r3
 800f7da:	4628      	mov	r0, r5
 800f7dc:	e7e6      	b.n	800f7ac <_rclc_execute.part.0+0xac>
 800f7de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f7e0:	68a0      	ldr	r0, [r4, #8]
 800f7e2:	4798      	blx	r3
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	b007      	add	sp, #28
 800f7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7ea:	6840      	ldr	r0, [r0, #4]
 800f7ec:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800f7f0:	bb3b      	cbnz	r3, 800f842 <_rclc_execute.part.0+0x142>
 800f7f2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d07b      	beq.n	800f8f2 <_rclc_execute.part.0+0x1f2>
 800f7fa:	f640 0634 	movw	r6, #2100	@ 0x834
 800f7fe:	2701      	movs	r7, #1
 800f800:	e007      	b.n	800f812 <_rclc_execute.part.0+0x112>
 800f802:	4628      	mov	r0, r5
 800f804:	f009 f954 	bl	8018ab0 <rclc_action_server_response_goal_request>
 800f808:	6860      	ldr	r0, [r4, #4]
 800f80a:	4629      	mov	r1, r5
 800f80c:	f009 f8bc 	bl	8018988 <rclc_action_remove_used_goal_handle>
 800f810:	6860      	ldr	r0, [r4, #4]
 800f812:	2100      	movs	r1, #0
 800f814:	f009 f8e6 	bl	80189e4 <rclc_action_find_first_handle_by_status>
 800f818:	4605      	mov	r5, r0
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d066      	beq.n	800f8ec <_rclc_execute.part.0+0x1ec>
 800f81e:	6863      	ldr	r3, [r4, #4]
 800f820:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f822:	699b      	ldr	r3, [r3, #24]
 800f824:	4798      	blx	r3
 800f826:	42b0      	cmp	r0, r6
 800f828:	f04f 0100 	mov.w	r1, #0
 800f82c:	d1e9      	bne.n	800f802 <_rclc_execute.part.0+0x102>
 800f82e:	2101      	movs	r1, #1
 800f830:	4628      	mov	r0, r5
 800f832:	f009 f93d 	bl	8018ab0 <rclc_action_server_response_goal_request>
 800f836:	722f      	strb	r7, [r5, #8]
 800f838:	e7ea      	b.n	800f810 <_rclc_execute.part.0+0x110>
 800f83a:	6848      	ldr	r0, [r1, #4]
 800f83c:	f009 f8a4 	bl	8018988 <rclc_action_remove_used_goal_handle>
 800f840:	6860      	ldr	r0, [r4, #4]
 800f842:	f009 f8db 	bl	80189fc <rclc_action_find_first_terminated_handle>
 800f846:	4601      	mov	r1, r0
 800f848:	2800      	cmp	r0, #0
 800f84a:	d1f6      	bne.n	800f83a <_rclc_execute.part.0+0x13a>
 800f84c:	6860      	ldr	r0, [r4, #4]
 800f84e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800f852:	e7ce      	b.n	800f7f2 <_rclc_execute.part.0+0xf2>
 800f854:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f856:	6880      	ldr	r0, [r0, #8]
 800f858:	f104 0110 	add.w	r1, r4, #16
 800f85c:	4798      	blx	r3
 800f85e:	2000      	movs	r0, #0
 800f860:	b007      	add	sp, #28
 800f862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f864:	6860      	ldr	r0, [r4, #4]
 800f866:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f86a:	b18b      	cbz	r3, 800f890 <_rclc_execute.part.0+0x190>
 800f86c:	68c5      	ldr	r5, [r0, #12]
 800f86e:	b32d      	cbz	r5, 800f8bc <_rclc_execute.part.0+0x1bc>
 800f870:	2600      	movs	r6, #0
 800f872:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800f876:	b143      	cbz	r3, 800f88a <_rclc_execute.part.0+0x18a>
 800f878:	69c3      	ldr	r3, [r0, #28]
 800f87a:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800f87e:	b123      	cbz	r3, 800f88a <_rclc_execute.part.0+0x18a>
 800f880:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f882:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f884:	4628      	mov	r0, r5
 800f886:	4798      	blx	r3
 800f888:	6860      	ldr	r0, [r4, #4]
 800f88a:	682d      	ldr	r5, [r5, #0]
 800f88c:	2d00      	cmp	r5, #0
 800f88e:	d1f0      	bne.n	800f872 <_rclc_execute.part.0+0x172>
 800f890:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f894:	b193      	cbz	r3, 800f8bc <_rclc_execute.part.0+0x1bc>
 800f896:	68c5      	ldr	r5, [r0, #12]
 800f898:	b185      	cbz	r5, 800f8bc <_rclc_execute.part.0+0x1bc>
 800f89a:	2600      	movs	r6, #0
 800f89c:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800f8a0:	b14b      	cbz	r3, 800f8b6 <_rclc_execute.part.0+0x1b6>
 800f8a2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f8a4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800f8a8:	b12b      	cbz	r3, 800f8b6 <_rclc_execute.part.0+0x1b6>
 800f8aa:	4628      	mov	r0, r5
 800f8ac:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f8b0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f8b2:	4798      	blx	r3
 800f8b4:	6860      	ldr	r0, [r4, #4]
 800f8b6:	682d      	ldr	r5, [r5, #0]
 800f8b8:	2d00      	cmp	r5, #0
 800f8ba:	d1ef      	bne.n	800f89c <_rclc_execute.part.0+0x19c>
 800f8bc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d081      	beq.n	800f7c8 <_rclc_execute.part.0+0xc8>
 800f8c4:	2700      	movs	r7, #0
 800f8c6:	e00b      	b.n	800f8e0 <_rclc_execute.part.0+0x1e0>
 800f8c8:	6863      	ldr	r3, [r4, #4]
 800f8ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f8cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800f8ce:	6a1e      	ldr	r6, [r3, #32]
 800f8d0:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800f8d4:	47b0      	blx	r6
 800f8d6:	6860      	ldr	r0, [r4, #4]
 800f8d8:	4629      	mov	r1, r5
 800f8da:	f009 f855 	bl	8018988 <rclc_action_remove_used_goal_handle>
 800f8de:	6860      	ldr	r0, [r4, #4]
 800f8e0:	f009 f8da 	bl	8018a98 <rclc_action_find_first_handle_with_result_response>
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	2800      	cmp	r0, #0
 800f8e8:	d1ee      	bne.n	800f8c8 <_rclc_execute.part.0+0x1c8>
 800f8ea:	e76d      	b.n	800f7c8 <_rclc_execute.part.0+0xc8>
 800f8ec:	6860      	ldr	r0, [r4, #4]
 800f8ee:	f880 5020 	strb.w	r5, [r0, #32]
 800f8f2:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f43f af66 	beq.w	800f7c8 <_rclc_execute.part.0+0xc8>
 800f8fc:	68c5      	ldr	r5, [r0, #12]
 800f8fe:	b1b5      	cbz	r5, 800f92e <_rclc_execute.part.0+0x22e>
 800f900:	2602      	movs	r6, #2
 800f902:	e001      	b.n	800f908 <_rclc_execute.part.0+0x208>
 800f904:	682d      	ldr	r5, [r5, #0]
 800f906:	b195      	cbz	r5, 800f92e <_rclc_execute.part.0+0x22e>
 800f908:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800f90c:	2b03      	cmp	r3, #3
 800f90e:	d1f9      	bne.n	800f904 <_rclc_execute.part.0+0x204>
 800f910:	69c3      	ldr	r3, [r0, #28]
 800f912:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f914:	4628      	mov	r0, r5
 800f916:	4798      	blx	r3
 800f918:	4603      	mov	r3, r0
 800f91a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800f91e:	4628      	mov	r0, r5
 800f920:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f924:	b163      	cbz	r3, 800f940 <_rclc_execute.part.0+0x240>
 800f926:	f009 f8e3 	bl	8018af0 <rclc_action_server_goal_cancel_accept>
 800f92a:	6860      	ldr	r0, [r4, #4]
 800f92c:	e7ea      	b.n	800f904 <_rclc_execute.part.0+0x204>
 800f92e:	2300      	movs	r3, #0
 800f930:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800f934:	4618      	mov	r0, r3
 800f936:	e739      	b.n	800f7ac <_rclc_execute.part.0+0xac>
 800f938:	4628      	mov	r0, r5
 800f93a:	4798      	blx	r3
 800f93c:	4628      	mov	r0, r5
 800f93e:	e735      	b.n	800f7ac <_rclc_execute.part.0+0xac>
 800f940:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800f942:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f946:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800f94a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f94e:	6860      	ldr	r0, [r4, #4]
 800f950:	2101      	movs	r1, #1
 800f952:	f009 f8f9 	bl	8018b48 <rclc_action_server_goal_cancel_reject>
 800f956:	722e      	strb	r6, [r5, #8]
 800f958:	6860      	ldr	r0, [r4, #4]
 800f95a:	e7d3      	b.n	800f904 <_rclc_execute.part.0+0x204>
 800f95c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800f95e:	6880      	ldr	r0, [r0, #8]
 800f960:	4798      	blx	r3
 800f962:	f104 0110 	add.w	r1, r4, #16
 800f966:	e6e7      	b.n	800f738 <_rclc_execute.part.0+0x38>
 800f968:	f100 0110 	add.w	r1, r0, #16
 800f96c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f96e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800f970:	6880      	ldr	r0, [r0, #8]
 800f972:	9105      	str	r1, [sp, #20]
 800f974:	4798      	blx	r3
 800f976:	9905      	ldr	r1, [sp, #20]
 800f978:	e6de      	b.n	800f738 <_rclc_execute.part.0+0x38>
 800f97a:	2001      	movs	r0, #1
 800f97c:	e716      	b.n	800f7ac <_rclc_execute.part.0+0xac>
 800f97e:	bf00      	nop

0800f980 <rclc_executor_trigger_any>:
 800f980:	2800      	cmp	r0, #0
 800f982:	d03f      	beq.n	800fa04 <rclc_executor_trigger_any+0x84>
 800f984:	2900      	cmp	r1, #0
 800f986:	d03e      	beq.n	800fa06 <rclc_executor_trigger_any+0x86>
 800f988:	4603      	mov	r3, r0
 800f98a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800f98e:	2200      	movs	r2, #0
 800f990:	2800      	cmp	r0, #0
 800f992:	d037      	beq.n	800fa04 <rclc_executor_trigger_any+0x84>
 800f994:	b430      	push	{r4, r5}
 800f996:	f893 c000 	ldrb.w	ip, [r3]
 800f99a:	f1bc 0f08 	cmp.w	ip, #8
 800f99e:	d11e      	bne.n	800f9de <rclc_executor_trigger_any+0x5e>
 800f9a0:	685c      	ldr	r4, [r3, #4]
 800f9a2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800f9a4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800f9a8:	d105      	bne.n	800f9b6 <rclc_executor_trigger_any+0x36>
 800f9aa:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800f9ae:	b910      	cbnz	r0, 800f9b6 <rclc_executor_trigger_any+0x36>
 800f9b0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800f9b4:	b128      	cbz	r0, 800f9c2 <rclc_executor_trigger_any+0x42>
 800f9b6:	bc30      	pop	{r4, r5}
 800f9b8:	4770      	bx	lr
 800f9ba:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d1f9      	bne.n	800f9b6 <rclc_executor_trigger_any+0x36>
 800f9c2:	3201      	adds	r2, #1
 800f9c4:	4291      	cmp	r1, r2
 800f9c6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f9ca:	d018      	beq.n	800f9fe <rclc_executor_trigger_any+0x7e>
 800f9cc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	d0f0      	beq.n	800f9b6 <rclc_executor_trigger_any+0x36>
 800f9d4:	f893 c000 	ldrb.w	ip, [r3]
 800f9d8:	f1bc 0f08 	cmp.w	ip, #8
 800f9dc:	d0e0      	beq.n	800f9a0 <rclc_executor_trigger_any+0x20>
 800f9de:	f1bc 0f09 	cmp.w	ip, #9
 800f9e2:	d1ea      	bne.n	800f9ba <rclc_executor_trigger_any+0x3a>
 800f9e4:	685c      	ldr	r4, [r3, #4]
 800f9e6:	6a25      	ldr	r5, [r4, #32]
 800f9e8:	2d00      	cmp	r5, #0
 800f9ea:	d1e4      	bne.n	800f9b6 <rclc_executor_trigger_any+0x36>
 800f9ec:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d1e0      	bne.n	800f9b6 <rclc_executor_trigger_any+0x36>
 800f9f4:	3201      	adds	r2, #1
 800f9f6:	4291      	cmp	r1, r2
 800f9f8:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800f9fc:	d1e6      	bne.n	800f9cc <rclc_executor_trigger_any+0x4c>
 800f9fe:	2000      	movs	r0, #0
 800fa00:	bc30      	pop	{r4, r5}
 800fa02:	4770      	bx	lr
 800fa04:	4770      	bx	lr
 800fa06:	4608      	mov	r0, r1
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	0000      	movs	r0, r0
	...

0800fa10 <rclc_executor_init>:
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d05f      	beq.n	800fad4 <rclc_executor_init+0xc4>
 800fa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa18:	460c      	mov	r4, r1
 800fa1a:	b0b0      	sub	sp, #192	@ 0xc0
 800fa1c:	2900      	cmp	r1, #0
 800fa1e:	d051      	beq.n	800fac4 <rclc_executor_init+0xb4>
 800fa20:	4605      	mov	r5, r0
 800fa22:	4618      	mov	r0, r3
 800fa24:	4616      	mov	r6, r2
 800fa26:	461f      	mov	r7, r3
 800fa28:	f000 fc8e 	bl	8010348 <rcutils_allocator_is_valid>
 800fa2c:	2800      	cmp	r0, #0
 800fa2e:	d049      	beq.n	800fac4 <rclc_executor_init+0xb4>
 800fa30:	2e00      	cmp	r6, #0
 800fa32:	d047      	beq.n	800fac4 <rclc_executor_init+0xb4>
 800fa34:	492c      	ldr	r1, [pc, #176]	@ (800fae8 <rclc_executor_init+0xd8>)
 800fa36:	2288      	movs	r2, #136	@ 0x88
 800fa38:	a80e      	add	r0, sp, #56	@ 0x38
 800fa3a:	f00c fe20 	bl	801c67e <memcpy>
 800fa3e:	a90e      	add	r1, sp, #56	@ 0x38
 800fa40:	2288      	movs	r2, #136	@ 0x88
 800fa42:	4628      	mov	r0, r5
 800fa44:	f00c fe1b 	bl	801c67e <memcpy>
 800fa48:	602c      	str	r4, [r5, #0]
 800fa4a:	4668      	mov	r0, sp
 800fa4c:	60ae      	str	r6, [r5, #8]
 800fa4e:	466c      	mov	r4, sp
 800fa50:	f007 fd46 	bl	80174e0 <rcl_get_zero_initialized_wait_set>
 800fa54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa56:	f105 0c14 	add.w	ip, r5, #20
 800fa5a:	f8d7 8000 	ldr.w	r8, [r7]
 800fa5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa6e:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800fae0 <rclc_executor_init+0xd0>
 800fa72:	6823      	ldr	r3, [r4, #0]
 800fa74:	f8cc 3000 	str.w	r3, [ip]
 800fa78:	6939      	ldr	r1, [r7, #16]
 800fa7a:	612f      	str	r7, [r5, #16]
 800fa7c:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800fa80:	01b0      	lsls	r0, r6, #6
 800fa82:	47c0      	blx	r8
 800fa84:	6068      	str	r0, [r5, #4]
 800fa86:	b338      	cbz	r0, 800fad8 <rclc_executor_init+0xc8>
 800fa88:	2400      	movs	r4, #0
 800fa8a:	e000      	b.n	800fa8e <rclc_executor_init+0x7e>
 800fa8c:	6868      	ldr	r0, [r5, #4]
 800fa8e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800fa92:	4631      	mov	r1, r6
 800fa94:	3401      	adds	r4, #1
 800fa96:	f000 facb 	bl	8010030 <rclc_executor_handle_init>
 800fa9a:	42a6      	cmp	r6, r4
 800fa9c:	d1f6      	bne.n	800fa8c <rclc_executor_init+0x7c>
 800fa9e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800faa2:	f000 fab9 	bl	8010018 <rclc_executor_handle_counters_zero_init>
 800faa6:	4a11      	ldr	r2, [pc, #68]	@ (800faec <rclc_executor_init+0xdc>)
 800faa8:	686b      	ldr	r3, [r5, #4]
 800faaa:	2000      	movs	r0, #0
 800faac:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800fab0:	b163      	cbz	r3, 800facc <rclc_executor_init+0xbc>
 800fab2:	692b      	ldr	r3, [r5, #16]
 800fab4:	b153      	cbz	r3, 800facc <rclc_executor_init+0xbc>
 800fab6:	68ab      	ldr	r3, [r5, #8]
 800fab8:	b143      	cbz	r3, 800facc <rclc_executor_init+0xbc>
 800faba:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800fabe:	b030      	add	sp, #192	@ 0xc0
 800fac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac4:	200b      	movs	r0, #11
 800fac6:	b030      	add	sp, #192	@ 0xc0
 800fac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800facc:	4618      	mov	r0, r3
 800face:	b030      	add	sp, #192	@ 0xc0
 800fad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fad4:	200b      	movs	r0, #11
 800fad6:	4770      	bx	lr
 800fad8:	200a      	movs	r0, #10
 800fada:	e7f4      	b.n	800fac6 <rclc_executor_init+0xb6>
 800fadc:	f3af 8000 	nop.w
 800fae0:	3b9aca00 	.word	0x3b9aca00
 800fae4:	00000000 	.word	0x00000000
 800fae8:	0801de68 	.word	0x0801de68
 800faec:	0800f981 	.word	0x0800f981

0800faf0 <rclc_executor_fini>:
 800faf0:	b308      	cbz	r0, 800fb36 <rclc_executor_fini+0x46>
 800faf2:	b538      	push	{r3, r4, r5, lr}
 800faf4:	4604      	mov	r4, r0
 800faf6:	6840      	ldr	r0, [r0, #4]
 800faf8:	b1d8      	cbz	r0, 800fb32 <rclc_executor_fini+0x42>
 800fafa:	6923      	ldr	r3, [r4, #16]
 800fafc:	b1cb      	cbz	r3, 800fb32 <rclc_executor_fini+0x42>
 800fafe:	68a2      	ldr	r2, [r4, #8]
 800fb00:	b1ba      	cbz	r2, 800fb32 <rclc_executor_fini+0x42>
 800fb02:	6919      	ldr	r1, [r3, #16]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	4798      	blx	r3
 800fb08:	2300      	movs	r3, #0
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	2100      	movs	r1, #0
 800fb0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fb12:	6063      	str	r3, [r4, #4]
 800fb14:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800fb18:	f104 0514 	add.w	r5, r4, #20
 800fb1c:	f000 fa7c 	bl	8010018 <rclc_executor_handle_counters_zero_init>
 800fb20:	4628      	mov	r0, r5
 800fb22:	f007 fcf1 	bl	8017508 <rcl_wait_set_is_valid>
 800fb26:	b940      	cbnz	r0, 800fb3a <rclc_executor_fini+0x4a>
 800fb28:	a309      	add	r3, pc, #36	@ (adr r3, 800fb50 <rclc_executor_fini+0x60>)
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	e9c4 231a 	strd	r2, r3, [r4, #104]	@ 0x68
 800fb32:	2000      	movs	r0, #0
 800fb34:	bd38      	pop	{r3, r4, r5, pc}
 800fb36:	2000      	movs	r0, #0
 800fb38:	4770      	bx	lr
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f007 fcea 	bl	8017514 <rcl_wait_set_fini>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d0f1      	beq.n	800fb28 <rclc_executor_fini+0x38>
 800fb44:	f000 fce0 	bl	8010508 <rcutils_reset_error>
 800fb48:	e7ee      	b.n	800fb28 <rclc_executor_fini+0x38>
 800fb4a:	bf00      	nop
 800fb4c:	f3af 8000 	nop.w
 800fb50:	3b9aca00 	.word	0x3b9aca00
 800fb54:	00000000 	.word	0x00000000

0800fb58 <rclc_executor_add_subscription>:
 800fb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800fb5e:	b338      	cbz	r0, 800fbb0 <rclc_executor_add_subscription+0x58>
 800fb60:	b331      	cbz	r1, 800fbb0 <rclc_executor_add_subscription+0x58>
 800fb62:	b32a      	cbz	r2, 800fbb0 <rclc_executor_add_subscription+0x58>
 800fb64:	b323      	cbz	r3, 800fbb0 <rclc_executor_add_subscription+0x58>
 800fb66:	4604      	mov	r4, r0
 800fb68:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800fb6c:	42a8      	cmp	r0, r5
 800fb6e:	d301      	bcc.n	800fb74 <rclc_executor_add_subscription+0x1c>
 800fb70:	2001      	movs	r0, #1
 800fb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb74:	6866      	ldr	r6, [r4, #4]
 800fb76:	0187      	lsls	r7, r0, #6
 800fb78:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800fb7c:	2500      	movs	r5, #0
 800fb7e:	55f5      	strb	r5, [r6, r7]
 800fb80:	3001      	adds	r0, #1
 800fb82:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800fb86:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800fb8a:	2301      	movs	r3, #1
 800fb8c:	f104 0514 	add.w	r5, r4, #20
 800fb90:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800fb94:	f88c e001 	strb.w	lr, [ip, #1]
 800fb98:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800fb9c:	60e0      	str	r0, [r4, #12]
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f007 fcb2 	bl	8017508 <rcl_wait_set_is_valid>
 800fba4:	b930      	cbnz	r0, 800fbb4 <rclc_executor_add_subscription+0x5c>
 800fba6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800fba8:	3301      	adds	r3, #1
 800fbaa:	2000      	movs	r0, #0
 800fbac:	64a3      	str	r3, [r4, #72]	@ 0x48
 800fbae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb0:	200b      	movs	r0, #11
 800fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb4:	4628      	mov	r0, r5
 800fbb6:	f007 fcad 	bl	8017514 <rcl_wait_set_fini>
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	d0f3      	beq.n	800fba6 <rclc_executor_add_subscription+0x4e>
 800fbbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbc0 <rclc_executor_add_timer>:
 800fbc0:	b300      	cbz	r0, 800fc04 <rclc_executor_add_timer+0x44>
 800fbc2:	b1f9      	cbz	r1, 800fc04 <rclc_executor_add_timer+0x44>
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	4604      	mov	r4, r0
 800fbce:	d301      	bcc.n	800fbd4 <rclc_executor_add_timer+0x14>
 800fbd0:	2001      	movs	r0, #1
 800fbd2:	bd38      	pop	{r3, r4, r5, pc}
 800fbd4:	6840      	ldr	r0, [r0, #4]
 800fbd6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800fbda:	019d      	lsls	r5, r3, #6
 800fbdc:	6051      	str	r1, [r2, #4]
 800fbde:	2102      	movs	r1, #2
 800fbe0:	5341      	strh	r1, [r0, r5]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	f104 0514 	add.w	r5, r4, #20
 800fbec:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800fbee:	8711      	strh	r1, [r2, #56]	@ 0x38
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	60e3      	str	r3, [r4, #12]
 800fbf4:	f007 fc88 	bl	8017508 <rcl_wait_set_is_valid>
 800fbf8:	b930      	cbnz	r0, 800fc08 <rclc_executor_add_timer+0x48>
 800fbfa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	2000      	movs	r0, #0
 800fc00:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800fc02:	bd38      	pop	{r3, r4, r5, pc}
 800fc04:	200b      	movs	r0, #11
 800fc06:	4770      	bx	lr
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f007 fc83 	bl	8017514 <rcl_wait_set_fini>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d0f3      	beq.n	800fbfa <rclc_executor_add_timer+0x3a>
 800fc12:	bd38      	pop	{r3, r4, r5, pc}

0800fc14 <rclc_executor_prepare>:
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d044      	beq.n	800fca2 <rclc_executor_prepare+0x8e>
 800fc18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc1a:	f100 0514 	add.w	r5, r0, #20
 800fc1e:	b09b      	sub	sp, #108	@ 0x6c
 800fc20:	4604      	mov	r4, r0
 800fc22:	4628      	mov	r0, r5
 800fc24:	f007 fc70 	bl	8017508 <rcl_wait_set_is_valid>
 800fc28:	b110      	cbz	r0, 800fc30 <rclc_executor_prepare+0x1c>
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	b01b      	add	sp, #108	@ 0x6c
 800fc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc30:	4628      	mov	r0, r5
 800fc32:	f007 fc6f 	bl	8017514 <rcl_wait_set_fini>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d130      	bne.n	800fc9c <rclc_executor_prepare+0x88>
 800fc3a:	a80c      	add	r0, sp, #48	@ 0x30
 800fc3c:	f007 fc50 	bl	80174e0 <rcl_get_zero_initialized_wait_set>
 800fc40:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800fc44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc48:	46ae      	mov	lr, r5
 800fc4a:	6927      	ldr	r7, [r4, #16]
 800fc4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fc60:	f8dc 3000 	ldr.w	r3, [ip]
 800fc64:	f8ce 3000 	str.w	r3, [lr]
 800fc68:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fc6a:	ae04      	add	r6, sp, #16
 800fc6c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	6822      	ldr	r2, [r4, #0]
 800fc72:	6033      	str	r3, [r6, #0]
 800fc74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc76:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800fc78:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800fc7c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800fc80:	e9cd 2100 	strd	r2, r1, [sp]
 800fc84:	4628      	mov	r0, r5
 800fc86:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800fc88:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fc8a:	f007 ff41 	bl	8017b10 <rcl_wait_set_init>
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d0cc      	beq.n	800fc2c <rclc_executor_prepare+0x18>
 800fc92:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fc94:	f000 fc38 	bl	8010508 <rcutils_reset_error>
 800fc98:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fc9a:	e7c7      	b.n	800fc2c <rclc_executor_prepare+0x18>
 800fc9c:	f000 fc34 	bl	8010508 <rcutils_reset_error>
 800fca0:	e7cb      	b.n	800fc3a <rclc_executor_prepare+0x26>
 800fca2:	200b      	movs	r0, #11
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop

0800fca8 <rclc_executor_spin_some.part.0>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	f100 0614 	add.w	r6, r0, #20
 800fcb0:	b083      	sub	sp, #12
 800fcb2:	4691      	mov	r9, r2
 800fcb4:	4698      	mov	r8, r3
 800fcb6:	4605      	mov	r5, r0
 800fcb8:	f7ff ffac 	bl	800fc14 <rclc_executor_prepare>
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	f007 fcf5 	bl	80176ac <rcl_wait_set_clear>
 800fcc2:	4607      	mov	r7, r0
 800fcc4:	2800      	cmp	r0, #0
 800fcc6:	f040 80ed 	bne.w	800fea4 <rclc_executor_spin_some.part.0+0x1fc>
 800fcca:	68ab      	ldr	r3, [r5, #8]
 800fccc:	4604      	mov	r4, r0
 800fcce:	b303      	cbz	r3, 800fd12 <rclc_executor_spin_some.part.0+0x6a>
 800fcd0:	6869      	ldr	r1, [r5, #4]
 800fcd2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800fcd6:	01a2      	lsls	r2, r4, #6
 800fcd8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800fcdc:	b1cb      	cbz	r3, 800fd12 <rclc_executor_spin_some.part.0+0x6a>
 800fcde:	5c8b      	ldrb	r3, [r1, r2]
 800fce0:	2b0a      	cmp	r3, #10
 800fce2:	f200 80d8 	bhi.w	800fe96 <rclc_executor_spin_some.part.0+0x1ee>
 800fce6:	e8df f003 	tbb	[pc, r3]
 800fcea:	9c9c      	.short	0x9c9c
 800fcec:	068c8ca7 	.word	0x068c8ca7
 800fcf0:	bdc90606 	.word	0xbdc90606
 800fcf4:	b2          	.byte	0xb2
 800fcf5:	00          	.byte	0x00
 800fcf6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fcfa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f008 f81c 	bl	8017d3c <rcl_wait_set_add_service>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	f040 8086 	bne.w	800fe16 <rclc_executor_spin_some.part.0+0x16e>
 800fd0a:	68ab      	ldr	r3, [r5, #8]
 800fd0c:	3401      	adds	r4, #1
 800fd0e:	429c      	cmp	r4, r3
 800fd10:	d3de      	bcc.n	800fcd0 <rclc_executor_spin_some.part.0+0x28>
 800fd12:	4643      	mov	r3, r8
 800fd14:	464a      	mov	r2, r9
 800fd16:	4630      	mov	r0, r6
 800fd18:	f008 f83e 	bl	8017d98 <rcl_wait>
 800fd1c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	f000 80c7 	beq.w	800feb4 <rclc_executor_spin_some.part.0+0x20c>
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	f040 80b5 	bne.w	800fe96 <rclc_executor_spin_some.part.0+0x1ee>
 800fd2c:	68ab      	ldr	r3, [r5, #8]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f000 8159 	beq.w	800ffe6 <rclc_executor_spin_some.part.0+0x33e>
 800fd34:	2400      	movs	r4, #0
 800fd36:	46a0      	mov	r8, r4
 800fd38:	f240 1991 	movw	r9, #401	@ 0x191
 800fd3c:	e00a      	b.n	800fd54 <rclc_executor_spin_some.part.0+0xac>
 800fd3e:	f7ff fb1d 	bl	800f37c <_rclc_check_for_new_data>
 800fd42:	4604      	mov	r4, r0
 800fd44:	b110      	cbz	r0, 800fd4c <rclc_executor_spin_some.part.0+0xa4>
 800fd46:	4548      	cmp	r0, r9
 800fd48:	f040 80b2 	bne.w	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fd4c:	68ab      	ldr	r3, [r5, #8]
 800fd4e:	4598      	cmp	r8, r3
 800fd50:	f080 8126 	bcs.w	800ffa0 <rclc_executor_spin_some.part.0+0x2f8>
 800fd54:	686a      	ldr	r2, [r5, #4]
 800fd56:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800fd5a:	4631      	mov	r1, r6
 800fd5c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800fd60:	f108 0801 	add.w	r8, r8, #1
 800fd64:	f1bc 0f00 	cmp.w	ip, #0
 800fd68:	d1e9      	bne.n	800fd3e <rclc_executor_spin_some.part.0+0x96>
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800fd72:	4798      	blx	r3
 800fd74:	2800      	cmp	r0, #0
 800fd76:	f000 809b 	beq.w	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fd7a:	68ab      	ldr	r3, [r5, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	f000 8097 	beq.w	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fd82:	f04f 0800 	mov.w	r8, #0
 800fd86:	f240 1991 	movw	r9, #401	@ 0x191
 800fd8a:	e009      	b.n	800fda0 <rclc_executor_spin_some.part.0+0xf8>
 800fd8c:	f7ff fb44 	bl	800f418 <_rclc_take_new_data>
 800fd90:	4604      	mov	r4, r0
 800fd92:	b110      	cbz	r0, 800fd9a <rclc_executor_spin_some.part.0+0xf2>
 800fd94:	4548      	cmp	r0, r9
 800fd96:	f040 808b 	bne.w	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fd9a:	68ab      	ldr	r3, [r5, #8]
 800fd9c:	4598      	cmp	r8, r3
 800fd9e:	d209      	bcs.n	800fdb4 <rclc_executor_spin_some.part.0+0x10c>
 800fda0:	6868      	ldr	r0, [r5, #4]
 800fda2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800fda6:	4631      	mov	r1, r6
 800fda8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800fdac:	f108 0801 	add.w	r8, r8, #1
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	d1eb      	bne.n	800fd8c <rclc_executor_spin_some.part.0+0xe4>
 800fdb4:	2600      	movs	r6, #0
 800fdb6:	b97b      	cbnz	r3, 800fdd8 <rclc_executor_spin_some.part.0+0x130>
 800fdb8:	e07a      	b.n	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fdba:	f812 200c 	ldrb.w	r2, [r2, ip]
 800fdbe:	2a08      	cmp	r2, #8
 800fdc0:	f000 80fd 	beq.w	800ffbe <rclc_executor_spin_some.part.0+0x316>
 800fdc4:	2a09      	cmp	r2, #9
 800fdc6:	f000 80ef 	beq.w	800ffa8 <rclc_executor_spin_some.part.0+0x300>
 800fdca:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800fdce:	b98a      	cbnz	r2, 800fdf4 <rclc_executor_spin_some.part.0+0x14c>
 800fdd0:	3601      	adds	r6, #1
 800fdd2:	429e      	cmp	r6, r3
 800fdd4:	d262      	bcs.n	800fe9c <rclc_executor_spin_some.part.0+0x1f4>
 800fdd6:	2400      	movs	r4, #0
 800fdd8:	686a      	ldr	r2, [r5, #4]
 800fdda:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800fdde:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800fde2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800fde6:	2900      	cmp	r1, #0
 800fde8:	d062      	beq.n	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fdea:	7841      	ldrb	r1, [r0, #1]
 800fdec:	2900      	cmp	r1, #0
 800fdee:	d0e4      	beq.n	800fdba <rclc_executor_spin_some.part.0+0x112>
 800fdf0:	2901      	cmp	r1, #1
 800fdf2:	d1ed      	bne.n	800fdd0 <rclc_executor_spin_some.part.0+0x128>
 800fdf4:	f7ff fc84 	bl	800f700 <_rclc_execute.part.0>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	f040 80b6 	bne.w	800ff6a <rclc_executor_spin_some.part.0+0x2c2>
 800fdfe:	68ab      	ldr	r3, [r5, #8]
 800fe00:	e7e6      	b.n	800fdd0 <rclc_executor_spin_some.part.0+0x128>
 800fe02:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe06:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe0a:	4630      	mov	r0, r6
 800fe0c:	f007 ff6a 	bl	8017ce4 <rcl_wait_set_add_client>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	f43f af7a 	beq.w	800fd0a <rclc_executor_spin_some.part.0+0x62>
 800fe16:	9001      	str	r0, [sp, #4]
 800fe18:	f000 fb76 	bl	8010508 <rcutils_reset_error>
 800fe1c:	9801      	ldr	r0, [sp, #4]
 800fe1e:	4607      	mov	r7, r0
 800fe20:	e03c      	b.n	800fe9c <rclc_executor_spin_some.part.0+0x1f4>
 800fe22:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe26:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f007 fc12 	bl	8017654 <rcl_wait_set_add_subscription>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	f43f af6a 	beq.w	800fd0a <rclc_executor_spin_some.part.0+0x62>
 800fe36:	e7ee      	b.n	800fe16 <rclc_executor_spin_some.part.0+0x16e>
 800fe38:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe3c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe40:	4630      	mov	r0, r6
 800fe42:	f007 ff1f 	bl	8017c84 <rcl_wait_set_add_timer>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	f43f af5f 	beq.w	800fd0a <rclc_executor_spin_some.part.0+0x62>
 800fe4c:	e7e3      	b.n	800fe16 <rclc_executor_spin_some.part.0+0x16e>
 800fe4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe52:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe56:	4630      	mov	r0, r6
 800fe58:	f007 fee8 	bl	8017c2c <rcl_wait_set_add_guard_condition>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f43f af54 	beq.w	800fd0a <rclc_executor_spin_some.part.0+0x62>
 800fe62:	e7d8      	b.n	800fe16 <rclc_executor_spin_some.part.0+0x16e>
 800fe64:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe68:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe6c:	3110      	adds	r1, #16
 800fe6e:	4630      	mov	r0, r6
 800fe70:	f008 fc6a 	bl	8018748 <rcl_action_wait_set_add_action_server>
 800fe74:	2800      	cmp	r0, #0
 800fe76:	f43f af48 	beq.w	800fd0a <rclc_executor_spin_some.part.0+0x62>
 800fe7a:	e7cc      	b.n	800fe16 <rclc_executor_spin_some.part.0+0x16e>
 800fe7c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fe80:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800fe84:	3110      	adds	r1, #16
 800fe86:	2300      	movs	r3, #0
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f008 fa35 	bl	80182f8 <rcl_action_wait_set_add_action_client>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	f43f af3b 	beq.w	800fd0a <rclc_executor_spin_some.part.0+0x62>
 800fe94:	e7bf      	b.n	800fe16 <rclc_executor_spin_some.part.0+0x16e>
 800fe96:	f000 fb37 	bl	8010508 <rcutils_reset_error>
 800fe9a:	2701      	movs	r7, #1
 800fe9c:	4638      	mov	r0, r7
 800fe9e:	b003      	add	sp, #12
 800fea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea4:	f000 fb30 	bl	8010508 <rcutils_reset_error>
 800fea8:	4638      	mov	r0, r7
 800feaa:	b003      	add	sp, #12
 800feac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb0:	4627      	mov	r7, r4
 800feb2:	e7f3      	b.n	800fe9c <rclc_executor_spin_some.part.0+0x1f4>
 800feb4:	68ab      	ldr	r3, [r5, #8]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 8092 	beq.w	800ffe0 <rclc_executor_spin_some.part.0+0x338>
 800febc:	2400      	movs	r4, #0
 800febe:	46a0      	mov	r8, r4
 800fec0:	f240 1991 	movw	r9, #401	@ 0x191
 800fec4:	e008      	b.n	800fed8 <rclc_executor_spin_some.part.0+0x230>
 800fec6:	f7ff fa59 	bl	800f37c <_rclc_check_for_new_data>
 800feca:	4604      	mov	r4, r0
 800fecc:	b108      	cbz	r0, 800fed2 <rclc_executor_spin_some.part.0+0x22a>
 800fece:	4548      	cmp	r0, r9
 800fed0:	d1ee      	bne.n	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fed2:	68ab      	ldr	r3, [r5, #8]
 800fed4:	4598      	cmp	r8, r3
 800fed6:	d265      	bcs.n	800ffa4 <rclc_executor_spin_some.part.0+0x2fc>
 800fed8:	686a      	ldr	r2, [r5, #4]
 800feda:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800fede:	4631      	mov	r1, r6
 800fee0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800fee4:	f108 0801 	add.w	r8, r8, #1
 800fee8:	f1bc 0f00 	cmp.w	ip, #0
 800feec:	d1eb      	bne.n	800fec6 <rclc_executor_spin_some.part.0+0x21e>
 800feee:	4619      	mov	r1, r3
 800fef0:	4610      	mov	r0, r2
 800fef2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800fef6:	4798      	blx	r3
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d0d9      	beq.n	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800fefc:	68ab      	ldr	r3, [r5, #8]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d0d6      	beq.n	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800ff02:	f04f 0800 	mov.w	r8, #0
 800ff06:	f240 1991 	movw	r9, #401	@ 0x191
 800ff0a:	f240 2a59 	movw	sl, #601	@ 0x259
 800ff0e:	e00e      	b.n	800ff2e <rclc_executor_spin_some.part.0+0x286>
 800ff10:	f813 300b 	ldrb.w	r3, [r3, fp]
 800ff14:	2b08      	cmp	r3, #8
 800ff16:	d033      	beq.n	800ff80 <rclc_executor_spin_some.part.0+0x2d8>
 800ff18:	2b09      	cmp	r3, #9
 800ff1a:	d028      	beq.n	800ff6e <rclc_executor_spin_some.part.0+0x2c6>
 800ff1c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800ff20:	b9fb      	cbnz	r3, 800ff62 <rclc_executor_spin_some.part.0+0x2ba>
 800ff22:	68ab      	ldr	r3, [r5, #8]
 800ff24:	f108 0801 	add.w	r8, r8, #1
 800ff28:	4598      	cmp	r8, r3
 800ff2a:	d2b7      	bcs.n	800fe9c <rclc_executor_spin_some.part.0+0x1f4>
 800ff2c:	2400      	movs	r4, #0
 800ff2e:	6868      	ldr	r0, [r5, #4]
 800ff30:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ff34:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800ff38:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d0b7      	beq.n	800feb0 <rclc_executor_spin_some.part.0+0x208>
 800ff40:	4631      	mov	r1, r6
 800ff42:	f7ff fa69 	bl	800f418 <_rclc_take_new_data>
 800ff46:	b118      	cbz	r0, 800ff50 <rclc_executor_spin_some.part.0+0x2a8>
 800ff48:	4548      	cmp	r0, r9
 800ff4a:	d001      	beq.n	800ff50 <rclc_executor_spin_some.part.0+0x2a8>
 800ff4c:	4550      	cmp	r0, sl
 800ff4e:	d10c      	bne.n	800ff6a <rclc_executor_spin_some.part.0+0x2c2>
 800ff50:	686b      	ldr	r3, [r5, #4]
 800ff52:	eb13 000b 	adds.w	r0, r3, fp
 800ff56:	d021      	beq.n	800ff9c <rclc_executor_spin_some.part.0+0x2f4>
 800ff58:	7842      	ldrb	r2, [r0, #1]
 800ff5a:	2a00      	cmp	r2, #0
 800ff5c:	d0d8      	beq.n	800ff10 <rclc_executor_spin_some.part.0+0x268>
 800ff5e:	2a01      	cmp	r2, #1
 800ff60:	d1df      	bne.n	800ff22 <rclc_executor_spin_some.part.0+0x27a>
 800ff62:	f7ff fbcd 	bl	800f700 <_rclc_execute.part.0>
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d0db      	beq.n	800ff22 <rclc_executor_spin_some.part.0+0x27a>
 800ff6a:	4607      	mov	r7, r0
 800ff6c:	e796      	b.n	800fe9c <rclc_executor_spin_some.part.0+0x1f4>
 800ff6e:	6843      	ldr	r3, [r0, #4]
 800ff70:	6a1a      	ldr	r2, [r3, #32]
 800ff72:	2a00      	cmp	r2, #0
 800ff74:	d1f5      	bne.n	800ff62 <rclc_executor_spin_some.part.0+0x2ba>
 800ff76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d0d1      	beq.n	800ff22 <rclc_executor_spin_some.part.0+0x27a>
 800ff7e:	e7f0      	b.n	800ff62 <rclc_executor_spin_some.part.0+0x2ba>
 800ff80:	6843      	ldr	r3, [r0, #4]
 800ff82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ff84:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800ff88:	d1eb      	bne.n	800ff62 <rclc_executor_spin_some.part.0+0x2ba>
 800ff8a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800ff8e:	2a00      	cmp	r2, #0
 800ff90:	d1e7      	bne.n	800ff62 <rclc_executor_spin_some.part.0+0x2ba>
 800ff92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d0c3      	beq.n	800ff22 <rclc_executor_spin_some.part.0+0x27a>
 800ff9a:	e7e2      	b.n	800ff62 <rclc_executor_spin_some.part.0+0x2ba>
 800ff9c:	270b      	movs	r7, #11
 800ff9e:	e77d      	b.n	800fe9c <rclc_executor_spin_some.part.0+0x1f4>
 800ffa0:	686a      	ldr	r2, [r5, #4]
 800ffa2:	e6e2      	b.n	800fd6a <rclc_executor_spin_some.part.0+0xc2>
 800ffa4:	686a      	ldr	r2, [r5, #4]
 800ffa6:	e7a2      	b.n	800feee <rclc_executor_spin_some.part.0+0x246>
 800ffa8:	6842      	ldr	r2, [r0, #4]
 800ffaa:	6a11      	ldr	r1, [r2, #32]
 800ffac:	2900      	cmp	r1, #0
 800ffae:	f47f af21 	bne.w	800fdf4 <rclc_executor_spin_some.part.0+0x14c>
 800ffb2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800ffb6:	2a00      	cmp	r2, #0
 800ffb8:	f43f af0a 	beq.w	800fdd0 <rclc_executor_spin_some.part.0+0x128>
 800ffbc:	e71a      	b.n	800fdf4 <rclc_executor_spin_some.part.0+0x14c>
 800ffbe:	6842      	ldr	r2, [r0, #4]
 800ffc0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800ffc2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800ffc6:	f47f af15 	bne.w	800fdf4 <rclc_executor_spin_some.part.0+0x14c>
 800ffca:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800ffce:	2900      	cmp	r1, #0
 800ffd0:	f47f af10 	bne.w	800fdf4 <rclc_executor_spin_some.part.0+0x14c>
 800ffd4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800ffd8:	2a00      	cmp	r2, #0
 800ffda:	f43f aef9 	beq.w	800fdd0 <rclc_executor_spin_some.part.0+0x128>
 800ffde:	e709      	b.n	800fdf4 <rclc_executor_spin_some.part.0+0x14c>
 800ffe0:	686a      	ldr	r2, [r5, #4]
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	e783      	b.n	800feee <rclc_executor_spin_some.part.0+0x246>
 800ffe6:	686a      	ldr	r2, [r5, #4]
 800ffe8:	461c      	mov	r4, r3
 800ffea:	e6be      	b.n	800fd6a <rclc_executor_spin_some.part.0+0xc2>

0800ffec <rclc_executor_spin_some>:
 800ffec:	b190      	cbz	r0, 8010014 <rclc_executor_spin_some+0x28>
 800ffee:	b570      	push	{r4, r5, r6, lr}
 800fff0:	4604      	mov	r4, r0
 800fff2:	6800      	ldr	r0, [r0, #0]
 800fff4:	4616      	mov	r6, r2
 800fff6:	461d      	mov	r5, r3
 800fff8:	f7fe f910 	bl	800e21c <rcl_context_is_valid>
 800fffc:	b130      	cbz	r0, 801000c <rclc_executor_spin_some+0x20>
 800fffe:	4632      	mov	r2, r6
 8010000:	462b      	mov	r3, r5
 8010002:	4620      	mov	r0, r4
 8010004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010008:	f7ff be4e 	b.w	800fca8 <rclc_executor_spin_some.part.0>
 801000c:	f000 fa7c 	bl	8010508 <rcutils_reset_error>
 8010010:	2001      	movs	r0, #1
 8010012:	bd70      	pop	{r4, r5, r6, pc}
 8010014:	200b      	movs	r0, #11
 8010016:	4770      	bx	lr

08010018 <rclc_executor_handle_counters_zero_init>:
 8010018:	b130      	cbz	r0, 8010028 <rclc_executor_handle_counters_zero_init+0x10>
 801001a:	b508      	push	{r3, lr}
 801001c:	2220      	movs	r2, #32
 801001e:	2100      	movs	r1, #0
 8010020:	f00c fa64 	bl	801c4ec <memset>
 8010024:	2000      	movs	r0, #0
 8010026:	bd08      	pop	{r3, pc}
 8010028:	200b      	movs	r0, #11
 801002a:	4770      	bx	lr
 801002c:	0000      	movs	r0, r0
	...

08010030 <rclc_executor_handle_init>:
 8010030:	b168      	cbz	r0, 801004e <rclc_executor_handle_init+0x1e>
 8010032:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8010058 <rclc_executor_handle_init+0x28>
 8010036:	2300      	movs	r3, #0
 8010038:	220b      	movs	r2, #11
 801003a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 801003e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010042:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8010046:	8002      	strh	r2, [r0, #0]
 8010048:	8703      	strh	r3, [r0, #56]	@ 0x38
 801004a:	4618      	mov	r0, r3
 801004c:	4770      	bx	lr
 801004e:	200b      	movs	r0, #11
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop
 8010054:	f3af 8000 	nop.w
	...

08010060 <rclc_support_init_with_options>:
 8010060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010064:	b083      	sub	sp, #12
 8010066:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010068:	b340      	cbz	r0, 80100bc <rclc_support_init_with_options+0x5c>
 801006a:	461d      	mov	r5, r3
 801006c:	b333      	cbz	r3, 80100bc <rclc_support_init_with_options+0x5c>
 801006e:	b32e      	cbz	r6, 80100bc <rclc_support_init_with_options+0x5c>
 8010070:	46e9      	mov	r9, sp
 8010072:	4604      	mov	r4, r0
 8010074:	4648      	mov	r0, r9
 8010076:	460f      	mov	r7, r1
 8010078:	4690      	mov	r8, r2
 801007a:	f7fe f8c5 	bl	800e208 <rcl_get_zero_initialized_context>
 801007e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010082:	462a      	mov	r2, r5
 8010084:	e884 0003 	stmia.w	r4, {r0, r1}
 8010088:	4623      	mov	r3, r4
 801008a:	4641      	mov	r1, r8
 801008c:	4638      	mov	r0, r7
 801008e:	f006 fe5b 	bl	8016d48 <rcl_init>
 8010092:	4605      	mov	r5, r0
 8010094:	b960      	cbnz	r0, 80100b0 <rclc_support_init_with_options+0x50>
 8010096:	60a6      	str	r6, [r4, #8]
 8010098:	4632      	mov	r2, r6
 801009a:	f104 010c 	add.w	r1, r4, #12
 801009e:	2003      	movs	r0, #3
 80100a0:	f007 f8a8 	bl	80171f4 <rcl_clock_init>
 80100a4:	4605      	mov	r5, r0
 80100a6:	b918      	cbnz	r0, 80100b0 <rclc_support_init_with_options+0x50>
 80100a8:	4628      	mov	r0, r5
 80100aa:	b003      	add	sp, #12
 80100ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100b0:	f000 fa2a 	bl	8010508 <rcutils_reset_error>
 80100b4:	4628      	mov	r0, r5
 80100b6:	b003      	add	sp, #12
 80100b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100bc:	250b      	movs	r5, #11
 80100be:	4628      	mov	r0, r5
 80100c0:	b003      	add	sp, #12
 80100c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c6:	bf00      	nop

080100c8 <rclc_support_fini>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	b320      	cbz	r0, 8010116 <rclc_support_fini+0x4e>
 80100cc:	4604      	mov	r4, r0
 80100ce:	300c      	adds	r0, #12
 80100d0:	f007 f908 	bl	80172e4 <rcl_clock_fini>
 80100d4:	4605      	mov	r5, r0
 80100d6:	b948      	cbnz	r0, 80100ec <rclc_support_fini+0x24>
 80100d8:	4620      	mov	r0, r4
 80100da:	f006 ff23 	bl	8016f24 <rcl_shutdown>
 80100de:	b968      	cbnz	r0, 80100fc <rclc_support_fini+0x34>
 80100e0:	4620      	mov	r0, r4
 80100e2:	f7fe f907 	bl	800e2f4 <rcl_context_fini>
 80100e6:	b988      	cbnz	r0, 801010c <rclc_support_fini+0x44>
 80100e8:	4628      	mov	r0, r5
 80100ea:	bd38      	pop	{r3, r4, r5, pc}
 80100ec:	f000 fa0c 	bl	8010508 <rcutils_reset_error>
 80100f0:	4620      	mov	r0, r4
 80100f2:	2501      	movs	r5, #1
 80100f4:	f006 ff16 	bl	8016f24 <rcl_shutdown>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d0f1      	beq.n	80100e0 <rclc_support_fini+0x18>
 80100fc:	f000 fa04 	bl	8010508 <rcutils_reset_error>
 8010100:	4620      	mov	r0, r4
 8010102:	2501      	movs	r5, #1
 8010104:	f7fe f8f6 	bl	800e2f4 <rcl_context_fini>
 8010108:	2800      	cmp	r0, #0
 801010a:	d0ed      	beq.n	80100e8 <rclc_support_fini+0x20>
 801010c:	2501      	movs	r5, #1
 801010e:	f000 f9fb 	bl	8010508 <rcutils_reset_error>
 8010112:	4628      	mov	r0, r5
 8010114:	bd38      	pop	{r3, r4, r5, pc}
 8010116:	250b      	movs	r5, #11
 8010118:	4628      	mov	r0, r5
 801011a:	bd38      	pop	{r3, r4, r5, pc}

0801011c <rclc_node_init_default>:
 801011c:	b3b8      	cbz	r0, 801018e <rclc_node_init_default+0x72>
 801011e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010122:	460d      	mov	r5, r1
 8010124:	b0a1      	sub	sp, #132	@ 0x84
 8010126:	b329      	cbz	r1, 8010174 <rclc_node_init_default+0x58>
 8010128:	4616      	mov	r6, r2
 801012a:	b31a      	cbz	r2, 8010174 <rclc_node_init_default+0x58>
 801012c:	461f      	mov	r7, r3
 801012e:	b30b      	cbz	r3, 8010174 <rclc_node_init_default+0x58>
 8010130:	f10d 0810 	add.w	r8, sp, #16
 8010134:	4604      	mov	r4, r0
 8010136:	4640      	mov	r0, r8
 8010138:	f7fe f9f6 	bl	800e528 <rcl_get_zero_initialized_node>
 801013c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8010140:	f10d 0918 	add.w	r9, sp, #24
 8010144:	e884 0003 	stmia.w	r4, {r0, r1}
 8010148:	4648      	mov	r0, r9
 801014a:	f7fe fb97 	bl	800e87c <rcl_node_get_default_options>
 801014e:	4640      	mov	r0, r8
 8010150:	f7fe f9ea 	bl	800e528 <rcl_get_zero_initialized_node>
 8010154:	f8cd 9000 	str.w	r9, [sp]
 8010158:	e898 0003 	ldmia.w	r8, {r0, r1}
 801015c:	463b      	mov	r3, r7
 801015e:	e884 0003 	stmia.w	r4, {r0, r1}
 8010162:	4632      	mov	r2, r6
 8010164:	4629      	mov	r1, r5
 8010166:	4620      	mov	r0, r4
 8010168:	f7fe f9e8 	bl	800e53c <rcl_node_init>
 801016c:	b930      	cbnz	r0, 801017c <rclc_node_init_default+0x60>
 801016e:	b021      	add	sp, #132	@ 0x84
 8010170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010174:	200b      	movs	r0, #11
 8010176:	b021      	add	sp, #132	@ 0x84
 8010178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801017c:	9003      	str	r0, [sp, #12]
 801017e:	f000 f9c3 	bl	8010508 <rcutils_reset_error>
 8010182:	f000 f9c1 	bl	8010508 <rcutils_reset_error>
 8010186:	9803      	ldr	r0, [sp, #12]
 8010188:	b021      	add	sp, #132	@ 0x84
 801018a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801018e:	200b      	movs	r0, #11
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop

08010194 <rclc_publisher_init_default>:
 8010194:	b368      	cbz	r0, 80101f2 <rclc_publisher_init_default+0x5e>
 8010196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801019a:	460d      	mov	r5, r1
 801019c:	b0a0      	sub	sp, #128	@ 0x80
 801019e:	b321      	cbz	r1, 80101ea <rclc_publisher_init_default+0x56>
 80101a0:	4616      	mov	r6, r2
 80101a2:	b312      	cbz	r2, 80101ea <rclc_publisher_init_default+0x56>
 80101a4:	461f      	mov	r7, r3
 80101a6:	b303      	cbz	r3, 80101ea <rclc_publisher_init_default+0x56>
 80101a8:	4604      	mov	r4, r0
 80101aa:	f7fe fb93 	bl	800e8d4 <rcl_get_zero_initialized_publisher>
 80101ae:	f10d 0810 	add.w	r8, sp, #16
 80101b2:	6020      	str	r0, [r4, #0]
 80101b4:	4640      	mov	r0, r8
 80101b6:	f7fe fc55 	bl	800ea64 <rcl_publisher_get_default_options>
 80101ba:	490f      	ldr	r1, [pc, #60]	@ (80101f8 <rclc_publisher_init_default+0x64>)
 80101bc:	2250      	movs	r2, #80	@ 0x50
 80101be:	4640      	mov	r0, r8
 80101c0:	f00c fa5d 	bl	801c67e <memcpy>
 80101c4:	f8cd 8000 	str.w	r8, [sp]
 80101c8:	463b      	mov	r3, r7
 80101ca:	4632      	mov	r2, r6
 80101cc:	4629      	mov	r1, r5
 80101ce:	4620      	mov	r0, r4
 80101d0:	f7fe fb86 	bl	800e8e0 <rcl_publisher_init>
 80101d4:	b910      	cbnz	r0, 80101dc <rclc_publisher_init_default+0x48>
 80101d6:	b020      	add	sp, #128	@ 0x80
 80101d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101dc:	9003      	str	r0, [sp, #12]
 80101de:	f000 f993 	bl	8010508 <rcutils_reset_error>
 80101e2:	9803      	ldr	r0, [sp, #12]
 80101e4:	b020      	add	sp, #128	@ 0x80
 80101e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101ea:	200b      	movs	r0, #11
 80101ec:	b020      	add	sp, #128	@ 0x80
 80101ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f2:	200b      	movs	r0, #11
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	0801def0 	.word	0x0801def0

080101fc <rclc_subscription_init_default>:
 80101fc:	b368      	cbz	r0, 801025a <rclc_subscription_init_default+0x5e>
 80101fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010202:	460d      	mov	r5, r1
 8010204:	b0a0      	sub	sp, #128	@ 0x80
 8010206:	b321      	cbz	r1, 8010252 <rclc_subscription_init_default+0x56>
 8010208:	4616      	mov	r6, r2
 801020a:	b312      	cbz	r2, 8010252 <rclc_subscription_init_default+0x56>
 801020c:	461f      	mov	r7, r3
 801020e:	b303      	cbz	r3, 8010252 <rclc_subscription_init_default+0x56>
 8010210:	4604      	mov	r4, r0
 8010212:	f7fe fca1 	bl	800eb58 <rcl_get_zero_initialized_subscription>
 8010216:	f10d 0810 	add.w	r8, sp, #16
 801021a:	6020      	str	r0, [r4, #0]
 801021c:	4640      	mov	r0, r8
 801021e:	f7fe fd9d 	bl	800ed5c <rcl_subscription_get_default_options>
 8010222:	490f      	ldr	r1, [pc, #60]	@ (8010260 <rclc_subscription_init_default+0x64>)
 8010224:	2250      	movs	r2, #80	@ 0x50
 8010226:	4640      	mov	r0, r8
 8010228:	f00c fa29 	bl	801c67e <memcpy>
 801022c:	f8cd 8000 	str.w	r8, [sp]
 8010230:	463b      	mov	r3, r7
 8010232:	4632      	mov	r2, r6
 8010234:	4629      	mov	r1, r5
 8010236:	4620      	mov	r0, r4
 8010238:	f7fe fc94 	bl	800eb64 <rcl_subscription_init>
 801023c:	b910      	cbnz	r0, 8010244 <rclc_subscription_init_default+0x48>
 801023e:	b020      	add	sp, #128	@ 0x80
 8010240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010244:	9003      	str	r0, [sp, #12]
 8010246:	f000 f95f 	bl	8010508 <rcutils_reset_error>
 801024a:	9803      	ldr	r0, [sp, #12]
 801024c:	b020      	add	sp, #128	@ 0x80
 801024e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010252:	200b      	movs	r0, #11
 8010254:	b020      	add	sp, #128	@ 0x80
 8010256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025a:	200b      	movs	r0, #11
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	0801df40 	.word	0x0801df40

08010264 <rclc_timer_init_default>:
 8010264:	b360      	cbz	r0, 80102c0 <rclc_timer_init_default+0x5c>
 8010266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026a:	460e      	mov	r6, r1
 801026c:	b08a      	sub	sp, #40	@ 0x28
 801026e:	b319      	cbz	r1, 80102b8 <rclc_timer_init_default+0x54>
 8010270:	4690      	mov	r8, r2
 8010272:	461f      	mov	r7, r3
 8010274:	4605      	mov	r5, r0
 8010276:	f7fe fea1 	bl	800efbc <rcl_get_zero_initialized_timer>
 801027a:	68b4      	ldr	r4, [r6, #8]
 801027c:	6028      	str	r0, [r5, #0]
 801027e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010280:	f10d 0c0c 	add.w	ip, sp, #12
 8010284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010288:	6823      	ldr	r3, [r4, #0]
 801028a:	f8cc 3000 	str.w	r3, [ip]
 801028e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010290:	9302      	str	r3, [sp, #8]
 8010292:	e9cd 8700 	strd	r8, r7, [sp]
 8010296:	4628      	mov	r0, r5
 8010298:	4632      	mov	r2, r6
 801029a:	f106 010c 	add.w	r1, r6, #12
 801029e:	f7fe fe93 	bl	800efc8 <rcl_timer_init>
 80102a2:	b910      	cbnz	r0, 80102aa <rclc_timer_init_default+0x46>
 80102a4:	b00a      	add	sp, #40	@ 0x28
 80102a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102aa:	9009      	str	r0, [sp, #36]	@ 0x24
 80102ac:	f000 f92c 	bl	8010508 <rcutils_reset_error>
 80102b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102b2:	b00a      	add	sp, #40	@ 0x28
 80102b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b8:	200b      	movs	r0, #11
 80102ba:	b00a      	add	sp, #40	@ 0x28
 80102bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c0:	200b      	movs	r0, #11
 80102c2:	4770      	bx	lr

080102c4 <__default_zero_allocate>:
 80102c4:	f00b bc22 	b.w	801bb0c <calloc>

080102c8 <__default_reallocate>:
 80102c8:	f00b bdc0 	b.w	801be4c <realloc>

080102cc <__default_deallocate>:
 80102cc:	f00b bc9c 	b.w	801bc08 <free>

080102d0 <__default_allocate>:
 80102d0:	f00b bc92 	b.w	801bbf8 <malloc>

080102d4 <rcutils_get_zero_initialized_allocator>:
 80102d4:	b510      	push	{r4, lr}
 80102d6:	4c05      	ldr	r4, [pc, #20]	@ (80102ec <rcutils_get_zero_initialized_allocator+0x18>)
 80102d8:	4686      	mov	lr, r0
 80102da:	4684      	mov	ip, r0
 80102dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	f8cc 3000 	str.w	r3, [ip]
 80102e8:	4670      	mov	r0, lr
 80102ea:	bd10      	pop	{r4, pc}
 80102ec:	0801df90 	.word	0x0801df90

080102f0 <rcutils_set_default_allocator>:
 80102f0:	b1a8      	cbz	r0, 801031e <rcutils_set_default_allocator+0x2e>
 80102f2:	6802      	ldr	r2, [r0, #0]
 80102f4:	b1a2      	cbz	r2, 8010320 <rcutils_set_default_allocator+0x30>
 80102f6:	6841      	ldr	r1, [r0, #4]
 80102f8:	b1a1      	cbz	r1, 8010324 <rcutils_set_default_allocator+0x34>
 80102fa:	b410      	push	{r4}
 80102fc:	68c4      	ldr	r4, [r0, #12]
 80102fe:	b164      	cbz	r4, 801031a <rcutils_set_default_allocator+0x2a>
 8010300:	6880      	ldr	r0, [r0, #8]
 8010302:	b138      	cbz	r0, 8010314 <rcutils_set_default_allocator+0x24>
 8010304:	4b08      	ldr	r3, [pc, #32]	@ (8010328 <rcutils_set_default_allocator+0x38>)
 8010306:	601a      	str	r2, [r3, #0]
 8010308:	2200      	movs	r2, #0
 801030a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801030e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010312:	2001      	movs	r0, #1
 8010314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010318:	4770      	bx	lr
 801031a:	4620      	mov	r0, r4
 801031c:	e7fa      	b.n	8010314 <rcutils_set_default_allocator+0x24>
 801031e:	4770      	bx	lr
 8010320:	4610      	mov	r0, r2
 8010322:	4770      	bx	lr
 8010324:	4608      	mov	r0, r1
 8010326:	4770      	bx	lr
 8010328:	200002f8 	.word	0x200002f8

0801032c <rcutils_get_default_allocator>:
 801032c:	b510      	push	{r4, lr}
 801032e:	4c05      	ldr	r4, [pc, #20]	@ (8010344 <rcutils_get_default_allocator+0x18>)
 8010330:	4686      	mov	lr, r0
 8010332:	4684      	mov	ip, r0
 8010334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010336:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	f8cc 3000 	str.w	r3, [ip]
 8010340:	4670      	mov	r0, lr
 8010342:	bd10      	pop	{r4, pc}
 8010344:	200002f8 	.word	0x200002f8

08010348 <rcutils_allocator_is_valid>:
 8010348:	b158      	cbz	r0, 8010362 <rcutils_allocator_is_valid+0x1a>
 801034a:	6803      	ldr	r3, [r0, #0]
 801034c:	b143      	cbz	r3, 8010360 <rcutils_allocator_is_valid+0x18>
 801034e:	6843      	ldr	r3, [r0, #4]
 8010350:	b133      	cbz	r3, 8010360 <rcutils_allocator_is_valid+0x18>
 8010352:	68c3      	ldr	r3, [r0, #12]
 8010354:	b123      	cbz	r3, 8010360 <rcutils_allocator_is_valid+0x18>
 8010356:	6880      	ldr	r0, [r0, #8]
 8010358:	3800      	subs	r0, #0
 801035a:	bf18      	it	ne
 801035c:	2001      	movne	r0, #1
 801035e:	4770      	bx	lr
 8010360:	4618      	mov	r0, r3
 8010362:	4770      	bx	lr

08010364 <__atomic_load_8>:
 8010364:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8010368:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801036c:	4a15      	ldr	r2, [pc, #84]	@ (80103c4 <__atomic_load_8+0x60>)
 801036e:	4b16      	ldr	r3, [pc, #88]	@ (80103c8 <__atomic_load_8+0x64>)
 8010370:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8010374:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8010378:	fb02 f101 	mul.w	r1, r2, r1
 801037c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8010380:	fba3 2301 	umull	r2, r3, r3, r1
 8010384:	091b      	lsrs	r3, r3, #4
 8010386:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801038a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801038e:	b4d0      	push	{r4, r6, r7}
 8010390:	4c0e      	ldr	r4, [pc, #56]	@ (80103cc <__atomic_load_8+0x68>)
 8010392:	1ac9      	subs	r1, r1, r3
 8010394:	1862      	adds	r2, r4, r1
 8010396:	f04f 0c01 	mov.w	ip, #1
 801039a:	e8d2 3f4f 	ldrexb	r3, [r2]
 801039e:	e8c2 cf46 	strexb	r6, ip, [r2]
 80103a2:	2e00      	cmp	r6, #0
 80103a4:	d1f9      	bne.n	801039a <__atomic_load_8+0x36>
 80103a6:	f3bf 8f5b 	dmb	ish
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d1f4      	bne.n	801039a <__atomic_load_8+0x36>
 80103b0:	e9d0 6700 	ldrd	r6, r7, [r0]
 80103b4:	f3bf 8f5b 	dmb	ish
 80103b8:	5463      	strb	r3, [r4, r1]
 80103ba:	4630      	mov	r0, r6
 80103bc:	4639      	mov	r1, r7
 80103be:	bcd0      	pop	{r4, r6, r7}
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	27d4eb2d 	.word	0x27d4eb2d
 80103c8:	b21642c9 	.word	0xb21642c9
 80103cc:	2000d0d8 	.word	0x2000d0d8

080103d0 <__atomic_store_8>:
 80103d0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80103d4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80103d8:	b570      	push	{r4, r5, r6, lr}
 80103da:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80103de:	4c14      	ldr	r4, [pc, #80]	@ (8010430 <__atomic_store_8+0x60>)
 80103e0:	4d14      	ldr	r5, [pc, #80]	@ (8010434 <__atomic_store_8+0x64>)
 80103e2:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80103e6:	fb04 f101 	mul.w	r1, r4, r1
 80103ea:	4c13      	ldr	r4, [pc, #76]	@ (8010438 <__atomic_store_8+0x68>)
 80103ec:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80103f0:	fba4 4e01 	umull	r4, lr, r4, r1
 80103f4:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80103f8:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80103fc:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8010400:	eba1 0e0e 	sub.w	lr, r1, lr
 8010404:	eb05 0c0e 	add.w	ip, r5, lr
 8010408:	f04f 0401 	mov.w	r4, #1
 801040c:	e8dc 1f4f 	ldrexb	r1, [ip]
 8010410:	e8cc 4f46 	strexb	r6, r4, [ip]
 8010414:	2e00      	cmp	r6, #0
 8010416:	d1f9      	bne.n	801040c <__atomic_store_8+0x3c>
 8010418:	f3bf 8f5b 	dmb	ish
 801041c:	b2c9      	uxtb	r1, r1
 801041e:	2900      	cmp	r1, #0
 8010420:	d1f4      	bne.n	801040c <__atomic_store_8+0x3c>
 8010422:	e9c0 2300 	strd	r2, r3, [r0]
 8010426:	f3bf 8f5b 	dmb	ish
 801042a:	f805 100e 	strb.w	r1, [r5, lr]
 801042e:	bd70      	pop	{r4, r5, r6, pc}
 8010430:	27d4eb2d 	.word	0x27d4eb2d
 8010434:	2000d0d8 	.word	0x2000d0d8
 8010438:	b21642c9 	.word	0xb21642c9

0801043c <__atomic_exchange_8>:
 801043c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8010440:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8010444:	4916      	ldr	r1, [pc, #88]	@ (80104a0 <__atomic_exchange_8+0x64>)
 8010446:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801044a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801044e:	fb01 fc0c 	mul.w	ip, r1, ip
 8010452:	4914      	ldr	r1, [pc, #80]	@ (80104a4 <__atomic_exchange_8+0x68>)
 8010454:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8010458:	b570      	push	{r4, r5, r6, lr}
 801045a:	4605      	mov	r5, r0
 801045c:	fba1 010c 	umull	r0, r1, r1, ip
 8010460:	0909      	lsrs	r1, r1, #4
 8010462:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8010466:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801046a:	4e0f      	ldr	r6, [pc, #60]	@ (80104a8 <__atomic_exchange_8+0x6c>)
 801046c:	ebac 0c01 	sub.w	ip, ip, r1
 8010470:	eb06 010c 	add.w	r1, r6, ip
 8010474:	f04f 0e01 	mov.w	lr, #1
 8010478:	e8d1 4f4f 	ldrexb	r4, [r1]
 801047c:	e8c1 ef40 	strexb	r0, lr, [r1]
 8010480:	2800      	cmp	r0, #0
 8010482:	d1f9      	bne.n	8010478 <__atomic_exchange_8+0x3c>
 8010484:	f3bf 8f5b 	dmb	ish
 8010488:	b2e4      	uxtb	r4, r4
 801048a:	2c00      	cmp	r4, #0
 801048c:	d1f4      	bne.n	8010478 <__atomic_exchange_8+0x3c>
 801048e:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010492:	e9c5 2300 	strd	r2, r3, [r5]
 8010496:	f3bf 8f5b 	dmb	ish
 801049a:	f806 400c 	strb.w	r4, [r6, ip]
 801049e:	bd70      	pop	{r4, r5, r6, pc}
 80104a0:	27d4eb2d 	.word	0x27d4eb2d
 80104a4:	b21642c9 	.word	0xb21642c9
 80104a8:	2000d0d8 	.word	0x2000d0d8

080104ac <rcutils_get_env>:
 80104ac:	b168      	cbz	r0, 80104ca <rcutils_get_env+0x1e>
 80104ae:	b510      	push	{r4, lr}
 80104b0:	460c      	mov	r4, r1
 80104b2:	b129      	cbz	r1, 80104c0 <rcutils_get_env+0x14>
 80104b4:	f00b fb58 	bl	801bb68 <getenv>
 80104b8:	b120      	cbz	r0, 80104c4 <rcutils_get_env+0x18>
 80104ba:	6020      	str	r0, [r4, #0]
 80104bc:	2000      	movs	r0, #0
 80104be:	bd10      	pop	{r4, pc}
 80104c0:	4803      	ldr	r0, [pc, #12]	@ (80104d0 <rcutils_get_env+0x24>)
 80104c2:	bd10      	pop	{r4, pc}
 80104c4:	4b03      	ldr	r3, [pc, #12]	@ (80104d4 <rcutils_get_env+0x28>)
 80104c6:	6023      	str	r3, [r4, #0]
 80104c8:	bd10      	pop	{r4, pc}
 80104ca:	4803      	ldr	r0, [pc, #12]	@ (80104d8 <rcutils_get_env+0x2c>)
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	0801d6c8 	.word	0x0801d6c8
 80104d4:	0801dbf4 	.word	0x0801dbf4
 80104d8:	0801d6ac 	.word	0x0801d6ac

080104dc <rcutils_get_error_string>:
 80104dc:	4b06      	ldr	r3, [pc, #24]	@ (80104f8 <rcutils_get_error_string+0x1c>)
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	b13b      	cbz	r3, 80104f2 <rcutils_get_error_string+0x16>
 80104e2:	4b06      	ldr	r3, [pc, #24]	@ (80104fc <rcutils_get_error_string+0x20>)
 80104e4:	781a      	ldrb	r2, [r3, #0]
 80104e6:	b90a      	cbnz	r2, 80104ec <rcutils_get_error_string+0x10>
 80104e8:	2201      	movs	r2, #1
 80104ea:	701a      	strb	r2, [r3, #0]
 80104ec:	4b04      	ldr	r3, [pc, #16]	@ (8010500 <rcutils_get_error_string+0x24>)
 80104ee:	7818      	ldrb	r0, [r3, #0]
 80104f0:	4770      	bx	lr
 80104f2:	4b04      	ldr	r3, [pc, #16]	@ (8010504 <rcutils_get_error_string+0x28>)
 80104f4:	7818      	ldrb	r0, [r3, #0]
 80104f6:	4770      	bx	lr
 80104f8:	2000d0ef 	.word	0x2000d0ef
 80104fc:	2000d101 	.word	0x2000d101
 8010500:	2000d100 	.word	0x2000d100
 8010504:	0801d6e4 	.word	0x0801d6e4

08010508 <rcutils_reset_error>:
 8010508:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8010528 <rcutils_reset_error+0x20>
 801050c:	4a08      	ldr	r2, [pc, #32]	@ (8010530 <rcutils_reset_error+0x28>)
 801050e:	4809      	ldr	r0, [pc, #36]	@ (8010534 <rcutils_reset_error+0x2c>)
 8010510:	4909      	ldr	r1, [pc, #36]	@ (8010538 <rcutils_reset_error+0x30>)
 8010512:	2300      	movs	r3, #0
 8010514:	8013      	strh	r3, [r2, #0]
 8010516:	ed82 7b02 	vstr	d7, [r2, #8]
 801051a:	4a08      	ldr	r2, [pc, #32]	@ (801053c <rcutils_reset_error+0x34>)
 801051c:	7003      	strb	r3, [r0, #0]
 801051e:	700b      	strb	r3, [r1, #0]
 8010520:	7013      	strb	r3, [r2, #0]
 8010522:	4770      	bx	lr
 8010524:	f3af 8000 	nop.w
	...
 8010530:	2000d0f0 	.word	0x2000d0f0
 8010534:	2000d101 	.word	0x2000d101
 8010538:	2000d100 	.word	0x2000d100
 801053c:	2000d0ef 	.word	0x2000d0ef

08010540 <rcutils_format_string_limit>:
 8010540:	b40f      	push	{r0, r1, r2, r3}
 8010542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010544:	b083      	sub	sp, #12
 8010546:	ac08      	add	r4, sp, #32
 8010548:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801054a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801054e:	b34e      	cbz	r6, 80105a4 <rcutils_format_string_limit+0x64>
 8010550:	a808      	add	r0, sp, #32
 8010552:	f7ff fef9 	bl	8010348 <rcutils_allocator_is_valid>
 8010556:	b328      	cbz	r0, 80105a4 <rcutils_format_string_limit+0x64>
 8010558:	2100      	movs	r1, #0
 801055a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801055c:	4632      	mov	r2, r6
 801055e:	4608      	mov	r0, r1
 8010560:	e9cd 3300 	strd	r3, r3, [sp]
 8010564:	f000 f8f4 	bl	8010750 <rcutils_vsnprintf>
 8010568:	1c43      	adds	r3, r0, #1
 801056a:	4605      	mov	r5, r0
 801056c:	d01a      	beq.n	80105a4 <rcutils_format_string_limit+0x64>
 801056e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010570:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010572:	1c47      	adds	r7, r0, #1
 8010574:	429f      	cmp	r7, r3
 8010576:	bf84      	itt	hi
 8010578:	461f      	movhi	r7, r3
 801057a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801057e:	4638      	mov	r0, r7
 8010580:	9b08      	ldr	r3, [sp, #32]
 8010582:	4798      	blx	r3
 8010584:	4604      	mov	r4, r0
 8010586:	b168      	cbz	r0, 80105a4 <rcutils_format_string_limit+0x64>
 8010588:	9b01      	ldr	r3, [sp, #4]
 801058a:	4632      	mov	r2, r6
 801058c:	4639      	mov	r1, r7
 801058e:	f000 f8df 	bl	8010750 <rcutils_vsnprintf>
 8010592:	2800      	cmp	r0, #0
 8010594:	db02      	blt.n	801059c <rcutils_format_string_limit+0x5c>
 8010596:	2300      	movs	r3, #0
 8010598:	5563      	strb	r3, [r4, r5]
 801059a:	e004      	b.n	80105a6 <rcutils_format_string_limit+0x66>
 801059c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801059e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80105a0:	4620      	mov	r0, r4
 80105a2:	4798      	blx	r3
 80105a4:	2400      	movs	r4, #0
 80105a6:	4620      	mov	r0, r4
 80105a8:	b003      	add	sp, #12
 80105aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80105ae:	b004      	add	sp, #16
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop

080105b4 <rcutils_repl_str>:
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	ed2d 8b02 	vpush	{d8}
 80105bc:	b087      	sub	sp, #28
 80105be:	4680      	mov	r8, r0
 80105c0:	4608      	mov	r0, r1
 80105c2:	f8cd 8004 	str.w	r8, [sp, #4]
 80105c6:	ee08 2a10 	vmov	s16, r2
 80105ca:	468a      	mov	sl, r1
 80105cc:	4699      	mov	r9, r3
 80105ce:	f7ef fe29 	bl	8000224 <strlen>
 80105d2:	2600      	movs	r6, #0
 80105d4:	4647      	mov	r7, r8
 80105d6:	9002      	str	r0, [sp, #8]
 80105d8:	46b3      	mov	fp, r6
 80105da:	2510      	movs	r5, #16
 80105dc:	46b0      	mov	r8, r6
 80105de:	e01d      	b.n	801061c <rcutils_repl_str+0x68>
 80105e0:	f10b 0b01 	add.w	fp, fp, #1
 80105e4:	455e      	cmp	r6, fp
 80105e6:	d211      	bcs.n	801060c <rcutils_repl_str+0x58>
 80105e8:	442e      	add	r6, r5
 80105ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80105ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80105f2:	00b1      	lsls	r1, r6, #2
 80105f4:	4798      	blx	r3
 80105f6:	2800      	cmp	r0, #0
 80105f8:	f000 8088 	beq.w	801070c <rcutils_repl_str+0x158>
 80105fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010600:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010604:	4680      	mov	r8, r0
 8010606:	bf28      	it	cs
 8010608:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801060c:	9a01      	ldr	r2, [sp, #4]
 801060e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010612:	1aa2      	subs	r2, r4, r2
 8010614:	f843 2c04 	str.w	r2, [r3, #-4]
 8010618:	9b02      	ldr	r3, [sp, #8]
 801061a:	18e7      	adds	r7, r4, r3
 801061c:	4651      	mov	r1, sl
 801061e:	4638      	mov	r0, r7
 8010620:	f00b ff8b 	bl	801c53a <strstr>
 8010624:	4604      	mov	r4, r0
 8010626:	4640      	mov	r0, r8
 8010628:	2c00      	cmp	r4, #0
 801062a:	d1d9      	bne.n	80105e0 <rcutils_repl_str+0x2c>
 801062c:	46b8      	mov	r8, r7
 801062e:	4607      	mov	r7, r0
 8010630:	4640      	mov	r0, r8
 8010632:	f7ef fdf7 	bl	8000224 <strlen>
 8010636:	9b01      	ldr	r3, [sp, #4]
 8010638:	eba8 0303 	sub.w	r3, r8, r3
 801063c:	181c      	adds	r4, r3, r0
 801063e:	9404      	str	r4, [sp, #16]
 8010640:	f1bb 0f00 	cmp.w	fp, #0
 8010644:	d04a      	beq.n	80106dc <rcutils_repl_str+0x128>
 8010646:	ee18 0a10 	vmov	r0, s16
 801064a:	f7ef fdeb 	bl	8000224 <strlen>
 801064e:	9b02      	ldr	r3, [sp, #8]
 8010650:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010654:	1ac3      	subs	r3, r0, r3
 8010656:	fb0b 4303 	mla	r3, fp, r3, r4
 801065a:	461a      	mov	r2, r3
 801065c:	9305      	str	r3, [sp, #20]
 801065e:	4606      	mov	r6, r0
 8010660:	f8d9 3000 	ldr.w	r3, [r9]
 8010664:	1c50      	adds	r0, r2, #1
 8010666:	4798      	blx	r3
 8010668:	9003      	str	r0, [sp, #12]
 801066a:	2800      	cmp	r0, #0
 801066c:	d04f      	beq.n	801070e <rcutils_repl_str+0x15a>
 801066e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	4641      	mov	r1, r8
 8010676:	f00c f802 	bl	801c67e <memcpy>
 801067a:	683d      	ldr	r5, [r7, #0]
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	9701      	str	r7, [sp, #4]
 8010680:	46ba      	mov	sl, r7
 8010682:	441d      	add	r5, r3
 8010684:	9f02      	ldr	r7, [sp, #8]
 8010686:	f8cd 9008 	str.w	r9, [sp, #8]
 801068a:	2401      	movs	r4, #1
 801068c:	46d1      	mov	r9, sl
 801068e:	ee18 aa10 	vmov	sl, s16
 8010692:	e00a      	b.n	80106aa <rcutils_repl_str+0xf6>
 8010694:	f8d9 5000 	ldr.w	r5, [r9]
 8010698:	1aaa      	subs	r2, r5, r2
 801069a:	1885      	adds	r5, r0, r2
 801069c:	f00b ffef 	bl	801c67e <memcpy>
 80106a0:	45a3      	cmp	fp, r4
 80106a2:	f104 0201 	add.w	r2, r4, #1
 80106a6:	d935      	bls.n	8010714 <rcutils_repl_str+0x160>
 80106a8:	4614      	mov	r4, r2
 80106aa:	4632      	mov	r2, r6
 80106ac:	4651      	mov	r1, sl
 80106ae:	4628      	mov	r0, r5
 80106b0:	f00b ffe5 	bl	801c67e <memcpy>
 80106b4:	f859 2b04 	ldr.w	r2, [r9], #4
 80106b8:	45a3      	cmp	fp, r4
 80106ba:	443a      	add	r2, r7
 80106bc:	eb05 0006 	add.w	r0, r5, r6
 80106c0:	eb08 0102 	add.w	r1, r8, r2
 80106c4:	d1e6      	bne.n	8010694 <rcutils_repl_str+0xe0>
 80106c6:	9b04      	ldr	r3, [sp, #16]
 80106c8:	1a9a      	subs	r2, r3, r2
 80106ca:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80106ce:	f00b ffd6 	bl	801c67e <memcpy>
 80106d2:	9a03      	ldr	r2, [sp, #12]
 80106d4:	9905      	ldr	r1, [sp, #20]
 80106d6:	2300      	movs	r3, #0
 80106d8:	5453      	strb	r3, [r2, r1]
 80106da:	e00b      	b.n	80106f4 <rcutils_repl_str+0x140>
 80106dc:	4620      	mov	r0, r4
 80106de:	f8d9 3000 	ldr.w	r3, [r9]
 80106e2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80106e6:	3001      	adds	r0, #1
 80106e8:	4798      	blx	r3
 80106ea:	9003      	str	r0, [sp, #12]
 80106ec:	b110      	cbz	r0, 80106f4 <rcutils_repl_str+0x140>
 80106ee:	9901      	ldr	r1, [sp, #4]
 80106f0:	f00b ffbd 	bl	801c66e <strcpy>
 80106f4:	4638      	mov	r0, r7
 80106f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80106fa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80106fe:	4798      	blx	r3
 8010700:	9803      	ldr	r0, [sp, #12]
 8010702:	b007      	add	sp, #28
 8010704:	ecbd 8b02 	vpop	{d8}
 8010708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070c:	4647      	mov	r7, r8
 801070e:	2300      	movs	r3, #0
 8010710:	9303      	str	r3, [sp, #12]
 8010712:	e7ef      	b.n	80106f4 <rcutils_repl_str+0x140>
 8010714:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010718:	e7db      	b.n	80106d2 <rcutils_repl_str+0x11e>
 801071a:	bf00      	nop

0801071c <rcutils_snprintf>:
 801071c:	b40c      	push	{r2, r3}
 801071e:	b530      	push	{r4, r5, lr}
 8010720:	b083      	sub	sp, #12
 8010722:	ab06      	add	r3, sp, #24
 8010724:	f853 2b04 	ldr.w	r2, [r3], #4
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	b152      	cbz	r2, 8010742 <rcutils_snprintf+0x26>
 801072c:	b138      	cbz	r0, 801073e <rcutils_snprintf+0x22>
 801072e:	b141      	cbz	r1, 8010742 <rcutils_snprintf+0x26>
 8010730:	f00b fe10 	bl	801c354 <vsniprintf>
 8010734:	b003      	add	sp, #12
 8010736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801073a:	b002      	add	sp, #8
 801073c:	4770      	bx	lr
 801073e:	2900      	cmp	r1, #0
 8010740:	d0f6      	beq.n	8010730 <rcutils_snprintf+0x14>
 8010742:	f00b ff67 	bl	801c614 <__errno>
 8010746:	2316      	movs	r3, #22
 8010748:	6003      	str	r3, [r0, #0]
 801074a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801074e:	e7f1      	b.n	8010734 <rcutils_snprintf+0x18>

08010750 <rcutils_vsnprintf>:
 8010750:	b570      	push	{r4, r5, r6, lr}
 8010752:	b13a      	cbz	r2, 8010764 <rcutils_vsnprintf+0x14>
 8010754:	b120      	cbz	r0, 8010760 <rcutils_vsnprintf+0x10>
 8010756:	b129      	cbz	r1, 8010764 <rcutils_vsnprintf+0x14>
 8010758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801075c:	f00b bdfa 	b.w	801c354 <vsniprintf>
 8010760:	2900      	cmp	r1, #0
 8010762:	d0f9      	beq.n	8010758 <rcutils_vsnprintf+0x8>
 8010764:	f00b ff56 	bl	801c614 <__errno>
 8010768:	2316      	movs	r3, #22
 801076a:	6003      	str	r3, [r0, #0]
 801076c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010770:	bd70      	pop	{r4, r5, r6, pc}
 8010772:	bf00      	nop

08010774 <rcutils_strdup>:
 8010774:	b084      	sub	sp, #16
 8010776:	b570      	push	{r4, r5, r6, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	ac07      	add	r4, sp, #28
 801077c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010780:	4605      	mov	r5, r0
 8010782:	b1b0      	cbz	r0, 80107b2 <rcutils_strdup+0x3e>
 8010784:	f7ef fd4e 	bl	8000224 <strlen>
 8010788:	1c42      	adds	r2, r0, #1
 801078a:	9b07      	ldr	r3, [sp, #28]
 801078c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801078e:	9201      	str	r2, [sp, #4]
 8010790:	4606      	mov	r6, r0
 8010792:	4610      	mov	r0, r2
 8010794:	4798      	blx	r3
 8010796:	4604      	mov	r4, r0
 8010798:	b128      	cbz	r0, 80107a6 <rcutils_strdup+0x32>
 801079a:	9a01      	ldr	r2, [sp, #4]
 801079c:	4629      	mov	r1, r5
 801079e:	f00b ff6e 	bl	801c67e <memcpy>
 80107a2:	2300      	movs	r3, #0
 80107a4:	55a3      	strb	r3, [r4, r6]
 80107a6:	4620      	mov	r0, r4
 80107a8:	b002      	add	sp, #8
 80107aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107ae:	b004      	add	sp, #16
 80107b0:	4770      	bx	lr
 80107b2:	4604      	mov	r4, r0
 80107b4:	e7f7      	b.n	80107a6 <rcutils_strdup+0x32>
 80107b6:	bf00      	nop

080107b8 <rcutils_strndup>:
 80107b8:	b082      	sub	sp, #8
 80107ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107bc:	ac06      	add	r4, sp, #24
 80107be:	e884 000c 	stmia.w	r4, {r2, r3}
 80107c2:	4605      	mov	r5, r0
 80107c4:	b188      	cbz	r0, 80107ea <rcutils_strndup+0x32>
 80107c6:	1c4f      	adds	r7, r1, #1
 80107c8:	460e      	mov	r6, r1
 80107ca:	4638      	mov	r0, r7
 80107cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80107ce:	4790      	blx	r2
 80107d0:	4604      	mov	r4, r0
 80107d2:	b128      	cbz	r0, 80107e0 <rcutils_strndup+0x28>
 80107d4:	463a      	mov	r2, r7
 80107d6:	4629      	mov	r1, r5
 80107d8:	f00b ff51 	bl	801c67e <memcpy>
 80107dc:	2300      	movs	r3, #0
 80107de:	55a3      	strb	r3, [r4, r6]
 80107e0:	4620      	mov	r0, r4
 80107e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107e6:	b002      	add	sp, #8
 80107e8:	4770      	bx	lr
 80107ea:	4604      	mov	r4, r0
 80107ec:	e7f8      	b.n	80107e0 <rcutils_strndup+0x28>
 80107ee:	bf00      	nop

080107f0 <rcutils_system_time_now>:
 80107f0:	b308      	cbz	r0, 8010836 <rcutils_system_time_now+0x46>
 80107f2:	b570      	push	{r4, r5, r6, lr}
 80107f4:	b084      	sub	sp, #16
 80107f6:	4604      	mov	r4, r0
 80107f8:	4669      	mov	r1, sp
 80107fa:	2001      	movs	r0, #1
 80107fc:	f7f2 ff18 	bl	8003630 <clock_gettime>
 8010800:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010804:	2d00      	cmp	r5, #0
 8010806:	db13      	blt.n	8010830 <rcutils_system_time_now+0x40>
 8010808:	9902      	ldr	r1, [sp, #8]
 801080a:	2900      	cmp	r1, #0
 801080c:	db0d      	blt.n	801082a <rcutils_system_time_now+0x3a>
 801080e:	4e0b      	ldr	r6, [pc, #44]	@ (801083c <rcutils_system_time_now+0x4c>)
 8010810:	fba3 3206 	umull	r3, r2, r3, r6
 8010814:	185b      	adds	r3, r3, r1
 8010816:	fb06 2205 	mla	r2, r6, r5, r2
 801081a:	f04f 0000 	mov.w	r0, #0
 801081e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010822:	e9c4 3200 	strd	r3, r2, [r4]
 8010826:	b004      	add	sp, #16
 8010828:	bd70      	pop	{r4, r5, r6, pc}
 801082a:	ea53 0205 	orrs.w	r2, r3, r5
 801082e:	d1ee      	bne.n	801080e <rcutils_system_time_now+0x1e>
 8010830:	2002      	movs	r0, #2
 8010832:	b004      	add	sp, #16
 8010834:	bd70      	pop	{r4, r5, r6, pc}
 8010836:	200b      	movs	r0, #11
 8010838:	4770      	bx	lr
 801083a:	bf00      	nop
 801083c:	3b9aca00 	.word	0x3b9aca00

08010840 <rcutils_steady_time_now>:
 8010840:	b308      	cbz	r0, 8010886 <rcutils_steady_time_now+0x46>
 8010842:	b570      	push	{r4, r5, r6, lr}
 8010844:	b084      	sub	sp, #16
 8010846:	4604      	mov	r4, r0
 8010848:	4669      	mov	r1, sp
 801084a:	2000      	movs	r0, #0
 801084c:	f7f2 fef0 	bl	8003630 <clock_gettime>
 8010850:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010854:	2d00      	cmp	r5, #0
 8010856:	db13      	blt.n	8010880 <rcutils_steady_time_now+0x40>
 8010858:	9902      	ldr	r1, [sp, #8]
 801085a:	2900      	cmp	r1, #0
 801085c:	db0d      	blt.n	801087a <rcutils_steady_time_now+0x3a>
 801085e:	4e0b      	ldr	r6, [pc, #44]	@ (801088c <rcutils_steady_time_now+0x4c>)
 8010860:	fba3 3206 	umull	r3, r2, r3, r6
 8010864:	185b      	adds	r3, r3, r1
 8010866:	fb06 2205 	mla	r2, r6, r5, r2
 801086a:	f04f 0000 	mov.w	r0, #0
 801086e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8010872:	e9c4 3200 	strd	r3, r2, [r4]
 8010876:	b004      	add	sp, #16
 8010878:	bd70      	pop	{r4, r5, r6, pc}
 801087a:	ea53 0205 	orrs.w	r2, r3, r5
 801087e:	d1ee      	bne.n	801085e <rcutils_steady_time_now+0x1e>
 8010880:	2002      	movs	r0, #2
 8010882:	b004      	add	sp, #16
 8010884:	bd70      	pop	{r4, r5, r6, pc}
 8010886:	200b      	movs	r0, #11
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	3b9aca00 	.word	0x3b9aca00

08010890 <rmw_get_zero_initialized_init_options>:
 8010890:	b510      	push	{r4, lr}
 8010892:	2238      	movs	r2, #56	@ 0x38
 8010894:	4604      	mov	r4, r0
 8010896:	2100      	movs	r1, #0
 8010898:	f00b fe28 	bl	801c4ec <memset>
 801089c:	f104 0010 	add.w	r0, r4, #16
 80108a0:	f000 f80a 	bl	80108b8 <rmw_get_default_security_options>
 80108a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108a8:	60e3      	str	r3, [r4, #12]
 80108aa:	4620      	mov	r0, r4
 80108ac:	bd10      	pop	{r4, pc}
 80108ae:	bf00      	nop

080108b0 <rmw_get_default_publisher_options>:
 80108b0:	2200      	movs	r2, #0
 80108b2:	6002      	str	r2, [r0, #0]
 80108b4:	7102      	strb	r2, [r0, #4]
 80108b6:	4770      	bx	lr

080108b8 <rmw_get_default_security_options>:
 80108b8:	2200      	movs	r2, #0
 80108ba:	7002      	strb	r2, [r0, #0]
 80108bc:	6042      	str	r2, [r0, #4]
 80108be:	4770      	bx	lr

080108c0 <rmw_subscription_content_filter_options_fini>:
 80108c0:	b1b0      	cbz	r0, 80108f0 <rmw_subscription_content_filter_options_fini+0x30>
 80108c2:	b538      	push	{r3, r4, r5, lr}
 80108c4:	4604      	mov	r4, r0
 80108c6:	4608      	mov	r0, r1
 80108c8:	460d      	mov	r5, r1
 80108ca:	f7ff fd3d 	bl	8010348 <rcutils_allocator_is_valid>
 80108ce:	b168      	cbz	r0, 80108ec <rmw_subscription_content_filter_options_fini+0x2c>
 80108d0:	6820      	ldr	r0, [r4, #0]
 80108d2:	b120      	cbz	r0, 80108de <rmw_subscription_content_filter_options_fini+0x1e>
 80108d4:	686b      	ldr	r3, [r5, #4]
 80108d6:	6929      	ldr	r1, [r5, #16]
 80108d8:	4798      	blx	r3
 80108da:	2300      	movs	r3, #0
 80108dc:	6023      	str	r3, [r4, #0]
 80108de:	1d20      	adds	r0, r4, #4
 80108e0:	f008 f952 	bl	8018b88 <rcutils_string_array_fini>
 80108e4:	3800      	subs	r0, #0
 80108e6:	bf18      	it	ne
 80108e8:	2001      	movne	r0, #1
 80108ea:	bd38      	pop	{r3, r4, r5, pc}
 80108ec:	200b      	movs	r0, #11
 80108ee:	bd38      	pop	{r3, r4, r5, pc}
 80108f0:	200b      	movs	r0, #11
 80108f2:	4770      	bx	lr

080108f4 <rmw_get_default_subscription_options>:
 80108f4:	2200      	movs	r2, #0
 80108f6:	e9c0 2200 	strd	r2, r2, [r0]
 80108fa:	6082      	str	r2, [r0, #8]
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop

08010900 <rmw_get_zero_initialized_message_info>:
 8010900:	b510      	push	{r4, lr}
 8010902:	2240      	movs	r2, #64	@ 0x40
 8010904:	4604      	mov	r4, r0
 8010906:	2100      	movs	r1, #0
 8010908:	f00b fdf0 	bl	801c4ec <memset>
 801090c:	4620      	mov	r0, r4
 801090e:	bd10      	pop	{r4, pc}

08010910 <rmw_validate_namespace_with_size>:
 8010910:	b340      	cbz	r0, 8010964 <rmw_validate_namespace_with_size+0x54>
 8010912:	b570      	push	{r4, r5, r6, lr}
 8010914:	4614      	mov	r4, r2
 8010916:	b0c2      	sub	sp, #264	@ 0x108
 8010918:	b332      	cbz	r2, 8010968 <rmw_validate_namespace_with_size+0x58>
 801091a:	2901      	cmp	r1, #1
 801091c:	460d      	mov	r5, r1
 801091e:	461e      	mov	r6, r3
 8010920:	d102      	bne.n	8010928 <rmw_validate_namespace_with_size+0x18>
 8010922:	7803      	ldrb	r3, [r0, #0]
 8010924:	2b2f      	cmp	r3, #47	@ 0x2f
 8010926:	d012      	beq.n	801094e <rmw_validate_namespace_with_size+0x3e>
 8010928:	aa01      	add	r2, sp, #4
 801092a:	4669      	mov	r1, sp
 801092c:	f008 fb14 	bl	8018f58 <rmw_validate_full_topic_name>
 8010930:	b978      	cbnz	r0, 8010952 <rmw_validate_namespace_with_size+0x42>
 8010932:	9b00      	ldr	r3, [sp, #0]
 8010934:	b14b      	cbz	r3, 801094a <rmw_validate_namespace_with_size+0x3a>
 8010936:	2b07      	cmp	r3, #7
 8010938:	d007      	beq.n	801094a <rmw_validate_namespace_with_size+0x3a>
 801093a:	1e5a      	subs	r2, r3, #1
 801093c:	2a05      	cmp	r2, #5
 801093e:	d82b      	bhi.n	8010998 <rmw_validate_namespace_with_size+0x88>
 8010940:	e8df f002 	tbb	[pc, r2]
 8010944:	1e212427 	.word	0x1e212427
 8010948:	141b      	.short	0x141b
 801094a:	2df5      	cmp	r5, #245	@ 0xf5
 801094c:	d803      	bhi.n	8010956 <rmw_validate_namespace_with_size+0x46>
 801094e:	2000      	movs	r0, #0
 8010950:	6020      	str	r0, [r4, #0]
 8010952:	b042      	add	sp, #264	@ 0x108
 8010954:	bd70      	pop	{r4, r5, r6, pc}
 8010956:	2307      	movs	r3, #7
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	2e00      	cmp	r6, #0
 801095c:	d0f9      	beq.n	8010952 <rmw_validate_namespace_with_size+0x42>
 801095e:	23f4      	movs	r3, #244	@ 0xf4
 8010960:	6033      	str	r3, [r6, #0]
 8010962:	e7f6      	b.n	8010952 <rmw_validate_namespace_with_size+0x42>
 8010964:	200b      	movs	r0, #11
 8010966:	4770      	bx	lr
 8010968:	200b      	movs	r0, #11
 801096a:	e7f2      	b.n	8010952 <rmw_validate_namespace_with_size+0x42>
 801096c:	2306      	movs	r3, #6
 801096e:	6023      	str	r3, [r4, #0]
 8010970:	2e00      	cmp	r6, #0
 8010972:	d0ee      	beq.n	8010952 <rmw_validate_namespace_with_size+0x42>
 8010974:	9b01      	ldr	r3, [sp, #4]
 8010976:	6033      	str	r3, [r6, #0]
 8010978:	e7eb      	b.n	8010952 <rmw_validate_namespace_with_size+0x42>
 801097a:	2305      	movs	r3, #5
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	e7f7      	b.n	8010970 <rmw_validate_namespace_with_size+0x60>
 8010980:	2304      	movs	r3, #4
 8010982:	6023      	str	r3, [r4, #0]
 8010984:	e7f4      	b.n	8010970 <rmw_validate_namespace_with_size+0x60>
 8010986:	2303      	movs	r3, #3
 8010988:	6023      	str	r3, [r4, #0]
 801098a:	e7f1      	b.n	8010970 <rmw_validate_namespace_with_size+0x60>
 801098c:	2302      	movs	r3, #2
 801098e:	6023      	str	r3, [r4, #0]
 8010990:	e7ee      	b.n	8010970 <rmw_validate_namespace_with_size+0x60>
 8010992:	2301      	movs	r3, #1
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	e7eb      	b.n	8010970 <rmw_validate_namespace_with_size+0x60>
 8010998:	4a03      	ldr	r2, [pc, #12]	@ (80109a8 <rmw_validate_namespace_with_size+0x98>)
 801099a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801099e:	a802      	add	r0, sp, #8
 80109a0:	f7ff febc 	bl	801071c <rcutils_snprintf>
 80109a4:	2001      	movs	r0, #1
 80109a6:	e7d4      	b.n	8010952 <rmw_validate_namespace_with_size+0x42>
 80109a8:	0801d6e8 	.word	0x0801d6e8

080109ac <rmw_validate_namespace>:
 80109ac:	b168      	cbz	r0, 80109ca <rmw_validate_namespace+0x1e>
 80109ae:	b570      	push	{r4, r5, r6, lr}
 80109b0:	460d      	mov	r5, r1
 80109b2:	4616      	mov	r6, r2
 80109b4:	4604      	mov	r4, r0
 80109b6:	f7ef fc35 	bl	8000224 <strlen>
 80109ba:	4633      	mov	r3, r6
 80109bc:	4601      	mov	r1, r0
 80109be:	462a      	mov	r2, r5
 80109c0:	4620      	mov	r0, r4
 80109c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109c6:	f7ff bfa3 	b.w	8010910 <rmw_validate_namespace_with_size>
 80109ca:	200b      	movs	r0, #11
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop

080109d0 <rmw_namespace_validation_result_string>:
 80109d0:	2807      	cmp	r0, #7
 80109d2:	bf9a      	itte	ls
 80109d4:	4b02      	ldrls	r3, [pc, #8]	@ (80109e0 <rmw_namespace_validation_result_string+0x10>)
 80109d6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80109da:	4802      	ldrhi	r0, [pc, #8]	@ (80109e4 <rmw_namespace_validation_result_string+0x14>)
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	0801dfa4 	.word	0x0801dfa4
 80109e4:	0801d738 	.word	0x0801d738

080109e8 <rmw_validate_node_name>:
 80109e8:	2800      	cmp	r0, #0
 80109ea:	d03b      	beq.n	8010a64 <rmw_validate_node_name+0x7c>
 80109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f0:	460d      	mov	r5, r1
 80109f2:	2900      	cmp	r1, #0
 80109f4:	d038      	beq.n	8010a68 <rmw_validate_node_name+0x80>
 80109f6:	4616      	mov	r6, r2
 80109f8:	4604      	mov	r4, r0
 80109fa:	f7ef fc13 	bl	8000224 <strlen>
 80109fe:	b1e0      	cbz	r0, 8010a3a <rmw_validate_node_name+0x52>
 8010a00:	1e63      	subs	r3, r4, #1
 8010a02:	eb03 0800 	add.w	r8, r3, r0
 8010a06:	f1c4 0101 	rsb	r1, r4, #1
 8010a0a:	18cf      	adds	r7, r1, r3
 8010a0c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010a10:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8010a14:	f02e 0c20 	bic.w	ip, lr, #32
 8010a18:	2a09      	cmp	r2, #9
 8010a1a:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010a1e:	d914      	bls.n	8010a4a <rmw_validate_node_name+0x62>
 8010a20:	f1bc 0f19 	cmp.w	ip, #25
 8010a24:	d911      	bls.n	8010a4a <rmw_validate_node_name+0x62>
 8010a26:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010a2a:	d00e      	beq.n	8010a4a <rmw_validate_node_name+0x62>
 8010a2c:	2302      	movs	r3, #2
 8010a2e:	602b      	str	r3, [r5, #0]
 8010a30:	b106      	cbz	r6, 8010a34 <rmw_validate_node_name+0x4c>
 8010a32:	6037      	str	r7, [r6, #0]
 8010a34:	2000      	movs	r0, #0
 8010a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	602b      	str	r3, [r5, #0]
 8010a3e:	2e00      	cmp	r6, #0
 8010a40:	d0f8      	beq.n	8010a34 <rmw_validate_node_name+0x4c>
 8010a42:	2000      	movs	r0, #0
 8010a44:	6030      	str	r0, [r6, #0]
 8010a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a4a:	4543      	cmp	r3, r8
 8010a4c:	d1dd      	bne.n	8010a0a <rmw_validate_node_name+0x22>
 8010a4e:	7822      	ldrb	r2, [r4, #0]
 8010a50:	4b0d      	ldr	r3, [pc, #52]	@ (8010a88 <rmw_validate_node_name+0xa0>)
 8010a52:	5cd3      	ldrb	r3, [r2, r3]
 8010a54:	f013 0304 	ands.w	r3, r3, #4
 8010a58:	d110      	bne.n	8010a7c <rmw_validate_node_name+0x94>
 8010a5a:	28ff      	cmp	r0, #255	@ 0xff
 8010a5c:	d806      	bhi.n	8010a6c <rmw_validate_node_name+0x84>
 8010a5e:	602b      	str	r3, [r5, #0]
 8010a60:	4618      	mov	r0, r3
 8010a62:	e7e8      	b.n	8010a36 <rmw_validate_node_name+0x4e>
 8010a64:	200b      	movs	r0, #11
 8010a66:	4770      	bx	lr
 8010a68:	200b      	movs	r0, #11
 8010a6a:	e7e4      	b.n	8010a36 <rmw_validate_node_name+0x4e>
 8010a6c:	2204      	movs	r2, #4
 8010a6e:	602a      	str	r2, [r5, #0]
 8010a70:	2e00      	cmp	r6, #0
 8010a72:	d0df      	beq.n	8010a34 <rmw_validate_node_name+0x4c>
 8010a74:	22fe      	movs	r2, #254	@ 0xfe
 8010a76:	6032      	str	r2, [r6, #0]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	e7dc      	b.n	8010a36 <rmw_validate_node_name+0x4e>
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	602b      	str	r3, [r5, #0]
 8010a80:	2e00      	cmp	r6, #0
 8010a82:	d1de      	bne.n	8010a42 <rmw_validate_node_name+0x5a>
 8010a84:	e7d6      	b.n	8010a34 <rmw_validate_node_name+0x4c>
 8010a86:	bf00      	nop
 8010a88:	0801e87f 	.word	0x0801e87f

08010a8c <rmw_node_name_validation_result_string>:
 8010a8c:	2804      	cmp	r0, #4
 8010a8e:	bf9a      	itte	ls
 8010a90:	4b02      	ldrls	r3, [pc, #8]	@ (8010a9c <rmw_node_name_validation_result_string+0x10>)
 8010a92:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010a96:	4802      	ldrhi	r0, [pc, #8]	@ (8010aa0 <rmw_node_name_validation_result_string+0x14>)
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	0801dfc4 	.word	0x0801dfc4
 8010aa0:	0801d8e0 	.word	0x0801d8e0

08010aa4 <rmw_uros_set_custom_transport>:
 8010aa4:	b470      	push	{r4, r5, r6}
 8010aa6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010aaa:	b162      	cbz	r2, 8010ac6 <rmw_uros_set_custom_transport+0x22>
 8010aac:	b15b      	cbz	r3, 8010ac6 <rmw_uros_set_custom_transport+0x22>
 8010aae:	b155      	cbz	r5, 8010ac6 <rmw_uros_set_custom_transport+0x22>
 8010ab0:	b14e      	cbz	r6, 8010ac6 <rmw_uros_set_custom_transport+0x22>
 8010ab2:	4c06      	ldr	r4, [pc, #24]	@ (8010acc <rmw_uros_set_custom_transport+0x28>)
 8010ab4:	7020      	strb	r0, [r4, #0]
 8010ab6:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010aba:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010abe:	6166      	str	r6, [r4, #20]
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	bc70      	pop	{r4, r5, r6}
 8010ac4:	4770      	bx	lr
 8010ac6:	200b      	movs	r0, #11
 8010ac8:	bc70      	pop	{r4, r5, r6}
 8010aca:	4770      	bx	lr
 8010acc:	2000d104 	.word	0x2000d104

08010ad0 <rmw_uros_ping_agent>:
 8010ad0:	b570      	push	{r4, r5, r6, lr}
 8010ad2:	4b22      	ldr	r3, [pc, #136]	@ (8010b5c <rmw_uros_ping_agent+0x8c>)
 8010ad4:	7b1a      	ldrb	r2, [r3, #12]
 8010ad6:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010ada:	4605      	mov	r5, r0
 8010adc:	460e      	mov	r6, r1
 8010ade:	b10a      	cbz	r2, 8010ae4 <rmw_uros_ping_agent+0x14>
 8010ae0:	681c      	ldr	r4, [r3, #0]
 8010ae2:	b9bc      	cbnz	r4, 8010b14 <rmw_uros_ping_agent+0x44>
 8010ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8010b60 <rmw_uros_ping_agent+0x90>)
 8010ae6:	781a      	ldrb	r2, [r3, #0]
 8010ae8:	6918      	ldr	r0, [r3, #16]
 8010aea:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	92a3      	str	r2, [sp, #652]	@ 0x28c
 8010af2:	2100      	movs	r1, #0
 8010af4:	68da      	ldr	r2, [r3, #12]
 8010af6:	909c      	str	r0, [sp, #624]	@ 0x270
 8010af8:	6958      	ldr	r0, [r3, #20]
 8010afa:	929b      	str	r2, [sp, #620]	@ 0x26c
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	909d      	str	r0, [sp, #628]	@ 0x274
 8010b00:	466a      	mov	r2, sp
 8010b02:	4608      	mov	r0, r1
 8010b04:	939a      	str	r3, [sp, #616]	@ 0x268
 8010b06:	f000 ffbd 	bl	8011a84 <rmw_uxrce_transport_init>
 8010b0a:	b198      	cbz	r0, 8010b34 <rmw_uros_ping_agent+0x64>
 8010b0c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b10:	bd70      	pop	{r4, r5, r6, pc}
 8010b12:	b9f0      	cbnz	r0, 8010b52 <rmw_uros_ping_agent+0x82>
 8010b14:	68a0      	ldr	r0, [r4, #8]
 8010b16:	4632      	mov	r2, r6
 8010b18:	4629      	mov	r1, r5
 8010b1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010b1e:	f002 fba1 	bl	8013264 <uxr_ping_agent_session>
 8010b22:	6864      	ldr	r4, [r4, #4]
 8010b24:	2c00      	cmp	r4, #0
 8010b26:	d1f4      	bne.n	8010b12 <rmw_uros_ping_agent+0x42>
 8010b28:	f080 0001 	eor.w	r0, r0, #1
 8010b2c:	b2c0      	uxtb	r0, r0
 8010b2e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b32:	bd70      	pop	{r4, r5, r6, pc}
 8010b34:	4632      	mov	r2, r6
 8010b36:	4629      	mov	r1, r5
 8010b38:	a89e      	add	r0, sp, #632	@ 0x278
 8010b3a:	f002 fbdf 	bl	80132fc <uxr_ping_agent_attempts>
 8010b3e:	4604      	mov	r4, r0
 8010b40:	4668      	mov	r0, sp
 8010b42:	f002 fb5b 	bl	80131fc <uxr_close_custom_transport>
 8010b46:	f084 0001 	eor.w	r0, r4, #1
 8010b4a:	b2c0      	uxtb	r0, r0
 8010b4c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b50:	bd70      	pop	{r4, r5, r6, pc}
 8010b52:	2000      	movs	r0, #0
 8010b54:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b58:	bd70      	pop	{r4, r5, r6, pc}
 8010b5a:	bf00      	nop
 8010b5c:	20011a5c 	.word	0x20011a5c
 8010b60:	2000d104 	.word	0x2000d104

08010b64 <rmw_init_options_init>:
 8010b64:	b084      	sub	sp, #16
 8010b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b68:	b083      	sub	sp, #12
 8010b6a:	ad09      	add	r5, sp, #36	@ 0x24
 8010b6c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010b70:	b130      	cbz	r0, 8010b80 <rmw_init_options_init+0x1c>
 8010b72:	4604      	mov	r4, r0
 8010b74:	4628      	mov	r0, r5
 8010b76:	f7ff fbe7 	bl	8010348 <rcutils_allocator_is_valid>
 8010b7a:	b108      	cbz	r0, 8010b80 <rmw_init_options_init+0x1c>
 8010b7c:	68a6      	ldr	r6, [r4, #8]
 8010b7e:	b12e      	cbz	r6, 8010b8c <rmw_init_options_init+0x28>
 8010b80:	200b      	movs	r0, #11
 8010b82:	b003      	add	sp, #12
 8010b84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b88:	b004      	add	sp, #16
 8010b8a:	4770      	bx	lr
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e9c4 2300 	strd	r2, r3, [r4]
 8010b94:	4b20      	ldr	r3, [pc, #128]	@ (8010c18 <rmw_init_options_init+0xb4>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	60a3      	str	r3, [r4, #8]
 8010b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b9c:	f104 0c20 	add.w	ip, r4, #32
 8010ba0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ba4:	466f      	mov	r7, sp
 8010ba6:	682b      	ldr	r3, [r5, #0]
 8010ba8:	f8cc 3000 	str.w	r3, [ip]
 8010bac:	4638      	mov	r0, r7
 8010bae:	61e6      	str	r6, [r4, #28]
 8010bb0:	60e6      	str	r6, [r4, #12]
 8010bb2:	f7ff fe81 	bl	80108b8 <rmw_get_default_security_options>
 8010bb6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010bba:	f104 0310 	add.w	r3, r4, #16
 8010bbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8010bc2:	2203      	movs	r2, #3
 8010bc4:	4815      	ldr	r0, [pc, #84]	@ (8010c1c <rmw_init_options_init+0xb8>)
 8010bc6:	4916      	ldr	r1, [pc, #88]	@ (8010c20 <rmw_init_options_init+0xbc>)
 8010bc8:	7626      	strb	r6, [r4, #24]
 8010bca:	f001 f88b 	bl	8011ce4 <rmw_uxrce_init_init_options_impl_memory>
 8010bce:	4813      	ldr	r0, [pc, #76]	@ (8010c1c <rmw_init_options_init+0xb8>)
 8010bd0:	f008 fb20 	bl	8019214 <get_memory>
 8010bd4:	b1f0      	cbz	r0, 8010c14 <rmw_init_options_init+0xb0>
 8010bd6:	4a13      	ldr	r2, [pc, #76]	@ (8010c24 <rmw_init_options_init+0xc0>)
 8010bd8:	6883      	ldr	r3, [r0, #8]
 8010bda:	6851      	ldr	r1, [r2, #4]
 8010bdc:	7810      	ldrb	r0, [r2, #0]
 8010bde:	6363      	str	r3, [r4, #52]	@ 0x34
 8010be0:	7418      	strb	r0, [r3, #16]
 8010be2:	6159      	str	r1, [r3, #20]
 8010be4:	68d1      	ldr	r1, [r2, #12]
 8010be6:	61d9      	str	r1, [r3, #28]
 8010be8:	6911      	ldr	r1, [r2, #16]
 8010bea:	6219      	str	r1, [r3, #32]
 8010bec:	6951      	ldr	r1, [r2, #20]
 8010bee:	6892      	ldr	r2, [r2, #8]
 8010bf0:	619a      	str	r2, [r3, #24]
 8010bf2:	6259      	str	r1, [r3, #36]	@ 0x24
 8010bf4:	f004 fc50 	bl	8015498 <uxr_nanos>
 8010bf8:	f00b f8bc 	bl	801bd74 <srand>
 8010bfc:	f00b f8e8 	bl	801bdd0 <rand>
 8010c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010c02:	6298      	str	r0, [r3, #40]	@ 0x28
 8010c04:	2800      	cmp	r0, #0
 8010c06:	d0f9      	beq.n	8010bfc <rmw_init_options_init+0x98>
 8010c08:	2000      	movs	r0, #0
 8010c0a:	b003      	add	sp, #12
 8010c0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010c10:	b004      	add	sp, #16
 8010c12:	4770      	bx	lr
 8010c14:	2001      	movs	r0, #1
 8010c16:	e7b4      	b.n	8010b82 <rmw_init_options_init+0x1e>
 8010c18:	0801e378 	.word	0x0801e378
 8010c1c:	20011a1c 	.word	0x20011a1c
 8010c20:	2000d2b8 	.word	0x2000d2b8
 8010c24:	2000d104 	.word	0x2000d104

08010c28 <rmw_init_options_copy>:
 8010c28:	b570      	push	{r4, r5, r6, lr}
 8010c2a:	b088      	sub	sp, #32
 8010c2c:	b160      	cbz	r0, 8010c48 <rmw_init_options_copy+0x20>
 8010c2e:	460d      	mov	r5, r1
 8010c30:	b151      	cbz	r1, 8010c48 <rmw_init_options_copy+0x20>
 8010c32:	4604      	mov	r4, r0
 8010c34:	6880      	ldr	r0, [r0, #8]
 8010c36:	b128      	cbz	r0, 8010c44 <rmw_init_options_copy+0x1c>
 8010c38:	4b33      	ldr	r3, [pc, #204]	@ (8010d08 <rmw_init_options_copy+0xe0>)
 8010c3a:	6819      	ldr	r1, [r3, #0]
 8010c3c:	f7ef fae8 	bl	8000210 <strcmp>
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d154      	bne.n	8010cee <rmw_init_options_copy+0xc6>
 8010c44:	68ab      	ldr	r3, [r5, #8]
 8010c46:	b11b      	cbz	r3, 8010c50 <rmw_init_options_copy+0x28>
 8010c48:	240b      	movs	r4, #11
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	b008      	add	sp, #32
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}
 8010c50:	4623      	mov	r3, r4
 8010c52:	462a      	mov	r2, r5
 8010c54:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8010c58:	f8d3 c000 	ldr.w	ip, [r3]
 8010c5c:	6858      	ldr	r0, [r3, #4]
 8010c5e:	6899      	ldr	r1, [r3, #8]
 8010c60:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010c64:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010c68:	3310      	adds	r3, #16
 8010c6a:	42b3      	cmp	r3, r6
 8010c6c:	f8c2 c000 	str.w	ip, [r2]
 8010c70:	6050      	str	r0, [r2, #4]
 8010c72:	6091      	str	r1, [r2, #8]
 8010c74:	f102 0210 	add.w	r2, r2, #16
 8010c78:	d1ee      	bne.n	8010c58 <rmw_init_options_copy+0x30>
 8010c7a:	6819      	ldr	r1, [r3, #0]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	6053      	str	r3, [r2, #4]
 8010c80:	6011      	str	r1, [r2, #0]
 8010c82:	f104 0e20 	add.w	lr, r4, #32
 8010c86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c8a:	f10d 0c0c 	add.w	ip, sp, #12
 8010c8e:	4666      	mov	r6, ip
 8010c90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c94:	f8de 3000 	ldr.w	r3, [lr]
 8010c98:	f8cc 3000 	str.w	r3, [ip]
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ff fb53 	bl	8010348 <rcutils_allocator_is_valid>
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	d0d0      	beq.n	8010c48 <rmw_init_options_copy+0x20>
 8010ca6:	ab08      	add	r3, sp, #32
 8010ca8:	e913 0003 	ldmdb	r3, {r0, r1}
 8010cac:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010cb0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010cb4:	69e0      	ldr	r0, [r4, #28]
 8010cb6:	f7ff fd5d 	bl	8010774 <rcutils_strdup>
 8010cba:	61e8      	str	r0, [r5, #28]
 8010cbc:	69e3      	ldr	r3, [r4, #28]
 8010cbe:	b103      	cbz	r3, 8010cc2 <rmw_init_options_copy+0x9a>
 8010cc0:	b1f8      	cbz	r0, 8010d02 <rmw_init_options_copy+0xda>
 8010cc2:	4812      	ldr	r0, [pc, #72]	@ (8010d0c <rmw_init_options_copy+0xe4>)
 8010cc4:	f008 faa6 	bl	8019214 <get_memory>
 8010cc8:	b1a8      	cbz	r0, 8010cf6 <rmw_init_options_copy+0xce>
 8010cca:	6883      	ldr	r3, [r0, #8]
 8010ccc:	636b      	str	r3, [r5, #52]	@ 0x34
 8010cce:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010cd0:	f102 0c10 	add.w	ip, r2, #16
 8010cd4:	f103 0510 	add.w	r5, r3, #16
 8010cd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cde:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010ce2:	2400      	movs	r4, #0
 8010ce4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010ce8:	4620      	mov	r0, r4
 8010cea:	b008      	add	sp, #32
 8010cec:	bd70      	pop	{r4, r5, r6, pc}
 8010cee:	240c      	movs	r4, #12
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	b008      	add	sp, #32
 8010cf4:	bd70      	pop	{r4, r5, r6, pc}
 8010cf6:	9b04      	ldr	r3, [sp, #16]
 8010cf8:	9907      	ldr	r1, [sp, #28]
 8010cfa:	69e8      	ldr	r0, [r5, #28]
 8010cfc:	4798      	blx	r3
 8010cfe:	2401      	movs	r4, #1
 8010d00:	e7a3      	b.n	8010c4a <rmw_init_options_copy+0x22>
 8010d02:	240a      	movs	r4, #10
 8010d04:	e7a1      	b.n	8010c4a <rmw_init_options_copy+0x22>
 8010d06:	bf00      	nop
 8010d08:	0801e378 	.word	0x0801e378
 8010d0c:	20011a1c 	.word	0x20011a1c

08010d10 <rmw_init_options_fini>:
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d041      	beq.n	8010d98 <rmw_init_options_fini+0x88>
 8010d14:	b510      	push	{r4, lr}
 8010d16:	4604      	mov	r4, r0
 8010d18:	b08e      	sub	sp, #56	@ 0x38
 8010d1a:	3020      	adds	r0, #32
 8010d1c:	f7ff fb14 	bl	8010348 <rcutils_allocator_is_valid>
 8010d20:	b380      	cbz	r0, 8010d84 <rmw_init_options_fini+0x74>
 8010d22:	68a0      	ldr	r0, [r4, #8]
 8010d24:	b120      	cbz	r0, 8010d30 <rmw_init_options_fini+0x20>
 8010d26:	4b1e      	ldr	r3, [pc, #120]	@ (8010da0 <rmw_init_options_fini+0x90>)
 8010d28:	6819      	ldr	r1, [r3, #0]
 8010d2a:	f7ef fa71 	bl	8000210 <strcmp>
 8010d2e:	bb88      	cbnz	r0, 8010d94 <rmw_init_options_fini+0x84>
 8010d30:	4b1c      	ldr	r3, [pc, #112]	@ (8010da4 <rmw_init_options_fini+0x94>)
 8010d32:	6819      	ldr	r1, [r3, #0]
 8010d34:	b351      	cbz	r1, 8010d8c <rmw_init_options_fini+0x7c>
 8010d36:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010d38:	e001      	b.n	8010d3e <rmw_init_options_fini+0x2e>
 8010d3a:	6849      	ldr	r1, [r1, #4]
 8010d3c:	b331      	cbz	r1, 8010d8c <rmw_init_options_fini+0x7c>
 8010d3e:	688b      	ldr	r3, [r1, #8]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d1fa      	bne.n	8010d3a <rmw_init_options_fini+0x2a>
 8010d44:	4817      	ldr	r0, [pc, #92]	@ (8010da4 <rmw_init_options_fini+0x94>)
 8010d46:	f008 fa75 	bl	8019234 <put_memory>
 8010d4a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010d4e:	69e0      	ldr	r0, [r4, #28]
 8010d50:	4798      	blx	r3
 8010d52:	4668      	mov	r0, sp
 8010d54:	f7ff fd9c 	bl	8010890 <rmw_get_zero_initialized_init_options>
 8010d58:	46ee      	mov	lr, sp
 8010d5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d5e:	46a4      	mov	ip, r4
 8010d60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d74:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d78:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4618      	mov	r0, r3
 8010d80:	b00e      	add	sp, #56	@ 0x38
 8010d82:	bd10      	pop	{r4, pc}
 8010d84:	230b      	movs	r3, #11
 8010d86:	4618      	mov	r0, r3
 8010d88:	b00e      	add	sp, #56	@ 0x38
 8010d8a:	bd10      	pop	{r4, pc}
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	4618      	mov	r0, r3
 8010d90:	b00e      	add	sp, #56	@ 0x38
 8010d92:	bd10      	pop	{r4, pc}
 8010d94:	230c      	movs	r3, #12
 8010d96:	e7f2      	b.n	8010d7e <rmw_init_options_fini+0x6e>
 8010d98:	230b      	movs	r3, #11
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop
 8010da0:	0801e378 	.word	0x0801e378
 8010da4:	20011a1c 	.word	0x20011a1c

08010da8 <rmw_init>:
 8010da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dac:	b083      	sub	sp, #12
 8010dae:	2800      	cmp	r0, #0
 8010db0:	f000 80d3 	beq.w	8010f5a <rmw_init+0x1b2>
 8010db4:	460e      	mov	r6, r1
 8010db6:	2900      	cmp	r1, #0
 8010db8:	f000 80cf 	beq.w	8010f5a <rmw_init+0x1b2>
 8010dbc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	f000 80ca 	beq.w	8010f5a <rmw_init+0x1b2>
 8010dc6:	4b78      	ldr	r3, [pc, #480]	@ (8010fa8 <rmw_init+0x200>)
 8010dc8:	6880      	ldr	r0, [r0, #8]
 8010dca:	681f      	ldr	r7, [r3, #0]
 8010dcc:	b128      	cbz	r0, 8010dda <rmw_init+0x32>
 8010dce:	4639      	mov	r1, r7
 8010dd0:	f7ef fa1e 	bl	8000210 <strcmp>
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	f040 80ca 	bne.w	8010f6e <rmw_init+0x1c6>
 8010dda:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dde:	4c73      	ldr	r4, [pc, #460]	@ (8010fac <rmw_init+0x204>)
 8010de0:	4973      	ldr	r1, [pc, #460]	@ (8010fb0 <rmw_init+0x208>)
 8010de2:	4874      	ldr	r0, [pc, #464]	@ (8010fb4 <rmw_init+0x20c>)
 8010de4:	60b7      	str	r7, [r6, #8]
 8010de6:	e9c6 2300 	strd	r2, r3, [r6]
 8010dea:	68eb      	ldr	r3, [r5, #12]
 8010dec:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010dee:	2201      	movs	r2, #1
 8010df0:	f000 ff18 	bl	8011c24 <rmw_uxrce_init_session_memory>
 8010df4:	4620      	mov	r0, r4
 8010df6:	4970      	ldr	r1, [pc, #448]	@ (8010fb8 <rmw_init+0x210>)
 8010df8:	2204      	movs	r2, #4
 8010dfa:	f000 ff53 	bl	8011ca4 <rmw_uxrce_init_static_input_buffer_memory>
 8010dfe:	f04f 0800 	mov.w	r8, #0
 8010e02:	486c      	ldr	r0, [pc, #432]	@ (8010fb4 <rmw_init+0x20c>)
 8010e04:	f884 800d 	strb.w	r8, [r4, #13]
 8010e08:	f008 fa04 	bl	8019214 <get_memory>
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	f000 80a9 	beq.w	8010f64 <rmw_init+0x1bc>
 8010e12:	6884      	ldr	r4, [r0, #8]
 8010e14:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010e16:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010e18:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010e1c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010e20:	9101      	str	r1, [sp, #4]
 8010e22:	6a00      	ldr	r0, [r0, #32]
 8010e24:	9000      	str	r0, [sp, #0]
 8010e26:	f104 0910 	add.w	r9, r4, #16
 8010e2a:	4661      	mov	r1, ip
 8010e2c:	4648      	mov	r0, r9
 8010e2e:	f002 f9a3 	bl	8013178 <uxr_set_custom_transport_callbacks>
 8010e32:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8010e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010e3a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8010e3e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8010e42:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010e46:	495d      	ldr	r1, [pc, #372]	@ (8010fbc <rmw_init+0x214>)
 8010e48:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010e4c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8010e50:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010e54:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010e58:	4859      	ldr	r0, [pc, #356]	@ (8010fc0 <rmw_init+0x218>)
 8010e5a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8010e5e:	2201      	movs	r2, #1
 8010e60:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8010e62:	f000 febf 	bl	8011be4 <rmw_uxrce_init_node_memory>
 8010e66:	4957      	ldr	r1, [pc, #348]	@ (8010fc4 <rmw_init+0x21c>)
 8010e68:	4857      	ldr	r0, [pc, #348]	@ (8010fc8 <rmw_init+0x220>)
 8010e6a:	2205      	movs	r2, #5
 8010e6c:	f000 fe9a 	bl	8011ba4 <rmw_uxrce_init_subscription_memory>
 8010e70:	4956      	ldr	r1, [pc, #344]	@ (8010fcc <rmw_init+0x224>)
 8010e72:	4857      	ldr	r0, [pc, #348]	@ (8010fd0 <rmw_init+0x228>)
 8010e74:	220a      	movs	r2, #10
 8010e76:	f000 fe75 	bl	8011b64 <rmw_uxrce_init_publisher_memory>
 8010e7a:	4956      	ldr	r1, [pc, #344]	@ (8010fd4 <rmw_init+0x22c>)
 8010e7c:	4856      	ldr	r0, [pc, #344]	@ (8010fd8 <rmw_init+0x230>)
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f000 fe30 	bl	8011ae4 <rmw_uxrce_init_service_memory>
 8010e84:	4955      	ldr	r1, [pc, #340]	@ (8010fdc <rmw_init+0x234>)
 8010e86:	4856      	ldr	r0, [pc, #344]	@ (8010fe0 <rmw_init+0x238>)
 8010e88:	2201      	movs	r2, #1
 8010e8a:	f000 fe4b 	bl	8011b24 <rmw_uxrce_init_client_memory>
 8010e8e:	4955      	ldr	r1, [pc, #340]	@ (8010fe4 <rmw_init+0x23c>)
 8010e90:	4855      	ldr	r0, [pc, #340]	@ (8010fe8 <rmw_init+0x240>)
 8010e92:	220f      	movs	r2, #15
 8010e94:	f000 fee6 	bl	8011c64 <rmw_uxrce_init_topic_memory>
 8010e98:	4954      	ldr	r1, [pc, #336]	@ (8010fec <rmw_init+0x244>)
 8010e9a:	4855      	ldr	r0, [pc, #340]	@ (8010ff0 <rmw_init+0x248>)
 8010e9c:	2203      	movs	r2, #3
 8010e9e:	f000 ff21 	bl	8011ce4 <rmw_uxrce_init_init_options_impl_memory>
 8010ea2:	4954      	ldr	r1, [pc, #336]	@ (8010ff4 <rmw_init+0x24c>)
 8010ea4:	4854      	ldr	r0, [pc, #336]	@ (8010ff8 <rmw_init+0x250>)
 8010ea6:	2204      	movs	r2, #4
 8010ea8:	f000 ff3c 	bl	8011d24 <rmw_uxrce_init_wait_set_memory>
 8010eac:	4953      	ldr	r1, [pc, #332]	@ (8010ffc <rmw_init+0x254>)
 8010eae:	4854      	ldr	r0, [pc, #336]	@ (8011000 <rmw_init+0x258>)
 8010eb0:	2204      	movs	r2, #4
 8010eb2:	f000 ff57 	bl	8011d64 <rmw_uxrce_init_guard_condition_memory>
 8010eb6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010eb8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8010eba:	4642      	mov	r2, r8
 8010ebc:	f000 fde2 	bl	8011a84 <rmw_uxrce_transport_init>
 8010ec0:	4607      	mov	r7, r0
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	d158      	bne.n	8010f78 <rmw_init+0x1d0>
 8010ec6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010ec8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010ecc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010ece:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f002 fc88 	bl	80137e8 <uxr_init_session>
 8010ed8:	494a      	ldr	r1, [pc, #296]	@ (8011004 <rmw_init+0x25c>)
 8010eda:	4622      	mov	r2, r4
 8010edc:	4628      	mov	r0, r5
 8010ede:	f002 fca7 	bl	8013830 <uxr_set_topic_callback>
 8010ee2:	4949      	ldr	r1, [pc, #292]	@ (8011008 <rmw_init+0x260>)
 8010ee4:	463a      	mov	r2, r7
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f002 fc9e 	bl	8013828 <uxr_set_status_callback>
 8010eec:	4947      	ldr	r1, [pc, #284]	@ (801100c <rmw_init+0x264>)
 8010eee:	463a      	mov	r2, r7
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f002 fca1 	bl	8013838 <uxr_set_request_callback>
 8010ef6:	4946      	ldr	r1, [pc, #280]	@ (8011010 <rmw_init+0x268>)
 8010ef8:	463a      	mov	r2, r7
 8010efa:	4628      	mov	r0, r5
 8010efc:	f002 fca0 	bl	8013840 <uxr_set_reply_callback>
 8010f00:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f04:	2304      	movs	r3, #4
 8010f06:	0092      	lsls	r2, r2, #2
 8010f08:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010f0c:	4628      	mov	r0, r5
 8010f0e:	f002 fcd5 	bl	80138bc <uxr_create_input_reliable_stream>
 8010f12:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f16:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010f1a:	0092      	lsls	r2, r2, #2
 8010f1c:	2304      	movs	r3, #4
 8010f1e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010f22:	4628      	mov	r0, r5
 8010f24:	f002 fca2 	bl	801386c <uxr_create_output_reliable_stream>
 8010f28:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	f002 fcbf 	bl	80138b0 <uxr_create_input_best_effort_stream>
 8010f32:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010f36:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010f3a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f3e:	3114      	adds	r1, #20
 8010f40:	4628      	mov	r0, r5
 8010f42:	f002 fc81 	bl	8013848 <uxr_create_output_best_effort_stream>
 8010f46:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010f4a:	4628      	mov	r0, r5
 8010f4c:	f003 fa36 	bl	80143bc <uxr_create_session>
 8010f50:	b1f8      	cbz	r0, 8010f92 <rmw_init+0x1ea>
 8010f52:	4638      	mov	r0, r7
 8010f54:	b003      	add	sp, #12
 8010f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f5a:	270b      	movs	r7, #11
 8010f5c:	4638      	mov	r0, r7
 8010f5e:	b003      	add	sp, #12
 8010f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f64:	2701      	movs	r7, #1
 8010f66:	4638      	mov	r0, r7
 8010f68:	b003      	add	sp, #12
 8010f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f6e:	270c      	movs	r7, #12
 8010f70:	4638      	mov	r0, r7
 8010f72:	b003      	add	sp, #12
 8010f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f78:	4648      	mov	r0, r9
 8010f7a:	f002 f93f 	bl	80131fc <uxr_close_custom_transport>
 8010f7e:	480d      	ldr	r0, [pc, #52]	@ (8010fb4 <rmw_init+0x20c>)
 8010f80:	4621      	mov	r1, r4
 8010f82:	f008 f957 	bl	8019234 <put_memory>
 8010f86:	4638      	mov	r0, r7
 8010f88:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8010f8c:	b003      	add	sp, #12
 8010f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f92:	4648      	mov	r0, r9
 8010f94:	f002 f932 	bl	80131fc <uxr_close_custom_transport>
 8010f98:	4806      	ldr	r0, [pc, #24]	@ (8010fb4 <rmw_init+0x20c>)
 8010f9a:	4621      	mov	r1, r4
 8010f9c:	f008 f94a 	bl	8019234 <put_memory>
 8010fa0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010fa2:	2701      	movs	r7, #1
 8010fa4:	e7d5      	b.n	8010f52 <rmw_init+0x1aa>
 8010fa6:	bf00      	nop
 8010fa8:	0801e378 	.word	0x0801e378
 8010fac:	20011a6c 	.word	0x20011a6c
 8010fb0:	2000dd18 	.word	0x2000dd18
 8010fb4:	20011a5c 	.word	0x20011a5c
 8010fb8:	2000f2c0 	.word	0x2000f2c0
 8010fbc:	2000d33c 	.word	0x2000d33c
 8010fc0:	20011a2c 	.word	0x20011a2c
 8010fc4:	200113c0 	.word	0x200113c0
 8010fc8:	20011a7c 	.word	0x20011a7c
 8010fcc:	2000d3e0 	.word	0x2000d3e0
 8010fd0:	20011a3c 	.word	0x20011a3c
 8010fd4:	2000dc50 	.word	0x2000dc50
 8010fd8:	20011a4c 	.word	0x20011a4c
 8010fdc:	2000d170 	.word	0x2000d170
 8010fe0:	2000d15c 	.word	0x2000d15c
 8010fe4:	200117f8 	.word	0x200117f8
 8010fe8:	20011a8c 	.word	0x20011a8c
 8010fec:	2000d2b8 	.word	0x2000d2b8
 8010ff0:	20011a1c 	.word	0x20011a1c
 8010ff4:	2001199c 	.word	0x2001199c
 8010ff8:	20011a9c 	.word	0x20011a9c
 8010ffc:	2000d238 	.word	0x2000d238
 8011000:	20011a0c 	.word	0x20011a0c
 8011004:	0801904d 	.word	0x0801904d
 8011008:	08019045 	.word	0x08019045
 801100c:	080190e5 	.word	0x080190e5
 8011010:	08019181 	.word	0x08019181

08011014 <rmw_shutdown>:
 8011014:	b570      	push	{r4, r5, r6, lr}
 8011016:	b094      	sub	sp, #80	@ 0x50
 8011018:	2800      	cmp	r0, #0
 801101a:	d050      	beq.n	80110be <rmw_shutdown+0xaa>
 801101c:	4605      	mov	r5, r0
 801101e:	6880      	ldr	r0, [r0, #8]
 8011020:	b128      	cbz	r0, 801102e <rmw_shutdown+0x1a>
 8011022:	4b2b      	ldr	r3, [pc, #172]	@ (80110d0 <rmw_shutdown+0xbc>)
 8011024:	6819      	ldr	r1, [r3, #0]
 8011026:	f7ef f8f3 	bl	8000210 <strcmp>
 801102a:	2800      	cmp	r0, #0
 801102c:	d143      	bne.n	80110b6 <rmw_shutdown+0xa2>
 801102e:	4b29      	ldr	r3, [pc, #164]	@ (80110d4 <rmw_shutdown+0xc0>)
 8011030:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011032:	681c      	ldr	r4, [r3, #0]
 8011034:	2c00      	cmp	r4, #0
 8011036:	d046      	beq.n	80110c6 <rmw_shutdown+0xb2>
 8011038:	2600      	movs	r6, #0
 801103a:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801103e:	6902      	ldr	r2, [r0, #16]
 8011040:	428a      	cmp	r2, r1
 8011042:	d024      	beq.n	801108e <rmw_shutdown+0x7a>
 8011044:	2c00      	cmp	r4, #0
 8011046:	d1f8      	bne.n	801103a <rmw_shutdown+0x26>
 8011048:	b189      	cbz	r1, 801106e <rmw_shutdown+0x5a>
 801104a:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801104e:	789b      	ldrb	r3, [r3, #2]
 8011050:	2b01      	cmp	r3, #1
 8011052:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011056:	bf14      	ite	ne
 8011058:	210a      	movne	r1, #10
 801105a:	2100      	moveq	r1, #0
 801105c:	f003 f986 	bl	801436c <uxr_delete_session_retries>
 8011060:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011062:	f000 fe9f 	bl	8011da4 <rmw_uxrce_fini_session_memory>
 8011066:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011068:	3010      	adds	r0, #16
 801106a:	f002 f8c7 	bl	80131fc <uxr_close_custom_transport>
 801106e:	2300      	movs	r3, #0
 8011070:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011072:	b1b6      	cbz	r6, 80110a2 <rmw_shutdown+0x8e>
 8011074:	4d18      	ldr	r5, [pc, #96]	@ (80110d8 <rmw_shutdown+0xc4>)
 8011076:	682c      	ldr	r4, [r5, #0]
 8011078:	b134      	cbz	r4, 8011088 <rmw_shutdown+0x74>
 801107a:	4621      	mov	r1, r4
 801107c:	6864      	ldr	r4, [r4, #4]
 801107e:	4628      	mov	r0, r5
 8011080:	f008 f8d8 	bl	8019234 <put_memory>
 8011084:	2c00      	cmp	r4, #0
 8011086:	d1f8      	bne.n	801107a <rmw_shutdown+0x66>
 8011088:	4630      	mov	r0, r6
 801108a:	b014      	add	sp, #80	@ 0x50
 801108c:	bd70      	pop	{r4, r5, r6, pc}
 801108e:	3018      	adds	r0, #24
 8011090:	f000 f8e8 	bl	8011264 <rmw_destroy_node>
 8011094:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011096:	4606      	mov	r6, r0
 8011098:	2c00      	cmp	r4, #0
 801109a:	d1ce      	bne.n	801103a <rmw_shutdown+0x26>
 801109c:	2900      	cmp	r1, #0
 801109e:	d1d4      	bne.n	801104a <rmw_shutdown+0x36>
 80110a0:	e7e5      	b.n	801106e <rmw_shutdown+0x5a>
 80110a2:	4668      	mov	r0, sp
 80110a4:	f007 fec4 	bl	8018e30 <rmw_get_zero_initialized_context>
 80110a8:	2250      	movs	r2, #80	@ 0x50
 80110aa:	4669      	mov	r1, sp
 80110ac:	4628      	mov	r0, r5
 80110ae:	f00b fae6 	bl	801c67e <memcpy>
 80110b2:	2600      	movs	r6, #0
 80110b4:	e7de      	b.n	8011074 <rmw_shutdown+0x60>
 80110b6:	260c      	movs	r6, #12
 80110b8:	4630      	mov	r0, r6
 80110ba:	b014      	add	sp, #80	@ 0x50
 80110bc:	bd70      	pop	{r4, r5, r6, pc}
 80110be:	260b      	movs	r6, #11
 80110c0:	4630      	mov	r0, r6
 80110c2:	b014      	add	sp, #80	@ 0x50
 80110c4:	bd70      	pop	{r4, r5, r6, pc}
 80110c6:	2900      	cmp	r1, #0
 80110c8:	d0eb      	beq.n	80110a2 <rmw_shutdown+0x8e>
 80110ca:	4626      	mov	r6, r4
 80110cc:	e7bd      	b.n	801104a <rmw_shutdown+0x36>
 80110ce:	bf00      	nop
 80110d0:	0801e378 	.word	0x0801e378
 80110d4:	20011a2c 	.word	0x20011a2c
 80110d8:	20011a6c 	.word	0x20011a6c

080110dc <rmw_context_fini>:
 80110dc:	4b17      	ldr	r3, [pc, #92]	@ (801113c <rmw_context_fini+0x60>)
 80110de:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80110e0:	b570      	push	{r4, r5, r6, lr}
 80110e2:	681c      	ldr	r4, [r3, #0]
 80110e4:	4605      	mov	r5, r0
 80110e6:	b334      	cbz	r4, 8011136 <rmw_context_fini+0x5a>
 80110e8:	2600      	movs	r6, #0
 80110ea:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80110ee:	6902      	ldr	r2, [r0, #16]
 80110f0:	428a      	cmp	r2, r1
 80110f2:	d018      	beq.n	8011126 <rmw_context_fini+0x4a>
 80110f4:	2c00      	cmp	r4, #0
 80110f6:	d1f8      	bne.n	80110ea <rmw_context_fini+0xe>
 80110f8:	b189      	cbz	r1, 801111e <rmw_context_fini+0x42>
 80110fa:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80110fe:	789b      	ldrb	r3, [r3, #2]
 8011100:	2b01      	cmp	r3, #1
 8011102:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 8011106:	bf14      	ite	ne
 8011108:	210a      	movne	r1, #10
 801110a:	2100      	moveq	r1, #0
 801110c:	f003 f92e 	bl	801436c <uxr_delete_session_retries>
 8011110:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011112:	f000 fe47 	bl	8011da4 <rmw_uxrce_fini_session_memory>
 8011116:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011118:	3010      	adds	r0, #16
 801111a:	f002 f86f 	bl	80131fc <uxr_close_custom_transport>
 801111e:	2300      	movs	r3, #0
 8011120:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8011122:	4630      	mov	r0, r6
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	3018      	adds	r0, #24
 8011128:	f000 f89c 	bl	8011264 <rmw_destroy_node>
 801112c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801112e:	4606      	mov	r6, r0
 8011130:	2c00      	cmp	r4, #0
 8011132:	d1da      	bne.n	80110ea <rmw_context_fini+0xe>
 8011134:	e7e0      	b.n	80110f8 <rmw_context_fini+0x1c>
 8011136:	4626      	mov	r6, r4
 8011138:	e7de      	b.n	80110f8 <rmw_context_fini+0x1c>
 801113a:	bf00      	nop
 801113c:	20011a2c 	.word	0x20011a2c

08011140 <create_node>:
 8011140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011144:	b083      	sub	sp, #12
 8011146:	2b00      	cmp	r3, #0
 8011148:	d05f      	beq.n	801120a <create_node+0xca>
 801114a:	4606      	mov	r6, r0
 801114c:	4835      	ldr	r0, [pc, #212]	@ (8011224 <create_node+0xe4>)
 801114e:	460f      	mov	r7, r1
 8011150:	4690      	mov	r8, r2
 8011152:	461d      	mov	r5, r3
 8011154:	f008 f85e 	bl	8019214 <get_memory>
 8011158:	2800      	cmp	r0, #0
 801115a:	d056      	beq.n	801120a <create_node+0xca>
 801115c:	6884      	ldr	r4, [r0, #8]
 801115e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8011160:	6123      	str	r3, [r4, #16]
 8011162:	f008 f8bf 	bl	80192e4 <rmw_get_implementation_identifier>
 8011166:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801116a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801116e:	f8c4 9020 	str.w	r9, [r4, #32]
 8011172:	4630      	mov	r0, r6
 8011174:	f7ef f856 	bl	8000224 <strlen>
 8011178:	1c42      	adds	r2, r0, #1
 801117a:	2a3c      	cmp	r2, #60	@ 0x3c
 801117c:	f104 0518 	add.w	r5, r4, #24
 8011180:	d840      	bhi.n	8011204 <create_node+0xc4>
 8011182:	4648      	mov	r0, r9
 8011184:	4631      	mov	r1, r6
 8011186:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801118a:	f00b fa78 	bl	801c67e <memcpy>
 801118e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8011192:	4638      	mov	r0, r7
 8011194:	f7ef f846 	bl	8000224 <strlen>
 8011198:	1c42      	adds	r2, r0, #1
 801119a:	2a3c      	cmp	r2, #60	@ 0x3c
 801119c:	d832      	bhi.n	8011204 <create_node+0xc4>
 801119e:	4639      	mov	r1, r7
 80111a0:	4648      	mov	r0, r9
 80111a2:	f00b fa6c 	bl	801c67e <memcpy>
 80111a6:	6923      	ldr	r3, [r4, #16]
 80111a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111ac:	2101      	movs	r1, #1
 80111ae:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 80111b2:	1842      	adds	r2, r0, r1
 80111b4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80111b8:	f002 f824 	bl	8013204 <uxr_object_id>
 80111bc:	6160      	str	r0, [r4, #20]
 80111be:	783b      	ldrb	r3, [r7, #0]
 80111c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80111c2:	d127      	bne.n	8011214 <create_node+0xd4>
 80111c4:	787b      	ldrb	r3, [r7, #1]
 80111c6:	bb2b      	cbnz	r3, 8011214 <create_node+0xd4>
 80111c8:	4a17      	ldr	r2, [pc, #92]	@ (8011228 <create_node+0xe8>)
 80111ca:	4818      	ldr	r0, [pc, #96]	@ (801122c <create_node+0xec>)
 80111cc:	4633      	mov	r3, r6
 80111ce:	213c      	movs	r1, #60	@ 0x3c
 80111d0:	f00b f818 	bl	801c204 <sniprintf>
 80111d4:	6920      	ldr	r0, [r4, #16]
 80111d6:	4915      	ldr	r1, [pc, #84]	@ (801122c <create_node+0xec>)
 80111d8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80111dc:	9100      	str	r1, [sp, #0]
 80111de:	2106      	movs	r1, #6
 80111e0:	9101      	str	r1, [sp, #4]
 80111e2:	6811      	ldr	r1, [r2, #0]
 80111e4:	6962      	ldr	r2, [r4, #20]
 80111e6:	fa1f f388 	uxth.w	r3, r8
 80111ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80111ee:	f001 fd91 	bl	8012d14 <uxr_buffer_create_participant_bin>
 80111f2:	4602      	mov	r2, r0
 80111f4:	6920      	ldr	r0, [r4, #16]
 80111f6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80111fa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80111fe:	f000 ff49 	bl	8012094 <run_xrce_session>
 8011202:	b918      	cbnz	r0, 801120c <create_node+0xcc>
 8011204:	4628      	mov	r0, r5
 8011206:	f000 fdd3 	bl	8011db0 <rmw_uxrce_fini_node_memory>
 801120a:	2500      	movs	r5, #0
 801120c:	4628      	mov	r0, r5
 801120e:	b003      	add	sp, #12
 8011210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011214:	4a06      	ldr	r2, [pc, #24]	@ (8011230 <create_node+0xf0>)
 8011216:	9600      	str	r6, [sp, #0]
 8011218:	463b      	mov	r3, r7
 801121a:	213c      	movs	r1, #60	@ 0x3c
 801121c:	4803      	ldr	r0, [pc, #12]	@ (801122c <create_node+0xec>)
 801121e:	f00a fff1 	bl	801c204 <sniprintf>
 8011222:	e7d7      	b.n	80111d4 <create_node+0x94>
 8011224:	20011a2c 	.word	0x20011a2c
 8011228:	0801d9dc 	.word	0x0801d9dc
 801122c:	2000d120 	.word	0x2000d120
 8011230:	0801d6a4 	.word	0x0801d6a4

08011234 <rmw_create_node>:
 8011234:	b199      	cbz	r1, 801125e <rmw_create_node+0x2a>
 8011236:	780b      	ldrb	r3, [r1, #0]
 8011238:	468c      	mov	ip, r1
 801123a:	b183      	cbz	r3, 801125e <rmw_create_node+0x2a>
 801123c:	b410      	push	{r4}
 801123e:	4614      	mov	r4, r2
 8011240:	b14a      	cbz	r2, 8011256 <rmw_create_node+0x22>
 8011242:	7813      	ldrb	r3, [r2, #0]
 8011244:	b13b      	cbz	r3, 8011256 <rmw_create_node+0x22>
 8011246:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011248:	4603      	mov	r3, r0
 801124a:	4621      	mov	r1, r4
 801124c:	4660      	mov	r0, ip
 801124e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011252:	f7ff bf75 	b.w	8011140 <create_node>
 8011256:	2000      	movs	r0, #0
 8011258:	f85d 4b04 	ldr.w	r4, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	2000      	movs	r0, #0
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop

08011264 <rmw_destroy_node>:
 8011264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011266:	b328      	cbz	r0, 80112b4 <rmw_destroy_node+0x50>
 8011268:	4607      	mov	r7, r0
 801126a:	6800      	ldr	r0, [r0, #0]
 801126c:	b120      	cbz	r0, 8011278 <rmw_destroy_node+0x14>
 801126e:	4b36      	ldr	r3, [pc, #216]	@ (8011348 <rmw_destroy_node+0xe4>)
 8011270:	6819      	ldr	r1, [r3, #0]
 8011272:	f7ee ffcd 	bl	8000210 <strcmp>
 8011276:	b9e8      	cbnz	r0, 80112b4 <rmw_destroy_node+0x50>
 8011278:	687d      	ldr	r5, [r7, #4]
 801127a:	b1dd      	cbz	r5, 80112b4 <rmw_destroy_node+0x50>
 801127c:	4b33      	ldr	r3, [pc, #204]	@ (801134c <rmw_destroy_node+0xe8>)
 801127e:	681c      	ldr	r4, [r3, #0]
 8011280:	2c00      	cmp	r4, #0
 8011282:	d05f      	beq.n	8011344 <rmw_destroy_node+0xe0>
 8011284:	2600      	movs	r6, #0
 8011286:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801128a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801128e:	429d      	cmp	r5, r3
 8011290:	d013      	beq.n	80112ba <rmw_destroy_node+0x56>
 8011292:	2c00      	cmp	r4, #0
 8011294:	d1f7      	bne.n	8011286 <rmw_destroy_node+0x22>
 8011296:	4b2e      	ldr	r3, [pc, #184]	@ (8011350 <rmw_destroy_node+0xec>)
 8011298:	681c      	ldr	r4, [r3, #0]
 801129a:	b1c4      	cbz	r4, 80112ce <rmw_destroy_node+0x6a>
 801129c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112a0:	6a0b      	ldr	r3, [r1, #32]
 80112a2:	429d      	cmp	r5, r3
 80112a4:	d1f9      	bne.n	801129a <rmw_destroy_node+0x36>
 80112a6:	317c      	adds	r1, #124	@ 0x7c
 80112a8:	4638      	mov	r0, r7
 80112aa:	f000 fb37 	bl	801191c <rmw_destroy_subscription>
 80112ae:	2801      	cmp	r0, #1
 80112b0:	4606      	mov	r6, r0
 80112b2:	d1f2      	bne.n	801129a <rmw_destroy_node+0x36>
 80112b4:	2601      	movs	r6, #1
 80112b6:	4630      	mov	r0, r6
 80112b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ba:	3184      	adds	r1, #132	@ 0x84
 80112bc:	4638      	mov	r0, r7
 80112be:	f000 f9a5 	bl	801160c <rmw_destroy_publisher>
 80112c2:	2801      	cmp	r0, #1
 80112c4:	4606      	mov	r6, r0
 80112c6:	d0f5      	beq.n	80112b4 <rmw_destroy_node+0x50>
 80112c8:	2c00      	cmp	r4, #0
 80112ca:	d1dc      	bne.n	8011286 <rmw_destroy_node+0x22>
 80112cc:	e7e3      	b.n	8011296 <rmw_destroy_node+0x32>
 80112ce:	4b21      	ldr	r3, [pc, #132]	@ (8011354 <rmw_destroy_node+0xf0>)
 80112d0:	681c      	ldr	r4, [r3, #0]
 80112d2:	b16c      	cbz	r4, 80112f0 <rmw_destroy_node+0x8c>
 80112d4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112d8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112da:	429d      	cmp	r5, r3
 80112dc:	d1f9      	bne.n	80112d2 <rmw_destroy_node+0x6e>
 80112de:	317c      	adds	r1, #124	@ 0x7c
 80112e0:	4638      	mov	r0, r7
 80112e2:	f000 f9e5 	bl	80116b0 <rmw_destroy_service>
 80112e6:	2801      	cmp	r0, #1
 80112e8:	4606      	mov	r6, r0
 80112ea:	d0e3      	beq.n	80112b4 <rmw_destroy_node+0x50>
 80112ec:	2c00      	cmp	r4, #0
 80112ee:	d1f1      	bne.n	80112d4 <rmw_destroy_node+0x70>
 80112f0:	4b19      	ldr	r3, [pc, #100]	@ (8011358 <rmw_destroy_node+0xf4>)
 80112f2:	681c      	ldr	r4, [r3, #0]
 80112f4:	b16c      	cbz	r4, 8011312 <rmw_destroy_node+0xae>
 80112f6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112fa:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112fc:	429d      	cmp	r5, r3
 80112fe:	d1f9      	bne.n	80112f4 <rmw_destroy_node+0x90>
 8011300:	317c      	adds	r1, #124	@ 0x7c
 8011302:	4638      	mov	r0, r7
 8011304:	f007 ffaa 	bl	801925c <rmw_destroy_client>
 8011308:	2801      	cmp	r0, #1
 801130a:	4606      	mov	r6, r0
 801130c:	d0d2      	beq.n	80112b4 <rmw_destroy_node+0x50>
 801130e:	2c00      	cmp	r4, #0
 8011310:	d1f1      	bne.n	80112f6 <rmw_destroy_node+0x92>
 8011312:	6928      	ldr	r0, [r5, #16]
 8011314:	696a      	ldr	r2, [r5, #20]
 8011316:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801131a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801131e:	6819      	ldr	r1, [r3, #0]
 8011320:	f001 fcac 	bl	8012c7c <uxr_buffer_delete_entity>
 8011324:	4602      	mov	r2, r0
 8011326:	6928      	ldr	r0, [r5, #16]
 8011328:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801132c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011330:	f000 feb0 	bl	8012094 <run_xrce_session>
 8011334:	2800      	cmp	r0, #0
 8011336:	bf08      	it	eq
 8011338:	2602      	moveq	r6, #2
 801133a:	4638      	mov	r0, r7
 801133c:	f000 fd38 	bl	8011db0 <rmw_uxrce_fini_node_memory>
 8011340:	4630      	mov	r0, r6
 8011342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011344:	4626      	mov	r6, r4
 8011346:	e7a6      	b.n	8011296 <rmw_destroy_node+0x32>
 8011348:	0801e378 	.word	0x0801e378
 801134c:	20011a3c 	.word	0x20011a3c
 8011350:	20011a7c 	.word	0x20011a7c
 8011354:	20011a4c 	.word	0x20011a4c
 8011358:	2000d15c 	.word	0x2000d15c

0801135c <rmw_node_get_graph_guard_condition>:
 801135c:	6843      	ldr	r3, [r0, #4]
 801135e:	6918      	ldr	r0, [r3, #16]
 8011360:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop

08011368 <flush_session>:
 8011368:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801136a:	f002 be8d 	b.w	8014088 <uxr_run_session_until_confirm_delivery>
 801136e:	bf00      	nop

08011370 <rmw_publish>:
 8011370:	2800      	cmp	r0, #0
 8011372:	d053      	beq.n	801141c <rmw_publish+0xac>
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	460d      	mov	r5, r1
 8011378:	b08e      	sub	sp, #56	@ 0x38
 801137a:	2900      	cmp	r1, #0
 801137c:	d04b      	beq.n	8011416 <rmw_publish+0xa6>
 801137e:	4604      	mov	r4, r0
 8011380:	6800      	ldr	r0, [r0, #0]
 8011382:	f000 ff07 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 8011386:	2800      	cmp	r0, #0
 8011388:	d045      	beq.n	8011416 <rmw_publish+0xa6>
 801138a:	6866      	ldr	r6, [r4, #4]
 801138c:	2e00      	cmp	r6, #0
 801138e:	d042      	beq.n	8011416 <rmw_publish+0xa6>
 8011390:	69b4      	ldr	r4, [r6, #24]
 8011392:	4628      	mov	r0, r5
 8011394:	6923      	ldr	r3, [r4, #16]
 8011396:	4798      	blx	r3
 8011398:	69f3      	ldr	r3, [r6, #28]
 801139a:	9005      	str	r0, [sp, #20]
 801139c:	b113      	cbz	r3, 80113a4 <rmw_publish+0x34>
 801139e:	a805      	add	r0, sp, #20
 80113a0:	4798      	blx	r3
 80113a2:	9805      	ldr	r0, [sp, #20]
 80113a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	9000      	str	r0, [sp, #0]
 80113ac:	6972      	ldr	r2, [r6, #20]
 80113ae:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80113b0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80113b4:	ab06      	add	r3, sp, #24
 80113b6:	f004 f90f 	bl	80155d8 <uxr_prepare_output_stream>
 80113ba:	b1d8      	cbz	r0, 80113f4 <rmw_publish+0x84>
 80113bc:	68a3      	ldr	r3, [r4, #8]
 80113be:	a906      	add	r1, sp, #24
 80113c0:	4628      	mov	r0, r5
 80113c2:	4798      	blx	r3
 80113c4:	6a33      	ldr	r3, [r6, #32]
 80113c6:	4604      	mov	r4, r0
 80113c8:	b10b      	cbz	r3, 80113ce <rmw_publish+0x5e>
 80113ca:	a806      	add	r0, sp, #24
 80113cc:	4798      	blx	r3
 80113ce:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113d8:	d022      	beq.n	8011420 <rmw_publish+0xb0>
 80113da:	6918      	ldr	r0, [r3, #16]
 80113dc:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80113de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113e2:	f002 fe51 	bl	8014088 <uxr_run_session_until_confirm_delivery>
 80113e6:	4020      	ands	r0, r4
 80113e8:	b2c4      	uxtb	r4, r0
 80113ea:	f084 0001 	eor.w	r0, r4, #1
 80113ee:	b2c0      	uxtb	r0, r0
 80113f0:	b00e      	add	sp, #56	@ 0x38
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80113f8:	6918      	ldr	r0, [r3, #16]
 80113fa:	9b05      	ldr	r3, [sp, #20]
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	4b0b      	ldr	r3, [pc, #44]	@ (801142c <rmw_publish+0xbc>)
 8011400:	9301      	str	r3, [sp, #4]
 8011402:	9602      	str	r6, [sp, #8]
 8011404:	6972      	ldr	r2, [r6, #20]
 8011406:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8011408:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801140c:	ab06      	add	r3, sp, #24
 801140e:	f004 f913 	bl	8015638 <uxr_prepare_output_stream_fragmented>
 8011412:	2800      	cmp	r0, #0
 8011414:	d1d2      	bne.n	80113bc <rmw_publish+0x4c>
 8011416:	2001      	movs	r0, #1
 8011418:	b00e      	add	sp, #56	@ 0x38
 801141a:	bd70      	pop	{r4, r5, r6, pc}
 801141c:	2001      	movs	r0, #1
 801141e:	4770      	bx	lr
 8011420:	6918      	ldr	r0, [r3, #16]
 8011422:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011426:	f002 fa6f 	bl	8013908 <uxr_flash_output_streams>
 801142a:	e7de      	b.n	80113ea <rmw_publish+0x7a>
 801142c:	08011369 	.word	0x08011369

08011430 <rmw_create_publisher>:
 8011430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011434:	b087      	sub	sp, #28
 8011436:	2800      	cmp	r0, #0
 8011438:	f000 80cc 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 801143c:	460e      	mov	r6, r1
 801143e:	2900      	cmp	r1, #0
 8011440:	f000 80c8 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 8011444:	4604      	mov	r4, r0
 8011446:	6800      	ldr	r0, [r0, #0]
 8011448:	4615      	mov	r5, r2
 801144a:	4698      	mov	r8, r3
 801144c:	f000 fea2 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 8011450:	2800      	cmp	r0, #0
 8011452:	f000 80bf 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 8011456:	2d00      	cmp	r5, #0
 8011458:	f000 80bc 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 801145c:	782b      	ldrb	r3, [r5, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 80b8 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 8011464:	f1b8 0f00 	cmp.w	r8, #0
 8011468:	f000 80b4 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 801146c:	485c      	ldr	r0, [pc, #368]	@ (80115e0 <rmw_create_publisher+0x1b0>)
 801146e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011472:	f007 fecf 	bl	8019214 <get_memory>
 8011476:	2800      	cmp	r0, #0
 8011478:	f000 80ac 	beq.w	80115d4 <rmw_create_publisher+0x1a4>
 801147c:	6884      	ldr	r4, [r0, #8]
 801147e:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8011482:	f007 ff2f 	bl	80192e4 <rmw_get_implementation_identifier>
 8011486:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 801148a:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 801148e:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8011492:	4628      	mov	r0, r5
 8011494:	f7ee fec6 	bl	8000224 <strlen>
 8011498:	3001      	adds	r0, #1
 801149a:	283c      	cmp	r0, #60	@ 0x3c
 801149c:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 80114a0:	f200 8091 	bhi.w	80115c6 <rmw_create_publisher+0x196>
 80114a4:	4a4f      	ldr	r2, [pc, #316]	@ (80115e4 <rmw_create_publisher+0x1b4>)
 80114a6:	462b      	mov	r3, r5
 80114a8:	213c      	movs	r1, #60	@ 0x3c
 80114aa:	4650      	mov	r0, sl
 80114ac:	f00a feaa 	bl	801c204 <sniprintf>
 80114b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80114b4:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80114b6:	4641      	mov	r1, r8
 80114b8:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80114bc:	2250      	movs	r2, #80	@ 0x50
 80114be:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80114c2:	f00b f8dc 	bl	801c67e <memcpy>
 80114c6:	f898 3008 	ldrb.w	r3, [r8, #8]
 80114ca:	4947      	ldr	r1, [pc, #284]	@ (80115e8 <rmw_create_publisher+0x1b8>)
 80114cc:	2b02      	cmp	r3, #2
 80114ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114d2:	bf0c      	ite	eq
 80114d4:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80114d8:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80114dc:	67a3      	str	r3, [r4, #120]	@ 0x78
 80114de:	2300      	movs	r3, #0
 80114e0:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80114e4:	4630      	mov	r0, r6
 80114e6:	f000 fe63 	bl	80121b0 <get_message_typesupport_handle>
 80114ea:	2800      	cmp	r0, #0
 80114ec:	d06b      	beq.n	80115c6 <rmw_create_publisher+0x196>
 80114ee:	6842      	ldr	r2, [r0, #4]
 80114f0:	61a2      	str	r2, [r4, #24]
 80114f2:	2a00      	cmp	r2, #0
 80114f4:	d067      	beq.n	80115c6 <rmw_create_publisher+0x196>
 80114f6:	4629      	mov	r1, r5
 80114f8:	4643      	mov	r3, r8
 80114fa:	4648      	mov	r0, r9
 80114fc:	f007 ff20 	bl	8019340 <create_topic>
 8011500:	6260      	str	r0, [r4, #36]	@ 0x24
 8011502:	2800      	cmp	r0, #0
 8011504:	d063      	beq.n	80115ce <rmw_create_publisher+0x19e>
 8011506:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801150a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801150e:	2103      	movs	r1, #3
 8011510:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8011514:	1c42      	adds	r2, r0, #1
 8011516:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 801151a:	f001 fe73 	bl	8013204 <uxr_object_id>
 801151e:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011522:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011526:	6120      	str	r0, [r4, #16]
 8011528:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 801152c:	6910      	ldr	r0, [r2, #16]
 801152e:	2506      	movs	r5, #6
 8011530:	9500      	str	r5, [sp, #0]
 8011532:	6819      	ldr	r1, [r3, #0]
 8011534:	6922      	ldr	r2, [r4, #16]
 8011536:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801153a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801153e:	f001 fc51 	bl	8012de4 <uxr_buffer_create_publisher_bin>
 8011542:	4602      	mov	r2, r0
 8011544:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011548:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801154c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011550:	f000 fda0 	bl	8012094 <run_xrce_session>
 8011554:	b3b8      	cbz	r0, 80115c6 <rmw_create_publisher+0x196>
 8011556:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801155a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801155e:	2105      	movs	r1, #5
 8011560:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8011564:	1c42      	adds	r2, r0, #1
 8011566:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 801156a:	f001 fe4b 	bl	8013204 <uxr_object_id>
 801156e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011572:	6160      	str	r0, [r4, #20]
 8011574:	691e      	ldr	r6, [r3, #16]
 8011576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801157a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 801157e:	f10d 0a10 	add.w	sl, sp, #16
 8011582:	4641      	mov	r1, r8
 8011584:	4650      	mov	r0, sl
 8011586:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 801158a:	f000 fd9f 	bl	80120cc <convert_qos_profile>
 801158e:	9503      	str	r5, [sp, #12]
 8011590:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011594:	9001      	str	r0, [sp, #4]
 8011596:	f8ad 1008 	strh.w	r1, [sp, #8]
 801159a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 80115a4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80115a8:	f8d8 1000 	ldr.w	r1, [r8]
 80115ac:	4630      	mov	r0, r6
 80115ae:	f001 fc79 	bl	8012ea4 <uxr_buffer_create_datawriter_bin>
 80115b2:	4602      	mov	r2, r0
 80115b4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80115b8:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80115bc:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80115c0:	f000 fd68 	bl	8012094 <run_xrce_session>
 80115c4:	b938      	cbnz	r0, 80115d6 <rmw_create_publisher+0x1a6>
 80115c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80115c8:	b108      	cbz	r0, 80115ce <rmw_create_publisher+0x19e>
 80115ca:	f000 fc61 	bl	8011e90 <rmw_uxrce_fini_topic_memory>
 80115ce:	4638      	mov	r0, r7
 80115d0:	f000 fc06 	bl	8011de0 <rmw_uxrce_fini_publisher_memory>
 80115d4:	2700      	movs	r7, #0
 80115d6:	4638      	mov	r0, r7
 80115d8:	b007      	add	sp, #28
 80115da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115de:	bf00      	nop
 80115e0:	20011a3c 	.word	0x20011a3c
 80115e4:	0801d9dc 	.word	0x0801d9dc
 80115e8:	0801d510 	.word	0x0801d510

080115ec <rmw_publisher_get_actual_qos>:
 80115ec:	b150      	cbz	r0, 8011604 <rmw_publisher_get_actual_qos+0x18>
 80115ee:	b508      	push	{r3, lr}
 80115f0:	460b      	mov	r3, r1
 80115f2:	b149      	cbz	r1, 8011608 <rmw_publisher_get_actual_qos+0x1c>
 80115f4:	6841      	ldr	r1, [r0, #4]
 80115f6:	2250      	movs	r2, #80	@ 0x50
 80115f8:	3128      	adds	r1, #40	@ 0x28
 80115fa:	4618      	mov	r0, r3
 80115fc:	f00b f83f 	bl	801c67e <memcpy>
 8011600:	2000      	movs	r0, #0
 8011602:	bd08      	pop	{r3, pc}
 8011604:	200b      	movs	r0, #11
 8011606:	4770      	bx	lr
 8011608:	200b      	movs	r0, #11
 801160a:	bd08      	pop	{r3, pc}

0801160c <rmw_destroy_publisher>:
 801160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801160e:	b128      	cbz	r0, 801161c <rmw_destroy_publisher+0x10>
 8011610:	4604      	mov	r4, r0
 8011612:	6800      	ldr	r0, [r0, #0]
 8011614:	460d      	mov	r5, r1
 8011616:	f000 fdbd 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 801161a:	b910      	cbnz	r0, 8011622 <rmw_destroy_publisher+0x16>
 801161c:	2401      	movs	r4, #1
 801161e:	4620      	mov	r0, r4
 8011620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011622:	6863      	ldr	r3, [r4, #4]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d0f9      	beq.n	801161c <rmw_destroy_publisher+0x10>
 8011628:	2d00      	cmp	r5, #0
 801162a:	d0f7      	beq.n	801161c <rmw_destroy_publisher+0x10>
 801162c:	6828      	ldr	r0, [r5, #0]
 801162e:	f000 fdb1 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 8011632:	2800      	cmp	r0, #0
 8011634:	d0f2      	beq.n	801161c <rmw_destroy_publisher+0x10>
 8011636:	686c      	ldr	r4, [r5, #4]
 8011638:	2c00      	cmp	r4, #0
 801163a:	d0ef      	beq.n	801161c <rmw_destroy_publisher+0x10>
 801163c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801163e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8011642:	f007 fecd 	bl	80193e0 <destroy_topic>
 8011646:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801164a:	6962      	ldr	r2, [r4, #20]
 801164c:	6918      	ldr	r0, [r3, #16]
 801164e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011652:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011656:	6819      	ldr	r1, [r3, #0]
 8011658:	f001 fb10 	bl	8012c7c <uxr_buffer_delete_entity>
 801165c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8011660:	6922      	ldr	r2, [r4, #16]
 8011662:	691b      	ldr	r3, [r3, #16]
 8011664:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011668:	4604      	mov	r4, r0
 801166a:	6809      	ldr	r1, [r1, #0]
 801166c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8011670:	f001 fb04 	bl	8012c7c <uxr_buffer_delete_entity>
 8011674:	693e      	ldr	r6, [r7, #16]
 8011676:	4622      	mov	r2, r4
 8011678:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801167c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011680:	4604      	mov	r4, r0
 8011682:	4630      	mov	r0, r6
 8011684:	f000 fd06 	bl	8012094 <run_xrce_session>
 8011688:	693e      	ldr	r6, [r7, #16]
 801168a:	4622      	mov	r2, r4
 801168c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8011690:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011694:	4604      	mov	r4, r0
 8011696:	4630      	mov	r0, r6
 8011698:	f000 fcfc 	bl	8012094 <run_xrce_session>
 801169c:	b12c      	cbz	r4, 80116aa <rmw_destroy_publisher+0x9e>
 801169e:	b120      	cbz	r0, 80116aa <rmw_destroy_publisher+0x9e>
 80116a0:	2400      	movs	r4, #0
 80116a2:	4628      	mov	r0, r5
 80116a4:	f000 fb9c 	bl	8011de0 <rmw_uxrce_fini_publisher_memory>
 80116a8:	e7b9      	b.n	801161e <rmw_destroy_publisher+0x12>
 80116aa:	2402      	movs	r4, #2
 80116ac:	e7f9      	b.n	80116a2 <rmw_destroy_publisher+0x96>
 80116ae:	bf00      	nop

080116b0 <rmw_destroy_service>:
 80116b0:	b570      	push	{r4, r5, r6, lr}
 80116b2:	b128      	cbz	r0, 80116c0 <rmw_destroy_service+0x10>
 80116b4:	4604      	mov	r4, r0
 80116b6:	6800      	ldr	r0, [r0, #0]
 80116b8:	460d      	mov	r5, r1
 80116ba:	f000 fd6b 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 80116be:	b910      	cbnz	r0, 80116c6 <rmw_destroy_service+0x16>
 80116c0:	2401      	movs	r4, #1
 80116c2:	4620      	mov	r0, r4
 80116c4:	bd70      	pop	{r4, r5, r6, pc}
 80116c6:	6863      	ldr	r3, [r4, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d0f9      	beq.n	80116c0 <rmw_destroy_service+0x10>
 80116cc:	2d00      	cmp	r5, #0
 80116ce:	d0f7      	beq.n	80116c0 <rmw_destroy_service+0x10>
 80116d0:	6828      	ldr	r0, [r5, #0]
 80116d2:	f000 fd5f 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d0f2      	beq.n	80116c0 <rmw_destroy_service+0x10>
 80116da:	686e      	ldr	r6, [r5, #4]
 80116dc:	2e00      	cmp	r6, #0
 80116de:	d0ef      	beq.n	80116c0 <rmw_destroy_service+0x10>
 80116e0:	6864      	ldr	r4, [r4, #4]
 80116e2:	6932      	ldr	r2, [r6, #16]
 80116e4:	6920      	ldr	r0, [r4, #16]
 80116e6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80116ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80116ee:	6819      	ldr	r1, [r3, #0]
 80116f0:	f001 fef6 	bl	80134e0 <uxr_buffer_cancel_data>
 80116f4:	4602      	mov	r2, r0
 80116f6:	6920      	ldr	r0, [r4, #16]
 80116f8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80116fc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011700:	f000 fcc8 	bl	8012094 <run_xrce_session>
 8011704:	6920      	ldr	r0, [r4, #16]
 8011706:	6932      	ldr	r2, [r6, #16]
 8011708:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801170c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011710:	6819      	ldr	r1, [r3, #0]
 8011712:	f001 fab3 	bl	8012c7c <uxr_buffer_delete_entity>
 8011716:	4602      	mov	r2, r0
 8011718:	6920      	ldr	r0, [r4, #16]
 801171a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801171e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8011722:	f000 fcb7 	bl	8012094 <run_xrce_session>
 8011726:	2800      	cmp	r0, #0
 8011728:	4628      	mov	r0, r5
 801172a:	bf14      	ite	ne
 801172c:	2400      	movne	r4, #0
 801172e:	2402      	moveq	r4, #2
 8011730:	f000 fb82 	bl	8011e38 <rmw_uxrce_fini_service_memory>
 8011734:	e7c5      	b.n	80116c2 <rmw_destroy_service+0x12>
 8011736:	bf00      	nop

08011738 <rmw_create_subscription>:
 8011738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173c:	b08d      	sub	sp, #52	@ 0x34
 801173e:	2800      	cmp	r0, #0
 8011740:	f000 80d1 	beq.w	80118e6 <rmw_create_subscription+0x1ae>
 8011744:	460e      	mov	r6, r1
 8011746:	2900      	cmp	r1, #0
 8011748:	f000 80cd 	beq.w	80118e6 <rmw_create_subscription+0x1ae>
 801174c:	4604      	mov	r4, r0
 801174e:	6800      	ldr	r0, [r0, #0]
 8011750:	4615      	mov	r5, r2
 8011752:	4698      	mov	r8, r3
 8011754:	f000 fd1e 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 8011758:	2800      	cmp	r0, #0
 801175a:	f000 80c4 	beq.w	80118e6 <rmw_create_subscription+0x1ae>
 801175e:	2d00      	cmp	r5, #0
 8011760:	f000 80c1 	beq.w	80118e6 <rmw_create_subscription+0x1ae>
 8011764:	782b      	ldrb	r3, [r5, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	f000 80bd 	beq.w	80118e6 <rmw_create_subscription+0x1ae>
 801176c:	f1b8 0f00 	cmp.w	r8, #0
 8011770:	f000 80b9 	beq.w	80118e6 <rmw_create_subscription+0x1ae>
 8011774:	485e      	ldr	r0, [pc, #376]	@ (80118f0 <rmw_create_subscription+0x1b8>)
 8011776:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801177a:	f007 fd4b 	bl	8019214 <get_memory>
 801177e:	4604      	mov	r4, r0
 8011780:	2800      	cmp	r0, #0
 8011782:	f000 80b1 	beq.w	80118e8 <rmw_create_subscription+0x1b0>
 8011786:	6887      	ldr	r7, [r0, #8]
 8011788:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801178c:	f007 fdaa 	bl	80192e4 <rmw_get_implementation_identifier>
 8011790:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 8011794:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011796:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801179a:	4628      	mov	r0, r5
 801179c:	f7ee fd42 	bl	8000224 <strlen>
 80117a0:	3001      	adds	r0, #1
 80117a2:	283c      	cmp	r0, #60	@ 0x3c
 80117a4:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 80117a8:	f200 8096 	bhi.w	80118d8 <rmw_create_subscription+0x1a0>
 80117ac:	4a51      	ldr	r2, [pc, #324]	@ (80118f4 <rmw_create_subscription+0x1bc>)
 80117ae:	462b      	mov	r3, r5
 80117b0:	213c      	movs	r1, #60	@ 0x3c
 80117b2:	4650      	mov	r0, sl
 80117b4:	f00a fd26 	bl	801c204 <sniprintf>
 80117b8:	4641      	mov	r1, r8
 80117ba:	f8c7 9020 	str.w	r9, [r7, #32]
 80117be:	2250      	movs	r2, #80	@ 0x50
 80117c0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80117c4:	f00a ff5b 	bl	801c67e <memcpy>
 80117c8:	494b      	ldr	r1, [pc, #300]	@ (80118f8 <rmw_create_subscription+0x1c0>)
 80117ca:	4630      	mov	r0, r6
 80117cc:	f000 fcf0 	bl	80121b0 <get_message_typesupport_handle>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	f000 8081 	beq.w	80118d8 <rmw_create_subscription+0x1a0>
 80117d6:	6842      	ldr	r2, [r0, #4]
 80117d8:	61ba      	str	r2, [r7, #24]
 80117da:	2a00      	cmp	r2, #0
 80117dc:	d07c      	beq.n	80118d8 <rmw_create_subscription+0x1a0>
 80117de:	4629      	mov	r1, r5
 80117e0:	4643      	mov	r3, r8
 80117e2:	4648      	mov	r0, r9
 80117e4:	f007 fdac 	bl	8019340 <create_topic>
 80117e8:	61f8      	str	r0, [r7, #28]
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d078      	beq.n	80118e0 <rmw_create_subscription+0x1a8>
 80117ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80117f6:	2104      	movs	r1, #4
 80117f8:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80117fc:	1c42      	adds	r2, r0, #1
 80117fe:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8011802:	f001 fcff 	bl	8013204 <uxr_object_id>
 8011806:	6138      	str	r0, [r7, #16]
 8011808:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801180c:	2506      	movs	r5, #6
 801180e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8011812:	9500      	str	r5, [sp, #0]
 8011814:	6819      	ldr	r1, [r3, #0]
 8011816:	693a      	ldr	r2, [r7, #16]
 8011818:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801181c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011820:	f001 fb10 	bl	8012e44 <uxr_buffer_create_subscriber_bin>
 8011824:	4602      	mov	r2, r0
 8011826:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801182a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801182e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8011832:	f000 fc2f 	bl	8012094 <run_xrce_session>
 8011836:	2800      	cmp	r0, #0
 8011838:	d04e      	beq.n	80118d8 <rmw_create_subscription+0x1a0>
 801183a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801183e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011842:	4629      	mov	r1, r5
 8011844:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8011848:	1c42      	adds	r2, r0, #1
 801184a:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801184e:	f001 fcd9 	bl	8013204 <uxr_object_id>
 8011852:	ae08      	add	r6, sp, #32
 8011854:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011858:	69fb      	ldr	r3, [r7, #28]
 801185a:	6178      	str	r0, [r7, #20]
 801185c:	4641      	mov	r1, r8
 801185e:	4630      	mov	r0, r6
 8011860:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8011864:	9305      	str	r3, [sp, #20]
 8011866:	f000 fc31 	bl	80120cc <convert_qos_profile>
 801186a:	9503      	str	r5, [sp, #12]
 801186c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011870:	9b05      	ldr	r3, [sp, #20]
 8011872:	9001      	str	r0, [sp, #4]
 8011874:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011878:	691b      	ldr	r3, [r3, #16]
 801187a:	9300      	str	r3, [sp, #0]
 801187c:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 8011880:	f8db 1000 	ldr.w	r1, [fp]
 8011884:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8011888:	f001 fb82 	bl	8012f90 <uxr_buffer_create_datareader_bin>
 801188c:	4602      	mov	r2, r0
 801188e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011892:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8011896:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801189a:	f000 fbfb 	bl	8012094 <run_xrce_session>
 801189e:	b1d8      	cbz	r0, 80118d8 <rmw_create_subscription+0x1a0>
 80118a0:	f898 3008 	ldrb.w	r3, [r8, #8]
 80118a4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80118a8:	2b02      	cmp	r3, #2
 80118aa:	bf0c      	ite	eq
 80118ac:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 80118b0:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 80118b4:	9307      	str	r3, [sp, #28]
 80118b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80118ba:	2200      	movs	r2, #0
 80118bc:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 80118c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80118c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	697a      	ldr	r2, [r7, #20]
 80118ca:	9b07      	ldr	r3, [sp, #28]
 80118cc:	6809      	ldr	r1, [r1, #0]
 80118ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80118d2:	f001 fdcb 	bl	801346c <uxr_buffer_request_data>
 80118d6:	e007      	b.n	80118e8 <rmw_create_subscription+0x1b0>
 80118d8:	69f8      	ldr	r0, [r7, #28]
 80118da:	b108      	cbz	r0, 80118e0 <rmw_create_subscription+0x1a8>
 80118dc:	f000 fad8 	bl	8011e90 <rmw_uxrce_fini_topic_memory>
 80118e0:	4620      	mov	r0, r4
 80118e2:	f000 fa93 	bl	8011e0c <rmw_uxrce_fini_subscription_memory>
 80118e6:	2400      	movs	r4, #0
 80118e8:	4620      	mov	r0, r4
 80118ea:	b00d      	add	sp, #52	@ 0x34
 80118ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f0:	20011a7c 	.word	0x20011a7c
 80118f4:	0801d9dc 	.word	0x0801d9dc
 80118f8:	0801d510 	.word	0x0801d510

080118fc <rmw_subscription_get_actual_qos>:
 80118fc:	b150      	cbz	r0, 8011914 <rmw_subscription_get_actual_qos+0x18>
 80118fe:	b508      	push	{r3, lr}
 8011900:	460b      	mov	r3, r1
 8011902:	b149      	cbz	r1, 8011918 <rmw_subscription_get_actual_qos+0x1c>
 8011904:	6841      	ldr	r1, [r0, #4]
 8011906:	2250      	movs	r2, #80	@ 0x50
 8011908:	3128      	adds	r1, #40	@ 0x28
 801190a:	4618      	mov	r0, r3
 801190c:	f00a feb7 	bl	801c67e <memcpy>
 8011910:	2000      	movs	r0, #0
 8011912:	bd08      	pop	{r3, pc}
 8011914:	200b      	movs	r0, #11
 8011916:	4770      	bx	lr
 8011918:	200b      	movs	r0, #11
 801191a:	bd08      	pop	{r3, pc}

0801191c <rmw_destroy_subscription>:
 801191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191e:	b128      	cbz	r0, 801192c <rmw_destroy_subscription+0x10>
 8011920:	4604      	mov	r4, r0
 8011922:	6800      	ldr	r0, [r0, #0]
 8011924:	460d      	mov	r5, r1
 8011926:	f000 fc35 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 801192a:	b910      	cbnz	r0, 8011932 <rmw_destroy_subscription+0x16>
 801192c:	2401      	movs	r4, #1
 801192e:	4620      	mov	r0, r4
 8011930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011932:	6863      	ldr	r3, [r4, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d0f9      	beq.n	801192c <rmw_destroy_subscription+0x10>
 8011938:	2d00      	cmp	r5, #0
 801193a:	d0f7      	beq.n	801192c <rmw_destroy_subscription+0x10>
 801193c:	6828      	ldr	r0, [r5, #0]
 801193e:	f000 fc29 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 8011942:	2800      	cmp	r0, #0
 8011944:	d0f2      	beq.n	801192c <rmw_destroy_subscription+0x10>
 8011946:	686c      	ldr	r4, [r5, #4]
 8011948:	2c00      	cmp	r4, #0
 801194a:	d0ef      	beq.n	801192c <rmw_destroy_subscription+0x10>
 801194c:	6a26      	ldr	r6, [r4, #32]
 801194e:	6962      	ldr	r2, [r4, #20]
 8011950:	6930      	ldr	r0, [r6, #16]
 8011952:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011956:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801195a:	6819      	ldr	r1, [r3, #0]
 801195c:	f001 fdc0 	bl	80134e0 <uxr_buffer_cancel_data>
 8011960:	4602      	mov	r2, r0
 8011962:	6930      	ldr	r0, [r6, #16]
 8011964:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011968:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801196c:	f000 fb92 	bl	8012094 <run_xrce_session>
 8011970:	69e0      	ldr	r0, [r4, #28]
 8011972:	f007 fd35 	bl	80193e0 <destroy_topic>
 8011976:	6a23      	ldr	r3, [r4, #32]
 8011978:	6962      	ldr	r2, [r4, #20]
 801197a:	6918      	ldr	r0, [r3, #16]
 801197c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011980:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011984:	6819      	ldr	r1, [r3, #0]
 8011986:	f001 f979 	bl	8012c7c <uxr_buffer_delete_entity>
 801198a:	6a23      	ldr	r3, [r4, #32]
 801198c:	6922      	ldr	r2, [r4, #16]
 801198e:	691b      	ldr	r3, [r3, #16]
 8011990:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011994:	4604      	mov	r4, r0
 8011996:	6809      	ldr	r1, [r1, #0]
 8011998:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801199c:	f001 f96e 	bl	8012c7c <uxr_buffer_delete_entity>
 80119a0:	6937      	ldr	r7, [r6, #16]
 80119a2:	4622      	mov	r2, r4
 80119a4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80119a8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80119ac:	4604      	mov	r4, r0
 80119ae:	4638      	mov	r0, r7
 80119b0:	f000 fb70 	bl	8012094 <run_xrce_session>
 80119b4:	6936      	ldr	r6, [r6, #16]
 80119b6:	4622      	mov	r2, r4
 80119b8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 80119bc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 80119c0:	4604      	mov	r4, r0
 80119c2:	4630      	mov	r0, r6
 80119c4:	f000 fb66 	bl	8012094 <run_xrce_session>
 80119c8:	b12c      	cbz	r4, 80119d6 <rmw_destroy_subscription+0xba>
 80119ca:	b120      	cbz	r0, 80119d6 <rmw_destroy_subscription+0xba>
 80119cc:	2400      	movs	r4, #0
 80119ce:	4628      	mov	r0, r5
 80119d0:	f000 fa1c 	bl	8011e0c <rmw_uxrce_fini_subscription_memory>
 80119d4:	e7ab      	b.n	801192e <rmw_destroy_subscription+0x12>
 80119d6:	2402      	movs	r4, #2
 80119d8:	e7f9      	b.n	80119ce <rmw_destroy_subscription+0xb2>
 80119da:	bf00      	nop

080119dc <rmw_take_with_info>:
 80119dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119de:	4604      	mov	r4, r0
 80119e0:	6800      	ldr	r0, [r0, #0]
 80119e2:	b089      	sub	sp, #36	@ 0x24
 80119e4:	460f      	mov	r7, r1
 80119e6:	4615      	mov	r5, r2
 80119e8:	b128      	cbz	r0, 80119f6 <rmw_take_with_info+0x1a>
 80119ea:	4b24      	ldr	r3, [pc, #144]	@ (8011a7c <rmw_take_with_info+0xa0>)
 80119ec:	6819      	ldr	r1, [r3, #0]
 80119ee:	f7ee fc0f 	bl	8000210 <strcmp>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d13e      	bne.n	8011a74 <rmw_take_with_info+0x98>
 80119f6:	b305      	cbz	r5, 8011a3a <rmw_take_with_info+0x5e>
 80119f8:	6864      	ldr	r4, [r4, #4]
 80119fa:	2300      	movs	r3, #0
 80119fc:	702b      	strb	r3, [r5, #0]
 80119fe:	f000 facb 	bl	8011f98 <rmw_uxrce_clean_expired_static_input_buffer>
 8011a02:	4620      	mov	r0, r4
 8011a04:	f000 faa0 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a08:	4606      	mov	r6, r0
 8011a0a:	b1f0      	cbz	r0, 8011a4a <rmw_take_with_info+0x6e>
 8011a0c:	6881      	ldr	r1, [r0, #8]
 8011a0e:	4668      	mov	r0, sp
 8011a10:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011a14:	3110      	adds	r1, #16
 8011a16:	f7fc fa89 	bl	800df2c <ucdr_init_buffer>
 8011a1a:	69a3      	ldr	r3, [r4, #24]
 8011a1c:	4639      	mov	r1, r7
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	4668      	mov	r0, sp
 8011a22:	4798      	blx	r3
 8011a24:	4631      	mov	r1, r6
 8011a26:	4604      	mov	r4, r0
 8011a28:	4815      	ldr	r0, [pc, #84]	@ (8011a80 <rmw_take_with_info+0xa4>)
 8011a2a:	f007 fc03 	bl	8019234 <put_memory>
 8011a2e:	702c      	strb	r4, [r5, #0]
 8011a30:	f084 0001 	eor.w	r0, r4, #1
 8011a34:	b2c0      	uxtb	r0, r0
 8011a36:	b009      	add	sp, #36	@ 0x24
 8011a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a3a:	6864      	ldr	r4, [r4, #4]
 8011a3c:	f000 faac 	bl	8011f98 <rmw_uxrce_clean_expired_static_input_buffer>
 8011a40:	4620      	mov	r0, r4
 8011a42:	f000 fa81 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a46:	4605      	mov	r5, r0
 8011a48:	b910      	cbnz	r0, 8011a50 <rmw_take_with_info+0x74>
 8011a4a:	2001      	movs	r0, #1
 8011a4c:	b009      	add	sp, #36	@ 0x24
 8011a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a50:	68a9      	ldr	r1, [r5, #8]
 8011a52:	4668      	mov	r0, sp
 8011a54:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8011a58:	3110      	adds	r1, #16
 8011a5a:	f7fc fa67 	bl	800df2c <ucdr_init_buffer>
 8011a5e:	69a3      	ldr	r3, [r4, #24]
 8011a60:	4639      	mov	r1, r7
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	4668      	mov	r0, sp
 8011a66:	4798      	blx	r3
 8011a68:	4629      	mov	r1, r5
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	4804      	ldr	r0, [pc, #16]	@ (8011a80 <rmw_take_with_info+0xa4>)
 8011a6e:	f007 fbe1 	bl	8019234 <put_memory>
 8011a72:	e7dd      	b.n	8011a30 <rmw_take_with_info+0x54>
 8011a74:	200c      	movs	r0, #12
 8011a76:	b009      	add	sp, #36	@ 0x24
 8011a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	0801e378 	.word	0x0801e378
 8011a80:	20011a6c 	.word	0x20011a6c

08011a84 <rmw_uxrce_transport_init>:
 8011a84:	b508      	push	{r3, lr}
 8011a86:	b108      	cbz	r0, 8011a8c <rmw_uxrce_transport_init+0x8>
 8011a88:	f100 0210 	add.w	r2, r0, #16
 8011a8c:	b139      	cbz	r1, 8011a9e <rmw_uxrce_transport_init+0x1a>
 8011a8e:	6949      	ldr	r1, [r1, #20]
 8011a90:	4610      	mov	r0, r2
 8011a92:	f001 fb7f 	bl	8013194 <uxr_init_custom_transport>
 8011a96:	f080 0001 	eor.w	r0, r0, #1
 8011a9a:	b2c0      	uxtb	r0, r0
 8011a9c:	bd08      	pop	{r3, pc}
 8011a9e:	4b04      	ldr	r3, [pc, #16]	@ (8011ab0 <rmw_uxrce_transport_init+0x2c>)
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	6859      	ldr	r1, [r3, #4]
 8011aa4:	f001 fb76 	bl	8013194 <uxr_init_custom_transport>
 8011aa8:	f080 0001 	eor.w	r0, r0, #1
 8011aac:	b2c0      	uxtb	r0, r0
 8011aae:	bd08      	pop	{r3, pc}
 8011ab0:	2000d104 	.word	0x2000d104

08011ab4 <rmw_uros_set_publisher_session_timeout>:
 8011ab4:	b118      	cbz	r0, 8011abe <rmw_uros_set_publisher_session_timeout+0xa>
 8011ab6:	6843      	ldr	r3, [r0, #4]
 8011ab8:	2000      	movs	r0, #0
 8011aba:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8011abc:	4770      	bx	lr
 8011abe:	200b      	movs	r0, #11
 8011ac0:	4770      	bx	lr
 8011ac2:	bf00      	nop

08011ac4 <rmw_uros_set_context_entity_destroy_session_timeout>:
 8011ac4:	b160      	cbz	r0, 8011ae0 <rmw_uros_set_context_entity_destroy_session_timeout+0x1c>
 8011ac6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8011ac8:	2900      	cmp	r1, #0
 8011aca:	bfd4      	ite	le
 8011acc:	f503 725f 	addle.w	r2, r3, #892	@ 0x37c
 8011ad0:	f503 725e 	addgt.w	r2, r3, #888	@ 0x378
 8011ad4:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
 8011ad8:	f8c3 1390 	str.w	r1, [r3, #912]	@ 0x390
 8011adc:	2000      	movs	r0, #0
 8011ade:	4770      	bx	lr
 8011ae0:	200b      	movs	r0, #11
 8011ae2:	4770      	bx	lr

08011ae4 <rmw_uxrce_init_service_memory>:
 8011ae4:	b1e2      	cbz	r2, 8011b20 <rmw_uxrce_init_service_memory+0x3c>
 8011ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	7b05      	ldrb	r5, [r0, #12]
 8011aec:	4606      	mov	r6, r0
 8011aee:	b9ad      	cbnz	r5, 8011b1c <rmw_uxrce_init_service_memory+0x38>
 8011af0:	23c8      	movs	r3, #200	@ 0xc8
 8011af2:	e9c0 5500 	strd	r5, r5, [r0]
 8011af6:	6083      	str	r3, [r0, #8]
 8011af8:	f240 1301 	movw	r3, #257	@ 0x101
 8011afc:	4617      	mov	r7, r2
 8011afe:	8183      	strh	r3, [r0, #12]
 8011b00:	460c      	mov	r4, r1
 8011b02:	46a8      	mov	r8, r5
 8011b04:	4621      	mov	r1, r4
 8011b06:	4630      	mov	r0, r6
 8011b08:	3501      	adds	r5, #1
 8011b0a:	f007 fb93 	bl	8019234 <put_memory>
 8011b0e:	42af      	cmp	r7, r5
 8011b10:	60a4      	str	r4, [r4, #8]
 8011b12:	f884 800c 	strb.w	r8, [r4, #12]
 8011b16:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011b1a:	d1f3      	bne.n	8011b04 <rmw_uxrce_init_service_memory+0x20>
 8011b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop

08011b24 <rmw_uxrce_init_client_memory>:
 8011b24:	b1e2      	cbz	r2, 8011b60 <rmw_uxrce_init_client_memory+0x3c>
 8011b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2a:	7b05      	ldrb	r5, [r0, #12]
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	b9ad      	cbnz	r5, 8011b5c <rmw_uxrce_init_client_memory+0x38>
 8011b30:	23c8      	movs	r3, #200	@ 0xc8
 8011b32:	e9c0 5500 	strd	r5, r5, [r0]
 8011b36:	6083      	str	r3, [r0, #8]
 8011b38:	f240 1301 	movw	r3, #257	@ 0x101
 8011b3c:	4617      	mov	r7, r2
 8011b3e:	8183      	strh	r3, [r0, #12]
 8011b40:	460c      	mov	r4, r1
 8011b42:	46a8      	mov	r8, r5
 8011b44:	4621      	mov	r1, r4
 8011b46:	4630      	mov	r0, r6
 8011b48:	3501      	adds	r5, #1
 8011b4a:	f007 fb73 	bl	8019234 <put_memory>
 8011b4e:	42af      	cmp	r7, r5
 8011b50:	60a4      	str	r4, [r4, #8]
 8011b52:	f884 800c 	strb.w	r8, [r4, #12]
 8011b56:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8011b5a:	d1f3      	bne.n	8011b44 <rmw_uxrce_init_client_memory+0x20>
 8011b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop

08011b64 <rmw_uxrce_init_publisher_memory>:
 8011b64:	b1e2      	cbz	r2, 8011ba0 <rmw_uxrce_init_publisher_memory+0x3c>
 8011b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6a:	7b05      	ldrb	r5, [r0, #12]
 8011b6c:	4606      	mov	r6, r0
 8011b6e:	b9ad      	cbnz	r5, 8011b9c <rmw_uxrce_init_publisher_memory+0x38>
 8011b70:	23d8      	movs	r3, #216	@ 0xd8
 8011b72:	e9c0 5500 	strd	r5, r5, [r0]
 8011b76:	6083      	str	r3, [r0, #8]
 8011b78:	f240 1301 	movw	r3, #257	@ 0x101
 8011b7c:	4617      	mov	r7, r2
 8011b7e:	8183      	strh	r3, [r0, #12]
 8011b80:	460c      	mov	r4, r1
 8011b82:	46a8      	mov	r8, r5
 8011b84:	4621      	mov	r1, r4
 8011b86:	4630      	mov	r0, r6
 8011b88:	3501      	adds	r5, #1
 8011b8a:	f007 fb53 	bl	8019234 <put_memory>
 8011b8e:	42af      	cmp	r7, r5
 8011b90:	60a4      	str	r4, [r4, #8]
 8011b92:	f884 800c 	strb.w	r8, [r4, #12]
 8011b96:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011b9a:	d1f3      	bne.n	8011b84 <rmw_uxrce_init_publisher_memory+0x20>
 8011b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop

08011ba4 <rmw_uxrce_init_subscription_memory>:
 8011ba4:	b1e2      	cbz	r2, 8011be0 <rmw_uxrce_init_subscription_memory+0x3c>
 8011ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011baa:	7b05      	ldrb	r5, [r0, #12]
 8011bac:	4606      	mov	r6, r0
 8011bae:	b9ad      	cbnz	r5, 8011bdc <rmw_uxrce_init_subscription_memory+0x38>
 8011bb0:	23d8      	movs	r3, #216	@ 0xd8
 8011bb2:	e9c0 5500 	strd	r5, r5, [r0]
 8011bb6:	6083      	str	r3, [r0, #8]
 8011bb8:	f240 1301 	movw	r3, #257	@ 0x101
 8011bbc:	4617      	mov	r7, r2
 8011bbe:	8183      	strh	r3, [r0, #12]
 8011bc0:	460c      	mov	r4, r1
 8011bc2:	46a8      	mov	r8, r5
 8011bc4:	4621      	mov	r1, r4
 8011bc6:	4630      	mov	r0, r6
 8011bc8:	3501      	adds	r5, #1
 8011bca:	f007 fb33 	bl	8019234 <put_memory>
 8011bce:	42af      	cmp	r7, r5
 8011bd0:	60a4      	str	r4, [r4, #8]
 8011bd2:	f884 800c 	strb.w	r8, [r4, #12]
 8011bd6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8011bda:	d1f3      	bne.n	8011bc4 <rmw_uxrce_init_subscription_memory+0x20>
 8011bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop

08011be4 <rmw_uxrce_init_node_memory>:
 8011be4:	b1e2      	cbz	r2, 8011c20 <rmw_uxrce_init_node_memory+0x3c>
 8011be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bea:	7b05      	ldrb	r5, [r0, #12]
 8011bec:	4606      	mov	r6, r0
 8011bee:	b9ad      	cbnz	r5, 8011c1c <rmw_uxrce_init_node_memory+0x38>
 8011bf0:	23a4      	movs	r3, #164	@ 0xa4
 8011bf2:	e9c0 5500 	strd	r5, r5, [r0]
 8011bf6:	6083      	str	r3, [r0, #8]
 8011bf8:	f240 1301 	movw	r3, #257	@ 0x101
 8011bfc:	4617      	mov	r7, r2
 8011bfe:	8183      	strh	r3, [r0, #12]
 8011c00:	460c      	mov	r4, r1
 8011c02:	46a8      	mov	r8, r5
 8011c04:	4621      	mov	r1, r4
 8011c06:	4630      	mov	r0, r6
 8011c08:	3501      	adds	r5, #1
 8011c0a:	f007 fb13 	bl	8019234 <put_memory>
 8011c0e:	42af      	cmp	r7, r5
 8011c10:	60a4      	str	r4, [r4, #8]
 8011c12:	f884 800c 	strb.w	r8, [r4, #12]
 8011c16:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8011c1a:	d1f3      	bne.n	8011c04 <rmw_uxrce_init_node_memory+0x20>
 8011c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop

08011c24 <rmw_uxrce_init_session_memory>:
 8011c24:	b1ea      	cbz	r2, 8011c62 <rmw_uxrce_init_session_memory+0x3e>
 8011c26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c2a:	7b05      	ldrb	r5, [r0, #12]
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	b9b5      	cbnz	r5, 8011c5e <rmw_uxrce_init_session_memory+0x3a>
 8011c30:	e9c0 5500 	strd	r5, r5, [r0]
 8011c34:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8011c38:	f240 1301 	movw	r3, #257	@ 0x101
 8011c3c:	4617      	mov	r7, r2
 8011c3e:	f8c0 8008 	str.w	r8, [r0, #8]
 8011c42:	460c      	mov	r4, r1
 8011c44:	8183      	strh	r3, [r0, #12]
 8011c46:	46a9      	mov	r9, r5
 8011c48:	4621      	mov	r1, r4
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	3501      	adds	r5, #1
 8011c4e:	f007 faf1 	bl	8019234 <put_memory>
 8011c52:	42af      	cmp	r7, r5
 8011c54:	60a4      	str	r4, [r4, #8]
 8011c56:	f884 900c 	strb.w	r9, [r4, #12]
 8011c5a:	4444      	add	r4, r8
 8011c5c:	d1f4      	bne.n	8011c48 <rmw_uxrce_init_session_memory+0x24>
 8011c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c62:	4770      	bx	lr

08011c64 <rmw_uxrce_init_topic_memory>:
 8011c64:	b1e2      	cbz	r2, 8011ca0 <rmw_uxrce_init_topic_memory+0x3c>
 8011c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c6a:	7b05      	ldrb	r5, [r0, #12]
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	b9ad      	cbnz	r5, 8011c9c <rmw_uxrce_init_topic_memory+0x38>
 8011c70:	231c      	movs	r3, #28
 8011c72:	e9c0 5500 	strd	r5, r5, [r0]
 8011c76:	6083      	str	r3, [r0, #8]
 8011c78:	f240 1301 	movw	r3, #257	@ 0x101
 8011c7c:	4617      	mov	r7, r2
 8011c7e:	8183      	strh	r3, [r0, #12]
 8011c80:	460c      	mov	r4, r1
 8011c82:	46a8      	mov	r8, r5
 8011c84:	4621      	mov	r1, r4
 8011c86:	4630      	mov	r0, r6
 8011c88:	3501      	adds	r5, #1
 8011c8a:	f007 fad3 	bl	8019234 <put_memory>
 8011c8e:	42af      	cmp	r7, r5
 8011c90:	60a4      	str	r4, [r4, #8]
 8011c92:	f884 800c 	strb.w	r8, [r4, #12]
 8011c96:	f104 041c 	add.w	r4, r4, #28
 8011c9a:	d1f3      	bne.n	8011c84 <rmw_uxrce_init_topic_memory+0x20>
 8011c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop

08011ca4 <rmw_uxrce_init_static_input_buffer_memory>:
 8011ca4:	b1ea      	cbz	r2, 8011ce2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8011ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011caa:	7b05      	ldrb	r5, [r0, #12]
 8011cac:	4606      	mov	r6, r0
 8011cae:	b9b5      	cbnz	r5, 8011cde <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8011cb0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8011cb4:	e9c0 5500 	strd	r5, r5, [r0]
 8011cb8:	6083      	str	r3, [r0, #8]
 8011cba:	f240 1301 	movw	r3, #257	@ 0x101
 8011cbe:	4617      	mov	r7, r2
 8011cc0:	8183      	strh	r3, [r0, #12]
 8011cc2:	460c      	mov	r4, r1
 8011cc4:	46a8      	mov	r8, r5
 8011cc6:	4621      	mov	r1, r4
 8011cc8:	4630      	mov	r0, r6
 8011cca:	3501      	adds	r5, #1
 8011ccc:	f007 fab2 	bl	8019234 <put_memory>
 8011cd0:	42af      	cmp	r7, r5
 8011cd2:	60a4      	str	r4, [r4, #8]
 8011cd4:	f884 800c 	strb.w	r8, [r4, #12]
 8011cd8:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8011cdc:	d1f3      	bne.n	8011cc6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8011cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ce2:	4770      	bx	lr

08011ce4 <rmw_uxrce_init_init_options_impl_memory>:
 8011ce4:	b1e2      	cbz	r2, 8011d20 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8011ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cea:	7b05      	ldrb	r5, [r0, #12]
 8011cec:	4606      	mov	r6, r0
 8011cee:	b9ad      	cbnz	r5, 8011d1c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8011cf0:	232c      	movs	r3, #44	@ 0x2c
 8011cf2:	e9c0 5500 	strd	r5, r5, [r0]
 8011cf6:	6083      	str	r3, [r0, #8]
 8011cf8:	f240 1301 	movw	r3, #257	@ 0x101
 8011cfc:	4617      	mov	r7, r2
 8011cfe:	8183      	strh	r3, [r0, #12]
 8011d00:	460c      	mov	r4, r1
 8011d02:	46a8      	mov	r8, r5
 8011d04:	4621      	mov	r1, r4
 8011d06:	4630      	mov	r0, r6
 8011d08:	3501      	adds	r5, #1
 8011d0a:	f007 fa93 	bl	8019234 <put_memory>
 8011d0e:	42af      	cmp	r7, r5
 8011d10:	60a4      	str	r4, [r4, #8]
 8011d12:	f884 800c 	strb.w	r8, [r4, #12]
 8011d16:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8011d1a:	d1f3      	bne.n	8011d04 <rmw_uxrce_init_init_options_impl_memory+0x20>
 8011d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop

08011d24 <rmw_uxrce_init_wait_set_memory>:
 8011d24:	b1e2      	cbz	r2, 8011d60 <rmw_uxrce_init_wait_set_memory+0x3c>
 8011d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d2a:	7b05      	ldrb	r5, [r0, #12]
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	b9ad      	cbnz	r5, 8011d5c <rmw_uxrce_init_wait_set_memory+0x38>
 8011d30:	231c      	movs	r3, #28
 8011d32:	e9c0 5500 	strd	r5, r5, [r0]
 8011d36:	6083      	str	r3, [r0, #8]
 8011d38:	f240 1301 	movw	r3, #257	@ 0x101
 8011d3c:	4617      	mov	r7, r2
 8011d3e:	8183      	strh	r3, [r0, #12]
 8011d40:	460c      	mov	r4, r1
 8011d42:	46a8      	mov	r8, r5
 8011d44:	4621      	mov	r1, r4
 8011d46:	4630      	mov	r0, r6
 8011d48:	3501      	adds	r5, #1
 8011d4a:	f007 fa73 	bl	8019234 <put_memory>
 8011d4e:	42af      	cmp	r7, r5
 8011d50:	60a4      	str	r4, [r4, #8]
 8011d52:	f884 800c 	strb.w	r8, [r4, #12]
 8011d56:	f104 041c 	add.w	r4, r4, #28
 8011d5a:	d1f3      	bne.n	8011d44 <rmw_uxrce_init_wait_set_memory+0x20>
 8011d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop

08011d64 <rmw_uxrce_init_guard_condition_memory>:
 8011d64:	b1e2      	cbz	r2, 8011da0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8011d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d6a:	7b05      	ldrb	r5, [r0, #12]
 8011d6c:	4606      	mov	r6, r0
 8011d6e:	b9ad      	cbnz	r5, 8011d9c <rmw_uxrce_init_guard_condition_memory+0x38>
 8011d70:	2320      	movs	r3, #32
 8011d72:	e9c0 5500 	strd	r5, r5, [r0]
 8011d76:	6083      	str	r3, [r0, #8]
 8011d78:	f240 1301 	movw	r3, #257	@ 0x101
 8011d7c:	4617      	mov	r7, r2
 8011d7e:	8183      	strh	r3, [r0, #12]
 8011d80:	460c      	mov	r4, r1
 8011d82:	46a8      	mov	r8, r5
 8011d84:	4621      	mov	r1, r4
 8011d86:	4630      	mov	r0, r6
 8011d88:	3501      	adds	r5, #1
 8011d8a:	f007 fa53 	bl	8019234 <put_memory>
 8011d8e:	42af      	cmp	r7, r5
 8011d90:	60a4      	str	r4, [r4, #8]
 8011d92:	f884 800c 	strb.w	r8, [r4, #12]
 8011d96:	f104 0420 	add.w	r4, r4, #32
 8011d9a:	d1f3      	bne.n	8011d84 <rmw_uxrce_init_guard_condition_memory+0x20>
 8011d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop

08011da4 <rmw_uxrce_fini_session_memory>:
 8011da4:	4601      	mov	r1, r0
 8011da6:	4801      	ldr	r0, [pc, #4]	@ (8011dac <rmw_uxrce_fini_session_memory+0x8>)
 8011da8:	f007 ba44 	b.w	8019234 <put_memory>
 8011dac:	20011a5c 	.word	0x20011a5c

08011db0 <rmw_uxrce_fini_node_memory>:
 8011db0:	b538      	push	{r3, r4, r5, lr}
 8011db2:	4604      	mov	r4, r0
 8011db4:	6800      	ldr	r0, [r0, #0]
 8011db6:	b128      	cbz	r0, 8011dc4 <rmw_uxrce_fini_node_memory+0x14>
 8011db8:	4b07      	ldr	r3, [pc, #28]	@ (8011dd8 <rmw_uxrce_fini_node_memory+0x28>)
 8011dba:	6819      	ldr	r1, [r3, #0]
 8011dbc:	f7ee fa28 	bl	8000210 <strcmp>
 8011dc0:	b940      	cbnz	r0, 8011dd4 <rmw_uxrce_fini_node_memory+0x24>
 8011dc2:	6020      	str	r0, [r4, #0]
 8011dc4:	6861      	ldr	r1, [r4, #4]
 8011dc6:	b129      	cbz	r1, 8011dd4 <rmw_uxrce_fini_node_memory+0x24>
 8011dc8:	2500      	movs	r5, #0
 8011dca:	4804      	ldr	r0, [pc, #16]	@ (8011ddc <rmw_uxrce_fini_node_memory+0x2c>)
 8011dcc:	610d      	str	r5, [r1, #16]
 8011dce:	f007 fa31 	bl	8019234 <put_memory>
 8011dd2:	6065      	str	r5, [r4, #4]
 8011dd4:	bd38      	pop	{r3, r4, r5, pc}
 8011dd6:	bf00      	nop
 8011dd8:	0801e378 	.word	0x0801e378
 8011ddc:	20011a2c 	.word	0x20011a2c

08011de0 <rmw_uxrce_fini_publisher_memory>:
 8011de0:	b510      	push	{r4, lr}
 8011de2:	4604      	mov	r4, r0
 8011de4:	6800      	ldr	r0, [r0, #0]
 8011de6:	b128      	cbz	r0, 8011df4 <rmw_uxrce_fini_publisher_memory+0x14>
 8011de8:	4b06      	ldr	r3, [pc, #24]	@ (8011e04 <rmw_uxrce_fini_publisher_memory+0x24>)
 8011dea:	6819      	ldr	r1, [r3, #0]
 8011dec:	f7ee fa10 	bl	8000210 <strcmp>
 8011df0:	b938      	cbnz	r0, 8011e02 <rmw_uxrce_fini_publisher_memory+0x22>
 8011df2:	6020      	str	r0, [r4, #0]
 8011df4:	6861      	ldr	r1, [r4, #4]
 8011df6:	b121      	cbz	r1, 8011e02 <rmw_uxrce_fini_publisher_memory+0x22>
 8011df8:	4803      	ldr	r0, [pc, #12]	@ (8011e08 <rmw_uxrce_fini_publisher_memory+0x28>)
 8011dfa:	f007 fa1b 	bl	8019234 <put_memory>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	6063      	str	r3, [r4, #4]
 8011e02:	bd10      	pop	{r4, pc}
 8011e04:	0801e378 	.word	0x0801e378
 8011e08:	20011a3c 	.word	0x20011a3c

08011e0c <rmw_uxrce_fini_subscription_memory>:
 8011e0c:	b510      	push	{r4, lr}
 8011e0e:	4604      	mov	r4, r0
 8011e10:	6800      	ldr	r0, [r0, #0]
 8011e12:	b128      	cbz	r0, 8011e20 <rmw_uxrce_fini_subscription_memory+0x14>
 8011e14:	4b06      	ldr	r3, [pc, #24]	@ (8011e30 <rmw_uxrce_fini_subscription_memory+0x24>)
 8011e16:	6819      	ldr	r1, [r3, #0]
 8011e18:	f7ee f9fa 	bl	8000210 <strcmp>
 8011e1c:	b938      	cbnz	r0, 8011e2e <rmw_uxrce_fini_subscription_memory+0x22>
 8011e1e:	6020      	str	r0, [r4, #0]
 8011e20:	6861      	ldr	r1, [r4, #4]
 8011e22:	b121      	cbz	r1, 8011e2e <rmw_uxrce_fini_subscription_memory+0x22>
 8011e24:	4803      	ldr	r0, [pc, #12]	@ (8011e34 <rmw_uxrce_fini_subscription_memory+0x28>)
 8011e26:	f007 fa05 	bl	8019234 <put_memory>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	6063      	str	r3, [r4, #4]
 8011e2e:	bd10      	pop	{r4, pc}
 8011e30:	0801e378 	.word	0x0801e378
 8011e34:	20011a7c 	.word	0x20011a7c

08011e38 <rmw_uxrce_fini_service_memory>:
 8011e38:	b510      	push	{r4, lr}
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	6800      	ldr	r0, [r0, #0]
 8011e3e:	b128      	cbz	r0, 8011e4c <rmw_uxrce_fini_service_memory+0x14>
 8011e40:	4b06      	ldr	r3, [pc, #24]	@ (8011e5c <rmw_uxrce_fini_service_memory+0x24>)
 8011e42:	6819      	ldr	r1, [r3, #0]
 8011e44:	f7ee f9e4 	bl	8000210 <strcmp>
 8011e48:	b938      	cbnz	r0, 8011e5a <rmw_uxrce_fini_service_memory+0x22>
 8011e4a:	6020      	str	r0, [r4, #0]
 8011e4c:	6861      	ldr	r1, [r4, #4]
 8011e4e:	b121      	cbz	r1, 8011e5a <rmw_uxrce_fini_service_memory+0x22>
 8011e50:	4803      	ldr	r0, [pc, #12]	@ (8011e60 <rmw_uxrce_fini_service_memory+0x28>)
 8011e52:	f007 f9ef 	bl	8019234 <put_memory>
 8011e56:	2300      	movs	r3, #0
 8011e58:	6063      	str	r3, [r4, #4]
 8011e5a:	bd10      	pop	{r4, pc}
 8011e5c:	0801e378 	.word	0x0801e378
 8011e60:	20011a4c 	.word	0x20011a4c

08011e64 <rmw_uxrce_fini_client_memory>:
 8011e64:	b510      	push	{r4, lr}
 8011e66:	4604      	mov	r4, r0
 8011e68:	6800      	ldr	r0, [r0, #0]
 8011e6a:	b128      	cbz	r0, 8011e78 <rmw_uxrce_fini_client_memory+0x14>
 8011e6c:	4b06      	ldr	r3, [pc, #24]	@ (8011e88 <rmw_uxrce_fini_client_memory+0x24>)
 8011e6e:	6819      	ldr	r1, [r3, #0]
 8011e70:	f7ee f9ce 	bl	8000210 <strcmp>
 8011e74:	b938      	cbnz	r0, 8011e86 <rmw_uxrce_fini_client_memory+0x22>
 8011e76:	6020      	str	r0, [r4, #0]
 8011e78:	6861      	ldr	r1, [r4, #4]
 8011e7a:	b121      	cbz	r1, 8011e86 <rmw_uxrce_fini_client_memory+0x22>
 8011e7c:	4803      	ldr	r0, [pc, #12]	@ (8011e8c <rmw_uxrce_fini_client_memory+0x28>)
 8011e7e:	f007 f9d9 	bl	8019234 <put_memory>
 8011e82:	2300      	movs	r3, #0
 8011e84:	6063      	str	r3, [r4, #4]
 8011e86:	bd10      	pop	{r4, pc}
 8011e88:	0801e378 	.word	0x0801e378
 8011e8c:	2000d15c 	.word	0x2000d15c

08011e90 <rmw_uxrce_fini_topic_memory>:
 8011e90:	b510      	push	{r4, lr}
 8011e92:	4604      	mov	r4, r0
 8011e94:	4621      	mov	r1, r4
 8011e96:	4803      	ldr	r0, [pc, #12]	@ (8011ea4 <rmw_uxrce_fini_topic_memory+0x14>)
 8011e98:	f007 f9cc 	bl	8019234 <put_memory>
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	61a3      	str	r3, [r4, #24]
 8011ea0:	bd10      	pop	{r4, pc}
 8011ea2:	bf00      	nop
 8011ea4:	20011a8c 	.word	0x20011a8c

08011ea8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8011ea8:	b082      	sub	sp, #8
 8011eaa:	b530      	push	{r4, r5, lr}
 8011eac:	4925      	ldr	r1, [pc, #148]	@ (8011f44 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011eae:	680d      	ldr	r5, [r1, #0]
 8011eb0:	ac03      	add	r4, sp, #12
 8011eb2:	e884 000c 	stmia.w	r4, {r2, r3}
 8011eb6:	461c      	mov	r4, r3
 8011eb8:	2d00      	cmp	r5, #0
 8011eba:	d041      	beq.n	8011f40 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8011ebc:	462b      	mov	r3, r5
 8011ebe:	2100      	movs	r1, #0
 8011ec0:	689a      	ldr	r2, [r3, #8]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8011ec8:	4290      	cmp	r0, r2
 8011eca:	bf08      	it	eq
 8011ecc:	3101      	addeq	r1, #1
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d1f6      	bne.n	8011ec0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8011ed2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011ed6:	2b02      	cmp	r3, #2
 8011ed8:	d029      	beq.n	8011f2e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8011eda:	d907      	bls.n	8011eec <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011edc:	2b03      	cmp	r3, #3
 8011ede:	d005      	beq.n	8011eec <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ee6:	4608      	mov	r0, r1
 8011ee8:	b002      	add	sp, #8
 8011eea:	4770      	bx	lr
 8011eec:	b314      	cbz	r4, 8011f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011eee:	428c      	cmp	r4, r1
 8011ef0:	d820      	bhi.n	8011f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011ef2:	2d00      	cmp	r5, #0
 8011ef4:	d0f4      	beq.n	8011ee0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011ef6:	2100      	movs	r1, #0
 8011ef8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8011efc:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8011f00:	e002      	b.n	8011f08 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8011f02:	686d      	ldr	r5, [r5, #4]
 8011f04:	2d00      	cmp	r5, #0
 8011f06:	d0ec      	beq.n	8011ee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8011f08:	68ab      	ldr	r3, [r5, #8]
 8011f0a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8011f0e:	4290      	cmp	r0, r2
 8011f10:	d1f7      	bne.n	8011f02 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f12:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8011f16:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8011f1a:	4562      	cmp	r2, ip
 8011f1c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8011f20:	eb73 0e04 	sbcs.w	lr, r3, r4
 8011f24:	daed      	bge.n	8011f02 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f26:	4694      	mov	ip, r2
 8011f28:	461c      	mov	r4, r3
 8011f2a:	4629      	mov	r1, r5
 8011f2c:	e7e9      	b.n	8011f02 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8011f2e:	b10c      	cbz	r4, 8011f34 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8011f30:	428c      	cmp	r4, r1
 8011f32:	d9d5      	bls.n	8011ee0 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8011f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f38:	4802      	ldr	r0, [pc, #8]	@ (8011f44 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8011f3a:	b002      	add	sp, #8
 8011f3c:	f007 b96a 	b.w	8019214 <get_memory>
 8011f40:	4629      	mov	r1, r5
 8011f42:	e7c6      	b.n	8011ed2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8011f44:	20011a6c 	.word	0x20011a6c

08011f48 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8011f48:	4b11      	ldr	r3, [pc, #68]	@ (8011f90 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	b530      	push	{r4, r5, lr}
 8011f4e:	b1e3      	cbz	r3, 8011f8a <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8011f50:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8011f54:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8011f58:	2400      	movs	r4, #0
 8011f5a:	e001      	b.n	8011f60 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	b193      	cbz	r3, 8011f86 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8011f60:	689a      	ldr	r2, [r3, #8]
 8011f62:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8011f66:	4288      	cmp	r0, r1
 8011f68:	d1f8      	bne.n	8011f5c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011f6a:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8011f6e:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8011f72:	4571      	cmp	r1, lr
 8011f74:	eb72 050c 	sbcs.w	r5, r2, ip
 8011f78:	daf0      	bge.n	8011f5c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8011f7a:	461c      	mov	r4, r3
 8011f7c:	685b      	ldr	r3, [r3, #4]
 8011f7e:	468e      	mov	lr, r1
 8011f80:	4694      	mov	ip, r2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1ec      	bne.n	8011f60 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8011f86:	4620      	mov	r0, r4
 8011f88:	bd30      	pop	{r4, r5, pc}
 8011f8a:	461c      	mov	r4, r3
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	bd30      	pop	{r4, r5, pc}
 8011f90:	20011a6c 	.word	0x20011a6c
 8011f94:	00000000 	.word	0x00000000

08011f98 <rmw_uxrce_clean_expired_static_input_buffer>:
 8011f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8012090 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8011f9e:	ed2d 8b06 	vpush	{d8-d10}
 8011fa2:	681f      	ldr	r7, [r3, #0]
 8011fa4:	b08d      	sub	sp, #52	@ 0x34
 8011fa6:	f007 fd35 	bl	8019a14 <rmw_uros_epoch_nanos>
 8011faa:	2f00      	cmp	r7, #0
 8011fac:	d05d      	beq.n	801206a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8011fae:	46b8      	mov	r8, r7
 8011fb0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8012078 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8011fb4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011fb8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8011fbc:	2b04      	cmp	r3, #4
 8011fbe:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8012080 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8011fc2:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8012088 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8011fc6:	4681      	mov	r9, r0
 8011fc8:	468a      	mov	sl, r1
 8011fca:	ac04      	add	r4, sp, #16
 8011fcc:	d03f      	beq.n	801204e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011fce:	2b05      	cmp	r3, #5
 8011fd0:	d044      	beq.n	801205c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8011fd2:	2b03      	cmp	r3, #3
 8011fd4:	d03b      	beq.n	801204e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8011fd6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011fda:	ed8d ab06 	vstr	d10, [sp, #24]
 8011fde:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011fe2:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8011fe6:	ab08      	add	r3, sp, #32
 8011fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fea:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011fee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011ff2:	f006 ff2d 	bl	8018e50 <rmw_time_equal>
 8011ff6:	b118      	cbz	r0, 8012000 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8011ff8:	ed8d 9b04 	vstr	d9, [sp, #16]
 8011ffc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012000:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012004:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8012008:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 801200c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8012010:	f006 ff72 	bl	8018ef8 <rmw_time_total_nsec>
 8012014:	1830      	adds	r0, r6, r0
 8012016:	eb47 0101 	adc.w	r1, r7, r1
 801201a:	4548      	cmp	r0, r9
 801201c:	eb71 030a 	sbcs.w	r3, r1, sl
 8012020:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8012024:	db05      	blt.n	8012032 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8012026:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801202a:	4591      	cmp	r9, r2
 801202c:	eb7a 0303 	sbcs.w	r3, sl, r3
 8012030:	da03      	bge.n	801203a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8012032:	4817      	ldr	r0, [pc, #92]	@ (8012090 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8012034:	4641      	mov	r1, r8
 8012036:	f007 f8fd 	bl	8019234 <put_memory>
 801203a:	f1bb 0f00 	cmp.w	fp, #0
 801203e:	d014      	beq.n	801206a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8012040:	46d8      	mov	r8, fp
 8012042:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012046:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 801204a:	2b04      	cmp	r3, #4
 801204c:	d1bf      	bne.n	8011fce <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 801204e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012052:	3340      	adds	r3, #64	@ 0x40
 8012054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801205a:	e7c0      	b.n	8011fde <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801205c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8012060:	3348      	adds	r3, #72	@ 0x48
 8012062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012068:	e7b9      	b.n	8011fde <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 801206a:	b00d      	add	sp, #52	@ 0x34
 801206c:	ecbd 8b06 	vpop	{d8-d10}
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	f3af 8000 	nop.w
	...
 8012080:	00000001 	.word	0x00000001
 8012084:	00000000 	.word	0x00000000
 8012088:	0000001e 	.word	0x0000001e
 801208c:	00000000 	.word	0x00000000
 8012090:	20011a6c 	.word	0x20011a6c

08012094 <run_xrce_session>:
 8012094:	b510      	push	{r4, lr}
 8012096:	788c      	ldrb	r4, [r1, #2]
 8012098:	b086      	sub	sp, #24
 801209a:	2c01      	cmp	r4, #1
 801209c:	f8ad 200e 	strh.w	r2, [sp, #14]
 80120a0:	d00c      	beq.n	80120bc <run_xrce_session+0x28>
 80120a2:	4619      	mov	r1, r3
 80120a4:	2301      	movs	r3, #1
 80120a6:	9300      	str	r3, [sp, #0]
 80120a8:	f10d 020e 	add.w	r2, sp, #14
 80120ac:	f10d 0317 	add.w	r3, sp, #23
 80120b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120b4:	f002 f80e 	bl	80140d4 <uxr_run_session_until_all_status>
 80120b8:	b006      	add	sp, #24
 80120ba:	bd10      	pop	{r4, pc}
 80120bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80120c0:	f001 fc22 	bl	8013908 <uxr_flash_output_streams>
 80120c4:	4620      	mov	r0, r4
 80120c6:	b006      	add	sp, #24
 80120c8:	bd10      	pop	{r4, pc}
 80120ca:	bf00      	nop

080120cc <convert_qos_profile>:
 80120cc:	7a4a      	ldrb	r2, [r1, #9]
 80120ce:	f891 c008 	ldrb.w	ip, [r1, #8]
 80120d2:	2a02      	cmp	r2, #2
 80120d4:	bf18      	it	ne
 80120d6:	2200      	movne	r2, #0
 80120d8:	7002      	strb	r2, [r0, #0]
 80120da:	780a      	ldrb	r2, [r1, #0]
 80120dc:	8889      	ldrh	r1, [r1, #4]
 80120de:	8081      	strh	r1, [r0, #4]
 80120e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80120e4:	f1a2 0202 	sub.w	r2, r2, #2
 80120e8:	fabc fc8c 	clz	ip, ip
 80120ec:	fab2 f282 	clz	r2, r2
 80120f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80120f4:	0952      	lsrs	r2, r2, #5
 80120f6:	f880 c001 	strb.w	ip, [r0, #1]
 80120fa:	7082      	strb	r2, [r0, #2]
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop

08012100 <generate_type_name>:
 8012100:	b530      	push	{r4, r5, lr}
 8012102:	2300      	movs	r3, #0
 8012104:	700b      	strb	r3, [r1, #0]
 8012106:	6803      	ldr	r3, [r0, #0]
 8012108:	b087      	sub	sp, #28
 801210a:	4614      	mov	r4, r2
 801210c:	b1d3      	cbz	r3, 8012144 <generate_type_name+0x44>
 801210e:	4a0f      	ldr	r2, [pc, #60]	@ (801214c <generate_type_name+0x4c>)
 8012110:	4615      	mov	r5, r2
 8012112:	9203      	str	r2, [sp, #12]
 8012114:	9500      	str	r5, [sp, #0]
 8012116:	6842      	ldr	r2, [r0, #4]
 8012118:	480d      	ldr	r0, [pc, #52]	@ (8012150 <generate_type_name+0x50>)
 801211a:	9001      	str	r0, [sp, #4]
 801211c:	4608      	mov	r0, r1
 801211e:	490d      	ldr	r1, [pc, #52]	@ (8012154 <generate_type_name+0x54>)
 8012120:	9204      	str	r2, [sp, #16]
 8012122:	9105      	str	r1, [sp, #20]
 8012124:	9102      	str	r1, [sp, #8]
 8012126:	4a0c      	ldr	r2, [pc, #48]	@ (8012158 <generate_type_name+0x58>)
 8012128:	4621      	mov	r1, r4
 801212a:	f00a f86b 	bl	801c204 <sniprintf>
 801212e:	2800      	cmp	r0, #0
 8012130:	db05      	blt.n	801213e <generate_type_name+0x3e>
 8012132:	4284      	cmp	r4, r0
 8012134:	bfd4      	ite	le
 8012136:	2000      	movle	r0, #0
 8012138:	2001      	movgt	r0, #1
 801213a:	b007      	add	sp, #28
 801213c:	bd30      	pop	{r4, r5, pc}
 801213e:	2000      	movs	r0, #0
 8012140:	b007      	add	sp, #28
 8012142:	bd30      	pop	{r4, r5, pc}
 8012144:	4b05      	ldr	r3, [pc, #20]	@ (801215c <generate_type_name+0x5c>)
 8012146:	4a01      	ldr	r2, [pc, #4]	@ (801214c <generate_type_name+0x4c>)
 8012148:	461d      	mov	r5, r3
 801214a:	e7e2      	b.n	8012112 <generate_type_name+0x12>
 801214c:	0801d9cc 	.word	0x0801d9cc
 8012150:	0801d9e4 	.word	0x0801d9e4
 8012154:	0801d9e0 	.word	0x0801d9e0
 8012158:	0801d9d0 	.word	0x0801d9d0
 801215c:	0801dbf4 	.word	0x0801dbf4

08012160 <generate_topic_name>:
 8012160:	b510      	push	{r4, lr}
 8012162:	b082      	sub	sp, #8
 8012164:	4614      	mov	r4, r2
 8012166:	9000      	str	r0, [sp, #0]
 8012168:	4b08      	ldr	r3, [pc, #32]	@ (801218c <generate_topic_name+0x2c>)
 801216a:	4a09      	ldr	r2, [pc, #36]	@ (8012190 <generate_topic_name+0x30>)
 801216c:	4608      	mov	r0, r1
 801216e:	4621      	mov	r1, r4
 8012170:	f00a f848 	bl	801c204 <sniprintf>
 8012174:	2800      	cmp	r0, #0
 8012176:	db05      	blt.n	8012184 <generate_topic_name+0x24>
 8012178:	4284      	cmp	r4, r0
 801217a:	bfd4      	ite	le
 801217c:	2000      	movle	r0, #0
 801217e:	2001      	movgt	r0, #1
 8012180:	b002      	add	sp, #8
 8012182:	bd10      	pop	{r4, pc}
 8012184:	2000      	movs	r0, #0
 8012186:	b002      	add	sp, #8
 8012188:	bd10      	pop	{r4, pc}
 801218a:	bf00      	nop
 801218c:	0801dfd8 	.word	0x0801dfd8
 8012190:	0801d69c 	.word	0x0801d69c

08012194 <is_uxrce_rmw_identifier_valid>:
 8012194:	b510      	push	{r4, lr}
 8012196:	4604      	mov	r4, r0
 8012198:	b140      	cbz	r0, 80121ac <is_uxrce_rmw_identifier_valid+0x18>
 801219a:	f007 f8a3 	bl	80192e4 <rmw_get_implementation_identifier>
 801219e:	4601      	mov	r1, r0
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ee f835 	bl	8000210 <strcmp>
 80121a6:	fab0 f080 	clz	r0, r0
 80121aa:	0940      	lsrs	r0, r0, #5
 80121ac:	bd10      	pop	{r4, pc}
 80121ae:	bf00      	nop

080121b0 <get_message_typesupport_handle>:
 80121b0:	6883      	ldr	r3, [r0, #8]
 80121b2:	4718      	bx	r3

080121b4 <get_message_typesupport_handle_function>:
 80121b4:	b510      	push	{r4, lr}
 80121b6:	4604      	mov	r4, r0
 80121b8:	6800      	ldr	r0, [r0, #0]
 80121ba:	f7ee f829 	bl	8000210 <strcmp>
 80121be:	2800      	cmp	r0, #0
 80121c0:	bf0c      	ite	eq
 80121c2:	4620      	moveq	r0, r4
 80121c4:	2000      	movne	r0, #0
 80121c6:	bd10      	pop	{r4, pc}

080121c8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80121c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121cc:	6805      	ldr	r5, [r0, #0]
 80121ce:	4604      	mov	r4, r0
 80121d0:	4628      	mov	r0, r5
 80121d2:	460e      	mov	r6, r1
 80121d4:	f7ee f81c 	bl	8000210 <strcmp>
 80121d8:	b1c8      	cbz	r0, 801220e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80121da:	4b11      	ldr	r3, [pc, #68]	@ (8012220 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	429d      	cmp	r5, r3
 80121e0:	d112      	bne.n	8012208 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80121e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80121e6:	f8d8 4000 	ldr.w	r4, [r8]
 80121ea:	b16c      	cbz	r4, 8012208 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80121ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80121f0:	2700      	movs	r7, #0
 80121f2:	3d04      	subs	r5, #4
 80121f4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80121f8:	4631      	mov	r1, r6
 80121fa:	f7ee f809 	bl	8000210 <strcmp>
 80121fe:	00bb      	lsls	r3, r7, #2
 8012200:	b140      	cbz	r0, 8012214 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012202:	3701      	adds	r7, #1
 8012204:	42bc      	cmp	r4, r7
 8012206:	d1f5      	bne.n	80121f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012208:	2000      	movs	r0, #0
 801220a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801220e:	4620      	mov	r0, r4
 8012210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012214:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801221c:	58d3      	ldr	r3, [r2, r3]
 801221e:	4718      	bx	r3
 8012220:	2000030c 	.word	0x2000030c

08012224 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012224:	4b04      	ldr	r3, [pc, #16]	@ (8012238 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	b10a      	cbz	r2, 801222e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 801222a:	4803      	ldr	r0, [pc, #12]	@ (8012238 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801222c:	4770      	bx	lr
 801222e:	4a03      	ldr	r2, [pc, #12]	@ (801223c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8012230:	4801      	ldr	r0, [pc, #4]	@ (8012238 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012232:	6812      	ldr	r2, [r2, #0]
 8012234:	601a      	str	r2, [r3, #0]
 8012236:	4770      	bx	lr
 8012238:	2000031c 	.word	0x2000031c
 801223c:	2000030c 	.word	0x2000030c

08012240 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012240:	4a02      	ldr	r2, [pc, #8]	@ (801224c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8012242:	4b03      	ldr	r3, [pc, #12]	@ (8012250 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8012244:	6812      	ldr	r2, [r2, #0]
 8012246:	601a      	str	r2, [r3, #0]
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	2000030c 	.word	0x2000030c
 8012250:	2000031c 	.word	0x2000031c

08012254 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8012254:	f007 bc4a 	b.w	8019aec <std_msgs__msg__Header__init>

08012258 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8012258:	f007 bc6c 	b.w	8019b34 <std_msgs__msg__Header__fini>

0801225c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801225c:	b508      	push	{r3, lr}
 801225e:	f000 f8eb 	bl	8012438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012262:	4b06      	ldr	r3, [pc, #24]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012264:	4906      	ldr	r1, [pc, #24]	@ (8012280 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8012266:	681a      	ldr	r2, [r3, #0]
 8012268:	60c8      	str	r0, [r1, #12]
 801226a:	b10a      	cbz	r2, 8012270 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801226c:	4803      	ldr	r0, [pc, #12]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801226e:	bd08      	pop	{r3, pc}
 8012270:	4a04      	ldr	r2, [pc, #16]	@ (8012284 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8012272:	4802      	ldr	r0, [pc, #8]	@ (801227c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8012274:	6812      	ldr	r2, [r2, #0]
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	bd08      	pop	{r3, pc}
 801227a:	bf00      	nop
 801227c:	200003a0 	.word	0x200003a0
 8012280:	20000328 	.word	0x20000328
 8012284:	20000310 	.word	0x20000310

08012288 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8012288:	f007 bc60 	b.w	8019b4c <std_msgs__msg__Int32__init>

0801228c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801228c:	f007 bc62 	b.w	8019b54 <std_msgs__msg__Int32__fini>

08012290 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012290:	4b04      	ldr	r3, [pc, #16]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	b10a      	cbz	r2, 801229a <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8012296:	4803      	ldr	r0, [pc, #12]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8012298:	4770      	bx	lr
 801229a:	4a03      	ldr	r2, [pc, #12]	@ (80122a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 801229c:	4801      	ldr	r0, [pc, #4]	@ (80122a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 801229e:	6812      	ldr	r2, [r2, #0]
 80122a0:	601a      	str	r2, [r3, #0]
 80122a2:	4770      	bx	lr
 80122a4:	200003e8 	.word	0x200003e8
 80122a8:	20000310 	.word	0x20000310

080122ac <_Header__max_serialized_size>:
 80122ac:	b500      	push	{lr}
 80122ae:	b083      	sub	sp, #12
 80122b0:	2301      	movs	r3, #1
 80122b2:	2100      	movs	r1, #0
 80122b4:	f10d 0007 	add.w	r0, sp, #7
 80122b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80122bc:	f000 f91a 	bl	80124f4 <max_serialized_size_builtin_interfaces__msg__Time>
 80122c0:	b003      	add	sp, #12
 80122c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80122c6:	bf00      	nop

080122c8 <get_serialized_size_std_msgs__msg__Header>:
 80122c8:	b570      	push	{r4, r5, r6, lr}
 80122ca:	4605      	mov	r5, r0
 80122cc:	b168      	cbz	r0, 80122ea <get_serialized_size_std_msgs__msg__Header+0x22>
 80122ce:	460c      	mov	r4, r1
 80122d0:	f000 f8c0 	bl	8012454 <get_serialized_size_builtin_interfaces__msg__Time>
 80122d4:	1826      	adds	r6, r4, r0
 80122d6:	2104      	movs	r1, #4
 80122d8:	4630      	mov	r0, r6
 80122da:	f7fb fe2b 	bl	800df34 <ucdr_alignment>
 80122de:	68e9      	ldr	r1, [r5, #12]
 80122e0:	f1c4 0405 	rsb	r4, r4, #5
 80122e4:	440c      	add	r4, r1
 80122e6:	4404      	add	r4, r0
 80122e8:	19a0      	adds	r0, r4, r6
 80122ea:	bd70      	pop	{r4, r5, r6, pc}

080122ec <_Header__cdr_deserialize>:
 80122ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ee:	460c      	mov	r4, r1
 80122f0:	b083      	sub	sp, #12
 80122f2:	b1e1      	cbz	r1, 801232e <_Header__cdr_deserialize+0x42>
 80122f4:	4606      	mov	r6, r0
 80122f6:	f000 f911 	bl	801251c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80122fa:	6843      	ldr	r3, [r0, #4]
 80122fc:	4621      	mov	r1, r4
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	4630      	mov	r0, r6
 8012302:	4798      	blx	r3
 8012304:	6927      	ldr	r7, [r4, #16]
 8012306:	68a1      	ldr	r1, [r4, #8]
 8012308:	ab01      	add	r3, sp, #4
 801230a:	463a      	mov	r2, r7
 801230c:	4630      	mov	r0, r6
 801230e:	f000 fc6f 	bl	8012bf0 <ucdr_deserialize_sequence_char>
 8012312:	9b01      	ldr	r3, [sp, #4]
 8012314:	4605      	mov	r5, r0
 8012316:	b920      	cbnz	r0, 8012322 <_Header__cdr_deserialize+0x36>
 8012318:	429f      	cmp	r7, r3
 801231a:	d30c      	bcc.n	8012336 <_Header__cdr_deserialize+0x4a>
 801231c:	4628      	mov	r0, r5
 801231e:	b003      	add	sp, #12
 8012320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012322:	b103      	cbz	r3, 8012326 <_Header__cdr_deserialize+0x3a>
 8012324:	3b01      	subs	r3, #1
 8012326:	4628      	mov	r0, r5
 8012328:	60e3      	str	r3, [r4, #12]
 801232a:	b003      	add	sp, #12
 801232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801232e:	460d      	mov	r5, r1
 8012330:	4628      	mov	r0, r5
 8012332:	b003      	add	sp, #12
 8012334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012336:	2101      	movs	r1, #1
 8012338:	75b0      	strb	r0, [r6, #22]
 801233a:	7571      	strb	r1, [r6, #21]
 801233c:	4630      	mov	r0, r6
 801233e:	60e5      	str	r5, [r4, #12]
 8012340:	f7fb fe0e 	bl	800df60 <ucdr_align_to>
 8012344:	4630      	mov	r0, r6
 8012346:	9901      	ldr	r1, [sp, #4]
 8012348:	f7fb fe40 	bl	800dfcc <ucdr_advance_buffer>
 801234c:	4628      	mov	r0, r5
 801234e:	b003      	add	sp, #12
 8012350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012352:	bf00      	nop

08012354 <_Header__cdr_serialize>:
 8012354:	b1f8      	cbz	r0, 8012396 <_Header__cdr_serialize+0x42>
 8012356:	b570      	push	{r4, r5, r6, lr}
 8012358:	4604      	mov	r4, r0
 801235a:	460d      	mov	r5, r1
 801235c:	f000 f8de 	bl	801251c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8012360:	6843      	ldr	r3, [r0, #4]
 8012362:	4629      	mov	r1, r5
 8012364:	689b      	ldr	r3, [r3, #8]
 8012366:	4620      	mov	r0, r4
 8012368:	4798      	blx	r3
 801236a:	68a6      	ldr	r6, [r4, #8]
 801236c:	b156      	cbz	r6, 8012384 <_Header__cdr_serialize+0x30>
 801236e:	4630      	mov	r0, r6
 8012370:	f7ed ff58 	bl	8000224 <strlen>
 8012374:	4631      	mov	r1, r6
 8012376:	60e0      	str	r0, [r4, #12]
 8012378:	1c42      	adds	r2, r0, #1
 801237a:	4628      	mov	r0, r5
 801237c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012380:	f000 bc24 	b.w	8012bcc <ucdr_serialize_sequence_char>
 8012384:	4630      	mov	r0, r6
 8012386:	60e0      	str	r0, [r4, #12]
 8012388:	4632      	mov	r2, r6
 801238a:	4631      	mov	r1, r6
 801238c:	4628      	mov	r0, r5
 801238e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012392:	f000 bc1b 	b.w	8012bcc <ucdr_serialize_sequence_char>
 8012396:	4770      	bx	lr

08012398 <_Header__get_serialized_size>:
 8012398:	b538      	push	{r3, r4, r5, lr}
 801239a:	4604      	mov	r4, r0
 801239c:	b150      	cbz	r0, 80123b4 <_Header__get_serialized_size+0x1c>
 801239e:	2100      	movs	r1, #0
 80123a0:	f000 f858 	bl	8012454 <get_serialized_size_builtin_interfaces__msg__Time>
 80123a4:	2104      	movs	r1, #4
 80123a6:	4605      	mov	r5, r0
 80123a8:	f7fb fdc4 	bl	800df34 <ucdr_alignment>
 80123ac:	68e2      	ldr	r2, [r4, #12]
 80123ae:	3205      	adds	r2, #5
 80123b0:	1953      	adds	r3, r2, r5
 80123b2:	4418      	add	r0, r3
 80123b4:	bd38      	pop	{r3, r4, r5, pc}
 80123b6:	bf00      	nop

080123b8 <max_serialized_size_std_msgs__msg__Header>:
 80123b8:	b510      	push	{r4, lr}
 80123ba:	2301      	movs	r3, #1
 80123bc:	4604      	mov	r4, r0
 80123be:	7003      	strb	r3, [r0, #0]
 80123c0:	f000 f898 	bl	80124f4 <max_serialized_size_builtin_interfaces__msg__Time>
 80123c4:	2300      	movs	r3, #0
 80123c6:	7023      	strb	r3, [r4, #0]
 80123c8:	bd10      	pop	{r4, pc}
 80123ca:	bf00      	nop

080123cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 80123cc:	4800      	ldr	r0, [pc, #0]	@ (80123d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 80123ce:	4770      	bx	lr
 80123d0:	200003f4 	.word	0x200003f4

080123d4 <_Int32__max_serialized_size>:
 80123d4:	b508      	push	{r3, lr}
 80123d6:	2104      	movs	r1, #4
 80123d8:	2000      	movs	r0, #0
 80123da:	f7fb fdab 	bl	800df34 <ucdr_alignment>
 80123de:	3004      	adds	r0, #4
 80123e0:	bd08      	pop	{r3, pc}
 80123e2:	bf00      	nop

080123e4 <_Int32__cdr_deserialize>:
 80123e4:	b109      	cbz	r1, 80123ea <_Int32__cdr_deserialize+0x6>
 80123e6:	f7fb b987 	b.w	800d6f8 <ucdr_deserialize_int32_t>
 80123ea:	4608      	mov	r0, r1
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop

080123f0 <get_serialized_size_std_msgs__msg__Int32>:
 80123f0:	b138      	cbz	r0, 8012402 <get_serialized_size_std_msgs__msg__Int32+0x12>
 80123f2:	b508      	push	{r3, lr}
 80123f4:	460b      	mov	r3, r1
 80123f6:	4618      	mov	r0, r3
 80123f8:	2104      	movs	r1, #4
 80123fa:	f7fb fd9b 	bl	800df34 <ucdr_alignment>
 80123fe:	3004      	adds	r0, #4
 8012400:	bd08      	pop	{r3, pc}
 8012402:	4770      	bx	lr

08012404 <_Int32__cdr_serialize>:
 8012404:	460a      	mov	r2, r1
 8012406:	b118      	cbz	r0, 8012410 <_Int32__cdr_serialize+0xc>
 8012408:	6801      	ldr	r1, [r0, #0]
 801240a:	4610      	mov	r0, r2
 801240c:	f7fb b8dc 	b.w	800d5c8 <ucdr_serialize_int32_t>
 8012410:	4770      	bx	lr
 8012412:	bf00      	nop

08012414 <_Int32__get_serialized_size>:
 8012414:	b130      	cbz	r0, 8012424 <_Int32__get_serialized_size+0x10>
 8012416:	b508      	push	{r3, lr}
 8012418:	2104      	movs	r1, #4
 801241a:	2000      	movs	r0, #0
 801241c:	f7fb fd8a 	bl	800df34 <ucdr_alignment>
 8012420:	3004      	adds	r0, #4
 8012422:	bd08      	pop	{r3, pc}
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop

08012428 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8012428:	4800      	ldr	r0, [pc, #0]	@ (801242c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801242a:	4770      	bx	lr
 801242c:	2000041c 	.word	0x2000041c

08012430 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8012430:	f007 bb92 	b.w	8019b58 <builtin_interfaces__msg__Time__init>

08012434 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8012434:	f007 bb94 	b.w	8019b60 <builtin_interfaces__msg__Time__fini>

08012438 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8012438:	4b04      	ldr	r3, [pc, #16]	@ (801244c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	b10a      	cbz	r2, 8012442 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 801243e:	4803      	ldr	r0, [pc, #12]	@ (801244c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012440:	4770      	bx	lr
 8012442:	4a03      	ldr	r2, [pc, #12]	@ (8012450 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8012444:	4801      	ldr	r0, [pc, #4]	@ (801244c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8012446:	6812      	ldr	r2, [r2, #0]
 8012448:	601a      	str	r2, [r3, #0]
 801244a:	4770      	bx	lr
 801244c:	200004bc 	.word	0x200004bc
 8012450:	20000310 	.word	0x20000310

08012454 <get_serialized_size_builtin_interfaces__msg__Time>:
 8012454:	b180      	cbz	r0, 8012478 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8012456:	b538      	push	{r3, r4, r5, lr}
 8012458:	460d      	mov	r5, r1
 801245a:	4628      	mov	r0, r5
 801245c:	2104      	movs	r1, #4
 801245e:	f7fb fd69 	bl	800df34 <ucdr_alignment>
 8012462:	1d2b      	adds	r3, r5, #4
 8012464:	181c      	adds	r4, r3, r0
 8012466:	2104      	movs	r1, #4
 8012468:	4620      	mov	r0, r4
 801246a:	f7fb fd63 	bl	800df34 <ucdr_alignment>
 801246e:	f1c5 0504 	rsb	r5, r5, #4
 8012472:	4428      	add	r0, r5
 8012474:	4420      	add	r0, r4
 8012476:	bd38      	pop	{r3, r4, r5, pc}
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop

0801247c <_Time__cdr_deserialize>:
 801247c:	b538      	push	{r3, r4, r5, lr}
 801247e:	460c      	mov	r4, r1
 8012480:	b141      	cbz	r1, 8012494 <_Time__cdr_deserialize+0x18>
 8012482:	4605      	mov	r5, r0
 8012484:	f7fb f938 	bl	800d6f8 <ucdr_deserialize_int32_t>
 8012488:	1d21      	adds	r1, r4, #4
 801248a:	4628      	mov	r0, r5
 801248c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012490:	f7fa bdb0 	b.w	800cff4 <ucdr_deserialize_uint32_t>
 8012494:	4608      	mov	r0, r1
 8012496:	bd38      	pop	{r3, r4, r5, pc}

08012498 <_Time__cdr_serialize>:
 8012498:	b160      	cbz	r0, 80124b4 <_Time__cdr_serialize+0x1c>
 801249a:	b538      	push	{r3, r4, r5, lr}
 801249c:	460d      	mov	r5, r1
 801249e:	4604      	mov	r4, r0
 80124a0:	6801      	ldr	r1, [r0, #0]
 80124a2:	4628      	mov	r0, r5
 80124a4:	f7fb f890 	bl	800d5c8 <ucdr_serialize_int32_t>
 80124a8:	6861      	ldr	r1, [r4, #4]
 80124aa:	4628      	mov	r0, r5
 80124ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124b0:	f7fa bc70 	b.w	800cd94 <ucdr_serialize_uint32_t>
 80124b4:	4770      	bx	lr
 80124b6:	bf00      	nop

080124b8 <_Time__get_serialized_size>:
 80124b8:	b160      	cbz	r0, 80124d4 <_Time__get_serialized_size+0x1c>
 80124ba:	b510      	push	{r4, lr}
 80124bc:	2104      	movs	r1, #4
 80124be:	2000      	movs	r0, #0
 80124c0:	f7fb fd38 	bl	800df34 <ucdr_alignment>
 80124c4:	1d04      	adds	r4, r0, #4
 80124c6:	2104      	movs	r1, #4
 80124c8:	4620      	mov	r0, r4
 80124ca:	f7fb fd33 	bl	800df34 <ucdr_alignment>
 80124ce:	3004      	adds	r0, #4
 80124d0:	4420      	add	r0, r4
 80124d2:	bd10      	pop	{r4, pc}
 80124d4:	4770      	bx	lr
 80124d6:	bf00      	nop

080124d8 <_Time__max_serialized_size>:
 80124d8:	b510      	push	{r4, lr}
 80124da:	2104      	movs	r1, #4
 80124dc:	2000      	movs	r0, #0
 80124de:	f7fb fd29 	bl	800df34 <ucdr_alignment>
 80124e2:	1d04      	adds	r4, r0, #4
 80124e4:	2104      	movs	r1, #4
 80124e6:	4620      	mov	r0, r4
 80124e8:	f7fb fd24 	bl	800df34 <ucdr_alignment>
 80124ec:	3004      	adds	r0, #4
 80124ee:	4420      	add	r0, r4
 80124f0:	bd10      	pop	{r4, pc}
 80124f2:	bf00      	nop

080124f4 <max_serialized_size_builtin_interfaces__msg__Time>:
 80124f4:	b538      	push	{r3, r4, r5, lr}
 80124f6:	460c      	mov	r4, r1
 80124f8:	2301      	movs	r3, #1
 80124fa:	7003      	strb	r3, [r0, #0]
 80124fc:	2104      	movs	r1, #4
 80124fe:	4620      	mov	r0, r4
 8012500:	f7fb fd18 	bl	800df34 <ucdr_alignment>
 8012504:	1d25      	adds	r5, r4, #4
 8012506:	4405      	add	r5, r0
 8012508:	2104      	movs	r1, #4
 801250a:	4628      	mov	r0, r5
 801250c:	f7fb fd12 	bl	800df34 <ucdr_alignment>
 8012510:	f1c4 0404 	rsb	r4, r4, #4
 8012514:	4420      	add	r0, r4
 8012516:	4428      	add	r0, r5
 8012518:	bd38      	pop	{r3, r4, r5, pc}
 801251a:	bf00      	nop

0801251c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 801251c:	4800      	ldr	r0, [pc, #0]	@ (8012520 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 801251e:	4770      	bx	lr
 8012520:	200004c8 	.word	0x200004c8

08012524 <geometry_msgs__msg__Twist__init>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	4605      	mov	r5, r0
 8012528:	b1a8      	cbz	r0, 8012556 <geometry_msgs__msg__Twist__init+0x32>
 801252a:	f000 f82b 	bl	8012584 <geometry_msgs__msg__Vector3__init>
 801252e:	4604      	mov	r4, r0
 8012530:	b140      	cbz	r0, 8012544 <geometry_msgs__msg__Twist__init+0x20>
 8012532:	f105 0618 	add.w	r6, r5, #24
 8012536:	4630      	mov	r0, r6
 8012538:	f000 f824 	bl	8012584 <geometry_msgs__msg__Vector3__init>
 801253c:	4604      	mov	r4, r0
 801253e:	b168      	cbz	r0, 801255c <geometry_msgs__msg__Twist__init+0x38>
 8012540:	4620      	mov	r0, r4
 8012542:	bd70      	pop	{r4, r5, r6, pc}
 8012544:	4628      	mov	r0, r5
 8012546:	f000 f821 	bl	801258c <geometry_msgs__msg__Vector3__fini>
 801254a:	f105 0018 	add.w	r0, r5, #24
 801254e:	f000 f81d 	bl	801258c <geometry_msgs__msg__Vector3__fini>
 8012552:	4620      	mov	r0, r4
 8012554:	bd70      	pop	{r4, r5, r6, pc}
 8012556:	4604      	mov	r4, r0
 8012558:	4620      	mov	r0, r4
 801255a:	bd70      	pop	{r4, r5, r6, pc}
 801255c:	4628      	mov	r0, r5
 801255e:	f000 f815 	bl	801258c <geometry_msgs__msg__Vector3__fini>
 8012562:	4630      	mov	r0, r6
 8012564:	f000 f812 	bl	801258c <geometry_msgs__msg__Vector3__fini>
 8012568:	e7ea      	b.n	8012540 <geometry_msgs__msg__Twist__init+0x1c>
 801256a:	bf00      	nop

0801256c <geometry_msgs__msg__Twist__fini>:
 801256c:	b148      	cbz	r0, 8012582 <geometry_msgs__msg__Twist__fini+0x16>
 801256e:	b510      	push	{r4, lr}
 8012570:	4604      	mov	r4, r0
 8012572:	f000 f80b 	bl	801258c <geometry_msgs__msg__Vector3__fini>
 8012576:	f104 0018 	add.w	r0, r4, #24
 801257a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801257e:	f000 b805 	b.w	801258c <geometry_msgs__msg__Vector3__fini>
 8012582:	4770      	bx	lr

08012584 <geometry_msgs__msg__Vector3__init>:
 8012584:	3800      	subs	r0, #0
 8012586:	bf18      	it	ne
 8012588:	2001      	movne	r0, #1
 801258a:	4770      	bx	lr

0801258c <geometry_msgs__msg__Vector3__fini>:
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop

08012590 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 8012590:	2024      	movs	r0, #36	@ 0x24
 8012592:	4770      	bx	lr

08012594 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 8012594:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012598:	4770      	bx	lr
 801259a:	bf00      	nop

0801259c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 801259c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80125a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125a4:	e9c2 0100 	strd	r0, r1, [r2]
 80125a8:	4770      	bx	lr
 80125aa:	bf00      	nop

080125ac <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 80125ac:	e9d2 2300 	ldrd	r2, r3, [r2]
 80125b0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80125b4:	e9c1 2300 	strd	r2, r3, [r1]
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop

080125bc <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 80125bc:	f007 bad2 	b.w	8019b64 <geometry_msgs__msg__PoseWithCovariance__init>

080125c0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 80125c0:	f007 bae2 	b.w	8019b88 <geometry_msgs__msg__PoseWithCovariance__fini>

080125c4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 80125c4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80125c8:	4770      	bx	lr
 80125ca:	bf00      	nop

080125cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 80125cc:	b508      	push	{r3, lr}
 80125ce:	f007 faf9 	bl	8019bc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80125d2:	4b06      	ldr	r3, [pc, #24]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 80125d4:	4906      	ldr	r1, [pc, #24]	@ (80125f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	60c8      	str	r0, [r1, #12]
 80125da:	b10a      	cbz	r2, 80125e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 80125dc:	4803      	ldr	r0, [pc, #12]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 80125de:	bd08      	pop	{r3, pc}
 80125e0:	4a04      	ldr	r2, [pc, #16]	@ (80125f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 80125e2:	4802      	ldr	r0, [pc, #8]	@ (80125ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 80125e4:	6812      	ldr	r2, [r2, #0]
 80125e6:	601a      	str	r2, [r3, #0]
 80125e8:	bd08      	pop	{r3, pc}
 80125ea:	bf00      	nop
 80125ec:	20000568 	.word	0x20000568
 80125f0:	200004f0 	.word	0x200004f0
 80125f4:	20000310 	.word	0x20000310

080125f8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 80125f8:	2024      	movs	r0, #36	@ 0x24
 80125fa:	4770      	bx	lr

080125fc <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 80125fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012600:	4770      	bx	lr
 8012602:	bf00      	nop

08012604 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 8012604:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8012608:	e9d1 0100 	ldrd	r0, r1, [r1]
 801260c:	e9c2 0100 	strd	r0, r1, [r2]
 8012610:	4770      	bx	lr
 8012612:	bf00      	nop

08012614 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 8012614:	e9d2 2300 	ldrd	r2, r3, [r2]
 8012618:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801261c:	e9c1 2300 	strd	r2, r3, [r1]
 8012620:	4770      	bx	lr
 8012622:	bf00      	nop

08012624 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 8012624:	f007 bab4 	b.w	8019b90 <geometry_msgs__msg__TwistWithCovariance__init>

08012628 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 8012628:	f007 bac4 	b.w	8019bb4 <geometry_msgs__msg__TwistWithCovariance__fini>

0801262c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 801262c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8012630:	4770      	bx	lr
 8012632:	bf00      	nop

08012634 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8012634:	b508      	push	{r3, lr}
 8012636:	f7fa f83b 	bl	800c6b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 801263a:	4b06      	ldr	r3, [pc, #24]	@ (8012654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 801263c:	4906      	ldr	r1, [pc, #24]	@ (8012658 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 801263e:	681a      	ldr	r2, [r3, #0]
 8012640:	60c8      	str	r0, [r1, #12]
 8012642:	b10a      	cbz	r2, 8012648 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 8012644:	4803      	ldr	r0, [pc, #12]	@ (8012654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 8012646:	bd08      	pop	{r3, pc}
 8012648:	4a04      	ldr	r2, [pc, #16]	@ (801265c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 801264a:	4802      	ldr	r0, [pc, #8]	@ (8012654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 801264c:	6812      	ldr	r2, [r2, #0]
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	bd08      	pop	{r3, pc}
 8012652:	bf00      	nop
 8012654:	200005ec 	.word	0x200005ec
 8012658:	20000574 	.word	0x20000574
 801265c:	20000310 	.word	0x20000310

08012660 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012660:	b538      	push	{r3, r4, r5, lr}
 8012662:	b158      	cbz	r0, 801267c <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 8012664:	460d      	mov	r5, r1
 8012666:	f007 fad7 	bl	8019c18 <get_serialized_size_geometry_msgs__msg__Pose>
 801266a:	182c      	adds	r4, r5, r0
 801266c:	2108      	movs	r1, #8
 801266e:	4620      	mov	r0, r4
 8012670:	f7fb fc60 	bl	800df34 <ucdr_alignment>
 8012674:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8012678:	4428      	add	r0, r5
 801267a:	4420      	add	r0, r4
 801267c:	bd38      	pop	{r3, r4, r5, pc}
 801267e:	bf00      	nop

08012680 <_PoseWithCovariance__cdr_deserialize>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	460c      	mov	r4, r1
 8012684:	b179      	cbz	r1, 80126a6 <_PoseWithCovariance__cdr_deserialize+0x26>
 8012686:	4605      	mov	r5, r0
 8012688:	f007 fb36 	bl	8019cf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 801268c:	6843      	ldr	r3, [r0, #4]
 801268e:	4621      	mov	r1, r4
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	4628      	mov	r0, r5
 8012694:	4798      	blx	r3
 8012696:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 801269a:	4628      	mov	r0, r5
 801269c:	2224      	movs	r2, #36	@ 0x24
 801269e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126a2:	f000 ba3d 	b.w	8012b20 <ucdr_deserialize_array_double>
 80126a6:	4608      	mov	r0, r1
 80126a8:	bd38      	pop	{r3, r4, r5, pc}
 80126aa:	bf00      	nop

080126ac <_PoseWithCovariance__cdr_serialize>:
 80126ac:	b188      	cbz	r0, 80126d2 <_PoseWithCovariance__cdr_serialize+0x26>
 80126ae:	b538      	push	{r3, r4, r5, lr}
 80126b0:	460d      	mov	r5, r1
 80126b2:	4604      	mov	r4, r0
 80126b4:	f007 fb20 	bl	8019cf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 80126b8:	6843      	ldr	r3, [r0, #4]
 80126ba:	4629      	mov	r1, r5
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	4620      	mov	r0, r4
 80126c0:	4798      	blx	r3
 80126c2:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 80126c6:	4628      	mov	r0, r5
 80126c8:	2224      	movs	r2, #36	@ 0x24
 80126ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ce:	f000 b9d3 	b.w	8012a78 <ucdr_serialize_array_double>
 80126d2:	4770      	bx	lr

080126d4 <_PoseWithCovariance__get_serialized_size>:
 80126d4:	b158      	cbz	r0, 80126ee <_PoseWithCovariance__get_serialized_size+0x1a>
 80126d6:	b510      	push	{r4, lr}
 80126d8:	2100      	movs	r1, #0
 80126da:	f007 fa9d 	bl	8019c18 <get_serialized_size_geometry_msgs__msg__Pose>
 80126de:	2108      	movs	r1, #8
 80126e0:	4604      	mov	r4, r0
 80126e2:	f7fb fc27 	bl	800df34 <ucdr_alignment>
 80126e6:	4420      	add	r0, r4
 80126e8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	4770      	bx	lr

080126f0 <_PoseWithCovariance__max_serialized_size>:
 80126f0:	b510      	push	{r4, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	2301      	movs	r3, #1
 80126f6:	2100      	movs	r1, #0
 80126f8:	f10d 0007 	add.w	r0, sp, #7
 80126fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8012700:	f007 faec 	bl	8019cdc <max_serialized_size_geometry_msgs__msg__Pose>
 8012704:	2108      	movs	r1, #8
 8012706:	4604      	mov	r4, r0
 8012708:	f7fb fc14 	bl	800df34 <ucdr_alignment>
 801270c:	4420      	add	r0, r4
 801270e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 8012712:	b002      	add	sp, #8
 8012714:	bd10      	pop	{r4, pc}
 8012716:	bf00      	nop

08012718 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 8012718:	b538      	push	{r3, r4, r5, lr}
 801271a:	2301      	movs	r3, #1
 801271c:	7003      	strb	r3, [r0, #0]
 801271e:	460c      	mov	r4, r1
 8012720:	f007 fadc 	bl	8019cdc <max_serialized_size_geometry_msgs__msg__Pose>
 8012724:	1825      	adds	r5, r4, r0
 8012726:	2108      	movs	r1, #8
 8012728:	4628      	mov	r0, r5
 801272a:	f7fb fc03 	bl	800df34 <ucdr_alignment>
 801272e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8012732:	4420      	add	r0, r4
 8012734:	4428      	add	r0, r5
 8012736:	bd38      	pop	{r3, r4, r5, pc}

08012738 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 8012738:	4800      	ldr	r0, [pc, #0]	@ (801273c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 801273a:	4770      	bx	lr
 801273c:	200005f8 	.word	0x200005f8

08012740 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	b158      	cbz	r0, 801275c <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 8012744:	460d      	mov	r5, r1
 8012746:	f7f9 ffdd 	bl	800c704 <get_serialized_size_geometry_msgs__msg__Twist>
 801274a:	182c      	adds	r4, r5, r0
 801274c:	2108      	movs	r1, #8
 801274e:	4620      	mov	r0, r4
 8012750:	f7fb fbf0 	bl	800df34 <ucdr_alignment>
 8012754:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 8012758:	4428      	add	r0, r5
 801275a:	4420      	add	r0, r4
 801275c:	bd38      	pop	{r3, r4, r5, pc}
 801275e:	bf00      	nop

08012760 <_TwistWithCovariance__cdr_deserialize>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	460c      	mov	r4, r1
 8012764:	b179      	cbz	r1, 8012786 <_TwistWithCovariance__cdr_deserialize+0x26>
 8012766:	4605      	mov	r5, r0
 8012768:	f7fa f83c 	bl	800c7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 801276c:	6843      	ldr	r3, [r0, #4]
 801276e:	4621      	mov	r1, r4
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	4628      	mov	r0, r5
 8012774:	4798      	blx	r3
 8012776:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801277a:	4628      	mov	r0, r5
 801277c:	2224      	movs	r2, #36	@ 0x24
 801277e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012782:	f000 b9cd 	b.w	8012b20 <ucdr_deserialize_array_double>
 8012786:	4608      	mov	r0, r1
 8012788:	bd38      	pop	{r3, r4, r5, pc}
 801278a:	bf00      	nop

0801278c <_TwistWithCovariance__cdr_serialize>:
 801278c:	b188      	cbz	r0, 80127b2 <_TwistWithCovariance__cdr_serialize+0x26>
 801278e:	b538      	push	{r3, r4, r5, lr}
 8012790:	460d      	mov	r5, r1
 8012792:	4604      	mov	r4, r0
 8012794:	f7fa f826 	bl	800c7e4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8012798:	6843      	ldr	r3, [r0, #4]
 801279a:	4629      	mov	r1, r5
 801279c:	689b      	ldr	r3, [r3, #8]
 801279e:	4620      	mov	r0, r4
 80127a0:	4798      	blx	r3
 80127a2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80127a6:	4628      	mov	r0, r5
 80127a8:	2224      	movs	r2, #36	@ 0x24
 80127aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ae:	f000 b963 	b.w	8012a78 <ucdr_serialize_array_double>
 80127b2:	4770      	bx	lr

080127b4 <_TwistWithCovariance__get_serialized_size>:
 80127b4:	b158      	cbz	r0, 80127ce <_TwistWithCovariance__get_serialized_size+0x1a>
 80127b6:	b510      	push	{r4, lr}
 80127b8:	2100      	movs	r1, #0
 80127ba:	f7f9 ffa3 	bl	800c704 <get_serialized_size_geometry_msgs__msg__Twist>
 80127be:	2108      	movs	r1, #8
 80127c0:	4604      	mov	r4, r0
 80127c2:	f7fb fbb7 	bl	800df34 <ucdr_alignment>
 80127c6:	4420      	add	r0, r4
 80127c8:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80127cc:	bd10      	pop	{r4, pc}
 80127ce:	4770      	bx	lr

080127d0 <_TwistWithCovariance__max_serialized_size>:
 80127d0:	b510      	push	{r4, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	2301      	movs	r3, #1
 80127d6:	2100      	movs	r1, #0
 80127d8:	f10d 0007 	add.w	r0, sp, #7
 80127dc:	f88d 3007 	strb.w	r3, [sp, #7]
 80127e0:	f7f9 fff2 	bl	800c7c8 <max_serialized_size_geometry_msgs__msg__Twist>
 80127e4:	2108      	movs	r1, #8
 80127e6:	4604      	mov	r4, r0
 80127e8:	f7fb fba4 	bl	800df34 <ucdr_alignment>
 80127ec:	4420      	add	r0, r4
 80127ee:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80127f2:	b002      	add	sp, #8
 80127f4:	bd10      	pop	{r4, pc}
 80127f6:	bf00      	nop

080127f8 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 80127f8:	b538      	push	{r3, r4, r5, lr}
 80127fa:	2301      	movs	r3, #1
 80127fc:	7003      	strb	r3, [r0, #0]
 80127fe:	460c      	mov	r4, r1
 8012800:	f7f9 ffe2 	bl	800c7c8 <max_serialized_size_geometry_msgs__msg__Twist>
 8012804:	1825      	adds	r5, r4, r0
 8012806:	2108      	movs	r1, #8
 8012808:	4628      	mov	r0, r5
 801280a:	f7fb fb93 	bl	800df34 <ucdr_alignment>
 801280e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 8012812:	4420      	add	r0, r4
 8012814:	4428      	add	r0, r5
 8012816:	bd38      	pop	{r3, r4, r5, pc}

08012818 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 8012818:	4800      	ldr	r0, [pc, #0]	@ (801281c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 801281a:	4770      	bx	lr
 801281c:	20000620 	.word	0x20000620

08012820 <ucdr_serialize_endian_array_char>:
 8012820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012824:	4619      	mov	r1, r3
 8012826:	461f      	mov	r7, r3
 8012828:	4605      	mov	r5, r0
 801282a:	4690      	mov	r8, r2
 801282c:	f7fb fb2a 	bl	800de84 <ucdr_check_buffer_available_for>
 8012830:	b9e0      	cbnz	r0, 801286c <ucdr_serialize_endian_array_char+0x4c>
 8012832:	463e      	mov	r6, r7
 8012834:	e009      	b.n	801284a <ucdr_serialize_endian_array_char+0x2a>
 8012836:	68a8      	ldr	r0, [r5, #8]
 8012838:	f009 ff21 	bl	801c67e <memcpy>
 801283c:	68ab      	ldr	r3, [r5, #8]
 801283e:	6928      	ldr	r0, [r5, #16]
 8012840:	4423      	add	r3, r4
 8012842:	4420      	add	r0, r4
 8012844:	1b36      	subs	r6, r6, r4
 8012846:	60ab      	str	r3, [r5, #8]
 8012848:	6128      	str	r0, [r5, #16]
 801284a:	4631      	mov	r1, r6
 801284c:	2201      	movs	r2, #1
 801284e:	4628      	mov	r0, r5
 8012850:	f7fb fba0 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 8012854:	1bb9      	subs	r1, r7, r6
 8012856:	4441      	add	r1, r8
 8012858:	4604      	mov	r4, r0
 801285a:	4602      	mov	r2, r0
 801285c:	2800      	cmp	r0, #0
 801285e:	d1ea      	bne.n	8012836 <ucdr_serialize_endian_array_char+0x16>
 8012860:	2301      	movs	r3, #1
 8012862:	7da8      	ldrb	r0, [r5, #22]
 8012864:	756b      	strb	r3, [r5, #21]
 8012866:	4058      	eors	r0, r3
 8012868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801286c:	463a      	mov	r2, r7
 801286e:	68a8      	ldr	r0, [r5, #8]
 8012870:	4641      	mov	r1, r8
 8012872:	f009 ff04 	bl	801c67e <memcpy>
 8012876:	68aa      	ldr	r2, [r5, #8]
 8012878:	692b      	ldr	r3, [r5, #16]
 801287a:	443a      	add	r2, r7
 801287c:	443b      	add	r3, r7
 801287e:	60aa      	str	r2, [r5, #8]
 8012880:	612b      	str	r3, [r5, #16]
 8012882:	e7ed      	b.n	8012860 <ucdr_serialize_endian_array_char+0x40>

08012884 <ucdr_deserialize_endian_array_char>:
 8012884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012888:	4619      	mov	r1, r3
 801288a:	461f      	mov	r7, r3
 801288c:	4605      	mov	r5, r0
 801288e:	4690      	mov	r8, r2
 8012890:	f7fb faf8 	bl	800de84 <ucdr_check_buffer_available_for>
 8012894:	b9e0      	cbnz	r0, 80128d0 <ucdr_deserialize_endian_array_char+0x4c>
 8012896:	463e      	mov	r6, r7
 8012898:	e009      	b.n	80128ae <ucdr_deserialize_endian_array_char+0x2a>
 801289a:	68a9      	ldr	r1, [r5, #8]
 801289c:	f009 feef 	bl	801c67e <memcpy>
 80128a0:	68ab      	ldr	r3, [r5, #8]
 80128a2:	6928      	ldr	r0, [r5, #16]
 80128a4:	4423      	add	r3, r4
 80128a6:	4420      	add	r0, r4
 80128a8:	1b36      	subs	r6, r6, r4
 80128aa:	60ab      	str	r3, [r5, #8]
 80128ac:	6128      	str	r0, [r5, #16]
 80128ae:	2201      	movs	r2, #1
 80128b0:	4631      	mov	r1, r6
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7fb fb6e 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 80128b8:	4604      	mov	r4, r0
 80128ba:	1bb8      	subs	r0, r7, r6
 80128bc:	4440      	add	r0, r8
 80128be:	4622      	mov	r2, r4
 80128c0:	2c00      	cmp	r4, #0
 80128c2:	d1ea      	bne.n	801289a <ucdr_deserialize_endian_array_char+0x16>
 80128c4:	2301      	movs	r3, #1
 80128c6:	7da8      	ldrb	r0, [r5, #22]
 80128c8:	756b      	strb	r3, [r5, #21]
 80128ca:	4058      	eors	r0, r3
 80128cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128d0:	463a      	mov	r2, r7
 80128d2:	68a9      	ldr	r1, [r5, #8]
 80128d4:	4640      	mov	r0, r8
 80128d6:	f009 fed2 	bl	801c67e <memcpy>
 80128da:	68aa      	ldr	r2, [r5, #8]
 80128dc:	692b      	ldr	r3, [r5, #16]
 80128de:	443a      	add	r2, r7
 80128e0:	443b      	add	r3, r7
 80128e2:	60aa      	str	r2, [r5, #8]
 80128e4:	612b      	str	r3, [r5, #16]
 80128e6:	e7ed      	b.n	80128c4 <ucdr_deserialize_endian_array_char+0x40>

080128e8 <ucdr_serialize_array_uint8_t>:
 80128e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ec:	4688      	mov	r8, r1
 80128ee:	4611      	mov	r1, r2
 80128f0:	4617      	mov	r7, r2
 80128f2:	4605      	mov	r5, r0
 80128f4:	f7fb fac6 	bl	800de84 <ucdr_check_buffer_available_for>
 80128f8:	b9e0      	cbnz	r0, 8012934 <ucdr_serialize_array_uint8_t+0x4c>
 80128fa:	463e      	mov	r6, r7
 80128fc:	e009      	b.n	8012912 <ucdr_serialize_array_uint8_t+0x2a>
 80128fe:	68a8      	ldr	r0, [r5, #8]
 8012900:	f009 febd 	bl	801c67e <memcpy>
 8012904:	68aa      	ldr	r2, [r5, #8]
 8012906:	692b      	ldr	r3, [r5, #16]
 8012908:	4422      	add	r2, r4
 801290a:	4423      	add	r3, r4
 801290c:	1b36      	subs	r6, r6, r4
 801290e:	60aa      	str	r2, [r5, #8]
 8012910:	612b      	str	r3, [r5, #16]
 8012912:	4631      	mov	r1, r6
 8012914:	2201      	movs	r2, #1
 8012916:	4628      	mov	r0, r5
 8012918:	f7fb fb3c 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 801291c:	1bb9      	subs	r1, r7, r6
 801291e:	4441      	add	r1, r8
 8012920:	4604      	mov	r4, r0
 8012922:	4602      	mov	r2, r0
 8012924:	2800      	cmp	r0, #0
 8012926:	d1ea      	bne.n	80128fe <ucdr_serialize_array_uint8_t+0x16>
 8012928:	2301      	movs	r3, #1
 801292a:	7da8      	ldrb	r0, [r5, #22]
 801292c:	756b      	strb	r3, [r5, #21]
 801292e:	4058      	eors	r0, r3
 8012930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012934:	463a      	mov	r2, r7
 8012936:	68a8      	ldr	r0, [r5, #8]
 8012938:	4641      	mov	r1, r8
 801293a:	f009 fea0 	bl	801c67e <memcpy>
 801293e:	68aa      	ldr	r2, [r5, #8]
 8012940:	692b      	ldr	r3, [r5, #16]
 8012942:	443a      	add	r2, r7
 8012944:	443b      	add	r3, r7
 8012946:	60aa      	str	r2, [r5, #8]
 8012948:	612b      	str	r3, [r5, #16]
 801294a:	e7ed      	b.n	8012928 <ucdr_serialize_array_uint8_t+0x40>

0801294c <ucdr_serialize_endian_array_uint8_t>:
 801294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012950:	4619      	mov	r1, r3
 8012952:	461f      	mov	r7, r3
 8012954:	4605      	mov	r5, r0
 8012956:	4690      	mov	r8, r2
 8012958:	f7fb fa94 	bl	800de84 <ucdr_check_buffer_available_for>
 801295c:	b9e0      	cbnz	r0, 8012998 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801295e:	463e      	mov	r6, r7
 8012960:	e009      	b.n	8012976 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012962:	68a8      	ldr	r0, [r5, #8]
 8012964:	f009 fe8b 	bl	801c67e <memcpy>
 8012968:	68ab      	ldr	r3, [r5, #8]
 801296a:	6928      	ldr	r0, [r5, #16]
 801296c:	4423      	add	r3, r4
 801296e:	4420      	add	r0, r4
 8012970:	1b36      	subs	r6, r6, r4
 8012972:	60ab      	str	r3, [r5, #8]
 8012974:	6128      	str	r0, [r5, #16]
 8012976:	4631      	mov	r1, r6
 8012978:	2201      	movs	r2, #1
 801297a:	4628      	mov	r0, r5
 801297c:	f7fb fb0a 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 8012980:	1bb9      	subs	r1, r7, r6
 8012982:	4441      	add	r1, r8
 8012984:	4604      	mov	r4, r0
 8012986:	4602      	mov	r2, r0
 8012988:	2800      	cmp	r0, #0
 801298a:	d1ea      	bne.n	8012962 <ucdr_serialize_endian_array_uint8_t+0x16>
 801298c:	2301      	movs	r3, #1
 801298e:	7da8      	ldrb	r0, [r5, #22]
 8012990:	756b      	strb	r3, [r5, #21]
 8012992:	4058      	eors	r0, r3
 8012994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012998:	463a      	mov	r2, r7
 801299a:	68a8      	ldr	r0, [r5, #8]
 801299c:	4641      	mov	r1, r8
 801299e:	f009 fe6e 	bl	801c67e <memcpy>
 80129a2:	68aa      	ldr	r2, [r5, #8]
 80129a4:	692b      	ldr	r3, [r5, #16]
 80129a6:	443a      	add	r2, r7
 80129a8:	443b      	add	r3, r7
 80129aa:	60aa      	str	r2, [r5, #8]
 80129ac:	612b      	str	r3, [r5, #16]
 80129ae:	e7ed      	b.n	801298c <ucdr_serialize_endian_array_uint8_t+0x40>

080129b0 <ucdr_deserialize_array_uint8_t>:
 80129b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b4:	4688      	mov	r8, r1
 80129b6:	4611      	mov	r1, r2
 80129b8:	4617      	mov	r7, r2
 80129ba:	4605      	mov	r5, r0
 80129bc:	f7fb fa62 	bl	800de84 <ucdr_check_buffer_available_for>
 80129c0:	b9e0      	cbnz	r0, 80129fc <ucdr_deserialize_array_uint8_t+0x4c>
 80129c2:	463e      	mov	r6, r7
 80129c4:	e009      	b.n	80129da <ucdr_deserialize_array_uint8_t+0x2a>
 80129c6:	68a9      	ldr	r1, [r5, #8]
 80129c8:	f009 fe59 	bl	801c67e <memcpy>
 80129cc:	68aa      	ldr	r2, [r5, #8]
 80129ce:	692b      	ldr	r3, [r5, #16]
 80129d0:	4422      	add	r2, r4
 80129d2:	4423      	add	r3, r4
 80129d4:	1b36      	subs	r6, r6, r4
 80129d6:	60aa      	str	r2, [r5, #8]
 80129d8:	612b      	str	r3, [r5, #16]
 80129da:	2201      	movs	r2, #1
 80129dc:	4631      	mov	r1, r6
 80129de:	4628      	mov	r0, r5
 80129e0:	f7fb fad8 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 80129e4:	4604      	mov	r4, r0
 80129e6:	1bb8      	subs	r0, r7, r6
 80129e8:	4440      	add	r0, r8
 80129ea:	4622      	mov	r2, r4
 80129ec:	2c00      	cmp	r4, #0
 80129ee:	d1ea      	bne.n	80129c6 <ucdr_deserialize_array_uint8_t+0x16>
 80129f0:	2301      	movs	r3, #1
 80129f2:	7da8      	ldrb	r0, [r5, #22]
 80129f4:	756b      	strb	r3, [r5, #21]
 80129f6:	4058      	eors	r0, r3
 80129f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129fc:	463a      	mov	r2, r7
 80129fe:	68a9      	ldr	r1, [r5, #8]
 8012a00:	4640      	mov	r0, r8
 8012a02:	f009 fe3c 	bl	801c67e <memcpy>
 8012a06:	68aa      	ldr	r2, [r5, #8]
 8012a08:	692b      	ldr	r3, [r5, #16]
 8012a0a:	443a      	add	r2, r7
 8012a0c:	443b      	add	r3, r7
 8012a0e:	60aa      	str	r2, [r5, #8]
 8012a10:	612b      	str	r3, [r5, #16]
 8012a12:	e7ed      	b.n	80129f0 <ucdr_deserialize_array_uint8_t+0x40>

08012a14 <ucdr_deserialize_endian_array_uint8_t>:
 8012a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a18:	4619      	mov	r1, r3
 8012a1a:	461f      	mov	r7, r3
 8012a1c:	4605      	mov	r5, r0
 8012a1e:	4690      	mov	r8, r2
 8012a20:	f7fb fa30 	bl	800de84 <ucdr_check_buffer_available_for>
 8012a24:	b9e0      	cbnz	r0, 8012a60 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012a26:	463e      	mov	r6, r7
 8012a28:	e009      	b.n	8012a3e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012a2a:	68a9      	ldr	r1, [r5, #8]
 8012a2c:	f009 fe27 	bl	801c67e <memcpy>
 8012a30:	68ab      	ldr	r3, [r5, #8]
 8012a32:	6928      	ldr	r0, [r5, #16]
 8012a34:	4423      	add	r3, r4
 8012a36:	4420      	add	r0, r4
 8012a38:	1b36      	subs	r6, r6, r4
 8012a3a:	60ab      	str	r3, [r5, #8]
 8012a3c:	6128      	str	r0, [r5, #16]
 8012a3e:	2201      	movs	r2, #1
 8012a40:	4631      	mov	r1, r6
 8012a42:	4628      	mov	r0, r5
 8012a44:	f7fb faa6 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 8012a48:	4604      	mov	r4, r0
 8012a4a:	1bb8      	subs	r0, r7, r6
 8012a4c:	4440      	add	r0, r8
 8012a4e:	4622      	mov	r2, r4
 8012a50:	2c00      	cmp	r4, #0
 8012a52:	d1ea      	bne.n	8012a2a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012a54:	2301      	movs	r3, #1
 8012a56:	7da8      	ldrb	r0, [r5, #22]
 8012a58:	756b      	strb	r3, [r5, #21]
 8012a5a:	4058      	eors	r0, r3
 8012a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a60:	463a      	mov	r2, r7
 8012a62:	68a9      	ldr	r1, [r5, #8]
 8012a64:	4640      	mov	r0, r8
 8012a66:	f009 fe0a 	bl	801c67e <memcpy>
 8012a6a:	68aa      	ldr	r2, [r5, #8]
 8012a6c:	692b      	ldr	r3, [r5, #16]
 8012a6e:	443a      	add	r2, r7
 8012a70:	443b      	add	r3, r7
 8012a72:	60aa      	str	r2, [r5, #8]
 8012a74:	612b      	str	r3, [r5, #16]
 8012a76:	e7ed      	b.n	8012a54 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012a78 <ucdr_serialize_array_double>:
 8012a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a7c:	460e      	mov	r6, r1
 8012a7e:	2108      	movs	r1, #8
 8012a80:	4604      	mov	r4, r0
 8012a82:	4617      	mov	r7, r2
 8012a84:	f7fb fa5e 	bl	800df44 <ucdr_buffer_alignment>
 8012a88:	4601      	mov	r1, r0
 8012a8a:	4620      	mov	r0, r4
 8012a8c:	7d65      	ldrb	r5, [r4, #21]
 8012a8e:	f7fb fa9d 	bl	800dfcc <ucdr_advance_buffer>
 8012a92:	7d21      	ldrb	r1, [r4, #20]
 8012a94:	7565      	strb	r5, [r4, #21]
 8012a96:	2901      	cmp	r1, #1
 8012a98:	d010      	beq.n	8012abc <ucdr_serialize_array_double+0x44>
 8012a9a:	b157      	cbz	r7, 8012ab2 <ucdr_serialize_array_double+0x3a>
 8012a9c:	2500      	movs	r5, #0
 8012a9e:	e000      	b.n	8012aa2 <ucdr_serialize_array_double+0x2a>
 8012aa0:	7d21      	ldrb	r1, [r4, #20]
 8012aa2:	ecb6 0b02 	vldmia	r6!, {d0}
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	3501      	adds	r5, #1
 8012aaa:	f7fa ff85 	bl	800d9b8 <ucdr_serialize_endian_double>
 8012aae:	42af      	cmp	r7, r5
 8012ab0:	d1f6      	bne.n	8012aa0 <ucdr_serialize_array_double+0x28>
 8012ab2:	7da0      	ldrb	r0, [r4, #22]
 8012ab4:	f080 0001 	eor.w	r0, r0, #1
 8012ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012abc:	00ff      	lsls	r7, r7, #3
 8012abe:	4639      	mov	r1, r7
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	f7fb f9df 	bl	800de84 <ucdr_check_buffer_available_for>
 8012ac6:	b9f8      	cbnz	r0, 8012b08 <ucdr_serialize_array_double+0x90>
 8012ac8:	46b8      	mov	r8, r7
 8012aca:	e00a      	b.n	8012ae2 <ucdr_serialize_array_double+0x6a>
 8012acc:	68a0      	ldr	r0, [r4, #8]
 8012ace:	f009 fdd6 	bl	801c67e <memcpy>
 8012ad2:	68a2      	ldr	r2, [r4, #8]
 8012ad4:	6923      	ldr	r3, [r4, #16]
 8012ad6:	442a      	add	r2, r5
 8012ad8:	442b      	add	r3, r5
 8012ada:	eba8 0805 	sub.w	r8, r8, r5
 8012ade:	60a2      	str	r2, [r4, #8]
 8012ae0:	6123      	str	r3, [r4, #16]
 8012ae2:	4641      	mov	r1, r8
 8012ae4:	2208      	movs	r2, #8
 8012ae6:	4620      	mov	r0, r4
 8012ae8:	f7fb fa54 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 8012aec:	eba7 0108 	sub.w	r1, r7, r8
 8012af0:	4431      	add	r1, r6
 8012af2:	4605      	mov	r5, r0
 8012af4:	4602      	mov	r2, r0
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d1e8      	bne.n	8012acc <ucdr_serialize_array_double+0x54>
 8012afa:	7da0      	ldrb	r0, [r4, #22]
 8012afc:	2308      	movs	r3, #8
 8012afe:	7563      	strb	r3, [r4, #21]
 8012b00:	f080 0001 	eor.w	r0, r0, #1
 8012b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b08:	463a      	mov	r2, r7
 8012b0a:	68a0      	ldr	r0, [r4, #8]
 8012b0c:	4631      	mov	r1, r6
 8012b0e:	f009 fdb6 	bl	801c67e <memcpy>
 8012b12:	68a2      	ldr	r2, [r4, #8]
 8012b14:	6923      	ldr	r3, [r4, #16]
 8012b16:	443a      	add	r2, r7
 8012b18:	441f      	add	r7, r3
 8012b1a:	60a2      	str	r2, [r4, #8]
 8012b1c:	6127      	str	r7, [r4, #16]
 8012b1e:	e7ec      	b.n	8012afa <ucdr_serialize_array_double+0x82>

08012b20 <ucdr_deserialize_array_double>:
 8012b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b24:	460e      	mov	r6, r1
 8012b26:	2108      	movs	r1, #8
 8012b28:	4604      	mov	r4, r0
 8012b2a:	4617      	mov	r7, r2
 8012b2c:	f7fb fa0a 	bl	800df44 <ucdr_buffer_alignment>
 8012b30:	4601      	mov	r1, r0
 8012b32:	4620      	mov	r0, r4
 8012b34:	7d65      	ldrb	r5, [r4, #21]
 8012b36:	f7fb fa49 	bl	800dfcc <ucdr_advance_buffer>
 8012b3a:	7d21      	ldrb	r1, [r4, #20]
 8012b3c:	7565      	strb	r5, [r4, #21]
 8012b3e:	2901      	cmp	r1, #1
 8012b40:	d011      	beq.n	8012b66 <ucdr_deserialize_array_double+0x46>
 8012b42:	b15f      	cbz	r7, 8012b5c <ucdr_deserialize_array_double+0x3c>
 8012b44:	2500      	movs	r5, #0
 8012b46:	e000      	b.n	8012b4a <ucdr_deserialize_array_double+0x2a>
 8012b48:	7d21      	ldrb	r1, [r4, #20]
 8012b4a:	4632      	mov	r2, r6
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	3501      	adds	r5, #1
 8012b50:	f7fb f8ca 	bl	800dce8 <ucdr_deserialize_endian_double>
 8012b54:	42af      	cmp	r7, r5
 8012b56:	f106 0608 	add.w	r6, r6, #8
 8012b5a:	d1f5      	bne.n	8012b48 <ucdr_deserialize_array_double+0x28>
 8012b5c:	7da0      	ldrb	r0, [r4, #22]
 8012b5e:	f080 0001 	eor.w	r0, r0, #1
 8012b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b66:	00ff      	lsls	r7, r7, #3
 8012b68:	4639      	mov	r1, r7
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f7fb f98a 	bl	800de84 <ucdr_check_buffer_available_for>
 8012b70:	b9f8      	cbnz	r0, 8012bb2 <ucdr_deserialize_array_double+0x92>
 8012b72:	46b8      	mov	r8, r7
 8012b74:	e00a      	b.n	8012b8c <ucdr_deserialize_array_double+0x6c>
 8012b76:	68a1      	ldr	r1, [r4, #8]
 8012b78:	f009 fd81 	bl	801c67e <memcpy>
 8012b7c:	68a2      	ldr	r2, [r4, #8]
 8012b7e:	6923      	ldr	r3, [r4, #16]
 8012b80:	442a      	add	r2, r5
 8012b82:	442b      	add	r3, r5
 8012b84:	eba8 0805 	sub.w	r8, r8, r5
 8012b88:	60a2      	str	r2, [r4, #8]
 8012b8a:	6123      	str	r3, [r4, #16]
 8012b8c:	2208      	movs	r2, #8
 8012b8e:	4641      	mov	r1, r8
 8012b90:	4620      	mov	r0, r4
 8012b92:	f7fb f9ff 	bl	800df94 <ucdr_check_final_buffer_behavior_array>
 8012b96:	4605      	mov	r5, r0
 8012b98:	eba7 0008 	sub.w	r0, r7, r8
 8012b9c:	4430      	add	r0, r6
 8012b9e:	462a      	mov	r2, r5
 8012ba0:	2d00      	cmp	r5, #0
 8012ba2:	d1e8      	bne.n	8012b76 <ucdr_deserialize_array_double+0x56>
 8012ba4:	7da0      	ldrb	r0, [r4, #22]
 8012ba6:	2308      	movs	r3, #8
 8012ba8:	7563      	strb	r3, [r4, #21]
 8012baa:	f080 0001 	eor.w	r0, r0, #1
 8012bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bb2:	463a      	mov	r2, r7
 8012bb4:	68a1      	ldr	r1, [r4, #8]
 8012bb6:	4630      	mov	r0, r6
 8012bb8:	f009 fd61 	bl	801c67e <memcpy>
 8012bbc:	68a2      	ldr	r2, [r4, #8]
 8012bbe:	6923      	ldr	r3, [r4, #16]
 8012bc0:	443a      	add	r2, r7
 8012bc2:	441f      	add	r7, r3
 8012bc4:	60a2      	str	r2, [r4, #8]
 8012bc6:	6127      	str	r7, [r4, #16]
 8012bc8:	e7ec      	b.n	8012ba4 <ucdr_deserialize_array_double+0x84>
 8012bca:	bf00      	nop

08012bcc <ucdr_serialize_sequence_char>:
 8012bcc:	b570      	push	{r4, r5, r6, lr}
 8012bce:	4615      	mov	r5, r2
 8012bd0:	460e      	mov	r6, r1
 8012bd2:	7d01      	ldrb	r1, [r0, #20]
 8012bd4:	4604      	mov	r4, r0
 8012bd6:	f7fa f975 	bl	800cec4 <ucdr_serialize_endian_uint32_t>
 8012bda:	b90d      	cbnz	r5, 8012be0 <ucdr_serialize_sequence_char+0x14>
 8012bdc:	2001      	movs	r0, #1
 8012bde:	bd70      	pop	{r4, r5, r6, pc}
 8012be0:	7d21      	ldrb	r1, [r4, #20]
 8012be2:	462b      	mov	r3, r5
 8012be4:	4632      	mov	r2, r6
 8012be6:	4620      	mov	r0, r4
 8012be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bec:	f7ff be18 	b.w	8012820 <ucdr_serialize_endian_array_char>

08012bf0 <ucdr_deserialize_sequence_char>:
 8012bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf4:	461d      	mov	r5, r3
 8012bf6:	4616      	mov	r6, r2
 8012bf8:	460f      	mov	r7, r1
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	7d01      	ldrb	r1, [r0, #20]
 8012bfe:	4604      	mov	r4, r0
 8012c00:	f7fa fa88 	bl	800d114 <ucdr_deserialize_endian_uint32_t>
 8012c04:	682b      	ldr	r3, [r5, #0]
 8012c06:	429e      	cmp	r6, r3
 8012c08:	bf3c      	itt	cc
 8012c0a:	2201      	movcc	r2, #1
 8012c0c:	75a2      	strbcc	r2, [r4, #22]
 8012c0e:	b913      	cbnz	r3, 8012c16 <ucdr_deserialize_sequence_char+0x26>
 8012c10:	2001      	movs	r0, #1
 8012c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c16:	7d21      	ldrb	r1, [r4, #20]
 8012c18:	463a      	mov	r2, r7
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c20:	f7ff be30 	b.w	8012884 <ucdr_deserialize_endian_array_char>

08012c24 <ucdr_serialize_sequence_uint8_t>:
 8012c24:	b570      	push	{r4, r5, r6, lr}
 8012c26:	4615      	mov	r5, r2
 8012c28:	460e      	mov	r6, r1
 8012c2a:	7d01      	ldrb	r1, [r0, #20]
 8012c2c:	4604      	mov	r4, r0
 8012c2e:	f7fa f949 	bl	800cec4 <ucdr_serialize_endian_uint32_t>
 8012c32:	b90d      	cbnz	r5, 8012c38 <ucdr_serialize_sequence_uint8_t+0x14>
 8012c34:	2001      	movs	r0, #1
 8012c36:	bd70      	pop	{r4, r5, r6, pc}
 8012c38:	7d21      	ldrb	r1, [r4, #20]
 8012c3a:	462b      	mov	r3, r5
 8012c3c:	4632      	mov	r2, r6
 8012c3e:	4620      	mov	r0, r4
 8012c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c44:	f7ff be82 	b.w	801294c <ucdr_serialize_endian_array_uint8_t>

08012c48 <ucdr_deserialize_sequence_uint8_t>:
 8012c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4c:	461d      	mov	r5, r3
 8012c4e:	4616      	mov	r6, r2
 8012c50:	460f      	mov	r7, r1
 8012c52:	461a      	mov	r2, r3
 8012c54:	7d01      	ldrb	r1, [r0, #20]
 8012c56:	4604      	mov	r4, r0
 8012c58:	f7fa fa5c 	bl	800d114 <ucdr_deserialize_endian_uint32_t>
 8012c5c:	682b      	ldr	r3, [r5, #0]
 8012c5e:	429e      	cmp	r6, r3
 8012c60:	bf3c      	itt	cc
 8012c62:	2201      	movcc	r2, #1
 8012c64:	75a2      	strbcc	r2, [r4, #22]
 8012c66:	b913      	cbnz	r3, 8012c6e <ucdr_deserialize_sequence_uint8_t+0x26>
 8012c68:	2001      	movs	r0, #1
 8012c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c6e:	7d21      	ldrb	r1, [r4, #20]
 8012c70:	463a      	mov	r2, r7
 8012c72:	4620      	mov	r0, r4
 8012c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c78:	f7ff becc 	b.w	8012a14 <ucdr_deserialize_endian_array_uint8_t>

08012c7c <uxr_buffer_delete_entity>:
 8012c7c:	b510      	push	{r4, lr}
 8012c7e:	2300      	movs	r3, #0
 8012c80:	b08e      	sub	sp, #56	@ 0x38
 8012c82:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012c86:	2303      	movs	r3, #3
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	2204      	movs	r2, #4
 8012c8c:	ab06      	add	r3, sp, #24
 8012c8e:	4604      	mov	r4, r0
 8012c90:	9103      	str	r1, [sp, #12]
 8012c92:	f001 fc71 	bl	8014578 <uxr_prepare_stream_to_write_submessage>
 8012c96:	b918      	cbnz	r0, 8012ca0 <uxr_buffer_delete_entity+0x24>
 8012c98:	4604      	mov	r4, r0
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	b00e      	add	sp, #56	@ 0x38
 8012c9e:	bd10      	pop	{r4, pc}
 8012ca0:	9902      	ldr	r1, [sp, #8]
 8012ca2:	aa05      	add	r2, sp, #20
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f001 fd9d 	bl	80147e4 <uxr_init_base_object_request>
 8012caa:	a905      	add	r1, sp, #20
 8012cac:	4604      	mov	r4, r0
 8012cae:	a806      	add	r0, sp, #24
 8012cb0:	f003 fc94 	bl	80165dc <uxr_serialize_DELETE_Payload>
 8012cb4:	4620      	mov	r0, r4
 8012cb6:	b00e      	add	sp, #56	@ 0x38
 8012cb8:	bd10      	pop	{r4, pc}
 8012cba:	bf00      	nop

08012cbc <uxr_common_create_entity>:
 8012cbc:	b510      	push	{r4, lr}
 8012cbe:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012cc2:	b08c      	sub	sp, #48	@ 0x30
 8012cc4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012cc8:	f1bc 0f01 	cmp.w	ip, #1
 8012ccc:	bf0c      	ite	eq
 8012cce:	f003 0201 	andeq.w	r2, r3, #1
 8012cd2:	2200      	movne	r2, #0
 8012cd4:	330e      	adds	r3, #14
 8012cd6:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8012cda:	9101      	str	r1, [sp, #4]
 8012cdc:	441a      	add	r2, r3
 8012cde:	2301      	movs	r3, #1
 8012ce0:	9300      	str	r3, [sp, #0]
 8012ce2:	9903      	ldr	r1, [sp, #12]
 8012ce4:	ab04      	add	r3, sp, #16
 8012ce6:	b292      	uxth	r2, r2
 8012ce8:	4604      	mov	r4, r0
 8012cea:	f001 fc45 	bl	8014578 <uxr_prepare_stream_to_write_submessage>
 8012cee:	b918      	cbnz	r0, 8012cf8 <uxr_common_create_entity+0x3c>
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	b00c      	add	sp, #48	@ 0x30
 8012cf6:	bd10      	pop	{r4, pc}
 8012cf8:	9902      	ldr	r1, [sp, #8]
 8012cfa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f001 fd71 	bl	80147e4 <uxr_init_base_object_request>
 8012d02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d04:	4604      	mov	r4, r0
 8012d06:	a804      	add	r0, sp, #16
 8012d08:	f003 fbb0 	bl	801646c <uxr_serialize_CREATE_Payload>
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	b00c      	add	sp, #48	@ 0x30
 8012d10:	bd10      	pop	{r4, pc}
 8012d12:	bf00      	nop

08012d14 <uxr_buffer_create_participant_bin>:
 8012d14:	b570      	push	{r4, r5, r6, lr}
 8012d16:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8012d1a:	ac11      	add	r4, sp, #68	@ 0x44
 8012d1c:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8012d20:	2303      	movs	r3, #3
 8012d22:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012d26:	7223      	strb	r3, [r4, #8]
 8012d28:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8012d2a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8012d2e:	2201      	movs	r2, #1
 8012d30:	2100      	movs	r1, #0
 8012d32:	4605      	mov	r5, r0
 8012d34:	7122      	strb	r2, [r4, #4]
 8012d36:	f88d 1014 	strb.w	r1, [sp, #20]
 8012d3a:	b1cb      	cbz	r3, 8012d70 <uxr_buffer_create_participant_bin+0x5c>
 8012d3c:	f88d 201c 	strb.w	r2, [sp, #28]
 8012d40:	9308      	str	r3, [sp, #32]
 8012d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d46:	a915      	add	r1, sp, #84	@ 0x54
 8012d48:	a809      	add	r0, sp, #36	@ 0x24
 8012d4a:	f7fb f8ef 	bl	800df2c <ucdr_init_buffer>
 8012d4e:	a905      	add	r1, sp, #20
 8012d50:	a809      	add	r0, sp, #36	@ 0x24
 8012d52:	f002 ff6d 	bl	8015c30 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012d56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d58:	9600      	str	r6, [sp, #0]
 8012d5a:	9401      	str	r4, [sp, #4]
 8012d5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d60:	60e3      	str	r3, [r4, #12]
 8012d62:	4628      	mov	r0, r5
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	f7ff ffa9 	bl	8012cbc <uxr_common_create_entity>
 8012d6a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012d6e:	bd70      	pop	{r4, r5, r6, pc}
 8012d70:	f88d 301c 	strb.w	r3, [sp, #28]
 8012d74:	e7e5      	b.n	8012d42 <uxr_buffer_create_participant_bin+0x2e>
 8012d76:	bf00      	nop

08012d78 <uxr_buffer_create_topic_bin>:
 8012d78:	b570      	push	{r4, r5, r6, lr}
 8012d7a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012d7e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012d82:	9105      	str	r1, [sp, #20]
 8012d84:	4605      	mov	r5, r0
 8012d86:	a997      	add	r1, sp, #604	@ 0x25c
 8012d88:	4618      	mov	r0, r3
 8012d8a:	2302      	movs	r3, #2
 8012d8c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8012d90:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8012d94:	f000 fa58 	bl	8013248 <uxr_object_id_to_raw>
 8012d98:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012d9a:	9306      	str	r3, [sp, #24]
 8012d9c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8012d9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012da0:	2303      	movs	r3, #3
 8012da2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012da6:	2301      	movs	r3, #1
 8012da8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012dac:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8012db0:	a917      	add	r1, sp, #92	@ 0x5c
 8012db2:	2300      	movs	r3, #0
 8012db4:	a80b      	add	r0, sp, #44	@ 0x2c
 8012db6:	f88d 301c 	strb.w	r3, [sp, #28]
 8012dba:	f7fb f8b7 	bl	800df2c <ucdr_init_buffer>
 8012dbe:	a906      	add	r1, sp, #24
 8012dc0:	a80b      	add	r0, sp, #44	@ 0x2c
 8012dc2:	f002 ff57 	bl	8015c74 <uxr_serialize_OBJK_Topic_Binary>
 8012dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dc8:	9316      	str	r3, [sp, #88]	@ 0x58
 8012dca:	ac13      	add	r4, sp, #76	@ 0x4c
 8012dcc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012dd0:	9600      	str	r6, [sp, #0]
 8012dd2:	9401      	str	r4, [sp, #4]
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f7ff ff70 	bl	8012cbc <uxr_common_create_entity>
 8012ddc:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8012de0:	bd70      	pop	{r4, r5, r6, pc}
 8012de2:	bf00      	nop

08012de4 <uxr_buffer_create_publisher_bin>:
 8012de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012de6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8012dea:	4605      	mov	r5, r0
 8012dec:	9105      	str	r1, [sp, #20]
 8012dee:	4618      	mov	r0, r3
 8012df0:	2603      	movs	r6, #3
 8012df2:	a992      	add	r1, sp, #584	@ 0x248
 8012df4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012df8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8012dfc:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8012e00:	f000 fa22 	bl	8013248 <uxr_object_id_to_raw>
 8012e04:	2300      	movs	r3, #0
 8012e06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e0a:	a912      	add	r1, sp, #72	@ 0x48
 8012e0c:	a806      	add	r0, sp, #24
 8012e0e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012e12:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012e16:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8012e1a:	f7fb f887 	bl	800df2c <ucdr_init_buffer>
 8012e1e:	a993      	add	r1, sp, #588	@ 0x24c
 8012e20:	a806      	add	r0, sp, #24
 8012e22:	f002 ffdb 	bl	8015ddc <uxr_serialize_OBJK_Publisher_Binary>
 8012e26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e28:	9311      	str	r3, [sp, #68]	@ 0x44
 8012e2a:	ac0e      	add	r4, sp, #56	@ 0x38
 8012e2c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012e30:	9700      	str	r7, [sp, #0]
 8012e32:	9401      	str	r4, [sp, #4]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	4628      	mov	r0, r5
 8012e38:	f7ff ff40 	bl	8012cbc <uxr_common_create_entity>
 8012e3c:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e42:	bf00      	nop

08012e44 <uxr_buffer_create_subscriber_bin>:
 8012e44:	b570      	push	{r4, r5, r6, lr}
 8012e46:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8012e4a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012e4e:	9105      	str	r1, [sp, #20]
 8012e50:	4605      	mov	r5, r0
 8012e52:	a992      	add	r1, sp, #584	@ 0x248
 8012e54:	4618      	mov	r0, r3
 8012e56:	2304      	movs	r3, #4
 8012e58:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8012e5c:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8012e60:	f000 f9f2 	bl	8013248 <uxr_object_id_to_raw>
 8012e64:	2300      	movs	r3, #0
 8012e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012e6a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8012e6e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8012e72:	a912      	add	r1, sp, #72	@ 0x48
 8012e74:	2303      	movs	r3, #3
 8012e76:	a806      	add	r0, sp, #24
 8012e78:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012e7c:	f7fb f856 	bl	800df2c <ucdr_init_buffer>
 8012e80:	a993      	add	r1, sp, #588	@ 0x24c
 8012e82:	a806      	add	r0, sp, #24
 8012e84:	f003 f85a 	bl	8015f3c <uxr_serialize_OBJK_Subscriber_Binary>
 8012e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012e8a:	9311      	str	r3, [sp, #68]	@ 0x44
 8012e8c:	ac0e      	add	r4, sp, #56	@ 0x38
 8012e8e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012e92:	9600      	str	r6, [sp, #0]
 8012e94:	9401      	str	r4, [sp, #4]
 8012e96:	b29b      	uxth	r3, r3
 8012e98:	4628      	mov	r0, r5
 8012e9a:	f7ff ff0f 	bl	8012cbc <uxr_common_create_entity>
 8012e9e:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8012ea2:	bd70      	pop	{r4, r5, r6, pc}

08012ea4 <uxr_buffer_create_datawriter_bin>:
 8012ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea8:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012eac:	ac1d      	add	r4, sp, #116	@ 0x74
 8012eae:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012eb2:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8012eb6:	9105      	str	r1, [sp, #20]
 8012eb8:	4606      	mov	r6, r0
 8012eba:	a9a1      	add	r1, sp, #644	@ 0x284
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	2305      	movs	r3, #5
 8012ec0:	7123      	strb	r3, [r4, #4]
 8012ec2:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012ec6:	2703      	movs	r7, #3
 8012ec8:	f000 f9be 	bl	8013248 <uxr_object_id_to_raw>
 8012ecc:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012ece:	7227      	strb	r7, [r4, #8]
 8012ed0:	a90e      	add	r1, sp, #56	@ 0x38
 8012ed2:	f000 f9b9 	bl	8013248 <uxr_object_id_to_raw>
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012edc:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012ee0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012ee4:	3d00      	subs	r5, #0
 8012ee6:	bf18      	it	ne
 8012ee8:	2501      	movne	r5, #1
 8012eea:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012eee:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012ef2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012ef6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012efa:	2301      	movs	r3, #1
 8012efc:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012f00:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012f04:	bb8a      	cbnz	r2, 8012f6a <uxr_buffer_create_datawriter_bin+0xc6>
 8012f06:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012f0a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012f0e:	f04f 0c13 	mov.w	ip, #19
 8012f12:	250b      	movs	r5, #11
 8012f14:	2221      	movs	r2, #33	@ 0x21
 8012f16:	2111      	movs	r1, #17
 8012f18:	2009      	movs	r0, #9
 8012f1a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8012f1e:	b923      	cbnz	r3, 8012f2a <uxr_buffer_create_datawriter_bin+0x86>
 8012f20:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8012f24:	4672      	mov	r2, lr
 8012f26:	4661      	mov	r1, ip
 8012f28:	4628      	mov	r0, r5
 8012f2a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8012f2e:	2b01      	cmp	r3, #1
 8012f30:	d025      	beq.n	8012f7e <uxr_buffer_create_datawriter_bin+0xda>
 8012f32:	2b03      	cmp	r3, #3
 8012f34:	d029      	beq.n	8012f8a <uxr_buffer_create_datawriter_bin+0xe6>
 8012f36:	b32b      	cbz	r3, 8012f84 <uxr_buffer_create_datawriter_bin+0xe0>
 8012f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f3c:	a921      	add	r1, sp, #132	@ 0x84
 8012f3e:	a806      	add	r0, sp, #24
 8012f40:	f7fa fff4 	bl	800df2c <ucdr_init_buffer>
 8012f44:	a90e      	add	r1, sp, #56	@ 0x38
 8012f46:	a806      	add	r0, sp, #24
 8012f48:	f003 f8aa 	bl	80160a0 <uxr_serialize_OBJK_DataWriter_Binary>
 8012f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012f4e:	f8cd 8000 	str.w	r8, [sp]
 8012f52:	9401      	str	r4, [sp, #4]
 8012f54:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012f58:	60e3      	str	r3, [r4, #12]
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	f7ff fead 	bl	8012cbc <uxr_common_create_entity>
 8012f62:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8012f6e:	f04f 0c12 	mov.w	ip, #18
 8012f72:	250a      	movs	r5, #10
 8012f74:	2220      	movs	r2, #32
 8012f76:	2110      	movs	r1, #16
 8012f78:	2008      	movs	r0, #8
 8012f7a:	2702      	movs	r7, #2
 8012f7c:	e7cd      	b.n	8012f1a <uxr_buffer_create_datawriter_bin+0x76>
 8012f7e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8012f82:	e7d9      	b.n	8012f38 <uxr_buffer_create_datawriter_bin+0x94>
 8012f84:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8012f88:	e7d6      	b.n	8012f38 <uxr_buffer_create_datawriter_bin+0x94>
 8012f8a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8012f8e:	e7d3      	b.n	8012f38 <uxr_buffer_create_datawriter_bin+0x94>

08012f90 <uxr_buffer_create_datareader_bin>:
 8012f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f94:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012f98:	ac1f      	add	r4, sp, #124	@ 0x7c
 8012f9a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012f9e:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8012fa2:	9105      	str	r1, [sp, #20]
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	a9a3      	add	r1, sp, #652	@ 0x28c
 8012fa8:	4618      	mov	r0, r3
 8012faa:	2306      	movs	r3, #6
 8012fac:	7123      	strb	r3, [r4, #4]
 8012fae:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8012fb2:	2703      	movs	r7, #3
 8012fb4:	f000 f948 	bl	8013248 <uxr_object_id_to_raw>
 8012fb8:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8012fba:	7227      	strb	r7, [r4, #8]
 8012fbc:	a90e      	add	r1, sp, #56	@ 0x38
 8012fbe:	f000 f943 	bl	8013248 <uxr_object_id_to_raw>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012fc8:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8012fcc:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8012fd0:	3d00      	subs	r5, #0
 8012fd2:	bf18      	it	ne
 8012fd4:	2501      	movne	r5, #1
 8012fd6:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8012fda:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012fde:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012fe2:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012fe6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012fea:	2301      	movs	r3, #1
 8012fec:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012ff0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012ff4:	bb8a      	cbnz	r2, 801305a <uxr_buffer_create_datareader_bin+0xca>
 8012ff6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8012ffa:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8012ffe:	f04f 0c13 	mov.w	ip, #19
 8013002:	250b      	movs	r5, #11
 8013004:	2221      	movs	r2, #33	@ 0x21
 8013006:	2111      	movs	r1, #17
 8013008:	2009      	movs	r0, #9
 801300a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 801300e:	b923      	cbnz	r3, 801301a <uxr_buffer_create_datareader_bin+0x8a>
 8013010:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8013014:	4672      	mov	r2, lr
 8013016:	4661      	mov	r1, ip
 8013018:	4628      	mov	r0, r5
 801301a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 801301e:	2b01      	cmp	r3, #1
 8013020:	d025      	beq.n	801306e <uxr_buffer_create_datareader_bin+0xde>
 8013022:	2b03      	cmp	r3, #3
 8013024:	d029      	beq.n	801307a <uxr_buffer_create_datareader_bin+0xea>
 8013026:	b32b      	cbz	r3, 8013074 <uxr_buffer_create_datareader_bin+0xe4>
 8013028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801302c:	a923      	add	r1, sp, #140	@ 0x8c
 801302e:	a806      	add	r0, sp, #24
 8013030:	f7fa ff7c 	bl	800df2c <ucdr_init_buffer>
 8013034:	a90e      	add	r1, sp, #56	@ 0x38
 8013036:	a806      	add	r0, sp, #24
 8013038:	f002 fff6 	bl	8016028 <uxr_serialize_OBJK_DataReader_Binary>
 801303c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801303e:	f8cd 8000 	str.w	r8, [sp]
 8013042:	9401      	str	r4, [sp, #4]
 8013044:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013048:	60e3      	str	r3, [r4, #12]
 801304a:	4630      	mov	r0, r6
 801304c:	b29b      	uxth	r3, r3
 801304e:	f7ff fe35 	bl	8012cbc <uxr_common_create_entity>
 8013052:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801305a:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 801305e:	f04f 0c12 	mov.w	ip, #18
 8013062:	250a      	movs	r5, #10
 8013064:	2220      	movs	r2, #32
 8013066:	2110      	movs	r1, #16
 8013068:	2008      	movs	r0, #8
 801306a:	2702      	movs	r7, #2
 801306c:	e7cd      	b.n	801300a <uxr_buffer_create_datareader_bin+0x7a>
 801306e:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8013072:	e7d9      	b.n	8013028 <uxr_buffer_create_datareader_bin+0x98>
 8013074:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8013078:	e7d6      	b.n	8013028 <uxr_buffer_create_datareader_bin+0x98>
 801307a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 801307e:	e7d3      	b.n	8013028 <uxr_buffer_create_datareader_bin+0x98>

08013080 <get_custom_error>:
 8013080:	4b01      	ldr	r3, [pc, #4]	@ (8013088 <get_custom_error+0x8>)
 8013082:	7818      	ldrb	r0, [r3, #0]
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	20011aac 	.word	0x20011aac

0801308c <recv_custom_msg>:
 801308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	4693      	mov	fp, r2
 8013092:	b089      	sub	sp, #36	@ 0x24
 8013094:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8013098:	9305      	str	r3, [sp, #20]
 801309a:	468a      	mov	sl, r1
 801309c:	2100      	movs	r1, #0
 801309e:	4604      	mov	r4, r0
 80130a0:	f88d 101e 	strb.w	r1, [sp, #30]
 80130a4:	b322      	cbz	r2, 80130f0 <recv_custom_msg+0x64>
 80130a6:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80130aa:	f10d 081f 	add.w	r8, sp, #31
 80130ae:	af05      	add	r7, sp, #20
 80130b0:	f10d 061e 	add.w	r6, sp, #30
 80130b4:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80130b8:	e002      	b.n	80130c0 <recv_custom_msg+0x34>
 80130ba:	9b05      	ldr	r3, [sp, #20]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	dd0f      	ble.n	80130e0 <recv_custom_msg+0x54>
 80130c0:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80130c4:	4623      	mov	r3, r4
 80130c6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80130ca:	e9cd 5600 	strd	r5, r6, [sp]
 80130ce:	4622      	mov	r2, r4
 80130d0:	4648      	mov	r0, r9
 80130d2:	f001 fdb5 	bl	8014c40 <uxr_read_framed_msg>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d0ef      	beq.n	80130ba <recv_custom_msg+0x2e>
 80130da:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80130de:	b1b3      	cbz	r3, 801310e <recv_custom_msg+0x82>
 80130e0:	4b0f      	ldr	r3, [pc, #60]	@ (8013120 <recv_custom_msg+0x94>)
 80130e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80130e6:	701a      	strb	r2, [r3, #0]
 80130e8:	2000      	movs	r0, #0
 80130ea:	b009      	add	sp, #36	@ 0x24
 80130ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f0:	f10d 021f 	add.w	r2, sp, #31
 80130f4:	9200      	str	r2, [sp, #0]
 80130f6:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 80130fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130fe:	4601      	mov	r1, r0
 8013100:	47a8      	blx	r5
 8013102:	2800      	cmp	r0, #0
 8013104:	d0ec      	beq.n	80130e0 <recv_custom_msg+0x54>
 8013106:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d1e8      	bne.n	80130e0 <recv_custom_msg+0x54>
 801310e:	f8cb 0000 	str.w	r0, [fp]
 8013112:	2001      	movs	r0, #1
 8013114:	f8ca 4000 	str.w	r4, [sl]
 8013118:	b009      	add	sp, #36	@ 0x24
 801311a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801311e:	bf00      	nop
 8013120:	20011aac 	.word	0x20011aac

08013124 <send_custom_msg>:
 8013124:	b530      	push	{r4, r5, lr}
 8013126:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801312a:	b087      	sub	sp, #28
 801312c:	4615      	mov	r5, r2
 801312e:	b974      	cbnz	r4, 801314e <send_custom_msg+0x2a>
 8013130:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8013134:	f10d 0317 	add.w	r3, sp, #23
 8013138:	47a0      	blx	r4
 801313a:	b108      	cbz	r0, 8013140 <send_custom_msg+0x1c>
 801313c:	42a8      	cmp	r0, r5
 801313e:	d015      	beq.n	801316c <send_custom_msg+0x48>
 8013140:	4b0c      	ldr	r3, [pc, #48]	@ (8013174 <send_custom_msg+0x50>)
 8013142:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8013146:	701a      	strb	r2, [r3, #0]
 8013148:	2000      	movs	r0, #0
 801314a:	b007      	add	sp, #28
 801314c:	bd30      	pop	{r4, r5, pc}
 801314e:	460b      	mov	r3, r1
 8013150:	2200      	movs	r2, #0
 8013152:	f10d 0117 	add.w	r1, sp, #23
 8013156:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801315a:	4602      	mov	r2, r0
 801315c:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8013160:	9500      	str	r5, [sp, #0]
 8013162:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8013166:	f001 fb73 	bl	8014850 <uxr_write_framed_msg>
 801316a:	e7e6      	b.n	801313a <send_custom_msg+0x16>
 801316c:	2001      	movs	r0, #1
 801316e:	b007      	add	sp, #28
 8013170:	bd30      	pop	{r4, r5, pc}
 8013172:	bf00      	nop
 8013174:	20011aac 	.word	0x20011aac

08013178 <uxr_set_custom_transport_callbacks>:
 8013178:	b410      	push	{r4}
 801317a:	9c01      	ldr	r4, [sp, #4]
 801317c:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8013180:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8013184:	9b02      	ldr	r3, [sp, #8]
 8013186:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801318a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801318e:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8013192:	4770      	bx	lr

08013194 <uxr_init_custom_transport>:
 8013194:	b538      	push	{r3, r4, r5, lr}
 8013196:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801319a:	b303      	cbz	r3, 80131de <uxr_init_custom_transport+0x4a>
 801319c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80131a0:	4604      	mov	r4, r0
 80131a2:	b1e2      	cbz	r2, 80131de <uxr_init_custom_transport+0x4a>
 80131a4:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80131a8:	b1ca      	cbz	r2, 80131de <uxr_init_custom_transport+0x4a>
 80131aa:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80131ae:	b1b2      	cbz	r2, 80131de <uxr_init_custom_transport+0x4a>
 80131b0:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80131b4:	4798      	blx	r3
 80131b6:	4605      	mov	r5, r0
 80131b8:	b188      	cbz	r0, 80131de <uxr_init_custom_transport+0x4a>
 80131ba:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80131be:	b98b      	cbnz	r3, 80131e4 <uxr_init_custom_transport+0x50>
 80131c0:	490b      	ldr	r1, [pc, #44]	@ (80131f0 <uxr_init_custom_transport+0x5c>)
 80131c2:	4b0c      	ldr	r3, [pc, #48]	@ (80131f4 <uxr_init_custom_transport+0x60>)
 80131c4:	4a0c      	ldr	r2, [pc, #48]	@ (80131f8 <uxr_init_custom_transport+0x64>)
 80131c6:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80131ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80131ce:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80131d2:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80131d6:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80131da:	4628      	mov	r0, r5
 80131dc:	bd38      	pop	{r3, r4, r5, pc}
 80131de:	2500      	movs	r5, #0
 80131e0:	4628      	mov	r0, r5
 80131e2:	bd38      	pop	{r3, r4, r5, pc}
 80131e4:	2100      	movs	r1, #0
 80131e6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80131ea:	f001 fb2b 	bl	8014844 <uxr_init_framing_io>
 80131ee:	e7e7      	b.n	80131c0 <uxr_init_custom_transport+0x2c>
 80131f0:	08013125 	.word	0x08013125
 80131f4:	0801308d 	.word	0x0801308d
 80131f8:	08013081 	.word	0x08013081

080131fc <uxr_close_custom_transport>:
 80131fc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8013200:	4718      	bx	r3
 8013202:	bf00      	nop

08013204 <uxr_object_id>:
 8013204:	b082      	sub	sp, #8
 8013206:	2300      	movs	r3, #0
 8013208:	f88d 1006 	strb.w	r1, [sp, #6]
 801320c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013210:	f360 030f 	bfi	r3, r0, #0, #16
 8013214:	f362 431f 	bfi	r3, r2, #16, #16
 8013218:	4618      	mov	r0, r3
 801321a:	b002      	add	sp, #8
 801321c:	4770      	bx	lr
 801321e:	bf00      	nop

08013220 <uxr_object_id_from_raw>:
 8013220:	7843      	ldrb	r3, [r0, #1]
 8013222:	7801      	ldrb	r1, [r0, #0]
 8013224:	b082      	sub	sp, #8
 8013226:	f003 020f 	and.w	r2, r3, #15
 801322a:	f88d 2006 	strb.w	r2, [sp, #6]
 801322e:	091b      	lsrs	r3, r3, #4
 8013230:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013234:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013238:	2000      	movs	r0, #0
 801323a:	f363 000f 	bfi	r0, r3, #0, #16
 801323e:	f362 401f 	bfi	r0, r2, #16, #16
 8013242:	b002      	add	sp, #8
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop

08013248 <uxr_object_id_to_raw>:
 8013248:	4602      	mov	r2, r0
 801324a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801324e:	b082      	sub	sp, #8
 8013250:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8013254:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013258:	f881 c000 	strb.w	ip, [r1]
 801325c:	7048      	strb	r0, [r1, #1]
 801325e:	b002      	add	sp, #8
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop

08013264 <uxr_ping_agent_session>:
 8013264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013268:	4617      	mov	r7, r2
 801326a:	b091      	sub	sp, #68	@ 0x44
 801326c:	2210      	movs	r2, #16
 801326e:	4606      	mov	r6, r0
 8013270:	4688      	mov	r8, r1
 8013272:	a808      	add	r0, sp, #32
 8013274:	eb0d 0102 	add.w	r1, sp, r2
 8013278:	f7fa fe58 	bl	800df2c <ucdr_init_buffer>
 801327c:	4b1e      	ldr	r3, [pc, #120]	@ (80132f8 <uxr_ping_agent_session+0x94>)
 801327e:	2500      	movs	r5, #0
 8013280:	881b      	ldrh	r3, [r3, #0]
 8013282:	f8ad 300a 	strh.w	r3, [sp, #10]
 8013286:	9500      	str	r5, [sp, #0]
 8013288:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801328c:	2402      	movs	r4, #2
 801328e:	7831      	ldrb	r1, [r6, #0]
 8013290:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013294:	462a      	mov	r2, r5
 8013296:	a808      	add	r0, sp, #32
 8013298:	462b      	mov	r3, r5
 801329a:	9403      	str	r4, [sp, #12]
 801329c:	f002 fa96 	bl	80157cc <uxr_serialize_message_header>
 80132a0:	4621      	mov	r1, r4
 80132a2:	462b      	mov	r3, r5
 80132a4:	2208      	movs	r2, #8
 80132a6:	a808      	add	r0, sp, #32
 80132a8:	f002 f896 	bl	80153d8 <uxr_buffer_submessage_header>
 80132ac:	a902      	add	r1, sp, #8
 80132ae:	4604      	mov	r4, r0
 80132b0:	a808      	add	r0, sp, #32
 80132b2:	f003 f96b 	bl	801658c <uxr_serialize_GET_INFO_Payload>
 80132b6:	b104      	cbz	r4, 80132ba <uxr_ping_agent_session+0x56>
 80132b8:	b918      	cbnz	r0, 80132c2 <uxr_ping_agent_session+0x5e>
 80132ba:	2000      	movs	r0, #0
 80132bc:	b011      	add	sp, #68	@ 0x44
 80132be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132c2:	a808      	add	r0, sp, #32
 80132c4:	f7fa fe5e 	bl	800df84 <ucdr_buffer_length>
 80132c8:	4681      	mov	r9, r0
 80132ca:	e00d      	b.n	80132e8 <uxr_ping_agent_session+0x84>
 80132cc:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80132ce:	e9d3 0400 	ldrd	r0, r4, [r3]
 80132d2:	47a0      	blx	r4
 80132d4:	4641      	mov	r1, r8
 80132d6:	4604      	mov	r4, r0
 80132d8:	4630      	mov	r0, r6
 80132da:	f000 ff4d 	bl	8014178 <uxr_run_session_until_pong>
 80132de:	ea04 0c00 	and.w	ip, r4, r0
 80132e2:	f01c 00ff 	ands.w	r0, ip, #255	@ 0xff
 80132e6:	d1e9      	bne.n	80132bc <uxr_ping_agent_session+0x58>
 80132e8:	42af      	cmp	r7, r5
 80132ea:	464a      	mov	r2, r9
 80132ec:	a904      	add	r1, sp, #16
 80132ee:	f105 0501 	add.w	r5, r5, #1
 80132f2:	d1eb      	bne.n	80132cc <uxr_ping_agent_session+0x68>
 80132f4:	e7e1      	b.n	80132ba <uxr_ping_agent_session+0x56>
 80132f6:	bf00      	nop
 80132f8:	0801d3b4 	.word	0x0801d3b4

080132fc <uxr_ping_agent_attempts>:
 80132fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013300:	ed2d 8b02 	vpush	{d8}
 8013304:	b0d1      	sub	sp, #324	@ 0x144
 8013306:	4606      	mov	r6, r0
 8013308:	4688      	mov	r8, r1
 801330a:	a80e      	add	r0, sp, #56	@ 0x38
 801330c:	a90a      	add	r1, sp, #40	@ 0x28
 801330e:	4615      	mov	r5, r2
 8013310:	2210      	movs	r2, #16
 8013312:	f7fa fe0b 	bl	800df2c <ucdr_init_buffer>
 8013316:	4b54      	ldr	r3, [pc, #336]	@ (8013468 <uxr_ping_agent_attempts+0x16c>)
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	f8ad 307a 	strh.w	r3, [sp, #122]	@ 0x7a
 801331e:	2300      	movs	r3, #0
 8013320:	2402      	movs	r4, #2
 8013322:	461a      	mov	r2, r3
 8013324:	9300      	str	r3, [sp, #0]
 8013326:	2180      	movs	r1, #128	@ 0x80
 8013328:	a80e      	add	r0, sp, #56	@ 0x38
 801332a:	f44f 6720 	mov.w	r7, #2560	@ 0xa00
 801332e:	941f      	str	r4, [sp, #124]	@ 0x7c
 8013330:	f8ad 7078 	strh.w	r7, [sp, #120]	@ 0x78
 8013334:	f002 fa4a 	bl	80157cc <uxr_serialize_message_header>
 8013338:	4621      	mov	r1, r4
 801333a:	2300      	movs	r3, #0
 801333c:	2208      	movs	r2, #8
 801333e:	a80e      	add	r0, sp, #56	@ 0x38
 8013340:	f002 f84a 	bl	80153d8 <uxr_buffer_submessage_header>
 8013344:	a91e      	add	r1, sp, #120	@ 0x78
 8013346:	4604      	mov	r4, r0
 8013348:	a80e      	add	r0, sp, #56	@ 0x38
 801334a:	f003 f91f 	bl	801658c <uxr_serialize_GET_INFO_Payload>
 801334e:	b104      	cbz	r4, 8013352 <uxr_ping_agent_attempts+0x56>
 8013350:	b938      	cbnz	r0, 8013362 <uxr_ping_agent_attempts+0x66>
 8013352:	f04f 0b00 	mov.w	fp, #0
 8013356:	4658      	mov	r0, fp
 8013358:	b051      	add	sp, #324	@ 0x144
 801335a:	ecbd 8b02 	vpop	{d8}
 801335e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013362:	a80e      	add	r0, sp, #56	@ 0x38
 8013364:	f7fa fe0e 	bl	800df84 <ucdr_buffer_length>
 8013368:	1c6b      	adds	r3, r5, #1
 801336a:	ee08 0a10 	vmov	s16, r0
 801336e:	9303      	str	r3, [sp, #12]
 8013370:	f04f 0901 	mov.w	r9, #1
 8013374:	9b03      	ldr	r3, [sp, #12]
 8013376:	454b      	cmp	r3, r9
 8013378:	d0eb      	beq.n	8013352 <uxr_ping_agent_attempts+0x56>
 801337a:	e9d6 0300 	ldrd	r0, r3, [r6]
 801337e:	ee18 2a10 	vmov	r2, s16
 8013382:	a90a      	add	r1, sp, #40	@ 0x28
 8013384:	4798      	blx	r3
 8013386:	f002 f86d 	bl	8015464 <uxr_millis>
 801338a:	4645      	mov	r5, r8
 801338c:	4604      	mov	r4, r0
 801338e:	f04f 0a00 	mov.w	sl, #0
 8013392:	68b7      	ldr	r7, [r6, #8]
 8013394:	6830      	ldr	r0, [r6, #0]
 8013396:	f8cd a018 	str.w	sl, [sp, #24]
 801339a:	4643      	mov	r3, r8
 801339c:	aa07      	add	r2, sp, #28
 801339e:	a906      	add	r1, sp, #24
 80133a0:	47b8      	blx	r7
 80133a2:	4607      	mov	r7, r0
 80133a4:	b958      	cbnz	r0, 80133be <uxr_ping_agent_attempts+0xc2>
 80133a6:	f002 f85d 	bl	8015464 <uxr_millis>
 80133aa:	1b00      	subs	r0, r0, r4
 80133ac:	1a2d      	subs	r5, r5, r0
 80133ae:	f002 f859 	bl	8015464 <uxr_millis>
 80133b2:	2d00      	cmp	r5, #0
 80133b4:	4604      	mov	r4, r0
 80133b6:	dcec      	bgt.n	8013392 <uxr_ping_agent_attempts+0x96>
 80133b8:	f109 0901 	add.w	r9, r9, #1
 80133bc:	e7da      	b.n	8013374 <uxr_ping_agent_attempts+0x78>
 80133be:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80133c2:	a816      	add	r0, sp, #88	@ 0x58
 80133c4:	f7fa fdb2 	bl	800df2c <ucdr_init_buffer>
 80133c8:	ab05      	add	r3, sp, #20
 80133ca:	f10d 0211 	add.w	r2, sp, #17
 80133ce:	a916      	add	r1, sp, #88	@ 0x58
 80133d0:	a808      	add	r0, sp, #32
 80133d2:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80133d6:	f001 f9bb 	bl	8014750 <uxr_read_session_header>
 80133da:	22c8      	movs	r2, #200	@ 0xc8
 80133dc:	2100      	movs	r1, #0
 80133de:	a81e      	add	r0, sp, #120	@ 0x78
 80133e0:	f009 f884 	bl	801c4ec <memset>
 80133e4:	a816      	add	r0, sp, #88	@ 0x58
 80133e6:	f7fa fdd1 	bl	800df8c <ucdr_buffer_remaining>
 80133ea:	2804      	cmp	r0, #4
 80133ec:	d814      	bhi.n	8013418 <uxr_ping_agent_attempts+0x11c>
 80133ee:	f89d b12d 	ldrb.w	fp, [sp, #301]	@ 0x12d
 80133f2:	f002 f837 	bl	8015464 <uxr_millis>
 80133f6:	1b00      	subs	r0, r0, r4
 80133f8:	1a2d      	subs	r5, r5, r0
 80133fa:	f002 f833 	bl	8015464 <uxr_millis>
 80133fe:	2d00      	cmp	r5, #0
 8013400:	4604      	mov	r4, r0
 8013402:	dd2a      	ble.n	801345a <uxr_ping_agent_attempts+0x15e>
 8013404:	f1bb 0f00 	cmp.w	fp, #0
 8013408:	d0c3      	beq.n	8013392 <uxr_ping_agent_attempts+0x96>
 801340a:	46bb      	mov	fp, r7
 801340c:	4658      	mov	r0, fp
 801340e:	b051      	add	sp, #324	@ 0x144
 8013410:	ecbd 8b02 	vpop	{d8}
 8013414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013418:	f10d 0316 	add.w	r3, sp, #22
 801341c:	f10d 0213 	add.w	r2, sp, #19
 8013420:	f10d 0112 	add.w	r1, sp, #18
 8013424:	a816      	add	r0, sp, #88	@ 0x58
 8013426:	f88d a012 	strb.w	sl, [sp, #18]
 801342a:	f8ad a016 	strh.w	sl, [sp, #22]
 801342e:	f88d a013 	strb.w	sl, [sp, #19]
 8013432:	f002 fa1d 	bl	8015870 <uxr_deserialize_submessage_header>
 8013436:	a816      	add	r0, sp, #88	@ 0x58
 8013438:	f7fa fda8 	bl	800df8c <ucdr_buffer_remaining>
 801343c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8013440:	4298      	cmp	r0, r3
 8013442:	d3d4      	bcc.n	80133ee <uxr_ping_agent_attempts+0xf2>
 8013444:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8013448:	2b06      	cmp	r3, #6
 801344a:	d1d0      	bne.n	80133ee <uxr_ping_agent_attempts+0xf2>
 801344c:	a916      	add	r1, sp, #88	@ 0x58
 801344e:	a81e      	add	r0, sp, #120	@ 0x78
 8013450:	f88d a12d 	strb.w	sl, [sp, #301]	@ 0x12d
 8013454:	f000 face 	bl	80139f4 <read_submessage_info>
 8013458:	e7c9      	b.n	80133ee <uxr_ping_agent_attempts+0xf2>
 801345a:	f1bb 0f00 	cmp.w	fp, #0
 801345e:	d1d4      	bne.n	801340a <uxr_ping_agent_attempts+0x10e>
 8013460:	f109 0901 	add.w	r9, r9, #1
 8013464:	e786      	b.n	8013374 <uxr_ping_agent_attempts+0x78>
 8013466:	bf00      	nop
 8013468:	0801d3b4 	.word	0x0801d3b4

0801346c <uxr_buffer_request_data>:
 801346c:	b530      	push	{r4, r5, lr}
 801346e:	b095      	sub	sp, #84	@ 0x54
 8013470:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013474:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8013476:	9303      	str	r3, [sp, #12]
 8013478:	2200      	movs	r2, #0
 801347a:	2d00      	cmp	r5, #0
 801347c:	bf14      	ite	ne
 801347e:	2101      	movne	r1, #1
 8013480:	4611      	moveq	r1, r2
 8013482:	4604      	mov	r4, r0
 8013484:	f88d 301c 	strb.w	r3, [sp, #28]
 8013488:	f88d 201d 	strb.w	r2, [sp, #29]
 801348c:	f88d 201e 	strb.w	r2, [sp, #30]
 8013490:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8013494:	d021      	beq.n	80134da <uxr_buffer_request_data+0x6e>
 8013496:	682a      	ldr	r2, [r5, #0]
 8013498:	686b      	ldr	r3, [r5, #4]
 801349a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801349e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80134a2:	2210      	movs	r2, #16
 80134a4:	2308      	movs	r3, #8
 80134a6:	2100      	movs	r1, #0
 80134a8:	e9cd 3100 	strd	r3, r1, [sp]
 80134ac:	4620      	mov	r0, r4
 80134ae:	9905      	ldr	r1, [sp, #20]
 80134b0:	ab0c      	add	r3, sp, #48	@ 0x30
 80134b2:	f001 f861 	bl	8014578 <uxr_prepare_stream_to_write_submessage>
 80134b6:	b918      	cbnz	r0, 80134c0 <uxr_buffer_request_data+0x54>
 80134b8:	4604      	mov	r4, r0
 80134ba:	4620      	mov	r0, r4
 80134bc:	b015      	add	sp, #84	@ 0x54
 80134be:	bd30      	pop	{r4, r5, pc}
 80134c0:	9904      	ldr	r1, [sp, #16]
 80134c2:	aa06      	add	r2, sp, #24
 80134c4:	4620      	mov	r0, r4
 80134c6:	f001 f98d 	bl	80147e4 <uxr_init_base_object_request>
 80134ca:	a906      	add	r1, sp, #24
 80134cc:	4604      	mov	r4, r0
 80134ce:	a80c      	add	r0, sp, #48	@ 0x30
 80134d0:	f003 f92e 	bl	8016730 <uxr_serialize_READ_DATA_Payload>
 80134d4:	4620      	mov	r0, r4
 80134d6:	b015      	add	sp, #84	@ 0x54
 80134d8:	bd30      	pop	{r4, r5, pc}
 80134da:	2208      	movs	r2, #8
 80134dc:	e7e2      	b.n	80134a4 <uxr_buffer_request_data+0x38>
 80134de:	bf00      	nop

080134e0 <uxr_buffer_cancel_data>:
 80134e0:	b510      	push	{r4, lr}
 80134e2:	b094      	sub	sp, #80	@ 0x50
 80134e4:	2300      	movs	r3, #0
 80134e6:	9202      	str	r2, [sp, #8]
 80134e8:	9205      	str	r2, [sp, #20]
 80134ea:	9301      	str	r3, [sp, #4]
 80134ec:	2201      	movs	r2, #1
 80134ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 80134f2:	f88d 301e 	strb.w	r3, [sp, #30]
 80134f6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80134fa:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80134fe:	2308      	movs	r3, #8
 8013500:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8013504:	9300      	str	r3, [sp, #0]
 8013506:	2210      	movs	r2, #16
 8013508:	ab0c      	add	r3, sp, #48	@ 0x30
 801350a:	4604      	mov	r4, r0
 801350c:	9103      	str	r1, [sp, #12]
 801350e:	f001 f833 	bl	8014578 <uxr_prepare_stream_to_write_submessage>
 8013512:	b918      	cbnz	r0, 801351c <uxr_buffer_cancel_data+0x3c>
 8013514:	4604      	mov	r4, r0
 8013516:	4620      	mov	r0, r4
 8013518:	b014      	add	sp, #80	@ 0x50
 801351a:	bd10      	pop	{r4, pc}
 801351c:	9905      	ldr	r1, [sp, #20]
 801351e:	aa06      	add	r2, sp, #24
 8013520:	4620      	mov	r0, r4
 8013522:	f001 f95f 	bl	80147e4 <uxr_init_base_object_request>
 8013526:	a906      	add	r1, sp, #24
 8013528:	4604      	mov	r4, r0
 801352a:	a80c      	add	r0, sp, #48	@ 0x30
 801352c:	f003 f900 	bl	8016730 <uxr_serialize_READ_DATA_Payload>
 8013530:	4620      	mov	r0, r4
 8013532:	b014      	add	sp, #80	@ 0x50
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop

08013538 <read_submessage_format>:
 8013538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801353c:	b095      	sub	sp, #84	@ 0x54
 801353e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8013542:	b113      	cbz	r3, 801354a <read_submessage_format+0x12>
 8013544:	b015      	add	sp, #84	@ 0x54
 8013546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801354a:	460c      	mov	r4, r1
 801354c:	4615      	mov	r5, r2
 801354e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013552:	4607      	mov	r7, r0
 8013554:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8013556:	9004      	str	r0, [sp, #16]
 8013558:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801355a:	9005      	str	r0, [sp, #20]
 801355c:	1a52      	subs	r2, r2, r1
 801355e:	a80c      	add	r0, sp, #48	@ 0x30
 8013560:	4699      	mov	r9, r3
 8013562:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8013566:	f7fa fce1 	bl	800df2c <ucdr_init_buffer>
 801356a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801356e:	a80c      	add	r0, sp, #48	@ 0x30
 8013570:	f7fa fcb0 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 8013574:	69e2      	ldr	r2, [r4, #28]
 8013576:	b19a      	cbz	r2, 80135a0 <read_submessage_format+0x68>
 8013578:	f1b8 0f07 	cmp.w	r8, #7
 801357c:	f882 9014 	strb.w	r9, [r2, #20]
 8013580:	d040      	beq.n	8013604 <read_submessage_format+0xcc>
 8013582:	f1b8 0f08 	cmp.w	r8, #8
 8013586:	d02e      	beq.n	80135e6 <read_submessage_format+0xae>
 8013588:	f1b8 0f06 	cmp.w	r8, #6
 801358c:	d011      	beq.n	80135b2 <read_submessage_format+0x7a>
 801358e:	2301      	movs	r3, #1
 8013590:	7513      	strb	r3, [r2, #20]
 8013592:	4629      	mov	r1, r5
 8013594:	4620      	mov	r0, r4
 8013596:	f7fa fd19 	bl	800dfcc <ucdr_advance_buffer>
 801359a:	b015      	add	sp, #84	@ 0x54
 801359c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80135a0:	f1b8 0f07 	cmp.w	r8, #7
 80135a4:	d02e      	beq.n	8013604 <read_submessage_format+0xcc>
 80135a6:	f1b8 0f08 	cmp.w	r8, #8
 80135aa:	d01c      	beq.n	80135e6 <read_submessage_format+0xae>
 80135ac:	f1b8 0f06 	cmp.w	r8, #6
 80135b0:	d1ef      	bne.n	8013592 <read_submessage_format+0x5a>
 80135b2:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80135b6:	f1b8 0f00 	cmp.w	r8, #0
 80135ba:	d011      	beq.n	80135e0 <read_submessage_format+0xa8>
 80135bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80135be:	e9cd 3500 	strd	r3, r5, [sp]
 80135c2:	2306      	movs	r3, #6
 80135c4:	f88d 3016 	strb.w	r3, [sp, #22]
 80135c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80135cc:	9302      	str	r3, [sp, #8]
 80135ce:	4632      	mov	r2, r6
 80135d0:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80135d4:	4638      	mov	r0, r7
 80135d6:	47c0      	blx	r8
 80135d8:	2301      	movs	r3, #1
 80135da:	69e2      	ldr	r2, [r4, #28]
 80135dc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80135e0:	2a00      	cmp	r2, #0
 80135e2:	d1d4      	bne.n	801358e <read_submessage_format+0x56>
 80135e4:	e7d5      	b.n	8013592 <read_submessage_format+0x5a>
 80135e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0f8      	beq.n	80135e0 <read_submessage_format+0xa8>
 80135ee:	a906      	add	r1, sp, #24
 80135f0:	a80c      	add	r0, sp, #48	@ 0x30
 80135f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80135f6:	f003 f961 	bl	80168bc <uxr_deserialize_SampleIdentity>
 80135fa:	b9a0      	cbnz	r0, 8013626 <read_submessage_format+0xee>
 80135fc:	69e2      	ldr	r2, [r4, #28]
 80135fe:	2a00      	cmp	r2, #0
 8013600:	d1c5      	bne.n	801358e <read_submessage_format+0x56>
 8013602:	e7c6      	b.n	8013592 <read_submessage_format+0x5a>
 8013604:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8013608:	b13b      	cbz	r3, 801361a <read_submessage_format+0xe2>
 801360a:	a906      	add	r1, sp, #24
 801360c:	a80c      	add	r0, sp, #48	@ 0x30
 801360e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8013612:	f002 fe13 	bl	801623c <uxr_deserialize_BaseObjectRequest>
 8013616:	bb60      	cbnz	r0, 8013672 <read_submessage_format+0x13a>
 8013618:	69e2      	ldr	r2, [r4, #28]
 801361a:	68a3      	ldr	r3, [r4, #8]
 801361c:	442b      	add	r3, r5
 801361e:	60a3      	str	r3, [r4, #8]
 8013620:	2a00      	cmp	r2, #0
 8013622:	d1b4      	bne.n	801358e <read_submessage_format+0x56>
 8013624:	e7b5      	b.n	8013592 <read_submessage_format+0x5a>
 8013626:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801362a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801362c:	1a52      	subs	r2, r2, r1
 801362e:	eba8 0803 	sub.w	r8, r8, r3
 8013632:	a80c      	add	r0, sp, #48	@ 0x30
 8013634:	f7fa fc7a 	bl	800df2c <ucdr_init_buffer>
 8013638:	44a8      	add	r8, r5
 801363a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801363e:	a80c      	add	r0, sp, #48	@ 0x30
 8013640:	f7fa fc48 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 8013644:	fa1f f888 	uxth.w	r8, r8
 8013648:	ab0c      	add	r3, sp, #48	@ 0x30
 801364a:	9300      	str	r3, [sp, #0]
 801364c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013650:	2108      	movs	r1, #8
 8013652:	f88d 1016 	strb.w	r1, [sp, #22]
 8013656:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801365a:	9102      	str	r1, [sp, #8]
 801365c:	ab06      	add	r3, sp, #24
 801365e:	4632      	mov	r2, r6
 8013660:	9905      	ldr	r1, [sp, #20]
 8013662:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8013666:	4638      	mov	r0, r7
 8013668:	47b0      	blx	r6
 801366a:	2301      	movs	r3, #1
 801366c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8013670:	e7c4      	b.n	80135fc <read_submessage_format+0xc4>
 8013672:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8013676:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013678:	1a52      	subs	r2, r2, r1
 801367a:	a80c      	add	r0, sp, #48	@ 0x30
 801367c:	eba8 0803 	sub.w	r8, r8, r3
 8013680:	f7fa fc54 	bl	800df2c <ucdr_init_buffer>
 8013684:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013688:	a80c      	add	r0, sp, #48	@ 0x30
 801368a:	f7fa fc23 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 801368e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013696:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801369a:	44a8      	add	r8, r5
 801369c:	fa1f f888 	uxth.w	r8, r8
 80136a0:	f8cd 8004 	str.w	r8, [sp, #4]
 80136a4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80136a8:	2107      	movs	r1, #7
 80136aa:	f88d 1016 	strb.w	r1, [sp, #22]
 80136ae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80136b2:	9102      	str	r1, [sp, #8]
 80136b4:	4632      	mov	r2, r6
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80136bc:	9905      	ldr	r1, [sp, #20]
 80136be:	4638      	mov	r0, r7
 80136c0:	47b0      	blx	r6
 80136c2:	2301      	movs	r3, #1
 80136c4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80136c8:	e7a6      	b.n	8013618 <read_submessage_format+0xe0>
 80136ca:	bf00      	nop

080136cc <on_get_fragmentation_info>:
 80136cc:	b500      	push	{lr}
 80136ce:	b08b      	sub	sp, #44	@ 0x2c
 80136d0:	4601      	mov	r1, r0
 80136d2:	2204      	movs	r2, #4
 80136d4:	a802      	add	r0, sp, #8
 80136d6:	f7fa fc29 	bl	800df2c <ucdr_init_buffer>
 80136da:	f10d 0305 	add.w	r3, sp, #5
 80136de:	f10d 0206 	add.w	r2, sp, #6
 80136e2:	a901      	add	r1, sp, #4
 80136e4:	a802      	add	r0, sp, #8
 80136e6:	f001 fe91 	bl	801540c <uxr_read_submessage_header>
 80136ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80136ee:	2b0d      	cmp	r3, #13
 80136f0:	d003      	beq.n	80136fa <on_get_fragmentation_info+0x2e>
 80136f2:	2000      	movs	r0, #0
 80136f4:	b00b      	add	sp, #44	@ 0x2c
 80136f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80136fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80136fe:	f013 0f02 	tst.w	r3, #2
 8013702:	bf14      	ite	ne
 8013704:	2002      	movne	r0, #2
 8013706:	2001      	moveq	r0, #1
 8013708:	b00b      	add	sp, #44	@ 0x2c
 801370a:	f85d fb04 	ldr.w	pc, [sp], #4
 801370e:	bf00      	nop

08013710 <read_submessage_get_info>:
 8013710:	b570      	push	{r4, r5, r6, lr}
 8013712:	2500      	movs	r5, #0
 8013714:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8013718:	4604      	mov	r4, r0
 801371a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801371e:	460e      	mov	r6, r1
 8013720:	a810      	add	r0, sp, #64	@ 0x40
 8013722:	4629      	mov	r1, r5
 8013724:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8013728:	f008 fee0 	bl	801c4ec <memset>
 801372c:	a903      	add	r1, sp, #12
 801372e:	4630      	mov	r0, r6
 8013730:	f002 ff40 	bl	80165b4 <uxr_deserialize_GET_INFO_Payload>
 8013734:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013738:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801373c:	4620      	mov	r0, r4
 801373e:	f001 f849 	bl	80147d4 <uxr_session_header_offset>
 8013742:	462b      	mov	r3, r5
 8013744:	9000      	str	r0, [sp, #0]
 8013746:	220c      	movs	r2, #12
 8013748:	a905      	add	r1, sp, #20
 801374a:	a808      	add	r0, sp, #32
 801374c:	f7fa fbdc 	bl	800df08 <ucdr_init_buffer_origin_offset>
 8013750:	a910      	add	r1, sp, #64	@ 0x40
 8013752:	a808      	add	r0, sp, #32
 8013754:	f002 ffa0 	bl	8016698 <uxr_serialize_INFO_Payload>
 8013758:	9b08      	ldr	r3, [sp, #32]
 801375a:	462a      	mov	r2, r5
 801375c:	4629      	mov	r1, r5
 801375e:	4620      	mov	r0, r4
 8013760:	f000 ffe2 	bl	8014728 <uxr_stamp_session_header>
 8013764:	a808      	add	r0, sp, #32
 8013766:	f7fa fc0d 	bl	800df84 <ucdr_buffer_length>
 801376a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801376c:	4602      	mov	r2, r0
 801376e:	a905      	add	r1, sp, #20
 8013770:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013774:	47a0      	blx	r4
 8013776:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801377a:	bd70      	pop	{r4, r5, r6, pc}

0801377c <write_submessage_acknack.isra.0>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	b092      	sub	sp, #72	@ 0x48
 8013780:	4605      	mov	r5, r0
 8013782:	460e      	mov	r6, r1
 8013784:	4614      	mov	r4, r2
 8013786:	f001 f825 	bl	80147d4 <uxr_session_header_offset>
 801378a:	a905      	add	r1, sp, #20
 801378c:	9000      	str	r0, [sp, #0]
 801378e:	2300      	movs	r3, #0
 8013790:	a80a      	add	r0, sp, #40	@ 0x28
 8013792:	2211      	movs	r2, #17
 8013794:	f7fa fbb8 	bl	800df08 <ucdr_init_buffer_origin_offset>
 8013798:	2218      	movs	r2, #24
 801379a:	fb02 5404 	mla	r4, r2, r4, r5
 801379e:	2300      	movs	r3, #0
 80137a0:	2205      	movs	r2, #5
 80137a2:	3450      	adds	r4, #80	@ 0x50
 80137a4:	210a      	movs	r1, #10
 80137a6:	a80a      	add	r0, sp, #40	@ 0x28
 80137a8:	f001 fe16 	bl	80153d8 <uxr_buffer_submessage_header>
 80137ac:	a903      	add	r1, sp, #12
 80137ae:	4620      	mov	r0, r4
 80137b0:	f006 fd18 	bl	801a1e4 <uxr_compute_acknack>
 80137b4:	ba40      	rev16	r0, r0
 80137b6:	f8ad 000e 	strh.w	r0, [sp, #14]
 80137ba:	a903      	add	r1, sp, #12
 80137bc:	a80a      	add	r0, sp, #40	@ 0x28
 80137be:	f88d 6010 	strb.w	r6, [sp, #16]
 80137c2:	f002 ffd9 	bl	8016778 <uxr_serialize_ACKNACK_Payload>
 80137c6:	2200      	movs	r2, #0
 80137c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80137ca:	4611      	mov	r1, r2
 80137cc:	4628      	mov	r0, r5
 80137ce:	f000 ffab 	bl	8014728 <uxr_stamp_session_header>
 80137d2:	a80a      	add	r0, sp, #40	@ 0x28
 80137d4:	f7fa fbd6 	bl	800df84 <ucdr_buffer_length>
 80137d8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80137da:	4602      	mov	r2, r0
 80137dc:	a905      	add	r1, sp, #20
 80137de:	e9d3 0400 	ldrd	r0, r4, [r3]
 80137e2:	47a0      	blx	r4
 80137e4:	b012      	add	sp, #72	@ 0x48
 80137e6:	bd70      	pop	{r4, r5, r6, pc}

080137e8 <uxr_init_session>:
 80137e8:	b510      	push	{r4, lr}
 80137ea:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8013820 <uxr_init_session+0x38>
 80137ee:	2300      	movs	r3, #0
 80137f0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80137f4:	4604      	mov	r4, r0
 80137f6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80137fa:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80137fe:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8013802:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8013806:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 801380a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 801380e:	2181      	movs	r1, #129	@ 0x81
 8013810:	f000 fef6 	bl	8014600 <uxr_init_session_info>
 8013814:	f104 0008 	add.w	r0, r4, #8
 8013818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801381c:	f001 bcf8 	b.w	8015210 <uxr_init_stream_storage>
	...

08013828 <uxr_set_status_callback>:
 8013828:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop

08013830 <uxr_set_topic_callback>:
 8013830:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8013834:	4770      	bx	lr
 8013836:	bf00      	nop

08013838 <uxr_set_request_callback>:
 8013838:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop

08013840 <uxr_set_reply_callback>:
 8013840:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8013844:	4770      	bx	lr
 8013846:	bf00      	nop

08013848 <uxr_create_output_best_effort_stream>:
 8013848:	b510      	push	{r4, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	e9cd 2100 	strd	r2, r1, [sp]
 8013850:	4604      	mov	r4, r0
 8013852:	f000 ffbf 	bl	80147d4 <uxr_session_header_offset>
 8013856:	e9dd 2100 	ldrd	r2, r1, [sp]
 801385a:	4603      	mov	r3, r0
 801385c:	f104 0008 	add.w	r0, r4, #8
 8013860:	b004      	add	sp, #16
 8013862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013866:	f001 bd1d 	b.w	80152a4 <uxr_add_output_best_effort_buffer>
 801386a:	bf00      	nop

0801386c <uxr_create_output_reliable_stream>:
 801386c:	b510      	push	{r4, lr}
 801386e:	b088      	sub	sp, #32
 8013870:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013874:	4604      	mov	r4, r0
 8013876:	9303      	str	r3, [sp, #12]
 8013878:	f000 ffac 	bl	80147d4 <uxr_session_header_offset>
 801387c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013880:	9000      	str	r0, [sp, #0]
 8013882:	9905      	ldr	r1, [sp, #20]
 8013884:	f104 0008 	add.w	r0, r4, #8
 8013888:	f001 fd20 	bl	80152cc <uxr_add_output_reliable_buffer>
 801388c:	2200      	movs	r2, #0
 801388e:	b2c3      	uxtb	r3, r0
 8013890:	f363 0207 	bfi	r2, r3, #0, #8
 8013894:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013898:	f363 220f 	bfi	r2, r3, #8, #8
 801389c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80138a0:	f363 4217 	bfi	r2, r3, #16, #8
 80138a4:	0e03      	lsrs	r3, r0, #24
 80138a6:	f363 621f 	bfi	r2, r3, #24, #8
 80138aa:	4610      	mov	r0, r2
 80138ac:	b008      	add	sp, #32
 80138ae:	bd10      	pop	{r4, pc}

080138b0 <uxr_create_input_best_effort_stream>:
 80138b0:	b082      	sub	sp, #8
 80138b2:	3008      	adds	r0, #8
 80138b4:	b002      	add	sp, #8
 80138b6:	f001 bd23 	b.w	8015300 <uxr_add_input_best_effort_buffer>
 80138ba:	bf00      	nop

080138bc <uxr_create_input_reliable_stream>:
 80138bc:	b510      	push	{r4, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	4c0b      	ldr	r4, [pc, #44]	@ (80138f0 <uxr_create_input_reliable_stream+0x34>)
 80138c2:	9400      	str	r4, [sp, #0]
 80138c4:	3008      	adds	r0, #8
 80138c6:	f001 fd31 	bl	801532c <uxr_add_input_reliable_buffer>
 80138ca:	2200      	movs	r2, #0
 80138cc:	b2c3      	uxtb	r3, r0
 80138ce:	f363 0207 	bfi	r2, r3, #0, #8
 80138d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80138d6:	f363 220f 	bfi	r2, r3, #8, #8
 80138da:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80138de:	f363 4217 	bfi	r2, r3, #16, #8
 80138e2:	0e03      	lsrs	r3, r0, #24
 80138e4:	f363 621f 	bfi	r2, r3, #24, #8
 80138e8:	4610      	mov	r0, r2
 80138ea:	b004      	add	sp, #16
 80138ec:	bd10      	pop	{r4, pc}
 80138ee:	bf00      	nop
 80138f0:	080136cd 	.word	0x080136cd

080138f4 <uxr_epoch_nanos>:
 80138f4:	b510      	push	{r4, lr}
 80138f6:	4604      	mov	r4, r0
 80138f8:	f001 fdce 	bl	8015498 <uxr_nanos>
 80138fc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8013900:	1ac0      	subs	r0, r0, r3
 8013902:	eb61 0102 	sbc.w	r1, r1, r2
 8013906:	bd10      	pop	{r4, pc}

08013908 <uxr_flash_output_streams>:
 8013908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801390c:	7e03      	ldrb	r3, [r0, #24]
 801390e:	b084      	sub	sp, #16
 8013910:	4604      	mov	r4, r0
 8013912:	2b00      	cmp	r3, #0
 8013914:	d035      	beq.n	8013982 <uxr_flash_output_streams+0x7a>
 8013916:	f04f 0900 	mov.w	r9, #0
 801391a:	4648      	mov	r0, r9
 801391c:	f10d 0802 	add.w	r8, sp, #2
 8013920:	af03      	add	r7, sp, #12
 8013922:	ae02      	add	r6, sp, #8
 8013924:	e006      	b.n	8013934 <uxr_flash_output_streams+0x2c>
 8013926:	7e23      	ldrb	r3, [r4, #24]
 8013928:	f109 0901 	add.w	r9, r9, #1
 801392c:	fa5f f089 	uxtb.w	r0, r9
 8013930:	4283      	cmp	r3, r0
 8013932:	d926      	bls.n	8013982 <uxr_flash_output_streams+0x7a>
 8013934:	2201      	movs	r2, #1
 8013936:	4611      	mov	r1, r2
 8013938:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801393c:	f001 fc14 	bl	8015168 <uxr_stream_id>
 8013940:	3508      	adds	r5, #8
 8013942:	4684      	mov	ip, r0
 8013944:	4643      	mov	r3, r8
 8013946:	463a      	mov	r2, r7
 8013948:	4631      	mov	r1, r6
 801394a:	4628      	mov	r0, r5
 801394c:	f8cd c004 	str.w	ip, [sp, #4]
 8013950:	f006 fcce 	bl	801a2f0 <uxr_prepare_best_effort_buffer_to_send>
 8013954:	2800      	cmp	r0, #0
 8013956:	d0e6      	beq.n	8013926 <uxr_flash_output_streams+0x1e>
 8013958:	9b02      	ldr	r3, [sp, #8]
 801395a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801395e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013962:	4620      	mov	r0, r4
 8013964:	f000 fee0 	bl	8014728 <uxr_stamp_session_header>
 8013968:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801396a:	9a03      	ldr	r2, [sp, #12]
 801396c:	685d      	ldr	r5, [r3, #4]
 801396e:	6818      	ldr	r0, [r3, #0]
 8013970:	9902      	ldr	r1, [sp, #8]
 8013972:	47a8      	blx	r5
 8013974:	f109 0901 	add.w	r9, r9, #1
 8013978:	7e23      	ldrb	r3, [r4, #24]
 801397a:	fa5f f089 	uxtb.w	r0, r9
 801397e:	4283      	cmp	r3, r0
 8013980:	d8d8      	bhi.n	8013934 <uxr_flash_output_streams+0x2c>
 8013982:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8013986:	b38b      	cbz	r3, 80139ec <uxr_flash_output_streams+0xe4>
 8013988:	f04f 0900 	mov.w	r9, #0
 801398c:	f10d 0802 	add.w	r8, sp, #2
 8013990:	af03      	add	r7, sp, #12
 8013992:	ae02      	add	r6, sp, #8
 8013994:	4648      	mov	r0, r9
 8013996:	2201      	movs	r2, #1
 8013998:	2102      	movs	r1, #2
 801399a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801399e:	f001 fbe3 	bl	8015168 <uxr_stream_id>
 80139a2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80139a6:	3520      	adds	r5, #32
 80139a8:	9001      	str	r0, [sp, #4]
 80139aa:	e00d      	b.n	80139c8 <uxr_flash_output_streams+0xc0>
 80139ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80139b0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80139b4:	9b02      	ldr	r3, [sp, #8]
 80139b6:	f000 feb7 	bl	8014728 <uxr_stamp_session_header>
 80139ba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80139bc:	9a03      	ldr	r2, [sp, #12]
 80139be:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80139c2:	9902      	ldr	r1, [sp, #8]
 80139c4:	6818      	ldr	r0, [r3, #0]
 80139c6:	47d0      	blx	sl
 80139c8:	4643      	mov	r3, r8
 80139ca:	463a      	mov	r2, r7
 80139cc:	4631      	mov	r1, r6
 80139ce:	4628      	mov	r0, r5
 80139d0:	f006 feac 	bl	801a72c <uxr_prepare_next_reliable_buffer_to_send>
 80139d4:	4603      	mov	r3, r0
 80139d6:	4620      	mov	r0, r4
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d1e7      	bne.n	80139ac <uxr_flash_output_streams+0xa4>
 80139dc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80139e0:	f109 0901 	add.w	r9, r9, #1
 80139e4:	fa5f f089 	uxtb.w	r0, r9
 80139e8:	4283      	cmp	r3, r0
 80139ea:	d8d4      	bhi.n	8013996 <uxr_flash_output_streams+0x8e>
 80139ec:	b004      	add	sp, #16
 80139ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139f2:	bf00      	nop

080139f4 <read_submessage_info>:
 80139f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139f8:	460d      	mov	r5, r1
 80139fa:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80139fe:	4669      	mov	r1, sp
 8013a00:	4607      	mov	r7, r0
 8013a02:	4628      	mov	r0, r5
 8013a04:	f002 fcd0 	bl	80163a8 <uxr_deserialize_BaseObjectReply>
 8013a08:	a902      	add	r1, sp, #8
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013a12:	f7f8 ff91 	bl	800c938 <ucdr_deserialize_bool>
 8013a16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013a1a:	4004      	ands	r4, r0
 8013a1c:	b2e4      	uxtb	r4, r4
 8013a1e:	b95b      	cbnz	r3, 8013a38 <read_submessage_info+0x44>
 8013a20:	a987      	add	r1, sp, #540	@ 0x21c
 8013a22:	4628      	mov	r0, r5
 8013a24:	f7f8 ff88 	bl	800c938 <ucdr_deserialize_bool>
 8013a28:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8013a2c:	4606      	mov	r6, r0
 8013a2e:	b94b      	cbnz	r3, 8013a44 <read_submessage_info+0x50>
 8013a30:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8013a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a38:	a903      	add	r1, sp, #12
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	f002 fb5c 	bl	80160f8 <uxr_deserialize_ObjectVariant>
 8013a40:	4004      	ands	r4, r0
 8013a42:	e7ed      	b.n	8013a20 <read_submessage_info+0x2c>
 8013a44:	a988      	add	r1, sp, #544	@ 0x220
 8013a46:	4628      	mov	r0, r5
 8013a48:	f7f8 ffa4 	bl	800c994 <ucdr_deserialize_uint8_t>
 8013a4c:	4234      	tst	r4, r6
 8013a4e:	d0ef      	beq.n	8013a30 <read_submessage_info+0x3c>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d0ed      	beq.n	8013a30 <read_submessage_info+0x3c>
 8013a54:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8013a58:	2b0d      	cmp	r3, #13
 8013a5a:	d1e9      	bne.n	8013a30 <read_submessage_info+0x3c>
 8013a5c:	a98a      	add	r1, sp, #552	@ 0x228
 8013a5e:	4628      	mov	r0, r5
 8013a60:	f7f9 fd3e 	bl	800d4e0 <ucdr_deserialize_int16_t>
 8013a64:	b140      	cbz	r0, 8013a78 <read_submessage_info+0x84>
 8013a66:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	dd07      	ble.n	8013a7e <read_submessage_info+0x8a>
 8013a6e:	f1b8 0f00 	cmp.w	r8, #0
 8013a72:	bf14      	ite	ne
 8013a74:	2001      	movne	r0, #1
 8013a76:	2002      	moveq	r0, #2
 8013a78:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8013a7c:	e7d8      	b.n	8013a30 <read_submessage_info+0x3c>
 8013a7e:	2000      	movs	r0, #0
 8013a80:	e7fa      	b.n	8013a78 <read_submessage_info+0x84>
 8013a82:	bf00      	nop

08013a84 <read_submessage_list>:
 8013a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a88:	b097      	sub	sp, #92	@ 0x5c
 8013a8a:	4ec1      	ldr	r6, [pc, #772]	@ (8013d90 <read_submessage_list+0x30c>)
 8013a8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a8e:	4604      	mov	r4, r0
 8013a90:	460d      	mov	r5, r1
 8013a92:	f04f 0801 	mov.w	r8, #1
 8013a96:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8013a9a:	aa0c      	add	r2, sp, #48	@ 0x30
 8013a9c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	f001 fcb3 	bl	801540c <uxr_read_submessage_header>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	f000 813e 	beq.w	8013d28 <read_submessage_list+0x2a4>
 8013aac:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8013ab0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8013ab4:	3b02      	subs	r3, #2
 8013ab6:	2b0d      	cmp	r3, #13
 8013ab8:	d8ed      	bhi.n	8013a96 <read_submessage_list+0x12>
 8013aba:	a101      	add	r1, pc, #4	@ (adr r1, 8013ac0 <read_submessage_list+0x3c>)
 8013abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ac0:	08013d1f 	.word	0x08013d1f
 8013ac4:	08013a97 	.word	0x08013a97
 8013ac8:	08013d0f 	.word	0x08013d0f
 8013acc:	08013cad 	.word	0x08013cad
 8013ad0:	08013ca3 	.word	0x08013ca3
 8013ad4:	08013a97 	.word	0x08013a97
 8013ad8:	08013a97 	.word	0x08013a97
 8013adc:	08013c03 	.word	0x08013c03
 8013ae0:	08013b93 	.word	0x08013b93
 8013ae4:	08013b53 	.word	0x08013b53
 8013ae8:	08013a97 	.word	0x08013a97
 8013aec:	08013a97 	.word	0x08013a97
 8013af0:	08013a97 	.word	0x08013a97
 8013af4:	08013af9 	.word	0x08013af9
 8013af8:	a910      	add	r1, sp, #64	@ 0x40
 8013afa:	4628      	mov	r0, r5
 8013afc:	f002 fe8c 	bl	8016818 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013b00:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8013b04:	f1b9 0f00 	cmp.w	r9, #0
 8013b08:	f000 8116 	beq.w	8013d38 <read_submessage_list+0x2b4>
 8013b0c:	f001 fcc4 	bl	8015498 <uxr_nanos>
 8013b10:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8013b12:	4602      	mov	r2, r0
 8013b14:	460b      	mov	r3, r1
 8013b16:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8013b18:	2100      	movs	r1, #0
 8013b1a:	468c      	mov	ip, r1
 8013b1c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013b20:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013b24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8013b26:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8013b28:	468c      	mov	ip, r1
 8013b2a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013b2e:	46e2      	mov	sl, ip
 8013b30:	46bc      	mov	ip, r7
 8013b32:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8013b36:	fbc0 7106 	smlal	r7, r1, r0, r6
 8013b3a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8013b3e:	e9cd 7100 	strd	r7, r1, [sp]
 8013b42:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8013b46:	9106      	str	r1, [sp, #24]
 8013b48:	4620      	mov	r0, r4
 8013b4a:	47c8      	blx	r9
 8013b4c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8013b50:	e7a1      	b.n	8013a96 <read_submessage_list+0x12>
 8013b52:	a910      	add	r1, sp, #64	@ 0x40
 8013b54:	4628      	mov	r0, r5
 8013b56:	f002 fe4d 	bl	80167f4 <uxr_deserialize_HEARTBEAT_Payload>
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013b60:	f001 fb2c 	bl	80151bc <uxr_stream_id_from_raw>
 8013b64:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013b68:	900f      	str	r0, [sp, #60]	@ 0x3c
 8013b6a:	4639      	mov	r1, r7
 8013b6c:	f104 0008 	add.w	r0, r4, #8
 8013b70:	f001 fc12 	bl	8015398 <uxr_get_input_reliable_stream>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	d08e      	beq.n	8013a96 <read_submessage_list+0x12>
 8013b78:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8013b7c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8013b80:	f006 fb24 	bl	801a1cc <uxr_process_heartbeat>
 8013b84:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8013b88:	463a      	mov	r2, r7
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	f7ff fdf6 	bl	801377c <write_submessage_acknack.isra.0>
 8013b90:	e781      	b.n	8013a96 <read_submessage_list+0x12>
 8013b92:	a910      	add	r1, sp, #64	@ 0x40
 8013b94:	4628      	mov	r0, r5
 8013b96:	f002 fe05 	bl	80167a4 <uxr_deserialize_ACKNACK_Payload>
 8013b9a:	2100      	movs	r1, #0
 8013b9c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8013ba0:	f001 fb0c 	bl	80151bc <uxr_stream_id_from_raw>
 8013ba4:	900d      	str	r0, [sp, #52]	@ 0x34
 8013ba6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013baa:	f104 0008 	add.w	r0, r4, #8
 8013bae:	f001 fbdf 	bl	8015370 <uxr_get_output_reliable_stream>
 8013bb2:	4607      	mov	r7, r0
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	f43f af6e 	beq.w	8013a96 <read_submessage_list+0x12>
 8013bba:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8013bbe:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8013bc2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8013bc6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013bca:	b289      	uxth	r1, r1
 8013bcc:	f006 fe58 	bl	801a880 <uxr_process_acknack>
 8013bd0:	4638      	mov	r0, r7
 8013bd2:	f006 fe15 	bl	801a800 <uxr_begin_output_nack_buffer_it>
 8013bd6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013bda:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8013bde:	e006      	b.n	8013bee <read_submessage_list+0x16a>
 8013be0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013be2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013be4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013be8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013bea:	6818      	ldr	r0, [r3, #0]
 8013bec:	47c8      	blx	r9
 8013bee:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8013bf2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8013bf4:	4651      	mov	r1, sl
 8013bf6:	4638      	mov	r0, r7
 8013bf8:	f006 fe04 	bl	801a804 <uxr_next_reliable_nack_buffer_to_send>
 8013bfc:	2800      	cmp	r0, #0
 8013bfe:	d1ef      	bne.n	8013be0 <read_submessage_list+0x15c>
 8013c00:	e749      	b.n	8013a96 <read_submessage_list+0x12>
 8013c02:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8013c06:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8013c0a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8013c0e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8013c12:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8013c16:	4651      	mov	r1, sl
 8013c18:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013c1c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8013c20:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8013c24:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8013c28:	4628      	mov	r0, r5
 8013c2a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8013c2e:	f002 fb05 	bl	801623c <uxr_deserialize_BaseObjectRequest>
 8013c32:	4650      	mov	r0, sl
 8013c34:	a90f      	add	r1, sp, #60	@ 0x3c
 8013c36:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8013c3a:	f000 fdf1 	bl	8014820 <uxr_parse_base_object_request>
 8013c3e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8013c42:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013c44:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8013c48:	9110      	str	r1, [sp, #64]	@ 0x40
 8013c4a:	3f04      	subs	r7, #4
 8013c4c:	f009 090e 	and.w	r9, r9, #14
 8013c50:	b2bf      	uxth	r7, r7
 8013c52:	f1bb 0f00 	cmp.w	fp, #0
 8013c56:	d006      	beq.n	8013c66 <read_submessage_list+0x1e2>
 8013c58:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013c5c:	9300      	str	r3, [sp, #0]
 8013c5e:	4652      	mov	r2, sl
 8013c60:	2300      	movs	r3, #0
 8013c62:	4620      	mov	r0, r4
 8013c64:	47d8      	blx	fp
 8013c66:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013c68:	b16a      	cbz	r2, 8013c86 <read_submessage_list+0x202>
 8013c6a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	3802      	subs	r0, #2
 8013c70:	e002      	b.n	8013c78 <read_submessage_list+0x1f4>
 8013c72:	3101      	adds	r1, #1
 8013c74:	4291      	cmp	r1, r2
 8013c76:	d006      	beq.n	8013c86 <read_submessage_list+0x202>
 8013c78:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013c7c:	4553      	cmp	r3, sl
 8013c7e:	d1f8      	bne.n	8013c72 <read_submessage_list+0x1ee>
 8013c80:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013c82:	2200      	movs	r2, #0
 8013c84:	545a      	strb	r2, [r3, r1]
 8013c86:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8013c8a:	9102      	str	r1, [sp, #8]
 8013c8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013c8e:	9101      	str	r1, [sp, #4]
 8013c90:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8013c92:	9100      	str	r1, [sp, #0]
 8013c94:	464b      	mov	r3, r9
 8013c96:	463a      	mov	r2, r7
 8013c98:	4629      	mov	r1, r5
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	f7ff fc4c 	bl	8013538 <read_submessage_format>
 8013ca0:	e6f9      	b.n	8013a96 <read_submessage_list+0x12>
 8013ca2:	4629      	mov	r1, r5
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	f7ff fea5 	bl	80139f4 <read_submessage_info>
 8013caa:	e6f4      	b.n	8013a96 <read_submessage_list+0x12>
 8013cac:	2a00      	cmp	r2, #0
 8013cae:	d03e      	beq.n	8013d2e <read_submessage_list+0x2aa>
 8013cb0:	a910      	add	r1, sp, #64	@ 0x40
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	f002 fcd2 	bl	801665c <uxr_deserialize_STATUS_Payload>
 8013cb8:	a90e      	add	r1, sp, #56	@ 0x38
 8013cba:	aa0d      	add	r2, sp, #52	@ 0x34
 8013cbc:	a810      	add	r0, sp, #64	@ 0x40
 8013cbe:	f000 fdaf 	bl	8014820 <uxr_parse_base_object_request>
 8013cc2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8013cc6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013cc8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8013ccc:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8013cd0:	910f      	str	r1, [sp, #60]	@ 0x3c
 8013cd2:	f1ba 0f00 	cmp.w	sl, #0
 8013cd6:	d006      	beq.n	8013ce6 <read_submessage_list+0x262>
 8013cd8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8013cdc:	9300      	str	r3, [sp, #0]
 8013cde:	463a      	mov	r2, r7
 8013ce0:	464b      	mov	r3, r9
 8013ce2:	4620      	mov	r0, r4
 8013ce4:	47d0      	blx	sl
 8013ce6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8013ce8:	2a00      	cmp	r2, #0
 8013cea:	f43f aed4 	beq.w	8013a96 <read_submessage_list+0x12>
 8013cee:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8013cf0:	2100      	movs	r1, #0
 8013cf2:	3802      	subs	r0, #2
 8013cf4:	e003      	b.n	8013cfe <read_submessage_list+0x27a>
 8013cf6:	3101      	adds	r1, #1
 8013cf8:	4291      	cmp	r1, r2
 8013cfa:	f43f aecc 	beq.w	8013a96 <read_submessage_list+0x12>
 8013cfe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013d02:	42bb      	cmp	r3, r7
 8013d04:	d1f7      	bne.n	8013cf6 <read_submessage_list+0x272>
 8013d06:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8013d08:	f803 9001 	strb.w	r9, [r3, r1]
 8013d0c:	e6c3      	b.n	8013a96 <read_submessage_list+0x12>
 8013d0e:	2a00      	cmp	r2, #0
 8013d10:	f47f aec1 	bne.w	8013a96 <read_submessage_list+0x12>
 8013d14:	4629      	mov	r1, r5
 8013d16:	4620      	mov	r0, r4
 8013d18:	f000 fcc8 	bl	80146ac <uxr_read_create_session_status>
 8013d1c:	e6bb      	b.n	8013a96 <read_submessage_list+0x12>
 8013d1e:	4629      	mov	r1, r5
 8013d20:	4620      	mov	r0, r4
 8013d22:	f7ff fcf5 	bl	8013710 <read_submessage_get_info>
 8013d26:	e6b6      	b.n	8013a96 <read_submessage_list+0x12>
 8013d28:	b017      	add	sp, #92	@ 0x5c
 8013d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2e:	4629      	mov	r1, r5
 8013d30:	4620      	mov	r0, r4
 8013d32:	f000 fcc7 	bl	80146c4 <uxr_read_delete_session_status>
 8013d36:	e6ae      	b.n	8013a96 <read_submessage_list+0x12>
 8013d38:	f001 fbae 	bl	8015498 <uxr_nanos>
 8013d3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013d3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8013d40:	464f      	mov	r7, r9
 8013d42:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013d46:	1812      	adds	r2, r2, r0
 8013d48:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013d4a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8013d4c:	eb47 0101 	adc.w	r1, r7, r1
 8013d50:	464f      	mov	r7, r9
 8013d52:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013d56:	463b      	mov	r3, r7
 8013d58:	4684      	mov	ip, r0
 8013d5a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8013d5e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013d62:	eb1c 0c00 	adds.w	ip, ip, r0
 8013d66:	464f      	mov	r7, r9
 8013d68:	eb43 0307 	adc.w	r3, r3, r7
 8013d6c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013d70:	eb61 0303 	sbc.w	r3, r1, r3
 8013d74:	0fda      	lsrs	r2, r3, #31
 8013d76:	eb12 020c 	adds.w	r2, r2, ip
 8013d7a:	f143 0300 	adc.w	r3, r3, #0
 8013d7e:	0852      	lsrs	r2, r2, #1
 8013d80:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013d84:	105b      	asrs	r3, r3, #1
 8013d86:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8013d8a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8013d8e:	e6dd      	b.n	8013b4c <read_submessage_list+0xc8>
 8013d90:	3b9aca00 	.word	0x3b9aca00

08013d94 <listen_message_reliably>:
 8013d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d98:	1e0b      	subs	r3, r1, #0
 8013d9a:	b09d      	sub	sp, #116	@ 0x74
 8013d9c:	bfb8      	it	lt
 8013d9e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8013da2:	4680      	mov	r8, r0
 8013da4:	9305      	str	r3, [sp, #20]
 8013da6:	f001 fb5d 	bl	8015464 <uxr_millis>
 8013daa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8013dae:	4681      	mov	r9, r0
 8013db0:	2a00      	cmp	r2, #0
 8013db2:	f000 80a1 	beq.w	8013ef8 <listen_message_reliably+0x164>
 8013db6:	2600      	movs	r6, #0
 8013db8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013dbc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013dc0:	9303      	str	r3, [sp, #12]
 8013dc2:	4630      	mov	r0, r6
 8013dc4:	460f      	mov	r7, r1
 8013dc6:	e00f      	b.n	8013de8 <listen_message_reliably+0x54>
 8013dc8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8013dcc:	9903      	ldr	r1, [sp, #12]
 8013dce:	455a      	cmp	r2, fp
 8013dd0:	f106 0601 	add.w	r6, r6, #1
 8013dd4:	eb73 0101 	sbcs.w	r1, r3, r1
 8013dd8:	b2f0      	uxtb	r0, r6
 8013dda:	da01      	bge.n	8013de0 <listen_message_reliably+0x4c>
 8013ddc:	4693      	mov	fp, r2
 8013dde:	9303      	str	r3, [sp, #12]
 8013de0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013de4:	4283      	cmp	r3, r0
 8013de6:	d960      	bls.n	8013eaa <listen_message_reliably+0x116>
 8013de8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013dec:	2102      	movs	r1, #2
 8013dee:	2201      	movs	r2, #1
 8013df0:	f001 f9ba 	bl	8015168 <uxr_stream_id>
 8013df4:	00e4      	lsls	r4, r4, #3
 8013df6:	f104 0520 	add.w	r5, r4, #32
 8013dfa:	4445      	add	r5, r8
 8013dfc:	4601      	mov	r1, r0
 8013dfe:	463b      	mov	r3, r7
 8013e00:	464a      	mov	r2, r9
 8013e02:	4628      	mov	r0, r5
 8013e04:	9109      	str	r1, [sp, #36]	@ 0x24
 8013e06:	f006 fcd1 	bl	801a7ac <uxr_update_output_stream_heartbeat_timestamp>
 8013e0a:	eb08 0304 	add.w	r3, r8, r4
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	d0da      	beq.n	8013dc8 <listen_message_reliably+0x34>
 8013e12:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013e16:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8013e1a:	9304      	str	r3, [sp, #16]
 8013e1c:	4640      	mov	r0, r8
 8013e1e:	f000 fcd9 	bl	80147d4 <uxr_session_header_offset>
 8013e22:	3501      	adds	r5, #1
 8013e24:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8013e28:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013e2c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013e30:	2300      	movs	r3, #0
 8013e32:	2211      	movs	r2, #17
 8013e34:	9000      	str	r0, [sp, #0]
 8013e36:	a90c      	add	r1, sp, #48	@ 0x30
 8013e38:	4650      	mov	r0, sl
 8013e3a:	f7fa f865 	bl	800df08 <ucdr_init_buffer_origin_offset>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	2205      	movs	r2, #5
 8013e42:	210b      	movs	r1, #11
 8013e44:	4650      	mov	r0, sl
 8013e46:	f001 fac7 	bl	80153d8 <uxr_buffer_submessage_header>
 8013e4a:	8968      	ldrh	r0, [r5, #10]
 8013e4c:	2101      	movs	r1, #1
 8013e4e:	f006 fd6f 	bl	801a930 <uxr_seq_num_add>
 8013e52:	892b      	ldrh	r3, [r5, #8]
 8013e54:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013e58:	4602      	mov	r2, r0
 8013e5a:	9b04      	ldr	r3, [sp, #16]
 8013e5c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8013e60:	a90a      	add	r1, sp, #40	@ 0x28
 8013e62:	4650      	mov	r0, sl
 8013e64:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8013e68:	f002 fcb0 	bl	80167cc <uxr_serialize_HEARTBEAT_Payload>
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	4611      	mov	r1, r2
 8013e70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8013e72:	4640      	mov	r0, r8
 8013e74:	f000 fc58 	bl	8014728 <uxr_stamp_session_header>
 8013e78:	4650      	mov	r0, sl
 8013e7a:	f7fa f883 	bl	800df84 <ucdr_buffer_length>
 8013e7e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8013e82:	4602      	mov	r2, r0
 8013e84:	a90c      	add	r1, sp, #48	@ 0x30
 8013e86:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013e8a:	4444      	add	r4, r8
 8013e8c:	47a8      	blx	r5
 8013e8e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8013e92:	9903      	ldr	r1, [sp, #12]
 8013e94:	455a      	cmp	r2, fp
 8013e96:	f106 0601 	add.w	r6, r6, #1
 8013e9a:	eb73 0101 	sbcs.w	r1, r3, r1
 8013e9e:	b2f0      	uxtb	r0, r6
 8013ea0:	db9c      	blt.n	8013ddc <listen_message_reliably+0x48>
 8013ea2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8013ea6:	4283      	cmp	r3, r0
 8013ea8:	d89e      	bhi.n	8013de8 <listen_message_reliably+0x54>
 8013eaa:	9a03      	ldr	r2, [sp, #12]
 8013eac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	bf08      	it	eq
 8013eb4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8013eb8:	d01e      	beq.n	8013ef8 <listen_message_reliably+0x164>
 8013eba:	ebab 0309 	sub.w	r3, fp, r9
 8013ebe:	9905      	ldr	r1, [sp, #20]
 8013ec0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	bf08      	it	eq
 8013ec8:	2301      	moveq	r3, #1
 8013eca:	4299      	cmp	r1, r3
 8013ecc:	bfa8      	it	ge
 8013ece:	4619      	movge	r1, r3
 8013ed0:	6894      	ldr	r4, [r2, #8]
 8013ed2:	6810      	ldr	r0, [r2, #0]
 8013ed4:	4689      	mov	r9, r1
 8013ed6:	460b      	mov	r3, r1
 8013ed8:	aa08      	add	r2, sp, #32
 8013eda:	a907      	add	r1, sp, #28
 8013edc:	47a0      	blx	r4
 8013ede:	b968      	cbnz	r0, 8013efc <listen_message_reliably+0x168>
 8013ee0:	9b05      	ldr	r3, [sp, #20]
 8013ee2:	eba3 0309 	sub.w	r3, r3, r9
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	9305      	str	r3, [sp, #20]
 8013eea:	f73f af5c 	bgt.w	8013da6 <listen_message_reliably+0x12>
 8013eee:	4604      	mov	r4, r0
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	b01d      	add	sp, #116	@ 0x74
 8013ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef8:	9b05      	ldr	r3, [sp, #20]
 8013efa:	e7e0      	b.n	8013ebe <listen_message_reliably+0x12a>
 8013efc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013f00:	4604      	mov	r4, r0
 8013f02:	a80c      	add	r0, sp, #48	@ 0x30
 8013f04:	f7fa f812 	bl	800df2c <ucdr_init_buffer>
 8013f08:	2500      	movs	r5, #0
 8013f0a:	f10d 031a 	add.w	r3, sp, #26
 8013f0e:	aa06      	add	r2, sp, #24
 8013f10:	a90c      	add	r1, sp, #48	@ 0x30
 8013f12:	4640      	mov	r0, r8
 8013f14:	f88d 5018 	strb.w	r5, [sp, #24]
 8013f18:	f000 fc1a 	bl	8014750 <uxr_read_session_header>
 8013f1c:	b918      	cbnz	r0, 8013f26 <listen_message_reliably+0x192>
 8013f1e:	4620      	mov	r0, r4
 8013f20:	b01d      	add	sp, #116	@ 0x74
 8013f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f26:	4629      	mov	r1, r5
 8013f28:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013f2c:	f001 f946 	bl	80151bc <uxr_stream_id_from_raw>
 8013f30:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013f34:	2d01      	cmp	r5, #1
 8013f36:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013f3a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013f3e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013f42:	d04b      	beq.n	8013fdc <listen_message_reliably+0x248>
 8013f44:	2d02      	cmp	r5, #2
 8013f46:	d00f      	beq.n	8013f68 <listen_message_reliably+0x1d4>
 8013f48:	2d00      	cmp	r5, #0
 8013f4a:	d1e8      	bne.n	8013f1e <listen_message_reliably+0x18a>
 8013f4c:	4629      	mov	r1, r5
 8013f4e:	4628      	mov	r0, r5
 8013f50:	f001 f934 	bl	80151bc <uxr_stream_id_from_raw>
 8013f54:	a90c      	add	r1, sp, #48	@ 0x30
 8013f56:	4602      	mov	r2, r0
 8013f58:	4640      	mov	r0, r8
 8013f5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8013f5c:	f7ff fd92 	bl	8013a84 <read_submessage_list>
 8013f60:	4620      	mov	r0, r4
 8013f62:	b01d      	add	sp, #116	@ 0x74
 8013f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f68:	4631      	mov	r1, r6
 8013f6a:	f108 0008 	add.w	r0, r8, #8
 8013f6e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013f72:	f001 fa11 	bl	8015398 <uxr_get_input_reliable_stream>
 8013f76:	4607      	mov	r7, r0
 8013f78:	b338      	cbz	r0, 8013fca <listen_message_reliably+0x236>
 8013f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f7c:	9203      	str	r2, [sp, #12]
 8013f7e:	a80c      	add	r0, sp, #48	@ 0x30
 8013f80:	f7fa f804 	bl	800df8c <ucdr_buffer_remaining>
 8013f84:	4603      	mov	r3, r0
 8013f86:	f10d 0019 	add.w	r0, sp, #25
 8013f8a:	9000      	str	r0, [sp, #0]
 8013f8c:	9a03      	ldr	r2, [sp, #12]
 8013f8e:	4651      	mov	r1, sl
 8013f90:	4638      	mov	r0, r7
 8013f92:	f006 f821 	bl	8019fd8 <uxr_receive_reliable_message>
 8013f96:	b1c0      	cbz	r0, 8013fca <listen_message_reliably+0x236>
 8013f98:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013f9c:	b393      	cbz	r3, 8014004 <listen_message_reliably+0x270>
 8013f9e:	ad14      	add	r5, sp, #80	@ 0x50
 8013fa0:	f04f 0a02 	mov.w	sl, #2
 8013fa4:	e00a      	b.n	8013fbc <listen_message_reliably+0x228>
 8013fa6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013faa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8013fae:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8013fb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013fb4:	4629      	mov	r1, r5
 8013fb6:	4640      	mov	r0, r8
 8013fb8:	f7ff fd64 	bl	8013a84 <read_submessage_list>
 8013fbc:	2204      	movs	r2, #4
 8013fbe:	4629      	mov	r1, r5
 8013fc0:	4638      	mov	r0, r7
 8013fc2:	f006 f889 	bl	801a0d8 <uxr_next_input_reliable_buffer_available>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d1ed      	bne.n	8013fa6 <listen_message_reliably+0x212>
 8013fca:	4640      	mov	r0, r8
 8013fcc:	4632      	mov	r2, r6
 8013fce:	4649      	mov	r1, r9
 8013fd0:	f7ff fbd4 	bl	801377c <write_submessage_acknack.isra.0>
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	b01d      	add	sp, #116	@ 0x74
 8013fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fdc:	4631      	mov	r1, r6
 8013fde:	f108 0008 	add.w	r0, r8, #8
 8013fe2:	f001 f9cf 	bl	8015384 <uxr_get_input_best_effort_stream>
 8013fe6:	2800      	cmp	r0, #0
 8013fe8:	d099      	beq.n	8013f1e <listen_message_reliably+0x18a>
 8013fea:	4651      	mov	r1, sl
 8013fec:	f005 ff60 	bl	8019eb0 <uxr_receive_best_effort_message>
 8013ff0:	2800      	cmp	r0, #0
 8013ff2:	d094      	beq.n	8013f1e <listen_message_reliably+0x18a>
 8013ff4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013ff8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013ffa:	a90c      	add	r1, sp, #48	@ 0x30
 8013ffc:	4640      	mov	r0, r8
 8013ffe:	f7ff fd41 	bl	8013a84 <read_submessage_list>
 8014002:	e78c      	b.n	8013f1e <listen_message_reliably+0x18a>
 8014004:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8014008:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801400a:	a90c      	add	r1, sp, #48	@ 0x30
 801400c:	4640      	mov	r0, r8
 801400e:	f7ff fd39 	bl	8013a84 <read_submessage_list>
 8014012:	e7c4      	b.n	8013f9e <listen_message_reliably+0x20a>

08014014 <uxr_run_session_timeout>:
 8014014:	b570      	push	{r4, r5, r6, lr}
 8014016:	4604      	mov	r4, r0
 8014018:	460d      	mov	r5, r1
 801401a:	f001 fa23 	bl	8015464 <uxr_millis>
 801401e:	4606      	mov	r6, r0
 8014020:	4620      	mov	r0, r4
 8014022:	f7ff fc71 	bl	8013908 <uxr_flash_output_streams>
 8014026:	4629      	mov	r1, r5
 8014028:	4620      	mov	r0, r4
 801402a:	f7ff feb3 	bl	8013d94 <listen_message_reliably>
 801402e:	f001 fa19 	bl	8015464 <uxr_millis>
 8014032:	1b83      	subs	r3, r0, r6
 8014034:	1ae9      	subs	r1, r5, r3
 8014036:	2900      	cmp	r1, #0
 8014038:	dcf6      	bgt.n	8014028 <uxr_run_session_timeout+0x14>
 801403a:	f104 0008 	add.w	r0, r4, #8
 801403e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014042:	f001 b9b3 	b.w	80153ac <uxr_output_streams_confirmed>
 8014046:	bf00      	nop

08014048 <uxr_run_session_until_data>:
 8014048:	b570      	push	{r4, r5, r6, lr}
 801404a:	4604      	mov	r4, r0
 801404c:	460d      	mov	r5, r1
 801404e:	f001 fa09 	bl	8015464 <uxr_millis>
 8014052:	4606      	mov	r6, r0
 8014054:	4620      	mov	r0, r4
 8014056:	f7ff fc57 	bl	8013908 <uxr_flash_output_streams>
 801405a:	2300      	movs	r3, #0
 801405c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8014060:	4629      	mov	r1, r5
 8014062:	e005      	b.n	8014070 <uxr_run_session_until_data+0x28>
 8014064:	f001 f9fe 	bl	8015464 <uxr_millis>
 8014068:	1b83      	subs	r3, r0, r6
 801406a:	1ae9      	subs	r1, r5, r3
 801406c:	2900      	cmp	r1, #0
 801406e:	dd07      	ble.n	8014080 <uxr_run_session_until_data+0x38>
 8014070:	4620      	mov	r0, r4
 8014072:	f7ff fe8f 	bl	8013d94 <listen_message_reliably>
 8014076:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801407a:	2800      	cmp	r0, #0
 801407c:	d0f2      	beq.n	8014064 <uxr_run_session_until_data+0x1c>
 801407e:	bd70      	pop	{r4, r5, r6, pc}
 8014080:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8014084:	bd70      	pop	{r4, r5, r6, pc}
 8014086:	bf00      	nop

08014088 <uxr_run_session_until_confirm_delivery>:
 8014088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801408c:	4606      	mov	r6, r0
 801408e:	460d      	mov	r5, r1
 8014090:	f001 f9e8 	bl	8015464 <uxr_millis>
 8014094:	4607      	mov	r7, r0
 8014096:	4630      	mov	r0, r6
 8014098:	f7ff fc36 	bl	8013908 <uxr_flash_output_streams>
 801409c:	2d00      	cmp	r5, #0
 801409e:	f106 0808 	add.w	r8, r6, #8
 80140a2:	bfa8      	it	ge
 80140a4:	462c      	movge	r4, r5
 80140a6:	da07      	bge.n	80140b8 <uxr_run_session_until_confirm_delivery+0x30>
 80140a8:	e00e      	b.n	80140c8 <uxr_run_session_until_confirm_delivery+0x40>
 80140aa:	f7ff fe73 	bl	8013d94 <listen_message_reliably>
 80140ae:	f001 f9d9 	bl	8015464 <uxr_millis>
 80140b2:	1bc3      	subs	r3, r0, r7
 80140b4:	1aec      	subs	r4, r5, r3
 80140b6:	d407      	bmi.n	80140c8 <uxr_run_session_until_confirm_delivery+0x40>
 80140b8:	4640      	mov	r0, r8
 80140ba:	f001 f977 	bl	80153ac <uxr_output_streams_confirmed>
 80140be:	4603      	mov	r3, r0
 80140c0:	4621      	mov	r1, r4
 80140c2:	4630      	mov	r0, r6
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d0f0      	beq.n	80140aa <uxr_run_session_until_confirm_delivery+0x22>
 80140c8:	4640      	mov	r0, r8
 80140ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140ce:	f001 b96d 	b.w	80153ac <uxr_output_streams_confirmed>
 80140d2:	bf00      	nop

080140d4 <uxr_run_session_until_all_status>:
 80140d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140d8:	9c08      	ldr	r4, [sp, #32]
 80140da:	4606      	mov	r6, r0
 80140dc:	460f      	mov	r7, r1
 80140de:	4691      	mov	r9, r2
 80140e0:	461d      	mov	r5, r3
 80140e2:	f7ff fc11 	bl	8013908 <uxr_flash_output_streams>
 80140e6:	b124      	cbz	r4, 80140f2 <uxr_run_session_until_all_status+0x1e>
 80140e8:	4622      	mov	r2, r4
 80140ea:	21ff      	movs	r1, #255	@ 0xff
 80140ec:	4628      	mov	r0, r5
 80140ee:	f008 f9fd 	bl	801c4ec <memset>
 80140f2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 80140f6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80140f8:	f001 f9b4 	bl	8015464 <uxr_millis>
 80140fc:	3d01      	subs	r5, #1
 80140fe:	f1a9 0902 	sub.w	r9, r9, #2
 8014102:	4680      	mov	r8, r0
 8014104:	4639      	mov	r1, r7
 8014106:	4630      	mov	r0, r6
 8014108:	f7ff fe44 	bl	8013d94 <listen_message_reliably>
 801410c:	f001 f9aa 	bl	8015464 <uxr_millis>
 8014110:	eba0 0008 	sub.w	r0, r0, r8
 8014114:	1a39      	subs	r1, r7, r0
 8014116:	b344      	cbz	r4, 801416a <uxr_run_session_until_all_status+0x96>
 8014118:	4628      	mov	r0, r5
 801411a:	46ac      	mov	ip, r5
 801411c:	2301      	movs	r3, #1
 801411e:	e002      	b.n	8014126 <uxr_run_session_until_all_status+0x52>
 8014120:	42a3      	cmp	r3, r4
 8014122:	d20d      	bcs.n	8014140 <uxr_run_session_until_all_status+0x6c>
 8014124:	3301      	adds	r3, #1
 8014126:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801412a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801412e:	d1f7      	bne.n	8014120 <uxr_run_session_until_all_status+0x4c>
 8014130:	42a3      	cmp	r3, r4
 8014132:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8014136:	d213      	bcs.n	8014160 <uxr_run_session_until_all_status+0x8c>
 8014138:	2a00      	cmp	r2, #0
 801413a:	d0f3      	beq.n	8014124 <uxr_run_session_until_all_status+0x50>
 801413c:	2900      	cmp	r1, #0
 801413e:	dce2      	bgt.n	8014106 <uxr_run_session_until_all_status+0x32>
 8014140:	2300      	movs	r3, #0
 8014142:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8014144:	442c      	add	r4, r5
 8014146:	e001      	b.n	801414c <uxr_run_session_until_all_status+0x78>
 8014148:	2b01      	cmp	r3, #1
 801414a:	d812      	bhi.n	8014172 <uxr_run_session_until_all_status+0x9e>
 801414c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014150:	4284      	cmp	r4, r0
 8014152:	d1f9      	bne.n	8014148 <uxr_run_session_until_all_status+0x74>
 8014154:	2b01      	cmp	r3, #1
 8014156:	bf8c      	ite	hi
 8014158:	2000      	movhi	r0, #0
 801415a:	2001      	movls	r0, #1
 801415c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014160:	2900      	cmp	r1, #0
 8014162:	dded      	ble.n	8014140 <uxr_run_session_until_all_status+0x6c>
 8014164:	2a00      	cmp	r2, #0
 8014166:	d1ce      	bne.n	8014106 <uxr_run_session_until_all_status+0x32>
 8014168:	e7ea      	b.n	8014140 <uxr_run_session_until_all_status+0x6c>
 801416a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 801416c:	2001      	movs	r0, #1
 801416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014172:	2000      	movs	r0, #0
 8014174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014178 <uxr_run_session_until_pong>:
 8014178:	b570      	push	{r4, r5, r6, lr}
 801417a:	4604      	mov	r4, r0
 801417c:	460d      	mov	r5, r1
 801417e:	f001 f971 	bl	8015464 <uxr_millis>
 8014182:	4606      	mov	r6, r0
 8014184:	4620      	mov	r0, r4
 8014186:	f7ff fbbf 	bl	8013908 <uxr_flash_output_streams>
 801418a:	2300      	movs	r3, #0
 801418c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8014190:	4629      	mov	r1, r5
 8014192:	e005      	b.n	80141a0 <uxr_run_session_until_pong+0x28>
 8014194:	f001 f966 	bl	8015464 <uxr_millis>
 8014198:	1b83      	subs	r3, r0, r6
 801419a:	1ae9      	subs	r1, r5, r3
 801419c:	2900      	cmp	r1, #0
 801419e:	dd0c      	ble.n	80141ba <uxr_run_session_until_pong+0x42>
 80141a0:	4620      	mov	r0, r4
 80141a2:	f7ff fdf7 	bl	8013d94 <listen_message_reliably>
 80141a6:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80141aa:	2800      	cmp	r0, #0
 80141ac:	d0f2      	beq.n	8014194 <uxr_run_session_until_pong+0x1c>
 80141ae:	f1a0 0001 	sub.w	r0, r0, #1
 80141b2:	fab0 f080 	clz	r0, r0
 80141b6:	0940      	lsrs	r0, r0, #5
 80141b8:	bd70      	pop	{r4, r5, r6, pc}
 80141ba:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 80141be:	f1a0 0001 	sub.w	r0, r0, #1
 80141c2:	fab0 f080 	clz	r0, r0
 80141c6:	0940      	lsrs	r0, r0, #5
 80141c8:	bd70      	pop	{r4, r5, r6, pc}
 80141ca:	bf00      	nop

080141cc <wait_session_status>:
 80141cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d0:	4604      	mov	r4, r0
 80141d2:	b09d      	sub	sp, #116	@ 0x74
 80141d4:	20ff      	movs	r0, #255	@ 0xff
 80141d6:	7160      	strb	r0, [r4, #5]
 80141d8:	9303      	str	r3, [sp, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f000 80b6 	beq.w	801434c <wait_session_status+0x180>
 80141e0:	468a      	mov	sl, r1
 80141e2:	4691      	mov	r9, r2
 80141e4:	f04f 0b00 	mov.w	fp, #0
 80141e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80141ea:	464a      	mov	r2, r9
 80141ec:	e9d3 0500 	ldrd	r0, r5, [r3]
 80141f0:	4651      	mov	r1, sl
 80141f2:	47a8      	blx	r5
 80141f4:	f001 f936 	bl	8015464 <uxr_millis>
 80141f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80141fc:	4605      	mov	r5, r0
 80141fe:	e009      	b.n	8014214 <wait_session_status+0x48>
 8014200:	f001 f930 	bl	8015464 <uxr_millis>
 8014204:	1b40      	subs	r0, r0, r5
 8014206:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801420a:	2b00      	cmp	r3, #0
 801420c:	dd40      	ble.n	8014290 <wait_session_status+0xc4>
 801420e:	7960      	ldrb	r0, [r4, #5]
 8014210:	28ff      	cmp	r0, #255	@ 0xff
 8014212:	d145      	bne.n	80142a0 <wait_session_status+0xd4>
 8014214:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8014216:	a908      	add	r1, sp, #32
 8014218:	6896      	ldr	r6, [r2, #8]
 801421a:	6810      	ldr	r0, [r2, #0]
 801421c:	aa09      	add	r2, sp, #36	@ 0x24
 801421e:	47b0      	blx	r6
 8014220:	2800      	cmp	r0, #0
 8014222:	d0ed      	beq.n	8014200 <wait_session_status+0x34>
 8014224:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014228:	a80c      	add	r0, sp, #48	@ 0x30
 801422a:	f7f9 fe7f 	bl	800df2c <ucdr_init_buffer>
 801422e:	2600      	movs	r6, #0
 8014230:	f10d 031e 	add.w	r3, sp, #30
 8014234:	aa07      	add	r2, sp, #28
 8014236:	a90c      	add	r1, sp, #48	@ 0x30
 8014238:	4620      	mov	r0, r4
 801423a:	f88d 601c 	strb.w	r6, [sp, #28]
 801423e:	f000 fa87 	bl	8014750 <uxr_read_session_header>
 8014242:	2800      	cmp	r0, #0
 8014244:	d0dc      	beq.n	8014200 <wait_session_status+0x34>
 8014246:	4631      	mov	r1, r6
 8014248:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801424c:	f000 ffb6 	bl	80151bc <uxr_stream_id_from_raw>
 8014250:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014254:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014258:	9302      	str	r3, [sp, #8]
 801425a:	2f01      	cmp	r7, #1
 801425c:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8014260:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014264:	d05c      	beq.n	8014320 <wait_session_status+0x154>
 8014266:	2f02      	cmp	r7, #2
 8014268:	d020      	beq.n	80142ac <wait_session_status+0xe0>
 801426a:	2f00      	cmp	r7, #0
 801426c:	d1c8      	bne.n	8014200 <wait_session_status+0x34>
 801426e:	4639      	mov	r1, r7
 8014270:	4638      	mov	r0, r7
 8014272:	f000 ffa3 	bl	80151bc <uxr_stream_id_from_raw>
 8014276:	a90c      	add	r1, sp, #48	@ 0x30
 8014278:	4602      	mov	r2, r0
 801427a:	900b      	str	r0, [sp, #44]	@ 0x2c
 801427c:	4620      	mov	r0, r4
 801427e:	f7ff fc01 	bl	8013a84 <read_submessage_list>
 8014282:	f001 f8ef 	bl	8015464 <uxr_millis>
 8014286:	1b40      	subs	r0, r0, r5
 8014288:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801428c:	2b00      	cmp	r3, #0
 801428e:	dcbe      	bgt.n	801420e <wait_session_status+0x42>
 8014290:	9b03      	ldr	r3, [sp, #12]
 8014292:	7960      	ldrb	r0, [r4, #5]
 8014294:	f10b 0b01 	add.w	fp, fp, #1
 8014298:	455b      	cmp	r3, fp
 801429a:	d001      	beq.n	80142a0 <wait_session_status+0xd4>
 801429c:	28ff      	cmp	r0, #255	@ 0xff
 801429e:	d0a3      	beq.n	80141e8 <wait_session_status+0x1c>
 80142a0:	38ff      	subs	r0, #255	@ 0xff
 80142a2:	bf18      	it	ne
 80142a4:	2001      	movne	r0, #1
 80142a6:	b01d      	add	sp, #116	@ 0x74
 80142a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ac:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80142b0:	9304      	str	r3, [sp, #16]
 80142b2:	4631      	mov	r1, r6
 80142b4:	f104 0008 	add.w	r0, r4, #8
 80142b8:	f001 f86e 	bl	8015398 <uxr_get_input_reliable_stream>
 80142bc:	4680      	mov	r8, r0
 80142be:	b348      	cbz	r0, 8014314 <wait_session_status+0x148>
 80142c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80142c2:	9205      	str	r2, [sp, #20]
 80142c4:	a80c      	add	r0, sp, #48	@ 0x30
 80142c6:	f7f9 fe61 	bl	800df8c <ucdr_buffer_remaining>
 80142ca:	4603      	mov	r3, r0
 80142cc:	f10d 001d 	add.w	r0, sp, #29
 80142d0:	9000      	str	r0, [sp, #0]
 80142d2:	9a05      	ldr	r2, [sp, #20]
 80142d4:	9902      	ldr	r1, [sp, #8]
 80142d6:	4640      	mov	r0, r8
 80142d8:	f005 fe7e 	bl	8019fd8 <uxr_receive_reliable_message>
 80142dc:	b1d0      	cbz	r0, 8014314 <wait_session_status+0x148>
 80142de:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d03a      	beq.n	801435c <wait_session_status+0x190>
 80142e6:	9f04      	ldr	r7, [sp, #16]
 80142e8:	e00a      	b.n	8014300 <wait_session_status+0x134>
 80142ea:	f04f 0302 	mov.w	r3, #2
 80142ee:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80142f2:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80142f6:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80142fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80142fc:	f7ff fbc2 	bl	8013a84 <read_submessage_list>
 8014300:	a914      	add	r1, sp, #80	@ 0x50
 8014302:	2204      	movs	r2, #4
 8014304:	4640      	mov	r0, r8
 8014306:	f005 fee7 	bl	801a0d8 <uxr_next_input_reliable_buffer_available>
 801430a:	4603      	mov	r3, r0
 801430c:	a914      	add	r1, sp, #80	@ 0x50
 801430e:	4620      	mov	r0, r4
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1ea      	bne.n	80142ea <wait_session_status+0x11e>
 8014314:	9904      	ldr	r1, [sp, #16]
 8014316:	4632      	mov	r2, r6
 8014318:	4620      	mov	r0, r4
 801431a:	f7ff fa2f 	bl	801377c <write_submessage_acknack.isra.0>
 801431e:	e76f      	b.n	8014200 <wait_session_status+0x34>
 8014320:	4631      	mov	r1, r6
 8014322:	f104 0008 	add.w	r0, r4, #8
 8014326:	f001 f82d 	bl	8015384 <uxr_get_input_best_effort_stream>
 801432a:	2800      	cmp	r0, #0
 801432c:	f43f af68 	beq.w	8014200 <wait_session_status+0x34>
 8014330:	9902      	ldr	r1, [sp, #8]
 8014332:	f005 fdbd 	bl	8019eb0 <uxr_receive_best_effort_message>
 8014336:	2800      	cmp	r0, #0
 8014338:	f43f af62 	beq.w	8014200 <wait_session_status+0x34>
 801433c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014340:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014342:	a90c      	add	r1, sp, #48	@ 0x30
 8014344:	4620      	mov	r0, r4
 8014346:	f7ff fb9d 	bl	8013a84 <read_submessage_list>
 801434a:	e759      	b.n	8014200 <wait_session_status+0x34>
 801434c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801434e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8014352:	47a0      	blx	r4
 8014354:	2001      	movs	r0, #1
 8014356:	b01d      	add	sp, #116	@ 0x74
 8014358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8014360:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014362:	a90c      	add	r1, sp, #48	@ 0x30
 8014364:	4620      	mov	r0, r4
 8014366:	f7ff fb8d 	bl	8013a84 <read_submessage_list>
 801436a:	e7bc      	b.n	80142e6 <wait_session_status+0x11a>

0801436c <uxr_delete_session_retries>:
 801436c:	b530      	push	{r4, r5, lr}
 801436e:	b08f      	sub	sp, #60	@ 0x3c
 8014370:	4604      	mov	r4, r0
 8014372:	460d      	mov	r5, r1
 8014374:	f000 fa2e 	bl	80147d4 <uxr_session_header_offset>
 8014378:	2300      	movs	r3, #0
 801437a:	2210      	movs	r2, #16
 801437c:	9000      	str	r0, [sp, #0]
 801437e:	a902      	add	r1, sp, #8
 8014380:	a806      	add	r0, sp, #24
 8014382:	f7f9 fdc1 	bl	800df08 <ucdr_init_buffer_origin_offset>
 8014386:	a906      	add	r1, sp, #24
 8014388:	4620      	mov	r0, r4
 801438a:	f000 f973 	bl	8014674 <uxr_buffer_delete_session>
 801438e:	2200      	movs	r2, #0
 8014390:	4611      	mov	r1, r2
 8014392:	9b06      	ldr	r3, [sp, #24]
 8014394:	4620      	mov	r0, r4
 8014396:	f000 f9c7 	bl	8014728 <uxr_stamp_session_header>
 801439a:	a806      	add	r0, sp, #24
 801439c:	f7f9 fdf2 	bl	800df84 <ucdr_buffer_length>
 80143a0:	462b      	mov	r3, r5
 80143a2:	4602      	mov	r2, r0
 80143a4:	a902      	add	r1, sp, #8
 80143a6:	4620      	mov	r0, r4
 80143a8:	f7ff ff10 	bl	80141cc <wait_session_status>
 80143ac:	b118      	cbz	r0, 80143b6 <uxr_delete_session_retries+0x4a>
 80143ae:	7960      	ldrb	r0, [r4, #5]
 80143b0:	fab0 f080 	clz	r0, r0
 80143b4:	0940      	lsrs	r0, r0, #5
 80143b6:	b00f      	add	sp, #60	@ 0x3c
 80143b8:	bd30      	pop	{r4, r5, pc}
 80143ba:	bf00      	nop

080143bc <uxr_create_session>:
 80143bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143c0:	f100 0b08 	add.w	fp, r0, #8
 80143c4:	b0ab      	sub	sp, #172	@ 0xac
 80143c6:	4604      	mov	r4, r0
 80143c8:	4658      	mov	r0, fp
 80143ca:	f000 ff2b 	bl	8015224 <uxr_reset_stream_storage>
 80143ce:	4620      	mov	r0, r4
 80143d0:	f000 fa00 	bl	80147d4 <uxr_session_header_offset>
 80143d4:	2300      	movs	r3, #0
 80143d6:	9000      	str	r0, [sp, #0]
 80143d8:	221c      	movs	r2, #28
 80143da:	a90b      	add	r1, sp, #44	@ 0x2c
 80143dc:	a812      	add	r0, sp, #72	@ 0x48
 80143de:	f7f9 fd93 	bl	800df08 <ucdr_init_buffer_origin_offset>
 80143e2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80143e4:	8a1a      	ldrh	r2, [r3, #16]
 80143e6:	3a04      	subs	r2, #4
 80143e8:	b292      	uxth	r2, r2
 80143ea:	a912      	add	r1, sp, #72	@ 0x48
 80143ec:	4620      	mov	r0, r4
 80143ee:	f000 f917 	bl	8014620 <uxr_buffer_create_session>
 80143f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80143f4:	4620      	mov	r0, r4
 80143f6:	f000 f983 	bl	8014700 <uxr_stamp_create_session_header>
 80143fa:	a812      	add	r0, sp, #72	@ 0x48
 80143fc:	f7f9 fdc2 	bl	800df84 <ucdr_buffer_length>
 8014400:	23ff      	movs	r3, #255	@ 0xff
 8014402:	7163      	strb	r3, [r4, #5]
 8014404:	230a      	movs	r3, #10
 8014406:	46da      	mov	sl, fp
 8014408:	9303      	str	r3, [sp, #12]
 801440a:	4683      	mov	fp, r0
 801440c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801440e:	465a      	mov	r2, fp
 8014410:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014414:	a90b      	add	r1, sp, #44	@ 0x2c
 8014416:	47a8      	blx	r5
 8014418:	f001 f824 	bl	8015464 <uxr_millis>
 801441c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014420:	4605      	mov	r5, r0
 8014422:	e009      	b.n	8014438 <uxr_create_session+0x7c>
 8014424:	f001 f81e 	bl	8015464 <uxr_millis>
 8014428:	1b40      	subs	r0, r0, r5
 801442a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801442e:	2b00      	cmp	r3, #0
 8014430:	7962      	ldrb	r2, [r4, #5]
 8014432:	dd38      	ble.n	80144a6 <uxr_create_session+0xea>
 8014434:	2aff      	cmp	r2, #255	@ 0xff
 8014436:	d13c      	bne.n	80144b2 <uxr_create_session+0xf6>
 8014438:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801443a:	a907      	add	r1, sp, #28
 801443c:	6896      	ldr	r6, [r2, #8]
 801443e:	6810      	ldr	r0, [r2, #0]
 8014440:	aa08      	add	r2, sp, #32
 8014442:	47b0      	blx	r6
 8014444:	2800      	cmp	r0, #0
 8014446:	d0ed      	beq.n	8014424 <uxr_create_session+0x68>
 8014448:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801444c:	a81a      	add	r0, sp, #104	@ 0x68
 801444e:	f7f9 fd6d 	bl	800df2c <ucdr_init_buffer>
 8014452:	2600      	movs	r6, #0
 8014454:	f10d 031a 	add.w	r3, sp, #26
 8014458:	aa06      	add	r2, sp, #24
 801445a:	a91a      	add	r1, sp, #104	@ 0x68
 801445c:	4620      	mov	r0, r4
 801445e:	f88d 6018 	strb.w	r6, [sp, #24]
 8014462:	f000 f975 	bl	8014750 <uxr_read_session_header>
 8014466:	2800      	cmp	r0, #0
 8014468:	d0dc      	beq.n	8014424 <uxr_create_session+0x68>
 801446a:	4631      	mov	r1, r6
 801446c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014470:	f000 fea4 	bl	80151bc <uxr_stream_id_from_raw>
 8014474:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014478:	2e01      	cmp	r6, #1
 801447a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801447e:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8014482:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8014486:	d053      	beq.n	8014530 <uxr_create_session+0x174>
 8014488:	2e02      	cmp	r6, #2
 801448a:	d018      	beq.n	80144be <uxr_create_session+0x102>
 801448c:	2e00      	cmp	r6, #0
 801448e:	d1c9      	bne.n	8014424 <uxr_create_session+0x68>
 8014490:	4631      	mov	r1, r6
 8014492:	4630      	mov	r0, r6
 8014494:	f000 fe92 	bl	80151bc <uxr_stream_id_from_raw>
 8014498:	a91a      	add	r1, sp, #104	@ 0x68
 801449a:	4602      	mov	r2, r0
 801449c:	900a      	str	r0, [sp, #40]	@ 0x28
 801449e:	4620      	mov	r0, r4
 80144a0:	f7ff faf0 	bl	8013a84 <read_submessage_list>
 80144a4:	e7be      	b.n	8014424 <uxr_create_session+0x68>
 80144a6:	9b03      	ldr	r3, [sp, #12]
 80144a8:	3b01      	subs	r3, #1
 80144aa:	9303      	str	r3, [sp, #12]
 80144ac:	d001      	beq.n	80144b2 <uxr_create_session+0xf6>
 80144ae:	2aff      	cmp	r2, #255	@ 0xff
 80144b0:	d0ac      	beq.n	801440c <uxr_create_session+0x50>
 80144b2:	2a00      	cmp	r2, #0
 80144b4:	d051      	beq.n	801455a <uxr_create_session+0x19e>
 80144b6:	2000      	movs	r0, #0
 80144b8:	b02b      	add	sp, #172	@ 0xac
 80144ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144be:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80144c2:	9304      	str	r3, [sp, #16]
 80144c4:	4639      	mov	r1, r7
 80144c6:	4650      	mov	r0, sl
 80144c8:	f000 ff66 	bl	8015398 <uxr_get_input_reliable_stream>
 80144cc:	4680      	mov	r8, r0
 80144ce:	b348      	cbz	r0, 8014524 <uxr_create_session+0x168>
 80144d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80144d2:	9205      	str	r2, [sp, #20]
 80144d4:	a81a      	add	r0, sp, #104	@ 0x68
 80144d6:	f7f9 fd59 	bl	800df8c <ucdr_buffer_remaining>
 80144da:	4603      	mov	r3, r0
 80144dc:	f10d 0019 	add.w	r0, sp, #25
 80144e0:	9000      	str	r0, [sp, #0]
 80144e2:	9a05      	ldr	r2, [sp, #20]
 80144e4:	4649      	mov	r1, r9
 80144e6:	4640      	mov	r0, r8
 80144e8:	f005 fd76 	bl	8019fd8 <uxr_receive_reliable_message>
 80144ec:	b1d0      	cbz	r0, 8014524 <uxr_create_session+0x168>
 80144ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d038      	beq.n	8014568 <uxr_create_session+0x1ac>
 80144f6:	9e04      	ldr	r6, [sp, #16]
 80144f8:	e00a      	b.n	8014510 <uxr_create_session+0x154>
 80144fa:	f04f 0302 	mov.w	r3, #2
 80144fe:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8014502:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8014506:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801450a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801450c:	f7ff faba 	bl	8013a84 <read_submessage_list>
 8014510:	a922      	add	r1, sp, #136	@ 0x88
 8014512:	2204      	movs	r2, #4
 8014514:	4640      	mov	r0, r8
 8014516:	f005 fddf 	bl	801a0d8 <uxr_next_input_reliable_buffer_available>
 801451a:	4603      	mov	r3, r0
 801451c:	a922      	add	r1, sp, #136	@ 0x88
 801451e:	4620      	mov	r0, r4
 8014520:	2b00      	cmp	r3, #0
 8014522:	d1ea      	bne.n	80144fa <uxr_create_session+0x13e>
 8014524:	9904      	ldr	r1, [sp, #16]
 8014526:	463a      	mov	r2, r7
 8014528:	4620      	mov	r0, r4
 801452a:	f7ff f927 	bl	801377c <write_submessage_acknack.isra.0>
 801452e:	e779      	b.n	8014424 <uxr_create_session+0x68>
 8014530:	4639      	mov	r1, r7
 8014532:	4650      	mov	r0, sl
 8014534:	f000 ff26 	bl	8015384 <uxr_get_input_best_effort_stream>
 8014538:	2800      	cmp	r0, #0
 801453a:	f43f af73 	beq.w	8014424 <uxr_create_session+0x68>
 801453e:	4649      	mov	r1, r9
 8014540:	f005 fcb6 	bl	8019eb0 <uxr_receive_best_effort_message>
 8014544:	2800      	cmp	r0, #0
 8014546:	f43f af6d 	beq.w	8014424 <uxr_create_session+0x68>
 801454a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801454e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014550:	a91a      	add	r1, sp, #104	@ 0x68
 8014552:	4620      	mov	r0, r4
 8014554:	f7ff fa96 	bl	8013a84 <read_submessage_list>
 8014558:	e764      	b.n	8014424 <uxr_create_session+0x68>
 801455a:	4650      	mov	r0, sl
 801455c:	f000 fe62 	bl	8015224 <uxr_reset_stream_storage>
 8014560:	2001      	movs	r0, #1
 8014562:	b02b      	add	sp, #172	@ 0xac
 8014564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014568:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801456c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801456e:	a91a      	add	r1, sp, #104	@ 0x68
 8014570:	4620      	mov	r0, r4
 8014572:	f7ff fa87 	bl	8013a84 <read_submessage_list>
 8014576:	e7be      	b.n	80144f6 <uxr_create_session+0x13a>

08014578 <uxr_prepare_stream_to_write_submessage>:
 8014578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801457c:	b082      	sub	sp, #8
 801457e:	4682      	mov	sl, r0
 8014580:	4610      	mov	r0, r2
 8014582:	4615      	mov	r5, r2
 8014584:	461e      	mov	r6, r3
 8014586:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801458a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 801458e:	9101      	str	r1, [sp, #4]
 8014590:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8014594:	f000 ff60 	bl	8015458 <uxr_submessage_padding>
 8014598:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801459c:	f105 0904 	add.w	r9, r5, #4
 80145a0:	2b01      	cmp	r3, #1
 80145a2:	4481      	add	r9, r0
 80145a4:	d01d      	beq.n	80145e2 <uxr_prepare_stream_to_write_submessage+0x6a>
 80145a6:	2b02      	cmp	r3, #2
 80145a8:	d116      	bne.n	80145d8 <uxr_prepare_stream_to_write_submessage+0x60>
 80145aa:	4621      	mov	r1, r4
 80145ac:	f10a 0008 	add.w	r0, sl, #8
 80145b0:	f000 fede 	bl	8015370 <uxr_get_output_reliable_stream>
 80145b4:	4604      	mov	r4, r0
 80145b6:	b158      	cbz	r0, 80145d0 <uxr_prepare_stream_to_write_submessage+0x58>
 80145b8:	4649      	mov	r1, r9
 80145ba:	4632      	mov	r2, r6
 80145bc:	f005 ff48 	bl	801a450 <uxr_prepare_reliable_buffer_to_write>
 80145c0:	4604      	mov	r4, r0
 80145c2:	b12c      	cbz	r4, 80145d0 <uxr_prepare_stream_to_write_submessage+0x58>
 80145c4:	4643      	mov	r3, r8
 80145c6:	b2aa      	uxth	r2, r5
 80145c8:	4639      	mov	r1, r7
 80145ca:	4630      	mov	r0, r6
 80145cc:	f000 ff04 	bl	80153d8 <uxr_buffer_submessage_header>
 80145d0:	4620      	mov	r0, r4
 80145d2:	b002      	add	sp, #8
 80145d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145d8:	2400      	movs	r4, #0
 80145da:	4620      	mov	r0, r4
 80145dc:	b002      	add	sp, #8
 80145de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145e2:	4621      	mov	r1, r4
 80145e4:	f10a 0008 	add.w	r0, sl, #8
 80145e8:	f000 feba 	bl	8015360 <uxr_get_output_best_effort_stream>
 80145ec:	4604      	mov	r4, r0
 80145ee:	2800      	cmp	r0, #0
 80145f0:	d0ee      	beq.n	80145d0 <uxr_prepare_stream_to_write_submessage+0x58>
 80145f2:	4649      	mov	r1, r9
 80145f4:	4632      	mov	r2, r6
 80145f6:	f005 fe5b 	bl	801a2b0 <uxr_prepare_best_effort_buffer_to_write>
 80145fa:	4604      	mov	r4, r0
 80145fc:	e7e1      	b.n	80145c2 <uxr_prepare_stream_to_write_submessage+0x4a>
 80145fe:	bf00      	nop

08014600 <uxr_init_session_info>:
 8014600:	0e13      	lsrs	r3, r2, #24
 8014602:	7043      	strb	r3, [r0, #1]
 8014604:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014608:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801460c:	7001      	strb	r1, [r0, #0]
 801460e:	70c3      	strb	r3, [r0, #3]
 8014610:	2109      	movs	r1, #9
 8014612:	23ff      	movs	r3, #255	@ 0xff
 8014614:	f880 c002 	strb.w	ip, [r0, #2]
 8014618:	7102      	strb	r2, [r0, #4]
 801461a:	80c1      	strh	r1, [r0, #6]
 801461c:	7143      	strb	r3, [r0, #5]
 801461e:	4770      	bx	lr

08014620 <uxr_buffer_create_session>:
 8014620:	b530      	push	{r4, r5, lr}
 8014622:	b089      	sub	sp, #36	@ 0x24
 8014624:	2300      	movs	r3, #0
 8014626:	4d12      	ldr	r5, [pc, #72]	@ (8014670 <uxr_buffer_create_session+0x50>)
 8014628:	9307      	str	r3, [sp, #28]
 801462a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801462e:	2201      	movs	r2, #1
 8014630:	9301      	str	r3, [sp, #4]
 8014632:	80c2      	strh	r2, [r0, #6]
 8014634:	f88d 2004 	strb.w	r2, [sp, #4]
 8014638:	682a      	ldr	r2, [r5, #0]
 801463a:	9200      	str	r2, [sp, #0]
 801463c:	88aa      	ldrh	r2, [r5, #4]
 801463e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014642:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014646:	9202      	str	r2, [sp, #8]
 8014648:	460c      	mov	r4, r1
 801464a:	7802      	ldrb	r2, [r0, #0]
 801464c:	9303      	str	r3, [sp, #12]
 801464e:	4619      	mov	r1, r3
 8014650:	f88d 200c 	strb.w	r2, [sp, #12]
 8014654:	4620      	mov	r0, r4
 8014656:	2210      	movs	r2, #16
 8014658:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801465c:	9306      	str	r3, [sp, #24]
 801465e:	f000 febb 	bl	80153d8 <uxr_buffer_submessage_header>
 8014662:	4669      	mov	r1, sp
 8014664:	4620      	mov	r0, r4
 8014666:	f001 feff 	bl	8016468 <uxr_serialize_CREATE_CLIENT_Payload>
 801466a:	b009      	add	sp, #36	@ 0x24
 801466c:	bd30      	pop	{r4, r5, pc}
 801466e:	bf00      	nop
 8014670:	0801d3b8 	.word	0x0801d3b8

08014674 <uxr_buffer_delete_session>:
 8014674:	b510      	push	{r4, lr}
 8014676:	4b0c      	ldr	r3, [pc, #48]	@ (80146a8 <uxr_buffer_delete_session+0x34>)
 8014678:	b082      	sub	sp, #8
 801467a:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801467e:	f8ad c006 	strh.w	ip, [sp, #6]
 8014682:	460c      	mov	r4, r1
 8014684:	2202      	movs	r2, #2
 8014686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801468a:	80c2      	strh	r2, [r0, #6]
 801468c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014690:	2204      	movs	r2, #4
 8014692:	2300      	movs	r3, #0
 8014694:	2103      	movs	r1, #3
 8014696:	4620      	mov	r0, r4
 8014698:	f000 fe9e 	bl	80153d8 <uxr_buffer_submessage_header>
 801469c:	a901      	add	r1, sp, #4
 801469e:	4620      	mov	r0, r4
 80146a0:	f001 ff9c 	bl	80165dc <uxr_serialize_DELETE_Payload>
 80146a4:	b002      	add	sp, #8
 80146a6:	bd10      	pop	{r4, pc}
 80146a8:	0801d3b8 	.word	0x0801d3b8

080146ac <uxr_read_create_session_status>:
 80146ac:	b510      	push	{r4, lr}
 80146ae:	b088      	sub	sp, #32
 80146b0:	4604      	mov	r4, r0
 80146b2:	4608      	mov	r0, r1
 80146b4:	a901      	add	r1, sp, #4
 80146b6:	f001 ffa1 	bl	80165fc <uxr_deserialize_STATUS_AGENT_Payload>
 80146ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80146be:	7163      	strb	r3, [r4, #5]
 80146c0:	b008      	add	sp, #32
 80146c2:	bd10      	pop	{r4, pc}

080146c4 <uxr_read_delete_session_status>:
 80146c4:	b510      	push	{r4, lr}
 80146c6:	4604      	mov	r4, r0
 80146c8:	b084      	sub	sp, #16
 80146ca:	4608      	mov	r0, r1
 80146cc:	a902      	add	r1, sp, #8
 80146ce:	f001 ffc5 	bl	801665c <uxr_deserialize_STATUS_Payload>
 80146d2:	88e3      	ldrh	r3, [r4, #6]
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d001      	beq.n	80146dc <uxr_read_delete_session_status+0x18>
 80146d8:	b004      	add	sp, #16
 80146da:	bd10      	pop	{r4, pc}
 80146dc:	f10d 000a 	add.w	r0, sp, #10
 80146e0:	f7fe fd9e 	bl	8013220 <uxr_object_id_from_raw>
 80146e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80146e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80146ec:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	2b02      	cmp	r3, #2
 80146f4:	bf04      	itt	eq
 80146f6:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80146fa:	7163      	strbeq	r3, [r4, #5]
 80146fc:	b004      	add	sp, #16
 80146fe:	bd10      	pop	{r4, pc}

08014700 <uxr_stamp_create_session_header>:
 8014700:	b510      	push	{r4, lr}
 8014702:	2208      	movs	r2, #8
 8014704:	b08a      	sub	sp, #40	@ 0x28
 8014706:	4604      	mov	r4, r0
 8014708:	eb0d 0002 	add.w	r0, sp, r2
 801470c:	f7f9 fc0e 	bl	800df2c <ucdr_init_buffer>
 8014710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014714:	9400      	str	r4, [sp, #0]
 8014716:	2300      	movs	r3, #0
 8014718:	461a      	mov	r2, r3
 801471a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801471e:	a802      	add	r0, sp, #8
 8014720:	f001 f854 	bl	80157cc <uxr_serialize_message_header>
 8014724:	b00a      	add	sp, #40	@ 0x28
 8014726:	bd10      	pop	{r4, pc}

08014728 <uxr_stamp_session_header>:
 8014728:	b530      	push	{r4, r5, lr}
 801472a:	b08d      	sub	sp, #52	@ 0x34
 801472c:	4604      	mov	r4, r0
 801472e:	460d      	mov	r5, r1
 8014730:	9203      	str	r2, [sp, #12]
 8014732:	4619      	mov	r1, r3
 8014734:	a804      	add	r0, sp, #16
 8014736:	2208      	movs	r2, #8
 8014738:	f7f9 fbf8 	bl	800df2c <ucdr_init_buffer>
 801473c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014740:	9b03      	ldr	r3, [sp, #12]
 8014742:	9400      	str	r4, [sp, #0]
 8014744:	462a      	mov	r2, r5
 8014746:	a804      	add	r0, sp, #16
 8014748:	f001 f840 	bl	80157cc <uxr_serialize_message_header>
 801474c:	b00d      	add	sp, #52	@ 0x34
 801474e:	bd30      	pop	{r4, r5, pc}

08014750 <uxr_read_session_header>:
 8014750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014754:	4607      	mov	r7, r0
 8014756:	b084      	sub	sp, #16
 8014758:	4608      	mov	r0, r1
 801475a:	460c      	mov	r4, r1
 801475c:	4615      	mov	r5, r2
 801475e:	461e      	mov	r6, r3
 8014760:	f7f9 fc14 	bl	800df8c <ucdr_buffer_remaining>
 8014764:	2808      	cmp	r0, #8
 8014766:	d803      	bhi.n	8014770 <uxr_read_session_header+0x20>
 8014768:	2000      	movs	r0, #0
 801476a:	b004      	add	sp, #16
 801476c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014770:	f10d 080c 	add.w	r8, sp, #12
 8014774:	4633      	mov	r3, r6
 8014776:	462a      	mov	r2, r5
 8014778:	f8cd 8000 	str.w	r8, [sp]
 801477c:	4620      	mov	r0, r4
 801477e:	f10d 010b 	add.w	r1, sp, #11
 8014782:	f001 f841 	bl	8015808 <uxr_deserialize_message_header>
 8014786:	783a      	ldrb	r2, [r7, #0]
 8014788:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801478c:	4293      	cmp	r3, r2
 801478e:	d1eb      	bne.n	8014768 <uxr_read_session_header+0x18>
 8014790:	061b      	lsls	r3, r3, #24
 8014792:	d41c      	bmi.n	80147ce <uxr_read_session_header+0x7e>
 8014794:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014798:	787b      	ldrb	r3, [r7, #1]
 801479a:	429a      	cmp	r2, r3
 801479c:	d003      	beq.n	80147a6 <uxr_read_session_header+0x56>
 801479e:	2001      	movs	r0, #1
 80147a0:	f080 0001 	eor.w	r0, r0, #1
 80147a4:	e7e1      	b.n	801476a <uxr_read_session_header+0x1a>
 80147a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80147aa:	78bb      	ldrb	r3, [r7, #2]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	f107 0102 	add.w	r1, r7, #2
 80147b2:	d1f4      	bne.n	801479e <uxr_read_session_header+0x4e>
 80147b4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80147b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80147bc:	429a      	cmp	r2, r3
 80147be:	d1ee      	bne.n	801479e <uxr_read_session_header+0x4e>
 80147c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80147c4:	784b      	ldrb	r3, [r1, #1]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d1e9      	bne.n	801479e <uxr_read_session_header+0x4e>
 80147ca:	2000      	movs	r0, #0
 80147cc:	e7e8      	b.n	80147a0 <uxr_read_session_header+0x50>
 80147ce:	2001      	movs	r0, #1
 80147d0:	e7cb      	b.n	801476a <uxr_read_session_header+0x1a>
 80147d2:	bf00      	nop

080147d4 <uxr_session_header_offset>:
 80147d4:	f990 3000 	ldrsb.w	r3, [r0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	bfac      	ite	ge
 80147dc:	2008      	movge	r0, #8
 80147de:	2004      	movlt	r0, #4
 80147e0:	4770      	bx	lr
 80147e2:	bf00      	nop

080147e4 <uxr_init_base_object_request>:
 80147e4:	b510      	push	{r4, lr}
 80147e6:	88c3      	ldrh	r3, [r0, #6]
 80147e8:	b082      	sub	sp, #8
 80147ea:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80147ee:	9101      	str	r1, [sp, #4]
 80147f0:	f1a3 010a 	sub.w	r1, r3, #10
 80147f4:	b289      	uxth	r1, r1
 80147f6:	42a1      	cmp	r1, r4
 80147f8:	d80e      	bhi.n	8014818 <uxr_init_base_object_request+0x34>
 80147fa:	3301      	adds	r3, #1
 80147fc:	b29c      	uxth	r4, r3
 80147fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014802:	b2db      	uxtb	r3, r3
 8014804:	80c4      	strh	r4, [r0, #6]
 8014806:	9801      	ldr	r0, [sp, #4]
 8014808:	7011      	strb	r1, [r2, #0]
 801480a:	7053      	strb	r3, [r2, #1]
 801480c:	1c91      	adds	r1, r2, #2
 801480e:	f7fe fd1b 	bl	8013248 <uxr_object_id_to_raw>
 8014812:	4620      	mov	r0, r4
 8014814:	b002      	add	sp, #8
 8014816:	bd10      	pop	{r4, pc}
 8014818:	230a      	movs	r3, #10
 801481a:	2100      	movs	r1, #0
 801481c:	461c      	mov	r4, r3
 801481e:	e7f1      	b.n	8014804 <uxr_init_base_object_request+0x20>

08014820 <uxr_parse_base_object_request>:
 8014820:	b570      	push	{r4, r5, r6, lr}
 8014822:	4604      	mov	r4, r0
 8014824:	3002      	adds	r0, #2
 8014826:	460d      	mov	r5, r1
 8014828:	4616      	mov	r6, r2
 801482a:	f7fe fcf9 	bl	8013220 <uxr_object_id_from_raw>
 801482e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8014832:	8028      	strh	r0, [r5, #0]
 8014834:	806b      	strh	r3, [r5, #2]
 8014836:	7822      	ldrb	r2, [r4, #0]
 8014838:	7863      	ldrb	r3, [r4, #1]
 801483a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801483e:	8033      	strh	r3, [r6, #0]
 8014840:	bd70      	pop	{r4, r5, r6, pc}
 8014842:	bf00      	nop

08014844 <uxr_init_framing_io>:
 8014844:	2300      	movs	r3, #0
 8014846:	7041      	strb	r1, [r0, #1]
 8014848:	7003      	strb	r3, [r0, #0]
 801484a:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop

08014850 <uxr_write_framed_msg>:
 8014850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014854:	4617      	mov	r7, r2
 8014856:	7842      	ldrb	r2, [r0, #1]
 8014858:	b083      	sub	sp, #12
 801485a:	460e      	mov	r6, r1
 801485c:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8014860:	469a      	mov	sl, r3
 8014862:	2901      	cmp	r1, #1
 8014864:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8014868:	4604      	mov	r4, r0
 801486a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801486e:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8014872:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8014876:	f240 8137 	bls.w	8014ae8 <uxr_write_framed_msg+0x298>
 801487a:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801487e:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8014882:	2901      	cmp	r1, #1
 8014884:	f04f 0202 	mov.w	r2, #2
 8014888:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801488c:	f240 808f 	bls.w	80149ae <uxr_write_framed_msg+0x15e>
 8014890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014892:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8014896:	b2dd      	uxtb	r5, r3
 8014898:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801489c:	2203      	movs	r2, #3
 801489e:	2901      	cmp	r1, #1
 80148a0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148a4:	f240 809a 	bls.w	80149dc <uxr_write_framed_msg+0x18c>
 80148a8:	18a1      	adds	r1, r4, r2
 80148aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80148ac:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80148b0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80148b4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80148b8:	3201      	adds	r2, #1
 80148ba:	2801      	cmp	r0, #1
 80148bc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148c0:	f240 80a0 	bls.w	8014a04 <uxr_write_framed_msg+0x1b4>
 80148c4:	18a0      	adds	r0, r4, r2
 80148c6:	3201      	adds	r2, #1
 80148c8:	b2d2      	uxtb	r2, r2
 80148ca:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80148ce:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	f000 80a9 	beq.w	8014a2a <uxr_write_framed_msg+0x1da>
 80148d8:	f04f 0900 	mov.w	r9, #0
 80148dc:	46c8      	mov	r8, r9
 80148de:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80148e2:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80148e6:	2901      	cmp	r1, #1
 80148e8:	f240 80c3 	bls.w	8014a72 <uxr_write_framed_msg+0x222>
 80148ec:	2a29      	cmp	r2, #41	@ 0x29
 80148ee:	f200 809f 	bhi.w	8014a30 <uxr_write_framed_msg+0x1e0>
 80148f2:	18a1      	adds	r1, r4, r2
 80148f4:	3201      	adds	r2, #1
 80148f6:	b2d2      	uxtb	r2, r2
 80148f8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80148fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014900:	ea89 0303 	eor.w	r3, r9, r3
 8014904:	498c      	ldr	r1, [pc, #560]	@ (8014b38 <uxr_write_framed_msg+0x2e8>)
 8014906:	b2db      	uxtb	r3, r3
 8014908:	f108 0801 	add.w	r8, r8, #1
 801490c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014910:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8014914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014916:	4543      	cmp	r3, r8
 8014918:	d8e1      	bhi.n	80148de <uxr_write_framed_msg+0x8e>
 801491a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801491e:	fa5f f889 	uxtb.w	r8, r9
 8014922:	9301      	str	r3, [sp, #4]
 8014924:	f04f 0900 	mov.w	r9, #0
 8014928:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801492c:	fa5f f18a 	uxtb.w	r1, sl
 8014930:	2901      	cmp	r1, #1
 8014932:	d921      	bls.n	8014978 <uxr_write_framed_msg+0x128>
 8014934:	2a29      	cmp	r2, #41	@ 0x29
 8014936:	f240 80af 	bls.w	8014a98 <uxr_write_framed_msg+0x248>
 801493a:	2500      	movs	r5, #0
 801493c:	e000      	b.n	8014940 <uxr_write_framed_msg+0xf0>
 801493e:	b160      	cbz	r0, 801495a <uxr_write_framed_msg+0x10a>
 8014940:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014944:	1b52      	subs	r2, r2, r5
 8014946:	465b      	mov	r3, fp
 8014948:	4421      	add	r1, r4
 801494a:	4638      	mov	r0, r7
 801494c:	47b0      	blx	r6
 801494e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014952:	4405      	add	r5, r0
 8014954:	4295      	cmp	r5, r2
 8014956:	d3f2      	bcc.n	801493e <uxr_write_framed_msg+0xee>
 8014958:	d003      	beq.n	8014962 <uxr_write_framed_msg+0x112>
 801495a:	2000      	movs	r0, #0
 801495c:	b003      	add	sp, #12
 801495e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014962:	fa5f f18a 	uxtb.w	r1, sl
 8014966:	f04f 0300 	mov.w	r3, #0
 801496a:	2901      	cmp	r1, #1
 801496c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014970:	f04f 0200 	mov.w	r2, #0
 8014974:	f200 8090 	bhi.w	8014a98 <uxr_write_framed_msg+0x248>
 8014978:	1c51      	adds	r1, r2, #1
 801497a:	b2c9      	uxtb	r1, r1
 801497c:	2929      	cmp	r1, #41	@ 0x29
 801497e:	d8dc      	bhi.n	801493a <uxr_write_framed_msg+0xea>
 8014980:	18a5      	adds	r5, r4, r2
 8014982:	4421      	add	r1, r4
 8014984:	3202      	adds	r2, #2
 8014986:	f088 0820 	eor.w	r8, r8, #32
 801498a:	4648      	mov	r0, r9
 801498c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8014990:	b2d2      	uxtb	r2, r2
 8014992:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8014996:	f04f 0901 	mov.w	r9, #1
 801499a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801499e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149a2:	2800      	cmp	r0, #0
 80149a4:	f040 8085 	bne.w	8014ab2 <uxr_write_framed_msg+0x262>
 80149a8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80149ac:	e7bc      	b.n	8014928 <uxr_write_framed_msg+0xd8>
 80149ae:	4611      	mov	r1, r2
 80149b0:	f04f 0c03 	mov.w	ip, #3
 80149b4:	2204      	movs	r2, #4
 80149b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149b8:	4421      	add	r1, r4
 80149ba:	b2dd      	uxtb	r5, r3
 80149bc:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80149c0:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80149c4:	44a4      	add	ip, r4
 80149c6:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80149ca:	f080 0020 	eor.w	r0, r0, #32
 80149ce:	2901      	cmp	r1, #1
 80149d0:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80149d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80149d8:	f63f af66 	bhi.w	80148a8 <uxr_write_framed_msg+0x58>
 80149dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80149de:	18a0      	adds	r0, r4, r2
 80149e0:	f085 0520 	eor.w	r5, r5, #32
 80149e4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80149e8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80149ec:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80149f0:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80149f4:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80149f8:	3202      	adds	r2, #2
 80149fa:	2801      	cmp	r0, #1
 80149fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a00:	f63f af60 	bhi.w	80148c4 <uxr_write_framed_msg+0x74>
 8014a04:	1c50      	adds	r0, r2, #1
 8014a06:	18a5      	adds	r5, r4, r2
 8014a08:	fa54 f080 	uxtab	r0, r4, r0
 8014a0c:	3202      	adds	r2, #2
 8014a0e:	f081 0120 	eor.w	r1, r1, #32
 8014a12:	b2d2      	uxtb	r2, r2
 8014a14:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8014a18:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8014a1c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014a20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	f47f af57 	bne.w	80148d8 <uxr_write_framed_msg+0x88>
 8014a2a:	9301      	str	r3, [sp, #4]
 8014a2c:	4698      	mov	r8, r3
 8014a2e:	e779      	b.n	8014924 <uxr_write_framed_msg+0xd4>
 8014a30:	2500      	movs	r5, #0
 8014a32:	e001      	b.n	8014a38 <uxr_write_framed_msg+0x1e8>
 8014a34:	2800      	cmp	r0, #0
 8014a36:	d090      	beq.n	801495a <uxr_write_framed_msg+0x10a>
 8014a38:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014a3c:	1b52      	subs	r2, r2, r5
 8014a3e:	465b      	mov	r3, fp
 8014a40:	4421      	add	r1, r4
 8014a42:	4638      	mov	r0, r7
 8014a44:	47b0      	blx	r6
 8014a46:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014a4a:	4405      	add	r5, r0
 8014a4c:	4295      	cmp	r5, r2
 8014a4e:	d3f1      	bcc.n	8014a34 <uxr_write_framed_msg+0x1e4>
 8014a50:	d183      	bne.n	801495a <uxr_write_framed_msg+0x10a>
 8014a52:	f04f 0300 	mov.w	r3, #0
 8014a56:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014a5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a5c:	4543      	cmp	r3, r8
 8014a5e:	d964      	bls.n	8014b2a <uxr_write_framed_msg+0x2da>
 8014a60:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8014a64:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8014a68:	2901      	cmp	r1, #1
 8014a6a:	f04f 0200 	mov.w	r2, #0
 8014a6e:	f63f af3d 	bhi.w	80148ec <uxr_write_framed_msg+0x9c>
 8014a72:	1c51      	adds	r1, r2, #1
 8014a74:	b2c9      	uxtb	r1, r1
 8014a76:	2929      	cmp	r1, #41	@ 0x29
 8014a78:	d8da      	bhi.n	8014a30 <uxr_write_framed_msg+0x1e0>
 8014a7a:	18a0      	adds	r0, r4, r2
 8014a7c:	4421      	add	r1, r4
 8014a7e:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8014a82:	3202      	adds	r2, #2
 8014a84:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8014a88:	b2d2      	uxtb	r2, r2
 8014a8a:	f083 0020 	eor.w	r0, r3, #32
 8014a8e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8014a92:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014a96:	e733      	b.n	8014900 <uxr_write_framed_msg+0xb0>
 8014a98:	18a1      	adds	r1, r4, r2
 8014a9a:	3201      	adds	r2, #1
 8014a9c:	4648      	mov	r0, r9
 8014a9e:	b2d2      	uxtb	r2, r2
 8014aa0:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8014aa4:	f04f 0901 	mov.w	r9, #1
 8014aa8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014aac:	2800      	cmp	r0, #0
 8014aae:	f43f af7b 	beq.w	80149a8 <uxr_write_framed_msg+0x158>
 8014ab2:	2500      	movs	r5, #0
 8014ab4:	e002      	b.n	8014abc <uxr_write_framed_msg+0x26c>
 8014ab6:	2800      	cmp	r0, #0
 8014ab8:	f43f af4f 	beq.w	801495a <uxr_write_framed_msg+0x10a>
 8014abc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8014ac0:	1b52      	subs	r2, r2, r5
 8014ac2:	465b      	mov	r3, fp
 8014ac4:	4421      	add	r1, r4
 8014ac6:	4638      	mov	r0, r7
 8014ac8:	47b0      	blx	r6
 8014aca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8014ace:	4405      	add	r5, r0
 8014ad0:	4295      	cmp	r5, r2
 8014ad2:	d3f0      	bcc.n	8014ab6 <uxr_write_framed_msg+0x266>
 8014ad4:	f47f af41 	bne.w	801495a <uxr_write_framed_msg+0x10a>
 8014ad8:	2300      	movs	r3, #0
 8014ada:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8014ade:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014ae0:	b298      	uxth	r0, r3
 8014ae2:	b003      	add	sp, #12
 8014ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ae8:	217d      	movs	r1, #125	@ 0x7d
 8014aea:	f082 0220 	eor.w	r2, r2, #32
 8014aee:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8014af2:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8014af6:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8014afa:	2901      	cmp	r1, #1
 8014afc:	f04f 0203 	mov.w	r2, #3
 8014b00:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b04:	d804      	bhi.n	8014b10 <uxr_write_framed_msg+0x2c0>
 8014b06:	4611      	mov	r1, r2
 8014b08:	f04f 0c04 	mov.w	ip, #4
 8014b0c:	2205      	movs	r2, #5
 8014b0e:	e752      	b.n	80149b6 <uxr_write_framed_msg+0x166>
 8014b10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014b12:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8014b16:	b2dd      	uxtb	r5, r3
 8014b18:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8014b1c:	2204      	movs	r2, #4
 8014b1e:	2901      	cmp	r1, #1
 8014b20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8014b24:	f63f aec0 	bhi.w	80148a8 <uxr_write_framed_msg+0x58>
 8014b28:	e758      	b.n	80149dc <uxr_write_framed_msg+0x18c>
 8014b2a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8014b2e:	fa5f f889 	uxtb.w	r8, r9
 8014b32:	9301      	str	r3, [sp, #4]
 8014b34:	2200      	movs	r2, #0
 8014b36:	e6f5      	b.n	8014924 <uxr_write_framed_msg+0xd4>
 8014b38:	0801e08c 	.word	0x0801e08c

08014b3c <uxr_framing_read_transport>:
 8014b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b40:	4604      	mov	r4, r0
 8014b42:	b083      	sub	sp, #12
 8014b44:	461f      	mov	r7, r3
 8014b46:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8014b4a:	4689      	mov	r9, r1
 8014b4c:	4692      	mov	sl, r2
 8014b4e:	f000 fc89 	bl	8015464 <uxr_millis>
 8014b52:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014b56:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8014b5a:	42b3      	cmp	r3, r6
 8014b5c:	4680      	mov	r8, r0
 8014b5e:	d061      	beq.n	8014c24 <uxr_framing_read_transport+0xe8>
 8014b60:	d81c      	bhi.n	8014b9c <uxr_framing_read_transport+0x60>
 8014b62:	1e75      	subs	r5, r6, #1
 8014b64:	1aed      	subs	r5, r5, r3
 8014b66:	b2ed      	uxtb	r5, r5
 8014b68:	2600      	movs	r6, #0
 8014b6a:	455d      	cmp	r5, fp
 8014b6c:	d81f      	bhi.n	8014bae <uxr_framing_read_transport+0x72>
 8014b6e:	19ab      	adds	r3, r5, r6
 8014b70:	455b      	cmp	r3, fp
 8014b72:	bf84      	itt	hi
 8014b74:	ebab 0605 	subhi.w	r6, fp, r5
 8014b78:	b2f6      	uxtbhi	r6, r6
 8014b7a:	b9ed      	cbnz	r5, 8014bb8 <uxr_framing_read_transport+0x7c>
 8014b7c:	f04f 0b00 	mov.w	fp, #0
 8014b80:	f000 fc70 	bl	8015464 <uxr_millis>
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	eba0 0808 	sub.w	r8, r0, r8
 8014b8a:	eba3 0308 	sub.w	r3, r3, r8
 8014b8e:	4658      	mov	r0, fp
 8014b90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b94:	603b      	str	r3, [r7, #0]
 8014b96:	b003      	add	sp, #12
 8014b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b9c:	2e00      	cmp	r6, #0
 8014b9e:	d049      	beq.n	8014c34 <uxr_framing_read_transport+0xf8>
 8014ba0:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8014ba4:	b2ed      	uxtb	r5, r5
 8014ba6:	3e01      	subs	r6, #1
 8014ba8:	455d      	cmp	r5, fp
 8014baa:	b2f6      	uxtb	r6, r6
 8014bac:	d9df      	bls.n	8014b6e <uxr_framing_read_transport+0x32>
 8014bae:	fa5f f58b 	uxtb.w	r5, fp
 8014bb2:	2600      	movs	r6, #0
 8014bb4:	2d00      	cmp	r5, #0
 8014bb6:	d0e1      	beq.n	8014b7c <uxr_framing_read_transport+0x40>
 8014bb8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014bbc:	3102      	adds	r1, #2
 8014bbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bc0:	9300      	str	r3, [sp, #0]
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	4421      	add	r1, r4
 8014bc6:	462a      	mov	r2, r5
 8014bc8:	4650      	mov	r0, sl
 8014bca:	47c8      	blx	r9
 8014bcc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8014c3c <uxr_framing_read_transport+0x100>)
 8014bd2:	4403      	add	r3, r0
 8014bd4:	0859      	lsrs	r1, r3, #1
 8014bd6:	fba2 2101 	umull	r2, r1, r2, r1
 8014bda:	0889      	lsrs	r1, r1, #2
 8014bdc:	222a      	movs	r2, #42	@ 0x2a
 8014bde:	fb02 3111 	mls	r1, r2, r1, r3
 8014be2:	4683      	mov	fp, r0
 8014be4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8014be8:	2800      	cmp	r0, #0
 8014bea:	d0c7      	beq.n	8014b7c <uxr_framing_read_transport+0x40>
 8014bec:	42a8      	cmp	r0, r5
 8014bee:	d1c7      	bne.n	8014b80 <uxr_framing_read_transport+0x44>
 8014bf0:	2e00      	cmp	r6, #0
 8014bf2:	d0c5      	beq.n	8014b80 <uxr_framing_read_transport+0x44>
 8014bf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014bf6:	9300      	str	r3, [sp, #0]
 8014bf8:	3102      	adds	r1, #2
 8014bfa:	4632      	mov	r2, r6
 8014bfc:	4421      	add	r1, r4
 8014bfe:	2300      	movs	r3, #0
 8014c00:	4650      	mov	r0, sl
 8014c02:	47c8      	blx	r9
 8014c04:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014c08:	4a0c      	ldr	r2, [pc, #48]	@ (8014c3c <uxr_framing_read_transport+0x100>)
 8014c0a:	180b      	adds	r3, r1, r0
 8014c0c:	0859      	lsrs	r1, r3, #1
 8014c0e:	fba2 1201 	umull	r1, r2, r2, r1
 8014c12:	0892      	lsrs	r2, r2, #2
 8014c14:	212a      	movs	r1, #42	@ 0x2a
 8014c16:	fb01 3312 	mls	r3, r1, r2, r3
 8014c1a:	eb00 0b05 	add.w	fp, r0, r5
 8014c1e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8014c22:	e7ad      	b.n	8014b80 <uxr_framing_read_transport+0x44>
 8014c24:	2600      	movs	r6, #0
 8014c26:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8014c2a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8014c2c:	d9bf      	bls.n	8014bae <uxr_framing_read_transport+0x72>
 8014c2e:	2102      	movs	r1, #2
 8014c30:	2529      	movs	r5, #41	@ 0x29
 8014c32:	e7c4      	b.n	8014bbe <uxr_framing_read_transport+0x82>
 8014c34:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8014c38:	b2ed      	uxtb	r5, r5
 8014c3a:	e796      	b.n	8014b6a <uxr_framing_read_transport+0x2e>
 8014c3c:	30c30c31 	.word	0x30c30c31

08014c40 <uxr_read_framed_msg>:
 8014c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c44:	461e      	mov	r6, r3
 8014c46:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8014c4a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8014c4e:	429d      	cmp	r5, r3
 8014c50:	b083      	sub	sp, #12
 8014c52:	4604      	mov	r4, r0
 8014c54:	4688      	mov	r8, r1
 8014c56:	4691      	mov	r9, r2
 8014c58:	f000 8188 	beq.w	8014f6c <uxr_read_framed_msg+0x32c>
 8014c5c:	7823      	ldrb	r3, [r4, #0]
 8014c5e:	4dc1      	ldr	r5, [pc, #772]	@ (8014f64 <uxr_read_framed_msg+0x324>)
 8014c60:	4fc1      	ldr	r7, [pc, #772]	@ (8014f68 <uxr_read_framed_msg+0x328>)
 8014c62:	2b07      	cmp	r3, #7
 8014c64:	d8fd      	bhi.n	8014c62 <uxr_read_framed_msg+0x22>
 8014c66:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014c6a:	0115      	.short	0x0115
 8014c6c:	00d600f6 	.word	0x00d600f6
 8014c70:	009000b9 	.word	0x009000b9
 8014c74:	0030004d 	.word	0x0030004d
 8014c78:	0008      	.short	0x0008
 8014c7a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014c7e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014c82:	4299      	cmp	r1, r3
 8014c84:	f000 814a 	beq.w	8014f1c <uxr_read_framed_msg+0x2dc>
 8014c88:	18e2      	adds	r2, r4, r3
 8014c8a:	7892      	ldrb	r2, [r2, #2]
 8014c8c:	2a7d      	cmp	r2, #125	@ 0x7d
 8014c8e:	f000 8199 	beq.w	8014fc4 <uxr_read_framed_msg+0x384>
 8014c92:	3301      	adds	r3, #1
 8014c94:	0858      	lsrs	r0, r3, #1
 8014c96:	fba5 1000 	umull	r1, r0, r5, r0
 8014c9a:	0880      	lsrs	r0, r0, #2
 8014c9c:	212a      	movs	r1, #42	@ 0x2a
 8014c9e:	fb01 3310 	mls	r3, r1, r0, r3
 8014ca2:	2a7e      	cmp	r2, #126	@ 0x7e
 8014ca4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014ca8:	f000 8252 	beq.w	8015150 <uxr_read_framed_msg+0x510>
 8014cac:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014cae:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8014cb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	4299      	cmp	r1, r3
 8014cba:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8014cbc:	7022      	strb	r2, [r4, #0]
 8014cbe:	f000 8179 	beq.w	8014fb4 <uxr_read_framed_msg+0x374>
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	b003      	add	sp, #12
 8014cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cca:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014cce:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014cd2:	4299      	cmp	r1, r3
 8014cd4:	f000 8131 	beq.w	8014f3a <uxr_read_framed_msg+0x2fa>
 8014cd8:	18e2      	adds	r2, r4, r3
 8014cda:	7890      	ldrb	r0, [r2, #2]
 8014cdc:	287d      	cmp	r0, #125	@ 0x7d
 8014cde:	f000 8190 	beq.w	8015002 <uxr_read_framed_msg+0x3c2>
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	085a      	lsrs	r2, r3, #1
 8014ce6:	fba5 1202 	umull	r1, r2, r5, r2
 8014cea:	0892      	lsrs	r2, r2, #2
 8014cec:	212a      	movs	r1, #42	@ 0x2a
 8014cee:	fb01 3312 	mls	r3, r1, r2, r3
 8014cf2:	287e      	cmp	r0, #126	@ 0x7e
 8014cf4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014cf8:	f000 821a 	beq.w	8015130 <uxr_read_framed_msg+0x4f0>
 8014cfc:	2307      	movs	r3, #7
 8014cfe:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8014d00:	7023      	strb	r3, [r4, #0]
 8014d02:	e7ae      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014d04:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014d06:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014d0a:	459e      	cmp	lr, r3
 8014d0c:	d938      	bls.n	8014d80 <uxr_read_framed_msg+0x140>
 8014d0e:	ee07 8a90 	vmov	s15, r8
 8014d12:	212a      	movs	r1, #42	@ 0x2a
 8014d14:	e020      	b.n	8014d58 <uxr_read_framed_msg+0x118>
 8014d16:	f89b c002 	ldrb.w	ip, [fp, #2]
 8014d1a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8014d1e:	f000 80d4 	beq.w	8014eca <uxr_read_framed_msg+0x28a>
 8014d22:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014d26:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014d2a:	f000 8219 	beq.w	8015160 <uxr_read_framed_msg+0x520>
 8014d2e:	f806 c003 	strb.w	ip, [r6, r3]
 8014d32:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8014d36:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8014d38:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8014d3c:	ea8a 000c 	eor.w	r0, sl, ip
 8014d40:	b2c0      	uxtb	r0, r0
 8014d42:	3301      	adds	r3, #1
 8014d44:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8014d4e:	4573      	cmp	r3, lr
 8014d50:	8663      	strh	r3, [r4, #50]	@ 0x32
 8014d52:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8014d54:	f080 8120 	bcs.w	8014f98 <uxr_read_framed_msg+0x358>
 8014d58:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8014d5c:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014d60:	f100 0c01 	add.w	ip, r0, #1
 8014d64:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014d68:	fba5 8202 	umull	r8, r2, r5, r2
 8014d6c:	0892      	lsrs	r2, r2, #2
 8014d6e:	4582      	cmp	sl, r0
 8014d70:	eb04 0b00 	add.w	fp, r4, r0
 8014d74:	fb01 c212 	mls	r2, r1, r2, ip
 8014d78:	d1cd      	bne.n	8014d16 <uxr_read_framed_msg+0xd6>
 8014d7a:	ee17 8a90 	vmov	r8, s15
 8014d7e:	459e      	cmp	lr, r3
 8014d80:	f040 8111 	bne.w	8014fa6 <uxr_read_framed_msg+0x366>
 8014d84:	2306      	movs	r3, #6
 8014d86:	7023      	strb	r3, [r4, #0]
 8014d88:	e76b      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014d8a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014d8e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014d92:	4298      	cmp	r0, r3
 8014d94:	f000 80c2 	beq.w	8014f1c <uxr_read_framed_msg+0x2dc>
 8014d98:	18e2      	adds	r2, r4, r3
 8014d9a:	7891      	ldrb	r1, [r2, #2]
 8014d9c:	297d      	cmp	r1, #125	@ 0x7d
 8014d9e:	f000 814c 	beq.w	801503a <uxr_read_framed_msg+0x3fa>
 8014da2:	3301      	adds	r3, #1
 8014da4:	085a      	lsrs	r2, r3, #1
 8014da6:	fba5 0202 	umull	r0, r2, r5, r2
 8014daa:	0892      	lsrs	r2, r2, #2
 8014dac:	202a      	movs	r0, #42	@ 0x2a
 8014dae:	fb00 3312 	mls	r3, r0, r2, r3
 8014db2:	297e      	cmp	r1, #126	@ 0x7e
 8014db4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014db8:	f000 81ca 	beq.w	8015150 <uxr_read_framed_msg+0x510>
 8014dbc:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8014dbe:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014dc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	2000      	movs	r0, #0
 8014dc8:	428b      	cmp	r3, r1
 8014dca:	8623      	strh	r3, [r4, #48]	@ 0x30
 8014dcc:	8660      	strh	r0, [r4, #50]	@ 0x32
 8014dce:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014dd0:	f240 80df 	bls.w	8014f92 <uxr_read_framed_msg+0x352>
 8014dd4:	7020      	strb	r0, [r4, #0]
 8014dd6:	b003      	add	sp, #12
 8014dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ddc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014de0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014de4:	4299      	cmp	r1, r3
 8014de6:	f000 80a8 	beq.w	8014f3a <uxr_read_framed_msg+0x2fa>
 8014dea:	18e2      	adds	r2, r4, r3
 8014dec:	7890      	ldrb	r0, [r2, #2]
 8014dee:	287d      	cmp	r0, #125	@ 0x7d
 8014df0:	f000 8164 	beq.w	80150bc <uxr_read_framed_msg+0x47c>
 8014df4:	3301      	adds	r3, #1
 8014df6:	085a      	lsrs	r2, r3, #1
 8014df8:	fba5 1202 	umull	r1, r2, r5, r2
 8014dfc:	0892      	lsrs	r2, r2, #2
 8014dfe:	212a      	movs	r1, #42	@ 0x2a
 8014e00:	fb01 3312 	mls	r3, r1, r2, r3
 8014e04:	287e      	cmp	r0, #126	@ 0x7e
 8014e06:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014e0a:	f000 8191 	beq.w	8015130 <uxr_read_framed_msg+0x4f0>
 8014e0e:	2304      	movs	r3, #4
 8014e10:	8620      	strh	r0, [r4, #48]	@ 0x30
 8014e12:	7023      	strb	r3, [r4, #0]
 8014e14:	e725      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014e16:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8014e1a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014e1e:	4290      	cmp	r0, r2
 8014e20:	f000 80b3 	beq.w	8014f8a <uxr_read_framed_msg+0x34a>
 8014e24:	18a3      	adds	r3, r4, r2
 8014e26:	7899      	ldrb	r1, [r3, #2]
 8014e28:	297d      	cmp	r1, #125	@ 0x7d
 8014e2a:	f000 8164 	beq.w	80150f6 <uxr_read_framed_msg+0x4b6>
 8014e2e:	3201      	adds	r2, #1
 8014e30:	0850      	lsrs	r0, r2, #1
 8014e32:	fba5 3000 	umull	r3, r0, r5, r0
 8014e36:	0880      	lsrs	r0, r0, #2
 8014e38:	232a      	movs	r3, #42	@ 0x2a
 8014e3a:	fb03 2210 	mls	r2, r3, r0, r2
 8014e3e:	297e      	cmp	r1, #126	@ 0x7e
 8014e40:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014e44:	f000 8188 	beq.w	8015158 <uxr_read_framed_msg+0x518>
 8014e48:	7863      	ldrb	r3, [r4, #1]
 8014e4a:	428b      	cmp	r3, r1
 8014e4c:	bf0c      	ite	eq
 8014e4e:	2303      	moveq	r3, #3
 8014e50:	2300      	movne	r3, #0
 8014e52:	7023      	strb	r3, [r4, #0]
 8014e54:	e705      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014e56:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8014e5a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8014e5e:	2200      	movs	r2, #0
 8014e60:	4299      	cmp	r1, r3
 8014e62:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8014e66:	d06c      	beq.n	8014f42 <uxr_read_framed_msg+0x302>
 8014e68:	18e2      	adds	r2, r4, r3
 8014e6a:	7890      	ldrb	r0, [r2, #2]
 8014e6c:	287d      	cmp	r0, #125	@ 0x7d
 8014e6e:	f000 8101 	beq.w	8015074 <uxr_read_framed_msg+0x434>
 8014e72:	3301      	adds	r3, #1
 8014e74:	085a      	lsrs	r2, r3, #1
 8014e76:	fba5 1202 	umull	r1, r2, r5, r2
 8014e7a:	0892      	lsrs	r2, r2, #2
 8014e7c:	212a      	movs	r1, #42	@ 0x2a
 8014e7e:	fb01 3312 	mls	r3, r1, r2, r3
 8014e82:	287e      	cmp	r0, #126	@ 0x7e
 8014e84:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8014e88:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014e8c:	d059      	beq.n	8014f42 <uxr_read_framed_msg+0x302>
 8014e8e:	2302      	movs	r3, #2
 8014e90:	7023      	strb	r3, [r4, #0]
 8014e92:	e6e6      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014e94:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8014e98:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014e9c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8014ea0:	1c51      	adds	r1, r2, #1
 8014ea2:	084b      	lsrs	r3, r1, #1
 8014ea4:	fba5 c303 	umull	ip, r3, r5, r3
 8014ea8:	089b      	lsrs	r3, r3, #2
 8014eaa:	fb0e 1313 	mls	r3, lr, r3, r1
 8014eae:	4592      	cmp	sl, r2
 8014eb0:	eb04 0002 	add.w	r0, r4, r2
 8014eb4:	b2da      	uxtb	r2, r3
 8014eb6:	f43f af04 	beq.w	8014cc2 <uxr_read_framed_msg+0x82>
 8014eba:	7883      	ldrb	r3, [r0, #2]
 8014ebc:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014ec0:	2b7e      	cmp	r3, #126	@ 0x7e
 8014ec2:	d1ed      	bne.n	8014ea0 <uxr_read_framed_msg+0x260>
 8014ec4:	2301      	movs	r3, #1
 8014ec6:	7023      	strb	r3, [r4, #0]
 8014ec8:	e6cb      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014eca:	f100 0c01 	add.w	ip, r0, #1
 8014ece:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014ed2:	fba5 8202 	umull	r8, r2, r5, r2
 8014ed6:	0892      	lsrs	r2, r2, #2
 8014ed8:	fb01 c212 	mls	r2, r1, r2, ip
 8014edc:	eb04 0c02 	add.w	ip, r4, r2
 8014ee0:	b2d2      	uxtb	r2, r2
 8014ee2:	4592      	cmp	sl, r2
 8014ee4:	f100 0002 	add.w	r0, r0, #2
 8014ee8:	f43f af47 	beq.w	8014d7a <uxr_read_framed_msg+0x13a>
 8014eec:	0842      	lsrs	r2, r0, #1
 8014eee:	f89c a002 	ldrb.w	sl, [ip, #2]
 8014ef2:	fba5 8202 	umull	r8, r2, r5, r2
 8014ef6:	0892      	lsrs	r2, r2, #2
 8014ef8:	fb01 0012 	mls	r0, r1, r2, r0
 8014efc:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8014f00:	f08a 0c20 	eor.w	ip, sl, #32
 8014f04:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8014f08:	f47f af11 	bne.w	8014d2e <uxr_read_framed_msg+0xee>
 8014f0c:	459e      	cmp	lr, r3
 8014f0e:	ee17 8a90 	vmov	r8, s15
 8014f12:	f43f af37 	beq.w	8014d84 <uxr_read_framed_msg+0x144>
 8014f16:	2301      	movs	r3, #1
 8014f18:	7023      	strb	r3, [r4, #0]
 8014f1a:	e6a2      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f1e:	9300      	str	r3, [sp, #0]
 8014f20:	2301      	movs	r3, #1
 8014f22:	9301      	str	r3, [sp, #4]
 8014f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f26:	464a      	mov	r2, r9
 8014f28:	4641      	mov	r1, r8
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	f7ff fe06 	bl	8014b3c <uxr_framing_read_transport>
 8014f30:	2800      	cmp	r0, #0
 8014f32:	f43f aec6 	beq.w	8014cc2 <uxr_read_framed_msg+0x82>
 8014f36:	7823      	ldrb	r3, [r4, #0]
 8014f38:	e693      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f3c:	9300      	str	r3, [sp, #0]
 8014f3e:	2302      	movs	r3, #2
 8014f40:	e7ef      	b.n	8014f22 <uxr_read_framed_msg+0x2e2>
 8014f42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	2304      	movs	r3, #4
 8014f48:	9301      	str	r3, [sp, #4]
 8014f4a:	464a      	mov	r2, r9
 8014f4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f4e:	4641      	mov	r1, r8
 8014f50:	4620      	mov	r0, r4
 8014f52:	f7ff fdf3 	bl	8014b3c <uxr_framing_read_transport>
 8014f56:	2800      	cmp	r0, #0
 8014f58:	d1ed      	bne.n	8014f36 <uxr_read_framed_msg+0x2f6>
 8014f5a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014f5e:	2b7e      	cmp	r3, #126	@ 0x7e
 8014f60:	d0e9      	beq.n	8014f36 <uxr_read_framed_msg+0x2f6>
 8014f62:	e6ae      	b.n	8014cc2 <uxr_read_framed_msg+0x82>
 8014f64:	30c30c31 	.word	0x30c30c31
 8014f68:	0801e08c 	.word	0x0801e08c
 8014f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f6e:	9300      	str	r3, [sp, #0]
 8014f70:	2305      	movs	r3, #5
 8014f72:	9301      	str	r3, [sp, #4]
 8014f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f76:	f7ff fde1 	bl	8014b3c <uxr_framing_read_transport>
 8014f7a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8014f7e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8014f82:	429a      	cmp	r2, r3
 8014f84:	f43f ae9d 	beq.w	8014cc2 <uxr_read_framed_msg+0x82>
 8014f88:	e668      	b.n	8014c5c <uxr_read_framed_msg+0x1c>
 8014f8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014f8c:	9300      	str	r3, [sp, #0]
 8014f8e:	2303      	movs	r3, #3
 8014f90:	e7c7      	b.n	8014f22 <uxr_read_framed_msg+0x2e2>
 8014f92:	2305      	movs	r3, #5
 8014f94:	7023      	strb	r3, [r4, #0]
 8014f96:	e664      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8014f98:	ee17 8a90 	vmov	r8, s15
 8014f9c:	f43f aef2 	beq.w	8014d84 <uxr_read_framed_msg+0x144>
 8014fa0:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8014fa4:	d08e      	beq.n	8014ec4 <uxr_read_framed_msg+0x284>
 8014fa6:	ebae 0303 	sub.w	r3, lr, r3
 8014faa:	3302      	adds	r3, #2
 8014fac:	9301      	str	r3, [sp, #4]
 8014fae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fb0:	9300      	str	r3, [sp, #0]
 8014fb2:	e7b7      	b.n	8014f24 <uxr_read_framed_msg+0x2e4>
 8014fb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014fb6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014fba:	7013      	strb	r3, [r2, #0]
 8014fbc:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8014fbe:	b003      	add	sp, #12
 8014fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc4:	f103 0c01 	add.w	ip, r3, #1
 8014fc8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014fcc:	fba5 0202 	umull	r0, r2, r5, r2
 8014fd0:	0892      	lsrs	r2, r2, #2
 8014fd2:	202a      	movs	r0, #42	@ 0x2a
 8014fd4:	fb00 c212 	mls	r2, r0, r2, ip
 8014fd8:	fa5f fc82 	uxtb.w	ip, r2
 8014fdc:	4561      	cmp	r1, ip
 8014fde:	d09d      	beq.n	8014f1c <uxr_read_framed_msg+0x2dc>
 8014fe0:	3302      	adds	r3, #2
 8014fe2:	4422      	add	r2, r4
 8014fe4:	0859      	lsrs	r1, r3, #1
 8014fe6:	7892      	ldrb	r2, [r2, #2]
 8014fe8:	fba5 c101 	umull	ip, r1, r5, r1
 8014fec:	0889      	lsrs	r1, r1, #2
 8014fee:	fb00 3311 	mls	r3, r0, r1, r3
 8014ff2:	2a7e      	cmp	r2, #126	@ 0x7e
 8014ff4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014ff8:	f000 80aa 	beq.w	8015150 <uxr_read_framed_msg+0x510>
 8014ffc:	f082 0220 	eor.w	r2, r2, #32
 8015000:	e654      	b.n	8014cac <uxr_read_framed_msg+0x6c>
 8015002:	1c58      	adds	r0, r3, #1
 8015004:	0842      	lsrs	r2, r0, #1
 8015006:	fba5 c202 	umull	ip, r2, r5, r2
 801500a:	0892      	lsrs	r2, r2, #2
 801500c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015010:	fb0c 0212 	mls	r2, ip, r2, r0
 8015014:	b2d0      	uxtb	r0, r2
 8015016:	4281      	cmp	r1, r0
 8015018:	d08f      	beq.n	8014f3a <uxr_read_framed_msg+0x2fa>
 801501a:	4422      	add	r2, r4
 801501c:	3302      	adds	r3, #2
 801501e:	7890      	ldrb	r0, [r2, #2]
 8015020:	085a      	lsrs	r2, r3, #1
 8015022:	fba5 1202 	umull	r1, r2, r5, r2
 8015026:	0892      	lsrs	r2, r2, #2
 8015028:	fb0c 3312 	mls	r3, ip, r2, r3
 801502c:	287e      	cmp	r0, #126	@ 0x7e
 801502e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8015032:	d07d      	beq.n	8015130 <uxr_read_framed_msg+0x4f0>
 8015034:	f080 0020 	eor.w	r0, r0, #32
 8015038:	e660      	b.n	8014cfc <uxr_read_framed_msg+0xbc>
 801503a:	1c59      	adds	r1, r3, #1
 801503c:	084a      	lsrs	r2, r1, #1
 801503e:	fba5 c202 	umull	ip, r2, r5, r2
 8015042:	0892      	lsrs	r2, r2, #2
 8015044:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015048:	fb0c 1212 	mls	r2, ip, r2, r1
 801504c:	b2d1      	uxtb	r1, r2
 801504e:	4288      	cmp	r0, r1
 8015050:	f43f af64 	beq.w	8014f1c <uxr_read_framed_msg+0x2dc>
 8015054:	4422      	add	r2, r4
 8015056:	3302      	adds	r3, #2
 8015058:	7891      	ldrb	r1, [r2, #2]
 801505a:	085a      	lsrs	r2, r3, #1
 801505c:	fba5 0202 	umull	r0, r2, r5, r2
 8015060:	0892      	lsrs	r2, r2, #2
 8015062:	fb0c 3312 	mls	r3, ip, r2, r3
 8015066:	297e      	cmp	r1, #126	@ 0x7e
 8015068:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801506c:	d070      	beq.n	8015150 <uxr_read_framed_msg+0x510>
 801506e:	f081 0120 	eor.w	r1, r1, #32
 8015072:	e6a3      	b.n	8014dbc <uxr_read_framed_msg+0x17c>
 8015074:	f103 0c01 	add.w	ip, r3, #1
 8015078:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801507c:	fba5 0202 	umull	r0, r2, r5, r2
 8015080:	0892      	lsrs	r2, r2, #2
 8015082:	202a      	movs	r0, #42	@ 0x2a
 8015084:	fb00 c212 	mls	r2, r0, r2, ip
 8015088:	fa5f fc82 	uxtb.w	ip, r2
 801508c:	4561      	cmp	r1, ip
 801508e:	f43f af58 	beq.w	8014f42 <uxr_read_framed_msg+0x302>
 8015092:	4422      	add	r2, r4
 8015094:	3302      	adds	r3, #2
 8015096:	7891      	ldrb	r1, [r2, #2]
 8015098:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801509c:	085a      	lsrs	r2, r3, #1
 801509e:	fba5 c202 	umull	ip, r2, r5, r2
 80150a2:	0892      	lsrs	r2, r2, #2
 80150a4:	fb00 3312 	mls	r3, r0, r2, r3
 80150a8:	297e      	cmp	r1, #126	@ 0x7e
 80150aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150ae:	f43f af48 	beq.w	8014f42 <uxr_read_framed_msg+0x302>
 80150b2:	f081 0120 	eor.w	r1, r1, #32
 80150b6:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80150ba:	e6e8      	b.n	8014e8e <uxr_read_framed_msg+0x24e>
 80150bc:	1c58      	adds	r0, r3, #1
 80150be:	0842      	lsrs	r2, r0, #1
 80150c0:	fba5 c202 	umull	ip, r2, r5, r2
 80150c4:	0892      	lsrs	r2, r2, #2
 80150c6:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80150ca:	fb0c 0212 	mls	r2, ip, r2, r0
 80150ce:	b2d0      	uxtb	r0, r2
 80150d0:	4281      	cmp	r1, r0
 80150d2:	f43f af32 	beq.w	8014f3a <uxr_read_framed_msg+0x2fa>
 80150d6:	4422      	add	r2, r4
 80150d8:	3302      	adds	r3, #2
 80150da:	7890      	ldrb	r0, [r2, #2]
 80150dc:	085a      	lsrs	r2, r3, #1
 80150de:	fba5 1202 	umull	r1, r2, r5, r2
 80150e2:	0892      	lsrs	r2, r2, #2
 80150e4:	fb0c 3312 	mls	r3, ip, r2, r3
 80150e8:	287e      	cmp	r0, #126	@ 0x7e
 80150ea:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80150ee:	d01f      	beq.n	8015130 <uxr_read_framed_msg+0x4f0>
 80150f0:	f080 0020 	eor.w	r0, r0, #32
 80150f4:	e68b      	b.n	8014e0e <uxr_read_framed_msg+0x1ce>
 80150f6:	1c51      	adds	r1, r2, #1
 80150f8:	084b      	lsrs	r3, r1, #1
 80150fa:	fba5 c303 	umull	ip, r3, r5, r3
 80150fe:	089b      	lsrs	r3, r3, #2
 8015100:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8015104:	fb0c 1313 	mls	r3, ip, r3, r1
 8015108:	b2d9      	uxtb	r1, r3
 801510a:	4288      	cmp	r0, r1
 801510c:	f43f af3d 	beq.w	8014f8a <uxr_read_framed_msg+0x34a>
 8015110:	3202      	adds	r2, #2
 8015112:	4423      	add	r3, r4
 8015114:	0850      	lsrs	r0, r2, #1
 8015116:	789b      	ldrb	r3, [r3, #2]
 8015118:	fba5 1000 	umull	r1, r0, r5, r0
 801511c:	0880      	lsrs	r0, r0, #2
 801511e:	fb0c 2210 	mls	r2, ip, r0, r2
 8015122:	2b7e      	cmp	r3, #126	@ 0x7e
 8015124:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8015128:	d016      	beq.n	8015158 <uxr_read_framed_msg+0x518>
 801512a:	f083 0120 	eor.w	r1, r3, #32
 801512e:	e68b      	b.n	8014e48 <uxr_read_framed_msg+0x208>
 8015130:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015132:	9300      	str	r3, [sp, #0]
 8015134:	2302      	movs	r3, #2
 8015136:	9301      	str	r3, [sp, #4]
 8015138:	464a      	mov	r2, r9
 801513a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801513c:	4641      	mov	r1, r8
 801513e:	4620      	mov	r0, r4
 8015140:	f7ff fcfc 	bl	8014b3c <uxr_framing_read_transport>
 8015144:	2800      	cmp	r0, #0
 8015146:	f47f aef6 	bne.w	8014f36 <uxr_read_framed_msg+0x2f6>
 801514a:	2301      	movs	r3, #1
 801514c:	7023      	strb	r3, [r4, #0]
 801514e:	e588      	b.n	8014c62 <uxr_read_framed_msg+0x22>
 8015150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015152:	9300      	str	r3, [sp, #0]
 8015154:	2301      	movs	r3, #1
 8015156:	e7ee      	b.n	8015136 <uxr_read_framed_msg+0x4f6>
 8015158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	2303      	movs	r3, #3
 801515e:	e7ea      	b.n	8015136 <uxr_read_framed_msg+0x4f6>
 8015160:	ee17 8a90 	vmov	r8, s15
 8015164:	e6ae      	b.n	8014ec4 <uxr_read_framed_msg+0x284>
 8015166:	bf00      	nop

08015168 <uxr_stream_id>:
 8015168:	2901      	cmp	r1, #1
 801516a:	b082      	sub	sp, #8
 801516c:	d01d      	beq.n	80151aa <uxr_stream_id+0x42>
 801516e:	2902      	cmp	r1, #2
 8015170:	f04f 0c00 	mov.w	ip, #0
 8015174:	d01e      	beq.n	80151b4 <uxr_stream_id+0x4c>
 8015176:	2300      	movs	r3, #0
 8015178:	f36c 0307 	bfi	r3, ip, #0, #8
 801517c:	f360 230f 	bfi	r3, r0, #8, #8
 8015180:	f361 4317 	bfi	r3, r1, #16, #8
 8015184:	f362 631f 	bfi	r3, r2, #24, #8
 8015188:	b2da      	uxtb	r2, r3
 801518a:	2000      	movs	r0, #0
 801518c:	f362 0007 	bfi	r0, r2, #0, #8
 8015190:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015194:	f362 200f 	bfi	r0, r2, #8, #8
 8015198:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801519c:	f362 4017 	bfi	r0, r2, #16, #8
 80151a0:	0e1b      	lsrs	r3, r3, #24
 80151a2:	f363 601f 	bfi	r0, r3, #24, #8
 80151a6:	b002      	add	sp, #8
 80151a8:	4770      	bx	lr
 80151aa:	f100 0c01 	add.w	ip, r0, #1
 80151ae:	fa5f fc8c 	uxtb.w	ip, ip
 80151b2:	e7e0      	b.n	8015176 <uxr_stream_id+0xe>
 80151b4:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80151b8:	e7dd      	b.n	8015176 <uxr_stream_id+0xe>
 80151ba:	bf00      	nop

080151bc <uxr_stream_id_from_raw>:
 80151bc:	b082      	sub	sp, #8
 80151be:	b130      	cbz	r0, 80151ce <uxr_stream_id_from_raw+0x12>
 80151c0:	0603      	lsls	r3, r0, #24
 80151c2:	d420      	bmi.n	8015206 <uxr_stream_id_from_raw+0x4a>
 80151c4:	1e42      	subs	r2, r0, #1
 80151c6:	b2d2      	uxtb	r2, r2
 80151c8:	f04f 0c01 	mov.w	ip, #1
 80151cc:	e001      	b.n	80151d2 <uxr_stream_id_from_raw+0x16>
 80151ce:	4684      	mov	ip, r0
 80151d0:	4602      	mov	r2, r0
 80151d2:	2300      	movs	r3, #0
 80151d4:	f360 0307 	bfi	r3, r0, #0, #8
 80151d8:	f362 230f 	bfi	r3, r2, #8, #8
 80151dc:	f36c 4317 	bfi	r3, ip, #16, #8
 80151e0:	f361 631f 	bfi	r3, r1, #24, #8
 80151e4:	b2da      	uxtb	r2, r3
 80151e6:	2000      	movs	r0, #0
 80151e8:	f362 0007 	bfi	r0, r2, #0, #8
 80151ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80151f0:	f362 200f 	bfi	r0, r2, #8, #8
 80151f4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80151f8:	f362 4017 	bfi	r0, r2, #16, #8
 80151fc:	0e1b      	lsrs	r3, r3, #24
 80151fe:	f363 601f 	bfi	r0, r3, #24, #8
 8015202:	b002      	add	sp, #8
 8015204:	4770      	bx	lr
 8015206:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801520a:	f04f 0c02 	mov.w	ip, #2
 801520e:	e7e0      	b.n	80151d2 <uxr_stream_id_from_raw+0x16>

08015210 <uxr_init_stream_storage>:
 8015210:	2300      	movs	r3, #0
 8015212:	7403      	strb	r3, [r0, #16]
 8015214:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8015218:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 801521c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8015220:	4770      	bx	lr
 8015222:	bf00      	nop

08015224 <uxr_reset_stream_storage>:
 8015224:	b570      	push	{r4, r5, r6, lr}
 8015226:	7c03      	ldrb	r3, [r0, #16]
 8015228:	4604      	mov	r4, r0
 801522a:	b153      	cbz	r3, 8015242 <uxr_reset_stream_storage+0x1e>
 801522c:	4606      	mov	r6, r0
 801522e:	2500      	movs	r5, #0
 8015230:	4630      	mov	r0, r6
 8015232:	f005 f837 	bl	801a2a4 <uxr_reset_output_best_effort_stream>
 8015236:	7c23      	ldrb	r3, [r4, #16]
 8015238:	3501      	adds	r5, #1
 801523a:	42ab      	cmp	r3, r5
 801523c:	f106 0610 	add.w	r6, r6, #16
 8015240:	d8f6      	bhi.n	8015230 <uxr_reset_stream_storage+0xc>
 8015242:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015246:	b163      	cbz	r3, 8015262 <uxr_reset_stream_storage+0x3e>
 8015248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801524c:	2500      	movs	r5, #0
 801524e:	4630      	mov	r0, r6
 8015250:	f004 fe2a 	bl	8019ea8 <uxr_reset_input_best_effort_stream>
 8015254:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015258:	3501      	adds	r5, #1
 801525a:	42ab      	cmp	r3, r5
 801525c:	f106 0602 	add.w	r6, r6, #2
 8015260:	d8f5      	bhi.n	801524e <uxr_reset_stream_storage+0x2a>
 8015262:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015266:	b163      	cbz	r3, 8015282 <uxr_reset_stream_storage+0x5e>
 8015268:	f104 0618 	add.w	r6, r4, #24
 801526c:	2500      	movs	r5, #0
 801526e:	4630      	mov	r0, r6
 8015270:	f005 f8c4 	bl	801a3fc <uxr_reset_output_reliable_stream>
 8015274:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8015278:	3501      	adds	r5, #1
 801527a:	42ab      	cmp	r3, r5
 801527c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8015280:	d8f5      	bhi.n	801526e <uxr_reset_stream_storage+0x4a>
 8015282:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8015286:	b163      	cbz	r3, 80152a2 <uxr_reset_stream_storage+0x7e>
 8015288:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801528c:	2500      	movs	r5, #0
 801528e:	4630      	mov	r0, r6
 8015290:	f004 fe7e 	bl	8019f90 <uxr_reset_input_reliable_stream>
 8015294:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8015298:	3501      	adds	r5, #1
 801529a:	42ab      	cmp	r3, r5
 801529c:	f106 0618 	add.w	r6, r6, #24
 80152a0:	d8f5      	bhi.n	801528e <uxr_reset_stream_storage+0x6a>
 80152a2:	bd70      	pop	{r4, r5, r6, pc}

080152a4 <uxr_add_output_best_effort_buffer>:
 80152a4:	b510      	push	{r4, lr}
 80152a6:	7c04      	ldrb	r4, [r0, #16]
 80152a8:	f104 0c01 	add.w	ip, r4, #1
 80152ac:	b082      	sub	sp, #8
 80152ae:	f880 c010 	strb.w	ip, [r0, #16]
 80152b2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80152b6:	f004 ffeb 	bl	801a290 <uxr_init_output_best_effort_stream>
 80152ba:	2201      	movs	r2, #1
 80152bc:	4611      	mov	r1, r2
 80152be:	4620      	mov	r0, r4
 80152c0:	b002      	add	sp, #8
 80152c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152c6:	f7ff bf4f 	b.w	8015168 <uxr_stream_id>
 80152ca:	bf00      	nop

080152cc <uxr_add_output_reliable_buffer>:
 80152cc:	b510      	push	{r4, lr}
 80152ce:	b084      	sub	sp, #16
 80152d0:	4684      	mov	ip, r0
 80152d2:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80152d6:	9000      	str	r0, [sp, #0]
 80152d8:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80152dc:	2028      	movs	r0, #40	@ 0x28
 80152de:	fb00 c004 	mla	r0, r0, r4, ip
 80152e2:	f104 0e01 	add.w	lr, r4, #1
 80152e6:	3018      	adds	r0, #24
 80152e8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80152ec:	f005 f84e 	bl	801a38c <uxr_init_output_reliable_stream>
 80152f0:	2201      	movs	r2, #1
 80152f2:	2102      	movs	r1, #2
 80152f4:	4620      	mov	r0, r4
 80152f6:	b004      	add	sp, #16
 80152f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152fc:	f7ff bf34 	b.w	8015168 <uxr_stream_id>

08015300 <uxr_add_input_best_effort_buffer>:
 8015300:	b510      	push	{r4, lr}
 8015302:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8015306:	4603      	mov	r3, r0
 8015308:	1c62      	adds	r2, r4, #1
 801530a:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801530e:	b082      	sub	sp, #8
 8015310:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015318:	f004 fdc2 	bl	8019ea0 <uxr_init_input_best_effort_stream>
 801531c:	2200      	movs	r2, #0
 801531e:	2101      	movs	r1, #1
 8015320:	4620      	mov	r0, r4
 8015322:	b002      	add	sp, #8
 8015324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015328:	f7ff bf1e 	b.w	8015168 <uxr_stream_id>

0801532c <uxr_add_input_reliable_buffer>:
 801532c:	b510      	push	{r4, lr}
 801532e:	b084      	sub	sp, #16
 8015330:	4684      	mov	ip, r0
 8015332:	9806      	ldr	r0, [sp, #24]
 8015334:	9000      	str	r0, [sp, #0]
 8015336:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 801533a:	2018      	movs	r0, #24
 801533c:	fb00 c004 	mla	r0, r0, r4, ip
 8015340:	f104 0e01 	add.w	lr, r4, #1
 8015344:	3048      	adds	r0, #72	@ 0x48
 8015346:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801534a:	f004 fdf5 	bl	8019f38 <uxr_init_input_reliable_stream>
 801534e:	2200      	movs	r2, #0
 8015350:	2102      	movs	r1, #2
 8015352:	4620      	mov	r0, r4
 8015354:	b004      	add	sp, #16
 8015356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801535a:	f7ff bf05 	b.w	8015168 <uxr_stream_id>
 801535e:	bf00      	nop

08015360 <uxr_get_output_best_effort_stream>:
 8015360:	7c03      	ldrb	r3, [r0, #16]
 8015362:	428b      	cmp	r3, r1
 8015364:	bf8c      	ite	hi
 8015366:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801536a:	2000      	movls	r0, #0
 801536c:	4770      	bx	lr
 801536e:	bf00      	nop

08015370 <uxr_get_output_reliable_stream>:
 8015370:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8015374:	428b      	cmp	r3, r1
 8015376:	bf83      	ittte	hi
 8015378:	2328      	movhi	r3, #40	@ 0x28
 801537a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801537e:	3018      	addhi	r0, #24
 8015380:	2000      	movls	r0, #0
 8015382:	4770      	bx	lr

08015384 <uxr_get_input_best_effort_stream>:
 8015384:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8015388:	428b      	cmp	r3, r1
 801538a:	bf86      	itte	hi
 801538c:	3121      	addhi	r1, #33	@ 0x21
 801538e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8015392:	2000      	movls	r0, #0
 8015394:	4770      	bx	lr
 8015396:	bf00      	nop

08015398 <uxr_get_input_reliable_stream>:
 8015398:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801539c:	428b      	cmp	r3, r1
 801539e:	bf83      	ittte	hi
 80153a0:	2318      	movhi	r3, #24
 80153a2:	fb03 0001 	mlahi	r0, r3, r1, r0
 80153a6:	3048      	addhi	r0, #72	@ 0x48
 80153a8:	2000      	movls	r0, #0
 80153aa:	4770      	bx	lr

080153ac <uxr_output_streams_confirmed>:
 80153ac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80153b0:	b183      	cbz	r3, 80153d4 <uxr_output_streams_confirmed+0x28>
 80153b2:	b570      	push	{r4, r5, r6, lr}
 80153b4:	4606      	mov	r6, r0
 80153b6:	f100 0518 	add.w	r5, r0, #24
 80153ba:	2400      	movs	r4, #0
 80153bc:	e001      	b.n	80153c2 <uxr_output_streams_confirmed+0x16>
 80153be:	3528      	adds	r5, #40	@ 0x28
 80153c0:	b138      	cbz	r0, 80153d2 <uxr_output_streams_confirmed+0x26>
 80153c2:	4628      	mov	r0, r5
 80153c4:	f005 fa8a 	bl	801a8dc <uxr_is_output_up_to_date>
 80153c8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80153cc:	3401      	adds	r4, #1
 80153ce:	42a3      	cmp	r3, r4
 80153d0:	d8f5      	bhi.n	80153be <uxr_output_streams_confirmed+0x12>
 80153d2:	bd70      	pop	{r4, r5, r6, pc}
 80153d4:	2001      	movs	r0, #1
 80153d6:	4770      	bx	lr

080153d8 <uxr_buffer_submessage_header>:
 80153d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153da:	4604      	mov	r4, r0
 80153dc:	460e      	mov	r6, r1
 80153de:	2104      	movs	r1, #4
 80153e0:	4615      	mov	r5, r2
 80153e2:	461f      	mov	r7, r3
 80153e4:	f7f8 fdbc 	bl	800df60 <ucdr_align_to>
 80153e8:	2301      	movs	r3, #1
 80153ea:	ea47 0203 	orr.w	r2, r7, r3
 80153ee:	4631      	mov	r1, r6
 80153f0:	7523      	strb	r3, [r4, #20]
 80153f2:	4620      	mov	r0, r4
 80153f4:	462b      	mov	r3, r5
 80153f6:	f000 fa27 	bl	8015848 <uxr_serialize_submessage_header>
 80153fa:	4620      	mov	r0, r4
 80153fc:	f7f8 fdc6 	bl	800df8c <ucdr_buffer_remaining>
 8015400:	42a8      	cmp	r0, r5
 8015402:	bf34      	ite	cc
 8015404:	2000      	movcc	r0, #0
 8015406:	2001      	movcs	r0, #1
 8015408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801540a:	bf00      	nop

0801540c <uxr_read_submessage_header>:
 801540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015410:	4604      	mov	r4, r0
 8015412:	460d      	mov	r5, r1
 8015414:	2104      	movs	r1, #4
 8015416:	4616      	mov	r6, r2
 8015418:	4698      	mov	r8, r3
 801541a:	f7f8 fda1 	bl	800df60 <ucdr_align_to>
 801541e:	4620      	mov	r0, r4
 8015420:	f7f8 fdb4 	bl	800df8c <ucdr_buffer_remaining>
 8015424:	2803      	cmp	r0, #3
 8015426:	bf8c      	ite	hi
 8015428:	2701      	movhi	r7, #1
 801542a:	2700      	movls	r7, #0
 801542c:	d802      	bhi.n	8015434 <uxr_read_submessage_header+0x28>
 801542e:	4638      	mov	r0, r7
 8015430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015434:	4633      	mov	r3, r6
 8015436:	4642      	mov	r2, r8
 8015438:	4620      	mov	r0, r4
 801543a:	4629      	mov	r1, r5
 801543c:	f000 fa18 	bl	8015870 <uxr_deserialize_submessage_header>
 8015440:	f898 3000 	ldrb.w	r3, [r8]
 8015444:	f003 0201 	and.w	r2, r3, #1
 8015448:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801544c:	f888 3000 	strb.w	r3, [r8]
 8015450:	7522      	strb	r2, [r4, #20]
 8015452:	4638      	mov	r0, r7
 8015454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015458 <uxr_submessage_padding>:
 8015458:	f010 0003 	ands.w	r0, r0, #3
 801545c:	bf18      	it	ne
 801545e:	f1c0 0004 	rsbne	r0, r0, #4
 8015462:	4770      	bx	lr

08015464 <uxr_millis>:
 8015464:	b510      	push	{r4, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	4669      	mov	r1, sp
 801546a:	2001      	movs	r0, #1
 801546c:	f7ee f8e0 	bl	8003630 <clock_gettime>
 8015470:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8015474:	4906      	ldr	r1, [pc, #24]	@ (8015490 <uxr_millis+0x2c>)
 8015476:	fba0 0301 	umull	r0, r3, r0, r1
 801547a:	1900      	adds	r0, r0, r4
 801547c:	fb01 3102 	mla	r1, r1, r2, r3
 8015480:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015484:	4a03      	ldr	r2, [pc, #12]	@ (8015494 <uxr_millis+0x30>)
 8015486:	2300      	movs	r3, #0
 8015488:	f7eb fb48 	bl	8000b1c <__aeabi_ldivmod>
 801548c:	b004      	add	sp, #16
 801548e:	bd10      	pop	{r4, pc}
 8015490:	3b9aca00 	.word	0x3b9aca00
 8015494:	000f4240 	.word	0x000f4240

08015498 <uxr_nanos>:
 8015498:	b510      	push	{r4, lr}
 801549a:	b084      	sub	sp, #16
 801549c:	4669      	mov	r1, sp
 801549e:	2001      	movs	r0, #1
 80154a0:	f7ee f8c6 	bl	8003630 <clock_gettime>
 80154a4:	4a06      	ldr	r2, [pc, #24]	@ (80154c0 <uxr_nanos+0x28>)
 80154a6:	9800      	ldr	r0, [sp, #0]
 80154a8:	9902      	ldr	r1, [sp, #8]
 80154aa:	9c01      	ldr	r4, [sp, #4]
 80154ac:	fba0 0302 	umull	r0, r3, r0, r2
 80154b0:	1840      	adds	r0, r0, r1
 80154b2:	fb02 3304 	mla	r3, r2, r4, r3
 80154b6:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80154ba:	b004      	add	sp, #16
 80154bc:	bd10      	pop	{r4, pc}
 80154be:	bf00      	nop
 80154c0:	3b9aca00 	.word	0x3b9aca00

080154c4 <on_full_output_buffer_fragmented>:
 80154c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154c8:	460c      	mov	r4, r1
 80154ca:	b08a      	sub	sp, #40	@ 0x28
 80154cc:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80154d0:	4606      	mov	r6, r0
 80154d2:	f104 0008 	add.w	r0, r4, #8
 80154d6:	f7ff ff4b 	bl	8015370 <uxr_get_output_reliable_stream>
 80154da:	4605      	mov	r5, r0
 80154dc:	f005 fa08 	bl	801a8f0 <get_available_free_slots>
 80154e0:	b968      	cbnz	r0, 80154fe <on_full_output_buffer_fragmented+0x3a>
 80154e2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80154e6:	4620      	mov	r0, r4
 80154e8:	4798      	blx	r3
 80154ea:	b918      	cbnz	r0, 80154f4 <on_full_output_buffer_fragmented+0x30>
 80154ec:	2001      	movs	r0, #1
 80154ee:	b00a      	add	sp, #40	@ 0x28
 80154f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154f4:	4628      	mov	r0, r5
 80154f6:	f005 f9fb 	bl	801a8f0 <get_available_free_slots>
 80154fa:	2800      	cmp	r0, #0
 80154fc:	d0f6      	beq.n	80154ec <on_full_output_buffer_fragmented+0x28>
 80154fe:	8929      	ldrh	r1, [r5, #8]
 8015500:	89eb      	ldrh	r3, [r5, #14]
 8015502:	7b28      	ldrb	r0, [r5, #12]
 8015504:	686a      	ldr	r2, [r5, #4]
 8015506:	fbb2 f8f1 	udiv	r8, r2, r1
 801550a:	fbb3 f2f1 	udiv	r2, r3, r1
 801550e:	fb01 3112 	mls	r1, r1, r2, r3
 8015512:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8015516:	b289      	uxth	r1, r1
 8015518:	fb08 f101 	mul.w	r1, r8, r1
 801551c:	30fc      	adds	r0, #252	@ 0xfc
 801551e:	f1a8 0804 	sub.w	r8, r8, #4
 8015522:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8015526:	4440      	add	r0, r8
 8015528:	b287      	uxth	r7, r0
 801552a:	1bdb      	subs	r3, r3, r7
 801552c:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8015530:	682b      	ldr	r3, [r5, #0]
 8015532:	3104      	adds	r1, #4
 8015534:	4419      	add	r1, r3
 8015536:	4642      	mov	r2, r8
 8015538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801553c:	9300      	str	r3, [sp, #0]
 801553e:	a802      	add	r0, sp, #8
 8015540:	2300      	movs	r3, #0
 8015542:	f7f8 fce1 	bl	800df08 <ucdr_init_buffer_origin_offset>
 8015546:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801554a:	f102 0308 	add.w	r3, r2, #8
 801554e:	4543      	cmp	r3, r8
 8015550:	d928      	bls.n	80155a4 <on_full_output_buffer_fragmented+0xe0>
 8015552:	463a      	mov	r2, r7
 8015554:	2300      	movs	r3, #0
 8015556:	210d      	movs	r1, #13
 8015558:	a802      	add	r0, sp, #8
 801555a:	f7ff ff3d 	bl	80153d8 <uxr_buffer_submessage_header>
 801555e:	8929      	ldrh	r1, [r5, #8]
 8015560:	89eb      	ldrh	r3, [r5, #14]
 8015562:	fbb3 f2f1 	udiv	r2, r3, r1
 8015566:	fb01 3312 	mls	r3, r1, r2, r3
 801556a:	b29b      	uxth	r3, r3
 801556c:	686a      	ldr	r2, [r5, #4]
 801556e:	fbb2 f2f1 	udiv	r2, r2, r1
 8015572:	fb02 f303 	mul.w	r3, r2, r3
 8015576:	682a      	ldr	r2, [r5, #0]
 8015578:	f842 8003 	str.w	r8, [r2, r3]
 801557c:	89e8      	ldrh	r0, [r5, #14]
 801557e:	2101      	movs	r1, #1
 8015580:	f005 f9d6 	bl	801a930 <uxr_seq_num_add>
 8015584:	9904      	ldr	r1, [sp, #16]
 8015586:	9a03      	ldr	r2, [sp, #12]
 8015588:	81e8      	strh	r0, [r5, #14]
 801558a:	1a52      	subs	r2, r2, r1
 801558c:	4630      	mov	r0, r6
 801558e:	f7f8 fccd 	bl	800df2c <ucdr_init_buffer>
 8015592:	4630      	mov	r0, r6
 8015594:	490f      	ldr	r1, [pc, #60]	@ (80155d4 <on_full_output_buffer_fragmented+0x110>)
 8015596:	4622      	mov	r2, r4
 8015598:	f7f8 fc9c 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 801559c:	2000      	movs	r0, #0
 801559e:	b00a      	add	sp, #40	@ 0x28
 80155a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155a4:	b292      	uxth	r2, r2
 80155a6:	2302      	movs	r3, #2
 80155a8:	210d      	movs	r1, #13
 80155aa:	a802      	add	r0, sp, #8
 80155ac:	f7ff ff14 	bl	80153d8 <uxr_buffer_submessage_header>
 80155b0:	8928      	ldrh	r0, [r5, #8]
 80155b2:	89eb      	ldrh	r3, [r5, #14]
 80155b4:	fbb3 f1f0 	udiv	r1, r3, r0
 80155b8:	fb00 3311 	mls	r3, r0, r1, r3
 80155bc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80155c0:	6869      	ldr	r1, [r5, #4]
 80155c2:	fbb1 f1f0 	udiv	r1, r1, r0
 80155c6:	b29b      	uxth	r3, r3
 80155c8:	fb01 f303 	mul.w	r3, r1, r3
 80155cc:	6829      	ldr	r1, [r5, #0]
 80155ce:	3208      	adds	r2, #8
 80155d0:	50ca      	str	r2, [r1, r3]
 80155d2:	e7d3      	b.n	801557c <on_full_output_buffer_fragmented+0xb8>
 80155d4:	080154c5 	.word	0x080154c5

080155d8 <uxr_prepare_output_stream>:
 80155d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155da:	b087      	sub	sp, #28
 80155dc:	2707      	movs	r7, #7
 80155de:	9202      	str	r2, [sp, #8]
 80155e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80155e2:	9103      	str	r1, [sp, #12]
 80155e4:	2500      	movs	r5, #0
 80155e6:	3204      	adds	r2, #4
 80155e8:	e9cd 7500 	strd	r7, r5, [sp]
 80155ec:	461c      	mov	r4, r3
 80155ee:	4606      	mov	r6, r0
 80155f0:	f7fe ffc2 	bl	8014578 <uxr_prepare_stream_to_write_submessage>
 80155f4:	f080 0201 	eor.w	r2, r0, #1
 80155f8:	b2d2      	uxtb	r2, r2
 80155fa:	75a2      	strb	r2, [r4, #22]
 80155fc:	b112      	cbz	r2, 8015604 <uxr_prepare_output_stream+0x2c>
 80155fe:	4628      	mov	r0, r5
 8015600:	b007      	add	sp, #28
 8015602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015604:	aa05      	add	r2, sp, #20
 8015606:	9902      	ldr	r1, [sp, #8]
 8015608:	4630      	mov	r0, r6
 801560a:	f7ff f8eb 	bl	80147e4 <uxr_init_base_object_request>
 801560e:	a905      	add	r1, sp, #20
 8015610:	4605      	mov	r5, r0
 8015612:	4620      	mov	r0, r4
 8015614:	f001 f8a0 	bl	8016758 <uxr_serialize_WRITE_DATA_Payload_Data>
 8015618:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801561c:	69a6      	ldr	r6, [r4, #24]
 801561e:	69e7      	ldr	r7, [r4, #28]
 8015620:	1a52      	subs	r2, r2, r1
 8015622:	4620      	mov	r0, r4
 8015624:	f7f8 fc82 	bl	800df2c <ucdr_init_buffer>
 8015628:	4620      	mov	r0, r4
 801562a:	463a      	mov	r2, r7
 801562c:	4631      	mov	r1, r6
 801562e:	f7f8 fc51 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 8015632:	4628      	mov	r0, r5
 8015634:	b007      	add	sp, #28
 8015636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015638 <uxr_prepare_output_stream_fragmented>:
 8015638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801563c:	b091      	sub	sp, #68	@ 0x44
 801563e:	4605      	mov	r5, r0
 8015640:	9105      	str	r1, [sp, #20]
 8015642:	3008      	adds	r0, #8
 8015644:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8015648:	461e      	mov	r6, r3
 801564a:	9204      	str	r2, [sp, #16]
 801564c:	f7ff fe90 	bl	8015370 <uxr_get_output_reliable_stream>
 8015650:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8015654:	2b01      	cmp	r3, #1
 8015656:	f000 8091 	beq.w	801577c <uxr_prepare_output_stream_fragmented+0x144>
 801565a:	4604      	mov	r4, r0
 801565c:	2800      	cmp	r0, #0
 801565e:	f000 808d 	beq.w	801577c <uxr_prepare_output_stream_fragmented+0x144>
 8015662:	f005 f945 	bl	801a8f0 <get_available_free_slots>
 8015666:	2800      	cmp	r0, #0
 8015668:	f000 8083 	beq.w	8015772 <uxr_prepare_output_stream_fragmented+0x13a>
 801566c:	8922      	ldrh	r2, [r4, #8]
 801566e:	89e7      	ldrh	r7, [r4, #14]
 8015670:	fbb7 f9f2 	udiv	r9, r7, r2
 8015674:	fb02 7919 	mls	r9, r2, r9, r7
 8015678:	fa1f f989 	uxth.w	r9, r9
 801567c:	6863      	ldr	r3, [r4, #4]
 801567e:	fbb3 f2f2 	udiv	r2, r3, r2
 8015682:	6823      	ldr	r3, [r4, #0]
 8015684:	9203      	str	r2, [sp, #12]
 8015686:	fb02 f909 	mul.w	r9, r2, r9
 801568a:	f109 0904 	add.w	r9, r9, #4
 801568e:	4499      	add	r9, r3
 8015690:	7b23      	ldrb	r3, [r4, #12]
 8015692:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015696:	4543      	cmp	r3, r8
 8015698:	f1a2 0b04 	sub.w	fp, r2, #4
 801569c:	d37a      	bcc.n	8015794 <uxr_prepare_output_stream_fragmented+0x15c>
 801569e:	f1ab 0a04 	sub.w	sl, fp, #4
 80156a2:	ebaa 0a03 	sub.w	sl, sl, r3
 80156a6:	465a      	mov	r2, fp
 80156a8:	2300      	movs	r3, #0
 80156aa:	4649      	mov	r1, r9
 80156ac:	a808      	add	r0, sp, #32
 80156ae:	f8cd 8000 	str.w	r8, [sp]
 80156b2:	f7f8 fc29 	bl	800df08 <ucdr_init_buffer_origin_offset>
 80156b6:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80156b8:	fa1f fa8a 	uxth.w	sl, sl
 80156bc:	4652      	mov	r2, sl
 80156be:	f103 0a08 	add.w	sl, r3, #8
 80156c2:	45da      	cmp	sl, fp
 80156c4:	bf34      	ite	cc
 80156c6:	2302      	movcc	r3, #2
 80156c8:	2300      	movcs	r3, #0
 80156ca:	210d      	movs	r1, #13
 80156cc:	a808      	add	r0, sp, #32
 80156ce:	f7ff fe83 	bl	80153d8 <uxr_buffer_submessage_header>
 80156d2:	8921      	ldrh	r1, [r4, #8]
 80156d4:	fbb7 f2f1 	udiv	r2, r7, r1
 80156d8:	fb01 7212 	mls	r2, r1, r2, r7
 80156dc:	b292      	uxth	r2, r2
 80156de:	6863      	ldr	r3, [r4, #4]
 80156e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80156e4:	fb02 f303 	mul.w	r3, r2, r3
 80156e8:	6822      	ldr	r2, [r4, #0]
 80156ea:	4638      	mov	r0, r7
 80156ec:	f842 b003 	str.w	fp, [r2, r3]
 80156f0:	2101      	movs	r1, #1
 80156f2:	f005 f91d 	bl	801a930 <uxr_seq_num_add>
 80156f6:	9b03      	ldr	r3, [sp, #12]
 80156f8:	f108 0104 	add.w	r1, r8, #4
 80156fc:	f1a3 0208 	sub.w	r2, r3, #8
 8015700:	eba2 0208 	sub.w	r2, r2, r8
 8015704:	4449      	add	r1, r9
 8015706:	4607      	mov	r7, r0
 8015708:	4630      	mov	r0, r6
 801570a:	f7f8 fc0f 	bl	800df2c <ucdr_init_buffer>
 801570e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8015710:	81e7      	strh	r7, [r4, #14]
 8015712:	1d1a      	adds	r2, r3, #4
 8015714:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8015718:	bf28      	it	cs
 801571a:	2200      	movcs	r2, #0
 801571c:	2300      	movs	r3, #0
 801571e:	b292      	uxth	r2, r2
 8015720:	2107      	movs	r1, #7
 8015722:	4630      	mov	r0, r6
 8015724:	f7ff fe58 	bl	80153d8 <uxr_buffer_submessage_header>
 8015728:	9904      	ldr	r1, [sp, #16]
 801572a:	aa07      	add	r2, sp, #28
 801572c:	4628      	mov	r0, r5
 801572e:	f7ff f859 	bl	80147e4 <uxr_init_base_object_request>
 8015732:	4604      	mov	r4, r0
 8015734:	b318      	cbz	r0, 801577e <uxr_prepare_output_stream_fragmented+0x146>
 8015736:	a907      	add	r1, sp, #28
 8015738:	4630      	mov	r0, r6
 801573a:	f001 f80d 	bl	8016758 <uxr_serialize_WRITE_DATA_Payload_Data>
 801573e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8015742:	4630      	mov	r0, r6
 8015744:	1a52      	subs	r2, r2, r1
 8015746:	f7f8 fbf1 	bl	800df2c <ucdr_init_buffer>
 801574a:	9b05      	ldr	r3, [sp, #20]
 801574c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8015750:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015752:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8015756:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015758:	491b      	ldr	r1, [pc, #108]	@ (80157c8 <uxr_prepare_output_stream_fragmented+0x190>)
 801575a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 801575e:	4630      	mov	r0, r6
 8015760:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8015764:	462a      	mov	r2, r5
 8015766:	f7f8 fbb5 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 801576a:	4620      	mov	r0, r4
 801576c:	b011      	add	sp, #68	@ 0x44
 801576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015772:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8015774:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8015776:	4628      	mov	r0, r5
 8015778:	4798      	blx	r3
 801577a:	b920      	cbnz	r0, 8015786 <uxr_prepare_output_stream_fragmented+0x14e>
 801577c:	2400      	movs	r4, #0
 801577e:	4620      	mov	r0, r4
 8015780:	b011      	add	sp, #68	@ 0x44
 8015782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015786:	4620      	mov	r0, r4
 8015788:	f005 f8b2 	bl	801a8f0 <get_available_free_slots>
 801578c:	2800      	cmp	r0, #0
 801578e:	f47f af6d 	bne.w	801566c <uxr_prepare_output_stream_fragmented+0x34>
 8015792:	e7f3      	b.n	801577c <uxr_prepare_output_stream_fragmented+0x144>
 8015794:	4638      	mov	r0, r7
 8015796:	2101      	movs	r1, #1
 8015798:	f005 f8ca 	bl	801a930 <uxr_seq_num_add>
 801579c:	8921      	ldrh	r1, [r4, #8]
 801579e:	fbb0 f2f1 	udiv	r2, r0, r1
 80157a2:	fb01 0912 	mls	r9, r1, r2, r0
 80157a6:	fa1f f289 	uxth.w	r2, r9
 80157aa:	6863      	ldr	r3, [r4, #4]
 80157ac:	fbb3 f9f1 	udiv	r9, r3, r1
 80157b0:	6823      	ldr	r3, [r4, #0]
 80157b2:	fb02 f909 	mul.w	r9, r2, r9
 80157b6:	f109 0904 	add.w	r9, r9, #4
 80157ba:	4499      	add	r9, r3
 80157bc:	4607      	mov	r7, r0
 80157be:	7b23      	ldrb	r3, [r4, #12]
 80157c0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80157c4:	e76b      	b.n	801569e <uxr_prepare_output_stream_fragmented+0x66>
 80157c6:	bf00      	nop
 80157c8:	080154c5 	.word	0x080154c5

080157cc <uxr_serialize_message_header>:
 80157cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ce:	b083      	sub	sp, #12
 80157d0:	4616      	mov	r6, r2
 80157d2:	4604      	mov	r4, r0
 80157d4:	9301      	str	r3, [sp, #4]
 80157d6:	460d      	mov	r5, r1
 80157d8:	9f08      	ldr	r7, [sp, #32]
 80157da:	f7f7 f8c5 	bl	800c968 <ucdr_serialize_uint8_t>
 80157de:	4631      	mov	r1, r6
 80157e0:	4620      	mov	r0, r4
 80157e2:	f7f7 f8c1 	bl	800c968 <ucdr_serialize_uint8_t>
 80157e6:	9a01      	ldr	r2, [sp, #4]
 80157e8:	2101      	movs	r1, #1
 80157ea:	4620      	mov	r0, r4
 80157ec:	f7f7 f968 	bl	800cac0 <ucdr_serialize_endian_uint16_t>
 80157f0:	062b      	lsls	r3, r5, #24
 80157f2:	d501      	bpl.n	80157f8 <uxr_serialize_message_header+0x2c>
 80157f4:	b003      	add	sp, #12
 80157f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157f8:	2204      	movs	r2, #4
 80157fa:	4639      	mov	r1, r7
 80157fc:	4620      	mov	r0, r4
 80157fe:	b003      	add	sp, #12
 8015800:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015804:	f7fd b870 	b.w	80128e8 <ucdr_serialize_array_uint8_t>

08015808 <uxr_deserialize_message_header>:
 8015808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801580a:	b083      	sub	sp, #12
 801580c:	4616      	mov	r6, r2
 801580e:	4604      	mov	r4, r0
 8015810:	9301      	str	r3, [sp, #4]
 8015812:	460d      	mov	r5, r1
 8015814:	9f08      	ldr	r7, [sp, #32]
 8015816:	f7f7 f8bd 	bl	800c994 <ucdr_deserialize_uint8_t>
 801581a:	4631      	mov	r1, r6
 801581c:	4620      	mov	r0, r4
 801581e:	f7f7 f8b9 	bl	800c994 <ucdr_deserialize_uint8_t>
 8015822:	9a01      	ldr	r2, [sp, #4]
 8015824:	2101      	movs	r1, #1
 8015826:	4620      	mov	r0, r4
 8015828:	f7f7 fa3e 	bl	800cca8 <ucdr_deserialize_endian_uint16_t>
 801582c:	f995 3000 	ldrsb.w	r3, [r5]
 8015830:	2b00      	cmp	r3, #0
 8015832:	da01      	bge.n	8015838 <uxr_deserialize_message_header+0x30>
 8015834:	b003      	add	sp, #12
 8015836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015838:	2204      	movs	r2, #4
 801583a:	4639      	mov	r1, r7
 801583c:	4620      	mov	r0, r4
 801583e:	b003      	add	sp, #12
 8015840:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015844:	f7fd b8b4 	b.w	80129b0 <ucdr_deserialize_array_uint8_t>

08015848 <uxr_serialize_submessage_header>:
 8015848:	b530      	push	{r4, r5, lr}
 801584a:	b083      	sub	sp, #12
 801584c:	4615      	mov	r5, r2
 801584e:	4604      	mov	r4, r0
 8015850:	9301      	str	r3, [sp, #4]
 8015852:	f7f7 f889 	bl	800c968 <ucdr_serialize_uint8_t>
 8015856:	4629      	mov	r1, r5
 8015858:	4620      	mov	r0, r4
 801585a:	f7f7 f885 	bl	800c968 <ucdr_serialize_uint8_t>
 801585e:	9a01      	ldr	r2, [sp, #4]
 8015860:	2101      	movs	r1, #1
 8015862:	4620      	mov	r0, r4
 8015864:	b003      	add	sp, #12
 8015866:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801586a:	f7f7 b929 	b.w	800cac0 <ucdr_serialize_endian_uint16_t>
 801586e:	bf00      	nop

08015870 <uxr_deserialize_submessage_header>:
 8015870:	b530      	push	{r4, r5, lr}
 8015872:	b083      	sub	sp, #12
 8015874:	4615      	mov	r5, r2
 8015876:	4604      	mov	r4, r0
 8015878:	9301      	str	r3, [sp, #4]
 801587a:	f7f7 f88b 	bl	800c994 <ucdr_deserialize_uint8_t>
 801587e:	4629      	mov	r1, r5
 8015880:	4620      	mov	r0, r4
 8015882:	f7f7 f887 	bl	800c994 <ucdr_deserialize_uint8_t>
 8015886:	9a01      	ldr	r2, [sp, #4]
 8015888:	2101      	movs	r1, #1
 801588a:	4620      	mov	r0, r4
 801588c:	b003      	add	sp, #12
 801588e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015892:	f7f7 ba09 	b.w	800cca8 <ucdr_deserialize_endian_uint16_t>
 8015896:	bf00      	nop

08015898 <uxr_serialize_CLIENT_Representation>:
 8015898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801589c:	2204      	movs	r2, #4
 801589e:	460e      	mov	r6, r1
 80158a0:	4605      	mov	r5, r0
 80158a2:	f7fd f821 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80158a6:	2202      	movs	r2, #2
 80158a8:	4607      	mov	r7, r0
 80158aa:	1d31      	adds	r1, r6, #4
 80158ac:	4628      	mov	r0, r5
 80158ae:	f7fd f81b 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80158b2:	4038      	ands	r0, r7
 80158b4:	2202      	movs	r2, #2
 80158b6:	1db1      	adds	r1, r6, #6
 80158b8:	b2c7      	uxtb	r7, r0
 80158ba:	4628      	mov	r0, r5
 80158bc:	f7fd f814 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80158c0:	2204      	movs	r2, #4
 80158c2:	4007      	ands	r7, r0
 80158c4:	f106 0108 	add.w	r1, r6, #8
 80158c8:	4628      	mov	r0, r5
 80158ca:	f7fd f80d 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80158ce:	7b31      	ldrb	r1, [r6, #12]
 80158d0:	4007      	ands	r7, r0
 80158d2:	4628      	mov	r0, r5
 80158d4:	f7f7 f848 	bl	800c968 <ucdr_serialize_uint8_t>
 80158d8:	7b71      	ldrb	r1, [r6, #13]
 80158da:	4007      	ands	r7, r0
 80158dc:	4628      	mov	r0, r5
 80158de:	f7f7 f815 	bl	800c90c <ucdr_serialize_bool>
 80158e2:	7b73      	ldrb	r3, [r6, #13]
 80158e4:	ea07 0800 	and.w	r8, r7, r0
 80158e8:	b93b      	cbnz	r3, 80158fa <uxr_serialize_CLIENT_Representation+0x62>
 80158ea:	8bb1      	ldrh	r1, [r6, #28]
 80158ec:	4628      	mov	r0, r5
 80158ee:	f7f7 f867 	bl	800c9c0 <ucdr_serialize_uint16_t>
 80158f2:	ea08 0000 	and.w	r0, r8, r0
 80158f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158fa:	6931      	ldr	r1, [r6, #16]
 80158fc:	4628      	mov	r0, r5
 80158fe:	f7f7 fa49 	bl	800cd94 <ucdr_serialize_uint32_t>
 8015902:	6933      	ldr	r3, [r6, #16]
 8015904:	b1e3      	cbz	r3, 8015940 <uxr_serialize_CLIENT_Representation+0xa8>
 8015906:	b1c0      	cbz	r0, 801593a <uxr_serialize_CLIENT_Representation+0xa2>
 8015908:	4637      	mov	r7, r6
 801590a:	f04f 0900 	mov.w	r9, #0
 801590e:	e001      	b.n	8015914 <uxr_serialize_CLIENT_Representation+0x7c>
 8015910:	3708      	adds	r7, #8
 8015912:	b194      	cbz	r4, 801593a <uxr_serialize_CLIENT_Representation+0xa2>
 8015914:	6979      	ldr	r1, [r7, #20]
 8015916:	4628      	mov	r0, r5
 8015918:	f004 faaa 	bl	8019e70 <ucdr_serialize_string>
 801591c:	69b9      	ldr	r1, [r7, #24]
 801591e:	4604      	mov	r4, r0
 8015920:	4628      	mov	r0, r5
 8015922:	f004 faa5 	bl	8019e70 <ucdr_serialize_string>
 8015926:	6933      	ldr	r3, [r6, #16]
 8015928:	f109 0901 	add.w	r9, r9, #1
 801592c:	4004      	ands	r4, r0
 801592e:	4599      	cmp	r9, r3
 8015930:	b2e4      	uxtb	r4, r4
 8015932:	d3ed      	bcc.n	8015910 <uxr_serialize_CLIENT_Representation+0x78>
 8015934:	ea08 0804 	and.w	r8, r8, r4
 8015938:	e7d7      	b.n	80158ea <uxr_serialize_CLIENT_Representation+0x52>
 801593a:	f04f 0800 	mov.w	r8, #0
 801593e:	e7d4      	b.n	80158ea <uxr_serialize_CLIENT_Representation+0x52>
 8015940:	ea08 0800 	and.w	r8, r8, r0
 8015944:	e7d1      	b.n	80158ea <uxr_serialize_CLIENT_Representation+0x52>
 8015946:	bf00      	nop

08015948 <uxr_deserialize_CLIENT_Representation>:
 8015948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801594c:	2204      	movs	r2, #4
 801594e:	460c      	mov	r4, r1
 8015950:	4605      	mov	r5, r0
 8015952:	f7fd f82d 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8015956:	2202      	movs	r2, #2
 8015958:	4607      	mov	r7, r0
 801595a:	1d21      	adds	r1, r4, #4
 801595c:	4628      	mov	r0, r5
 801595e:	f7fd f827 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8015962:	4038      	ands	r0, r7
 8015964:	2202      	movs	r2, #2
 8015966:	1da1      	adds	r1, r4, #6
 8015968:	b2c6      	uxtb	r6, r0
 801596a:	4628      	mov	r0, r5
 801596c:	f7fd f820 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8015970:	2204      	movs	r2, #4
 8015972:	4006      	ands	r6, r0
 8015974:	f104 0108 	add.w	r1, r4, #8
 8015978:	4628      	mov	r0, r5
 801597a:	f7fd f819 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 801597e:	f104 010c 	add.w	r1, r4, #12
 8015982:	4006      	ands	r6, r0
 8015984:	4628      	mov	r0, r5
 8015986:	f7f7 f805 	bl	800c994 <ucdr_deserialize_uint8_t>
 801598a:	f104 010d 	add.w	r1, r4, #13
 801598e:	ea06 0700 	and.w	r7, r6, r0
 8015992:	4628      	mov	r0, r5
 8015994:	f7f6 ffd0 	bl	800c938 <ucdr_deserialize_bool>
 8015998:	7b63      	ldrb	r3, [r4, #13]
 801599a:	4007      	ands	r7, r0
 801599c:	b93b      	cbnz	r3, 80159ae <uxr_deserialize_CLIENT_Representation+0x66>
 801599e:	f104 011c 	add.w	r1, r4, #28
 80159a2:	4628      	mov	r0, r5
 80159a4:	f7f7 f90c 	bl	800cbc0 <ucdr_deserialize_uint16_t>
 80159a8:	4038      	ands	r0, r7
 80159aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ae:	f104 0110 	add.w	r1, r4, #16
 80159b2:	4628      	mov	r0, r5
 80159b4:	f7f7 fb1e 	bl	800cff4 <ucdr_deserialize_uint32_t>
 80159b8:	6923      	ldr	r3, [r4, #16]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d903      	bls.n	80159c6 <uxr_deserialize_CLIENT_Representation+0x7e>
 80159be:	2301      	movs	r3, #1
 80159c0:	75ab      	strb	r3, [r5, #22]
 80159c2:	2700      	movs	r7, #0
 80159c4:	e7eb      	b.n	801599e <uxr_deserialize_CLIENT_Representation+0x56>
 80159c6:	b30b      	cbz	r3, 8015a0c <uxr_deserialize_CLIENT_Representation+0xc4>
 80159c8:	2800      	cmp	r0, #0
 80159ca:	d0fa      	beq.n	80159c2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80159cc:	46a0      	mov	r8, r4
 80159ce:	f04f 0900 	mov.w	r9, #0
 80159d2:	e001      	b.n	80159d8 <uxr_deserialize_CLIENT_Representation+0x90>
 80159d4:	2e00      	cmp	r6, #0
 80159d6:	d0f4      	beq.n	80159c2 <uxr_deserialize_CLIENT_Representation+0x7a>
 80159d8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80159dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80159e0:	4628      	mov	r0, r5
 80159e2:	f004 fa55 	bl	8019e90 <ucdr_deserialize_string>
 80159e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80159ea:	4606      	mov	r6, r0
 80159ec:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80159f0:	4628      	mov	r0, r5
 80159f2:	f004 fa4d 	bl	8019e90 <ucdr_deserialize_string>
 80159f6:	6923      	ldr	r3, [r4, #16]
 80159f8:	f109 0901 	add.w	r9, r9, #1
 80159fc:	4006      	ands	r6, r0
 80159fe:	4599      	cmp	r9, r3
 8015a00:	f108 0808 	add.w	r8, r8, #8
 8015a04:	b2f6      	uxtb	r6, r6
 8015a06:	d3e5      	bcc.n	80159d4 <uxr_deserialize_CLIENT_Representation+0x8c>
 8015a08:	4037      	ands	r7, r6
 8015a0a:	e7c8      	b.n	801599e <uxr_deserialize_CLIENT_Representation+0x56>
 8015a0c:	4007      	ands	r7, r0
 8015a0e:	e7c6      	b.n	801599e <uxr_deserialize_CLIENT_Representation+0x56>

08015a10 <uxr_serialize_AGENT_Representation>:
 8015a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a14:	2204      	movs	r2, #4
 8015a16:	460f      	mov	r7, r1
 8015a18:	4605      	mov	r5, r0
 8015a1a:	f7fc ff65 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8015a1e:	2202      	movs	r2, #2
 8015a20:	4604      	mov	r4, r0
 8015a22:	1d39      	adds	r1, r7, #4
 8015a24:	4628      	mov	r0, r5
 8015a26:	f7fc ff5f 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8015a2a:	4020      	ands	r0, r4
 8015a2c:	2202      	movs	r2, #2
 8015a2e:	1db9      	adds	r1, r7, #6
 8015a30:	b2c4      	uxtb	r4, r0
 8015a32:	4628      	mov	r0, r5
 8015a34:	f7fc ff58 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8015a38:	7a39      	ldrb	r1, [r7, #8]
 8015a3a:	4004      	ands	r4, r0
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	f7f6 ff65 	bl	800c90c <ucdr_serialize_bool>
 8015a42:	7a3b      	ldrb	r3, [r7, #8]
 8015a44:	ea00 0804 	and.w	r8, r0, r4
 8015a48:	b913      	cbnz	r3, 8015a50 <uxr_serialize_AGENT_Representation+0x40>
 8015a4a:	4640      	mov	r0, r8
 8015a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a50:	68f9      	ldr	r1, [r7, #12]
 8015a52:	4628      	mov	r0, r5
 8015a54:	f7f7 f99e 	bl	800cd94 <ucdr_serialize_uint32_t>
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	b303      	cbz	r3, 8015a9e <uxr_serialize_AGENT_Representation+0x8e>
 8015a5c:	b1d0      	cbz	r0, 8015a94 <uxr_serialize_AGENT_Representation+0x84>
 8015a5e:	463e      	mov	r6, r7
 8015a60:	f04f 0900 	mov.w	r9, #0
 8015a64:	e001      	b.n	8015a6a <uxr_serialize_AGENT_Representation+0x5a>
 8015a66:	3608      	adds	r6, #8
 8015a68:	b1a4      	cbz	r4, 8015a94 <uxr_serialize_AGENT_Representation+0x84>
 8015a6a:	6931      	ldr	r1, [r6, #16]
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	f004 f9ff 	bl	8019e70 <ucdr_serialize_string>
 8015a72:	6971      	ldr	r1, [r6, #20]
 8015a74:	4604      	mov	r4, r0
 8015a76:	4628      	mov	r0, r5
 8015a78:	f004 f9fa 	bl	8019e70 <ucdr_serialize_string>
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	f109 0901 	add.w	r9, r9, #1
 8015a82:	4004      	ands	r4, r0
 8015a84:	4599      	cmp	r9, r3
 8015a86:	b2e4      	uxtb	r4, r4
 8015a88:	d3ed      	bcc.n	8015a66 <uxr_serialize_AGENT_Representation+0x56>
 8015a8a:	ea08 0804 	and.w	r8, r8, r4
 8015a8e:	4640      	mov	r0, r8
 8015a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a94:	f04f 0800 	mov.w	r8, #0
 8015a98:	4640      	mov	r0, r8
 8015a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a9e:	ea08 0800 	and.w	r8, r8, r0
 8015aa2:	e7d2      	b.n	8015a4a <uxr_serialize_AGENT_Representation+0x3a>

08015aa4 <uxr_serialize_DATAWRITER_Representation>:
 8015aa4:	b570      	push	{r4, r5, r6, lr}
 8015aa6:	460d      	mov	r5, r1
 8015aa8:	7809      	ldrb	r1, [r1, #0]
 8015aaa:	4606      	mov	r6, r0
 8015aac:	f7f6 ff5c 	bl	800c968 <ucdr_serialize_uint8_t>
 8015ab0:	4604      	mov	r4, r0
 8015ab2:	b130      	cbz	r0, 8015ac2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015ab4:	782b      	ldrb	r3, [r5, #0]
 8015ab6:	2b02      	cmp	r3, #2
 8015ab8:	d00c      	beq.n	8015ad4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015aba:	2b03      	cmp	r3, #3
 8015abc:	d010      	beq.n	8015ae0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d008      	beq.n	8015ad4 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015ac2:	2202      	movs	r2, #2
 8015ac4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015ac8:	4630      	mov	r0, r6
 8015aca:	f7fc ff0d 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8015ace:	4020      	ands	r0, r4
 8015ad0:	b2c0      	uxtb	r0, r0
 8015ad2:	bd70      	pop	{r4, r5, r6, pc}
 8015ad4:	6869      	ldr	r1, [r5, #4]
 8015ad6:	4630      	mov	r0, r6
 8015ad8:	f004 f9ca 	bl	8019e70 <ucdr_serialize_string>
 8015adc:	4604      	mov	r4, r0
 8015ade:	e7f0      	b.n	8015ac2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015ae0:	4629      	mov	r1, r5
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015ae8:	3104      	adds	r1, #4
 8015aea:	f7fd f89b 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8015aee:	4604      	mov	r4, r0
 8015af0:	e7e7      	b.n	8015ac2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015af2:	bf00      	nop

08015af4 <uxr_serialize_ObjectVariant.part.0>:
 8015af4:	b570      	push	{r4, r5, r6, lr}
 8015af6:	780b      	ldrb	r3, [r1, #0]
 8015af8:	3b01      	subs	r3, #1
 8015afa:	460c      	mov	r4, r1
 8015afc:	4605      	mov	r5, r0
 8015afe:	2b0d      	cmp	r3, #13
 8015b00:	d854      	bhi.n	8015bac <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015b02:	e8df f003 	tbb	[pc, r3]
 8015b06:	0730      	.short	0x0730
 8015b08:	07071b1b 	.word	0x07071b1b
 8015b0c:	0c530707 	.word	0x0c530707
 8015b10:	494e0c0c 	.word	0x494e0c0c
 8015b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b18:	3104      	adds	r1, #4
 8015b1a:	f7ff bfc3 	b.w	8015aa4 <uxr_serialize_DATAWRITER_Representation>
 8015b1e:	7909      	ldrb	r1, [r1, #4]
 8015b20:	f7f6 ff22 	bl	800c968 <ucdr_serialize_uint8_t>
 8015b24:	b1e8      	cbz	r0, 8015b62 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015b26:	7923      	ldrb	r3, [r4, #4]
 8015b28:	2b01      	cmp	r3, #1
 8015b2a:	d001      	beq.n	8015b30 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015b2c:	2b02      	cmp	r3, #2
 8015b2e:	d13d      	bne.n	8015bac <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015b30:	68a1      	ldr	r1, [r4, #8]
 8015b32:	4628      	mov	r0, r5
 8015b34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b38:	f004 b99a 	b.w	8019e70 <ucdr_serialize_string>
 8015b3c:	7909      	ldrb	r1, [r1, #4]
 8015b3e:	f7f6 ff13 	bl	800c968 <ucdr_serialize_uint8_t>
 8015b42:	4606      	mov	r6, r0
 8015b44:	b120      	cbz	r0, 8015b50 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015b46:	7923      	ldrb	r3, [r4, #4]
 8015b48:	2b02      	cmp	r3, #2
 8015b4a:	d039      	beq.n	8015bc0 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015b4c:	2b03      	cmp	r3, #3
 8015b4e:	d02f      	beq.n	8015bb0 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015b50:	2202      	movs	r2, #2
 8015b52:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8015b56:	4628      	mov	r0, r5
 8015b58:	f7fc fec6 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8015b5c:	4030      	ands	r0, r6
 8015b5e:	b2c0      	uxtb	r0, r0
 8015b60:	bd70      	pop	{r4, r5, r6, pc}
 8015b62:	2000      	movs	r0, #0
 8015b64:	bd70      	pop	{r4, r5, r6, pc}
 8015b66:	7909      	ldrb	r1, [r1, #4]
 8015b68:	f7f6 fefe 	bl	800c968 <ucdr_serialize_uint8_t>
 8015b6c:	4606      	mov	r6, r0
 8015b6e:	b158      	cbz	r0, 8015b88 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015b70:	7923      	ldrb	r3, [r4, #4]
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d003      	beq.n	8015b7e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8015b76:	2b03      	cmp	r3, #3
 8015b78:	d028      	beq.n	8015bcc <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d104      	bne.n	8015b88 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015b7e:	68a1      	ldr	r1, [r4, #8]
 8015b80:	4628      	mov	r0, r5
 8015b82:	f004 f975 	bl	8019e70 <ucdr_serialize_string>
 8015b86:	4606      	mov	r6, r0
 8015b88:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	f7f7 fc27 	bl	800d3e0 <ucdr_serialize_int16_t>
 8015b92:	4030      	ands	r0, r6
 8015b94:	b2c0      	uxtb	r0, r0
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
 8015b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b9c:	3104      	adds	r1, #4
 8015b9e:	f7ff be7b 	b.w	8015898 <uxr_serialize_CLIENT_Representation>
 8015ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ba6:	3104      	adds	r1, #4
 8015ba8:	f7ff bf32 	b.w	8015a10 <uxr_serialize_AGENT_Representation>
 8015bac:	2001      	movs	r0, #1
 8015bae:	bd70      	pop	{r4, r5, r6, pc}
 8015bb0:	68a2      	ldr	r2, [r4, #8]
 8015bb2:	f104 010c 	add.w	r1, r4, #12
 8015bb6:	4628      	mov	r0, r5
 8015bb8:	f7fd f834 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8015bbc:	4606      	mov	r6, r0
 8015bbe:	e7c7      	b.n	8015b50 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015bc0:	68a1      	ldr	r1, [r4, #8]
 8015bc2:	4628      	mov	r0, r5
 8015bc4:	f004 f954 	bl	8019e70 <ucdr_serialize_string>
 8015bc8:	4606      	mov	r6, r0
 8015bca:	e7c1      	b.n	8015b50 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015bcc:	68a2      	ldr	r2, [r4, #8]
 8015bce:	f104 010c 	add.w	r1, r4, #12
 8015bd2:	4628      	mov	r0, r5
 8015bd4:	f7fd f826 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8015bd8:	4606      	mov	r6, r0
 8015bda:	e7d5      	b.n	8015b88 <uxr_serialize_ObjectVariant.part.0+0x94>

08015bdc <uxr_deserialize_DATAWRITER_Representation>:
 8015bdc:	b570      	push	{r4, r5, r6, lr}
 8015bde:	4606      	mov	r6, r0
 8015be0:	460d      	mov	r5, r1
 8015be2:	f7f6 fed7 	bl	800c994 <ucdr_deserialize_uint8_t>
 8015be6:	4604      	mov	r4, r0
 8015be8:	b130      	cbz	r0, 8015bf8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015bea:	782b      	ldrb	r3, [r5, #0]
 8015bec:	2b02      	cmp	r3, #2
 8015bee:	d00c      	beq.n	8015c0a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015bf0:	2b03      	cmp	r3, #3
 8015bf2:	d012      	beq.n	8015c1a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015bf4:	2b01      	cmp	r3, #1
 8015bf6:	d008      	beq.n	8015c0a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015bf8:	2202      	movs	r2, #2
 8015bfa:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8015bfe:	4630      	mov	r0, r6
 8015c00:	f7fc fed6 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8015c04:	4020      	ands	r0, r4
 8015c06:	b2c0      	uxtb	r0, r0
 8015c08:	bd70      	pop	{r4, r5, r6, pc}
 8015c0a:	6869      	ldr	r1, [r5, #4]
 8015c0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c10:	4630      	mov	r0, r6
 8015c12:	f004 f93d 	bl	8019e90 <ucdr_deserialize_string>
 8015c16:	4604      	mov	r4, r0
 8015c18:	e7ee      	b.n	8015bf8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015c1a:	1d2b      	adds	r3, r5, #4
 8015c1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015c20:	f105 0108 	add.w	r1, r5, #8
 8015c24:	4630      	mov	r0, r6
 8015c26:	f7fd f80f 	bl	8012c48 <ucdr_deserialize_sequence_uint8_t>
 8015c2a:	4604      	mov	r4, r0
 8015c2c:	e7e4      	b.n	8015bf8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015c2e:	bf00      	nop

08015c30 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015c30:	b570      	push	{r4, r5, r6, lr}
 8015c32:	460d      	mov	r5, r1
 8015c34:	7809      	ldrb	r1, [r1, #0]
 8015c36:	4606      	mov	r6, r0
 8015c38:	f7f6 fe68 	bl	800c90c <ucdr_serialize_bool>
 8015c3c:	782b      	ldrb	r3, [r5, #0]
 8015c3e:	4604      	mov	r4, r0
 8015c40:	b94b      	cbnz	r3, 8015c56 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015c42:	7a29      	ldrb	r1, [r5, #8]
 8015c44:	4630      	mov	r0, r6
 8015c46:	f7f6 fe61 	bl	800c90c <ucdr_serialize_bool>
 8015c4a:	7a2b      	ldrb	r3, [r5, #8]
 8015c4c:	4004      	ands	r4, r0
 8015c4e:	b2e4      	uxtb	r4, r4
 8015c50:	b943      	cbnz	r3, 8015c64 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015c52:	4620      	mov	r0, r4
 8015c54:	bd70      	pop	{r4, r5, r6, pc}
 8015c56:	6869      	ldr	r1, [r5, #4]
 8015c58:	4630      	mov	r0, r6
 8015c5a:	f004 f909 	bl	8019e70 <ucdr_serialize_string>
 8015c5e:	4004      	ands	r4, r0
 8015c60:	b2e4      	uxtb	r4, r4
 8015c62:	e7ee      	b.n	8015c42 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015c64:	68e9      	ldr	r1, [r5, #12]
 8015c66:	4630      	mov	r0, r6
 8015c68:	f004 f902 	bl	8019e70 <ucdr_serialize_string>
 8015c6c:	4004      	ands	r4, r0
 8015c6e:	4620      	mov	r0, r4
 8015c70:	bd70      	pop	{r4, r5, r6, pc}
 8015c72:	bf00      	nop

08015c74 <uxr_serialize_OBJK_Topic_Binary>:
 8015c74:	b570      	push	{r4, r5, r6, lr}
 8015c76:	460d      	mov	r5, r1
 8015c78:	6809      	ldr	r1, [r1, #0]
 8015c7a:	4606      	mov	r6, r0
 8015c7c:	f004 f8f8 	bl	8019e70 <ucdr_serialize_string>
 8015c80:	7929      	ldrb	r1, [r5, #4]
 8015c82:	4604      	mov	r4, r0
 8015c84:	4630      	mov	r0, r6
 8015c86:	f7f6 fe41 	bl	800c90c <ucdr_serialize_bool>
 8015c8a:	792b      	ldrb	r3, [r5, #4]
 8015c8c:	4004      	ands	r4, r0
 8015c8e:	b2e4      	uxtb	r4, r4
 8015c90:	b943      	cbnz	r3, 8015ca4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015c92:	7b29      	ldrb	r1, [r5, #12]
 8015c94:	4630      	mov	r0, r6
 8015c96:	f7f6 fe39 	bl	800c90c <ucdr_serialize_bool>
 8015c9a:	7b2b      	ldrb	r3, [r5, #12]
 8015c9c:	4004      	ands	r4, r0
 8015c9e:	b93b      	cbnz	r3, 8015cb0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015ca0:	4620      	mov	r0, r4
 8015ca2:	bd70      	pop	{r4, r5, r6, pc}
 8015ca4:	68a9      	ldr	r1, [r5, #8]
 8015ca6:	4630      	mov	r0, r6
 8015ca8:	f004 f8e2 	bl	8019e70 <ucdr_serialize_string>
 8015cac:	4004      	ands	r4, r0
 8015cae:	e7f0      	b.n	8015c92 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015cb0:	6929      	ldr	r1, [r5, #16]
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	f004 f8dc 	bl	8019e70 <ucdr_serialize_string>
 8015cb8:	4004      	ands	r4, r0
 8015cba:	b2e4      	uxtb	r4, r4
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	bd70      	pop	{r4, r5, r6, pc}

08015cc0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc4:	460c      	mov	r4, r1
 8015cc6:	7809      	ldrb	r1, [r1, #0]
 8015cc8:	4606      	mov	r6, r0
 8015cca:	f7f6 fe1f 	bl	800c90c <ucdr_serialize_bool>
 8015cce:	7823      	ldrb	r3, [r4, #0]
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	b96b      	cbnz	r3, 8015cf0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015cd4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015cd8:	4630      	mov	r0, r6
 8015cda:	f7f6 fe17 	bl	800c90c <ucdr_serialize_bool>
 8015cde:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015ce2:	4005      	ands	r5, r0
 8015ce4:	b2ed      	uxtb	r5, r5
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d169      	bne.n	8015dbe <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015cea:	4628      	mov	r0, r5
 8015cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cf0:	6861      	ldr	r1, [r4, #4]
 8015cf2:	4630      	mov	r0, r6
 8015cf4:	f7f7 f84e 	bl	800cd94 <ucdr_serialize_uint32_t>
 8015cf8:	6863      	ldr	r3, [r4, #4]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d06b      	beq.n	8015dd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015cfe:	2800      	cmp	r0, #0
 8015d00:	d067      	beq.n	8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d02:	68a1      	ldr	r1, [r4, #8]
 8015d04:	4630      	mov	r0, r6
 8015d06:	f004 f8b3 	bl	8019e70 <ucdr_serialize_string>
 8015d0a:	6863      	ldr	r3, [r4, #4]
 8015d0c:	2b01      	cmp	r3, #1
 8015d0e:	d953      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d10:	2800      	cmp	r0, #0
 8015d12:	d05e      	beq.n	8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d14:	68e1      	ldr	r1, [r4, #12]
 8015d16:	4630      	mov	r0, r6
 8015d18:	f004 f8aa 	bl	8019e70 <ucdr_serialize_string>
 8015d1c:	6863      	ldr	r3, [r4, #4]
 8015d1e:	2b02      	cmp	r3, #2
 8015d20:	d94a      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d22:	2800      	cmp	r0, #0
 8015d24:	d055      	beq.n	8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d26:	6921      	ldr	r1, [r4, #16]
 8015d28:	4630      	mov	r0, r6
 8015d2a:	f004 f8a1 	bl	8019e70 <ucdr_serialize_string>
 8015d2e:	6863      	ldr	r3, [r4, #4]
 8015d30:	2b03      	cmp	r3, #3
 8015d32:	d941      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d34:	2800      	cmp	r0, #0
 8015d36:	d04c      	beq.n	8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d38:	6961      	ldr	r1, [r4, #20]
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	f004 f898 	bl	8019e70 <ucdr_serialize_string>
 8015d40:	6863      	ldr	r3, [r4, #4]
 8015d42:	2b04      	cmp	r3, #4
 8015d44:	d938      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d043      	beq.n	8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d4a:	69a1      	ldr	r1, [r4, #24]
 8015d4c:	4630      	mov	r0, r6
 8015d4e:	f004 f88f 	bl	8019e70 <ucdr_serialize_string>
 8015d52:	6863      	ldr	r3, [r4, #4]
 8015d54:	2b05      	cmp	r3, #5
 8015d56:	d92f      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d03a      	beq.n	8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d5c:	69e1      	ldr	r1, [r4, #28]
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f004 f886 	bl	8019e70 <ucdr_serialize_string>
 8015d64:	6863      	ldr	r3, [r4, #4]
 8015d66:	2b06      	cmp	r3, #6
 8015d68:	d926      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d6a:	b390      	cbz	r0, 8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d6c:	6a21      	ldr	r1, [r4, #32]
 8015d6e:	4630      	mov	r0, r6
 8015d70:	f004 f87e 	bl	8019e70 <ucdr_serialize_string>
 8015d74:	6863      	ldr	r3, [r4, #4]
 8015d76:	2b07      	cmp	r3, #7
 8015d78:	d91e      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d7a:	b350      	cbz	r0, 8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d7c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015d7e:	4630      	mov	r0, r6
 8015d80:	f004 f876 	bl	8019e70 <ucdr_serialize_string>
 8015d84:	6863      	ldr	r3, [r4, #4]
 8015d86:	2b08      	cmp	r3, #8
 8015d88:	d916      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d8a:	b310      	cbz	r0, 8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d8c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015d8e:	4630      	mov	r0, r6
 8015d90:	f004 f86e 	bl	8019e70 <ucdr_serialize_string>
 8015d94:	6863      	ldr	r3, [r4, #4]
 8015d96:	2b09      	cmp	r3, #9
 8015d98:	d90e      	bls.n	8015db8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015d9a:	b1d0      	cbz	r0, 8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015d9c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015da0:	2709      	movs	r7, #9
 8015da2:	e000      	b.n	8015da6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015da4:	b1a8      	cbz	r0, 8015dd2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015da6:	f858 1b04 	ldr.w	r1, [r8], #4
 8015daa:	4630      	mov	r0, r6
 8015dac:	f004 f860 	bl	8019e70 <ucdr_serialize_string>
 8015db0:	6862      	ldr	r2, [r4, #4]
 8015db2:	3701      	adds	r7, #1
 8015db4:	4297      	cmp	r7, r2
 8015db6:	d3f5      	bcc.n	8015da4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015db8:	4005      	ands	r5, r0
 8015dba:	b2ed      	uxtb	r5, r5
 8015dbc:	e78a      	b.n	8015cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015dbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015dc0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	f7fc ff2d 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8015dca:	4005      	ands	r5, r0
 8015dcc:	4628      	mov	r0, r5
 8015dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dd2:	2500      	movs	r5, #0
 8015dd4:	e77e      	b.n	8015cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015dd6:	4028      	ands	r0, r5
 8015dd8:	b2c5      	uxtb	r5, r0
 8015dda:	e77b      	b.n	8015cd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015ddc <uxr_serialize_OBJK_Publisher_Binary>:
 8015ddc:	b570      	push	{r4, r5, r6, lr}
 8015dde:	460d      	mov	r5, r1
 8015de0:	7809      	ldrb	r1, [r1, #0]
 8015de2:	4606      	mov	r6, r0
 8015de4:	f7f6 fd92 	bl	800c90c <ucdr_serialize_bool>
 8015de8:	782b      	ldrb	r3, [r5, #0]
 8015dea:	4604      	mov	r4, r0
 8015dec:	b94b      	cbnz	r3, 8015e02 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015dee:	7a29      	ldrb	r1, [r5, #8]
 8015df0:	4630      	mov	r0, r6
 8015df2:	f7f6 fd8b 	bl	800c90c <ucdr_serialize_bool>
 8015df6:	7a2b      	ldrb	r3, [r5, #8]
 8015df8:	4004      	ands	r4, r0
 8015dfa:	b2e4      	uxtb	r4, r4
 8015dfc:	b943      	cbnz	r3, 8015e10 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015dfe:	4620      	mov	r0, r4
 8015e00:	bd70      	pop	{r4, r5, r6, pc}
 8015e02:	6869      	ldr	r1, [r5, #4]
 8015e04:	4630      	mov	r0, r6
 8015e06:	f004 f833 	bl	8019e70 <ucdr_serialize_string>
 8015e0a:	4004      	ands	r4, r0
 8015e0c:	b2e4      	uxtb	r4, r4
 8015e0e:	e7ee      	b.n	8015dee <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015e10:	f105 010c 	add.w	r1, r5, #12
 8015e14:	4630      	mov	r0, r6
 8015e16:	f7ff ff53 	bl	8015cc0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015e1a:	4004      	ands	r4, r0
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	bd70      	pop	{r4, r5, r6, pc}

08015e20 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8015e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e24:	460c      	mov	r4, r1
 8015e26:	7809      	ldrb	r1, [r1, #0]
 8015e28:	4606      	mov	r6, r0
 8015e2a:	f7f6 fd6f 	bl	800c90c <ucdr_serialize_bool>
 8015e2e:	7823      	ldrb	r3, [r4, #0]
 8015e30:	4605      	mov	r5, r0
 8015e32:	b96b      	cbnz	r3, 8015e50 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8015e34:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8015e38:	4630      	mov	r0, r6
 8015e3a:	f7f6 fd67 	bl	800c90c <ucdr_serialize_bool>
 8015e3e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8015e42:	4005      	ands	r5, r0
 8015e44:	b2ed      	uxtb	r5, r5
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d169      	bne.n	8015f1e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e50:	6861      	ldr	r1, [r4, #4]
 8015e52:	4630      	mov	r0, r6
 8015e54:	f7f6 ff9e 	bl	800cd94 <ucdr_serialize_uint32_t>
 8015e58:	6863      	ldr	r3, [r4, #4]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d06b      	beq.n	8015f36 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	d067      	beq.n	8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015e62:	68a1      	ldr	r1, [r4, #8]
 8015e64:	4630      	mov	r0, r6
 8015e66:	f004 f803 	bl	8019e70 <ucdr_serialize_string>
 8015e6a:	6863      	ldr	r3, [r4, #4]
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d953      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d05e      	beq.n	8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015e74:	68e1      	ldr	r1, [r4, #12]
 8015e76:	4630      	mov	r0, r6
 8015e78:	f003 fffa 	bl	8019e70 <ucdr_serialize_string>
 8015e7c:	6863      	ldr	r3, [r4, #4]
 8015e7e:	2b02      	cmp	r3, #2
 8015e80:	d94a      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015e82:	2800      	cmp	r0, #0
 8015e84:	d055      	beq.n	8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015e86:	6921      	ldr	r1, [r4, #16]
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f003 fff1 	bl	8019e70 <ucdr_serialize_string>
 8015e8e:	6863      	ldr	r3, [r4, #4]
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d941      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015e94:	2800      	cmp	r0, #0
 8015e96:	d04c      	beq.n	8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015e98:	6961      	ldr	r1, [r4, #20]
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	f003 ffe8 	bl	8019e70 <ucdr_serialize_string>
 8015ea0:	6863      	ldr	r3, [r4, #4]
 8015ea2:	2b04      	cmp	r3, #4
 8015ea4:	d938      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	d043      	beq.n	8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015eaa:	69a1      	ldr	r1, [r4, #24]
 8015eac:	4630      	mov	r0, r6
 8015eae:	f003 ffdf 	bl	8019e70 <ucdr_serialize_string>
 8015eb2:	6863      	ldr	r3, [r4, #4]
 8015eb4:	2b05      	cmp	r3, #5
 8015eb6:	d92f      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d03a      	beq.n	8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ebc:	69e1      	ldr	r1, [r4, #28]
 8015ebe:	4630      	mov	r0, r6
 8015ec0:	f003 ffd6 	bl	8019e70 <ucdr_serialize_string>
 8015ec4:	6863      	ldr	r3, [r4, #4]
 8015ec6:	2b06      	cmp	r3, #6
 8015ec8:	d926      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015eca:	b390      	cbz	r0, 8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ecc:	6a21      	ldr	r1, [r4, #32]
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f003 ffce 	bl	8019e70 <ucdr_serialize_string>
 8015ed4:	6863      	ldr	r3, [r4, #4]
 8015ed6:	2b07      	cmp	r3, #7
 8015ed8:	d91e      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015eda:	b350      	cbz	r0, 8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015edc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8015ede:	4630      	mov	r0, r6
 8015ee0:	f003 ffc6 	bl	8019e70 <ucdr_serialize_string>
 8015ee4:	6863      	ldr	r3, [r4, #4]
 8015ee6:	2b08      	cmp	r3, #8
 8015ee8:	d916      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015eea:	b310      	cbz	r0, 8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015eec:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f003 ffbe 	bl	8019e70 <ucdr_serialize_string>
 8015ef4:	6863      	ldr	r3, [r4, #4]
 8015ef6:	2b09      	cmp	r3, #9
 8015ef8:	d90e      	bls.n	8015f18 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8015efa:	b1d0      	cbz	r0, 8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015efc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8015f00:	2709      	movs	r7, #9
 8015f02:	e000      	b.n	8015f06 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8015f04:	b1a8      	cbz	r0, 8015f32 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015f06:	f858 1b04 	ldr.w	r1, [r8], #4
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f003 ffb0 	bl	8019e70 <ucdr_serialize_string>
 8015f10:	6862      	ldr	r2, [r4, #4]
 8015f12:	3701      	adds	r7, #1
 8015f14:	4297      	cmp	r7, r2
 8015f16:	d3f5      	bcc.n	8015f04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8015f18:	4005      	ands	r5, r0
 8015f1a:	b2ed      	uxtb	r5, r5
 8015f1c:	e78a      	b.n	8015e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015f1e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015f20:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015f24:	4630      	mov	r0, r6
 8015f26:	f7fc fe7d 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8015f2a:	4005      	ands	r5, r0
 8015f2c:	4628      	mov	r0, r5
 8015f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f32:	2500      	movs	r5, #0
 8015f34:	e77e      	b.n	8015e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8015f36:	4028      	ands	r0, r5
 8015f38:	b2c5      	uxtb	r5, r0
 8015f3a:	e77b      	b.n	8015e34 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08015f3c <uxr_serialize_OBJK_Subscriber_Binary>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	460d      	mov	r5, r1
 8015f40:	7809      	ldrb	r1, [r1, #0]
 8015f42:	4606      	mov	r6, r0
 8015f44:	f7f6 fce2 	bl	800c90c <ucdr_serialize_bool>
 8015f48:	782b      	ldrb	r3, [r5, #0]
 8015f4a:	4604      	mov	r4, r0
 8015f4c:	b94b      	cbnz	r3, 8015f62 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8015f4e:	7a29      	ldrb	r1, [r5, #8]
 8015f50:	4630      	mov	r0, r6
 8015f52:	f7f6 fcdb 	bl	800c90c <ucdr_serialize_bool>
 8015f56:	7a2b      	ldrb	r3, [r5, #8]
 8015f58:	4004      	ands	r4, r0
 8015f5a:	b2e4      	uxtb	r4, r4
 8015f5c:	b943      	cbnz	r3, 8015f70 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8015f5e:	4620      	mov	r0, r4
 8015f60:	bd70      	pop	{r4, r5, r6, pc}
 8015f62:	6869      	ldr	r1, [r5, #4]
 8015f64:	4630      	mov	r0, r6
 8015f66:	f003 ff83 	bl	8019e70 <ucdr_serialize_string>
 8015f6a:	4004      	ands	r4, r0
 8015f6c:	b2e4      	uxtb	r4, r4
 8015f6e:	e7ee      	b.n	8015f4e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8015f70:	f105 010c 	add.w	r1, r5, #12
 8015f74:	4630      	mov	r0, r6
 8015f76:	f7ff ff53 	bl	8015e20 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8015f7a:	4004      	ands	r4, r0
 8015f7c:	4620      	mov	r0, r4
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}

08015f80 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8015f80:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8015f84:	4688      	mov	r8, r1
 8015f86:	8809      	ldrh	r1, [r1, #0]
 8015f88:	4681      	mov	r9, r0
 8015f8a:	f7f6 fd19 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8015f8e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015f92:	4606      	mov	r6, r0
 8015f94:	4648      	mov	r0, r9
 8015f96:	f7f6 fcb9 	bl	800c90c <ucdr_serialize_bool>
 8015f9a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015f9e:	4006      	ands	r6, r0
 8015fa0:	b2f5      	uxtb	r5, r6
 8015fa2:	b9eb      	cbnz	r3, 8015fe0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015fa4:	f898 1006 	ldrb.w	r1, [r8, #6]
 8015fa8:	4648      	mov	r0, r9
 8015faa:	f7f6 fcaf 	bl	800c90c <ucdr_serialize_bool>
 8015fae:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015fb2:	4005      	ands	r5, r0
 8015fb4:	bb7b      	cbnz	r3, 8016016 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8015fb6:	f898 100c 	ldrb.w	r1, [r8, #12]
 8015fba:	4648      	mov	r0, r9
 8015fbc:	f7f6 fca6 	bl	800c90c <ucdr_serialize_bool>
 8015fc0:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015fc4:	4005      	ands	r5, r0
 8015fc6:	b9f3      	cbnz	r3, 8016006 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8015fc8:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015fcc:	4648      	mov	r0, r9
 8015fce:	f7f6 fc9d 	bl	800c90c <ucdr_serialize_bool>
 8015fd2:	f898 3014 	ldrb.w	r3, [r8, #20]
 8015fd6:	4005      	ands	r5, r0
 8015fd8:	b94b      	cbnz	r3, 8015fee <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8015fda:	4628      	mov	r0, r5
 8015fdc:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015fe0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015fe4:	4648      	mov	r0, r9
 8015fe6:	f7f6 fceb 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8015fea:	4005      	ands	r5, r0
 8015fec:	e7da      	b.n	8015fa4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015fee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015ff2:	f108 011c 	add.w	r1, r8, #28
 8015ff6:	4648      	mov	r0, r9
 8015ff8:	f7fc fe14 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8015ffc:	4028      	ands	r0, r5
 8015ffe:	b2c5      	uxtb	r5, r0
 8016000:	4628      	mov	r0, r5
 8016002:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8016006:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801600a:	4648      	mov	r0, r9
 801600c:	f7f6 fec2 	bl	800cd94 <ucdr_serialize_uint32_t>
 8016010:	4028      	ands	r0, r5
 8016012:	b2c5      	uxtb	r5, r0
 8016014:	e7d8      	b.n	8015fc8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8016016:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801601a:	4648      	mov	r0, r9
 801601c:	f7f6 feba 	bl	800cd94 <ucdr_serialize_uint32_t>
 8016020:	4028      	ands	r0, r5
 8016022:	b2c5      	uxtb	r5, r0
 8016024:	e7c7      	b.n	8015fb6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8016026:	bf00      	nop

08016028 <uxr_serialize_OBJK_DataReader_Binary>:
 8016028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801602a:	2202      	movs	r2, #2
 801602c:	460c      	mov	r4, r1
 801602e:	4606      	mov	r6, r0
 8016030:	f7fc fc5a 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016034:	78a1      	ldrb	r1, [r4, #2]
 8016036:	4605      	mov	r5, r0
 8016038:	4630      	mov	r0, r6
 801603a:	f7f6 fc67 	bl	800c90c <ucdr_serialize_bool>
 801603e:	78a3      	ldrb	r3, [r4, #2]
 8016040:	4005      	ands	r5, r0
 8016042:	b2ed      	uxtb	r5, r5
 8016044:	b90b      	cbnz	r3, 801604a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8016046:	4628      	mov	r0, r5
 8016048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801604a:	f104 0108 	add.w	r1, r4, #8
 801604e:	4630      	mov	r0, r6
 8016050:	f7ff ff96 	bl	8015f80 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8016054:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8016058:	4607      	mov	r7, r0
 801605a:	4630      	mov	r0, r6
 801605c:	f7f6 fc56 	bl	800c90c <ucdr_serialize_bool>
 8016060:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8016064:	4038      	ands	r0, r7
 8016066:	b2c7      	uxtb	r7, r0
 8016068:	b95b      	cbnz	r3, 8016082 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801606a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801606e:	4630      	mov	r0, r6
 8016070:	f7f6 fc4c 	bl	800c90c <ucdr_serialize_bool>
 8016074:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8016078:	4007      	ands	r7, r0
 801607a:	b94b      	cbnz	r3, 8016090 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801607c:	403d      	ands	r5, r7
 801607e:	4628      	mov	r0, r5
 8016080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016082:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8016086:	4630      	mov	r0, r6
 8016088:	f7f7 f8da 	bl	800d240 <ucdr_serialize_uint64_t>
 801608c:	4007      	ands	r7, r0
 801608e:	e7ec      	b.n	801606a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8016090:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8016092:	4630      	mov	r0, r6
 8016094:	f003 feec 	bl	8019e70 <ucdr_serialize_string>
 8016098:	4007      	ands	r7, r0
 801609a:	b2ff      	uxtb	r7, r7
 801609c:	e7ee      	b.n	801607c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801609e:	bf00      	nop

080160a0 <uxr_serialize_OBJK_DataWriter_Binary>:
 80160a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160a2:	2202      	movs	r2, #2
 80160a4:	460d      	mov	r5, r1
 80160a6:	4606      	mov	r6, r0
 80160a8:	f7fc fc1e 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80160ac:	78a9      	ldrb	r1, [r5, #2]
 80160ae:	4604      	mov	r4, r0
 80160b0:	4630      	mov	r0, r6
 80160b2:	f7f6 fc2b 	bl	800c90c <ucdr_serialize_bool>
 80160b6:	78ab      	ldrb	r3, [r5, #2]
 80160b8:	4004      	ands	r4, r0
 80160ba:	b2e4      	uxtb	r4, r4
 80160bc:	b90b      	cbnz	r3, 80160c2 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80160be:	4620      	mov	r0, r4
 80160c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160c2:	f105 0108 	add.w	r1, r5, #8
 80160c6:	4630      	mov	r0, r6
 80160c8:	f7ff ff5a 	bl	8015f80 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80160cc:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80160d0:	4607      	mov	r7, r0
 80160d2:	4630      	mov	r0, r6
 80160d4:	f7f6 fc1a 	bl	800c90c <ucdr_serialize_bool>
 80160d8:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80160dc:	4038      	ands	r0, r7
 80160de:	b2c7      	uxtb	r7, r0
 80160e0:	b913      	cbnz	r3, 80160e8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80160e2:	403c      	ands	r4, r7
 80160e4:	4620      	mov	r0, r4
 80160e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160e8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80160ec:	4630      	mov	r0, r6
 80160ee:	f7f7 f8a7 	bl	800d240 <ucdr_serialize_uint64_t>
 80160f2:	4007      	ands	r7, r0
 80160f4:	e7f5      	b.n	80160e2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80160f6:	bf00      	nop

080160f8 <uxr_deserialize_ObjectVariant>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	4605      	mov	r5, r0
 80160fc:	460e      	mov	r6, r1
 80160fe:	f7f6 fc49 	bl	800c994 <ucdr_deserialize_uint8_t>
 8016102:	b168      	cbz	r0, 8016120 <uxr_deserialize_ObjectVariant+0x28>
 8016104:	7833      	ldrb	r3, [r6, #0]
 8016106:	3b01      	subs	r3, #1
 8016108:	4604      	mov	r4, r0
 801610a:	2b0d      	cmp	r3, #13
 801610c:	d809      	bhi.n	8016122 <uxr_deserialize_ObjectVariant+0x2a>
 801610e:	e8df f003 	tbb	[pc, r3]
 8016112:	0a41      	.short	0x0a41
 8016114:	0a0a2323 	.word	0x0a0a2323
 8016118:	10080a0a 	.word	0x10080a0a
 801611c:	565c1010 	.word	0x565c1010
 8016120:	2400      	movs	r4, #0
 8016122:	4620      	mov	r0, r4
 8016124:	bd70      	pop	{r4, r5, r6, pc}
 8016126:	1d31      	adds	r1, r6, #4
 8016128:	4628      	mov	r0, r5
 801612a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801612e:	f7ff bd55 	b.w	8015bdc <uxr_deserialize_DATAWRITER_Representation>
 8016132:	1d31      	adds	r1, r6, #4
 8016134:	4628      	mov	r0, r5
 8016136:	f7f6 fc2d 	bl	800c994 <ucdr_deserialize_uint8_t>
 801613a:	2800      	cmp	r0, #0
 801613c:	d0f0      	beq.n	8016120 <uxr_deserialize_ObjectVariant+0x28>
 801613e:	7933      	ldrb	r3, [r6, #4]
 8016140:	2b01      	cmp	r3, #1
 8016142:	d001      	beq.n	8016148 <uxr_deserialize_ObjectVariant+0x50>
 8016144:	2b02      	cmp	r3, #2
 8016146:	d1ec      	bne.n	8016122 <uxr_deserialize_ObjectVariant+0x2a>
 8016148:	68b1      	ldr	r1, [r6, #8]
 801614a:	4628      	mov	r0, r5
 801614c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016154:	f003 be9c 	b.w	8019e90 <ucdr_deserialize_string>
 8016158:	1d31      	adds	r1, r6, #4
 801615a:	4628      	mov	r0, r5
 801615c:	f7f6 fc1a 	bl	800c994 <ucdr_deserialize_uint8_t>
 8016160:	4604      	mov	r4, r0
 8016162:	b170      	cbz	r0, 8016182 <uxr_deserialize_ObjectVariant+0x8a>
 8016164:	7933      	ldrb	r3, [r6, #4]
 8016166:	2b02      	cmp	r3, #2
 8016168:	d04c      	beq.n	8016204 <uxr_deserialize_ObjectVariant+0x10c>
 801616a:	2b03      	cmp	r3, #3
 801616c:	d109      	bne.n	8016182 <uxr_deserialize_ObjectVariant+0x8a>
 801616e:	f106 0308 	add.w	r3, r6, #8
 8016172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016176:	f106 010c 	add.w	r1, r6, #12
 801617a:	4628      	mov	r0, r5
 801617c:	f7fc fd64 	bl	8012c48 <ucdr_deserialize_sequence_uint8_t>
 8016180:	4604      	mov	r4, r0
 8016182:	2202      	movs	r2, #2
 8016184:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8016188:	4628      	mov	r0, r5
 801618a:	f7fc fc11 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 801618e:	4020      	ands	r0, r4
 8016190:	b2c4      	uxtb	r4, r0
 8016192:	e7c6      	b.n	8016122 <uxr_deserialize_ObjectVariant+0x2a>
 8016194:	1d31      	adds	r1, r6, #4
 8016196:	4628      	mov	r0, r5
 8016198:	f7f6 fbfc 	bl	800c994 <ucdr_deserialize_uint8_t>
 801619c:	4604      	mov	r4, r0
 801619e:	b130      	cbz	r0, 80161ae <uxr_deserialize_ObjectVariant+0xb6>
 80161a0:	7933      	ldrb	r3, [r6, #4]
 80161a2:	2b02      	cmp	r3, #2
 80161a4:	d036      	beq.n	8016214 <uxr_deserialize_ObjectVariant+0x11c>
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	d03c      	beq.n	8016224 <uxr_deserialize_ObjectVariant+0x12c>
 80161aa:	2b01      	cmp	r3, #1
 80161ac:	d032      	beq.n	8016214 <uxr_deserialize_ObjectVariant+0x11c>
 80161ae:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80161b2:	4628      	mov	r0, r5
 80161b4:	f7f7 f994 	bl	800d4e0 <ucdr_deserialize_int16_t>
 80161b8:	4020      	ands	r0, r4
 80161ba:	b2c4      	uxtb	r4, r0
 80161bc:	e7b1      	b.n	8016122 <uxr_deserialize_ObjectVariant+0x2a>
 80161be:	1d31      	adds	r1, r6, #4
 80161c0:	4628      	mov	r0, r5
 80161c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80161c6:	f7ff bbbf 	b.w	8015948 <uxr_deserialize_CLIENT_Representation>
 80161ca:	2204      	movs	r2, #4
 80161cc:	18b1      	adds	r1, r6, r2
 80161ce:	4628      	mov	r0, r5
 80161d0:	f7fc fbee 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80161d4:	2202      	movs	r2, #2
 80161d6:	f106 0108 	add.w	r1, r6, #8
 80161da:	4604      	mov	r4, r0
 80161dc:	4628      	mov	r0, r5
 80161de:	f7fc fbe7 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80161e2:	2202      	movs	r2, #2
 80161e4:	4004      	ands	r4, r0
 80161e6:	f106 010a 	add.w	r1, r6, #10
 80161ea:	4628      	mov	r0, r5
 80161ec:	f7fc fbe0 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80161f0:	b2e4      	uxtb	r4, r4
 80161f2:	4603      	mov	r3, r0
 80161f4:	f106 010c 	add.w	r1, r6, #12
 80161f8:	4628      	mov	r0, r5
 80161fa:	401c      	ands	r4, r3
 80161fc:	f7f6 fb9c 	bl	800c938 <ucdr_deserialize_bool>
 8016200:	4004      	ands	r4, r0
 8016202:	e78e      	b.n	8016122 <uxr_deserialize_ObjectVariant+0x2a>
 8016204:	68b1      	ldr	r1, [r6, #8]
 8016206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801620a:	4628      	mov	r0, r5
 801620c:	f003 fe40 	bl	8019e90 <ucdr_deserialize_string>
 8016210:	4604      	mov	r4, r0
 8016212:	e7b6      	b.n	8016182 <uxr_deserialize_ObjectVariant+0x8a>
 8016214:	68b1      	ldr	r1, [r6, #8]
 8016216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801621a:	4628      	mov	r0, r5
 801621c:	f003 fe38 	bl	8019e90 <ucdr_deserialize_string>
 8016220:	4604      	mov	r4, r0
 8016222:	e7c4      	b.n	80161ae <uxr_deserialize_ObjectVariant+0xb6>
 8016224:	f106 0308 	add.w	r3, r6, #8
 8016228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801622c:	f106 010c 	add.w	r1, r6, #12
 8016230:	4628      	mov	r0, r5
 8016232:	f7fc fd09 	bl	8012c48 <ucdr_deserialize_sequence_uint8_t>
 8016236:	4604      	mov	r4, r0
 8016238:	e7b9      	b.n	80161ae <uxr_deserialize_ObjectVariant+0xb6>
 801623a:	bf00      	nop

0801623c <uxr_deserialize_BaseObjectRequest>:
 801623c:	b570      	push	{r4, r5, r6, lr}
 801623e:	2202      	movs	r2, #2
 8016240:	4605      	mov	r5, r0
 8016242:	460e      	mov	r6, r1
 8016244:	f7fc fbb4 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8016248:	2202      	movs	r2, #2
 801624a:	4604      	mov	r4, r0
 801624c:	18b1      	adds	r1, r6, r2
 801624e:	4628      	mov	r0, r5
 8016250:	f7fc fbae 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8016254:	4020      	ands	r0, r4
 8016256:	b2c0      	uxtb	r0, r0
 8016258:	bd70      	pop	{r4, r5, r6, pc}
 801625a:	bf00      	nop

0801625c <uxr_serialize_ActivityInfoVariant>:
 801625c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016260:	460d      	mov	r5, r1
 8016262:	7809      	ldrb	r1, [r1, #0]
 8016264:	4607      	mov	r7, r0
 8016266:	f7f6 fb7f 	bl	800c968 <ucdr_serialize_uint8_t>
 801626a:	4681      	mov	r9, r0
 801626c:	b138      	cbz	r0, 801627e <uxr_serialize_ActivityInfoVariant+0x22>
 801626e:	782b      	ldrb	r3, [r5, #0]
 8016270:	2b06      	cmp	r3, #6
 8016272:	f000 8082 	beq.w	801637a <uxr_serialize_ActivityInfoVariant+0x11e>
 8016276:	2b0d      	cmp	r3, #13
 8016278:	d016      	beq.n	80162a8 <uxr_serialize_ActivityInfoVariant+0x4c>
 801627a:	2b05      	cmp	r3, #5
 801627c:	d002      	beq.n	8016284 <uxr_serialize_ActivityInfoVariant+0x28>
 801627e:	4648      	mov	r0, r9
 8016280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016284:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8016288:	4638      	mov	r0, r7
 801628a:	f7f7 f8a9 	bl	800d3e0 <ucdr_serialize_int16_t>
 801628e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8016292:	4681      	mov	r9, r0
 8016294:	4638      	mov	r0, r7
 8016296:	f7f6 ffd3 	bl	800d240 <ucdr_serialize_uint64_t>
 801629a:	ea09 0000 	and.w	r0, r9, r0
 801629e:	fa5f f980 	uxtb.w	r9, r0
 80162a2:	4648      	mov	r0, r9
 80162a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162a8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80162ac:	4638      	mov	r0, r7
 80162ae:	f7f7 f897 	bl	800d3e0 <ucdr_serialize_int16_t>
 80162b2:	68e9      	ldr	r1, [r5, #12]
 80162b4:	4681      	mov	r9, r0
 80162b6:	4638      	mov	r0, r7
 80162b8:	f7f6 fd6c 	bl	800cd94 <ucdr_serialize_uint32_t>
 80162bc:	68eb      	ldr	r3, [r5, #12]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d0eb      	beq.n	801629a <uxr_serialize_ActivityInfoVariant+0x3e>
 80162c2:	b320      	cbz	r0, 801630e <uxr_serialize_ActivityInfoVariant+0xb2>
 80162c4:	f105 080c 	add.w	r8, r5, #12
 80162c8:	2600      	movs	r6, #0
 80162ca:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80162ce:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80162d2:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80162d6:	4638      	mov	r0, r7
 80162d8:	f7f6 fb46 	bl	800c968 <ucdr_serialize_uint8_t>
 80162dc:	2800      	cmp	r0, #0
 80162de:	d053      	beq.n	8016388 <uxr_serialize_ActivityInfoVariant+0x12c>
 80162e0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80162e4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80162e8:	0074      	lsls	r4, r6, #1
 80162ea:	00c9      	lsls	r1, r1, #3
 80162ec:	2b03      	cmp	r3, #3
 80162ee:	d854      	bhi.n	801639a <uxr_serialize_ActivityInfoVariant+0x13e>
 80162f0:	e8df f003 	tbb	[pc, r3]
 80162f4:	02102132 	.word	0x02102132
 80162f8:	4441      	add	r1, r8
 80162fa:	4638      	mov	r0, r7
 80162fc:	6889      	ldr	r1, [r1, #8]
 80162fe:	f003 fdb7 	bl	8019e70 <ucdr_serialize_string>
 8016302:	68ea      	ldr	r2, [r5, #12]
 8016304:	3601      	adds	r6, #1
 8016306:	4296      	cmp	r6, r2
 8016308:	d242      	bcs.n	8016390 <uxr_serialize_ActivityInfoVariant+0x134>
 801630a:	2800      	cmp	r0, #0
 801630c:	d1dd      	bne.n	80162ca <uxr_serialize_ActivityInfoVariant+0x6e>
 801630e:	f04f 0900 	mov.w	r9, #0
 8016312:	e7b4      	b.n	801627e <uxr_serialize_ActivityInfoVariant+0x22>
 8016314:	3108      	adds	r1, #8
 8016316:	4441      	add	r1, r8
 8016318:	2210      	movs	r2, #16
 801631a:	4638      	mov	r0, r7
 801631c:	f7fc fae4 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016320:	4434      	add	r4, r6
 8016322:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8016326:	4604      	mov	r4, r0
 8016328:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801632a:	4638      	mov	r0, r7
 801632c:	f7f6 fd32 	bl	800cd94 <ucdr_serialize_uint32_t>
 8016330:	4020      	ands	r0, r4
 8016332:	b2c0      	uxtb	r0, r0
 8016334:	e7e5      	b.n	8016302 <uxr_serialize_ActivityInfoVariant+0xa6>
 8016336:	3108      	adds	r1, #8
 8016338:	4441      	add	r1, r8
 801633a:	2204      	movs	r2, #4
 801633c:	4638      	mov	r0, r7
 801633e:	f7fc fad3 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016342:	4434      	add	r4, r6
 8016344:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8016348:	4604      	mov	r4, r0
 801634a:	8b19      	ldrh	r1, [r3, #24]
 801634c:	4638      	mov	r0, r7
 801634e:	f7f6 fb37 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8016352:	4020      	ands	r0, r4
 8016354:	b2c0      	uxtb	r0, r0
 8016356:	e7d4      	b.n	8016302 <uxr_serialize_ActivityInfoVariant+0xa6>
 8016358:	3108      	adds	r1, #8
 801635a:	4441      	add	r1, r8
 801635c:	2202      	movs	r2, #2
 801635e:	4638      	mov	r0, r7
 8016360:	f7fc fac2 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016364:	4434      	add	r4, r6
 8016366:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801636a:	4604      	mov	r4, r0
 801636c:	7d99      	ldrb	r1, [r3, #22]
 801636e:	4638      	mov	r0, r7
 8016370:	f7f6 fafa 	bl	800c968 <ucdr_serialize_uint8_t>
 8016374:	4020      	ands	r0, r4
 8016376:	b2c0      	uxtb	r0, r0
 8016378:	e7c3      	b.n	8016302 <uxr_serialize_ActivityInfoVariant+0xa6>
 801637a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801637e:	4638      	mov	r0, r7
 8016380:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016384:	f7f7 b82c 	b.w	800d3e0 <ucdr_serialize_int16_t>
 8016388:	68ea      	ldr	r2, [r5, #12]
 801638a:	3601      	adds	r6, #1
 801638c:	42b2      	cmp	r2, r6
 801638e:	d8be      	bhi.n	801630e <uxr_serialize_ActivityInfoVariant+0xb2>
 8016390:	ea09 0900 	and.w	r9, r9, r0
 8016394:	fa5f f989 	uxtb.w	r9, r9
 8016398:	e771      	b.n	801627e <uxr_serialize_ActivityInfoVariant+0x22>
 801639a:	68eb      	ldr	r3, [r5, #12]
 801639c:	3601      	adds	r6, #1
 801639e:	429e      	cmp	r6, r3
 80163a0:	f10a 0a18 	add.w	sl, sl, #24
 80163a4:	d395      	bcc.n	80162d2 <uxr_serialize_ActivityInfoVariant+0x76>
 80163a6:	e76a      	b.n	801627e <uxr_serialize_ActivityInfoVariant+0x22>

080163a8 <uxr_deserialize_BaseObjectReply>:
 80163a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ac:	2202      	movs	r2, #2
 80163ae:	4606      	mov	r6, r0
 80163b0:	460f      	mov	r7, r1
 80163b2:	f7fc fafd 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80163b6:	2202      	movs	r2, #2
 80163b8:	18b9      	adds	r1, r7, r2
 80163ba:	4605      	mov	r5, r0
 80163bc:	4630      	mov	r0, r6
 80163be:	f7fc faf7 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80163c2:	1d39      	adds	r1, r7, #4
 80163c4:	4680      	mov	r8, r0
 80163c6:	4630      	mov	r0, r6
 80163c8:	f7f6 fae4 	bl	800c994 <ucdr_deserialize_uint8_t>
 80163cc:	1d79      	adds	r1, r7, #5
 80163ce:	4604      	mov	r4, r0
 80163d0:	4630      	mov	r0, r6
 80163d2:	f7f6 fadf 	bl	800c994 <ucdr_deserialize_uint8_t>
 80163d6:	ea05 0508 	and.w	r5, r5, r8
 80163da:	402c      	ands	r4, r5
 80163dc:	4020      	ands	r0, r4
 80163de:	b2c0      	uxtb	r0, r0
 80163e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163e4 <uxr_serialize_ReadSpecification>:
 80163e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e8:	460e      	mov	r6, r1
 80163ea:	7809      	ldrb	r1, [r1, #0]
 80163ec:	4607      	mov	r7, r0
 80163ee:	f7f6 fabb 	bl	800c968 <ucdr_serialize_uint8_t>
 80163f2:	7871      	ldrb	r1, [r6, #1]
 80163f4:	4604      	mov	r4, r0
 80163f6:	4638      	mov	r0, r7
 80163f8:	f7f6 fab6 	bl	800c968 <ucdr_serialize_uint8_t>
 80163fc:	78b1      	ldrb	r1, [r6, #2]
 80163fe:	4004      	ands	r4, r0
 8016400:	4638      	mov	r0, r7
 8016402:	f7f6 fa83 	bl	800c90c <ucdr_serialize_bool>
 8016406:	78b3      	ldrb	r3, [r6, #2]
 8016408:	b2e4      	uxtb	r4, r4
 801640a:	4004      	ands	r4, r0
 801640c:	b94b      	cbnz	r3, 8016422 <uxr_serialize_ReadSpecification+0x3e>
 801640e:	7a31      	ldrb	r1, [r6, #8]
 8016410:	4638      	mov	r0, r7
 8016412:	f7f6 fa7b 	bl	800c90c <ucdr_serialize_bool>
 8016416:	7a33      	ldrb	r3, [r6, #8]
 8016418:	4004      	ands	r4, r0
 801641a:	b943      	cbnz	r3, 801642e <uxr_serialize_ReadSpecification+0x4a>
 801641c:	4620      	mov	r0, r4
 801641e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016422:	6871      	ldr	r1, [r6, #4]
 8016424:	4638      	mov	r0, r7
 8016426:	f003 fd23 	bl	8019e70 <ucdr_serialize_string>
 801642a:	4004      	ands	r4, r0
 801642c:	e7ef      	b.n	801640e <uxr_serialize_ReadSpecification+0x2a>
 801642e:	8971      	ldrh	r1, [r6, #10]
 8016430:	4638      	mov	r0, r7
 8016432:	f7f6 fac5 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8016436:	89b1      	ldrh	r1, [r6, #12]
 8016438:	4605      	mov	r5, r0
 801643a:	4638      	mov	r0, r7
 801643c:	f7f6 fac0 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8016440:	89f1      	ldrh	r1, [r6, #14]
 8016442:	4005      	ands	r5, r0
 8016444:	4638      	mov	r0, r7
 8016446:	f7f6 fabb 	bl	800c9c0 <ucdr_serialize_uint16_t>
 801644a:	8a31      	ldrh	r1, [r6, #16]
 801644c:	4680      	mov	r8, r0
 801644e:	4638      	mov	r0, r7
 8016450:	f7f6 fab6 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8016454:	b2ed      	uxtb	r5, r5
 8016456:	4025      	ands	r5, r4
 8016458:	ea08 0505 	and.w	r5, r8, r5
 801645c:	ea00 0405 	and.w	r4, r0, r5
 8016460:	4620      	mov	r0, r4
 8016462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016466:	bf00      	nop

08016468 <uxr_serialize_CREATE_CLIENT_Payload>:
 8016468:	f7ff ba16 	b.w	8015898 <uxr_serialize_CLIENT_Representation>

0801646c <uxr_serialize_CREATE_Payload>:
 801646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801646e:	2202      	movs	r2, #2
 8016470:	4607      	mov	r7, r0
 8016472:	460e      	mov	r6, r1
 8016474:	f7fc fa38 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016478:	2202      	movs	r2, #2
 801647a:	18b1      	adds	r1, r6, r2
 801647c:	4605      	mov	r5, r0
 801647e:	4638      	mov	r0, r7
 8016480:	f7fc fa32 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016484:	7931      	ldrb	r1, [r6, #4]
 8016486:	4604      	mov	r4, r0
 8016488:	4638      	mov	r0, r7
 801648a:	f7f6 fa6d 	bl	800c968 <ucdr_serialize_uint8_t>
 801648e:	b170      	cbz	r0, 80164ae <uxr_serialize_CREATE_Payload+0x42>
 8016490:	7933      	ldrb	r3, [r6, #4]
 8016492:	402c      	ands	r4, r5
 8016494:	3b01      	subs	r3, #1
 8016496:	b2e4      	uxtb	r4, r4
 8016498:	2b0d      	cmp	r3, #13
 801649a:	d809      	bhi.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 801649c:	e8df f003 	tbb	[pc, r3]
 80164a0:	23230a4c 	.word	0x23230a4c
 80164a4:	0a0a0a0a 	.word	0x0a0a0a0a
 80164a8:	12121208 	.word	0x12121208
 80164ac:	3e45      	.short	0x3e45
 80164ae:	2400      	movs	r4, #0
 80164b0:	4620      	mov	r0, r4
 80164b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164b4:	f106 0108 	add.w	r1, r6, #8
 80164b8:	4638      	mov	r0, r7
 80164ba:	f7ff faf3 	bl	8015aa4 <uxr_serialize_DATAWRITER_Representation>
 80164be:	4004      	ands	r4, r0
 80164c0:	4620      	mov	r0, r4
 80164c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164c4:	7a31      	ldrb	r1, [r6, #8]
 80164c6:	4638      	mov	r0, r7
 80164c8:	f7f6 fa4e 	bl	800c968 <ucdr_serialize_uint8_t>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d0ee      	beq.n	80164ae <uxr_serialize_CREATE_Payload+0x42>
 80164d0:	7a33      	ldrb	r3, [r6, #8]
 80164d2:	2b01      	cmp	r3, #1
 80164d4:	d001      	beq.n	80164da <uxr_serialize_CREATE_Payload+0x6e>
 80164d6:	2b02      	cmp	r3, #2
 80164d8:	d1ea      	bne.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 80164da:	68f1      	ldr	r1, [r6, #12]
 80164dc:	4638      	mov	r0, r7
 80164de:	f003 fcc7 	bl	8019e70 <ucdr_serialize_string>
 80164e2:	4004      	ands	r4, r0
 80164e4:	e7e4      	b.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 80164e6:	7a31      	ldrb	r1, [r6, #8]
 80164e8:	4638      	mov	r0, r7
 80164ea:	f7f6 fa3d 	bl	800c968 <ucdr_serialize_uint8_t>
 80164ee:	4605      	mov	r5, r0
 80164f0:	b158      	cbz	r0, 801650a <uxr_serialize_CREATE_Payload+0x9e>
 80164f2:	7a33      	ldrb	r3, [r6, #8]
 80164f4:	2b02      	cmp	r3, #2
 80164f6:	d034      	beq.n	8016562 <uxr_serialize_CREATE_Payload+0xf6>
 80164f8:	2b03      	cmp	r3, #3
 80164fa:	d106      	bne.n	801650a <uxr_serialize_CREATE_Payload+0x9e>
 80164fc:	68f2      	ldr	r2, [r6, #12]
 80164fe:	f106 0110 	add.w	r1, r6, #16
 8016502:	4638      	mov	r0, r7
 8016504:	f7fc fb8e 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8016508:	4605      	mov	r5, r0
 801650a:	2202      	movs	r2, #2
 801650c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8016510:	4638      	mov	r0, r7
 8016512:	f7fc f9e9 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016516:	4028      	ands	r0, r5
 8016518:	4004      	ands	r4, r0
 801651a:	e7c9      	b.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 801651c:	f106 0108 	add.w	r1, r6, #8
 8016520:	4638      	mov	r0, r7
 8016522:	f7ff f9b9 	bl	8015898 <uxr_serialize_CLIENT_Representation>
 8016526:	4004      	ands	r4, r0
 8016528:	e7c2      	b.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 801652a:	f106 0108 	add.w	r1, r6, #8
 801652e:	4638      	mov	r0, r7
 8016530:	f7ff fa6e 	bl	8015a10 <uxr_serialize_AGENT_Representation>
 8016534:	4004      	ands	r4, r0
 8016536:	e7bb      	b.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 8016538:	7a31      	ldrb	r1, [r6, #8]
 801653a:	4638      	mov	r0, r7
 801653c:	f7f6 fa14 	bl	800c968 <ucdr_serialize_uint8_t>
 8016540:	4605      	mov	r5, r0
 8016542:	b130      	cbz	r0, 8016552 <uxr_serialize_CREATE_Payload+0xe6>
 8016544:	7a33      	ldrb	r3, [r6, #8]
 8016546:	2b02      	cmp	r3, #2
 8016548:	d011      	beq.n	801656e <uxr_serialize_CREATE_Payload+0x102>
 801654a:	2b03      	cmp	r3, #3
 801654c:	d015      	beq.n	801657a <uxr_serialize_CREATE_Payload+0x10e>
 801654e:	2b01      	cmp	r3, #1
 8016550:	d00d      	beq.n	801656e <uxr_serialize_CREATE_Payload+0x102>
 8016552:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8016556:	4638      	mov	r0, r7
 8016558:	f7f6 ff42 	bl	800d3e0 <ucdr_serialize_int16_t>
 801655c:	4028      	ands	r0, r5
 801655e:	4004      	ands	r4, r0
 8016560:	e7a6      	b.n	80164b0 <uxr_serialize_CREATE_Payload+0x44>
 8016562:	68f1      	ldr	r1, [r6, #12]
 8016564:	4638      	mov	r0, r7
 8016566:	f003 fc83 	bl	8019e70 <ucdr_serialize_string>
 801656a:	4605      	mov	r5, r0
 801656c:	e7cd      	b.n	801650a <uxr_serialize_CREATE_Payload+0x9e>
 801656e:	68f1      	ldr	r1, [r6, #12]
 8016570:	4638      	mov	r0, r7
 8016572:	f003 fc7d 	bl	8019e70 <ucdr_serialize_string>
 8016576:	4605      	mov	r5, r0
 8016578:	e7eb      	b.n	8016552 <uxr_serialize_CREATE_Payload+0xe6>
 801657a:	68f2      	ldr	r2, [r6, #12]
 801657c:	f106 0110 	add.w	r1, r6, #16
 8016580:	4638      	mov	r0, r7
 8016582:	f7fc fb4f 	bl	8012c24 <ucdr_serialize_sequence_uint8_t>
 8016586:	4605      	mov	r5, r0
 8016588:	e7e3      	b.n	8016552 <uxr_serialize_CREATE_Payload+0xe6>
 801658a:	bf00      	nop

0801658c <uxr_serialize_GET_INFO_Payload>:
 801658c:	b570      	push	{r4, r5, r6, lr}
 801658e:	2202      	movs	r2, #2
 8016590:	4605      	mov	r5, r0
 8016592:	460e      	mov	r6, r1
 8016594:	f7fc f9a8 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016598:	2202      	movs	r2, #2
 801659a:	18b1      	adds	r1, r6, r2
 801659c:	4604      	mov	r4, r0
 801659e:	4628      	mov	r0, r5
 80165a0:	f7fc f9a2 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80165a4:	6871      	ldr	r1, [r6, #4]
 80165a6:	4004      	ands	r4, r0
 80165a8:	4628      	mov	r0, r5
 80165aa:	f7f6 fbf3 	bl	800cd94 <ucdr_serialize_uint32_t>
 80165ae:	b2e4      	uxtb	r4, r4
 80165b0:	4020      	ands	r0, r4
 80165b2:	bd70      	pop	{r4, r5, r6, pc}

080165b4 <uxr_deserialize_GET_INFO_Payload>:
 80165b4:	b570      	push	{r4, r5, r6, lr}
 80165b6:	2202      	movs	r2, #2
 80165b8:	4605      	mov	r5, r0
 80165ba:	460e      	mov	r6, r1
 80165bc:	f7fc f9f8 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80165c0:	2202      	movs	r2, #2
 80165c2:	18b1      	adds	r1, r6, r2
 80165c4:	4604      	mov	r4, r0
 80165c6:	4628      	mov	r0, r5
 80165c8:	f7fc f9f2 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80165cc:	1d31      	adds	r1, r6, #4
 80165ce:	4004      	ands	r4, r0
 80165d0:	4628      	mov	r0, r5
 80165d2:	f7f6 fd0f 	bl	800cff4 <ucdr_deserialize_uint32_t>
 80165d6:	b2e4      	uxtb	r4, r4
 80165d8:	4020      	ands	r0, r4
 80165da:	bd70      	pop	{r4, r5, r6, pc}

080165dc <uxr_serialize_DELETE_Payload>:
 80165dc:	b570      	push	{r4, r5, r6, lr}
 80165de:	2202      	movs	r2, #2
 80165e0:	4605      	mov	r5, r0
 80165e2:	460e      	mov	r6, r1
 80165e4:	f7fc f980 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80165e8:	2202      	movs	r2, #2
 80165ea:	4604      	mov	r4, r0
 80165ec:	18b1      	adds	r1, r6, r2
 80165ee:	4628      	mov	r0, r5
 80165f0:	f7fc f97a 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80165f4:	4020      	ands	r0, r4
 80165f6:	b2c0      	uxtb	r0, r0
 80165f8:	bd70      	pop	{r4, r5, r6, pc}
 80165fa:	bf00      	nop

080165fc <uxr_deserialize_STATUS_AGENT_Payload>:
 80165fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016600:	4605      	mov	r5, r0
 8016602:	460e      	mov	r6, r1
 8016604:	f7f6 f9c6 	bl	800c994 <ucdr_deserialize_uint8_t>
 8016608:	1c71      	adds	r1, r6, #1
 801660a:	4604      	mov	r4, r0
 801660c:	4628      	mov	r0, r5
 801660e:	f7f6 f9c1 	bl	800c994 <ucdr_deserialize_uint8_t>
 8016612:	2204      	movs	r2, #4
 8016614:	18b1      	adds	r1, r6, r2
 8016616:	4680      	mov	r8, r0
 8016618:	4628      	mov	r0, r5
 801661a:	f7fc f9c9 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 801661e:	f106 0108 	add.w	r1, r6, #8
 8016622:	4607      	mov	r7, r0
 8016624:	2202      	movs	r2, #2
 8016626:	4628      	mov	r0, r5
 8016628:	f7fc f9c2 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 801662c:	ea04 0308 	and.w	r3, r4, r8
 8016630:	b2db      	uxtb	r3, r3
 8016632:	ea03 0407 	and.w	r4, r3, r7
 8016636:	2202      	movs	r2, #2
 8016638:	4607      	mov	r7, r0
 801663a:	f106 010a 	add.w	r1, r6, #10
 801663e:	4628      	mov	r0, r5
 8016640:	f7fc f9b6 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8016644:	f106 010c 	add.w	r1, r6, #12
 8016648:	4603      	mov	r3, r0
 801664a:	4628      	mov	r0, r5
 801664c:	461d      	mov	r5, r3
 801664e:	f7f6 f973 	bl	800c938 <ucdr_deserialize_bool>
 8016652:	403c      	ands	r4, r7
 8016654:	4025      	ands	r5, r4
 8016656:	4028      	ands	r0, r5
 8016658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801665c <uxr_deserialize_STATUS_Payload>:
 801665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016660:	2202      	movs	r2, #2
 8016662:	4606      	mov	r6, r0
 8016664:	460f      	mov	r7, r1
 8016666:	f7fc f9a3 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 801666a:	2202      	movs	r2, #2
 801666c:	18b9      	adds	r1, r7, r2
 801666e:	4605      	mov	r5, r0
 8016670:	4630      	mov	r0, r6
 8016672:	f7fc f99d 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8016676:	1d39      	adds	r1, r7, #4
 8016678:	4680      	mov	r8, r0
 801667a:	4630      	mov	r0, r6
 801667c:	f7f6 f98a 	bl	800c994 <ucdr_deserialize_uint8_t>
 8016680:	1d79      	adds	r1, r7, #5
 8016682:	4604      	mov	r4, r0
 8016684:	4630      	mov	r0, r6
 8016686:	f7f6 f985 	bl	800c994 <ucdr_deserialize_uint8_t>
 801668a:	ea05 0508 	and.w	r5, r5, r8
 801668e:	402c      	ands	r4, r5
 8016690:	4020      	ands	r0, r4
 8016692:	b2c0      	uxtb	r0, r0
 8016694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016698 <uxr_serialize_INFO_Payload>:
 8016698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801669c:	2202      	movs	r2, #2
 801669e:	460c      	mov	r4, r1
 80166a0:	4605      	mov	r5, r0
 80166a2:	f7fc f921 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80166a6:	2202      	movs	r2, #2
 80166a8:	18a1      	adds	r1, r4, r2
 80166aa:	4680      	mov	r8, r0
 80166ac:	4628      	mov	r0, r5
 80166ae:	f7fc f91b 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 80166b2:	7921      	ldrb	r1, [r4, #4]
 80166b4:	4607      	mov	r7, r0
 80166b6:	4628      	mov	r0, r5
 80166b8:	f7f6 f956 	bl	800c968 <ucdr_serialize_uint8_t>
 80166bc:	7961      	ldrb	r1, [r4, #5]
 80166be:	4606      	mov	r6, r0
 80166c0:	4628      	mov	r0, r5
 80166c2:	f7f6 f951 	bl	800c968 <ucdr_serialize_uint8_t>
 80166c6:	ea08 0807 	and.w	r8, r8, r7
 80166ca:	ea06 0608 	and.w	r6, r6, r8
 80166ce:	4006      	ands	r6, r0
 80166d0:	7a21      	ldrb	r1, [r4, #8]
 80166d2:	4628      	mov	r0, r5
 80166d4:	f7f6 f91a 	bl	800c90c <ucdr_serialize_bool>
 80166d8:	7a23      	ldrb	r3, [r4, #8]
 80166da:	b2f7      	uxtb	r7, r6
 80166dc:	4606      	mov	r6, r0
 80166de:	b96b      	cbnz	r3, 80166fc <uxr_serialize_INFO_Payload+0x64>
 80166e0:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80166e4:	4628      	mov	r0, r5
 80166e6:	f7f6 f911 	bl	800c90c <ucdr_serialize_bool>
 80166ea:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80166ee:	4030      	ands	r0, r6
 80166f0:	b2c6      	uxtb	r6, r0
 80166f2:	b983      	cbnz	r3, 8016716 <uxr_serialize_INFO_Payload+0x7e>
 80166f4:	ea06 0007 	and.w	r0, r6, r7
 80166f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fc:	7b21      	ldrb	r1, [r4, #12]
 80166fe:	4628      	mov	r0, r5
 8016700:	f7f6 f932 	bl	800c968 <ucdr_serialize_uint8_t>
 8016704:	b188      	cbz	r0, 801672a <uxr_serialize_INFO_Payload+0x92>
 8016706:	f104 010c 	add.w	r1, r4, #12
 801670a:	4628      	mov	r0, r5
 801670c:	f7ff f9f2 	bl	8015af4 <uxr_serialize_ObjectVariant.part.0>
 8016710:	4030      	ands	r0, r6
 8016712:	b2c6      	uxtb	r6, r0
 8016714:	e7e4      	b.n	80166e0 <uxr_serialize_INFO_Payload+0x48>
 8016716:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801671a:	4628      	mov	r0, r5
 801671c:	f7ff fd9e 	bl	801625c <uxr_serialize_ActivityInfoVariant>
 8016720:	4006      	ands	r6, r0
 8016722:	ea06 0007 	and.w	r0, r6, r7
 8016726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801672a:	4606      	mov	r6, r0
 801672c:	e7d8      	b.n	80166e0 <uxr_serialize_INFO_Payload+0x48>
 801672e:	bf00      	nop

08016730 <uxr_serialize_READ_DATA_Payload>:
 8016730:	b570      	push	{r4, r5, r6, lr}
 8016732:	2202      	movs	r2, #2
 8016734:	4605      	mov	r5, r0
 8016736:	460e      	mov	r6, r1
 8016738:	f7fc f8d6 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 801673c:	2202      	movs	r2, #2
 801673e:	18b1      	adds	r1, r6, r2
 8016740:	4604      	mov	r4, r0
 8016742:	4628      	mov	r0, r5
 8016744:	f7fc f8d0 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016748:	1d31      	adds	r1, r6, #4
 801674a:	4004      	ands	r4, r0
 801674c:	4628      	mov	r0, r5
 801674e:	f7ff fe49 	bl	80163e4 <uxr_serialize_ReadSpecification>
 8016752:	b2e4      	uxtb	r4, r4
 8016754:	4020      	ands	r0, r4
 8016756:	bd70      	pop	{r4, r5, r6, pc}

08016758 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8016758:	b570      	push	{r4, r5, r6, lr}
 801675a:	2202      	movs	r2, #2
 801675c:	4605      	mov	r5, r0
 801675e:	460e      	mov	r6, r1
 8016760:	f7fc f8c2 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016764:	2202      	movs	r2, #2
 8016766:	4604      	mov	r4, r0
 8016768:	18b1      	adds	r1, r6, r2
 801676a:	4628      	mov	r0, r5
 801676c:	f7fc f8bc 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016770:	4020      	ands	r0, r4
 8016772:	b2c0      	uxtb	r0, r0
 8016774:	bd70      	pop	{r4, r5, r6, pc}
 8016776:	bf00      	nop

08016778 <uxr_serialize_ACKNACK_Payload>:
 8016778:	b570      	push	{r4, r5, r6, lr}
 801677a:	460c      	mov	r4, r1
 801677c:	460e      	mov	r6, r1
 801677e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8016782:	4605      	mov	r5, r0
 8016784:	f7f6 f91c 	bl	800c9c0 <ucdr_serialize_uint16_t>
 8016788:	2202      	movs	r2, #2
 801678a:	4621      	mov	r1, r4
 801678c:	4604      	mov	r4, r0
 801678e:	4628      	mov	r0, r5
 8016790:	f7fc f8aa 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 8016794:	7931      	ldrb	r1, [r6, #4]
 8016796:	4004      	ands	r4, r0
 8016798:	4628      	mov	r0, r5
 801679a:	f7f6 f8e5 	bl	800c968 <ucdr_serialize_uint8_t>
 801679e:	b2e4      	uxtb	r4, r4
 80167a0:	4020      	ands	r0, r4
 80167a2:	bd70      	pop	{r4, r5, r6, pc}

080167a4 <uxr_deserialize_ACKNACK_Payload>:
 80167a4:	b570      	push	{r4, r5, r6, lr}
 80167a6:	4605      	mov	r5, r0
 80167a8:	460e      	mov	r6, r1
 80167aa:	f7f6 fa09 	bl	800cbc0 <ucdr_deserialize_uint16_t>
 80167ae:	2202      	movs	r2, #2
 80167b0:	18b1      	adds	r1, r6, r2
 80167b2:	4604      	mov	r4, r0
 80167b4:	4628      	mov	r0, r5
 80167b6:	f7fc f8fb 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80167ba:	1d31      	adds	r1, r6, #4
 80167bc:	4004      	ands	r4, r0
 80167be:	4628      	mov	r0, r5
 80167c0:	f7f6 f8e8 	bl	800c994 <ucdr_deserialize_uint8_t>
 80167c4:	b2e4      	uxtb	r4, r4
 80167c6:	4020      	ands	r0, r4
 80167c8:	bd70      	pop	{r4, r5, r6, pc}
 80167ca:	bf00      	nop

080167cc <uxr_serialize_HEARTBEAT_Payload>:
 80167cc:	b570      	push	{r4, r5, r6, lr}
 80167ce:	460d      	mov	r5, r1
 80167d0:	8809      	ldrh	r1, [r1, #0]
 80167d2:	4606      	mov	r6, r0
 80167d4:	f7f6 f8f4 	bl	800c9c0 <ucdr_serialize_uint16_t>
 80167d8:	8869      	ldrh	r1, [r5, #2]
 80167da:	4604      	mov	r4, r0
 80167dc:	4630      	mov	r0, r6
 80167de:	f7f6 f8ef 	bl	800c9c0 <ucdr_serialize_uint16_t>
 80167e2:	7929      	ldrb	r1, [r5, #4]
 80167e4:	4004      	ands	r4, r0
 80167e6:	4630      	mov	r0, r6
 80167e8:	f7f6 f8be 	bl	800c968 <ucdr_serialize_uint8_t>
 80167ec:	b2e4      	uxtb	r4, r4
 80167ee:	4020      	ands	r0, r4
 80167f0:	bd70      	pop	{r4, r5, r6, pc}
 80167f2:	bf00      	nop

080167f4 <uxr_deserialize_HEARTBEAT_Payload>:
 80167f4:	b570      	push	{r4, r5, r6, lr}
 80167f6:	4605      	mov	r5, r0
 80167f8:	460e      	mov	r6, r1
 80167fa:	f7f6 f9e1 	bl	800cbc0 <ucdr_deserialize_uint16_t>
 80167fe:	1cb1      	adds	r1, r6, #2
 8016800:	4604      	mov	r4, r0
 8016802:	4628      	mov	r0, r5
 8016804:	f7f6 f9dc 	bl	800cbc0 <ucdr_deserialize_uint16_t>
 8016808:	1d31      	adds	r1, r6, #4
 801680a:	4004      	ands	r4, r0
 801680c:	4628      	mov	r0, r5
 801680e:	f7f6 f8c1 	bl	800c994 <ucdr_deserialize_uint8_t>
 8016812:	b2e4      	uxtb	r4, r4
 8016814:	4020      	ands	r0, r4
 8016816:	bd70      	pop	{r4, r5, r6, pc}

08016818 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8016818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801681c:	4605      	mov	r5, r0
 801681e:	460e      	mov	r6, r1
 8016820:	f7f6 ff6a 	bl	800d6f8 <ucdr_deserialize_int32_t>
 8016824:	1d31      	adds	r1, r6, #4
 8016826:	4607      	mov	r7, r0
 8016828:	4628      	mov	r0, r5
 801682a:	f7f6 fbe3 	bl	800cff4 <ucdr_deserialize_uint32_t>
 801682e:	f106 0108 	add.w	r1, r6, #8
 8016832:	4680      	mov	r8, r0
 8016834:	4628      	mov	r0, r5
 8016836:	f7f6 ff5f 	bl	800d6f8 <ucdr_deserialize_int32_t>
 801683a:	f106 010c 	add.w	r1, r6, #12
 801683e:	4604      	mov	r4, r0
 8016840:	4628      	mov	r0, r5
 8016842:	f7f6 fbd7 	bl	800cff4 <ucdr_deserialize_uint32_t>
 8016846:	ea07 0708 	and.w	r7, r7, r8
 801684a:	403c      	ands	r4, r7
 801684c:	f106 0110 	add.w	r1, r6, #16
 8016850:	4004      	ands	r4, r0
 8016852:	4628      	mov	r0, r5
 8016854:	f7f6 ff50 	bl	800d6f8 <ucdr_deserialize_int32_t>
 8016858:	f106 0114 	add.w	r1, r6, #20
 801685c:	4607      	mov	r7, r0
 801685e:	4628      	mov	r0, r5
 8016860:	f7f6 fbc8 	bl	800cff4 <ucdr_deserialize_uint32_t>
 8016864:	b2e4      	uxtb	r4, r4
 8016866:	403c      	ands	r4, r7
 8016868:	4020      	ands	r0, r4
 801686a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801686e:	bf00      	nop

08016870 <uxr_serialize_SampleIdentity>:
 8016870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016874:	220c      	movs	r2, #12
 8016876:	4604      	mov	r4, r0
 8016878:	460d      	mov	r5, r1
 801687a:	f7fc f835 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 801687e:	2203      	movs	r2, #3
 8016880:	f105 010c 	add.w	r1, r5, #12
 8016884:	4607      	mov	r7, r0
 8016886:	4620      	mov	r0, r4
 8016888:	f7fc f82e 	bl	80128e8 <ucdr_serialize_array_uint8_t>
 801688c:	7be9      	ldrb	r1, [r5, #15]
 801688e:	4680      	mov	r8, r0
 8016890:	4620      	mov	r0, r4
 8016892:	f7f6 f869 	bl	800c968 <ucdr_serialize_uint8_t>
 8016896:	6929      	ldr	r1, [r5, #16]
 8016898:	4606      	mov	r6, r0
 801689a:	4620      	mov	r0, r4
 801689c:	f7f6 fe94 	bl	800d5c8 <ucdr_serialize_int32_t>
 80168a0:	6969      	ldr	r1, [r5, #20]
 80168a2:	4603      	mov	r3, r0
 80168a4:	4620      	mov	r0, r4
 80168a6:	ea07 0708 	and.w	r7, r7, r8
 80168aa:	461c      	mov	r4, r3
 80168ac:	f7f6 fa72 	bl	800cd94 <ucdr_serialize_uint32_t>
 80168b0:	403e      	ands	r6, r7
 80168b2:	4034      	ands	r4, r6
 80168b4:	4020      	ands	r0, r4
 80168b6:	b2c0      	uxtb	r0, r0
 80168b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080168bc <uxr_deserialize_SampleIdentity>:
 80168bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168c0:	220c      	movs	r2, #12
 80168c2:	4604      	mov	r4, r0
 80168c4:	460d      	mov	r5, r1
 80168c6:	f7fc f873 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80168ca:	2203      	movs	r2, #3
 80168cc:	f105 010c 	add.w	r1, r5, #12
 80168d0:	4607      	mov	r7, r0
 80168d2:	4620      	mov	r0, r4
 80168d4:	f7fc f86c 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80168d8:	f105 010f 	add.w	r1, r5, #15
 80168dc:	4680      	mov	r8, r0
 80168de:	4620      	mov	r0, r4
 80168e0:	f7f6 f858 	bl	800c994 <ucdr_deserialize_uint8_t>
 80168e4:	f105 0110 	add.w	r1, r5, #16
 80168e8:	4606      	mov	r6, r0
 80168ea:	4620      	mov	r0, r4
 80168ec:	f7f6 ff04 	bl	800d6f8 <ucdr_deserialize_int32_t>
 80168f0:	f105 0114 	add.w	r1, r5, #20
 80168f4:	4603      	mov	r3, r0
 80168f6:	4620      	mov	r0, r4
 80168f8:	ea07 0708 	and.w	r7, r7, r8
 80168fc:	461c      	mov	r4, r3
 80168fe:	f7f6 fb79 	bl	800cff4 <ucdr_deserialize_uint32_t>
 8016902:	403e      	ands	r6, r7
 8016904:	4034      	ands	r4, r6
 8016906:	4020      	ands	r0, r4
 8016908:	b2c0      	uxtb	r0, r0
 801690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801690e:	bf00      	nop

08016910 <nav_msgs__msg__Odometry__init>:
 8016910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016914:	4605      	mov	r5, r0
 8016916:	b3c0      	cbz	r0, 801698a <nav_msgs__msg__Odometry__init+0x7a>
 8016918:	f003 f8e8 	bl	8019aec <std_msgs__msg__Header__init>
 801691c:	4604      	mov	r4, r0
 801691e:	b310      	cbz	r0, 8016966 <nav_msgs__msg__Odometry__init+0x56>
 8016920:	f105 0614 	add.w	r6, r5, #20
 8016924:	4630      	mov	r0, r6
 8016926:	f003 f883 	bl	8019a30 <rosidl_runtime_c__String__init>
 801692a:	4604      	mov	r4, r0
 801692c:	2800      	cmp	r0, #0
 801692e:	d040      	beq.n	80169b2 <nav_msgs__msg__Odometry__init+0xa2>
 8016930:	f105 0720 	add.w	r7, r5, #32
 8016934:	4638      	mov	r0, r7
 8016936:	f003 f915 	bl	8019b64 <geometry_msgs__msg__PoseWithCovariance__init>
 801693a:	4604      	mov	r4, r0
 801693c:	b348      	cbz	r0, 8016992 <nav_msgs__msg__Odometry__init+0x82>
 801693e:	f505 78bc 	add.w	r8, r5, #376	@ 0x178
 8016942:	4640      	mov	r0, r8
 8016944:	f003 f924 	bl	8019b90 <geometry_msgs__msg__TwistWithCovariance__init>
 8016948:	4604      	mov	r4, r0
 801694a:	b9d8      	cbnz	r0, 8016984 <nav_msgs__msg__Odometry__init+0x74>
 801694c:	4628      	mov	r0, r5
 801694e:	f003 f8f1 	bl	8019b34 <std_msgs__msg__Header__fini>
 8016952:	4630      	mov	r0, r6
 8016954:	f003 f882 	bl	8019a5c <rosidl_runtime_c__String__fini>
 8016958:	4638      	mov	r0, r7
 801695a:	f003 f915 	bl	8019b88 <geometry_msgs__msg__PoseWithCovariance__fini>
 801695e:	4640      	mov	r0, r8
 8016960:	f003 f928 	bl	8019bb4 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016964:	e00e      	b.n	8016984 <nav_msgs__msg__Odometry__init+0x74>
 8016966:	4628      	mov	r0, r5
 8016968:	f003 f8e4 	bl	8019b34 <std_msgs__msg__Header__fini>
 801696c:	f105 0014 	add.w	r0, r5, #20
 8016970:	f003 f874 	bl	8019a5c <rosidl_runtime_c__String__fini>
 8016974:	f105 0020 	add.w	r0, r5, #32
 8016978:	f003 f906 	bl	8019b88 <geometry_msgs__msg__PoseWithCovariance__fini>
 801697c:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 8016980:	f003 f918 	bl	8019bb4 <geometry_msgs__msg__TwistWithCovariance__fini>
 8016984:	4620      	mov	r0, r4
 8016986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801698a:	4604      	mov	r4, r0
 801698c:	4620      	mov	r0, r4
 801698e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016992:	4628      	mov	r0, r5
 8016994:	f003 f8ce 	bl	8019b34 <std_msgs__msg__Header__fini>
 8016998:	4630      	mov	r0, r6
 801699a:	f003 f85f 	bl	8019a5c <rosidl_runtime_c__String__fini>
 801699e:	4638      	mov	r0, r7
 80169a0:	f003 f8f2 	bl	8019b88 <geometry_msgs__msg__PoseWithCovariance__fini>
 80169a4:	f505 70bc 	add.w	r0, r5, #376	@ 0x178
 80169a8:	f003 f904 	bl	8019bb4 <geometry_msgs__msg__TwistWithCovariance__fini>
 80169ac:	4620      	mov	r0, r4
 80169ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169b2:	4628      	mov	r0, r5
 80169b4:	f003 f8be 	bl	8019b34 <std_msgs__msg__Header__fini>
 80169b8:	4630      	mov	r0, r6
 80169ba:	e7d9      	b.n	8016970 <nav_msgs__msg__Odometry__init+0x60>

080169bc <nav_msgs__msg__Odometry__fini>:
 80169bc:	b188      	cbz	r0, 80169e2 <nav_msgs__msg__Odometry__fini+0x26>
 80169be:	b510      	push	{r4, lr}
 80169c0:	4604      	mov	r4, r0
 80169c2:	f003 f8b7 	bl	8019b34 <std_msgs__msg__Header__fini>
 80169c6:	f104 0014 	add.w	r0, r4, #20
 80169ca:	f003 f847 	bl	8019a5c <rosidl_runtime_c__String__fini>
 80169ce:	f104 0020 	add.w	r0, r4, #32
 80169d2:	f003 f8d9 	bl	8019b88 <geometry_msgs__msg__PoseWithCovariance__fini>
 80169d6:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80169da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169de:	f003 b8e9 	b.w	8019bb4 <geometry_msgs__msg__TwistWithCovariance__fini>
 80169e2:	4770      	bx	lr

080169e4 <rcl_client_get_rmw_handle>:
 80169e4:	b118      	cbz	r0, 80169ee <rcl_client_get_rmw_handle+0xa>
 80169e6:	6800      	ldr	r0, [r0, #0]
 80169e8:	b108      	cbz	r0, 80169ee <rcl_client_get_rmw_handle+0xa>
 80169ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80169ee:	4770      	bx	lr

080169f0 <rcl_send_request>:
 80169f0:	b570      	push	{r4, r5, r6, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	b1e8      	cbz	r0, 8016a32 <rcl_send_request+0x42>
 80169f6:	4604      	mov	r4, r0
 80169f8:	6800      	ldr	r0, [r0, #0]
 80169fa:	b1d0      	cbz	r0, 8016a32 <rcl_send_request+0x42>
 80169fc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8016a00:	b1bb      	cbz	r3, 8016a32 <rcl_send_request+0x42>
 8016a02:	460e      	mov	r6, r1
 8016a04:	b1d1      	cbz	r1, 8016a3c <rcl_send_request+0x4c>
 8016a06:	4615      	mov	r5, r2
 8016a08:	b1c2      	cbz	r2, 8016a3c <rcl_send_request+0x4c>
 8016a0a:	2105      	movs	r1, #5
 8016a0c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016a10:	f7f9 fca8 	bl	8010364 <__atomic_load_8>
 8016a14:	6823      	ldr	r3, [r4, #0]
 8016a16:	e9c5 0100 	strd	r0, r1, [r5]
 8016a1a:	462a      	mov	r2, r5
 8016a1c:	4631      	mov	r1, r6
 8016a1e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016a22:	f002 fcff 	bl	8019424 <rmw_send_request>
 8016a26:	4606      	mov	r6, r0
 8016a28:	b160      	cbz	r0, 8016a44 <rcl_send_request+0x54>
 8016a2a:	2601      	movs	r6, #1
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	b002      	add	sp, #8
 8016a30:	bd70      	pop	{r4, r5, r6, pc}
 8016a32:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8016a36:	4630      	mov	r0, r6
 8016a38:	b002      	add	sp, #8
 8016a3a:	bd70      	pop	{r4, r5, r6, pc}
 8016a3c:	260b      	movs	r6, #11
 8016a3e:	4630      	mov	r0, r6
 8016a40:	b002      	add	sp, #8
 8016a42:	bd70      	pop	{r4, r5, r6, pc}
 8016a44:	6820      	ldr	r0, [r4, #0]
 8016a46:	2105      	movs	r1, #5
 8016a48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a4c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8016a50:	9100      	str	r1, [sp, #0]
 8016a52:	f7f9 fcf3 	bl	801043c <__atomic_exchange_8>
 8016a56:	4630      	mov	r0, r6
 8016a58:	b002      	add	sp, #8
 8016a5a:	bd70      	pop	{r4, r5, r6, pc}
 8016a5c:	0000      	movs	r0, r0
	...

08016a60 <rcl_take_response>:
 8016a60:	b570      	push	{r4, r5, r6, lr}
 8016a62:	468e      	mov	lr, r1
 8016a64:	460c      	mov	r4, r1
 8016a66:	4616      	mov	r6, r2
 8016a68:	4605      	mov	r5, r0
 8016a6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a6e:	b08c      	sub	sp, #48	@ 0x30
 8016a70:	f10d 0c18 	add.w	ip, sp, #24
 8016a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016a7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016a80:	b35d      	cbz	r5, 8016ada <rcl_take_response+0x7a>
 8016a82:	682b      	ldr	r3, [r5, #0]
 8016a84:	b34b      	cbz	r3, 8016ada <rcl_take_response+0x7a>
 8016a86:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8016a8a:	b330      	cbz	r0, 8016ada <rcl_take_response+0x7a>
 8016a8c:	b346      	cbz	r6, 8016ae0 <rcl_take_response+0x80>
 8016a8e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8016ae8 <rcl_take_response+0x88>
 8016a92:	2300      	movs	r3, #0
 8016a94:	f88d 3007 	strb.w	r3, [sp, #7]
 8016a98:	4632      	mov	r2, r6
 8016a9a:	f10d 0307 	add.w	r3, sp, #7
 8016a9e:	a902      	add	r1, sp, #8
 8016aa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016aa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016aa8:	f002 fdc4 	bl	8019634 <rmw_take_response>
 8016aac:	4605      	mov	r5, r0
 8016aae:	b9c8      	cbnz	r0, 8016ae4 <rcl_take_response+0x84>
 8016ab0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016ab4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8016ab8:	2a00      	cmp	r2, #0
 8016aba:	bf08      	it	eq
 8016abc:	461d      	moveq	r5, r3
 8016abe:	f10d 0e18 	add.w	lr, sp, #24
 8016ac2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016ac6:	46a4      	mov	ip, r4
 8016ac8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016acc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016ad0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	b00c      	add	sp, #48	@ 0x30
 8016ad8:	bd70      	pop	{r4, r5, r6, pc}
 8016ada:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8016ade:	e7ee      	b.n	8016abe <rcl_take_response+0x5e>
 8016ae0:	250b      	movs	r5, #11
 8016ae2:	e7ec      	b.n	8016abe <rcl_take_response+0x5e>
 8016ae4:	2501      	movs	r5, #1
 8016ae6:	e7ea      	b.n	8016abe <rcl_take_response+0x5e>
	...

08016af0 <rcl_client_is_valid>:
 8016af0:	b130      	cbz	r0, 8016b00 <rcl_client_is_valid+0x10>
 8016af2:	6800      	ldr	r0, [r0, #0]
 8016af4:	b120      	cbz	r0, 8016b00 <rcl_client_is_valid+0x10>
 8016af6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8016afa:	3800      	subs	r0, #0
 8016afc:	bf18      	it	ne
 8016afe:	2001      	movne	r0, #1
 8016b00:	4770      	bx	lr
 8016b02:	bf00      	nop

08016b04 <rcl_convert_rmw_ret_to_rcl_ret>:
 8016b04:	280b      	cmp	r0, #11
 8016b06:	dc0d      	bgt.n	8016b24 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016b08:	2800      	cmp	r0, #0
 8016b0a:	db09      	blt.n	8016b20 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016b0c:	280b      	cmp	r0, #11
 8016b0e:	d807      	bhi.n	8016b20 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016b10:	e8df f000 	tbb	[pc, r0]
 8016b14:	07060607 	.word	0x07060607
 8016b18:	06060606 	.word	0x06060606
 8016b1c:	07070606 	.word	0x07070606
 8016b20:	2001      	movs	r0, #1
 8016b22:	4770      	bx	lr
 8016b24:	28cb      	cmp	r0, #203	@ 0xcb
 8016b26:	bf18      	it	ne
 8016b28:	2001      	movne	r0, #1
 8016b2a:	4770      	bx	lr

08016b2c <rcl_get_zero_initialized_guard_condition>:
 8016b2c:	4a03      	ldr	r2, [pc, #12]	@ (8016b3c <rcl_get_zero_initialized_guard_condition+0x10>)
 8016b2e:	4603      	mov	r3, r0
 8016b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b34:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b38:	4618      	mov	r0, r3
 8016b3a:	4770      	bx	lr
 8016b3c:	0801e28c 	.word	0x0801e28c

08016b40 <rcl_guard_condition_init>:
 8016b40:	b082      	sub	sp, #8
 8016b42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b44:	b087      	sub	sp, #28
 8016b46:	ac0c      	add	r4, sp, #48	@ 0x30
 8016b48:	e884 000c 	stmia.w	r4, {r2, r3}
 8016b4c:	46a6      	mov	lr, r4
 8016b4e:	460d      	mov	r5, r1
 8016b50:	4604      	mov	r4, r0
 8016b52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b56:	f10d 0c04 	add.w	ip, sp, #4
 8016b5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b5e:	f8de 3000 	ldr.w	r3, [lr]
 8016b62:	f8cc 3000 	str.w	r3, [ip]
 8016b66:	a801      	add	r0, sp, #4
 8016b68:	f7f9 fbee 	bl	8010348 <rcutils_allocator_is_valid>
 8016b6c:	b338      	cbz	r0, 8016bbe <rcl_guard_condition_init+0x7e>
 8016b6e:	b334      	cbz	r4, 8016bbe <rcl_guard_condition_init+0x7e>
 8016b70:	6866      	ldr	r6, [r4, #4]
 8016b72:	b9ee      	cbnz	r6, 8016bb0 <rcl_guard_condition_init+0x70>
 8016b74:	b31d      	cbz	r5, 8016bbe <rcl_guard_condition_init+0x7e>
 8016b76:	4628      	mov	r0, r5
 8016b78:	f7f7 fb50 	bl	800e21c <rcl_context_is_valid>
 8016b7c:	b308      	cbz	r0, 8016bc2 <rcl_guard_condition_init+0x82>
 8016b7e:	9b01      	ldr	r3, [sp, #4]
 8016b80:	9905      	ldr	r1, [sp, #20]
 8016b82:	201c      	movs	r0, #28
 8016b84:	4798      	blx	r3
 8016b86:	4607      	mov	r7, r0
 8016b88:	6060      	str	r0, [r4, #4]
 8016b8a:	b310      	cbz	r0, 8016bd2 <rcl_guard_condition_init+0x92>
 8016b8c:	6828      	ldr	r0, [r5, #0]
 8016b8e:	3028      	adds	r0, #40	@ 0x28
 8016b90:	f002 fbae 	bl	80192f0 <rmw_create_guard_condition>
 8016b94:	6038      	str	r0, [r7, #0]
 8016b96:	6860      	ldr	r0, [r4, #4]
 8016b98:	6805      	ldr	r5, [r0, #0]
 8016b9a:	b1a5      	cbz	r5, 8016bc6 <rcl_guard_condition_init+0x86>
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	ac01      	add	r4, sp, #4
 8016ba0:	7103      	strb	r3, [r0, #4]
 8016ba2:	f100 0708 	add.w	r7, r0, #8
 8016ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ba8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016baa:	6823      	ldr	r3, [r4, #0]
 8016bac:	603b      	str	r3, [r7, #0]
 8016bae:	e000      	b.n	8016bb2 <rcl_guard_condition_init+0x72>
 8016bb0:	2664      	movs	r6, #100	@ 0x64
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	b007      	add	sp, #28
 8016bb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016bba:	b002      	add	sp, #8
 8016bbc:	4770      	bx	lr
 8016bbe:	260b      	movs	r6, #11
 8016bc0:	e7f7      	b.n	8016bb2 <rcl_guard_condition_init+0x72>
 8016bc2:	2665      	movs	r6, #101	@ 0x65
 8016bc4:	e7f5      	b.n	8016bb2 <rcl_guard_condition_init+0x72>
 8016bc6:	9b02      	ldr	r3, [sp, #8]
 8016bc8:	9905      	ldr	r1, [sp, #20]
 8016bca:	4798      	blx	r3
 8016bcc:	2601      	movs	r6, #1
 8016bce:	6065      	str	r5, [r4, #4]
 8016bd0:	e7ef      	b.n	8016bb2 <rcl_guard_condition_init+0x72>
 8016bd2:	260a      	movs	r6, #10
 8016bd4:	e7ed      	b.n	8016bb2 <rcl_guard_condition_init+0x72>
 8016bd6:	bf00      	nop

08016bd8 <rcl_guard_condition_init_from_rmw>:
 8016bd8:	b082      	sub	sp, #8
 8016bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bde:	b086      	sub	sp, #24
 8016be0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016be4:	4604      	mov	r4, r0
 8016be6:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016bea:	460e      	mov	r6, r1
 8016bec:	4617      	mov	r7, r2
 8016bee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016bf2:	f10d 0e04 	add.w	lr, sp, #4
 8016bf6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016bfa:	f8dc 3000 	ldr.w	r3, [ip]
 8016bfe:	f8ce 3000 	str.w	r3, [lr]
 8016c02:	a801      	add	r0, sp, #4
 8016c04:	f7f9 fba0 	bl	8010348 <rcutils_allocator_is_valid>
 8016c08:	b350      	cbz	r0, 8016c60 <rcl_guard_condition_init_from_rmw+0x88>
 8016c0a:	b34c      	cbz	r4, 8016c60 <rcl_guard_condition_init_from_rmw+0x88>
 8016c0c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016c10:	f1b8 0f00 	cmp.w	r8, #0
 8016c14:	d11e      	bne.n	8016c54 <rcl_guard_condition_init_from_rmw+0x7c>
 8016c16:	b31f      	cbz	r7, 8016c60 <rcl_guard_condition_init_from_rmw+0x88>
 8016c18:	4638      	mov	r0, r7
 8016c1a:	f7f7 faff 	bl	800e21c <rcl_context_is_valid>
 8016c1e:	b328      	cbz	r0, 8016c6c <rcl_guard_condition_init_from_rmw+0x94>
 8016c20:	9b01      	ldr	r3, [sp, #4]
 8016c22:	9905      	ldr	r1, [sp, #20]
 8016c24:	201c      	movs	r0, #28
 8016c26:	4798      	blx	r3
 8016c28:	4605      	mov	r5, r0
 8016c2a:	6060      	str	r0, [r4, #4]
 8016c2c:	b358      	cbz	r0, 8016c86 <rcl_guard_condition_init_from_rmw+0xae>
 8016c2e:	b1fe      	cbz	r6, 8016c70 <rcl_guard_condition_init_from_rmw+0x98>
 8016c30:	6006      	str	r6, [r0, #0]
 8016c32:	f880 8004 	strb.w	r8, [r0, #4]
 8016c36:	ac01      	add	r4, sp, #4
 8016c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c3a:	f105 0c08 	add.w	ip, r5, #8
 8016c3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c42:	6823      	ldr	r3, [r4, #0]
 8016c44:	f8cc 3000 	str.w	r3, [ip]
 8016c48:	2000      	movs	r0, #0
 8016c4a:	b006      	add	sp, #24
 8016c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c50:	b002      	add	sp, #8
 8016c52:	4770      	bx	lr
 8016c54:	2064      	movs	r0, #100	@ 0x64
 8016c56:	b006      	add	sp, #24
 8016c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c5c:	b002      	add	sp, #8
 8016c5e:	4770      	bx	lr
 8016c60:	200b      	movs	r0, #11
 8016c62:	b006      	add	sp, #24
 8016c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c68:	b002      	add	sp, #8
 8016c6a:	4770      	bx	lr
 8016c6c:	2065      	movs	r0, #101	@ 0x65
 8016c6e:	e7f2      	b.n	8016c56 <rcl_guard_condition_init_from_rmw+0x7e>
 8016c70:	6838      	ldr	r0, [r7, #0]
 8016c72:	3028      	adds	r0, #40	@ 0x28
 8016c74:	f002 fb3c 	bl	80192f0 <rmw_create_guard_condition>
 8016c78:	6028      	str	r0, [r5, #0]
 8016c7a:	6865      	ldr	r5, [r4, #4]
 8016c7c:	682e      	ldr	r6, [r5, #0]
 8016c7e:	b126      	cbz	r6, 8016c8a <rcl_guard_condition_init_from_rmw+0xb2>
 8016c80:	2301      	movs	r3, #1
 8016c82:	712b      	strb	r3, [r5, #4]
 8016c84:	e7d7      	b.n	8016c36 <rcl_guard_condition_init_from_rmw+0x5e>
 8016c86:	200a      	movs	r0, #10
 8016c88:	e7e5      	b.n	8016c56 <rcl_guard_condition_init_from_rmw+0x7e>
 8016c8a:	4628      	mov	r0, r5
 8016c8c:	9b02      	ldr	r3, [sp, #8]
 8016c8e:	9905      	ldr	r1, [sp, #20]
 8016c90:	4798      	blx	r3
 8016c92:	6066      	str	r6, [r4, #4]
 8016c94:	2001      	movs	r0, #1
 8016c96:	e7de      	b.n	8016c56 <rcl_guard_condition_init_from_rmw+0x7e>

08016c98 <rcl_guard_condition_fini>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	b1f0      	cbz	r0, 8016cdc <rcl_guard_condition_fini+0x44>
 8016c9e:	6843      	ldr	r3, [r0, #4]
 8016ca0:	4604      	mov	r4, r0
 8016ca2:	b163      	cbz	r3, 8016cbe <rcl_guard_condition_fini+0x26>
 8016ca4:	6818      	ldr	r0, [r3, #0]
 8016ca6:	68de      	ldr	r6, [r3, #12]
 8016ca8:	6999      	ldr	r1, [r3, #24]
 8016caa:	b160      	cbz	r0, 8016cc6 <rcl_guard_condition_fini+0x2e>
 8016cac:	791d      	ldrb	r5, [r3, #4]
 8016cae:	b965      	cbnz	r5, 8016cca <rcl_guard_condition_fini+0x32>
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	47b0      	blx	r6
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	4628      	mov	r0, r5
 8016cb8:	6063      	str	r3, [r4, #4]
 8016cba:	b002      	add	sp, #8
 8016cbc:	bd70      	pop	{r4, r5, r6, pc}
 8016cbe:	461d      	mov	r5, r3
 8016cc0:	4628      	mov	r0, r5
 8016cc2:	b002      	add	sp, #8
 8016cc4:	bd70      	pop	{r4, r5, r6, pc}
 8016cc6:	4605      	mov	r5, r0
 8016cc8:	e7f2      	b.n	8016cb0 <rcl_guard_condition_fini+0x18>
 8016cca:	9101      	str	r1, [sp, #4]
 8016ccc:	f002 fb24 	bl	8019318 <rmw_destroy_guard_condition>
 8016cd0:	1e05      	subs	r5, r0, #0
 8016cd2:	6863      	ldr	r3, [r4, #4]
 8016cd4:	9901      	ldr	r1, [sp, #4]
 8016cd6:	bf18      	it	ne
 8016cd8:	2501      	movne	r5, #1
 8016cda:	e7e9      	b.n	8016cb0 <rcl_guard_condition_fini+0x18>
 8016cdc:	250b      	movs	r5, #11
 8016cde:	4628      	mov	r0, r5
 8016ce0:	b002      	add	sp, #8
 8016ce2:	bd70      	pop	{r4, r5, r6, pc}

08016ce4 <rcl_guard_condition_get_default_options>:
 8016ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ce6:	b087      	sub	sp, #28
 8016ce8:	4606      	mov	r6, r0
 8016cea:	4668      	mov	r0, sp
 8016cec:	f7f9 fb1e 	bl	801032c <rcutils_get_default_allocator>
 8016cf0:	4b09      	ldr	r3, [pc, #36]	@ (8016d18 <rcl_guard_condition_get_default_options+0x34>)
 8016cf2:	46ee      	mov	lr, sp
 8016cf4:	469c      	mov	ip, r3
 8016cf6:	461d      	mov	r5, r3
 8016cf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016cfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d02:	4634      	mov	r4, r6
 8016d04:	f8de 7000 	ldr.w	r7, [lr]
 8016d08:	f8cc 7000 	str.w	r7, [ip]
 8016d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016d0e:	4630      	mov	r0, r6
 8016d10:	6027      	str	r7, [r4, #0]
 8016d12:	b007      	add	sp, #28
 8016d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d16:	bf00      	nop
 8016d18:	20011ab0 	.word	0x20011ab0

08016d1c <rcl_trigger_guard_condition>:
 8016d1c:	b148      	cbz	r0, 8016d32 <rcl_trigger_guard_condition+0x16>
 8016d1e:	b508      	push	{r3, lr}
 8016d20:	6843      	ldr	r3, [r0, #4]
 8016d22:	b143      	cbz	r3, 8016d36 <rcl_trigger_guard_condition+0x1a>
 8016d24:	6818      	ldr	r0, [r3, #0]
 8016d26:	f002 fccf 	bl	80196c8 <rmw_trigger_guard_condition>
 8016d2a:	3800      	subs	r0, #0
 8016d2c:	bf18      	it	ne
 8016d2e:	2001      	movne	r0, #1
 8016d30:	bd08      	pop	{r3, pc}
 8016d32:	200b      	movs	r0, #11
 8016d34:	4770      	bx	lr
 8016d36:	200b      	movs	r0, #11
 8016d38:	bd08      	pop	{r3, pc}
 8016d3a:	bf00      	nop

08016d3c <rcl_guard_condition_get_rmw_handle>:
 8016d3c:	b110      	cbz	r0, 8016d44 <rcl_guard_condition_get_rmw_handle+0x8>
 8016d3e:	6840      	ldr	r0, [r0, #4]
 8016d40:	b100      	cbz	r0, 8016d44 <rcl_guard_condition_get_rmw_handle+0x8>
 8016d42:	6800      	ldr	r0, [r0, #0]
 8016d44:	4770      	bx	lr
 8016d46:	bf00      	nop

08016d48 <rcl_init>:
 8016d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d4c:	1e05      	subs	r5, r0, #0
 8016d4e:	b09c      	sub	sp, #112	@ 0x70
 8016d50:	460e      	mov	r6, r1
 8016d52:	4690      	mov	r8, r2
 8016d54:	461f      	mov	r7, r3
 8016d56:	f340 8099 	ble.w	8016e8c <rcl_init+0x144>
 8016d5a:	2900      	cmp	r1, #0
 8016d5c:	f000 8099 	beq.w	8016e92 <rcl_init+0x14a>
 8016d60:	f1a1 0e04 	sub.w	lr, r1, #4
 8016d64:	f04f 0c00 	mov.w	ip, #0
 8016d68:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8016d6c:	f10c 0c01 	add.w	ip, ip, #1
 8016d70:	2c00      	cmp	r4, #0
 8016d72:	f000 808e 	beq.w	8016e92 <rcl_init+0x14a>
 8016d76:	4565      	cmp	r5, ip
 8016d78:	d1f6      	bne.n	8016d68 <rcl_init+0x20>
 8016d7a:	f1b8 0f00 	cmp.w	r8, #0
 8016d7e:	f000 8088 	beq.w	8016e92 <rcl_init+0x14a>
 8016d82:	f8d8 4000 	ldr.w	r4, [r8]
 8016d86:	2c00      	cmp	r4, #0
 8016d88:	f000 8083 	beq.w	8016e92 <rcl_init+0x14a>
 8016d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d8e:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8016d92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d96:	6823      	ldr	r3, [r4, #0]
 8016d98:	f8cc 3000 	str.w	r3, [ip]
 8016d9c:	a817      	add	r0, sp, #92	@ 0x5c
 8016d9e:	f7f9 fad3 	bl	8010348 <rcutils_allocator_is_valid>
 8016da2:	2800      	cmp	r0, #0
 8016da4:	d075      	beq.n	8016e92 <rcl_init+0x14a>
 8016da6:	2f00      	cmp	r7, #0
 8016da8:	d073      	beq.n	8016e92 <rcl_init+0x14a>
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d175      	bne.n	8016e9c <rcl_init+0x154>
 8016db0:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8016db4:	2178      	movs	r1, #120	@ 0x78
 8016db6:	2001      	movs	r0, #1
 8016db8:	4798      	blx	r3
 8016dba:	4604      	mov	r4, r0
 8016dbc:	6038      	str	r0, [r7, #0]
 8016dbe:	2800      	cmp	r0, #0
 8016dc0:	f000 80a0 	beq.w	8016f04 <rcl_init+0x1bc>
 8016dc4:	a802      	add	r0, sp, #8
 8016dc6:	f002 f833 	bl	8018e30 <rmw_get_zero_initialized_context>
 8016dca:	a902      	add	r1, sp, #8
 8016dcc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016dd0:	2250      	movs	r2, #80	@ 0x50
 8016dd2:	ac17      	add	r4, sp, #92	@ 0x5c
 8016dd4:	f005 fc53 	bl	801c67e <memcpy>
 8016dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dda:	f8d7 e000 	ldr.w	lr, [r7]
 8016dde:	46f4      	mov	ip, lr
 8016de0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016de4:	6823      	ldr	r3, [r4, #0]
 8016de6:	f8cc 3000 	str.w	r3, [ip]
 8016dea:	f10e 0114 	add.w	r1, lr, #20
 8016dee:	4640      	mov	r0, r8
 8016df0:	f7f7 fb26 	bl	800e440 <rcl_init_options_copy>
 8016df4:	4604      	mov	r4, r0
 8016df6:	2800      	cmp	r0, #0
 8016df8:	d144      	bne.n	8016e84 <rcl_init+0x13c>
 8016dfa:	f8d7 9000 	ldr.w	r9, [r7]
 8016dfe:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016e02:	f8c9 0020 	str.w	r0, [r9, #32]
 8016e06:	f8c9 5018 	str.w	r5, [r9, #24]
 8016e0a:	f8c9 801c 	str.w	r8, [r9, #28]
 8016e0e:	2d00      	cmp	r5, #0
 8016e10:	d04b      	beq.n	8016eaa <rcl_init+0x162>
 8016e12:	2e00      	cmp	r6, #0
 8016e14:	d049      	beq.n	8016eaa <rcl_init+0x162>
 8016e16:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8016e1a:	2104      	movs	r1, #4
 8016e1c:	4628      	mov	r0, r5
 8016e1e:	4798      	blx	r3
 8016e20:	f8c9 0020 	str.w	r0, [r9, #32]
 8016e24:	f8d7 9000 	ldr.w	r9, [r7]
 8016e28:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016e2c:	46ca      	mov	sl, r9
 8016e2e:	b343      	cbz	r3, 8016e82 <rcl_init+0x13a>
 8016e30:	2d01      	cmp	r5, #1
 8016e32:	f178 0300 	sbcs.w	r3, r8, #0
 8016e36:	db38      	blt.n	8016eaa <rcl_init+0x162>
 8016e38:	2400      	movs	r4, #0
 8016e3a:	3e04      	subs	r6, #4
 8016e3c:	46a1      	mov	r9, r4
 8016e3e:	e00b      	b.n	8016e58 <rcl_init+0x110>
 8016e40:	6831      	ldr	r1, [r6, #0]
 8016e42:	f005 fc1c 	bl	801c67e <memcpy>
 8016e46:	3401      	adds	r4, #1
 8016e48:	f149 0900 	adc.w	r9, r9, #0
 8016e4c:	45c8      	cmp	r8, r9
 8016e4e:	bf08      	it	eq
 8016e50:	42a5      	cmpeq	r5, r4
 8016e52:	d028      	beq.n	8016ea6 <rcl_init+0x15e>
 8016e54:	f8d7 a000 	ldr.w	sl, [r7]
 8016e58:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016e5c:	f7e9 f9e2 	bl	8000224 <strlen>
 8016e60:	1c42      	adds	r2, r0, #1
 8016e62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016e64:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8016e66:	f8da a020 	ldr.w	sl, [sl, #32]
 8016e6a:	9201      	str	r2, [sp, #4]
 8016e6c:	4610      	mov	r0, r2
 8016e6e:	4798      	blx	r3
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8016e76:	6a1b      	ldr	r3, [r3, #32]
 8016e78:	9a01      	ldr	r2, [sp, #4]
 8016e7a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016e7e:	2800      	cmp	r0, #0
 8016e80:	d1de      	bne.n	8016e40 <rcl_init+0xf8>
 8016e82:	240a      	movs	r4, #10
 8016e84:	4638      	mov	r0, r7
 8016e86:	f7f7 f9d5 	bl	800e234 <__cleanup_context>
 8016e8a:	e003      	b.n	8016e94 <rcl_init+0x14c>
 8016e8c:	2900      	cmp	r1, #0
 8016e8e:	f43f af74 	beq.w	8016d7a <rcl_init+0x32>
 8016e92:	240b      	movs	r4, #11
 8016e94:	4620      	mov	r0, r4
 8016e96:	b01c      	add	sp, #112	@ 0x70
 8016e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e9c:	2464      	movs	r4, #100	@ 0x64
 8016e9e:	4620      	mov	r0, r4
 8016ea0:	b01c      	add	sp, #112	@ 0x70
 8016ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ea6:	f8d7 9000 	ldr.w	r9, [r7]
 8016eaa:	491d      	ldr	r1, [pc, #116]	@ (8016f20 <rcl_init+0x1d8>)
 8016eac:	680b      	ldr	r3, [r1, #0]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	d023      	beq.n	8016efa <rcl_init+0x1b2>
 8016eb2:	600b      	str	r3, [r1, #0]
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	2400      	movs	r4, #0
 8016eb8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016ebc:	607b      	str	r3, [r7, #4]
 8016ebe:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016ec0:	6182      	str	r2, [r0, #24]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	61c4      	str	r4, [r0, #28]
 8016ec6:	d01f      	beq.n	8016f08 <rcl_init+0x1c0>
 8016ec8:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8016ecc:	b94b      	cbnz	r3, 8016ee2 <rcl_init+0x19a>
 8016ece:	3030      	adds	r0, #48	@ 0x30
 8016ed0:	f000 f846 	bl	8016f60 <rcl_get_localhost_only>
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	d1d4      	bne.n	8016e84 <rcl_init+0x13c>
 8016eda:	f8d7 9000 	ldr.w	r9, [r7]
 8016ede:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016ee2:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 8016ee6:	3018      	adds	r0, #24
 8016ee8:	f7f9 ff5e 	bl	8010da8 <rmw_init>
 8016eec:	4604      	mov	r4, r0
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d0d0      	beq.n	8016e94 <rcl_init+0x14c>
 8016ef2:	f7ff fe07 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 8016ef6:	4604      	mov	r4, r0
 8016ef8:	e7c4      	b.n	8016e84 <rcl_init+0x13c>
 8016efa:	2201      	movs	r2, #1
 8016efc:	461c      	mov	r4, r3
 8016efe:	600a      	str	r2, [r1, #0]
 8016f00:	4613      	mov	r3, r2
 8016f02:	e7d9      	b.n	8016eb8 <rcl_init+0x170>
 8016f04:	240a      	movs	r4, #10
 8016f06:	e7c5      	b.n	8016e94 <rcl_init+0x14c>
 8016f08:	3024      	adds	r0, #36	@ 0x24
 8016f0a:	f003 fd31 	bl	801a970 <rcl_get_default_domain_id>
 8016f0e:	4604      	mov	r4, r0
 8016f10:	2800      	cmp	r0, #0
 8016f12:	d1b7      	bne.n	8016e84 <rcl_init+0x13c>
 8016f14:	f8d7 9000 	ldr.w	r9, [r7]
 8016f18:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016f1c:	e7d4      	b.n	8016ec8 <rcl_init+0x180>
 8016f1e:	bf00      	nop
 8016f20:	20011ac4 	.word	0x20011ac4

08016f24 <rcl_shutdown>:
 8016f24:	b1a8      	cbz	r0, 8016f52 <rcl_shutdown+0x2e>
 8016f26:	6803      	ldr	r3, [r0, #0]
 8016f28:	b510      	push	{r4, lr}
 8016f2a:	4604      	mov	r4, r0
 8016f2c:	b173      	cbz	r3, 8016f4c <rcl_shutdown+0x28>
 8016f2e:	f7f7 f975 	bl	800e21c <rcl_context_is_valid>
 8016f32:	b140      	cbz	r0, 8016f46 <rcl_shutdown+0x22>
 8016f34:	6820      	ldr	r0, [r4, #0]
 8016f36:	3028      	adds	r0, #40	@ 0x28
 8016f38:	f7fa f86c 	bl	8011014 <rmw_shutdown>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	b958      	cbnz	r0, 8016f58 <rcl_shutdown+0x34>
 8016f40:	6060      	str	r0, [r4, #4]
 8016f42:	4618      	mov	r0, r3
 8016f44:	bd10      	pop	{r4, pc}
 8016f46:	236a      	movs	r3, #106	@ 0x6a
 8016f48:	4618      	mov	r0, r3
 8016f4a:	bd10      	pop	{r4, pc}
 8016f4c:	230b      	movs	r3, #11
 8016f4e:	4618      	mov	r0, r3
 8016f50:	bd10      	pop	{r4, pc}
 8016f52:	230b      	movs	r3, #11
 8016f54:	4618      	mov	r0, r3
 8016f56:	4770      	bx	lr
 8016f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f5c:	f7ff bdd2 	b.w	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>

08016f60 <rcl_get_localhost_only>:
 8016f60:	b510      	push	{r4, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	2300      	movs	r3, #0
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	b1b8      	cbz	r0, 8016f9a <rcl_get_localhost_only+0x3a>
 8016f6a:	4604      	mov	r4, r0
 8016f6c:	a901      	add	r1, sp, #4
 8016f6e:	480c      	ldr	r0, [pc, #48]	@ (8016fa0 <rcl_get_localhost_only+0x40>)
 8016f70:	f7f9 fa9c 	bl	80104ac <rcutils_get_env>
 8016f74:	b110      	cbz	r0, 8016f7c <rcl_get_localhost_only+0x1c>
 8016f76:	2001      	movs	r0, #1
 8016f78:	b002      	add	sp, #8
 8016f7a:	bd10      	pop	{r4, pc}
 8016f7c:	9b01      	ldr	r3, [sp, #4]
 8016f7e:	b113      	cbz	r3, 8016f86 <rcl_get_localhost_only+0x26>
 8016f80:	781a      	ldrb	r2, [r3, #0]
 8016f82:	2a31      	cmp	r2, #49	@ 0x31
 8016f84:	d004      	beq.n	8016f90 <rcl_get_localhost_only+0x30>
 8016f86:	2302      	movs	r3, #2
 8016f88:	2000      	movs	r0, #0
 8016f8a:	7023      	strb	r3, [r4, #0]
 8016f8c:	b002      	add	sp, #8
 8016f8e:	bd10      	pop	{r4, pc}
 8016f90:	785b      	ldrb	r3, [r3, #1]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d1f7      	bne.n	8016f86 <rcl_get_localhost_only+0x26>
 8016f96:	2301      	movs	r3, #1
 8016f98:	e7f6      	b.n	8016f88 <rcl_get_localhost_only+0x28>
 8016f9a:	200b      	movs	r0, #11
 8016f9c:	b002      	add	sp, #8
 8016f9e:	bd10      	pop	{r4, pc}
 8016fa0:	0801db7c 	.word	0x0801db7c

08016fa4 <rcl_node_resolve_name>:
 8016fa4:	b082      	sub	sp, #8
 8016fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016faa:	b091      	sub	sp, #68	@ 0x44
 8016fac:	ac1a      	add	r4, sp, #104	@ 0x68
 8016fae:	e884 000c 	stmia.w	r4, {r2, r3}
 8016fb2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8016fb6:	2800      	cmp	r0, #0
 8016fb8:	d03b      	beq.n	8017032 <rcl_node_resolve_name+0x8e>
 8016fba:	460c      	mov	r4, r1
 8016fbc:	4605      	mov	r5, r0
 8016fbe:	f7f7 fc4f 	bl	800e860 <rcl_node_get_options>
 8016fc2:	2800      	cmp	r0, #0
 8016fc4:	d037      	beq.n	8017036 <rcl_node_resolve_name+0x92>
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f7f7 fc3a 	bl	800e840 <rcl_node_get_name>
 8016fcc:	4606      	mov	r6, r0
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f7f7 fc3e 	bl	800e850 <rcl_node_get_namespace>
 8016fd4:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016fd8:	4681      	mov	r9, r0
 8016fda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fde:	ad0b      	add	r5, sp, #44	@ 0x2c
 8016fe0:	46ac      	mov	ip, r5
 8016fe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fe6:	f8de 3000 	ldr.w	r3, [lr]
 8016fea:	f8cc 3000 	str.w	r3, [ip]
 8016fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016ff0:	b1fb      	cbz	r3, 8017032 <rcl_node_resolve_name+0x8e>
 8016ff2:	468a      	mov	sl, r1
 8016ff4:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8016ff8:	f001 fdee 	bl	8018bd8 <rcutils_get_zero_initialized_string_map>
 8016ffc:	ab10      	add	r3, sp, #64	@ 0x40
 8016ffe:	9008      	str	r0, [sp, #32]
 8017000:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8017004:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017008:	2100      	movs	r1, #0
 801700a:	e895 000c 	ldmia.w	r5, {r2, r3}
 801700e:	a808      	add	r0, sp, #32
 8017010:	f001 fe5a 	bl	8018cc8 <rcutils_string_map_init>
 8017014:	4607      	mov	r7, r0
 8017016:	b180      	cbz	r0, 801703a <rcl_node_resolve_name+0x96>
 8017018:	f7f9 fa60 	bl	80104dc <rcutils_get_error_string>
 801701c:	f7f9 fa74 	bl	8010508 <rcutils_reset_error>
 8017020:	2f0a      	cmp	r7, #10
 8017022:	bf18      	it	ne
 8017024:	2701      	movne	r7, #1
 8017026:	4638      	mov	r0, r7
 8017028:	b011      	add	sp, #68	@ 0x44
 801702a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801702e:	b002      	add	sp, #8
 8017030:	4770      	bx	lr
 8017032:	270b      	movs	r7, #11
 8017034:	e7f7      	b.n	8017026 <rcl_node_resolve_name+0x82>
 8017036:	2701      	movs	r7, #1
 8017038:	e7f5      	b.n	8017026 <rcl_node_resolve_name+0x82>
 801703a:	9009      	str	r0, [sp, #36]	@ 0x24
 801703c:	9007      	str	r0, [sp, #28]
 801703e:	a808      	add	r0, sp, #32
 8017040:	f003 fe28 	bl	801ac94 <rcl_get_default_topic_name_substitutions>
 8017044:	4607      	mov	r7, r0
 8017046:	b1a8      	cbz	r0, 8017074 <rcl_node_resolve_name+0xd0>
 8017048:	280a      	cmp	r0, #10
 801704a:	9c07      	ldr	r4, [sp, #28]
 801704c:	d000      	beq.n	8017050 <rcl_node_resolve_name+0xac>
 801704e:	2701      	movs	r7, #1
 8017050:	a808      	add	r0, sp, #32
 8017052:	f001 fe79 	bl	8018d48 <rcutils_string_map_fini>
 8017056:	2800      	cmp	r0, #0
 8017058:	d13d      	bne.n	80170d6 <rcl_node_resolve_name+0x132>
 801705a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801705c:	4659      	mov	r1, fp
 801705e:	47d0      	blx	sl
 8017060:	4659      	mov	r1, fp
 8017062:	4620      	mov	r0, r4
 8017064:	47d0      	blx	sl
 8017066:	f1b8 0f00 	cmp.w	r8, #0
 801706a:	d0dc      	beq.n	8017026 <rcl_node_resolve_name+0x82>
 801706c:	2f67      	cmp	r7, #103	@ 0x67
 801706e:	bf08      	it	eq
 8017070:	2768      	moveq	r7, #104	@ 0x68
 8017072:	e7d8      	b.n	8017026 <rcl_node_resolve_name+0x82>
 8017074:	ab09      	add	r3, sp, #36	@ 0x24
 8017076:	9305      	str	r3, [sp, #20]
 8017078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801707a:	46ec      	mov	ip, sp
 801707c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017080:	682b      	ldr	r3, [r5, #0]
 8017082:	f8cc 3000 	str.w	r3, [ip]
 8017086:	464a      	mov	r2, r9
 8017088:	4631      	mov	r1, r6
 801708a:	4620      	mov	r0, r4
 801708c:	ab08      	add	r3, sp, #32
 801708e:	f003 fca3 	bl	801a9d8 <rcl_expand_topic_name>
 8017092:	4607      	mov	r7, r0
 8017094:	b9b8      	cbnz	r0, 80170c6 <rcl_node_resolve_name+0x122>
 8017096:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8017098:	9009      	str	r0, [sp, #36]	@ 0x24
 801709a:	4602      	mov	r2, r0
 801709c:	a90a      	add	r1, sp, #40	@ 0x28
 801709e:	4620      	mov	r0, r4
 80170a0:	f001 ff5a 	bl	8018f58 <rmw_validate_full_topic_name>
 80170a4:	b988      	cbnz	r0, 80170ca <rcl_node_resolve_name+0x126>
 80170a6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80170a8:	b9d5      	cbnz	r5, 80170e0 <rcl_node_resolve_name+0x13c>
 80170aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80170ac:	a808      	add	r0, sp, #32
 80170ae:	601c      	str	r4, [r3, #0]
 80170b0:	f001 fe4a 	bl	8018d48 <rcutils_string_map_fini>
 80170b4:	4607      	mov	r7, r0
 80170b6:	b1a8      	cbz	r0, 80170e4 <rcl_node_resolve_name+0x140>
 80170b8:	f7f9 fa10 	bl	80104dc <rcutils_get_error_string>
 80170bc:	462c      	mov	r4, r5
 80170be:	f7f9 fa23 	bl	8010508 <rcutils_reset_error>
 80170c2:	2701      	movs	r7, #1
 80170c4:	e7c9      	b.n	801705a <rcl_node_resolve_name+0xb6>
 80170c6:	9c07      	ldr	r4, [sp, #28]
 80170c8:	e7c2      	b.n	8017050 <rcl_node_resolve_name+0xac>
 80170ca:	f7f9 fa07 	bl	80104dc <rcutils_get_error_string>
 80170ce:	2701      	movs	r7, #1
 80170d0:	f7f9 fa1a 	bl	8010508 <rcutils_reset_error>
 80170d4:	e7bc      	b.n	8017050 <rcl_node_resolve_name+0xac>
 80170d6:	f7f9 fa01 	bl	80104dc <rcutils_get_error_string>
 80170da:	f7f9 fa15 	bl	8010508 <rcutils_reset_error>
 80170de:	e7bc      	b.n	801705a <rcl_node_resolve_name+0xb6>
 80170e0:	2767      	movs	r7, #103	@ 0x67
 80170e2:	e7b5      	b.n	8017050 <rcl_node_resolve_name+0xac>
 80170e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80170e6:	4659      	mov	r1, fp
 80170e8:	47d0      	blx	sl
 80170ea:	4659      	mov	r1, fp
 80170ec:	4638      	mov	r0, r7
 80170ee:	47d0      	blx	sl
 80170f0:	e799      	b.n	8017026 <rcl_node_resolve_name+0x82>
 80170f2:	bf00      	nop

080170f4 <rcl_service_get_rmw_handle>:
 80170f4:	b118      	cbz	r0, 80170fe <rcl_service_get_rmw_handle+0xa>
 80170f6:	6800      	ldr	r0, [r0, #0]
 80170f8:	b108      	cbz	r0, 80170fe <rcl_service_get_rmw_handle+0xa>
 80170fa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80170fe:	4770      	bx	lr

08017100 <rcl_take_request>:
 8017100:	b570      	push	{r4, r5, r6, lr}
 8017102:	468e      	mov	lr, r1
 8017104:	460c      	mov	r4, r1
 8017106:	4616      	mov	r6, r2
 8017108:	4605      	mov	r5, r0
 801710a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801710e:	b08c      	sub	sp, #48	@ 0x30
 8017110:	f10d 0c18 	add.w	ip, sp, #24
 8017114:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017118:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801711c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017120:	b30d      	cbz	r5, 8017166 <rcl_take_request+0x66>
 8017122:	682b      	ldr	r3, [r5, #0]
 8017124:	b1fb      	cbz	r3, 8017166 <rcl_take_request+0x66>
 8017126:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801712a:	b1e0      	cbz	r0, 8017166 <rcl_take_request+0x66>
 801712c:	b336      	cbz	r6, 801717c <rcl_take_request+0x7c>
 801712e:	2300      	movs	r3, #0
 8017130:	f88d 3007 	strb.w	r3, [sp, #7]
 8017134:	4632      	mov	r2, r6
 8017136:	f10d 0307 	add.w	r3, sp, #7
 801713a:	a902      	add	r1, sp, #8
 801713c:	f002 f9c0 	bl	80194c0 <rmw_take_request>
 8017140:	4605      	mov	r5, r0
 8017142:	b198      	cbz	r0, 801716c <rcl_take_request+0x6c>
 8017144:	280a      	cmp	r0, #10
 8017146:	bf18      	it	ne
 8017148:	2501      	movne	r5, #1
 801714a:	f10d 0e18 	add.w	lr, sp, #24
 801714e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017152:	46a4      	mov	ip, r4
 8017154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017158:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801715c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017160:	4628      	mov	r0, r5
 8017162:	b00c      	add	sp, #48	@ 0x30
 8017164:	bd70      	pop	{r4, r5, r6, pc}
 8017166:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801716a:	e7ee      	b.n	801714a <rcl_take_request+0x4a>
 801716c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017170:	f240 2359 	movw	r3, #601	@ 0x259
 8017174:	2a00      	cmp	r2, #0
 8017176:	bf08      	it	eq
 8017178:	461d      	moveq	r5, r3
 801717a:	e7e6      	b.n	801714a <rcl_take_request+0x4a>
 801717c:	250b      	movs	r5, #11
 801717e:	e7e4      	b.n	801714a <rcl_take_request+0x4a>

08017180 <rcl_send_response>:
 8017180:	b170      	cbz	r0, 80171a0 <rcl_send_response+0x20>
 8017182:	6800      	ldr	r0, [r0, #0]
 8017184:	b160      	cbz	r0, 80171a0 <rcl_send_response+0x20>
 8017186:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801718a:	b148      	cbz	r0, 80171a0 <rcl_send_response+0x20>
 801718c:	b159      	cbz	r1, 80171a6 <rcl_send_response+0x26>
 801718e:	b510      	push	{r4, lr}
 8017190:	b15a      	cbz	r2, 80171aa <rcl_send_response+0x2a>
 8017192:	f002 f9f3 	bl	801957c <rmw_send_response>
 8017196:	b110      	cbz	r0, 801719e <rcl_send_response+0x1e>
 8017198:	2802      	cmp	r0, #2
 801719a:	bf18      	it	ne
 801719c:	2001      	movne	r0, #1
 801719e:	bd10      	pop	{r4, pc}
 80171a0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80171a4:	4770      	bx	lr
 80171a6:	200b      	movs	r0, #11
 80171a8:	4770      	bx	lr
 80171aa:	200b      	movs	r0, #11
 80171ac:	bd10      	pop	{r4, pc}
 80171ae:	bf00      	nop

080171b0 <rcl_service_is_valid>:
 80171b0:	b130      	cbz	r0, 80171c0 <rcl_service_is_valid+0x10>
 80171b2:	6800      	ldr	r0, [r0, #0]
 80171b4:	b120      	cbz	r0, 80171c0 <rcl_service_is_valid+0x10>
 80171b6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80171ba:	3800      	subs	r0, #0
 80171bc:	bf18      	it	ne
 80171be:	2001      	movne	r0, #1
 80171c0:	4770      	bx	lr
 80171c2:	bf00      	nop

080171c4 <rcl_get_system_time>:
 80171c4:	4608      	mov	r0, r1
 80171c6:	f7f9 bb13 	b.w	80107f0 <rcutils_system_time_now>
 80171ca:	bf00      	nop

080171cc <rcl_get_steady_time>:
 80171cc:	4608      	mov	r0, r1
 80171ce:	f7f9 bb37 	b.w	8010840 <rcutils_steady_time_now>
 80171d2:	bf00      	nop

080171d4 <rcl_get_ros_time>:
 80171d4:	7a03      	ldrb	r3, [r0, #8]
 80171d6:	b510      	push	{r4, lr}
 80171d8:	460c      	mov	r4, r1
 80171da:	b133      	cbz	r3, 80171ea <rcl_get_ros_time+0x16>
 80171dc:	2105      	movs	r1, #5
 80171de:	f7f9 f8c1 	bl	8010364 <__atomic_load_8>
 80171e2:	e9c4 0100 	strd	r0, r1, [r4]
 80171e6:	2000      	movs	r0, #0
 80171e8:	bd10      	pop	{r4, pc}
 80171ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171ee:	4608      	mov	r0, r1
 80171f0:	f7f9 bafe 	b.w	80107f0 <rcutils_system_time_now>

080171f4 <rcl_clock_init>:
 80171f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171f6:	4605      	mov	r5, r0
 80171f8:	4610      	mov	r0, r2
 80171fa:	4614      	mov	r4, r2
 80171fc:	460e      	mov	r6, r1
 80171fe:	f7f9 f8a3 	bl	8010348 <rcutils_allocator_is_valid>
 8017202:	b128      	cbz	r0, 8017210 <rcl_clock_init+0x1c>
 8017204:	2d03      	cmp	r5, #3
 8017206:	d803      	bhi.n	8017210 <rcl_clock_init+0x1c>
 8017208:	e8df f005 	tbb	[pc, r5]
 801720c:	06532e1d 	.word	0x06532e1d
 8017210:	f04f 0c0b 	mov.w	ip, #11
 8017214:	4660      	mov	r0, ip
 8017216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017218:	2e00      	cmp	r6, #0
 801721a:	d0f9      	beq.n	8017210 <rcl_clock_init+0x1c>
 801721c:	2c00      	cmp	r4, #0
 801721e:	d0f7      	beq.n	8017210 <rcl_clock_init+0x1c>
 8017220:	2300      	movs	r3, #0
 8017222:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017226:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80172dc <rcl_clock_init+0xe8>
 801722a:	6133      	str	r3, [r6, #16]
 801722c:	f106 0514 	add.w	r5, r6, #20
 8017230:	469c      	mov	ip, r3
 8017232:	2703      	movs	r7, #3
 8017234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	602b      	str	r3, [r5, #0]
 801723c:	7037      	strb	r7, [r6, #0]
 801723e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017242:	4660      	mov	r0, ip
 8017244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017246:	2e00      	cmp	r6, #0
 8017248:	d0e2      	beq.n	8017210 <rcl_clock_init+0x1c>
 801724a:	2300      	movs	r3, #0
 801724c:	7033      	strb	r3, [r6, #0]
 801724e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017252:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017256:	469c      	mov	ip, r3
 8017258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801725a:	f106 0514 	add.w	r5, r6, #20
 801725e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017260:	6823      	ldr	r3, [r4, #0]
 8017262:	602b      	str	r3, [r5, #0]
 8017264:	4660      	mov	r0, ip
 8017266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017268:	2e00      	cmp	r6, #0
 801726a:	d0d1      	beq.n	8017210 <rcl_clock_init+0x1c>
 801726c:	2c00      	cmp	r4, #0
 801726e:	d0cf      	beq.n	8017210 <rcl_clock_init+0x1c>
 8017270:	2700      	movs	r7, #0
 8017272:	7037      	strb	r7, [r6, #0]
 8017274:	46a4      	mov	ip, r4
 8017276:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801727a:	f106 0514 	add.w	r5, r6, #20
 801727e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8017282:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8017286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017288:	f8dc 3000 	ldr.w	r3, [ip]
 801728c:	602b      	str	r3, [r5, #0]
 801728e:	6921      	ldr	r1, [r4, #16]
 8017290:	6823      	ldr	r3, [r4, #0]
 8017292:	2010      	movs	r0, #16
 8017294:	4798      	blx	r3
 8017296:	6130      	str	r0, [r6, #16]
 8017298:	b1d0      	cbz	r0, 80172d0 <rcl_clock_init+0xdc>
 801729a:	2200      	movs	r2, #0
 801729c:	2300      	movs	r3, #0
 801729e:	e9c0 2300 	strd	r2, r3, [r0]
 80172a2:	2301      	movs	r3, #1
 80172a4:	7207      	strb	r7, [r0, #8]
 80172a6:	4a0c      	ldr	r2, [pc, #48]	@ (80172d8 <rcl_clock_init+0xe4>)
 80172a8:	7033      	strb	r3, [r6, #0]
 80172aa:	46bc      	mov	ip, r7
 80172ac:	60f2      	str	r2, [r6, #12]
 80172ae:	4660      	mov	r0, ip
 80172b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172b2:	2e00      	cmp	r6, #0
 80172b4:	d0ac      	beq.n	8017210 <rcl_clock_init+0x1c>
 80172b6:	2c00      	cmp	r4, #0
 80172b8:	d0aa      	beq.n	8017210 <rcl_clock_init+0x1c>
 80172ba:	2300      	movs	r3, #0
 80172bc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80172c0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80172e0 <rcl_clock_init+0xec>
 80172c4:	6133      	str	r3, [r6, #16]
 80172c6:	f106 0514 	add.w	r5, r6, #20
 80172ca:	469c      	mov	ip, r3
 80172cc:	2702      	movs	r7, #2
 80172ce:	e7b1      	b.n	8017234 <rcl_clock_init+0x40>
 80172d0:	f04f 0c0a 	mov.w	ip, #10
 80172d4:	e79e      	b.n	8017214 <rcl_clock_init+0x20>
 80172d6:	bf00      	nop
 80172d8:	080171d5 	.word	0x080171d5
 80172dc:	080171cd 	.word	0x080171cd
 80172e0:	080171c5 	.word	0x080171c5

080172e4 <rcl_clock_fini>:
 80172e4:	2800      	cmp	r0, #0
 80172e6:	d02c      	beq.n	8017342 <rcl_clock_fini+0x5e>
 80172e8:	b538      	push	{r3, r4, r5, lr}
 80172ea:	4604      	mov	r4, r0
 80172ec:	3014      	adds	r0, #20
 80172ee:	f7f9 f82b 	bl	8010348 <rcutils_allocator_is_valid>
 80172f2:	b140      	cbz	r0, 8017306 <rcl_clock_fini+0x22>
 80172f4:	7823      	ldrb	r3, [r4, #0]
 80172f6:	2b02      	cmp	r3, #2
 80172f8:	d007      	beq.n	801730a <rcl_clock_fini+0x26>
 80172fa:	2b03      	cmp	r3, #3
 80172fc:	d005      	beq.n	801730a <rcl_clock_fini+0x26>
 80172fe:	2b01      	cmp	r3, #1
 8017300:	d00f      	beq.n	8017322 <rcl_clock_fini+0x3e>
 8017302:	200b      	movs	r0, #11
 8017304:	bd38      	pop	{r3, r4, r5, pc}
 8017306:	2001      	movs	r0, #1
 8017308:	bd38      	pop	{r3, r4, r5, pc}
 801730a:	68a0      	ldr	r0, [r4, #8]
 801730c:	2800      	cmp	r0, #0
 801730e:	d0f9      	beq.n	8017304 <rcl_clock_fini+0x20>
 8017310:	2500      	movs	r5, #0
 8017312:	6860      	ldr	r0, [r4, #4]
 8017314:	69a3      	ldr	r3, [r4, #24]
 8017316:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8017318:	60a5      	str	r5, [r4, #8]
 801731a:	4798      	blx	r3
 801731c:	6065      	str	r5, [r4, #4]
 801731e:	4628      	mov	r0, r5
 8017320:	bd38      	pop	{r3, r4, r5, pc}
 8017322:	68a3      	ldr	r3, [r4, #8]
 8017324:	b133      	cbz	r3, 8017334 <rcl_clock_fini+0x50>
 8017326:	2500      	movs	r5, #0
 8017328:	69a3      	ldr	r3, [r4, #24]
 801732a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801732c:	6860      	ldr	r0, [r4, #4]
 801732e:	60a5      	str	r5, [r4, #8]
 8017330:	4798      	blx	r3
 8017332:	6065      	str	r5, [r4, #4]
 8017334:	6920      	ldr	r0, [r4, #16]
 8017336:	69a3      	ldr	r3, [r4, #24]
 8017338:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801733a:	4798      	blx	r3
 801733c:	2000      	movs	r0, #0
 801733e:	6120      	str	r0, [r4, #16]
 8017340:	bd38      	pop	{r3, r4, r5, pc}
 8017342:	200b      	movs	r0, #11
 8017344:	4770      	bx	lr
 8017346:	bf00      	nop

08017348 <rcl_clock_get_now>:
 8017348:	b140      	cbz	r0, 801735c <rcl_clock_get_now+0x14>
 801734a:	b139      	cbz	r1, 801735c <rcl_clock_get_now+0x14>
 801734c:	7803      	ldrb	r3, [r0, #0]
 801734e:	b11b      	cbz	r3, 8017358 <rcl_clock_get_now+0x10>
 8017350:	68c3      	ldr	r3, [r0, #12]
 8017352:	b10b      	cbz	r3, 8017358 <rcl_clock_get_now+0x10>
 8017354:	6900      	ldr	r0, [r0, #16]
 8017356:	4718      	bx	r3
 8017358:	2001      	movs	r0, #1
 801735a:	4770      	bx	lr
 801735c:	200b      	movs	r0, #11
 801735e:	4770      	bx	lr

08017360 <rcl_clock_add_jump_callback>:
 8017360:	b082      	sub	sp, #8
 8017362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017366:	a906      	add	r1, sp, #24
 8017368:	e881 000c 	stmia.w	r1, {r2, r3}
 801736c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8017370:	b320      	cbz	r0, 80173bc <rcl_clock_add_jump_callback+0x5c>
 8017372:	4604      	mov	r4, r0
 8017374:	3014      	adds	r0, #20
 8017376:	f7f8 ffe7 	bl	8010348 <rcutils_allocator_is_valid>
 801737a:	b1f8      	cbz	r0, 80173bc <rcl_clock_add_jump_callback+0x5c>
 801737c:	b1f6      	cbz	r6, 80173bc <rcl_clock_add_jump_callback+0x5c>
 801737e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017380:	2b00      	cmp	r3, #0
 8017382:	db1b      	blt.n	80173bc <rcl_clock_add_jump_callback+0x5c>
 8017384:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8017388:	2a01      	cmp	r2, #1
 801738a:	f173 0300 	sbcs.w	r3, r3, #0
 801738e:	da15      	bge.n	80173bc <rcl_clock_add_jump_callback+0x5c>
 8017390:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8017394:	2f00      	cmp	r7, #0
 8017396:	d042      	beq.n	801741e <rcl_clock_add_jump_callback+0xbe>
 8017398:	2300      	movs	r3, #0
 801739a:	4602      	mov	r2, r0
 801739c:	e003      	b.n	80173a6 <rcl_clock_add_jump_callback+0x46>
 801739e:	42bb      	cmp	r3, r7
 80173a0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80173a4:	d011      	beq.n	80173ca <rcl_clock_add_jump_callback+0x6a>
 80173a6:	6811      	ldr	r1, [r2, #0]
 80173a8:	42b1      	cmp	r1, r6
 80173aa:	f103 0301 	add.w	r3, r3, #1
 80173ae:	d1f6      	bne.n	801739e <rcl_clock_add_jump_callback+0x3e>
 80173b0:	6a11      	ldr	r1, [r2, #32]
 80173b2:	42a9      	cmp	r1, r5
 80173b4:	d1f3      	bne.n	801739e <rcl_clock_add_jump_callback+0x3e>
 80173b6:	f04f 0e01 	mov.w	lr, #1
 80173ba:	e001      	b.n	80173c0 <rcl_clock_add_jump_callback+0x60>
 80173bc:	f04f 0e0b 	mov.w	lr, #11
 80173c0:	4670      	mov	r0, lr
 80173c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80173c6:	b002      	add	sp, #8
 80173c8:	4770      	bx	lr
 80173ca:	3301      	adds	r3, #1
 80173cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80173d0:	00d9      	lsls	r1, r3, #3
 80173d2:	69e3      	ldr	r3, [r4, #28]
 80173d4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80173d6:	4798      	blx	r3
 80173d8:	b1f0      	cbz	r0, 8017418 <rcl_clock_add_jump_callback+0xb8>
 80173da:	68a3      	ldr	r3, [r4, #8]
 80173dc:	6060      	str	r0, [r4, #4]
 80173de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80173e2:	f10d 0c18 	add.w	ip, sp, #24
 80173e6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80173ea:	f103 0801 	add.w	r8, r3, #1
 80173ee:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80173f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173f6:	f106 0708 	add.w	r7, r6, #8
 80173fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80173fc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8017400:	f04f 0e00 	mov.w	lr, #0
 8017404:	e887 0003 	stmia.w	r7, {r0, r1}
 8017408:	6235      	str	r5, [r6, #32]
 801740a:	4670      	mov	r0, lr
 801740c:	f8c4 8008 	str.w	r8, [r4, #8]
 8017410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017414:	b002      	add	sp, #8
 8017416:	4770      	bx	lr
 8017418:	f04f 0e0a 	mov.w	lr, #10
 801741c:	e7d0      	b.n	80173c0 <rcl_clock_add_jump_callback+0x60>
 801741e:	2128      	movs	r1, #40	@ 0x28
 8017420:	e7d7      	b.n	80173d2 <rcl_clock_add_jump_callback+0x72>
 8017422:	bf00      	nop

08017424 <rcl_clock_remove_jump_callback>:
 8017424:	2800      	cmp	r0, #0
 8017426:	d057      	beq.n	80174d8 <rcl_clock_remove_jump_callback+0xb4>
 8017428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801742c:	4605      	mov	r5, r0
 801742e:	3014      	adds	r0, #20
 8017430:	4688      	mov	r8, r1
 8017432:	4692      	mov	sl, r2
 8017434:	f7f8 ff88 	bl	8010348 <rcutils_allocator_is_valid>
 8017438:	2800      	cmp	r0, #0
 801743a:	d03b      	beq.n	80174b4 <rcl_clock_remove_jump_callback+0x90>
 801743c:	f1b8 0f00 	cmp.w	r8, #0
 8017440:	d038      	beq.n	80174b4 <rcl_clock_remove_jump_callback+0x90>
 8017442:	68ae      	ldr	r6, [r5, #8]
 8017444:	b166      	cbz	r6, 8017460 <rcl_clock_remove_jump_callback+0x3c>
 8017446:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801744a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801744e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8017452:	464c      	mov	r4, r9
 8017454:	6823      	ldr	r3, [r4, #0]
 8017456:	4543      	cmp	r3, r8
 8017458:	d005      	beq.n	8017466 <rcl_clock_remove_jump_callback+0x42>
 801745a:	3428      	adds	r4, #40	@ 0x28
 801745c:	42a7      	cmp	r7, r4
 801745e:	d1f9      	bne.n	8017454 <rcl_clock_remove_jump_callback+0x30>
 8017460:	2001      	movs	r0, #1
 8017462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017466:	6a23      	ldr	r3, [r4, #32]
 8017468:	3428      	adds	r4, #40	@ 0x28
 801746a:	42bc      	cmp	r4, r7
 801746c:	d02d      	beq.n	80174ca <rcl_clock_remove_jump_callback+0xa6>
 801746e:	4553      	cmp	r3, sl
 8017470:	d1f0      	bne.n	8017454 <rcl_clock_remove_jump_callback+0x30>
 8017472:	46a6      	mov	lr, r4
 8017474:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017478:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801747c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017480:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017484:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017488:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801748c:	3428      	adds	r4, #40	@ 0x28
 801748e:	42a7      	cmp	r7, r4
 8017490:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017494:	d1ed      	bne.n	8017472 <rcl_clock_remove_jump_callback+0x4e>
 8017496:	3e01      	subs	r6, #1
 8017498:	60ae      	str	r6, [r5, #8]
 801749a:	b176      	cbz	r6, 80174ba <rcl_clock_remove_jump_callback+0x96>
 801749c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80174a0:	69eb      	ldr	r3, [r5, #28]
 80174a2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80174a4:	00f1      	lsls	r1, r6, #3
 80174a6:	4648      	mov	r0, r9
 80174a8:	4798      	blx	r3
 80174aa:	b1b8      	cbz	r0, 80174dc <rcl_clock_remove_jump_callback+0xb8>
 80174ac:	6068      	str	r0, [r5, #4]
 80174ae:	2000      	movs	r0, #0
 80174b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b4:	200b      	movs	r0, #11
 80174b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ba:	4648      	mov	r0, r9
 80174bc:	69ab      	ldr	r3, [r5, #24]
 80174be:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80174c0:	4798      	blx	r3
 80174c2:	606e      	str	r6, [r5, #4]
 80174c4:	4630      	mov	r0, r6
 80174c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174ca:	4553      	cmp	r3, sl
 80174cc:	d1c8      	bne.n	8017460 <rcl_clock_remove_jump_callback+0x3c>
 80174ce:	3e01      	subs	r6, #1
 80174d0:	60ae      	str	r6, [r5, #8]
 80174d2:	2e00      	cmp	r6, #0
 80174d4:	d1e2      	bne.n	801749c <rcl_clock_remove_jump_callback+0x78>
 80174d6:	e7f0      	b.n	80174ba <rcl_clock_remove_jump_callback+0x96>
 80174d8:	200b      	movs	r0, #11
 80174da:	4770      	bx	lr
 80174dc:	200a      	movs	r0, #10
 80174de:	e7ea      	b.n	80174b6 <rcl_clock_remove_jump_callback+0x92>

080174e0 <rcl_get_zero_initialized_wait_set>:
 80174e0:	b510      	push	{r4, lr}
 80174e2:	4c08      	ldr	r4, [pc, #32]	@ (8017504 <rcl_get_zero_initialized_wait_set+0x24>)
 80174e4:	4686      	mov	lr, r0
 80174e6:	4684      	mov	ip, r0
 80174e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174fa:	6823      	ldr	r3, [r4, #0]
 80174fc:	f8cc 3000 	str.w	r3, [ip]
 8017500:	4670      	mov	r0, lr
 8017502:	bd10      	pop	{r4, pc}
 8017504:	0801e294 	.word	0x0801e294

08017508 <rcl_wait_set_is_valid>:
 8017508:	b118      	cbz	r0, 8017512 <rcl_wait_set_is_valid+0xa>
 801750a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801750c:	3800      	subs	r0, #0
 801750e:	bf18      	it	ne
 8017510:	2001      	movne	r0, #1
 8017512:	4770      	bx	lr

08017514 <rcl_wait_set_fini>:
 8017514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017518:	b082      	sub	sp, #8
 801751a:	2800      	cmp	r0, #0
 801751c:	f000 8095 	beq.w	801764a <rcl_wait_set_fini+0x136>
 8017520:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017522:	4604      	mov	r4, r0
 8017524:	2e00      	cmp	r6, #0
 8017526:	f000 808c 	beq.w	8017642 <rcl_wait_set_fini+0x12e>
 801752a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801752c:	f002 fa5e 	bl	80199ec <rmw_destroy_wait_set>
 8017530:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017532:	1e06      	subs	r6, r0, #0
 8017534:	bf18      	it	ne
 8017536:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801753a:	2d00      	cmp	r5, #0
 801753c:	f000 8081 	beq.w	8017642 <rcl_wait_set_fini+0x12e>
 8017540:	6820      	ldr	r0, [r4, #0]
 8017542:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017546:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017548:	2700      	movs	r7, #0
 801754a:	6067      	str	r7, [r4, #4]
 801754c:	602f      	str	r7, [r5, #0]
 801754e:	b120      	cbz	r0, 801755a <rcl_wait_set_fini+0x46>
 8017550:	9101      	str	r1, [sp, #4]
 8017552:	47c0      	blx	r8
 8017554:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017556:	9901      	ldr	r1, [sp, #4]
 8017558:	6027      	str	r7, [r4, #0]
 801755a:	68a8      	ldr	r0, [r5, #8]
 801755c:	b120      	cbz	r0, 8017568 <rcl_wait_set_fini+0x54>
 801755e:	47c0      	blx	r8
 8017560:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017562:	2300      	movs	r3, #0
 8017564:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017568:	68a0      	ldr	r0, [r4, #8]
 801756a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801756c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801756e:	f04f 0800 	mov.w	r8, #0
 8017572:	f8c4 800c 	str.w	r8, [r4, #12]
 8017576:	f8c5 800c 	str.w	r8, [r5, #12]
 801757a:	b128      	cbz	r0, 8017588 <rcl_wait_set_fini+0x74>
 801757c:	47b8      	blx	r7
 801757e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017580:	f8c4 8008 	str.w	r8, [r4, #8]
 8017584:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8017586:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017588:	6968      	ldr	r0, [r5, #20]
 801758a:	f04f 0800 	mov.w	r8, #0
 801758e:	f8c5 8010 	str.w	r8, [r5, #16]
 8017592:	b128      	cbz	r0, 80175a0 <rcl_wait_set_fini+0x8c>
 8017594:	47b8      	blx	r7
 8017596:	f8c5 8014 	str.w	r8, [r5, #20]
 801759a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801759c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801759e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175a0:	6920      	ldr	r0, [r4, #16]
 80175a2:	f04f 0800 	mov.w	r8, #0
 80175a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80175aa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80175ae:	b128      	cbz	r0, 80175bc <rcl_wait_set_fini+0xa8>
 80175b0:	47b8      	blx	r7
 80175b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80175b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80175ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175bc:	69a0      	ldr	r0, [r4, #24]
 80175be:	f04f 0800 	mov.w	r8, #0
 80175c2:	f8c4 801c 	str.w	r8, [r4, #28]
 80175c6:	f8c5 8018 	str.w	r8, [r5, #24]
 80175ca:	b128      	cbz	r0, 80175d8 <rcl_wait_set_fini+0xc4>
 80175cc:	9101      	str	r1, [sp, #4]
 80175ce:	47b8      	blx	r7
 80175d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175d2:	9901      	ldr	r1, [sp, #4]
 80175d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80175d8:	6a28      	ldr	r0, [r5, #32]
 80175da:	b120      	cbz	r0, 80175e6 <rcl_wait_set_fini+0xd2>
 80175dc:	47b8      	blx	r7
 80175de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175e0:	2300      	movs	r3, #0
 80175e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80175e6:	6a20      	ldr	r0, [r4, #32]
 80175e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80175ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80175ee:	2700      	movs	r7, #0
 80175f0:	6267      	str	r7, [r4, #36]	@ 0x24
 80175f2:	626f      	str	r7, [r5, #36]	@ 0x24
 80175f4:	b120      	cbz	r0, 8017600 <rcl_wait_set_fini+0xec>
 80175f6:	9101      	str	r1, [sp, #4]
 80175f8:	47c0      	blx	r8
 80175fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80175fc:	9901      	ldr	r1, [sp, #4]
 80175fe:	6227      	str	r7, [r4, #32]
 8017600:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8017602:	b120      	cbz	r0, 801760e <rcl_wait_set_fini+0xfa>
 8017604:	47c0      	blx	r8
 8017606:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017608:	2300      	movs	r3, #0
 801760a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801760e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8017610:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8017614:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8017616:	2700      	movs	r7, #0
 8017618:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801761a:	632f      	str	r7, [r5, #48]	@ 0x30
 801761c:	b120      	cbz	r0, 8017628 <rcl_wait_set_fini+0x114>
 801761e:	9101      	str	r1, [sp, #4]
 8017620:	47c0      	blx	r8
 8017622:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017624:	9901      	ldr	r1, [sp, #4]
 8017626:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017628:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801762a:	b120      	cbz	r0, 8017636 <rcl_wait_set_fini+0x122>
 801762c:	47c0      	blx	r8
 801762e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017630:	2300      	movs	r3, #0
 8017632:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8017636:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8017638:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801763a:	4628      	mov	r0, r5
 801763c:	4798      	blx	r3
 801763e:	2300      	movs	r3, #0
 8017640:	6323      	str	r3, [r4, #48]	@ 0x30
 8017642:	4630      	mov	r0, r6
 8017644:	b002      	add	sp, #8
 8017646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801764a:	260b      	movs	r6, #11
 801764c:	4630      	mov	r0, r6
 801764e:	b002      	add	sp, #8
 8017650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017654 <rcl_wait_set_add_subscription>:
 8017654:	b318      	cbz	r0, 801769e <rcl_wait_set_add_subscription+0x4a>
 8017656:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017658:	b570      	push	{r4, r5, r6, lr}
 801765a:	4604      	mov	r4, r0
 801765c:	b30b      	cbz	r3, 80176a2 <rcl_wait_set_add_subscription+0x4e>
 801765e:	b319      	cbz	r1, 80176a8 <rcl_wait_set_add_subscription+0x54>
 8017660:	681d      	ldr	r5, [r3, #0]
 8017662:	6840      	ldr	r0, [r0, #4]
 8017664:	4285      	cmp	r5, r0
 8017666:	d217      	bcs.n	8017698 <rcl_wait_set_add_subscription+0x44>
 8017668:	6820      	ldr	r0, [r4, #0]
 801766a:	1c6e      	adds	r6, r5, #1
 801766c:	601e      	str	r6, [r3, #0]
 801766e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017672:	b102      	cbz	r2, 8017676 <rcl_wait_set_add_subscription+0x22>
 8017674:	6015      	str	r5, [r2, #0]
 8017676:	4608      	mov	r0, r1
 8017678:	f7f7 fbf6 	bl	800ee68 <rcl_subscription_get_rmw_handle>
 801767c:	b150      	cbz	r0, 8017694 <rcl_wait_set_add_subscription+0x40>
 801767e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017680:	6842      	ldr	r2, [r0, #4]
 8017682:	689b      	ldr	r3, [r3, #8]
 8017684:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017688:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801768a:	6853      	ldr	r3, [r2, #4]
 801768c:	3301      	adds	r3, #1
 801768e:	2000      	movs	r0, #0
 8017690:	6053      	str	r3, [r2, #4]
 8017692:	bd70      	pop	{r4, r5, r6, pc}
 8017694:	2001      	movs	r0, #1
 8017696:	bd70      	pop	{r4, r5, r6, pc}
 8017698:	f240 3086 	movw	r0, #902	@ 0x386
 801769c:	bd70      	pop	{r4, r5, r6, pc}
 801769e:	200b      	movs	r0, #11
 80176a0:	4770      	bx	lr
 80176a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80176a6:	bd70      	pop	{r4, r5, r6, pc}
 80176a8:	200b      	movs	r0, #11
 80176aa:	bd70      	pop	{r4, r5, r6, pc}

080176ac <rcl_wait_set_clear>:
 80176ac:	2800      	cmp	r0, #0
 80176ae:	d073      	beq.n	8017798 <rcl_wait_set_clear+0xec>
 80176b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80176b2:	b510      	push	{r4, lr}
 80176b4:	4604      	mov	r4, r0
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d070      	beq.n	801779c <rcl_wait_set_clear+0xf0>
 80176ba:	6800      	ldr	r0, [r0, #0]
 80176bc:	b138      	cbz	r0, 80176ce <rcl_wait_set_clear+0x22>
 80176be:	6862      	ldr	r2, [r4, #4]
 80176c0:	2100      	movs	r1, #0
 80176c2:	0092      	lsls	r2, r2, #2
 80176c4:	f004 ff12 	bl	801c4ec <memset>
 80176c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176ca:	2200      	movs	r2, #0
 80176cc:	601a      	str	r2, [r3, #0]
 80176ce:	68a0      	ldr	r0, [r4, #8]
 80176d0:	b138      	cbz	r0, 80176e2 <rcl_wait_set_clear+0x36>
 80176d2:	68e2      	ldr	r2, [r4, #12]
 80176d4:	2100      	movs	r1, #0
 80176d6:	0092      	lsls	r2, r2, #2
 80176d8:	f004 ff08 	bl	801c4ec <memset>
 80176dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176de:	2200      	movs	r2, #0
 80176e0:	60da      	str	r2, [r3, #12]
 80176e2:	69a0      	ldr	r0, [r4, #24]
 80176e4:	b138      	cbz	r0, 80176f6 <rcl_wait_set_clear+0x4a>
 80176e6:	69e2      	ldr	r2, [r4, #28]
 80176e8:	2100      	movs	r1, #0
 80176ea:	0092      	lsls	r2, r2, #2
 80176ec:	f004 fefe 	bl	801c4ec <memset>
 80176f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176f2:	2200      	movs	r2, #0
 80176f4:	619a      	str	r2, [r3, #24]
 80176f6:	6a20      	ldr	r0, [r4, #32]
 80176f8:	b138      	cbz	r0, 801770a <rcl_wait_set_clear+0x5e>
 80176fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80176fc:	2100      	movs	r1, #0
 80176fe:	0092      	lsls	r2, r2, #2
 8017700:	f004 fef4 	bl	801c4ec <memset>
 8017704:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017706:	2200      	movs	r2, #0
 8017708:	625a      	str	r2, [r3, #36]	@ 0x24
 801770a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801770c:	b138      	cbz	r0, 801771e <rcl_wait_set_clear+0x72>
 801770e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017710:	2100      	movs	r1, #0
 8017712:	0092      	lsls	r2, r2, #2
 8017714:	f004 feea 	bl	801c4ec <memset>
 8017718:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801771a:	2200      	movs	r2, #0
 801771c:	631a      	str	r2, [r3, #48]	@ 0x30
 801771e:	6920      	ldr	r0, [r4, #16]
 8017720:	b138      	cbz	r0, 8017732 <rcl_wait_set_clear+0x86>
 8017722:	6962      	ldr	r2, [r4, #20]
 8017724:	2100      	movs	r1, #0
 8017726:	0092      	lsls	r2, r2, #2
 8017728:	f004 fee0 	bl	801c4ec <memset>
 801772c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801772e:	2200      	movs	r2, #0
 8017730:	641a      	str	r2, [r3, #64]	@ 0x40
 8017732:	6898      	ldr	r0, [r3, #8]
 8017734:	b138      	cbz	r0, 8017746 <rcl_wait_set_clear+0x9a>
 8017736:	685a      	ldr	r2, [r3, #4]
 8017738:	2100      	movs	r1, #0
 801773a:	0092      	lsls	r2, r2, #2
 801773c:	f004 fed6 	bl	801c4ec <memset>
 8017740:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017742:	2200      	movs	r2, #0
 8017744:	605a      	str	r2, [r3, #4]
 8017746:	6958      	ldr	r0, [r3, #20]
 8017748:	b138      	cbz	r0, 801775a <rcl_wait_set_clear+0xae>
 801774a:	691a      	ldr	r2, [r3, #16]
 801774c:	2100      	movs	r1, #0
 801774e:	0092      	lsls	r2, r2, #2
 8017750:	f004 fecc 	bl	801c4ec <memset>
 8017754:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017756:	2200      	movs	r2, #0
 8017758:	611a      	str	r2, [r3, #16]
 801775a:	6a18      	ldr	r0, [r3, #32]
 801775c:	b138      	cbz	r0, 801776e <rcl_wait_set_clear+0xc2>
 801775e:	69da      	ldr	r2, [r3, #28]
 8017760:	2100      	movs	r1, #0
 8017762:	0092      	lsls	r2, r2, #2
 8017764:	f004 fec2 	bl	801c4ec <memset>
 8017768:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801776a:	2200      	movs	r2, #0
 801776c:	61da      	str	r2, [r3, #28]
 801776e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017770:	b138      	cbz	r0, 8017782 <rcl_wait_set_clear+0xd6>
 8017772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017774:	2100      	movs	r1, #0
 8017776:	0092      	lsls	r2, r2, #2
 8017778:	f004 feb8 	bl	801c4ec <memset>
 801777c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801777e:	2200      	movs	r2, #0
 8017780:	629a      	str	r2, [r3, #40]	@ 0x28
 8017782:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8017784:	b138      	cbz	r0, 8017796 <rcl_wait_set_clear+0xea>
 8017786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017788:	2100      	movs	r1, #0
 801778a:	0092      	lsls	r2, r2, #2
 801778c:	f004 feae 	bl	801c4ec <memset>
 8017790:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017792:	2000      	movs	r0, #0
 8017794:	6358      	str	r0, [r3, #52]	@ 0x34
 8017796:	bd10      	pop	{r4, pc}
 8017798:	200b      	movs	r0, #11
 801779a:	4770      	bx	lr
 801779c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80177a0:	bd10      	pop	{r4, pc}
 80177a2:	bf00      	nop

080177a4 <rcl_wait_set_resize>:
 80177a4:	2800      	cmp	r0, #0
 80177a6:	f000 8185 	beq.w	8017ab4 <rcl_wait_set_resize+0x310>
 80177aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80177b0:	b083      	sub	sp, #12
 80177b2:	4605      	mov	r5, r0
 80177b4:	2c00      	cmp	r4, #0
 80177b6:	f000 817f 	beq.w	8017ab8 <rcl_wait_set_resize+0x314>
 80177ba:	f04f 0900 	mov.w	r9, #0
 80177be:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80177c2:	461f      	mov	r7, r3
 80177c4:	4688      	mov	r8, r1
 80177c6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80177ca:	4616      	mov	r6, r2
 80177cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80177d0:	f8c4 9000 	str.w	r9, [r4]
 80177d4:	2900      	cmp	r1, #0
 80177d6:	f000 80bd 	beq.w	8017954 <rcl_wait_set_resize+0x1b0>
 80177da:	008c      	lsls	r4, r1, #2
 80177dc:	6800      	ldr	r0, [r0, #0]
 80177de:	9301      	str	r3, [sp, #4]
 80177e0:	4652      	mov	r2, sl
 80177e2:	4621      	mov	r1, r4
 80177e4:	4798      	blx	r3
 80177e6:	9b01      	ldr	r3, [sp, #4]
 80177e8:	6028      	str	r0, [r5, #0]
 80177ea:	2800      	cmp	r0, #0
 80177ec:	f000 80cb 	beq.w	8017986 <rcl_wait_set_resize+0x1e2>
 80177f0:	4622      	mov	r2, r4
 80177f2:	4649      	mov	r1, r9
 80177f4:	9301      	str	r3, [sp, #4]
 80177f6:	f004 fe79 	bl	801c4ec <memset>
 80177fa:	f8c5 8004 	str.w	r8, [r5, #4]
 80177fe:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8017802:	9b01      	ldr	r3, [sp, #4]
 8017804:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017808:	f8c8 9004 	str.w	r9, [r8, #4]
 801780c:	4652      	mov	r2, sl
 801780e:	4621      	mov	r1, r4
 8017810:	4798      	blx	r3
 8017812:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017814:	f8c8 0008 	str.w	r0, [r8, #8]
 8017818:	689b      	ldr	r3, [r3, #8]
 801781a:	2b00      	cmp	r3, #0
 801781c:	f000 80ac 	beq.w	8017978 <rcl_wait_set_resize+0x1d4>
 8017820:	4622      	mov	r2, r4
 8017822:	4649      	mov	r1, r9
 8017824:	4618      	mov	r0, r3
 8017826:	f004 fe61 	bl	801c4ec <memset>
 801782a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801782c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017830:	f04f 0800 	mov.w	r8, #0
 8017834:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8017838:	f8c5 800c 	str.w	r8, [r5, #12]
 801783c:	f8c4 800c 	str.w	r8, [r4, #12]
 8017840:	2e00      	cmp	r6, #0
 8017842:	f040 80a4 	bne.w	801798e <rcl_wait_set_resize+0x1ea>
 8017846:	68a8      	ldr	r0, [r5, #8]
 8017848:	b128      	cbz	r0, 8017856 <rcl_wait_set_resize+0xb2>
 801784a:	4649      	mov	r1, r9
 801784c:	4790      	blx	r2
 801784e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017850:	60ae      	str	r6, [r5, #8]
 8017852:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017856:	f04f 0800 	mov.w	r8, #0
 801785a:	19f6      	adds	r6, r6, r7
 801785c:	f8c4 8010 	str.w	r8, [r4, #16]
 8017860:	f040 80ac 	bne.w	80179bc <rcl_wait_set_resize+0x218>
 8017864:	6960      	ldr	r0, [r4, #20]
 8017866:	b130      	cbz	r0, 8017876 <rcl_wait_set_resize+0xd2>
 8017868:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801786a:	4649      	mov	r1, r9
 801786c:	4798      	blx	r3
 801786e:	6166      	str	r6, [r4, #20]
 8017870:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017872:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017876:	2600      	movs	r6, #0
 8017878:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801787c:	616e      	str	r6, [r5, #20]
 801787e:	6426      	str	r6, [r4, #64]	@ 0x40
 8017880:	2f00      	cmp	r7, #0
 8017882:	f040 80ad 	bne.w	80179e0 <rcl_wait_set_resize+0x23c>
 8017886:	6928      	ldr	r0, [r5, #16]
 8017888:	b138      	cbz	r0, 801789a <rcl_wait_set_resize+0xf6>
 801788a:	4649      	mov	r1, r9
 801788c:	47d0      	blx	sl
 801788e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017890:	612f      	str	r7, [r5, #16]
 8017892:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017896:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801789a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801789c:	2600      	movs	r6, #0
 801789e:	61ee      	str	r6, [r5, #28]
 80178a0:	61a6      	str	r6, [r4, #24]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	f040 80af 	bne.w	8017a06 <rcl_wait_set_resize+0x262>
 80178a8:	69a8      	ldr	r0, [r5, #24]
 80178aa:	b120      	cbz	r0, 80178b6 <rcl_wait_set_resize+0x112>
 80178ac:	4649      	mov	r1, r9
 80178ae:	47d0      	blx	sl
 80178b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80178b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178b4:	61ab      	str	r3, [r5, #24]
 80178b6:	6a20      	ldr	r0, [r4, #32]
 80178b8:	b128      	cbz	r0, 80178c6 <rcl_wait_set_resize+0x122>
 80178ba:	4649      	mov	r1, r9
 80178bc:	47d0      	blx	sl
 80178be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178c0:	2300      	movs	r3, #0
 80178c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80178c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80178c8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80178ca:	2600      	movs	r6, #0
 80178cc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80178d0:	626e      	str	r6, [r5, #36]	@ 0x24
 80178d2:	6266      	str	r6, [r4, #36]	@ 0x24
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f000 80b6 	beq.w	8017a46 <rcl_wait_set_resize+0x2a2>
 80178da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80178de:	6a28      	ldr	r0, [r5, #32]
 80178e0:	463a      	mov	r2, r7
 80178e2:	4651      	mov	r1, sl
 80178e4:	47c8      	blx	r9
 80178e6:	6228      	str	r0, [r5, #32]
 80178e8:	2800      	cmp	r0, #0
 80178ea:	d04c      	beq.n	8017986 <rcl_wait_set_resize+0x1e2>
 80178ec:	4652      	mov	r2, sl
 80178ee:	4631      	mov	r1, r6
 80178f0:	f004 fdfc 	bl	801c4ec <memset>
 80178f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80178f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80178f8:	626b      	str	r3, [r5, #36]	@ 0x24
 80178fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80178fc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80178fe:	463a      	mov	r2, r7
 8017900:	4651      	mov	r1, sl
 8017902:	47c8      	blx	r9
 8017904:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017906:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017908:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801790a:	2c00      	cmp	r4, #0
 801790c:	f000 80f0 	beq.w	8017af0 <rcl_wait_set_resize+0x34c>
 8017910:	4620      	mov	r0, r4
 8017912:	4652      	mov	r2, sl
 8017914:	4631      	mov	r1, r6
 8017916:	f004 fde9 	bl	801c4ec <memset>
 801791a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801791c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801791e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017920:	2600      	movs	r6, #0
 8017922:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017926:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8017928:	6326      	str	r6, [r4, #48]	@ 0x30
 801792a:	2b00      	cmp	r3, #0
 801792c:	f040 809d 	bne.w	8017a6a <rcl_wait_set_resize+0x2c6>
 8017930:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017932:	b120      	cbz	r0, 801793e <rcl_wait_set_resize+0x19a>
 8017934:	4639      	mov	r1, r7
 8017936:	47c0      	blx	r8
 8017938:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801793a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801793c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801793e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017940:	b310      	cbz	r0, 8017988 <rcl_wait_set_resize+0x1e4>
 8017942:	4639      	mov	r1, r7
 8017944:	47c0      	blx	r8
 8017946:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017948:	2000      	movs	r0, #0
 801794a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801794e:	b003      	add	sp, #12
 8017950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017954:	6800      	ldr	r0, [r0, #0]
 8017956:	b120      	cbz	r0, 8017962 <rcl_wait_set_resize+0x1be>
 8017958:	4651      	mov	r1, sl
 801795a:	47d8      	blx	fp
 801795c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801795e:	f8c5 8000 	str.w	r8, [r5]
 8017962:	68a0      	ldr	r0, [r4, #8]
 8017964:	2800      	cmp	r0, #0
 8017966:	f43f af61 	beq.w	801782c <rcl_wait_set_resize+0x88>
 801796a:	4651      	mov	r1, sl
 801796c:	47d8      	blx	fp
 801796e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017970:	2300      	movs	r3, #0
 8017972:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017976:	e759      	b.n	801782c <rcl_wait_set_resize+0x88>
 8017978:	6828      	ldr	r0, [r5, #0]
 801797a:	9301      	str	r3, [sp, #4]
 801797c:	4651      	mov	r1, sl
 801797e:	47d8      	blx	fp
 8017980:	9b01      	ldr	r3, [sp, #4]
 8017982:	e9c5 3300 	strd	r3, r3, [r5]
 8017986:	200a      	movs	r0, #10
 8017988:	b003      	add	sp, #12
 801798a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801798e:	00b4      	lsls	r4, r6, #2
 8017990:	68a8      	ldr	r0, [r5, #8]
 8017992:	464a      	mov	r2, r9
 8017994:	4621      	mov	r1, r4
 8017996:	4798      	blx	r3
 8017998:	60a8      	str	r0, [r5, #8]
 801799a:	2800      	cmp	r0, #0
 801799c:	d0f3      	beq.n	8017986 <rcl_wait_set_resize+0x1e2>
 801799e:	4622      	mov	r2, r4
 80179a0:	4641      	mov	r1, r8
 80179a2:	f004 fda3 	bl	801c4ec <memset>
 80179a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179a8:	60ee      	str	r6, [r5, #12]
 80179aa:	f04f 0800 	mov.w	r8, #0
 80179ae:	19f6      	adds	r6, r6, r7
 80179b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80179b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80179b8:	f43f af54 	beq.w	8017864 <rcl_wait_set_resize+0xc0>
 80179bc:	00b6      	lsls	r6, r6, #2
 80179be:	464a      	mov	r2, r9
 80179c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80179c2:	6960      	ldr	r0, [r4, #20]
 80179c4:	4631      	mov	r1, r6
 80179c6:	4798      	blx	r3
 80179c8:	4681      	mov	r9, r0
 80179ca:	6160      	str	r0, [r4, #20]
 80179cc:	2800      	cmp	r0, #0
 80179ce:	d076      	beq.n	8017abe <rcl_wait_set_resize+0x31a>
 80179d0:	4632      	mov	r2, r6
 80179d2:	4641      	mov	r1, r8
 80179d4:	f004 fd8a 	bl	801c4ec <memset>
 80179d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80179de:	e74a      	b.n	8017876 <rcl_wait_set_resize+0xd2>
 80179e0:	00bc      	lsls	r4, r7, #2
 80179e2:	6928      	ldr	r0, [r5, #16]
 80179e4:	464a      	mov	r2, r9
 80179e6:	4621      	mov	r1, r4
 80179e8:	47c0      	blx	r8
 80179ea:	6128      	str	r0, [r5, #16]
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d0ca      	beq.n	8017986 <rcl_wait_set_resize+0x1e2>
 80179f0:	4622      	mov	r2, r4
 80179f2:	4631      	mov	r1, r6
 80179f4:	f004 fd7a 	bl	801c4ec <memset>
 80179f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80179fa:	616f      	str	r7, [r5, #20]
 80179fc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017a00:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017a04:	e749      	b.n	801789a <rcl_wait_set_resize+0xf6>
 8017a06:	009c      	lsls	r4, r3, #2
 8017a08:	69a8      	ldr	r0, [r5, #24]
 8017a0a:	464a      	mov	r2, r9
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	47c0      	blx	r8
 8017a10:	61a8      	str	r0, [r5, #24]
 8017a12:	2800      	cmp	r0, #0
 8017a14:	d0b7      	beq.n	8017986 <rcl_wait_set_resize+0x1e2>
 8017a16:	4622      	mov	r2, r4
 8017a18:	4631      	mov	r1, r6
 8017a1a:	f004 fd67 	bl	801c4ec <memset>
 8017a1e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a22:	61eb      	str	r3, [r5, #28]
 8017a24:	6a38      	ldr	r0, [r7, #32]
 8017a26:	61fe      	str	r6, [r7, #28]
 8017a28:	464a      	mov	r2, r9
 8017a2a:	4621      	mov	r1, r4
 8017a2c:	47c0      	blx	r8
 8017a2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017a30:	6238      	str	r0, [r7, #32]
 8017a32:	6a1f      	ldr	r7, [r3, #32]
 8017a34:	2f00      	cmp	r7, #0
 8017a36:	d054      	beq.n	8017ae2 <rcl_wait_set_resize+0x33e>
 8017a38:	4622      	mov	r2, r4
 8017a3a:	4631      	mov	r1, r6
 8017a3c:	4638      	mov	r0, r7
 8017a3e:	f004 fd55 	bl	801c4ec <memset>
 8017a42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a44:	e73f      	b.n	80178c6 <rcl_wait_set_resize+0x122>
 8017a46:	6a28      	ldr	r0, [r5, #32]
 8017a48:	b120      	cbz	r0, 8017a54 <rcl_wait_set_resize+0x2b0>
 8017a4a:	4639      	mov	r1, r7
 8017a4c:	47c0      	blx	r8
 8017a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017a50:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a52:	622b      	str	r3, [r5, #32]
 8017a54:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8017a56:	2800      	cmp	r0, #0
 8017a58:	f43f af60 	beq.w	801791c <rcl_wait_set_resize+0x178>
 8017a5c:	4639      	mov	r1, r7
 8017a5e:	47c0      	blx	r8
 8017a60:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017a62:	2300      	movs	r3, #0
 8017a64:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8017a68:	e758      	b.n	801791c <rcl_wait_set_resize+0x178>
 8017a6a:	009c      	lsls	r4, r3, #2
 8017a6c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017a6e:	463a      	mov	r2, r7
 8017a70:	4621      	mov	r1, r4
 8017a72:	47c8      	blx	r9
 8017a74:	62a8      	str	r0, [r5, #40]	@ 0x28
 8017a76:	2800      	cmp	r0, #0
 8017a78:	d085      	beq.n	8017986 <rcl_wait_set_resize+0x1e2>
 8017a7a:	4622      	mov	r2, r4
 8017a7c:	4631      	mov	r1, r6
 8017a7e:	f004 fd35 	bl	801c4ec <memset>
 8017a82:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8017a86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a88:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8017a8a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8017a8e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8017a92:	463a      	mov	r2, r7
 8017a94:	4621      	mov	r1, r4
 8017a96:	47c8      	blx	r9
 8017a98:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017a9a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8017a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017aa0:	b36b      	cbz	r3, 8017afe <rcl_wait_set_resize+0x35a>
 8017aa2:	4622      	mov	r2, r4
 8017aa4:	4631      	mov	r1, r6
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f004 fd20 	bl	801c4ec <memset>
 8017aac:	4630      	mov	r0, r6
 8017aae:	b003      	add	sp, #12
 8017ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab4:	200b      	movs	r0, #11
 8017ab6:	4770      	bx	lr
 8017ab8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017abc:	e764      	b.n	8017988 <rcl_wait_set_resize+0x1e4>
 8017abe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ac0:	68a8      	ldr	r0, [r5, #8]
 8017ac2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017ac6:	4798      	blx	r3
 8017ac8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017aca:	6928      	ldr	r0, [r5, #16]
 8017acc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017ace:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017ad0:	f8c5 900c 	str.w	r9, [r5, #12]
 8017ad4:	f8c5 9008 	str.w	r9, [r5, #8]
 8017ad8:	4790      	blx	r2
 8017ada:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017ade:	200a      	movs	r0, #10
 8017ae0:	e752      	b.n	8017988 <rcl_wait_set_resize+0x1e4>
 8017ae2:	69a8      	ldr	r0, [r5, #24]
 8017ae4:	4649      	mov	r1, r9
 8017ae6:	47d0      	blx	sl
 8017ae8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017aec:	200a      	movs	r0, #10
 8017aee:	e74b      	b.n	8017988 <rcl_wait_set_resize+0x1e4>
 8017af0:	6a28      	ldr	r0, [r5, #32]
 8017af2:	4639      	mov	r1, r7
 8017af4:	47c0      	blx	r8
 8017af6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017afa:	200a      	movs	r0, #10
 8017afc:	e744      	b.n	8017988 <rcl_wait_set_resize+0x1e4>
 8017afe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017b00:	9301      	str	r3, [sp, #4]
 8017b02:	4639      	mov	r1, r7
 8017b04:	47c0      	blx	r8
 8017b06:	9b01      	ldr	r3, [sp, #4]
 8017b08:	200a      	movs	r0, #10
 8017b0a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017b0e:	e73b      	b.n	8017988 <rcl_wait_set_resize+0x1e4>

08017b10 <rcl_wait_set_init>:
 8017b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b14:	b084      	sub	sp, #16
 8017b16:	4604      	mov	r4, r0
 8017b18:	a810      	add	r0, sp, #64	@ 0x40
 8017b1a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8017b1e:	460f      	mov	r7, r1
 8017b20:	4690      	mov	r8, r2
 8017b22:	4699      	mov	r9, r3
 8017b24:	f7f8 fc10 	bl	8010348 <rcutils_allocator_is_valid>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	d06b      	beq.n	8017c04 <rcl_wait_set_init+0xf4>
 8017b2c:	2c00      	cmp	r4, #0
 8017b2e:	d069      	beq.n	8017c04 <rcl_wait_set_init+0xf4>
 8017b30:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8017b32:	b125      	cbz	r5, 8017b3e <rcl_wait_set_init+0x2e>
 8017b34:	2564      	movs	r5, #100	@ 0x64
 8017b36:	4628      	mov	r0, r5
 8017b38:	b004      	add	sp, #16
 8017b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b3e:	f1ba 0f00 	cmp.w	sl, #0
 8017b42:	d05f      	beq.n	8017c04 <rcl_wait_set_init+0xf4>
 8017b44:	4650      	mov	r0, sl
 8017b46:	f7f6 fb69 	bl	800e21c <rcl_context_is_valid>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d067      	beq.n	8017c1e <rcl_wait_set_init+0x10e>
 8017b4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017b50:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8017b52:	205c      	movs	r0, #92	@ 0x5c
 8017b54:	4798      	blx	r3
 8017b56:	6320      	str	r0, [r4, #48]	@ 0x30
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	d062      	beq.n	8017c22 <rcl_wait_set_init+0x112>
 8017b5c:	4629      	mov	r1, r5
 8017b5e:	225c      	movs	r2, #92	@ 0x5c
 8017b60:	f004 fcc4 	bl	801c4ec <memset>
 8017b64:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8017b68:	eb03 0e02 	add.w	lr, r3, r2
 8017b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b6e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8017b70:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8017b74:	449e      	add	lr, r3
 8017b76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b7a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017b7e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8017b82:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8017b86:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8017b8a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8017b8e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8017b92:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8017b96:	f8da a000 	ldr.w	sl, [sl]
 8017b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017b9c:	44c6      	add	lr, r8
 8017b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8017ba2:	602b      	str	r3, [r5, #0]
 8017ba4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8017ba8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8017bac:	f001 ff14 	bl	80199d8 <rmw_create_wait_set>
 8017bb0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bb2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8017bb4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017bb6:	b350      	cbz	r0, 8017c0e <rcl_wait_set_init+0xfe>
 8017bb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017bba:	9302      	str	r3, [sp, #8]
 8017bbc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017bbe:	9301      	str	r3, [sp, #4]
 8017bc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bc2:	9300      	str	r3, [sp, #0]
 8017bc4:	4642      	mov	r2, r8
 8017bc6:	464b      	mov	r3, r9
 8017bc8:	4639      	mov	r1, r7
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f7ff fdea 	bl	80177a4 <rcl_wait_set_resize>
 8017bd0:	4605      	mov	r5, r0
 8017bd2:	2800      	cmp	r0, #0
 8017bd4:	d0af      	beq.n	8017b36 <rcl_wait_set_init+0x26>
 8017bd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017bd8:	bb2b      	cbnz	r3, 8017c26 <rcl_wait_set_init+0x116>
 8017bda:	2600      	movs	r6, #0
 8017bdc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017be0:	9600      	str	r6, [sp, #0]
 8017be2:	4633      	mov	r3, r6
 8017be4:	4632      	mov	r2, r6
 8017be6:	4631      	mov	r1, r6
 8017be8:	4620      	mov	r0, r4
 8017bea:	f7ff fddb 	bl	80177a4 <rcl_wait_set_resize>
 8017bee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8017bf0:	2800      	cmp	r0, #0
 8017bf2:	d0a0      	beq.n	8017b36 <rcl_wait_set_init+0x26>
 8017bf4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017bf6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8017bf8:	4798      	blx	r3
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	6326      	str	r6, [r4, #48]	@ 0x30
 8017bfe:	b004      	add	sp, #16
 8017c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c04:	250b      	movs	r5, #11
 8017c06:	4628      	mov	r0, r5
 8017c08:	b004      	add	sp, #16
 8017c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c0e:	2501      	movs	r5, #1
 8017c10:	f001 feec 	bl	80199ec <rmw_destroy_wait_set>
 8017c14:	2800      	cmp	r0, #0
 8017c16:	bf18      	it	ne
 8017c18:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8017c1c:	e7dd      	b.n	8017bda <rcl_wait_set_init+0xca>
 8017c1e:	2565      	movs	r5, #101	@ 0x65
 8017c20:	e789      	b.n	8017b36 <rcl_wait_set_init+0x26>
 8017c22:	250a      	movs	r5, #10
 8017c24:	e787      	b.n	8017b36 <rcl_wait_set_init+0x26>
 8017c26:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8017c28:	e7f2      	b.n	8017c10 <rcl_wait_set_init+0x100>
 8017c2a:	bf00      	nop

08017c2c <rcl_wait_set_add_guard_condition>:
 8017c2c:	b318      	cbz	r0, 8017c76 <rcl_wait_set_add_guard_condition+0x4a>
 8017c2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017c30:	b570      	push	{r4, r5, r6, lr}
 8017c32:	4604      	mov	r4, r0
 8017c34:	b30b      	cbz	r3, 8017c7a <rcl_wait_set_add_guard_condition+0x4e>
 8017c36:	b319      	cbz	r1, 8017c80 <rcl_wait_set_add_guard_condition+0x54>
 8017c38:	68dd      	ldr	r5, [r3, #12]
 8017c3a:	68c0      	ldr	r0, [r0, #12]
 8017c3c:	4285      	cmp	r5, r0
 8017c3e:	d217      	bcs.n	8017c70 <rcl_wait_set_add_guard_condition+0x44>
 8017c40:	68a0      	ldr	r0, [r4, #8]
 8017c42:	1c6e      	adds	r6, r5, #1
 8017c44:	60de      	str	r6, [r3, #12]
 8017c46:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017c4a:	b102      	cbz	r2, 8017c4e <rcl_wait_set_add_guard_condition+0x22>
 8017c4c:	6015      	str	r5, [r2, #0]
 8017c4e:	4608      	mov	r0, r1
 8017c50:	f7ff f874 	bl	8016d3c <rcl_guard_condition_get_rmw_handle>
 8017c54:	b150      	cbz	r0, 8017c6c <rcl_wait_set_add_guard_condition+0x40>
 8017c56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c58:	6842      	ldr	r2, [r0, #4]
 8017c5a:	695b      	ldr	r3, [r3, #20]
 8017c5c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017c60:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017c62:	6913      	ldr	r3, [r2, #16]
 8017c64:	3301      	adds	r3, #1
 8017c66:	2000      	movs	r0, #0
 8017c68:	6113      	str	r3, [r2, #16]
 8017c6a:	bd70      	pop	{r4, r5, r6, pc}
 8017c6c:	2001      	movs	r0, #1
 8017c6e:	bd70      	pop	{r4, r5, r6, pc}
 8017c70:	f240 3086 	movw	r0, #902	@ 0x386
 8017c74:	bd70      	pop	{r4, r5, r6, pc}
 8017c76:	200b      	movs	r0, #11
 8017c78:	4770      	bx	lr
 8017c7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017c7e:	bd70      	pop	{r4, r5, r6, pc}
 8017c80:	200b      	movs	r0, #11
 8017c82:	bd70      	pop	{r4, r5, r6, pc}

08017c84 <rcl_wait_set_add_timer>:
 8017c84:	b328      	cbz	r0, 8017cd2 <rcl_wait_set_add_timer+0x4e>
 8017c86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017c88:	b570      	push	{r4, r5, r6, lr}
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	b31b      	cbz	r3, 8017cd6 <rcl_wait_set_add_timer+0x52>
 8017c8e:	b329      	cbz	r1, 8017cdc <rcl_wait_set_add_timer+0x58>
 8017c90:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8017c92:	6965      	ldr	r5, [r4, #20]
 8017c94:	42a8      	cmp	r0, r5
 8017c96:	d219      	bcs.n	8017ccc <rcl_wait_set_add_timer+0x48>
 8017c98:	6925      	ldr	r5, [r4, #16]
 8017c9a:	1c46      	adds	r6, r0, #1
 8017c9c:	641e      	str	r6, [r3, #64]	@ 0x40
 8017c9e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8017ca2:	b102      	cbz	r2, 8017ca6 <rcl_wait_set_add_timer+0x22>
 8017ca4:	6010      	str	r0, [r2, #0]
 8017ca6:	4608      	mov	r0, r1
 8017ca8:	f7f7 fb5e 	bl	800f368 <rcl_timer_get_guard_condition>
 8017cac:	b168      	cbz	r0, 8017cca <rcl_wait_set_add_timer+0x46>
 8017cae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017cb0:	68e3      	ldr	r3, [r4, #12]
 8017cb2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8017cb4:	3b01      	subs	r3, #1
 8017cb6:	441d      	add	r5, r3
 8017cb8:	f7ff f840 	bl	8016d3c <rcl_guard_condition_get_rmw_handle>
 8017cbc:	b180      	cbz	r0, 8017ce0 <rcl_wait_set_add_timer+0x5c>
 8017cbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017cc0:	6842      	ldr	r2, [r0, #4]
 8017cc2:	695b      	ldr	r3, [r3, #20]
 8017cc4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017cc8:	2000      	movs	r0, #0
 8017cca:	bd70      	pop	{r4, r5, r6, pc}
 8017ccc:	f240 3086 	movw	r0, #902	@ 0x386
 8017cd0:	bd70      	pop	{r4, r5, r6, pc}
 8017cd2:	200b      	movs	r0, #11
 8017cd4:	4770      	bx	lr
 8017cd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017cda:	bd70      	pop	{r4, r5, r6, pc}
 8017cdc:	200b      	movs	r0, #11
 8017cde:	bd70      	pop	{r4, r5, r6, pc}
 8017ce0:	2001      	movs	r0, #1
 8017ce2:	bd70      	pop	{r4, r5, r6, pc}

08017ce4 <rcl_wait_set_add_client>:
 8017ce4:	b318      	cbz	r0, 8017d2e <rcl_wait_set_add_client+0x4a>
 8017ce6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017ce8:	b570      	push	{r4, r5, r6, lr}
 8017cea:	4604      	mov	r4, r0
 8017cec:	b30b      	cbz	r3, 8017d32 <rcl_wait_set_add_client+0x4e>
 8017cee:	b319      	cbz	r1, 8017d38 <rcl_wait_set_add_client+0x54>
 8017cf0:	699d      	ldr	r5, [r3, #24]
 8017cf2:	69c0      	ldr	r0, [r0, #28]
 8017cf4:	4285      	cmp	r5, r0
 8017cf6:	d217      	bcs.n	8017d28 <rcl_wait_set_add_client+0x44>
 8017cf8:	69a0      	ldr	r0, [r4, #24]
 8017cfa:	1c6e      	adds	r6, r5, #1
 8017cfc:	619e      	str	r6, [r3, #24]
 8017cfe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d02:	b102      	cbz	r2, 8017d06 <rcl_wait_set_add_client+0x22>
 8017d04:	6015      	str	r5, [r2, #0]
 8017d06:	4608      	mov	r0, r1
 8017d08:	f7fe fe6c 	bl	80169e4 <rcl_client_get_rmw_handle>
 8017d0c:	b150      	cbz	r0, 8017d24 <rcl_wait_set_add_client+0x40>
 8017d0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d10:	6842      	ldr	r2, [r0, #4]
 8017d12:	6a1b      	ldr	r3, [r3, #32]
 8017d14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017d1a:	69d3      	ldr	r3, [r2, #28]
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	2000      	movs	r0, #0
 8017d20:	61d3      	str	r3, [r2, #28]
 8017d22:	bd70      	pop	{r4, r5, r6, pc}
 8017d24:	2001      	movs	r0, #1
 8017d26:	bd70      	pop	{r4, r5, r6, pc}
 8017d28:	f240 3086 	movw	r0, #902	@ 0x386
 8017d2c:	bd70      	pop	{r4, r5, r6, pc}
 8017d2e:	200b      	movs	r0, #11
 8017d30:	4770      	bx	lr
 8017d32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d36:	bd70      	pop	{r4, r5, r6, pc}
 8017d38:	200b      	movs	r0, #11
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}

08017d3c <rcl_wait_set_add_service>:
 8017d3c:	b318      	cbz	r0, 8017d86 <rcl_wait_set_add_service+0x4a>
 8017d3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017d40:	b570      	push	{r4, r5, r6, lr}
 8017d42:	4604      	mov	r4, r0
 8017d44:	b30b      	cbz	r3, 8017d8a <rcl_wait_set_add_service+0x4e>
 8017d46:	b319      	cbz	r1, 8017d90 <rcl_wait_set_add_service+0x54>
 8017d48:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8017d4a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8017d4c:	4285      	cmp	r5, r0
 8017d4e:	d217      	bcs.n	8017d80 <rcl_wait_set_add_service+0x44>
 8017d50:	6a20      	ldr	r0, [r4, #32]
 8017d52:	1c6e      	adds	r6, r5, #1
 8017d54:	625e      	str	r6, [r3, #36]	@ 0x24
 8017d56:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8017d5a:	b102      	cbz	r2, 8017d5e <rcl_wait_set_add_service+0x22>
 8017d5c:	6015      	str	r5, [r2, #0]
 8017d5e:	4608      	mov	r0, r1
 8017d60:	f7ff f9c8 	bl	80170f4 <rcl_service_get_rmw_handle>
 8017d64:	b150      	cbz	r0, 8017d7c <rcl_wait_set_add_service+0x40>
 8017d66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d68:	6842      	ldr	r2, [r0, #4]
 8017d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d70:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017d72:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8017d74:	3301      	adds	r3, #1
 8017d76:	2000      	movs	r0, #0
 8017d78:	6293      	str	r3, [r2, #40]	@ 0x28
 8017d7a:	bd70      	pop	{r4, r5, r6, pc}
 8017d7c:	2001      	movs	r0, #1
 8017d7e:	bd70      	pop	{r4, r5, r6, pc}
 8017d80:	f240 3086 	movw	r0, #902	@ 0x386
 8017d84:	bd70      	pop	{r4, r5, r6, pc}
 8017d86:	200b      	movs	r0, #11
 8017d88:	4770      	bx	lr
 8017d8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d8e:	bd70      	pop	{r4, r5, r6, pc}
 8017d90:	200b      	movs	r0, #11
 8017d92:	bd70      	pop	{r4, r5, r6, pc}
 8017d94:	0000      	movs	r0, r0
	...

08017d98 <rcl_wait>:
 8017d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d9c:	ed2d 8b02 	vpush	{d8}
 8017da0:	b08d      	sub	sp, #52	@ 0x34
 8017da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017da6:	2800      	cmp	r0, #0
 8017da8:	f000 8143 	beq.w	8018032 <rcl_wait+0x29a>
 8017dac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8017dae:	4605      	mov	r5, r0
 8017db0:	2e00      	cmp	r6, #0
 8017db2:	f000 8112 	beq.w	8017fda <rcl_wait+0x242>
 8017db6:	6843      	ldr	r3, [r0, #4]
 8017db8:	b983      	cbnz	r3, 8017ddc <rcl_wait+0x44>
 8017dba:	68eb      	ldr	r3, [r5, #12]
 8017dbc:	b973      	cbnz	r3, 8017ddc <rcl_wait+0x44>
 8017dbe:	696b      	ldr	r3, [r5, #20]
 8017dc0:	b963      	cbnz	r3, 8017ddc <rcl_wait+0x44>
 8017dc2:	69eb      	ldr	r3, [r5, #28]
 8017dc4:	b953      	cbnz	r3, 8017ddc <rcl_wait+0x44>
 8017dc6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8017dc8:	b943      	cbnz	r3, 8017ddc <rcl_wait+0x44>
 8017dca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8017dcc:	b933      	cbnz	r3, 8017ddc <rcl_wait+0x44>
 8017dce:	f240 3085 	movw	r0, #901	@ 0x385
 8017dd2:	b00d      	add	sp, #52	@ 0x34
 8017dd4:	ecbd 8b02 	vpop	{d8}
 8017dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ddc:	9b04      	ldr	r3, [sp, #16]
 8017dde:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	9b05      	ldr	r3, [sp, #20]
 8017de4:	f173 0300 	sbcs.w	r3, r3, #0
 8017de8:	f2c0 80f0 	blt.w	8017fcc <rcl_wait+0x234>
 8017dec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017df0:	4643      	mov	r3, r8
 8017df2:	2a00      	cmp	r2, #0
 8017df4:	f000 8133 	beq.w	801805e <rcl_wait+0x2c6>
 8017df8:	2400      	movs	r4, #0
 8017dfa:	4613      	mov	r3, r2
 8017dfc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8018070 <rcl_wait+0x2d8>
 8017e00:	46a2      	mov	sl, r4
 8017e02:	46a3      	mov	fp, r4
 8017e04:	f240 3921 	movw	r9, #801	@ 0x321
 8017e08:	4632      	mov	r2, r6
 8017e0a:	e014      	b.n	8017e36 <rcl_wait+0x9e>
 8017e0c:	2800      	cmp	r0, #0
 8017e0e:	d1e0      	bne.n	8017dd2 <rcl_wait+0x3a>
 8017e10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017e14:	4542      	cmp	r2, r8
 8017e16:	eb73 0107 	sbcs.w	r1, r3, r7
 8017e1a:	da03      	bge.n	8017e24 <rcl_wait+0x8c>
 8017e1c:	4690      	mov	r8, r2
 8017e1e:	461f      	mov	r7, r3
 8017e20:	f04f 0b01 	mov.w	fp, #1
 8017e24:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017e26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017e28:	3401      	adds	r4, #1
 8017e2a:	f14a 0a00 	adc.w	sl, sl, #0
 8017e2e:	429c      	cmp	r4, r3
 8017e30:	f17a 0100 	sbcs.w	r1, sl, #0
 8017e34:	d228      	bcs.n	8017e88 <rcl_wait+0xf0>
 8017e36:	6928      	ldr	r0, [r5, #16]
 8017e38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017e3c:	a908      	add	r1, sp, #32
 8017e3e:	00a6      	lsls	r6, r4, #2
 8017e40:	2800      	cmp	r0, #0
 8017e42:	d0f1      	beq.n	8017e28 <rcl_wait+0x90>
 8017e44:	68eb      	ldr	r3, [r5, #12]
 8017e46:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017e4a:	4423      	add	r3, r4
 8017e4c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017e50:	f1be 0f00 	cmp.w	lr, #0
 8017e54:	d006      	beq.n	8017e64 <rcl_wait+0xcc>
 8017e56:	6913      	ldr	r3, [r2, #16]
 8017e58:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017e5c:	3301      	adds	r3, #1
 8017e5e:	6113      	str	r3, [r2, #16]
 8017e60:	692b      	ldr	r3, [r5, #16]
 8017e62:	5998      	ldr	r0, [r3, r6]
 8017e64:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017e68:	f7f7 fa4c 	bl	800f304 <rcl_timer_get_time_until_next_call>
 8017e6c:	4548      	cmp	r0, r9
 8017e6e:	d1cd      	bne.n	8017e0c <rcl_wait+0x74>
 8017e70:	692b      	ldr	r3, [r5, #16]
 8017e72:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017e74:	2100      	movs	r1, #0
 8017e76:	5199      	str	r1, [r3, r6]
 8017e78:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017e7a:	3401      	adds	r4, #1
 8017e7c:	f14a 0a00 	adc.w	sl, sl, #0
 8017e80:	429c      	cmp	r4, r3
 8017e82:	f17a 0100 	sbcs.w	r1, sl, #0
 8017e86:	d3d6      	bcc.n	8017e36 <rcl_wait+0x9e>
 8017e88:	4616      	mov	r6, r2
 8017e8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017e8e:	4313      	orrs	r3, r2
 8017e90:	46d9      	mov	r9, fp
 8017e92:	f040 80a9 	bne.w	8017fe8 <rcl_wait+0x250>
 8017e96:	2300      	movs	r3, #0
 8017e98:	2200      	movs	r2, #0
 8017e9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017e9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017ea2:	ab08      	add	r3, sp, #32
 8017ea4:	9302      	str	r3, [sp, #8]
 8017ea6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8017ea8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8017eac:	e9cd 3200 	strd	r3, r2, [sp]
 8017eb0:	f106 0110 	add.w	r1, r6, #16
 8017eb4:	f106 031c 	add.w	r3, r6, #28
 8017eb8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8017ebc:	1d30      	adds	r0, r6, #4
 8017ebe:	f001 fc13 	bl	80196e8 <rmw_wait>
 8017ec2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ec4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017ec6:	4680      	mov	r8, r0
 8017ec8:	b1ca      	cbz	r2, 8017efe <rcl_wait+0x166>
 8017eca:	2400      	movs	r4, #0
 8017ecc:	4627      	mov	r7, r4
 8017ece:	692a      	ldr	r2, [r5, #16]
 8017ed0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8017ed4:	f10d 011f 	add.w	r1, sp, #31
 8017ed8:	00a6      	lsls	r6, r4, #2
 8017eda:	b160      	cbz	r0, 8017ef6 <rcl_wait+0x15e>
 8017edc:	f88d 701f 	strb.w	r7, [sp, #31]
 8017ee0:	f7f7 f9d6 	bl	800f290 <rcl_timer_is_ready>
 8017ee4:	2800      	cmp	r0, #0
 8017ee6:	f47f af74 	bne.w	8017dd2 <rcl_wait+0x3a>
 8017eea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017eee:	b90b      	cbnz	r3, 8017ef4 <rcl_wait+0x15c>
 8017ef0:	692a      	ldr	r2, [r5, #16]
 8017ef2:	5193      	str	r3, [r2, r6]
 8017ef4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017ef8:	3401      	adds	r4, #1
 8017efa:	42a2      	cmp	r2, r4
 8017efc:	d8e7      	bhi.n	8017ece <rcl_wait+0x136>
 8017efe:	f038 0002 	bics.w	r0, r8, #2
 8017f02:	f040 8090 	bne.w	8018026 <rcl_wait+0x28e>
 8017f06:	686e      	ldr	r6, [r5, #4]
 8017f08:	4602      	mov	r2, r0
 8017f0a:	b91e      	cbnz	r6, 8017f14 <rcl_wait+0x17c>
 8017f0c:	e00d      	b.n	8017f2a <rcl_wait+0x192>
 8017f0e:	3201      	adds	r2, #1
 8017f10:	42b2      	cmp	r2, r6
 8017f12:	d00a      	beq.n	8017f2a <rcl_wait+0x192>
 8017f14:	6899      	ldr	r1, [r3, #8]
 8017f16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f1a:	2900      	cmp	r1, #0
 8017f1c:	d1f7      	bne.n	8017f0e <rcl_wait+0x176>
 8017f1e:	682c      	ldr	r4, [r5, #0]
 8017f20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f24:	3201      	adds	r2, #1
 8017f26:	42b2      	cmp	r2, r6
 8017f28:	d1f4      	bne.n	8017f14 <rcl_wait+0x17c>
 8017f2a:	68ee      	ldr	r6, [r5, #12]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	b91e      	cbnz	r6, 8017f38 <rcl_wait+0x1a0>
 8017f30:	e00d      	b.n	8017f4e <rcl_wait+0x1b6>
 8017f32:	3201      	adds	r2, #1
 8017f34:	42b2      	cmp	r2, r6
 8017f36:	d00a      	beq.n	8017f4e <rcl_wait+0x1b6>
 8017f38:	6959      	ldr	r1, [r3, #20]
 8017f3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f3e:	2900      	cmp	r1, #0
 8017f40:	d1f7      	bne.n	8017f32 <rcl_wait+0x19a>
 8017f42:	68ac      	ldr	r4, [r5, #8]
 8017f44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f48:	3201      	adds	r2, #1
 8017f4a:	42b2      	cmp	r2, r6
 8017f4c:	d1f4      	bne.n	8017f38 <rcl_wait+0x1a0>
 8017f4e:	69ee      	ldr	r6, [r5, #28]
 8017f50:	2200      	movs	r2, #0
 8017f52:	b91e      	cbnz	r6, 8017f5c <rcl_wait+0x1c4>
 8017f54:	e00d      	b.n	8017f72 <rcl_wait+0x1da>
 8017f56:	3201      	adds	r2, #1
 8017f58:	42b2      	cmp	r2, r6
 8017f5a:	d00a      	beq.n	8017f72 <rcl_wait+0x1da>
 8017f5c:	6a19      	ldr	r1, [r3, #32]
 8017f5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f62:	2900      	cmp	r1, #0
 8017f64:	d1f7      	bne.n	8017f56 <rcl_wait+0x1be>
 8017f66:	69ac      	ldr	r4, [r5, #24]
 8017f68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f6c:	3201      	adds	r2, #1
 8017f6e:	42b2      	cmp	r2, r6
 8017f70:	d1f4      	bne.n	8017f5c <rcl_wait+0x1c4>
 8017f72:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8017f74:	2200      	movs	r2, #0
 8017f76:	b91e      	cbnz	r6, 8017f80 <rcl_wait+0x1e8>
 8017f78:	e00d      	b.n	8017f96 <rcl_wait+0x1fe>
 8017f7a:	3201      	adds	r2, #1
 8017f7c:	4296      	cmp	r6, r2
 8017f7e:	d00a      	beq.n	8017f96 <rcl_wait+0x1fe>
 8017f80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017f82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f86:	2900      	cmp	r1, #0
 8017f88:	d1f7      	bne.n	8017f7a <rcl_wait+0x1e2>
 8017f8a:	6a2c      	ldr	r4, [r5, #32]
 8017f8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017f90:	3201      	adds	r2, #1
 8017f92:	4296      	cmp	r6, r2
 8017f94:	d1f4      	bne.n	8017f80 <rcl_wait+0x1e8>
 8017f96:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8017f98:	2200      	movs	r2, #0
 8017f9a:	b91e      	cbnz	r6, 8017fa4 <rcl_wait+0x20c>
 8017f9c:	e00d      	b.n	8017fba <rcl_wait+0x222>
 8017f9e:	3201      	adds	r2, #1
 8017fa0:	42b2      	cmp	r2, r6
 8017fa2:	d00a      	beq.n	8017fba <rcl_wait+0x222>
 8017fa4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017fa6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017faa:	2900      	cmp	r1, #0
 8017fac:	d1f7      	bne.n	8017f9e <rcl_wait+0x206>
 8017fae:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8017fb0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8017fb4:	3201      	adds	r2, #1
 8017fb6:	42b2      	cmp	r2, r6
 8017fb8:	d1f4      	bne.n	8017fa4 <rcl_wait+0x20c>
 8017fba:	f1b8 0f02 	cmp.w	r8, #2
 8017fbe:	f47f af08 	bne.w	8017dd2 <rcl_wait+0x3a>
 8017fc2:	464b      	mov	r3, r9
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	bf08      	it	eq
 8017fc8:	2002      	moveq	r0, #2
 8017fca:	e702      	b.n	8017dd2 <rcl_wait+0x3a>
 8017fcc:	2a00      	cmp	r2, #0
 8017fce:	d03a      	beq.n	8018046 <rcl_wait+0x2ae>
 8017fd0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017fd4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017fd8:	e70e      	b.n	8017df8 <rcl_wait+0x60>
 8017fda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017fde:	b00d      	add	sp, #52	@ 0x34
 8017fe0:	ecbd 8b02 	vpop	{d8}
 8017fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe8:	9b04      	ldr	r3, [sp, #16]
 8017fea:	2b01      	cmp	r3, #1
 8017fec:	9b05      	ldr	r3, [sp, #20]
 8017fee:	f173 0300 	sbcs.w	r3, r3, #0
 8017ff2:	db24      	blt.n	801803e <rcl_wait+0x2a6>
 8017ff4:	2f00      	cmp	r7, #0
 8017ff6:	bfbc      	itt	lt
 8017ff8:	f04f 0800 	movlt.w	r8, #0
 8017ffc:	4647      	movlt	r7, r8
 8017ffe:	a31e      	add	r3, pc, #120	@ (adr r3, 8018078 <rcl_wait+0x2e0>)
 8018000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018004:	4640      	mov	r0, r8
 8018006:	4639      	mov	r1, r7
 8018008:	f7e8 fd88 	bl	8000b1c <__aeabi_ldivmod>
 801800c:	a31a      	add	r3, pc, #104	@ (adr r3, 8018078 <rcl_wait+0x2e0>)
 801800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018012:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018016:	4640      	mov	r0, r8
 8018018:	4639      	mov	r1, r7
 801801a:	f7e8 fd7f 	bl	8000b1c <__aeabi_ldivmod>
 801801e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8018022:	ab08      	add	r3, sp, #32
 8018024:	e73e      	b.n	8017ea4 <rcl_wait+0x10c>
 8018026:	2001      	movs	r0, #1
 8018028:	b00d      	add	sp, #52	@ 0x34
 801802a:	ecbd 8b02 	vpop	{d8}
 801802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018032:	200b      	movs	r0, #11
 8018034:	b00d      	add	sp, #52	@ 0x34
 8018036:	ecbd 8b02 	vpop	{d8}
 801803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801803e:	465b      	mov	r3, fp
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1d7      	bne.n	8017ff4 <rcl_wait+0x25c>
 8018044:	e72e      	b.n	8017ea4 <rcl_wait+0x10c>
 8018046:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801804a:	430b      	orrs	r3, r1
 801804c:	bf08      	it	eq
 801804e:	4691      	moveq	r9, r2
 8018050:	f43f af21 	beq.w	8017e96 <rcl_wait+0xfe>
 8018054:	9b04      	ldr	r3, [sp, #16]
 8018056:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801805a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801805e:	2b01      	cmp	r3, #1
 8018060:	9b05      	ldr	r3, [sp, #20]
 8018062:	f173 0300 	sbcs.w	r3, r3, #0
 8018066:	f04f 0300 	mov.w	r3, #0
 801806a:	4699      	mov	r9, r3
 801806c:	dac2      	bge.n	8017ff4 <rcl_wait+0x25c>
 801806e:	e719      	b.n	8017ea4 <rcl_wait+0x10c>
 8018070:	ffffffff 	.word	0xffffffff
 8018074:	7fffffff 	.word	0x7fffffff
 8018078:	3b9aca00 	.word	0x3b9aca00
 801807c:	00000000 	.word	0x00000000

08018080 <rcl_action_take_goal_response>:
 8018080:	2800      	cmp	r0, #0
 8018082:	d039      	beq.n	80180f8 <rcl_action_take_goal_response+0x78>
 8018084:	b570      	push	{r4, r5, r6, lr}
 8018086:	4604      	mov	r4, r0
 8018088:	6800      	ldr	r0, [r0, #0]
 801808a:	b380      	cbz	r0, 80180ee <rcl_action_take_goal_response+0x6e>
 801808c:	460d      	mov	r5, r1
 801808e:	4616      	mov	r6, r2
 8018090:	f7fe fd2e 	bl	8016af0 <rcl_client_is_valid>
 8018094:	b330      	cbz	r0, 80180e4 <rcl_action_take_goal_response+0x64>
 8018096:	6820      	ldr	r0, [r4, #0]
 8018098:	3004      	adds	r0, #4
 801809a:	f7fe fd29 	bl	8016af0 <rcl_client_is_valid>
 801809e:	b308      	cbz	r0, 80180e4 <rcl_action_take_goal_response+0x64>
 80180a0:	6820      	ldr	r0, [r4, #0]
 80180a2:	3008      	adds	r0, #8
 80180a4:	f7fe fd24 	bl	8016af0 <rcl_client_is_valid>
 80180a8:	b1e0      	cbz	r0, 80180e4 <rcl_action_take_goal_response+0x64>
 80180aa:	6820      	ldr	r0, [r4, #0]
 80180ac:	300c      	adds	r0, #12
 80180ae:	f7f6 fee1 	bl	800ee74 <rcl_subscription_is_valid>
 80180b2:	b1b8      	cbz	r0, 80180e4 <rcl_action_take_goal_response+0x64>
 80180b4:	6820      	ldr	r0, [r4, #0]
 80180b6:	3010      	adds	r0, #16
 80180b8:	f7f6 fedc 	bl	800ee74 <rcl_subscription_is_valid>
 80180bc:	b190      	cbz	r0, 80180e4 <rcl_action_take_goal_response+0x64>
 80180be:	b1cd      	cbz	r5, 80180f4 <rcl_action_take_goal_response+0x74>
 80180c0:	b1c6      	cbz	r6, 80180f4 <rcl_action_take_goal_response+0x74>
 80180c2:	6820      	ldr	r0, [r4, #0]
 80180c4:	4632      	mov	r2, r6
 80180c6:	4629      	mov	r1, r5
 80180c8:	f7fe fcca 	bl	8016a60 <rcl_take_response>
 80180cc:	b148      	cbz	r0, 80180e2 <rcl_action_take_goal_response+0x62>
 80180ce:	280a      	cmp	r0, #10
 80180d0:	d007      	beq.n	80180e2 <rcl_action_take_goal_response+0x62>
 80180d2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80180d6:	f640 0337 	movw	r3, #2103	@ 0x837
 80180da:	4290      	cmp	r0, r2
 80180dc:	bf0c      	ite	eq
 80180de:	4618      	moveq	r0, r3
 80180e0:	2001      	movne	r0, #1
 80180e2:	bd70      	pop	{r4, r5, r6, pc}
 80180e4:	f7f8 fa10 	bl	8010508 <rcutils_reset_error>
 80180e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80180ec:	bd70      	pop	{r4, r5, r6, pc}
 80180ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80180f2:	bd70      	pop	{r4, r5, r6, pc}
 80180f4:	200b      	movs	r0, #11
 80180f6:	bd70      	pop	{r4, r5, r6, pc}
 80180f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80180fc:	4770      	bx	lr
 80180fe:	bf00      	nop

08018100 <rcl_action_send_result_request>:
 8018100:	b390      	cbz	r0, 8018168 <rcl_action_send_result_request+0x68>
 8018102:	b570      	push	{r4, r5, r6, lr}
 8018104:	4604      	mov	r4, r0
 8018106:	6800      	ldr	r0, [r0, #0]
 8018108:	b348      	cbz	r0, 801815e <rcl_action_send_result_request+0x5e>
 801810a:	460d      	mov	r5, r1
 801810c:	4616      	mov	r6, r2
 801810e:	f7fe fcef 	bl	8016af0 <rcl_client_is_valid>
 8018112:	b1f8      	cbz	r0, 8018154 <rcl_action_send_result_request+0x54>
 8018114:	6820      	ldr	r0, [r4, #0]
 8018116:	3004      	adds	r0, #4
 8018118:	f7fe fcea 	bl	8016af0 <rcl_client_is_valid>
 801811c:	b1d0      	cbz	r0, 8018154 <rcl_action_send_result_request+0x54>
 801811e:	6820      	ldr	r0, [r4, #0]
 8018120:	3008      	adds	r0, #8
 8018122:	f7fe fce5 	bl	8016af0 <rcl_client_is_valid>
 8018126:	b1a8      	cbz	r0, 8018154 <rcl_action_send_result_request+0x54>
 8018128:	6820      	ldr	r0, [r4, #0]
 801812a:	300c      	adds	r0, #12
 801812c:	f7f6 fea2 	bl	800ee74 <rcl_subscription_is_valid>
 8018130:	b180      	cbz	r0, 8018154 <rcl_action_send_result_request+0x54>
 8018132:	6820      	ldr	r0, [r4, #0]
 8018134:	3010      	adds	r0, #16
 8018136:	f7f6 fe9d 	bl	800ee74 <rcl_subscription_is_valid>
 801813a:	b158      	cbz	r0, 8018154 <rcl_action_send_result_request+0x54>
 801813c:	b195      	cbz	r5, 8018164 <rcl_action_send_result_request+0x64>
 801813e:	b18e      	cbz	r6, 8018164 <rcl_action_send_result_request+0x64>
 8018140:	6820      	ldr	r0, [r4, #0]
 8018142:	4632      	mov	r2, r6
 8018144:	4629      	mov	r1, r5
 8018146:	3008      	adds	r0, #8
 8018148:	f7fe fc52 	bl	80169f0 <rcl_send_request>
 801814c:	3800      	subs	r0, #0
 801814e:	bf18      	it	ne
 8018150:	2001      	movne	r0, #1
 8018152:	bd70      	pop	{r4, r5, r6, pc}
 8018154:	f7f8 f9d8 	bl	8010508 <rcutils_reset_error>
 8018158:	f640 0036 	movw	r0, #2102	@ 0x836
 801815c:	bd70      	pop	{r4, r5, r6, pc}
 801815e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018162:	bd70      	pop	{r4, r5, r6, pc}
 8018164:	200b      	movs	r0, #11
 8018166:	bd70      	pop	{r4, r5, r6, pc}
 8018168:	f640 0036 	movw	r0, #2102	@ 0x836
 801816c:	4770      	bx	lr
 801816e:	bf00      	nop

08018170 <rcl_action_take_result_response>:
 8018170:	2800      	cmp	r0, #0
 8018172:	d03a      	beq.n	80181ea <rcl_action_take_result_response+0x7a>
 8018174:	b570      	push	{r4, r5, r6, lr}
 8018176:	4604      	mov	r4, r0
 8018178:	6800      	ldr	r0, [r0, #0]
 801817a:	b388      	cbz	r0, 80181e0 <rcl_action_take_result_response+0x70>
 801817c:	460d      	mov	r5, r1
 801817e:	4616      	mov	r6, r2
 8018180:	f7fe fcb6 	bl	8016af0 <rcl_client_is_valid>
 8018184:	b338      	cbz	r0, 80181d6 <rcl_action_take_result_response+0x66>
 8018186:	6820      	ldr	r0, [r4, #0]
 8018188:	3004      	adds	r0, #4
 801818a:	f7fe fcb1 	bl	8016af0 <rcl_client_is_valid>
 801818e:	b310      	cbz	r0, 80181d6 <rcl_action_take_result_response+0x66>
 8018190:	6820      	ldr	r0, [r4, #0]
 8018192:	3008      	adds	r0, #8
 8018194:	f7fe fcac 	bl	8016af0 <rcl_client_is_valid>
 8018198:	b1e8      	cbz	r0, 80181d6 <rcl_action_take_result_response+0x66>
 801819a:	6820      	ldr	r0, [r4, #0]
 801819c:	300c      	adds	r0, #12
 801819e:	f7f6 fe69 	bl	800ee74 <rcl_subscription_is_valid>
 80181a2:	b1c0      	cbz	r0, 80181d6 <rcl_action_take_result_response+0x66>
 80181a4:	6820      	ldr	r0, [r4, #0]
 80181a6:	3010      	adds	r0, #16
 80181a8:	f7f6 fe64 	bl	800ee74 <rcl_subscription_is_valid>
 80181ac:	b198      	cbz	r0, 80181d6 <rcl_action_take_result_response+0x66>
 80181ae:	b1d5      	cbz	r5, 80181e6 <rcl_action_take_result_response+0x76>
 80181b0:	b1ce      	cbz	r6, 80181e6 <rcl_action_take_result_response+0x76>
 80181b2:	6820      	ldr	r0, [r4, #0]
 80181b4:	4632      	mov	r2, r6
 80181b6:	4629      	mov	r1, r5
 80181b8:	3008      	adds	r0, #8
 80181ba:	f7fe fc51 	bl	8016a60 <rcl_take_response>
 80181be:	b148      	cbz	r0, 80181d4 <rcl_action_take_result_response+0x64>
 80181c0:	280a      	cmp	r0, #10
 80181c2:	d007      	beq.n	80181d4 <rcl_action_take_result_response+0x64>
 80181c4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80181c8:	f640 0337 	movw	r3, #2103	@ 0x837
 80181cc:	4290      	cmp	r0, r2
 80181ce:	bf0c      	ite	eq
 80181d0:	4618      	moveq	r0, r3
 80181d2:	2001      	movne	r0, #1
 80181d4:	bd70      	pop	{r4, r5, r6, pc}
 80181d6:	f7f8 f997 	bl	8010508 <rcutils_reset_error>
 80181da:	f640 0036 	movw	r0, #2102	@ 0x836
 80181de:	bd70      	pop	{r4, r5, r6, pc}
 80181e0:	f640 0036 	movw	r0, #2102	@ 0x836
 80181e4:	bd70      	pop	{r4, r5, r6, pc}
 80181e6:	200b      	movs	r0, #11
 80181e8:	bd70      	pop	{r4, r5, r6, pc}
 80181ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80181ee:	4770      	bx	lr

080181f0 <rcl_action_take_cancel_response>:
 80181f0:	2800      	cmp	r0, #0
 80181f2:	d03a      	beq.n	801826a <rcl_action_take_cancel_response+0x7a>
 80181f4:	b570      	push	{r4, r5, r6, lr}
 80181f6:	4604      	mov	r4, r0
 80181f8:	6800      	ldr	r0, [r0, #0]
 80181fa:	b388      	cbz	r0, 8018260 <rcl_action_take_cancel_response+0x70>
 80181fc:	460d      	mov	r5, r1
 80181fe:	4616      	mov	r6, r2
 8018200:	f7fe fc76 	bl	8016af0 <rcl_client_is_valid>
 8018204:	b338      	cbz	r0, 8018256 <rcl_action_take_cancel_response+0x66>
 8018206:	6820      	ldr	r0, [r4, #0]
 8018208:	3004      	adds	r0, #4
 801820a:	f7fe fc71 	bl	8016af0 <rcl_client_is_valid>
 801820e:	b310      	cbz	r0, 8018256 <rcl_action_take_cancel_response+0x66>
 8018210:	6820      	ldr	r0, [r4, #0]
 8018212:	3008      	adds	r0, #8
 8018214:	f7fe fc6c 	bl	8016af0 <rcl_client_is_valid>
 8018218:	b1e8      	cbz	r0, 8018256 <rcl_action_take_cancel_response+0x66>
 801821a:	6820      	ldr	r0, [r4, #0]
 801821c:	300c      	adds	r0, #12
 801821e:	f7f6 fe29 	bl	800ee74 <rcl_subscription_is_valid>
 8018222:	b1c0      	cbz	r0, 8018256 <rcl_action_take_cancel_response+0x66>
 8018224:	6820      	ldr	r0, [r4, #0]
 8018226:	3010      	adds	r0, #16
 8018228:	f7f6 fe24 	bl	800ee74 <rcl_subscription_is_valid>
 801822c:	b198      	cbz	r0, 8018256 <rcl_action_take_cancel_response+0x66>
 801822e:	b1d5      	cbz	r5, 8018266 <rcl_action_take_cancel_response+0x76>
 8018230:	b1ce      	cbz	r6, 8018266 <rcl_action_take_cancel_response+0x76>
 8018232:	6820      	ldr	r0, [r4, #0]
 8018234:	4632      	mov	r2, r6
 8018236:	4629      	mov	r1, r5
 8018238:	3004      	adds	r0, #4
 801823a:	f7fe fc11 	bl	8016a60 <rcl_take_response>
 801823e:	b148      	cbz	r0, 8018254 <rcl_action_take_cancel_response+0x64>
 8018240:	280a      	cmp	r0, #10
 8018242:	d007      	beq.n	8018254 <rcl_action_take_cancel_response+0x64>
 8018244:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8018248:	f640 0337 	movw	r3, #2103	@ 0x837
 801824c:	4290      	cmp	r0, r2
 801824e:	bf0c      	ite	eq
 8018250:	4618      	moveq	r0, r3
 8018252:	2001      	movne	r0, #1
 8018254:	bd70      	pop	{r4, r5, r6, pc}
 8018256:	f7f8 f957 	bl	8010508 <rcutils_reset_error>
 801825a:	f640 0036 	movw	r0, #2102	@ 0x836
 801825e:	bd70      	pop	{r4, r5, r6, pc}
 8018260:	f640 0036 	movw	r0, #2102	@ 0x836
 8018264:	bd70      	pop	{r4, r5, r6, pc}
 8018266:	200b      	movs	r0, #11
 8018268:	bd70      	pop	{r4, r5, r6, pc}
 801826a:	f640 0036 	movw	r0, #2102	@ 0x836
 801826e:	4770      	bx	lr

08018270 <rcl_action_take_feedback>:
 8018270:	2800      	cmp	r0, #0
 8018272:	d038      	beq.n	80182e6 <rcl_action_take_feedback+0x76>
 8018274:	b530      	push	{r4, r5, lr}
 8018276:	4604      	mov	r4, r0
 8018278:	6800      	ldr	r0, [r0, #0]
 801827a:	b091      	sub	sp, #68	@ 0x44
 801827c:	b378      	cbz	r0, 80182de <rcl_action_take_feedback+0x6e>
 801827e:	460d      	mov	r5, r1
 8018280:	f7fe fc36 	bl	8016af0 <rcl_client_is_valid>
 8018284:	b328      	cbz	r0, 80182d2 <rcl_action_take_feedback+0x62>
 8018286:	6820      	ldr	r0, [r4, #0]
 8018288:	3004      	adds	r0, #4
 801828a:	f7fe fc31 	bl	8016af0 <rcl_client_is_valid>
 801828e:	b300      	cbz	r0, 80182d2 <rcl_action_take_feedback+0x62>
 8018290:	6820      	ldr	r0, [r4, #0]
 8018292:	3008      	adds	r0, #8
 8018294:	f7fe fc2c 	bl	8016af0 <rcl_client_is_valid>
 8018298:	b1d8      	cbz	r0, 80182d2 <rcl_action_take_feedback+0x62>
 801829a:	6820      	ldr	r0, [r4, #0]
 801829c:	300c      	adds	r0, #12
 801829e:	f7f6 fde9 	bl	800ee74 <rcl_subscription_is_valid>
 80182a2:	b1b0      	cbz	r0, 80182d2 <rcl_action_take_feedback+0x62>
 80182a4:	6820      	ldr	r0, [r4, #0]
 80182a6:	3010      	adds	r0, #16
 80182a8:	f7f6 fde4 	bl	800ee74 <rcl_subscription_is_valid>
 80182ac:	b188      	cbz	r0, 80182d2 <rcl_action_take_feedback+0x62>
 80182ae:	b1ed      	cbz	r5, 80182ec <rcl_action_take_feedback+0x7c>
 80182b0:	6820      	ldr	r0, [r4, #0]
 80182b2:	2300      	movs	r3, #0
 80182b4:	466a      	mov	r2, sp
 80182b6:	4629      	mov	r1, r5
 80182b8:	300c      	adds	r0, #12
 80182ba:	f7f6 fd7d 	bl	800edb8 <rcl_take>
 80182be:	b160      	cbz	r0, 80182da <rcl_action_take_feedback+0x6a>
 80182c0:	f240 1391 	movw	r3, #401	@ 0x191
 80182c4:	4298      	cmp	r0, r3
 80182c6:	d014      	beq.n	80182f2 <rcl_action_take_feedback+0x82>
 80182c8:	280a      	cmp	r0, #10
 80182ca:	bf18      	it	ne
 80182cc:	2001      	movne	r0, #1
 80182ce:	b011      	add	sp, #68	@ 0x44
 80182d0:	bd30      	pop	{r4, r5, pc}
 80182d2:	f7f8 f919 	bl	8010508 <rcutils_reset_error>
 80182d6:	f640 0036 	movw	r0, #2102	@ 0x836
 80182da:	b011      	add	sp, #68	@ 0x44
 80182dc:	bd30      	pop	{r4, r5, pc}
 80182de:	f640 0036 	movw	r0, #2102	@ 0x836
 80182e2:	b011      	add	sp, #68	@ 0x44
 80182e4:	bd30      	pop	{r4, r5, pc}
 80182e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80182ea:	4770      	bx	lr
 80182ec:	200b      	movs	r0, #11
 80182ee:	b011      	add	sp, #68	@ 0x44
 80182f0:	bd30      	pop	{r4, r5, pc}
 80182f2:	f640 0037 	movw	r0, #2103	@ 0x837
 80182f6:	e7f0      	b.n	80182da <rcl_action_take_feedback+0x6a>

080182f8 <rcl_action_wait_set_add_action_client>:
 80182f8:	2800      	cmp	r0, #0
 80182fa:	d048      	beq.n	801838e <rcl_action_wait_set_add_action_client+0x96>
 80182fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182fe:	460c      	mov	r4, r1
 8018300:	2900      	cmp	r1, #0
 8018302:	d03c      	beq.n	801837e <rcl_action_wait_set_add_action_client+0x86>
 8018304:	4605      	mov	r5, r0
 8018306:	6808      	ldr	r0, [r1, #0]
 8018308:	2800      	cmp	r0, #0
 801830a:	d038      	beq.n	801837e <rcl_action_wait_set_add_action_client+0x86>
 801830c:	4617      	mov	r7, r2
 801830e:	461e      	mov	r6, r3
 8018310:	f7fe fbee 	bl	8016af0 <rcl_client_is_valid>
 8018314:	b3b0      	cbz	r0, 8018384 <rcl_action_wait_set_add_action_client+0x8c>
 8018316:	6820      	ldr	r0, [r4, #0]
 8018318:	3004      	adds	r0, #4
 801831a:	f7fe fbe9 	bl	8016af0 <rcl_client_is_valid>
 801831e:	b388      	cbz	r0, 8018384 <rcl_action_wait_set_add_action_client+0x8c>
 8018320:	6820      	ldr	r0, [r4, #0]
 8018322:	3008      	adds	r0, #8
 8018324:	f7fe fbe4 	bl	8016af0 <rcl_client_is_valid>
 8018328:	b360      	cbz	r0, 8018384 <rcl_action_wait_set_add_action_client+0x8c>
 801832a:	6820      	ldr	r0, [r4, #0]
 801832c:	300c      	adds	r0, #12
 801832e:	f7f6 fda1 	bl	800ee74 <rcl_subscription_is_valid>
 8018332:	b338      	cbz	r0, 8018384 <rcl_action_wait_set_add_action_client+0x8c>
 8018334:	6820      	ldr	r0, [r4, #0]
 8018336:	3010      	adds	r0, #16
 8018338:	f7f6 fd9c 	bl	800ee74 <rcl_subscription_is_valid>
 801833c:	b310      	cbz	r0, 8018384 <rcl_action_wait_set_add_action_client+0x8c>
 801833e:	6821      	ldr	r1, [r4, #0]
 8018340:	4628      	mov	r0, r5
 8018342:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8018346:	f7ff fccd 	bl	8017ce4 <rcl_wait_set_add_client>
 801834a:	b9b8      	cbnz	r0, 801837c <rcl_action_wait_set_add_action_client+0x84>
 801834c:	6821      	ldr	r1, [r4, #0]
 801834e:	4628      	mov	r0, r5
 8018350:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8018354:	3104      	adds	r1, #4
 8018356:	f7ff fcc5 	bl	8017ce4 <rcl_wait_set_add_client>
 801835a:	b978      	cbnz	r0, 801837c <rcl_action_wait_set_add_action_client+0x84>
 801835c:	6821      	ldr	r1, [r4, #0]
 801835e:	4628      	mov	r0, r5
 8018360:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8018364:	3108      	adds	r1, #8
 8018366:	f7ff fcbd 	bl	8017ce4 <rcl_wait_set_add_client>
 801836a:	b938      	cbnz	r0, 801837c <rcl_action_wait_set_add_action_client+0x84>
 801836c:	6821      	ldr	r1, [r4, #0]
 801836e:	4628      	mov	r0, r5
 8018370:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8018374:	310c      	adds	r1, #12
 8018376:	f7ff f96d 	bl	8017654 <rcl_wait_set_add_subscription>
 801837a:	b158      	cbz	r0, 8018394 <rcl_action_wait_set_add_action_client+0x9c>
 801837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801837e:	f640 0036 	movw	r0, #2102	@ 0x836
 8018382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018384:	f7f8 f8c0 	bl	8010508 <rcutils_reset_error>
 8018388:	f640 0036 	movw	r0, #2102	@ 0x836
 801838c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801838e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018392:	4770      	bx	lr
 8018394:	6821      	ldr	r1, [r4, #0]
 8018396:	4628      	mov	r0, r5
 8018398:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801839c:	3110      	adds	r1, #16
 801839e:	f7ff f959 	bl	8017654 <rcl_wait_set_add_subscription>
 80183a2:	2800      	cmp	r0, #0
 80183a4:	d1ea      	bne.n	801837c <rcl_action_wait_set_add_action_client+0x84>
 80183a6:	b11f      	cbz	r7, 80183b0 <rcl_action_wait_set_add_action_client+0xb8>
 80183a8:	6823      	ldr	r3, [r4, #0]
 80183aa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80183ae:	603b      	str	r3, [r7, #0]
 80183b0:	2e00      	cmp	r6, #0
 80183b2:	d0e3      	beq.n	801837c <rcl_action_wait_set_add_action_client+0x84>
 80183b4:	6823      	ldr	r3, [r4, #0]
 80183b6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80183ba:	6033      	str	r3, [r6, #0]
 80183bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183be:	bf00      	nop

080183c0 <rcl_action_client_wait_set_get_entities_ready>:
 80183c0:	2800      	cmp	r0, #0
 80183c2:	f000 808d 	beq.w	80184e0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80183c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183ca:	460c      	mov	r4, r1
 80183cc:	2900      	cmp	r1, #0
 80183ce:	d077      	beq.n	80184c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80183d0:	4605      	mov	r5, r0
 80183d2:	6808      	ldr	r0, [r1, #0]
 80183d4:	2800      	cmp	r0, #0
 80183d6:	d073      	beq.n	80184c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80183d8:	4616      	mov	r6, r2
 80183da:	461f      	mov	r7, r3
 80183dc:	f7fe fb88 	bl	8016af0 <rcl_client_is_valid>
 80183e0:	2800      	cmp	r0, #0
 80183e2:	d071      	beq.n	80184c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80183e4:	6820      	ldr	r0, [r4, #0]
 80183e6:	3004      	adds	r0, #4
 80183e8:	f7fe fb82 	bl	8016af0 <rcl_client_is_valid>
 80183ec:	2800      	cmp	r0, #0
 80183ee:	d06b      	beq.n	80184c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80183f0:	6820      	ldr	r0, [r4, #0]
 80183f2:	3008      	adds	r0, #8
 80183f4:	f7fe fb7c 	bl	8016af0 <rcl_client_is_valid>
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d065      	beq.n	80184c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80183fc:	6820      	ldr	r0, [r4, #0]
 80183fe:	300c      	adds	r0, #12
 8018400:	f7f6 fd38 	bl	800ee74 <rcl_subscription_is_valid>
 8018404:	2800      	cmp	r0, #0
 8018406:	d05f      	beq.n	80184c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018408:	6820      	ldr	r0, [r4, #0]
 801840a:	3010      	adds	r0, #16
 801840c:	f7f6 fd32 	bl	800ee74 <rcl_subscription_is_valid>
 8018410:	2800      	cmp	r0, #0
 8018412:	d059      	beq.n	80184c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8018414:	2e00      	cmp	r6, #0
 8018416:	d060      	beq.n	80184da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018418:	2f00      	cmp	r7, #0
 801841a:	d05e      	beq.n	80184da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801841c:	9b06      	ldr	r3, [sp, #24]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d05b      	beq.n	80184da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018422:	9b07      	ldr	r3, [sp, #28]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d058      	beq.n	80184da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8018428:	9b08      	ldr	r3, [sp, #32]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d055      	beq.n	80184da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801842e:	6823      	ldr	r3, [r4, #0]
 8018430:	686a      	ldr	r2, [r5, #4]
 8018432:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8018436:	428a      	cmp	r2, r1
 8018438:	d94c      	bls.n	80184d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801843a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801843e:	4282      	cmp	r2, r0
 8018440:	d948      	bls.n	80184d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018442:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8018446:	69ea      	ldr	r2, [r5, #28]
 8018448:	42a2      	cmp	r2, r4
 801844a:	d943      	bls.n	80184d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801844c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8018450:	4562      	cmp	r2, ip
 8018452:	d93f      	bls.n	80184d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8018454:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8018458:	4572      	cmp	r2, lr
 801845a:	d93b      	bls.n	80184d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801845c:	69aa      	ldr	r2, [r5, #24]
 801845e:	682d      	ldr	r5, [r5, #0]
 8018460:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8018464:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8018468:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801846c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8018470:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8018474:	f103 0c0c 	add.w	ip, r3, #12
 8018478:	eba5 050c 	sub.w	r5, r5, ip
 801847c:	fab5 f585 	clz	r5, r5
 8018480:	096d      	lsrs	r5, r5, #5
 8018482:	7035      	strb	r5, [r6, #0]
 8018484:	f103 0510 	add.w	r5, r3, #16
 8018488:	1b64      	subs	r4, r4, r5
 801848a:	fab4 f484 	clz	r4, r4
 801848e:	0964      	lsrs	r4, r4, #5
 8018490:	703c      	strb	r4, [r7, #0]
 8018492:	eba3 0008 	sub.w	r0, r3, r8
 8018496:	1d1c      	adds	r4, r3, #4
 8018498:	3308      	adds	r3, #8
 801849a:	1ad3      	subs	r3, r2, r3
 801849c:	fab0 f080 	clz	r0, r0
 80184a0:	9a06      	ldr	r2, [sp, #24]
 80184a2:	0940      	lsrs	r0, r0, #5
 80184a4:	1b09      	subs	r1, r1, r4
 80184a6:	7010      	strb	r0, [r2, #0]
 80184a8:	fab1 f181 	clz	r1, r1
 80184ac:	9a07      	ldr	r2, [sp, #28]
 80184ae:	0949      	lsrs	r1, r1, #5
 80184b0:	7011      	strb	r1, [r2, #0]
 80184b2:	fab3 f383 	clz	r3, r3
 80184b6:	9a08      	ldr	r2, [sp, #32]
 80184b8:	095b      	lsrs	r3, r3, #5
 80184ba:	2000      	movs	r0, #0
 80184bc:	7013      	strb	r3, [r2, #0]
 80184be:	e001      	b.n	80184c4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80184c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80184c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184c8:	f7f8 f81e 	bl	8010508 <rcutils_reset_error>
 80184cc:	f640 0036 	movw	r0, #2102	@ 0x836
 80184d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184d4:	2001      	movs	r0, #1
 80184d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184da:	200b      	movs	r0, #11
 80184dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80184e4:	4770      	bx	lr
 80184e6:	bf00      	nop

080184e8 <rcl_action_take_goal_request>:
 80184e8:	2800      	cmp	r0, #0
 80184ea:	d039      	beq.n	8018560 <rcl_action_take_goal_request+0x78>
 80184ec:	b570      	push	{r4, r5, r6, lr}
 80184ee:	4604      	mov	r4, r0
 80184f0:	6800      	ldr	r0, [r0, #0]
 80184f2:	b380      	cbz	r0, 8018556 <rcl_action_take_goal_request+0x6e>
 80184f4:	460d      	mov	r5, r1
 80184f6:	4616      	mov	r6, r2
 80184f8:	f7fe fe5a 	bl	80171b0 <rcl_service_is_valid>
 80184fc:	b330      	cbz	r0, 801854c <rcl_action_take_goal_request+0x64>
 80184fe:	6820      	ldr	r0, [r4, #0]
 8018500:	3004      	adds	r0, #4
 8018502:	f7fe fe55 	bl	80171b0 <rcl_service_is_valid>
 8018506:	b308      	cbz	r0, 801854c <rcl_action_take_goal_request+0x64>
 8018508:	6820      	ldr	r0, [r4, #0]
 801850a:	3008      	adds	r0, #8
 801850c:	f7fe fe50 	bl	80171b0 <rcl_service_is_valid>
 8018510:	b1e0      	cbz	r0, 801854c <rcl_action_take_goal_request+0x64>
 8018512:	6820      	ldr	r0, [r4, #0]
 8018514:	300c      	adds	r0, #12
 8018516:	f7f6 fafd 	bl	800eb14 <rcl_publisher_is_valid>
 801851a:	b1b8      	cbz	r0, 801854c <rcl_action_take_goal_request+0x64>
 801851c:	6820      	ldr	r0, [r4, #0]
 801851e:	3010      	adds	r0, #16
 8018520:	f7f6 faf8 	bl	800eb14 <rcl_publisher_is_valid>
 8018524:	b190      	cbz	r0, 801854c <rcl_action_take_goal_request+0x64>
 8018526:	b1cd      	cbz	r5, 801855c <rcl_action_take_goal_request+0x74>
 8018528:	b1c6      	cbz	r6, 801855c <rcl_action_take_goal_request+0x74>
 801852a:	6820      	ldr	r0, [r4, #0]
 801852c:	4632      	mov	r2, r6
 801852e:	4629      	mov	r1, r5
 8018530:	f7fe fde6 	bl	8017100 <rcl_take_request>
 8018534:	b148      	cbz	r0, 801854a <rcl_action_take_goal_request+0x62>
 8018536:	280a      	cmp	r0, #10
 8018538:	d007      	beq.n	801854a <rcl_action_take_goal_request+0x62>
 801853a:	f240 2259 	movw	r2, #601	@ 0x259
 801853e:	f640 0399 	movw	r3, #2201	@ 0x899
 8018542:	4290      	cmp	r0, r2
 8018544:	bf0c      	ite	eq
 8018546:	4618      	moveq	r0, r3
 8018548:	2001      	movne	r0, #1
 801854a:	bd70      	pop	{r4, r5, r6, pc}
 801854c:	f7f7 ffdc 	bl	8010508 <rcutils_reset_error>
 8018550:	f640 0098 	movw	r0, #2200	@ 0x898
 8018554:	bd70      	pop	{r4, r5, r6, pc}
 8018556:	f640 0098 	movw	r0, #2200	@ 0x898
 801855a:	bd70      	pop	{r4, r5, r6, pc}
 801855c:	200b      	movs	r0, #11
 801855e:	bd70      	pop	{r4, r5, r6, pc}
 8018560:	f640 0098 	movw	r0, #2200	@ 0x898
 8018564:	4770      	bx	lr
 8018566:	bf00      	nop

08018568 <rcl_action_send_goal_response>:
 8018568:	b390      	cbz	r0, 80185d0 <rcl_action_send_goal_response+0x68>
 801856a:	b570      	push	{r4, r5, r6, lr}
 801856c:	4604      	mov	r4, r0
 801856e:	6800      	ldr	r0, [r0, #0]
 8018570:	b348      	cbz	r0, 80185c6 <rcl_action_send_goal_response+0x5e>
 8018572:	460d      	mov	r5, r1
 8018574:	4616      	mov	r6, r2
 8018576:	f7fe fe1b 	bl	80171b0 <rcl_service_is_valid>
 801857a:	b1f8      	cbz	r0, 80185bc <rcl_action_send_goal_response+0x54>
 801857c:	6820      	ldr	r0, [r4, #0]
 801857e:	3004      	adds	r0, #4
 8018580:	f7fe fe16 	bl	80171b0 <rcl_service_is_valid>
 8018584:	b1d0      	cbz	r0, 80185bc <rcl_action_send_goal_response+0x54>
 8018586:	6820      	ldr	r0, [r4, #0]
 8018588:	3008      	adds	r0, #8
 801858a:	f7fe fe11 	bl	80171b0 <rcl_service_is_valid>
 801858e:	b1a8      	cbz	r0, 80185bc <rcl_action_send_goal_response+0x54>
 8018590:	6820      	ldr	r0, [r4, #0]
 8018592:	300c      	adds	r0, #12
 8018594:	f7f6 fabe 	bl	800eb14 <rcl_publisher_is_valid>
 8018598:	b180      	cbz	r0, 80185bc <rcl_action_send_goal_response+0x54>
 801859a:	6820      	ldr	r0, [r4, #0]
 801859c:	3010      	adds	r0, #16
 801859e:	f7f6 fab9 	bl	800eb14 <rcl_publisher_is_valid>
 80185a2:	b158      	cbz	r0, 80185bc <rcl_action_send_goal_response+0x54>
 80185a4:	b195      	cbz	r5, 80185cc <rcl_action_send_goal_response+0x64>
 80185a6:	b18e      	cbz	r6, 80185cc <rcl_action_send_goal_response+0x64>
 80185a8:	6820      	ldr	r0, [r4, #0]
 80185aa:	4632      	mov	r2, r6
 80185ac:	4629      	mov	r1, r5
 80185ae:	f7fe fde7 	bl	8017180 <rcl_send_response>
 80185b2:	b110      	cbz	r0, 80185ba <rcl_action_send_goal_response+0x52>
 80185b4:	2802      	cmp	r0, #2
 80185b6:	bf18      	it	ne
 80185b8:	2001      	movne	r0, #1
 80185ba:	bd70      	pop	{r4, r5, r6, pc}
 80185bc:	f7f7 ffa4 	bl	8010508 <rcutils_reset_error>
 80185c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80185c4:	bd70      	pop	{r4, r5, r6, pc}
 80185c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80185ca:	bd70      	pop	{r4, r5, r6, pc}
 80185cc:	200b      	movs	r0, #11
 80185ce:	bd70      	pop	{r4, r5, r6, pc}
 80185d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80185d4:	4770      	bx	lr
 80185d6:	bf00      	nop

080185d8 <rcl_action_take_result_request>:
 80185d8:	2800      	cmp	r0, #0
 80185da:	d03a      	beq.n	8018652 <rcl_action_take_result_request+0x7a>
 80185dc:	b570      	push	{r4, r5, r6, lr}
 80185de:	4604      	mov	r4, r0
 80185e0:	6800      	ldr	r0, [r0, #0]
 80185e2:	b388      	cbz	r0, 8018648 <rcl_action_take_result_request+0x70>
 80185e4:	460d      	mov	r5, r1
 80185e6:	4616      	mov	r6, r2
 80185e8:	f7fe fde2 	bl	80171b0 <rcl_service_is_valid>
 80185ec:	b338      	cbz	r0, 801863e <rcl_action_take_result_request+0x66>
 80185ee:	6820      	ldr	r0, [r4, #0]
 80185f0:	3004      	adds	r0, #4
 80185f2:	f7fe fddd 	bl	80171b0 <rcl_service_is_valid>
 80185f6:	b310      	cbz	r0, 801863e <rcl_action_take_result_request+0x66>
 80185f8:	6820      	ldr	r0, [r4, #0]
 80185fa:	3008      	adds	r0, #8
 80185fc:	f7fe fdd8 	bl	80171b0 <rcl_service_is_valid>
 8018600:	b1e8      	cbz	r0, 801863e <rcl_action_take_result_request+0x66>
 8018602:	6820      	ldr	r0, [r4, #0]
 8018604:	300c      	adds	r0, #12
 8018606:	f7f6 fa85 	bl	800eb14 <rcl_publisher_is_valid>
 801860a:	b1c0      	cbz	r0, 801863e <rcl_action_take_result_request+0x66>
 801860c:	6820      	ldr	r0, [r4, #0]
 801860e:	3010      	adds	r0, #16
 8018610:	f7f6 fa80 	bl	800eb14 <rcl_publisher_is_valid>
 8018614:	b198      	cbz	r0, 801863e <rcl_action_take_result_request+0x66>
 8018616:	b1d5      	cbz	r5, 801864e <rcl_action_take_result_request+0x76>
 8018618:	b1ce      	cbz	r6, 801864e <rcl_action_take_result_request+0x76>
 801861a:	6820      	ldr	r0, [r4, #0]
 801861c:	4632      	mov	r2, r6
 801861e:	4629      	mov	r1, r5
 8018620:	3008      	adds	r0, #8
 8018622:	f7fe fd6d 	bl	8017100 <rcl_take_request>
 8018626:	b148      	cbz	r0, 801863c <rcl_action_take_result_request+0x64>
 8018628:	280a      	cmp	r0, #10
 801862a:	d007      	beq.n	801863c <rcl_action_take_result_request+0x64>
 801862c:	f240 2259 	movw	r2, #601	@ 0x259
 8018630:	f640 0399 	movw	r3, #2201	@ 0x899
 8018634:	4290      	cmp	r0, r2
 8018636:	bf0c      	ite	eq
 8018638:	4618      	moveq	r0, r3
 801863a:	2001      	movne	r0, #1
 801863c:	bd70      	pop	{r4, r5, r6, pc}
 801863e:	f7f7 ff63 	bl	8010508 <rcutils_reset_error>
 8018642:	f640 0098 	movw	r0, #2200	@ 0x898
 8018646:	bd70      	pop	{r4, r5, r6, pc}
 8018648:	f640 0098 	movw	r0, #2200	@ 0x898
 801864c:	bd70      	pop	{r4, r5, r6, pc}
 801864e:	200b      	movs	r0, #11
 8018650:	bd70      	pop	{r4, r5, r6, pc}
 8018652:	f640 0098 	movw	r0, #2200	@ 0x898
 8018656:	4770      	bx	lr

08018658 <rcl_action_take_cancel_request>:
 8018658:	2800      	cmp	r0, #0
 801865a:	d03a      	beq.n	80186d2 <rcl_action_take_cancel_request+0x7a>
 801865c:	b570      	push	{r4, r5, r6, lr}
 801865e:	4604      	mov	r4, r0
 8018660:	6800      	ldr	r0, [r0, #0]
 8018662:	b388      	cbz	r0, 80186c8 <rcl_action_take_cancel_request+0x70>
 8018664:	460d      	mov	r5, r1
 8018666:	4616      	mov	r6, r2
 8018668:	f7fe fda2 	bl	80171b0 <rcl_service_is_valid>
 801866c:	b338      	cbz	r0, 80186be <rcl_action_take_cancel_request+0x66>
 801866e:	6820      	ldr	r0, [r4, #0]
 8018670:	3004      	adds	r0, #4
 8018672:	f7fe fd9d 	bl	80171b0 <rcl_service_is_valid>
 8018676:	b310      	cbz	r0, 80186be <rcl_action_take_cancel_request+0x66>
 8018678:	6820      	ldr	r0, [r4, #0]
 801867a:	3008      	adds	r0, #8
 801867c:	f7fe fd98 	bl	80171b0 <rcl_service_is_valid>
 8018680:	b1e8      	cbz	r0, 80186be <rcl_action_take_cancel_request+0x66>
 8018682:	6820      	ldr	r0, [r4, #0]
 8018684:	300c      	adds	r0, #12
 8018686:	f7f6 fa45 	bl	800eb14 <rcl_publisher_is_valid>
 801868a:	b1c0      	cbz	r0, 80186be <rcl_action_take_cancel_request+0x66>
 801868c:	6820      	ldr	r0, [r4, #0]
 801868e:	3010      	adds	r0, #16
 8018690:	f7f6 fa40 	bl	800eb14 <rcl_publisher_is_valid>
 8018694:	b198      	cbz	r0, 80186be <rcl_action_take_cancel_request+0x66>
 8018696:	b1d5      	cbz	r5, 80186ce <rcl_action_take_cancel_request+0x76>
 8018698:	b1ce      	cbz	r6, 80186ce <rcl_action_take_cancel_request+0x76>
 801869a:	6820      	ldr	r0, [r4, #0]
 801869c:	4632      	mov	r2, r6
 801869e:	4629      	mov	r1, r5
 80186a0:	3004      	adds	r0, #4
 80186a2:	f7fe fd2d 	bl	8017100 <rcl_take_request>
 80186a6:	b148      	cbz	r0, 80186bc <rcl_action_take_cancel_request+0x64>
 80186a8:	280a      	cmp	r0, #10
 80186aa:	d007      	beq.n	80186bc <rcl_action_take_cancel_request+0x64>
 80186ac:	f240 2259 	movw	r2, #601	@ 0x259
 80186b0:	f640 0399 	movw	r3, #2201	@ 0x899
 80186b4:	4290      	cmp	r0, r2
 80186b6:	bf0c      	ite	eq
 80186b8:	4618      	moveq	r0, r3
 80186ba:	2001      	movne	r0, #1
 80186bc:	bd70      	pop	{r4, r5, r6, pc}
 80186be:	f7f7 ff23 	bl	8010508 <rcutils_reset_error>
 80186c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80186c6:	bd70      	pop	{r4, r5, r6, pc}
 80186c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80186cc:	bd70      	pop	{r4, r5, r6, pc}
 80186ce:	200b      	movs	r0, #11
 80186d0:	bd70      	pop	{r4, r5, r6, pc}
 80186d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80186d6:	4770      	bx	lr

080186d8 <rcl_action_send_cancel_response>:
 80186d8:	b398      	cbz	r0, 8018742 <rcl_action_send_cancel_response+0x6a>
 80186da:	b570      	push	{r4, r5, r6, lr}
 80186dc:	4604      	mov	r4, r0
 80186de:	6800      	ldr	r0, [r0, #0]
 80186e0:	b350      	cbz	r0, 8018738 <rcl_action_send_cancel_response+0x60>
 80186e2:	460d      	mov	r5, r1
 80186e4:	4616      	mov	r6, r2
 80186e6:	f7fe fd63 	bl	80171b0 <rcl_service_is_valid>
 80186ea:	b300      	cbz	r0, 801872e <rcl_action_send_cancel_response+0x56>
 80186ec:	6820      	ldr	r0, [r4, #0]
 80186ee:	3004      	adds	r0, #4
 80186f0:	f7fe fd5e 	bl	80171b0 <rcl_service_is_valid>
 80186f4:	b1d8      	cbz	r0, 801872e <rcl_action_send_cancel_response+0x56>
 80186f6:	6820      	ldr	r0, [r4, #0]
 80186f8:	3008      	adds	r0, #8
 80186fa:	f7fe fd59 	bl	80171b0 <rcl_service_is_valid>
 80186fe:	b1b0      	cbz	r0, 801872e <rcl_action_send_cancel_response+0x56>
 8018700:	6820      	ldr	r0, [r4, #0]
 8018702:	300c      	adds	r0, #12
 8018704:	f7f6 fa06 	bl	800eb14 <rcl_publisher_is_valid>
 8018708:	b188      	cbz	r0, 801872e <rcl_action_send_cancel_response+0x56>
 801870a:	6820      	ldr	r0, [r4, #0]
 801870c:	3010      	adds	r0, #16
 801870e:	f7f6 fa01 	bl	800eb14 <rcl_publisher_is_valid>
 8018712:	b160      	cbz	r0, 801872e <rcl_action_send_cancel_response+0x56>
 8018714:	b19d      	cbz	r5, 801873e <rcl_action_send_cancel_response+0x66>
 8018716:	b196      	cbz	r6, 801873e <rcl_action_send_cancel_response+0x66>
 8018718:	6820      	ldr	r0, [r4, #0]
 801871a:	4632      	mov	r2, r6
 801871c:	4629      	mov	r1, r5
 801871e:	3004      	adds	r0, #4
 8018720:	f7fe fd2e 	bl	8017180 <rcl_send_response>
 8018724:	b110      	cbz	r0, 801872c <rcl_action_send_cancel_response+0x54>
 8018726:	2802      	cmp	r0, #2
 8018728:	bf18      	it	ne
 801872a:	2001      	movne	r0, #1
 801872c:	bd70      	pop	{r4, r5, r6, pc}
 801872e:	f7f7 feeb 	bl	8010508 <rcutils_reset_error>
 8018732:	f640 0098 	movw	r0, #2200	@ 0x898
 8018736:	bd70      	pop	{r4, r5, r6, pc}
 8018738:	f640 0098 	movw	r0, #2200	@ 0x898
 801873c:	bd70      	pop	{r4, r5, r6, pc}
 801873e:	200b      	movs	r0, #11
 8018740:	bd70      	pop	{r4, r5, r6, pc}
 8018742:	f640 0098 	movw	r0, #2200	@ 0x898
 8018746:	4770      	bx	lr

08018748 <rcl_action_wait_set_add_action_server>:
 8018748:	2800      	cmp	r0, #0
 801874a:	d04d      	beq.n	80187e8 <rcl_action_wait_set_add_action_server+0xa0>
 801874c:	b570      	push	{r4, r5, r6, lr}
 801874e:	460c      	mov	r4, r1
 8018750:	b159      	cbz	r1, 801876a <rcl_action_wait_set_add_action_server+0x22>
 8018752:	4605      	mov	r5, r0
 8018754:	6808      	ldr	r0, [r1, #0]
 8018756:	b140      	cbz	r0, 801876a <rcl_action_wait_set_add_action_server+0x22>
 8018758:	4616      	mov	r6, r2
 801875a:	f7fe fd29 	bl	80171b0 <rcl_service_is_valid>
 801875e:	b120      	cbz	r0, 801876a <rcl_action_wait_set_add_action_server+0x22>
 8018760:	6820      	ldr	r0, [r4, #0]
 8018762:	3004      	adds	r0, #4
 8018764:	f7fe fd24 	bl	80171b0 <rcl_service_is_valid>
 8018768:	b910      	cbnz	r0, 8018770 <rcl_action_wait_set_add_action_server+0x28>
 801876a:	f640 0098 	movw	r0, #2200	@ 0x898
 801876e:	bd70      	pop	{r4, r5, r6, pc}
 8018770:	6820      	ldr	r0, [r4, #0]
 8018772:	3008      	adds	r0, #8
 8018774:	f7fe fd1c 	bl	80171b0 <rcl_service_is_valid>
 8018778:	2800      	cmp	r0, #0
 801877a:	d0f6      	beq.n	801876a <rcl_action_wait_set_add_action_server+0x22>
 801877c:	6820      	ldr	r0, [r4, #0]
 801877e:	300c      	adds	r0, #12
 8018780:	f7f6 f9e0 	bl	800eb44 <rcl_publisher_is_valid_except_context>
 8018784:	2800      	cmp	r0, #0
 8018786:	d0f0      	beq.n	801876a <rcl_action_wait_set_add_action_server+0x22>
 8018788:	6820      	ldr	r0, [r4, #0]
 801878a:	3010      	adds	r0, #16
 801878c:	f7f6 f9da 	bl	800eb44 <rcl_publisher_is_valid_except_context>
 8018790:	2800      	cmp	r0, #0
 8018792:	d0ea      	beq.n	801876a <rcl_action_wait_set_add_action_server+0x22>
 8018794:	6821      	ldr	r1, [r4, #0]
 8018796:	4628      	mov	r0, r5
 8018798:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801879c:	f7ff face 	bl	8017d3c <rcl_wait_set_add_service>
 80187a0:	2800      	cmp	r0, #0
 80187a2:	d1e4      	bne.n	801876e <rcl_action_wait_set_add_action_server+0x26>
 80187a4:	6821      	ldr	r1, [r4, #0]
 80187a6:	4628      	mov	r0, r5
 80187a8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80187ac:	3104      	adds	r1, #4
 80187ae:	f7ff fac5 	bl	8017d3c <rcl_wait_set_add_service>
 80187b2:	2800      	cmp	r0, #0
 80187b4:	d1db      	bne.n	801876e <rcl_action_wait_set_add_action_server+0x26>
 80187b6:	6821      	ldr	r1, [r4, #0]
 80187b8:	4628      	mov	r0, r5
 80187ba:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80187be:	3108      	adds	r1, #8
 80187c0:	f7ff fabc 	bl	8017d3c <rcl_wait_set_add_service>
 80187c4:	2800      	cmp	r0, #0
 80187c6:	d1d2      	bne.n	801876e <rcl_action_wait_set_add_action_server+0x26>
 80187c8:	6821      	ldr	r1, [r4, #0]
 80187ca:	4628      	mov	r0, r5
 80187cc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80187d0:	3114      	adds	r1, #20
 80187d2:	f7ff fa57 	bl	8017c84 <rcl_wait_set_add_timer>
 80187d6:	2800      	cmp	r0, #0
 80187d8:	d1c9      	bne.n	801876e <rcl_action_wait_set_add_action_server+0x26>
 80187da:	2e00      	cmp	r6, #0
 80187dc:	d0c7      	beq.n	801876e <rcl_action_wait_set_add_action_server+0x26>
 80187de:	6823      	ldr	r3, [r4, #0]
 80187e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80187e4:	6033      	str	r3, [r6, #0]
 80187e6:	bd70      	pop	{r4, r5, r6, pc}
 80187e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80187ec:	4770      	bx	lr
 80187ee:	bf00      	nop

080187f0 <rcl_action_server_wait_set_get_entities_ready>:
 80187f0:	2800      	cmp	r0, #0
 80187f2:	d05a      	beq.n	80188aa <rcl_action_server_wait_set_get_entities_ready+0xba>
 80187f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187f6:	460c      	mov	r4, r1
 80187f8:	b161      	cbz	r1, 8018814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80187fa:	4605      	mov	r5, r0
 80187fc:	6808      	ldr	r0, [r1, #0]
 80187fe:	b148      	cbz	r0, 8018814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018800:	4616      	mov	r6, r2
 8018802:	461f      	mov	r7, r3
 8018804:	f7fe fcd4 	bl	80171b0 <rcl_service_is_valid>
 8018808:	b120      	cbz	r0, 8018814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801880a:	6820      	ldr	r0, [r4, #0]
 801880c:	3004      	adds	r0, #4
 801880e:	f7fe fccf 	bl	80171b0 <rcl_service_is_valid>
 8018812:	b910      	cbnz	r0, 801881a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8018814:	f640 0098 	movw	r0, #2200	@ 0x898
 8018818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801881a:	6820      	ldr	r0, [r4, #0]
 801881c:	3008      	adds	r0, #8
 801881e:	f7fe fcc7 	bl	80171b0 <rcl_service_is_valid>
 8018822:	2800      	cmp	r0, #0
 8018824:	d0f6      	beq.n	8018814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018826:	6820      	ldr	r0, [r4, #0]
 8018828:	300c      	adds	r0, #12
 801882a:	f7f6 f98b 	bl	800eb44 <rcl_publisher_is_valid_except_context>
 801882e:	2800      	cmp	r0, #0
 8018830:	d0f0      	beq.n	8018814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8018832:	6820      	ldr	r0, [r4, #0]
 8018834:	3010      	adds	r0, #16
 8018836:	f7f6 f985 	bl	800eb44 <rcl_publisher_is_valid_except_context>
 801883a:	2800      	cmp	r0, #0
 801883c:	d0ea      	beq.n	8018814 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801883e:	b3be      	cbz	r6, 80188b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018840:	b3b7      	cbz	r7, 80188b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018842:	9b06      	ldr	r3, [sp, #24]
 8018844:	b3a3      	cbz	r3, 80188b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8018846:	9b07      	ldr	r3, [sp, #28]
 8018848:	b393      	cbz	r3, 80188b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801884a:	6821      	ldr	r1, [r4, #0]
 801884c:	692a      	ldr	r2, [r5, #16]
 801884e:	6a2c      	ldr	r4, [r5, #32]
 8018850:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8018854:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8018858:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801885c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8018860:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8018864:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8018868:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801886c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8018870:	1a64      	subs	r4, r4, r1
 8018872:	fab4 f484 	clz	r4, r4
 8018876:	0964      	lsrs	r4, r4, #5
 8018878:	7034      	strb	r4, [r6, #0]
 801887a:	1d0c      	adds	r4, r1, #4
 801887c:	1b1b      	subs	r3, r3, r4
 801887e:	fab3 f383 	clz	r3, r3
 8018882:	095b      	lsrs	r3, r3, #5
 8018884:	f101 0408 	add.w	r4, r1, #8
 8018888:	703b      	strb	r3, [r7, #0]
 801888a:	f101 0314 	add.w	r3, r1, #20
 801888e:	1b01      	subs	r1, r0, r4
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	fab1 f181 	clz	r1, r1
 8018896:	9a06      	ldr	r2, [sp, #24]
 8018898:	0949      	lsrs	r1, r1, #5
 801889a:	7011      	strb	r1, [r2, #0]
 801889c:	fab3 f383 	clz	r3, r3
 80188a0:	9a07      	ldr	r2, [sp, #28]
 80188a2:	095b      	lsrs	r3, r3, #5
 80188a4:	2000      	movs	r0, #0
 80188a6:	7013      	strb	r3, [r2, #0]
 80188a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80188ae:	4770      	bx	lr
 80188b0:	200b      	movs	r0, #11
 80188b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080188b4 <_execute_event_handler>:
 80188b4:	2002      	movs	r0, #2
 80188b6:	4770      	bx	lr

080188b8 <_cancel_goal_event_handler>:
 80188b8:	2003      	movs	r0, #3
 80188ba:	4770      	bx	lr

080188bc <_succeed_event_handler>:
 80188bc:	2004      	movs	r0, #4
 80188be:	4770      	bx	lr

080188c0 <_abort_event_handler>:
 80188c0:	2006      	movs	r0, #6
 80188c2:	4770      	bx	lr

080188c4 <_canceled_event_handler>:
 80188c4:	2005      	movs	r0, #5
 80188c6:	4770      	bx	lr

080188c8 <rcl_action_transition_goal_state>:
 80188c8:	b2c2      	uxtb	r2, r0
 80188ca:	2a06      	cmp	r2, #6
 80188cc:	d80c      	bhi.n	80188e8 <rcl_action_transition_goal_state+0x20>
 80188ce:	2904      	cmp	r1, #4
 80188d0:	d80a      	bhi.n	80188e8 <rcl_action_transition_goal_state+0x20>
 80188d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80188d6:	b410      	push	{r4}
 80188d8:	1853      	adds	r3, r2, r1
 80188da:	4c06      	ldr	r4, [pc, #24]	@ (80188f4 <rcl_action_transition_goal_state+0x2c>)
 80188dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80188e0:	b123      	cbz	r3, 80188ec <rcl_action_transition_goal_state+0x24>
 80188e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188e6:	4718      	bx	r3
 80188e8:	2000      	movs	r0, #0
 80188ea:	4770      	bx	lr
 80188ec:	2000      	movs	r0, #0
 80188ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188f2:	4770      	bx	lr
 80188f4:	0801e2c8 	.word	0x0801e2c8

080188f8 <rcl_action_get_zero_initialized_cancel_response>:
 80188f8:	b510      	push	{r4, lr}
 80188fa:	4c07      	ldr	r4, [pc, #28]	@ (8018918 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80188fc:	4686      	mov	lr, r0
 80188fe:	4684      	mov	ip, r0
 8018900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801890c:	6823      	ldr	r3, [r4, #0]
 801890e:	f8cc 3000 	str.w	r3, [ip]
 8018912:	4670      	mov	r0, lr
 8018914:	bd10      	pop	{r4, pc}
 8018916:	bf00      	nop
 8018918:	0801e354 	.word	0x0801e354

0801891c <rclc_action_send_result_request>:
 801891c:	b1d0      	cbz	r0, 8018954 <rclc_action_send_result_request+0x38>
 801891e:	b500      	push	{lr}
 8018920:	4684      	mov	ip, r0
 8018922:	b087      	sub	sp, #28
 8018924:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018928:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801892c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018930:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018934:	f10d 0e08 	add.w	lr, sp, #8
 8018938:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801893c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018940:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8018944:	a902      	add	r1, sp, #8
 8018946:	3010      	adds	r0, #16
 8018948:	f7ff fbda 	bl	8018100 <rcl_action_send_result_request>
 801894c:	b920      	cbnz	r0, 8018958 <rclc_action_send_result_request+0x3c>
 801894e:	b007      	add	sp, #28
 8018950:	f85d fb04 	ldr.w	pc, [sp], #4
 8018954:	200b      	movs	r0, #11
 8018956:	4770      	bx	lr
 8018958:	9001      	str	r0, [sp, #4]
 801895a:	f7f7 fdd5 	bl	8010508 <rcutils_reset_error>
 801895e:	9801      	ldr	r0, [sp, #4]
 8018960:	b007      	add	sp, #28
 8018962:	f85d fb04 	ldr.w	pc, [sp], #4
 8018966:	bf00      	nop

08018968 <rclc_action_take_goal_handle>:
 8018968:	b160      	cbz	r0, 8018984 <rclc_action_take_goal_handle+0x1c>
 801896a:	6883      	ldr	r3, [r0, #8]
 801896c:	b143      	cbz	r3, 8018980 <rclc_action_take_goal_handle+0x18>
 801896e:	6819      	ldr	r1, [r3, #0]
 8018970:	6081      	str	r1, [r0, #8]
 8018972:	2200      	movs	r2, #0
 8018974:	721a      	strb	r2, [r3, #8]
 8018976:	68c1      	ldr	r1, [r0, #12]
 8018978:	6019      	str	r1, [r3, #0]
 801897a:	621a      	str	r2, [r3, #32]
 801897c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801897e:	60c3      	str	r3, [r0, #12]
 8018980:	4618      	mov	r0, r3
 8018982:	4770      	bx	lr
 8018984:	4603      	mov	r3, r0
 8018986:	e7fb      	b.n	8018980 <rclc_action_take_goal_handle+0x18>

08018988 <rclc_action_remove_used_goal_handle>:
 8018988:	b180      	cbz	r0, 80189ac <rclc_action_remove_used_goal_handle+0x24>
 801898a:	b179      	cbz	r1, 80189ac <rclc_action_remove_used_goal_handle+0x24>
 801898c:	68c3      	ldr	r3, [r0, #12]
 801898e:	4299      	cmp	r1, r3
 8018990:	d00d      	beq.n	80189ae <rclc_action_remove_used_goal_handle+0x26>
 8018992:	b12b      	cbz	r3, 80189a0 <rclc_action_remove_used_goal_handle+0x18>
 8018994:	681a      	ldr	r2, [r3, #0]
 8018996:	4291      	cmp	r1, r2
 8018998:	d003      	beq.n	80189a2 <rclc_action_remove_used_goal_handle+0x1a>
 801899a:	4613      	mov	r3, r2
 801899c:	2b00      	cmp	r3, #0
 801899e:	d1f9      	bne.n	8018994 <rclc_action_remove_used_goal_handle+0xc>
 80189a0:	4770      	bx	lr
 80189a2:	680a      	ldr	r2, [r1, #0]
 80189a4:	601a      	str	r2, [r3, #0]
 80189a6:	6883      	ldr	r3, [r0, #8]
 80189a8:	600b      	str	r3, [r1, #0]
 80189aa:	6081      	str	r1, [r0, #8]
 80189ac:	4770      	bx	lr
 80189ae:	680b      	ldr	r3, [r1, #0]
 80189b0:	60c3      	str	r3, [r0, #12]
 80189b2:	e7f8      	b.n	80189a6 <rclc_action_remove_used_goal_handle+0x1e>

080189b4 <rclc_action_find_goal_handle_by_uuid>:
 80189b4:	b538      	push	{r3, r4, r5, lr}
 80189b6:	b180      	cbz	r0, 80189da <rclc_action_find_goal_handle_by_uuid+0x26>
 80189b8:	460d      	mov	r5, r1
 80189ba:	b181      	cbz	r1, 80189de <rclc_action_find_goal_handle_by_uuid+0x2a>
 80189bc:	68c4      	ldr	r4, [r0, #12]
 80189be:	b914      	cbnz	r4, 80189c6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80189c0:	e009      	b.n	80189d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80189c2:	6824      	ldr	r4, [r4, #0]
 80189c4:	b13c      	cbz	r4, 80189d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80189c6:	f104 0009 	add.w	r0, r4, #9
 80189ca:	2210      	movs	r2, #16
 80189cc:	4629      	mov	r1, r5
 80189ce:	f003 fd63 	bl	801c498 <memcmp>
 80189d2:	2800      	cmp	r0, #0
 80189d4:	d1f5      	bne.n	80189c2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80189d6:	4620      	mov	r0, r4
 80189d8:	bd38      	pop	{r3, r4, r5, pc}
 80189da:	4604      	mov	r4, r0
 80189dc:	e7fb      	b.n	80189d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80189de:	460c      	mov	r4, r1
 80189e0:	e7f9      	b.n	80189d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80189e2:	bf00      	nop

080189e4 <rclc_action_find_first_handle_by_status>:
 80189e4:	b140      	cbz	r0, 80189f8 <rclc_action_find_first_handle_by_status+0x14>
 80189e6:	68c0      	ldr	r0, [r0, #12]
 80189e8:	b910      	cbnz	r0, 80189f0 <rclc_action_find_first_handle_by_status+0xc>
 80189ea:	e005      	b.n	80189f8 <rclc_action_find_first_handle_by_status+0x14>
 80189ec:	6800      	ldr	r0, [r0, #0]
 80189ee:	b118      	cbz	r0, 80189f8 <rclc_action_find_first_handle_by_status+0x14>
 80189f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80189f4:	428b      	cmp	r3, r1
 80189f6:	d1f9      	bne.n	80189ec <rclc_action_find_first_handle_by_status+0x8>
 80189f8:	4770      	bx	lr
 80189fa:	bf00      	nop

080189fc <rclc_action_find_first_terminated_handle>:
 80189fc:	b140      	cbz	r0, 8018a10 <rclc_action_find_first_terminated_handle+0x14>
 80189fe:	68c0      	ldr	r0, [r0, #12]
 8018a00:	b910      	cbnz	r0, 8018a08 <rclc_action_find_first_terminated_handle+0xc>
 8018a02:	e005      	b.n	8018a10 <rclc_action_find_first_terminated_handle+0x14>
 8018a04:	6800      	ldr	r0, [r0, #0]
 8018a06:	b118      	cbz	r0, 8018a10 <rclc_action_find_first_terminated_handle+0x14>
 8018a08:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018a0c:	2b03      	cmp	r3, #3
 8018a0e:	ddf9      	ble.n	8018a04 <rclc_action_find_first_terminated_handle+0x8>
 8018a10:	4770      	bx	lr
 8018a12:	bf00      	nop

08018a14 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018a14:	b170      	cbz	r0, 8018a34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018a16:	68c0      	ldr	r0, [r0, #12]
 8018a18:	b160      	cbz	r0, 8018a34 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018a1a:	b410      	push	{r4}
 8018a1c:	e001      	b.n	8018a22 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018a1e:	6800      	ldr	r0, [r0, #0]
 8018a20:	b128      	cbz	r0, 8018a2e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018a22:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8018a26:	4299      	cmp	r1, r3
 8018a28:	bf08      	it	eq
 8018a2a:	4294      	cmpeq	r4, r2
 8018a2c:	d1f7      	bne.n	8018a1e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a32:	4770      	bx	lr
 8018a34:	4770      	bx	lr
 8018a36:	bf00      	nop

08018a38 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018a38:	b170      	cbz	r0, 8018a58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018a3a:	68c0      	ldr	r0, [r0, #12]
 8018a3c:	b160      	cbz	r0, 8018a58 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018a3e:	b410      	push	{r4}
 8018a40:	e001      	b.n	8018a46 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018a42:	6800      	ldr	r0, [r0, #0]
 8018a44:	b128      	cbz	r0, 8018a52 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018a46:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8018a4a:	4299      	cmp	r1, r3
 8018a4c:	bf08      	it	eq
 8018a4e:	4294      	cmpeq	r4, r2
 8018a50:	d1f7      	bne.n	8018a42 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a56:	4770      	bx	lr
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop

08018a5c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018a5c:	b170      	cbz	r0, 8018a7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018a5e:	68c0      	ldr	r0, [r0, #12]
 8018a60:	b160      	cbz	r0, 8018a7c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018a62:	b410      	push	{r4}
 8018a64:	e001      	b.n	8018a6a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018a66:	6800      	ldr	r0, [r0, #0]
 8018a68:	b128      	cbz	r0, 8018a76 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018a6a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8018a6e:	4299      	cmp	r1, r3
 8018a70:	bf08      	it	eq
 8018a72:	4294      	cmpeq	r4, r2
 8018a74:	d1f7      	bne.n	8018a66 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a7a:	4770      	bx	lr
 8018a7c:	4770      	bx	lr
 8018a7e:	bf00      	nop

08018a80 <rclc_action_find_first_handle_with_goal_response>:
 8018a80:	b140      	cbz	r0, 8018a94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018a82:	68c0      	ldr	r0, [r0, #12]
 8018a84:	b910      	cbnz	r0, 8018a8c <rclc_action_find_first_handle_with_goal_response+0xc>
 8018a86:	e005      	b.n	8018a94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018a88:	6800      	ldr	r0, [r0, #0]
 8018a8a:	b118      	cbz	r0, 8018a94 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018a8c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d0f9      	beq.n	8018a88 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018a94:	4770      	bx	lr
 8018a96:	bf00      	nop

08018a98 <rclc_action_find_first_handle_with_result_response>:
 8018a98:	b140      	cbz	r0, 8018aac <rclc_action_find_first_handle_with_result_response+0x14>
 8018a9a:	68c0      	ldr	r0, [r0, #12]
 8018a9c:	b910      	cbnz	r0, 8018aa4 <rclc_action_find_first_handle_with_result_response+0xc>
 8018a9e:	e005      	b.n	8018aac <rclc_action_find_first_handle_with_result_response+0x14>
 8018aa0:	6800      	ldr	r0, [r0, #0]
 8018aa2:	b118      	cbz	r0, 8018aac <rclc_action_find_first_handle_with_result_response+0x14>
 8018aa4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d0f9      	beq.n	8018aa0 <rclc_action_find_first_handle_with_result_response+0x8>
 8018aac:	4770      	bx	lr
 8018aae:	bf00      	nop

08018ab0 <rclc_action_server_response_goal_request>:
 8018ab0:	b198      	cbz	r0, 8018ada <rclc_action_server_response_goal_request+0x2a>
 8018ab2:	b510      	push	{r4, lr}
 8018ab4:	6844      	ldr	r4, [r0, #4]
 8018ab6:	b086      	sub	sp, #24
 8018ab8:	2200      	movs	r2, #0
 8018aba:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018abe:	460b      	mov	r3, r1
 8018ac0:	9205      	str	r2, [sp, #20]
 8018ac2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8018ac6:	aa03      	add	r2, sp, #12
 8018ac8:	f104 0010 	add.w	r0, r4, #16
 8018acc:	f88d 300c 	strb.w	r3, [sp, #12]
 8018ad0:	f7ff fd4a 	bl	8018568 <rcl_action_send_goal_response>
 8018ad4:	b918      	cbnz	r0, 8018ade <rclc_action_server_response_goal_request+0x2e>
 8018ad6:	b006      	add	sp, #24
 8018ad8:	bd10      	pop	{r4, pc}
 8018ada:	200b      	movs	r0, #11
 8018adc:	4770      	bx	lr
 8018ade:	9001      	str	r0, [sp, #4]
 8018ae0:	f7f7 fd12 	bl	8010508 <rcutils_reset_error>
 8018ae4:	9801      	ldr	r0, [sp, #4]
 8018ae6:	b006      	add	sp, #24
 8018ae8:	bd10      	pop	{r4, pc}
 8018aea:	bf00      	nop
 8018aec:	0000      	movs	r0, r0
	...

08018af0 <rclc_action_server_goal_cancel_accept>:
 8018af0:	b310      	cbz	r0, 8018b38 <rclc_action_server_goal_cancel_accept+0x48>
 8018af2:	b510      	push	{r4, lr}
 8018af4:	b090      	sub	sp, #64	@ 0x40
 8018af6:	4604      	mov	r4, r0
 8018af8:	a806      	add	r0, sp, #24
 8018afa:	f7ff fefd 	bl	80188f8 <rcl_action_get_zero_initialized_cancel_response>
 8018afe:	2300      	movs	r3, #0
 8018b00:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018b04:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018b08:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018b0c:	f88d 3018 	strb.w	r3, [sp, #24]
 8018b10:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018b14:	f8cd d01c 	str.w	sp, [sp, #28]
 8018b18:	46ec      	mov	ip, sp
 8018b1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b1e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018b40 <rclc_action_server_goal_cancel_accept+0x50>
 8018b22:	6860      	ldr	r0, [r4, #4]
 8018b24:	aa06      	add	r2, sp, #24
 8018b26:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8018b2a:	3010      	adds	r0, #16
 8018b2c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018b30:	f7ff fdd2 	bl	80186d8 <rcl_action_send_cancel_response>
 8018b34:	b010      	add	sp, #64	@ 0x40
 8018b36:	bd10      	pop	{r4, pc}
 8018b38:	200b      	movs	r0, #11
 8018b3a:	4770      	bx	lr
 8018b3c:	f3af 8000 	nop.w
 8018b40:	00000001 	.word	0x00000001
 8018b44:	00000001 	.word	0x00000001

08018b48 <rclc_action_server_goal_cancel_reject>:
 8018b48:	b082      	sub	sp, #8
 8018b4a:	b530      	push	{r4, r5, lr}
 8018b4c:	b08b      	sub	sp, #44	@ 0x2c
 8018b4e:	ac0e      	add	r4, sp, #56	@ 0x38
 8018b50:	e884 000c 	stmia.w	r4, {r2, r3}
 8018b54:	b188      	cbz	r0, 8018b7a <rclc_action_server_goal_cancel_reject+0x32>
 8018b56:	4604      	mov	r4, r0
 8018b58:	a801      	add	r0, sp, #4
 8018b5a:	460d      	mov	r5, r1
 8018b5c:	f7ff fecc 	bl	80188f8 <rcl_action_get_zero_initialized_cancel_response>
 8018b60:	aa01      	add	r2, sp, #4
 8018b62:	a90e      	add	r1, sp, #56	@ 0x38
 8018b64:	f104 0010 	add.w	r0, r4, #16
 8018b68:	f88d 5004 	strb.w	r5, [sp, #4]
 8018b6c:	f7ff fdb4 	bl	80186d8 <rcl_action_send_cancel_response>
 8018b70:	b00b      	add	sp, #44	@ 0x2c
 8018b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018b76:	b002      	add	sp, #8
 8018b78:	4770      	bx	lr
 8018b7a:	200b      	movs	r0, #11
 8018b7c:	b00b      	add	sp, #44	@ 0x2c
 8018b7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018b82:	b002      	add	sp, #8
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop

08018b88 <rcutils_string_array_fini>:
 8018b88:	b320      	cbz	r0, 8018bd4 <rcutils_string_array_fini+0x4c>
 8018b8a:	b570      	push	{r4, r5, r6, lr}
 8018b8c:	4604      	mov	r4, r0
 8018b8e:	6840      	ldr	r0, [r0, #4]
 8018b90:	b1d8      	cbz	r0, 8018bca <rcutils_string_array_fini+0x42>
 8018b92:	f104 0008 	add.w	r0, r4, #8
 8018b96:	f7f7 fbd7 	bl	8010348 <rcutils_allocator_is_valid>
 8018b9a:	b1b8      	cbz	r0, 8018bcc <rcutils_string_array_fini+0x44>
 8018b9c:	6823      	ldr	r3, [r4, #0]
 8018b9e:	b1bb      	cbz	r3, 8018bd0 <rcutils_string_array_fini+0x48>
 8018ba0:	2500      	movs	r5, #0
 8018ba2:	6860      	ldr	r0, [r4, #4]
 8018ba4:	462e      	mov	r6, r5
 8018ba6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018baa:	68e3      	ldr	r3, [r4, #12]
 8018bac:	69a1      	ldr	r1, [r4, #24]
 8018bae:	4798      	blx	r3
 8018bb0:	e9d4 3000 	ldrd	r3, r0, [r4]
 8018bb4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8018bb8:	3501      	adds	r5, #1
 8018bba:	429d      	cmp	r5, r3
 8018bbc:	d3f3      	bcc.n	8018ba6 <rcutils_string_array_fini+0x1e>
 8018bbe:	68e3      	ldr	r3, [r4, #12]
 8018bc0:	69a1      	ldr	r1, [r4, #24]
 8018bc2:	4798      	blx	r3
 8018bc4:	2000      	movs	r0, #0
 8018bc6:	e9c4 0000 	strd	r0, r0, [r4]
 8018bca:	bd70      	pop	{r4, r5, r6, pc}
 8018bcc:	200b      	movs	r0, #11
 8018bce:	bd70      	pop	{r4, r5, r6, pc}
 8018bd0:	6860      	ldr	r0, [r4, #4]
 8018bd2:	e7f4      	b.n	8018bbe <rcutils_string_array_fini+0x36>
 8018bd4:	200b      	movs	r0, #11
 8018bd6:	4770      	bx	lr

08018bd8 <rcutils_get_zero_initialized_string_map>:
 8018bd8:	4b01      	ldr	r3, [pc, #4]	@ (8018be0 <rcutils_get_zero_initialized_string_map+0x8>)
 8018bda:	2000      	movs	r0, #0
 8018bdc:	6018      	str	r0, [r3, #0]
 8018bde:	4770      	bx	lr
 8018be0:	20011ac8 	.word	0x20011ac8

08018be4 <rcutils_string_map_reserve>:
 8018be4:	2800      	cmp	r0, #0
 8018be6:	d05f      	beq.n	8018ca8 <rcutils_string_map_reserve+0xc4>
 8018be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bec:	460c      	mov	r4, r1
 8018bee:	6801      	ldr	r1, [r0, #0]
 8018bf0:	b082      	sub	sp, #8
 8018bf2:	4605      	mov	r5, r0
 8018bf4:	b129      	cbz	r1, 8018c02 <rcutils_string_map_reserve+0x1e>
 8018bf6:	68cb      	ldr	r3, [r1, #12]
 8018bf8:	42a3      	cmp	r3, r4
 8018bfa:	d906      	bls.n	8018c0a <rcutils_string_map_reserve+0x26>
 8018bfc:	461c      	mov	r4, r3
 8018bfe:	2900      	cmp	r1, #0
 8018c00:	d1f9      	bne.n	8018bf6 <rcutils_string_map_reserve+0x12>
 8018c02:	201f      	movs	r0, #31
 8018c04:	b002      	add	sp, #8
 8018c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c0a:	688b      	ldr	r3, [r1, #8]
 8018c0c:	42a3      	cmp	r3, r4
 8018c0e:	d047      	beq.n	8018ca0 <rcutils_string_map_reserve+0xbc>
 8018c10:	6a0e      	ldr	r6, [r1, #32]
 8018c12:	2c00      	cmp	r4, #0
 8018c14:	d034      	beq.n	8018c80 <rcutils_string_map_reserve+0x9c>
 8018c16:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018c1a:	d243      	bcs.n	8018ca4 <rcutils_string_map_reserve+0xc0>
 8018c1c:	00a7      	lsls	r7, r4, #2
 8018c1e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8018c22:	6808      	ldr	r0, [r1, #0]
 8018c24:	4632      	mov	r2, r6
 8018c26:	4639      	mov	r1, r7
 8018c28:	47c0      	blx	r8
 8018c2a:	2800      	cmp	r0, #0
 8018c2c:	d03a      	beq.n	8018ca4 <rcutils_string_map_reserve+0xc0>
 8018c2e:	682b      	ldr	r3, [r5, #0]
 8018c30:	4632      	mov	r2, r6
 8018c32:	6018      	str	r0, [r3, #0]
 8018c34:	4639      	mov	r1, r7
 8018c36:	6858      	ldr	r0, [r3, #4]
 8018c38:	47c0      	blx	r8
 8018c3a:	2800      	cmp	r0, #0
 8018c3c:	d032      	beq.n	8018ca4 <rcutils_string_map_reserve+0xc0>
 8018c3e:	682d      	ldr	r5, [r5, #0]
 8018c40:	68ab      	ldr	r3, [r5, #8]
 8018c42:	6068      	str	r0, [r5, #4]
 8018c44:	42a3      	cmp	r3, r4
 8018c46:	d226      	bcs.n	8018c96 <rcutils_string_map_reserve+0xb2>
 8018c48:	682a      	ldr	r2, [r5, #0]
 8018c4a:	eb00 0c07 	add.w	ip, r0, r7
 8018c4e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8018c52:	45e6      	cmp	lr, ip
 8018c54:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8018c58:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8018c5c:	d203      	bcs.n	8018c66 <rcutils_string_map_reserve+0x82>
 8018c5e:	eb02 0c07 	add.w	ip, r2, r7
 8018c62:	4566      	cmp	r6, ip
 8018c64:	d322      	bcc.n	8018cac <rcutils_string_map_reserve+0xc8>
 8018c66:	1ae3      	subs	r3, r4, r3
 8018c68:	009a      	lsls	r2, r3, #2
 8018c6a:	4670      	mov	r0, lr
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	9201      	str	r2, [sp, #4]
 8018c70:	f003 fc3c 	bl	801c4ec <memset>
 8018c74:	9a01      	ldr	r2, [sp, #4]
 8018c76:	2100      	movs	r1, #0
 8018c78:	4630      	mov	r0, r6
 8018c7a:	f003 fc37 	bl	801c4ec <memset>
 8018c7e:	e00a      	b.n	8018c96 <rcutils_string_map_reserve+0xb2>
 8018c80:	694f      	ldr	r7, [r1, #20]
 8018c82:	6808      	ldr	r0, [r1, #0]
 8018c84:	4631      	mov	r1, r6
 8018c86:	47b8      	blx	r7
 8018c88:	682b      	ldr	r3, [r5, #0]
 8018c8a:	4631      	mov	r1, r6
 8018c8c:	6858      	ldr	r0, [r3, #4]
 8018c8e:	601c      	str	r4, [r3, #0]
 8018c90:	47b8      	blx	r7
 8018c92:	682d      	ldr	r5, [r5, #0]
 8018c94:	606c      	str	r4, [r5, #4]
 8018c96:	2000      	movs	r0, #0
 8018c98:	60ac      	str	r4, [r5, #8]
 8018c9a:	b002      	add	sp, #8
 8018c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ca0:	2000      	movs	r0, #0
 8018ca2:	e7af      	b.n	8018c04 <rcutils_string_map_reserve+0x20>
 8018ca4:	200a      	movs	r0, #10
 8018ca6:	e7ad      	b.n	8018c04 <rcutils_string_map_reserve+0x20>
 8018ca8:	200b      	movs	r0, #11
 8018caa:	4770      	bx	lr
 8018cac:	1f0b      	subs	r3, r1, #4
 8018cae:	4418      	add	r0, r3
 8018cb0:	4413      	add	r3, r2
 8018cb2:	3a04      	subs	r2, #4
 8018cb4:	4417      	add	r7, r2
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	f843 2f04 	str.w	r2, [r3, #4]!
 8018cbc:	42bb      	cmp	r3, r7
 8018cbe:	f840 2f04 	str.w	r2, [r0, #4]!
 8018cc2:	d1f9      	bne.n	8018cb8 <rcutils_string_map_reserve+0xd4>
 8018cc4:	e7e7      	b.n	8018c96 <rcutils_string_map_reserve+0xb2>
 8018cc6:	bf00      	nop

08018cc8 <rcutils_string_map_init>:
 8018cc8:	b082      	sub	sp, #8
 8018cca:	b570      	push	{r4, r5, r6, lr}
 8018ccc:	ac04      	add	r4, sp, #16
 8018cce:	e884 000c 	stmia.w	r4, {r2, r3}
 8018cd2:	b380      	cbz	r0, 8018d36 <rcutils_string_map_init+0x6e>
 8018cd4:	6806      	ldr	r6, [r0, #0]
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	b12e      	cbz	r6, 8018ce6 <rcutils_string_map_init+0x1e>
 8018cda:	251e      	movs	r5, #30
 8018cdc:	4628      	mov	r0, r5
 8018cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ce2:	b002      	add	sp, #8
 8018ce4:	4770      	bx	lr
 8018ce6:	a804      	add	r0, sp, #16
 8018ce8:	460d      	mov	r5, r1
 8018cea:	f7f7 fb2d 	bl	8010348 <rcutils_allocator_is_valid>
 8018cee:	b310      	cbz	r0, 8018d36 <rcutils_string_map_init+0x6e>
 8018cf0:	9b04      	ldr	r3, [sp, #16]
 8018cf2:	9908      	ldr	r1, [sp, #32]
 8018cf4:	2024      	movs	r0, #36	@ 0x24
 8018cf6:	4798      	blx	r3
 8018cf8:	6020      	str	r0, [r4, #0]
 8018cfa:	b310      	cbz	r0, 8018d42 <rcutils_string_map_init+0x7a>
 8018cfc:	f10d 0e10 	add.w	lr, sp, #16
 8018d00:	e9c0 6600 	strd	r6, r6, [r0]
 8018d04:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018d08:	f100 0c10 	add.w	ip, r0, #16
 8018d0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018d10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d14:	f8de 3000 	ldr.w	r3, [lr]
 8018d18:	f8cc 3000 	str.w	r3, [ip]
 8018d1c:	4629      	mov	r1, r5
 8018d1e:	4620      	mov	r0, r4
 8018d20:	f7ff ff60 	bl	8018be4 <rcutils_string_map_reserve>
 8018d24:	4605      	mov	r5, r0
 8018d26:	2800      	cmp	r0, #0
 8018d28:	d0d8      	beq.n	8018cdc <rcutils_string_map_init+0x14>
 8018d2a:	9b05      	ldr	r3, [sp, #20]
 8018d2c:	9908      	ldr	r1, [sp, #32]
 8018d2e:	6820      	ldr	r0, [r4, #0]
 8018d30:	4798      	blx	r3
 8018d32:	6026      	str	r6, [r4, #0]
 8018d34:	e7d2      	b.n	8018cdc <rcutils_string_map_init+0x14>
 8018d36:	250b      	movs	r5, #11
 8018d38:	4628      	mov	r0, r5
 8018d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d3e:	b002      	add	sp, #8
 8018d40:	4770      	bx	lr
 8018d42:	250a      	movs	r5, #10
 8018d44:	e7ca      	b.n	8018cdc <rcutils_string_map_init+0x14>
 8018d46:	bf00      	nop

08018d48 <rcutils_string_map_fini>:
 8018d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d4c:	b082      	sub	sp, #8
 8018d4e:	2800      	cmp	r0, #0
 8018d50:	d03a      	beq.n	8018dc8 <rcutils_string_map_fini+0x80>
 8018d52:	6804      	ldr	r4, [r0, #0]
 8018d54:	4606      	mov	r6, r0
 8018d56:	2c00      	cmp	r4, #0
 8018d58:	d032      	beq.n	8018dc0 <rcutils_string_map_fini+0x78>
 8018d5a:	68a3      	ldr	r3, [r4, #8]
 8018d5c:	b32b      	cbz	r3, 8018daa <rcutils_string_map_fini+0x62>
 8018d5e:	2500      	movs	r5, #0
 8018d60:	6822      	ldr	r2, [r4, #0]
 8018d62:	462f      	mov	r7, r5
 8018d64:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018d68:	b1e0      	cbz	r0, 8018da4 <rcutils_string_map_fini+0x5c>
 8018d6a:	6a21      	ldr	r1, [r4, #32]
 8018d6c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018d70:	9101      	str	r1, [sp, #4]
 8018d72:	47c0      	blx	r8
 8018d74:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018d78:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018d7c:	9901      	ldr	r1, [sp, #4]
 8018d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018d82:	47c0      	blx	r8
 8018d84:	68e3      	ldr	r3, [r4, #12]
 8018d86:	6862      	ldr	r2, [r4, #4]
 8018d88:	3b01      	subs	r3, #1
 8018d8a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018d8e:	60e3      	str	r3, [r4, #12]
 8018d90:	6834      	ldr	r4, [r6, #0]
 8018d92:	68a3      	ldr	r3, [r4, #8]
 8018d94:	3501      	adds	r5, #1
 8018d96:	429d      	cmp	r5, r3
 8018d98:	d207      	bcs.n	8018daa <rcutils_string_map_fini+0x62>
 8018d9a:	6822      	ldr	r2, [r4, #0]
 8018d9c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018da0:	2800      	cmp	r0, #0
 8018da2:	d1e2      	bne.n	8018d6a <rcutils_string_map_fini+0x22>
 8018da4:	3501      	adds	r5, #1
 8018da6:	429d      	cmp	r5, r3
 8018da8:	d3dc      	bcc.n	8018d64 <rcutils_string_map_fini+0x1c>
 8018daa:	2100      	movs	r1, #0
 8018dac:	4630      	mov	r0, r6
 8018dae:	f7ff ff19 	bl	8018be4 <rcutils_string_map_reserve>
 8018db2:	4604      	mov	r4, r0
 8018db4:	b920      	cbnz	r0, 8018dc0 <rcutils_string_map_fini+0x78>
 8018db6:	6830      	ldr	r0, [r6, #0]
 8018db8:	6943      	ldr	r3, [r0, #20]
 8018dba:	6a01      	ldr	r1, [r0, #32]
 8018dbc:	4798      	blx	r3
 8018dbe:	6034      	str	r4, [r6, #0]
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	b002      	add	sp, #8
 8018dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dc8:	240b      	movs	r4, #11
 8018dca:	4620      	mov	r0, r4
 8018dcc:	b002      	add	sp, #8
 8018dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dd2:	bf00      	nop

08018dd4 <rcutils_string_map_getn>:
 8018dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd8:	b300      	cbz	r0, 8018e1c <rcutils_string_map_getn+0x48>
 8018dda:	6807      	ldr	r7, [r0, #0]
 8018ddc:	b1ff      	cbz	r7, 8018e1e <rcutils_string_map_getn+0x4a>
 8018dde:	4688      	mov	r8, r1
 8018de0:	b1e1      	cbz	r1, 8018e1c <rcutils_string_map_getn+0x48>
 8018de2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8018de6:	683e      	ldr	r6, [r7, #0]
 8018de8:	f1ba 0f00 	cmp.w	sl, #0
 8018dec:	d016      	beq.n	8018e1c <rcutils_string_map_getn+0x48>
 8018dee:	4691      	mov	r9, r2
 8018df0:	3e04      	subs	r6, #4
 8018df2:	2400      	movs	r4, #0
 8018df4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018df8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018dfc:	4628      	mov	r0, r5
 8018dfe:	3401      	adds	r4, #1
 8018e00:	b155      	cbz	r5, 8018e18 <rcutils_string_map_getn+0x44>
 8018e02:	f7e7 fa0f 	bl	8000224 <strlen>
 8018e06:	4548      	cmp	r0, r9
 8018e08:	4602      	mov	r2, r0
 8018e0a:	4629      	mov	r1, r5
 8018e0c:	bf38      	it	cc
 8018e0e:	464a      	movcc	r2, r9
 8018e10:	4640      	mov	r0, r8
 8018e12:	f003 fb80 	bl	801c516 <strncmp>
 8018e16:	b128      	cbz	r0, 8018e24 <rcutils_string_map_getn+0x50>
 8018e18:	45a2      	cmp	sl, r4
 8018e1a:	d1eb      	bne.n	8018df4 <rcutils_string_map_getn+0x20>
 8018e1c:	2700      	movs	r7, #0
 8018e1e:	4638      	mov	r0, r7
 8018e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	f853 700b 	ldr.w	r7, [r3, fp]
 8018e2a:	4638      	mov	r0, r7
 8018e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e30 <rmw_get_zero_initialized_context>:
 8018e30:	b510      	push	{r4, lr}
 8018e32:	4604      	mov	r4, r0
 8018e34:	3010      	adds	r0, #16
 8018e36:	f7f7 fd2b 	bl	8010890 <rmw_get_zero_initialized_init_options>
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	2000      	movs	r0, #0
 8018e3e:	2100      	movs	r1, #0
 8018e40:	e9c4 0100 	strd	r0, r1, [r4]
 8018e44:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8018e48:	60a3      	str	r3, [r4, #8]
 8018e4a:	4620      	mov	r0, r4
 8018e4c:	bd10      	pop	{r4, pc}
 8018e4e:	bf00      	nop

08018e50 <rmw_time_equal>:
 8018e50:	b4f0      	push	{r4, r5, r6, r7}
 8018e52:	b084      	sub	sp, #16
 8018e54:	ac04      	add	r4, sp, #16
 8018e56:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	4924      	ldr	r1, [pc, #144]	@ (8018ef0 <rmw_time_equal+0xa0>)
 8018e5e:	9e03      	ldr	r6, [sp, #12]
 8018e60:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018e64:	2202      	movs	r2, #2
 8018e66:	4299      	cmp	r1, r3
 8018e68:	41aa      	sbcs	r2, r5
 8018e6a:	d330      	bcc.n	8018ece <rmw_time_equal+0x7e>
 8018e6c:	4c21      	ldr	r4, [pc, #132]	@ (8018ef4 <rmw_time_equal+0xa4>)
 8018e6e:	fba3 3204 	umull	r3, r2, r3, r4
 8018e72:	fb04 2205 	mla	r2, r4, r5, r2
 8018e76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018e7a:	43dd      	mvns	r5, r3
 8018e7c:	1a8c      	subs	r4, r1, r2
 8018e7e:	4285      	cmp	r5, r0
 8018e80:	41b4      	sbcs	r4, r6
 8018e82:	d332      	bcc.n	8018eea <rmw_time_equal+0x9a>
 8018e84:	eb10 0c03 	adds.w	ip, r0, r3
 8018e88:	eb42 0106 	adc.w	r1, r2, r6
 8018e8c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018e90:	4817      	ldr	r0, [pc, #92]	@ (8018ef0 <rmw_time_equal+0xa0>)
 8018e92:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018e94:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018e96:	2202      	movs	r2, #2
 8018e98:	4298      	cmp	r0, r3
 8018e9a:	41b2      	sbcs	r2, r6
 8018e9c:	d31c      	bcc.n	8018ed8 <rmw_time_equal+0x88>
 8018e9e:	4c15      	ldr	r4, [pc, #84]	@ (8018ef4 <rmw_time_equal+0xa4>)
 8018ea0:	fba3 3204 	umull	r3, r2, r3, r4
 8018ea4:	fb04 2206 	mla	r2, r4, r6, r2
 8018ea8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018eac:	43de      	mvns	r6, r3
 8018eae:	1a84      	subs	r4, r0, r2
 8018eb0:	42ae      	cmp	r6, r5
 8018eb2:	41bc      	sbcs	r4, r7
 8018eb4:	d315      	bcc.n	8018ee2 <rmw_time_equal+0x92>
 8018eb6:	195b      	adds	r3, r3, r5
 8018eb8:	eb42 0207 	adc.w	r2, r2, r7
 8018ebc:	428a      	cmp	r2, r1
 8018ebe:	bf08      	it	eq
 8018ec0:	4563      	cmpeq	r3, ip
 8018ec2:	bf0c      	ite	eq
 8018ec4:	2001      	moveq	r0, #1
 8018ec6:	2000      	movne	r0, #0
 8018ec8:	b004      	add	sp, #16
 8018eca:	bcf0      	pop	{r4, r5, r6, r7}
 8018ecc:	4770      	bx	lr
 8018ece:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018ed2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018ed6:	e7d9      	b.n	8018e8c <rmw_time_equal+0x3c>
 8018ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018edc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018ee0:	e7ec      	b.n	8018ebc <rmw_time_equal+0x6c>
 8018ee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	e7e8      	b.n	8018ebc <rmw_time_equal+0x6c>
 8018eea:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018eee:	e7cd      	b.n	8018e8c <rmw_time_equal+0x3c>
 8018ef0:	25c17d04 	.word	0x25c17d04
 8018ef4:	3b9aca00 	.word	0x3b9aca00

08018ef8 <rmw_time_total_nsec>:
 8018ef8:	b470      	push	{r4, r5, r6}
 8018efa:	b085      	sub	sp, #20
 8018efc:	ac04      	add	r4, sp, #16
 8018efe:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018f02:	4603      	mov	r3, r0
 8018f04:	4912      	ldr	r1, [pc, #72]	@ (8018f50 <rmw_time_total_nsec+0x58>)
 8018f06:	9e03      	ldr	r6, [sp, #12]
 8018f08:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8018f0c:	2202      	movs	r2, #2
 8018f0e:	4299      	cmp	r1, r3
 8018f10:	41aa      	sbcs	r2, r5
 8018f12:	d311      	bcc.n	8018f38 <rmw_time_total_nsec+0x40>
 8018f14:	4c0f      	ldr	r4, [pc, #60]	@ (8018f54 <rmw_time_total_nsec+0x5c>)
 8018f16:	fba3 3204 	umull	r3, r2, r3, r4
 8018f1a:	fb04 2205 	mla	r2, r4, r5, r2
 8018f1e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018f22:	43dd      	mvns	r5, r3
 8018f24:	1a8c      	subs	r4, r1, r2
 8018f26:	4285      	cmp	r5, r0
 8018f28:	41b4      	sbcs	r4, r6
 8018f2a:	d30c      	bcc.n	8018f46 <rmw_time_total_nsec+0x4e>
 8018f2c:	1818      	adds	r0, r3, r0
 8018f2e:	eb42 0106 	adc.w	r1, r2, r6
 8018f32:	b005      	add	sp, #20
 8018f34:	bc70      	pop	{r4, r5, r6}
 8018f36:	4770      	bx	lr
 8018f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018f40:	b005      	add	sp, #20
 8018f42:	bc70      	pop	{r4, r5, r6}
 8018f44:	4770      	bx	lr
 8018f46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f4a:	b005      	add	sp, #20
 8018f4c:	bc70      	pop	{r4, r5, r6}
 8018f4e:	4770      	bx	lr
 8018f50:	25c17d04 	.word	0x25c17d04
 8018f54:	3b9aca00 	.word	0x3b9aca00

08018f58 <rmw_validate_full_topic_name>:
 8018f58:	2800      	cmp	r0, #0
 8018f5a:	d057      	beq.n	801900c <rmw_validate_full_topic_name+0xb4>
 8018f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f60:	460d      	mov	r5, r1
 8018f62:	2900      	cmp	r1, #0
 8018f64:	d054      	beq.n	8019010 <rmw_validate_full_topic_name+0xb8>
 8018f66:	4616      	mov	r6, r2
 8018f68:	4604      	mov	r4, r0
 8018f6a:	f7e7 f95b 	bl	8000224 <strlen>
 8018f6e:	b148      	cbz	r0, 8018f84 <rmw_validate_full_topic_name+0x2c>
 8018f70:	7823      	ldrb	r3, [r4, #0]
 8018f72:	2b2f      	cmp	r3, #47	@ 0x2f
 8018f74:	d00d      	beq.n	8018f92 <rmw_validate_full_topic_name+0x3a>
 8018f76:	2302      	movs	r3, #2
 8018f78:	602b      	str	r3, [r5, #0]
 8018f7a:	b13e      	cbz	r6, 8018f8c <rmw_validate_full_topic_name+0x34>
 8018f7c:	2000      	movs	r0, #0
 8018f7e:	6030      	str	r0, [r6, #0]
 8018f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f84:	2301      	movs	r3, #1
 8018f86:	602b      	str	r3, [r5, #0]
 8018f88:	2e00      	cmp	r6, #0
 8018f8a:	d1f7      	bne.n	8018f7c <rmw_validate_full_topic_name+0x24>
 8018f8c:	2000      	movs	r0, #0
 8018f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f92:	1e43      	subs	r3, r0, #1
 8018f94:	5ce2      	ldrb	r2, [r4, r3]
 8018f96:	2a2f      	cmp	r2, #47	@ 0x2f
 8018f98:	d03c      	beq.n	8019014 <rmw_validate_full_topic_name+0xbc>
 8018f9a:	1e63      	subs	r3, r4, #1
 8018f9c:	eb03 0800 	add.w	r8, r3, r0
 8018fa0:	f1c4 0e01 	rsb	lr, r4, #1
 8018fa4:	eb0e 0703 	add.w	r7, lr, r3
 8018fa8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8018fac:	f021 0220 	bic.w	r2, r1, #32
 8018fb0:	3a41      	subs	r2, #65	@ 0x41
 8018fb2:	2a19      	cmp	r2, #25
 8018fb4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8018fb8:	d90b      	bls.n	8018fd2 <rmw_validate_full_topic_name+0x7a>
 8018fba:	295f      	cmp	r1, #95	@ 0x5f
 8018fbc:	d009      	beq.n	8018fd2 <rmw_validate_full_topic_name+0x7a>
 8018fbe:	f1bc 0f0a 	cmp.w	ip, #10
 8018fc2:	d906      	bls.n	8018fd2 <rmw_validate_full_topic_name+0x7a>
 8018fc4:	2304      	movs	r3, #4
 8018fc6:	602b      	str	r3, [r5, #0]
 8018fc8:	2e00      	cmp	r6, #0
 8018fca:	d0df      	beq.n	8018f8c <rmw_validate_full_topic_name+0x34>
 8018fcc:	6037      	str	r7, [r6, #0]
 8018fce:	2000      	movs	r0, #0
 8018fd0:	e7d6      	b.n	8018f80 <rmw_validate_full_topic_name+0x28>
 8018fd2:	4543      	cmp	r3, r8
 8018fd4:	d1e6      	bne.n	8018fa4 <rmw_validate_full_topic_name+0x4c>
 8018fd6:	4f1a      	ldr	r7, [pc, #104]	@ (8019040 <rmw_validate_full_topic_name+0xe8>)
 8018fd8:	2301      	movs	r3, #1
 8018fda:	e004      	b.n	8018fe6 <rmw_validate_full_topic_name+0x8e>
 8018fdc:	4298      	cmp	r0, r3
 8018fde:	f104 0401 	add.w	r4, r4, #1
 8018fe2:	d91c      	bls.n	801901e <rmw_validate_full_topic_name+0xc6>
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	4298      	cmp	r0, r3
 8018fe8:	f103 0201 	add.w	r2, r3, #1
 8018fec:	d0f6      	beq.n	8018fdc <rmw_validate_full_topic_name+0x84>
 8018fee:	7821      	ldrb	r1, [r4, #0]
 8018ff0:	292f      	cmp	r1, #47	@ 0x2f
 8018ff2:	d1f3      	bne.n	8018fdc <rmw_validate_full_topic_name+0x84>
 8018ff4:	7861      	ldrb	r1, [r4, #1]
 8018ff6:	292f      	cmp	r1, #47	@ 0x2f
 8018ff8:	d01c      	beq.n	8019034 <rmw_validate_full_topic_name+0xdc>
 8018ffa:	5dc9      	ldrb	r1, [r1, r7]
 8018ffc:	0749      	lsls	r1, r1, #29
 8018ffe:	d5ed      	bpl.n	8018fdc <rmw_validate_full_topic_name+0x84>
 8019000:	2206      	movs	r2, #6
 8019002:	602a      	str	r2, [r5, #0]
 8019004:	2e00      	cmp	r6, #0
 8019006:	d0c1      	beq.n	8018f8c <rmw_validate_full_topic_name+0x34>
 8019008:	6033      	str	r3, [r6, #0]
 801900a:	e7bf      	b.n	8018f8c <rmw_validate_full_topic_name+0x34>
 801900c:	200b      	movs	r0, #11
 801900e:	4770      	bx	lr
 8019010:	200b      	movs	r0, #11
 8019012:	e7b5      	b.n	8018f80 <rmw_validate_full_topic_name+0x28>
 8019014:	2203      	movs	r2, #3
 8019016:	602a      	str	r2, [r5, #0]
 8019018:	2e00      	cmp	r6, #0
 801901a:	d1f5      	bne.n	8019008 <rmw_validate_full_topic_name+0xb0>
 801901c:	e7b6      	b.n	8018f8c <rmw_validate_full_topic_name+0x34>
 801901e:	28f7      	cmp	r0, #247	@ 0xf7
 8019020:	d802      	bhi.n	8019028 <rmw_validate_full_topic_name+0xd0>
 8019022:	2000      	movs	r0, #0
 8019024:	6028      	str	r0, [r5, #0]
 8019026:	e7ab      	b.n	8018f80 <rmw_validate_full_topic_name+0x28>
 8019028:	2307      	movs	r3, #7
 801902a:	602b      	str	r3, [r5, #0]
 801902c:	2e00      	cmp	r6, #0
 801902e:	d0ad      	beq.n	8018f8c <rmw_validate_full_topic_name+0x34>
 8019030:	23f6      	movs	r3, #246	@ 0xf6
 8019032:	e7e9      	b.n	8019008 <rmw_validate_full_topic_name+0xb0>
 8019034:	2205      	movs	r2, #5
 8019036:	602a      	str	r2, [r5, #0]
 8019038:	2e00      	cmp	r6, #0
 801903a:	d1e5      	bne.n	8019008 <rmw_validate_full_topic_name+0xb0>
 801903c:	e7a6      	b.n	8018f8c <rmw_validate_full_topic_name+0x34>
 801903e:	bf00      	nop
 8019040:	0801e87f 	.word	0x0801e87f

08019044 <on_status>:
 8019044:	b082      	sub	sp, #8
 8019046:	b002      	add	sp, #8
 8019048:	4770      	bx	lr
 801904a:	bf00      	nop

0801904c <on_topic>:
 801904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019050:	4a22      	ldr	r2, [pc, #136]	@ (80190dc <on_topic+0x90>)
 8019052:	b094      	sub	sp, #80	@ 0x50
 8019054:	6812      	ldr	r2, [r2, #0]
 8019056:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019058:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801905c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019060:	b3c2      	cbz	r2, 80190d4 <on_topic+0x88>
 8019062:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019066:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801906a:	e001      	b.n	8019070 <on_topic+0x24>
 801906c:	6852      	ldr	r2, [r2, #4]
 801906e:	b38a      	cbz	r2, 80190d4 <on_topic+0x88>
 8019070:	6894      	ldr	r4, [r2, #8]
 8019072:	8aa3      	ldrh	r3, [r4, #20]
 8019074:	428b      	cmp	r3, r1
 8019076:	d1f9      	bne.n	801906c <on_topic+0x20>
 8019078:	7da3      	ldrb	r3, [r4, #22]
 801907a:	4283      	cmp	r3, r0
 801907c:	d1f6      	bne.n	801906c <on_topic+0x20>
 801907e:	2248      	movs	r2, #72	@ 0x48
 8019080:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8019084:	4668      	mov	r0, sp
 8019086:	f003 fafa 	bl	801c67e <memcpy>
 801908a:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801908e:	cb0c      	ldmia	r3, {r2, r3}
 8019090:	4620      	mov	r0, r4
 8019092:	f7f8 ff09 	bl	8011ea8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019096:	4607      	mov	r7, r0
 8019098:	b1e0      	cbz	r0, 80190d4 <on_topic+0x88>
 801909a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801909e:	4632      	mov	r2, r6
 80190a0:	4628      	mov	r0, r5
 80190a2:	f108 0110 	add.w	r1, r8, #16
 80190a6:	f7f9 fc83 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80190aa:	b930      	cbnz	r0, 80190ba <on_topic+0x6e>
 80190ac:	480c      	ldr	r0, [pc, #48]	@ (80190e0 <on_topic+0x94>)
 80190ae:	4639      	mov	r1, r7
 80190b0:	b014      	add	sp, #80	@ 0x50
 80190b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80190b6:	f000 b8bd 	b.w	8019234 <put_memory>
 80190ba:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80190be:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80190c2:	f000 fca7 	bl	8019a14 <rmw_uros_epoch_nanos>
 80190c6:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80190ca:	2305      	movs	r3, #5
 80190cc:	e942 0102 	strd	r0, r1, [r2, #-8]
 80190d0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80190d4:	b014      	add	sp, #80	@ 0x50
 80190d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190da:	bf00      	nop
 80190dc:	20011a7c 	.word	0x20011a7c
 80190e0:	20011a6c 	.word	0x20011a6c

080190e4 <on_request>:
 80190e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190e8:	4823      	ldr	r0, [pc, #140]	@ (8019178 <on_request+0x94>)
 80190ea:	b094      	sub	sp, #80	@ 0x50
 80190ec:	6800      	ldr	r0, [r0, #0]
 80190ee:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80190f0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80190f4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d03b      	beq.n	8019172 <on_request+0x8e>
 80190fa:	461d      	mov	r5, r3
 80190fc:	e001      	b.n	8019102 <on_request+0x1e>
 80190fe:	6840      	ldr	r0, [r0, #4]
 8019100:	b3b8      	cbz	r0, 8019172 <on_request+0x8e>
 8019102:	6884      	ldr	r4, [r0, #8]
 8019104:	8b21      	ldrh	r1, [r4, #24]
 8019106:	4291      	cmp	r1, r2
 8019108:	d1f9      	bne.n	80190fe <on_request+0x1a>
 801910a:	2248      	movs	r2, #72	@ 0x48
 801910c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019110:	4668      	mov	r0, sp
 8019112:	f003 fab4 	bl	801c67e <memcpy>
 8019116:	f104 0320 	add.w	r3, r4, #32
 801911a:	cb0c      	ldmia	r3, {r2, r3}
 801911c:	4620      	mov	r0, r4
 801911e:	f7f8 fec3 	bl	8011ea8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019122:	4680      	mov	r8, r0
 8019124:	b328      	cbz	r0, 8019172 <on_request+0x8e>
 8019126:	4638      	mov	r0, r7
 8019128:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801912c:	4632      	mov	r2, r6
 801912e:	f107 0110 	add.w	r1, r7, #16
 8019132:	f7f9 fc3d 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 8019136:	b930      	cbnz	r0, 8019146 <on_request+0x62>
 8019138:	4810      	ldr	r0, [pc, #64]	@ (801917c <on_request+0x98>)
 801913a:	4641      	mov	r1, r8
 801913c:	b014      	add	sp, #80	@ 0x50
 801913e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019142:	f000 b877 	b.w	8019234 <put_memory>
 8019146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019148:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801914c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019150:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019158:	e895 0003 	ldmia.w	r5, {r0, r1}
 801915c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019160:	f000 fc58 	bl	8019a14 <rmw_uros_epoch_nanos>
 8019164:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8019168:	2303      	movs	r3, #3
 801916a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801916e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019172:	b014      	add	sp, #80	@ 0x50
 8019174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019178:	20011a4c 	.word	0x20011a4c
 801917c:	20011a6c 	.word	0x20011a6c

08019180 <on_reply>:
 8019180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019184:	4821      	ldr	r0, [pc, #132]	@ (801920c <on_reply+0x8c>)
 8019186:	b094      	sub	sp, #80	@ 0x50
 8019188:	6800      	ldr	r0, [r0, #0]
 801918a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801918c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019190:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019192:	b3b8      	cbz	r0, 8019204 <on_reply+0x84>
 8019194:	461d      	mov	r5, r3
 8019196:	e001      	b.n	801919c <on_reply+0x1c>
 8019198:	6840      	ldr	r0, [r0, #4]
 801919a:	b398      	cbz	r0, 8019204 <on_reply+0x84>
 801919c:	6884      	ldr	r4, [r0, #8]
 801919e:	8b21      	ldrh	r1, [r4, #24]
 80191a0:	4291      	cmp	r1, r2
 80191a2:	d1f9      	bne.n	8019198 <on_reply+0x18>
 80191a4:	2248      	movs	r2, #72	@ 0x48
 80191a6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80191aa:	4668      	mov	r0, sp
 80191ac:	f003 fa67 	bl	801c67e <memcpy>
 80191b0:	f104 0320 	add.w	r3, r4, #32
 80191b4:	cb0c      	ldmia	r3, {r2, r3}
 80191b6:	4620      	mov	r0, r4
 80191b8:	f7f8 fe76 	bl	8011ea8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80191bc:	4680      	mov	r8, r0
 80191be:	b308      	cbz	r0, 8019204 <on_reply+0x84>
 80191c0:	4638      	mov	r0, r7
 80191c2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80191c6:	4632      	mov	r2, r6
 80191c8:	f107 0110 	add.w	r1, r7, #16
 80191cc:	f7f9 fbf0 	bl	80129b0 <ucdr_deserialize_array_uint8_t>
 80191d0:	b930      	cbnz	r0, 80191e0 <on_reply+0x60>
 80191d2:	480f      	ldr	r0, [pc, #60]	@ (8019210 <on_reply+0x90>)
 80191d4:	4641      	mov	r1, r8
 80191d6:	b014      	add	sp, #80	@ 0x50
 80191d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191dc:	f000 b82a 	b.w	8019234 <put_memory>
 80191e0:	2200      	movs	r2, #0
 80191e2:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80191e6:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80191ea:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80191ee:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80191f2:	f000 fc0f 	bl	8019a14 <rmw_uros_epoch_nanos>
 80191f6:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80191fa:	2304      	movs	r3, #4
 80191fc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019200:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019204:	b014      	add	sp, #80	@ 0x50
 8019206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801920a:	bf00      	nop
 801920c:	2000d15c 	.word	0x2000d15c
 8019210:	20011a6c 	.word	0x20011a6c

08019214 <get_memory>:
 8019214:	4603      	mov	r3, r0
 8019216:	6840      	ldr	r0, [r0, #4]
 8019218:	b158      	cbz	r0, 8019232 <get_memory+0x1e>
 801921a:	6842      	ldr	r2, [r0, #4]
 801921c:	605a      	str	r2, [r3, #4]
 801921e:	b10a      	cbz	r2, 8019224 <get_memory+0x10>
 8019220:	2100      	movs	r1, #0
 8019222:	6011      	str	r1, [r2, #0]
 8019224:	681a      	ldr	r2, [r3, #0]
 8019226:	6042      	str	r2, [r0, #4]
 8019228:	b102      	cbz	r2, 801922c <get_memory+0x18>
 801922a:	6010      	str	r0, [r2, #0]
 801922c:	2200      	movs	r2, #0
 801922e:	6002      	str	r2, [r0, #0]
 8019230:	6018      	str	r0, [r3, #0]
 8019232:	4770      	bx	lr

08019234 <put_memory>:
 8019234:	680b      	ldr	r3, [r1, #0]
 8019236:	b10b      	cbz	r3, 801923c <put_memory+0x8>
 8019238:	684a      	ldr	r2, [r1, #4]
 801923a:	605a      	str	r2, [r3, #4]
 801923c:	684a      	ldr	r2, [r1, #4]
 801923e:	b102      	cbz	r2, 8019242 <put_memory+0xe>
 8019240:	6013      	str	r3, [r2, #0]
 8019242:	6803      	ldr	r3, [r0, #0]
 8019244:	428b      	cmp	r3, r1
 8019246:	6843      	ldr	r3, [r0, #4]
 8019248:	bf08      	it	eq
 801924a:	6002      	streq	r2, [r0, #0]
 801924c:	604b      	str	r3, [r1, #4]
 801924e:	b103      	cbz	r3, 8019252 <put_memory+0x1e>
 8019250:	6019      	str	r1, [r3, #0]
 8019252:	2300      	movs	r3, #0
 8019254:	600b      	str	r3, [r1, #0]
 8019256:	6041      	str	r1, [r0, #4]
 8019258:	4770      	bx	lr
 801925a:	bf00      	nop

0801925c <rmw_destroy_client>:
 801925c:	b570      	push	{r4, r5, r6, lr}
 801925e:	b128      	cbz	r0, 801926c <rmw_destroy_client+0x10>
 8019260:	4604      	mov	r4, r0
 8019262:	6800      	ldr	r0, [r0, #0]
 8019264:	460d      	mov	r5, r1
 8019266:	f7f8 ff95 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 801926a:	b910      	cbnz	r0, 8019272 <rmw_destroy_client+0x16>
 801926c:	2401      	movs	r4, #1
 801926e:	4620      	mov	r0, r4
 8019270:	bd70      	pop	{r4, r5, r6, pc}
 8019272:	6863      	ldr	r3, [r4, #4]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d0f9      	beq.n	801926c <rmw_destroy_client+0x10>
 8019278:	2d00      	cmp	r5, #0
 801927a:	d0f7      	beq.n	801926c <rmw_destroy_client+0x10>
 801927c:	6828      	ldr	r0, [r5, #0]
 801927e:	f7f8 ff89 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 8019282:	2800      	cmp	r0, #0
 8019284:	d0f2      	beq.n	801926c <rmw_destroy_client+0x10>
 8019286:	686e      	ldr	r6, [r5, #4]
 8019288:	2e00      	cmp	r6, #0
 801928a:	d0ef      	beq.n	801926c <rmw_destroy_client+0x10>
 801928c:	6864      	ldr	r4, [r4, #4]
 801928e:	6932      	ldr	r2, [r6, #16]
 8019290:	6920      	ldr	r0, [r4, #16]
 8019292:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019296:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801929a:	6819      	ldr	r1, [r3, #0]
 801929c:	f7fa f920 	bl	80134e0 <uxr_buffer_cancel_data>
 80192a0:	4602      	mov	r2, r0
 80192a2:	6920      	ldr	r0, [r4, #16]
 80192a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80192a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80192ac:	f7f8 fef2 	bl	8012094 <run_xrce_session>
 80192b0:	6920      	ldr	r0, [r4, #16]
 80192b2:	6932      	ldr	r2, [r6, #16]
 80192b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192bc:	6819      	ldr	r1, [r3, #0]
 80192be:	f7f9 fcdd 	bl	8012c7c <uxr_buffer_delete_entity>
 80192c2:	4602      	mov	r2, r0
 80192c4:	6920      	ldr	r0, [r4, #16]
 80192c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80192ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80192ce:	f7f8 fee1 	bl	8012094 <run_xrce_session>
 80192d2:	2800      	cmp	r0, #0
 80192d4:	4628      	mov	r0, r5
 80192d6:	bf14      	ite	ne
 80192d8:	2400      	movne	r4, #0
 80192da:	2402      	moveq	r4, #2
 80192dc:	f7f8 fdc2 	bl	8011e64 <rmw_uxrce_fini_client_memory>
 80192e0:	e7c5      	b.n	801926e <rmw_destroy_client+0x12>
 80192e2:	bf00      	nop

080192e4 <rmw_get_implementation_identifier>:
 80192e4:	4b01      	ldr	r3, [pc, #4]	@ (80192ec <rmw_get_implementation_identifier+0x8>)
 80192e6:	6818      	ldr	r0, [r3, #0]
 80192e8:	4770      	bx	lr
 80192ea:	bf00      	nop
 80192ec:	0801e378 	.word	0x0801e378

080192f0 <rmw_create_guard_condition>:
 80192f0:	b538      	push	{r3, r4, r5, lr}
 80192f2:	4605      	mov	r5, r0
 80192f4:	4807      	ldr	r0, [pc, #28]	@ (8019314 <rmw_create_guard_condition+0x24>)
 80192f6:	f7ff ff8d 	bl	8019214 <get_memory>
 80192fa:	b148      	cbz	r0, 8019310 <rmw_create_guard_condition+0x20>
 80192fc:	6884      	ldr	r4, [r0, #8]
 80192fe:	2300      	movs	r3, #0
 8019300:	7423      	strb	r3, [r4, #16]
 8019302:	61e5      	str	r5, [r4, #28]
 8019304:	f7ff ffee 	bl	80192e4 <rmw_get_implementation_identifier>
 8019308:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801930c:	f104 0014 	add.w	r0, r4, #20
 8019310:	bd38      	pop	{r3, r4, r5, pc}
 8019312:	bf00      	nop
 8019314:	20011a0c 	.word	0x20011a0c

08019318 <rmw_destroy_guard_condition>:
 8019318:	b508      	push	{r3, lr}
 801931a:	4b08      	ldr	r3, [pc, #32]	@ (801933c <rmw_destroy_guard_condition+0x24>)
 801931c:	6819      	ldr	r1, [r3, #0]
 801931e:	b911      	cbnz	r1, 8019326 <rmw_destroy_guard_condition+0xe>
 8019320:	e00a      	b.n	8019338 <rmw_destroy_guard_condition+0x20>
 8019322:	6849      	ldr	r1, [r1, #4]
 8019324:	b141      	cbz	r1, 8019338 <rmw_destroy_guard_condition+0x20>
 8019326:	688b      	ldr	r3, [r1, #8]
 8019328:	3314      	adds	r3, #20
 801932a:	4298      	cmp	r0, r3
 801932c:	d1f9      	bne.n	8019322 <rmw_destroy_guard_condition+0xa>
 801932e:	4803      	ldr	r0, [pc, #12]	@ (801933c <rmw_destroy_guard_condition+0x24>)
 8019330:	f7ff ff80 	bl	8019234 <put_memory>
 8019334:	2000      	movs	r0, #0
 8019336:	bd08      	pop	{r3, pc}
 8019338:	2001      	movs	r0, #1
 801933a:	bd08      	pop	{r3, pc}
 801933c:	20011a0c 	.word	0x20011a0c

08019340 <create_topic>:
 8019340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019344:	4605      	mov	r5, r0
 8019346:	b084      	sub	sp, #16
 8019348:	4822      	ldr	r0, [pc, #136]	@ (80193d4 <create_topic+0x94>)
 801934a:	460f      	mov	r7, r1
 801934c:	4616      	mov	r6, r2
 801934e:	f7ff ff61 	bl	8019214 <get_memory>
 8019352:	4604      	mov	r4, r0
 8019354:	2800      	cmp	r0, #0
 8019356:	d039      	beq.n	80193cc <create_topic+0x8c>
 8019358:	692b      	ldr	r3, [r5, #16]
 801935a:	6884      	ldr	r4, [r0, #8]
 801935c:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80193dc <create_topic+0x9c>
 8019360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019364:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019368:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801936c:	1c42      	adds	r2, r0, #1
 801936e:	2102      	movs	r1, #2
 8019370:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8019374:	f7f9 ff46 	bl	8013204 <uxr_object_id>
 8019378:	223c      	movs	r2, #60	@ 0x3c
 801937a:	6120      	str	r0, [r4, #16]
 801937c:	4641      	mov	r1, r8
 801937e:	4638      	mov	r0, r7
 8019380:	f7f8 feee 	bl	8012160 <generate_topic_name>
 8019384:	b1f0      	cbz	r0, 80193c4 <create_topic+0x84>
 8019386:	4f14      	ldr	r7, [pc, #80]	@ (80193d8 <create_topic+0x98>)
 8019388:	4630      	mov	r0, r6
 801938a:	2264      	movs	r2, #100	@ 0x64
 801938c:	4639      	mov	r1, r7
 801938e:	f7f8 feb7 	bl	8012100 <generate_type_name>
 8019392:	b1b8      	cbz	r0, 80193c4 <create_topic+0x84>
 8019394:	6928      	ldr	r0, [r5, #16]
 8019396:	2306      	movs	r3, #6
 8019398:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801939c:	f8cd 8000 	str.w	r8, [sp]
 80193a0:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80193a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80193a8:	6811      	ldr	r1, [r2, #0]
 80193aa:	696b      	ldr	r3, [r5, #20]
 80193ac:	6922      	ldr	r2, [r4, #16]
 80193ae:	f7f9 fce3 	bl	8012d78 <uxr_buffer_create_topic_bin>
 80193b2:	4602      	mov	r2, r0
 80193b4:	6928      	ldr	r0, [r5, #16]
 80193b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80193ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80193be:	f7f8 fe69 	bl	8012094 <run_xrce_session>
 80193c2:	b918      	cbnz	r0, 80193cc <create_topic+0x8c>
 80193c4:	4620      	mov	r0, r4
 80193c6:	f7f8 fd63 	bl	8011e90 <rmw_uxrce_fini_topic_memory>
 80193ca:	2400      	movs	r4, #0
 80193cc:	4620      	mov	r0, r4
 80193ce:	b004      	add	sp, #16
 80193d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193d4:	20011a8c 	.word	0x20011a8c
 80193d8:	20011b08 	.word	0x20011b08
 80193dc:	20011acc 	.word	0x20011acc

080193e0 <destroy_topic>:
 80193e0:	b538      	push	{r3, r4, r5, lr}
 80193e2:	6985      	ldr	r5, [r0, #24]
 80193e4:	b1d5      	cbz	r5, 801941c <destroy_topic+0x3c>
 80193e6:	4604      	mov	r4, r0
 80193e8:	6928      	ldr	r0, [r5, #16]
 80193ea:	6922      	ldr	r2, [r4, #16]
 80193ec:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80193f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80193f4:	6819      	ldr	r1, [r3, #0]
 80193f6:	f7f9 fc41 	bl	8012c7c <uxr_buffer_delete_entity>
 80193fa:	4602      	mov	r2, r0
 80193fc:	6928      	ldr	r0, [r5, #16]
 80193fe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019402:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019406:	f7f8 fe45 	bl	8012094 <run_xrce_session>
 801940a:	2800      	cmp	r0, #0
 801940c:	4620      	mov	r0, r4
 801940e:	bf14      	ite	ne
 8019410:	2400      	movne	r4, #0
 8019412:	2402      	moveq	r4, #2
 8019414:	f7f8 fd3c 	bl	8011e90 <rmw_uxrce_fini_topic_memory>
 8019418:	4620      	mov	r0, r4
 801941a:	bd38      	pop	{r3, r4, r5, pc}
 801941c:	2401      	movs	r4, #1
 801941e:	4620      	mov	r0, r4
 8019420:	bd38      	pop	{r3, r4, r5, pc}
 8019422:	bf00      	nop

08019424 <rmw_send_request>:
 8019424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019428:	4604      	mov	r4, r0
 801942a:	6800      	ldr	r0, [r0, #0]
 801942c:	b08b      	sub	sp, #44	@ 0x2c
 801942e:	460e      	mov	r6, r1
 8019430:	4615      	mov	r5, r2
 8019432:	b128      	cbz	r0, 8019440 <rmw_send_request+0x1c>
 8019434:	4b21      	ldr	r3, [pc, #132]	@ (80194bc <rmw_send_request+0x98>)
 8019436:	6819      	ldr	r1, [r3, #0]
 8019438:	f7e6 feea 	bl	8000210 <strcmp>
 801943c:	2800      	cmp	r0, #0
 801943e:	d139      	bne.n	80194b4 <rmw_send_request+0x90>
 8019440:	6864      	ldr	r4, [r4, #4]
 8019442:	6963      	ldr	r3, [r4, #20]
 8019444:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8019448:	689b      	ldr	r3, [r3, #8]
 801944a:	4798      	blx	r3
 801944c:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019450:	4630      	mov	r0, r6
 8019452:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019456:	4798      	blx	r3
 8019458:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801945c:	9000      	str	r0, [sp, #0]
 801945e:	6922      	ldr	r2, [r4, #16]
 8019460:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8019462:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019466:	ab02      	add	r3, sp, #8
 8019468:	f7fc f8b6 	bl	80155d8 <uxr_prepare_output_stream>
 801946c:	2700      	movs	r7, #0
 801946e:	6028      	str	r0, [r5, #0]
 8019470:	606f      	str	r7, [r5, #4]
 8019472:	b198      	cbz	r0, 801949c <rmw_send_request+0x78>
 8019474:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019478:	a902      	add	r1, sp, #8
 801947a:	4630      	mov	r0, r6
 801947c:	4798      	blx	r3
 801947e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8019482:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019486:	2b01      	cmp	r3, #1
 8019488:	d00c      	beq.n	80194a4 <rmw_send_request+0x80>
 801948a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801948c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019490:	f7fa fdfa 	bl	8014088 <uxr_run_session_until_confirm_delivery>
 8019494:	4638      	mov	r0, r7
 8019496:	b00b      	add	sp, #44	@ 0x2c
 8019498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801949c:	2001      	movs	r0, #1
 801949e:	b00b      	add	sp, #44	@ 0x2c
 80194a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80194a8:	f7fa fa2e 	bl	8013908 <uxr_flash_output_streams>
 80194ac:	4638      	mov	r0, r7
 80194ae:	b00b      	add	sp, #44	@ 0x2c
 80194b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194b4:	200c      	movs	r0, #12
 80194b6:	b00b      	add	sp, #44	@ 0x2c
 80194b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194bc:	0801e378 	.word	0x0801e378

080194c0 <rmw_take_request>:
 80194c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194c4:	4605      	mov	r5, r0
 80194c6:	6800      	ldr	r0, [r0, #0]
 80194c8:	b089      	sub	sp, #36	@ 0x24
 80194ca:	460c      	mov	r4, r1
 80194cc:	4690      	mov	r8, r2
 80194ce:	461e      	mov	r6, r3
 80194d0:	b128      	cbz	r0, 80194de <rmw_take_request+0x1e>
 80194d2:	4b28      	ldr	r3, [pc, #160]	@ (8019574 <rmw_take_request+0xb4>)
 80194d4:	6819      	ldr	r1, [r3, #0]
 80194d6:	f7e6 fe9b 	bl	8000210 <strcmp>
 80194da:	2800      	cmp	r0, #0
 80194dc:	d146      	bne.n	801956c <rmw_take_request+0xac>
 80194de:	b10e      	cbz	r6, 80194e4 <rmw_take_request+0x24>
 80194e0:	2300      	movs	r3, #0
 80194e2:	7033      	strb	r3, [r6, #0]
 80194e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80194e8:	f7f8 fd56 	bl	8011f98 <rmw_uxrce_clean_expired_static_input_buffer>
 80194ec:	4648      	mov	r0, r9
 80194ee:	f7f8 fd2b 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 80194f2:	4607      	mov	r7, r0
 80194f4:	b3b0      	cbz	r0, 8019564 <rmw_take_request+0xa4>
 80194f6:	6885      	ldr	r5, [r0, #8]
 80194f8:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80194fc:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8019500:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8019504:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8019508:	7423      	strb	r3, [r4, #16]
 801950a:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801950e:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8019512:	74e2      	strb	r2, [r4, #19]
 8019514:	f8a4 3011 	strh.w	r3, [r4, #17]
 8019518:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801951c:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8019520:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8019524:	61e1      	str	r1, [r4, #28]
 8019526:	6162      	str	r2, [r4, #20]
 8019528:	61a3      	str	r3, [r4, #24]
 801952a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801952e:	689b      	ldr	r3, [r3, #8]
 8019530:	4798      	blx	r3
 8019532:	6844      	ldr	r4, [r0, #4]
 8019534:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019538:	f105 0110 	add.w	r1, r5, #16
 801953c:	4668      	mov	r0, sp
 801953e:	f7f4 fcf5 	bl	800df2c <ucdr_init_buffer>
 8019542:	68e3      	ldr	r3, [r4, #12]
 8019544:	4641      	mov	r1, r8
 8019546:	4668      	mov	r0, sp
 8019548:	4798      	blx	r3
 801954a:	4639      	mov	r1, r7
 801954c:	4604      	mov	r4, r0
 801954e:	480a      	ldr	r0, [pc, #40]	@ (8019578 <rmw_take_request+0xb8>)
 8019550:	f7ff fe70 	bl	8019234 <put_memory>
 8019554:	b106      	cbz	r6, 8019558 <rmw_take_request+0x98>
 8019556:	7034      	strb	r4, [r6, #0]
 8019558:	f084 0001 	eor.w	r0, r4, #1
 801955c:	b2c0      	uxtb	r0, r0
 801955e:	b009      	add	sp, #36	@ 0x24
 8019560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019564:	2001      	movs	r0, #1
 8019566:	b009      	add	sp, #36	@ 0x24
 8019568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801956c:	200c      	movs	r0, #12
 801956e:	b009      	add	sp, #36	@ 0x24
 8019570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019574:	0801e378 	.word	0x0801e378
 8019578:	20011a6c 	.word	0x20011a6c

0801957c <rmw_send_response>:
 801957c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801957e:	4605      	mov	r5, r0
 8019580:	6800      	ldr	r0, [r0, #0]
 8019582:	b091      	sub	sp, #68	@ 0x44
 8019584:	460c      	mov	r4, r1
 8019586:	4616      	mov	r6, r2
 8019588:	b128      	cbz	r0, 8019596 <rmw_send_response+0x1a>
 801958a:	4b29      	ldr	r3, [pc, #164]	@ (8019630 <rmw_send_response+0xb4>)
 801958c:	6819      	ldr	r1, [r3, #0]
 801958e:	f7e6 fe3f 	bl	8000210 <strcmp>
 8019592:	2800      	cmp	r0, #0
 8019594:	d141      	bne.n	801961a <rmw_send_response+0x9e>
 8019596:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801959a:	9306      	str	r3, [sp, #24]
 801959c:	4623      	mov	r3, r4
 801959e:	9207      	str	r2, [sp, #28]
 80195a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80195a4:	686d      	ldr	r5, [r5, #4]
 80195a6:	789b      	ldrb	r3, [r3, #2]
 80195a8:	68a1      	ldr	r1, [r4, #8]
 80195aa:	f88d 2017 	strb.w	r2, [sp, #23]
 80195ae:	f88d 3016 	strb.w	r3, [sp, #22]
 80195b2:	68e2      	ldr	r2, [r4, #12]
 80195b4:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80195b8:	6860      	ldr	r0, [r4, #4]
 80195ba:	f8ad 3014 	strh.w	r3, [sp, #20]
 80195be:	ab02      	add	r3, sp, #8
 80195c0:	c307      	stmia	r3!, {r0, r1, r2}
 80195c2:	696b      	ldr	r3, [r5, #20]
 80195c4:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80195c6:	68db      	ldr	r3, [r3, #12]
 80195c8:	4798      	blx	r3
 80195ca:	6844      	ldr	r4, [r0, #4]
 80195cc:	4630      	mov	r0, r6
 80195ce:	6923      	ldr	r3, [r4, #16]
 80195d0:	4798      	blx	r3
 80195d2:	f100 0318 	add.w	r3, r0, #24
 80195d6:	6938      	ldr	r0, [r7, #16]
 80195d8:	9300      	str	r3, [sp, #0]
 80195da:	692a      	ldr	r2, [r5, #16]
 80195dc:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80195de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80195e2:	ab08      	add	r3, sp, #32
 80195e4:	f7fb fff8 	bl	80155d8 <uxr_prepare_output_stream>
 80195e8:	b910      	cbnz	r0, 80195f0 <rmw_send_response+0x74>
 80195ea:	2001      	movs	r0, #1
 80195ec:	b011      	add	sp, #68	@ 0x44
 80195ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195f0:	a902      	add	r1, sp, #8
 80195f2:	a808      	add	r0, sp, #32
 80195f4:	f7fd f93c 	bl	8016870 <uxr_serialize_SampleIdentity>
 80195f8:	68a3      	ldr	r3, [r4, #8]
 80195fa:	a908      	add	r1, sp, #32
 80195fc:	4630      	mov	r0, r6
 80195fe:	4798      	blx	r3
 8019600:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8019604:	6938      	ldr	r0, [r7, #16]
 8019606:	2b01      	cmp	r3, #1
 8019608:	d00a      	beq.n	8019620 <rmw_send_response+0xa4>
 801960a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801960c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019610:	f7fa fd3a 	bl	8014088 <uxr_run_session_until_confirm_delivery>
 8019614:	2000      	movs	r0, #0
 8019616:	b011      	add	sp, #68	@ 0x44
 8019618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801961a:	200c      	movs	r0, #12
 801961c:	b011      	add	sp, #68	@ 0x44
 801961e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019620:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019624:	f7fa f970 	bl	8013908 <uxr_flash_output_streams>
 8019628:	2000      	movs	r0, #0
 801962a:	b011      	add	sp, #68	@ 0x44
 801962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801962e:	bf00      	nop
 8019630:	0801e378 	.word	0x0801e378

08019634 <rmw_take_response>:
 8019634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019638:	4604      	mov	r4, r0
 801963a:	6800      	ldr	r0, [r0, #0]
 801963c:	b088      	sub	sp, #32
 801963e:	4688      	mov	r8, r1
 8019640:	4617      	mov	r7, r2
 8019642:	461d      	mov	r5, r3
 8019644:	b120      	cbz	r0, 8019650 <rmw_take_response+0x1c>
 8019646:	4b1e      	ldr	r3, [pc, #120]	@ (80196c0 <rmw_take_response+0x8c>)
 8019648:	6819      	ldr	r1, [r3, #0]
 801964a:	f7e6 fde1 	bl	8000210 <strcmp>
 801964e:	bb78      	cbnz	r0, 80196b0 <rmw_take_response+0x7c>
 8019650:	b10d      	cbz	r5, 8019656 <rmw_take_response+0x22>
 8019652:	2300      	movs	r3, #0
 8019654:	702b      	strb	r3, [r5, #0]
 8019656:	6864      	ldr	r4, [r4, #4]
 8019658:	f7f8 fc9e 	bl	8011f98 <rmw_uxrce_clean_expired_static_input_buffer>
 801965c:	4620      	mov	r0, r4
 801965e:	f7f8 fc73 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019662:	4606      	mov	r6, r0
 8019664:	b340      	cbz	r0, 80196b8 <rmw_take_response+0x84>
 8019666:	6963      	ldr	r3, [r4, #20]
 8019668:	6884      	ldr	r4, [r0, #8]
 801966a:	68db      	ldr	r3, [r3, #12]
 801966c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019670:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019674:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8019678:	4798      	blx	r3
 801967a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801967e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019682:	f104 0110 	add.w	r1, r4, #16
 8019686:	4668      	mov	r0, sp
 8019688:	f7f4 fc50 	bl	800df2c <ucdr_init_buffer>
 801968c:	4639      	mov	r1, r7
 801968e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019692:	4668      	mov	r0, sp
 8019694:	4798      	blx	r3
 8019696:	4631      	mov	r1, r6
 8019698:	4604      	mov	r4, r0
 801969a:	480a      	ldr	r0, [pc, #40]	@ (80196c4 <rmw_take_response+0x90>)
 801969c:	f7ff fdca 	bl	8019234 <put_memory>
 80196a0:	b105      	cbz	r5, 80196a4 <rmw_take_response+0x70>
 80196a2:	702c      	strb	r4, [r5, #0]
 80196a4:	f084 0001 	eor.w	r0, r4, #1
 80196a8:	b2c0      	uxtb	r0, r0
 80196aa:	b008      	add	sp, #32
 80196ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196b0:	200c      	movs	r0, #12
 80196b2:	b008      	add	sp, #32
 80196b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196b8:	2001      	movs	r0, #1
 80196ba:	b008      	add	sp, #32
 80196bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196c0:	0801e378 	.word	0x0801e378
 80196c4:	20011a6c 	.word	0x20011a6c

080196c8 <rmw_trigger_guard_condition>:
 80196c8:	b160      	cbz	r0, 80196e4 <rmw_trigger_guard_condition+0x1c>
 80196ca:	b510      	push	{r4, lr}
 80196cc:	4604      	mov	r4, r0
 80196ce:	6800      	ldr	r0, [r0, #0]
 80196d0:	f7f8 fd60 	bl	8012194 <is_uxrce_rmw_identifier_valid>
 80196d4:	b908      	cbnz	r0, 80196da <rmw_trigger_guard_condition+0x12>
 80196d6:	2001      	movs	r0, #1
 80196d8:	bd10      	pop	{r4, pc}
 80196da:	6863      	ldr	r3, [r4, #4]
 80196dc:	2201      	movs	r2, #1
 80196de:	741a      	strb	r2, [r3, #16]
 80196e0:	2000      	movs	r0, #0
 80196e2:	bd10      	pop	{r4, pc}
 80196e4:	2001      	movs	r0, #1
 80196e6:	4770      	bx	lr

080196e8 <rmw_wait>:
 80196e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196ec:	b089      	sub	sp, #36	@ 0x24
 80196ee:	4605      	mov	r5, r0
 80196f0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80196f2:	460e      	mov	r6, r1
 80196f4:	4698      	mov	r8, r3
 80196f6:	4691      	mov	r9, r2
 80196f8:	2a00      	cmp	r2, #0
 80196fa:	f000 810a 	beq.w	8019912 <rmw_wait+0x22a>
 80196fe:	b16c      	cbz	r4, 801971c <rmw_wait+0x34>
 8019700:	4bae      	ldr	r3, [pc, #696]	@ (80199bc <rmw_wait+0x2d4>)
 8019702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019704:	af04      	add	r7, sp, #16
 8019706:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801970a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801970e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019712:	f7ff fb9d 	bl	8018e50 <rmw_time_equal>
 8019716:	2800      	cmp	r0, #0
 8019718:	f000 8127 	beq.w	801996a <rmw_wait+0x282>
 801971c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8019720:	f7f8 fc3a 	bl	8011f98 <rmw_uxrce_clean_expired_static_input_buffer>
 8019724:	4ba6      	ldr	r3, [pc, #664]	@ (80199c0 <rmw_wait+0x2d8>)
 8019726:	681c      	ldr	r4, [r3, #0]
 8019728:	b14c      	cbz	r4, 801973e <rmw_wait+0x56>
 801972a:	4623      	mov	r3, r4
 801972c:	2100      	movs	r1, #0
 801972e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8019732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019736:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801973a:	2b00      	cmp	r3, #0
 801973c:	d1f7      	bne.n	801972e <rmw_wait+0x46>
 801973e:	f1b9 0f00 	cmp.w	r9, #0
 8019742:	d011      	beq.n	8019768 <rmw_wait+0x80>
 8019744:	f8d9 1000 	ldr.w	r1, [r9]
 8019748:	b171      	cbz	r1, 8019768 <rmw_wait+0x80>
 801974a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801974e:	2300      	movs	r3, #0
 8019750:	2001      	movs	r0, #1
 8019752:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019756:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019758:	6912      	ldr	r2, [r2, #16]
 801975a:	3301      	adds	r3, #1
 801975c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019760:	4299      	cmp	r1, r3
 8019762:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019766:	d1f4      	bne.n	8019752 <rmw_wait+0x6a>
 8019768:	f1b8 0f00 	cmp.w	r8, #0
 801976c:	d011      	beq.n	8019792 <rmw_wait+0xaa>
 801976e:	f8d8 1000 	ldr.w	r1, [r8]
 8019772:	b171      	cbz	r1, 8019792 <rmw_wait+0xaa>
 8019774:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019778:	2300      	movs	r3, #0
 801977a:	2001      	movs	r0, #1
 801977c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019780:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019782:	6912      	ldr	r2, [r2, #16]
 8019784:	3301      	adds	r3, #1
 8019786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801978a:	4299      	cmp	r1, r3
 801978c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019790:	d1f4      	bne.n	801977c <rmw_wait+0x94>
 8019792:	b185      	cbz	r5, 80197b6 <rmw_wait+0xce>
 8019794:	6829      	ldr	r1, [r5, #0]
 8019796:	b171      	cbz	r1, 80197b6 <rmw_wait+0xce>
 8019798:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801979c:	2300      	movs	r3, #0
 801979e:	2001      	movs	r0, #1
 80197a0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80197a4:	6a12      	ldr	r2, [r2, #32]
 80197a6:	6912      	ldr	r2, [r2, #16]
 80197a8:	3301      	adds	r3, #1
 80197aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80197ae:	4299      	cmp	r1, r3
 80197b0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80197b4:	d1f4      	bne.n	80197a0 <rmw_wait+0xb8>
 80197b6:	b34c      	cbz	r4, 801980c <rmw_wait+0x124>
 80197b8:	4622      	mov	r2, r4
 80197ba:	2300      	movs	r3, #0
 80197bc:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80197c0:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80197c4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80197c8:	440b      	add	r3, r1
 80197ca:	b2db      	uxtb	r3, r3
 80197cc:	2a00      	cmp	r2, #0
 80197ce:	d1f5      	bne.n	80197bc <rmw_wait+0xd4>
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	f000 8084 	beq.w	80198de <rmw_wait+0x1f6>
 80197d6:	1c7a      	adds	r2, r7, #1
 80197d8:	d00d      	beq.n	80197f6 <rmw_wait+0x10e>
 80197da:	ee07 7a90 	vmov	s15, r7
 80197de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80197e2:	ee07 3a90 	vmov	s15, r3
 80197e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80197ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80197ee:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80197f2:	ee17 7a90 	vmov	r7, s15
 80197f6:	68a0      	ldr	r0, [r4, #8]
 80197f8:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80197fc:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8019800:	2b00      	cmp	r3, #0
 8019802:	f040 8090 	bne.w	8019926 <rmw_wait+0x23e>
 8019806:	6864      	ldr	r4, [r4, #4]
 8019808:	2c00      	cmp	r4, #0
 801980a:	d1f4      	bne.n	80197f6 <rmw_wait+0x10e>
 801980c:	f1b9 0f00 	cmp.w	r9, #0
 8019810:	f000 80bc 	beq.w	801998c <rmw_wait+0x2a4>
 8019814:	f8d9 7000 	ldr.w	r7, [r9]
 8019818:	2f00      	cmp	r7, #0
 801981a:	f000 808e 	beq.w	801993a <rmw_wait+0x252>
 801981e:	2400      	movs	r4, #0
 8019820:	4627      	mov	r7, r4
 8019822:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019826:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801982a:	f7f8 fb8d 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 801982e:	2800      	cmp	r0, #0
 8019830:	d05f      	beq.n	80198f2 <rmw_wait+0x20a>
 8019832:	f8d9 3000 	ldr.w	r3, [r9]
 8019836:	3401      	adds	r4, #1
 8019838:	42a3      	cmp	r3, r4
 801983a:	f04f 0701 	mov.w	r7, #1
 801983e:	d8f0      	bhi.n	8019822 <rmw_wait+0x13a>
 8019840:	f1b8 0f00 	cmp.w	r8, #0
 8019844:	d012      	beq.n	801986c <rmw_wait+0x184>
 8019846:	f8d8 3000 	ldr.w	r3, [r8]
 801984a:	b17b      	cbz	r3, 801986c <rmw_wait+0x184>
 801984c:	2400      	movs	r4, #0
 801984e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019852:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019856:	f7f8 fb77 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 801985a:	2800      	cmp	r0, #0
 801985c:	d051      	beq.n	8019902 <rmw_wait+0x21a>
 801985e:	f8d8 3000 	ldr.w	r3, [r8]
 8019862:	3401      	adds	r4, #1
 8019864:	42a3      	cmp	r3, r4
 8019866:	f04f 0701 	mov.w	r7, #1
 801986a:	d8f0      	bhi.n	801984e <rmw_wait+0x166>
 801986c:	b1dd      	cbz	r5, 80198a6 <rmw_wait+0x1be>
 801986e:	682b      	ldr	r3, [r5, #0]
 8019870:	b1cb      	cbz	r3, 80198a6 <rmw_wait+0x1be>
 8019872:	2400      	movs	r4, #0
 8019874:	686b      	ldr	r3, [r5, #4]
 8019876:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801987a:	f7f8 fb65 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 801987e:	b158      	cbz	r0, 8019898 <rmw_wait+0x1b0>
 8019880:	682b      	ldr	r3, [r5, #0]
 8019882:	3401      	adds	r4, #1
 8019884:	42a3      	cmp	r3, r4
 8019886:	d969      	bls.n	801995c <rmw_wait+0x274>
 8019888:	686b      	ldr	r3, [r5, #4]
 801988a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801988e:	2701      	movs	r7, #1
 8019890:	f7f8 fb5a 	bl	8011f48 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019894:	2800      	cmp	r0, #0
 8019896:	d1f3      	bne.n	8019880 <rmw_wait+0x198>
 8019898:	e9d5 3200 	ldrd	r3, r2, [r5]
 801989c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80198a0:	3401      	adds	r4, #1
 80198a2:	42a3      	cmp	r3, r4
 80198a4:	d8e6      	bhi.n	8019874 <rmw_wait+0x18c>
 80198a6:	b1a6      	cbz	r6, 80198d2 <rmw_wait+0x1ea>
 80198a8:	6834      	ldr	r4, [r6, #0]
 80198aa:	b194      	cbz	r4, 80198d2 <rmw_wait+0x1ea>
 80198ac:	2300      	movs	r3, #0
 80198ae:	461d      	mov	r5, r3
 80198b0:	e004      	b.n	80198bc <rmw_wait+0x1d4>
 80198b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80198b6:	3301      	adds	r3, #1
 80198b8:	42a3      	cmp	r3, r4
 80198ba:	d00a      	beq.n	80198d2 <rmw_wait+0x1ea>
 80198bc:	6870      	ldr	r0, [r6, #4]
 80198be:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80198c2:	7c0a      	ldrb	r2, [r1, #16]
 80198c4:	2a00      	cmp	r2, #0
 80198c6:	d0f4      	beq.n	80198b2 <rmw_wait+0x1ca>
 80198c8:	3301      	adds	r3, #1
 80198ca:	42a3      	cmp	r3, r4
 80198cc:	740d      	strb	r5, [r1, #16]
 80198ce:	4617      	mov	r7, r2
 80198d0:	d1f4      	bne.n	80198bc <rmw_wait+0x1d4>
 80198d2:	2f00      	cmp	r7, #0
 80198d4:	d03e      	beq.n	8019954 <rmw_wait+0x26c>
 80198d6:	2000      	movs	r0, #0
 80198d8:	b009      	add	sp, #36	@ 0x24
 80198da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198de:	68a0      	ldr	r0, [r4, #8]
 80198e0:	2100      	movs	r1, #0
 80198e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80198e6:	f7fa fb95 	bl	8014014 <uxr_run_session_timeout>
 80198ea:	6864      	ldr	r4, [r4, #4]
 80198ec:	2c00      	cmp	r4, #0
 80198ee:	d1f6      	bne.n	80198de <rmw_wait+0x1f6>
 80198f0:	e78c      	b.n	801980c <rmw_wait+0x124>
 80198f2:	e9d9 3200 	ldrd	r3, r2, [r9]
 80198f6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80198fa:	3401      	adds	r4, #1
 80198fc:	42a3      	cmp	r3, r4
 80198fe:	d890      	bhi.n	8019822 <rmw_wait+0x13a>
 8019900:	e79e      	b.n	8019840 <rmw_wait+0x158>
 8019902:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019906:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801990a:	3401      	adds	r4, #1
 801990c:	429c      	cmp	r4, r3
 801990e:	d39e      	bcc.n	801984e <rmw_wait+0x166>
 8019910:	e7ac      	b.n	801986c <rmw_wait+0x184>
 8019912:	2b00      	cmp	r3, #0
 8019914:	f47f aef3 	bne.w	80196fe <rmw_wait+0x16>
 8019918:	2800      	cmp	r0, #0
 801991a:	f47f aef0 	bne.w	80196fe <rmw_wait+0x16>
 801991e:	2900      	cmp	r1, #0
 8019920:	f47f aeed 	bne.w	80196fe <rmw_wait+0x16>
 8019924:	e7d7      	b.n	80198d6 <rmw_wait+0x1ee>
 8019926:	4639      	mov	r1, r7
 8019928:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801992c:	f7fa fb8c 	bl	8014048 <uxr_run_session_until_data>
 8019930:	6864      	ldr	r4, [r4, #4]
 8019932:	2c00      	cmp	r4, #0
 8019934:	f47f af5f 	bne.w	80197f6 <rmw_wait+0x10e>
 8019938:	e768      	b.n	801980c <rmw_wait+0x124>
 801993a:	f1b8 0f00 	cmp.w	r8, #0
 801993e:	d032      	beq.n	80199a6 <rmw_wait+0x2be>
 8019940:	f8d8 3000 	ldr.w	r3, [r8]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d181      	bne.n	801984c <rmw_wait+0x164>
 8019948:	461f      	mov	r7, r3
 801994a:	2d00      	cmp	r5, #0
 801994c:	d18f      	bne.n	801986e <rmw_wait+0x186>
 801994e:	462f      	mov	r7, r5
 8019950:	2e00      	cmp	r6, #0
 8019952:	d1a9      	bne.n	80198a8 <rmw_wait+0x1c0>
 8019954:	2002      	movs	r0, #2
 8019956:	b009      	add	sp, #36	@ 0x24
 8019958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801995c:	2e00      	cmp	r6, #0
 801995e:	d0ba      	beq.n	80198d6 <rmw_wait+0x1ee>
 8019960:	6834      	ldr	r4, [r6, #0]
 8019962:	2701      	movs	r7, #1
 8019964:	2c00      	cmp	r4, #0
 8019966:	d1a1      	bne.n	80198ac <rmw_wait+0x1c4>
 8019968:	e7b5      	b.n	80198d6 <rmw_wait+0x1ee>
 801996a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801996e:	f7ff fac3 	bl	8018ef8 <rmw_time_total_nsec>
 8019972:	2300      	movs	r3, #0
 8019974:	4a13      	ldr	r2, [pc, #76]	@ (80199c4 <rmw_wait+0x2dc>)
 8019976:	f7e7 f921 	bl	8000bbc <__aeabi_uldivmod>
 801997a:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801997e:	f171 0300 	sbcs.w	r3, r1, #0
 8019982:	4607      	mov	r7, r0
 8019984:	bfa8      	it	ge
 8019986:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801998a:	e6c9      	b.n	8019720 <rmw_wait+0x38>
 801998c:	f1b8 0f00 	cmp.w	r8, #0
 8019990:	d009      	beq.n	80199a6 <rmw_wait+0x2be>
 8019992:	f8d8 3000 	ldr.w	r3, [r8]
 8019996:	464f      	mov	r7, r9
 8019998:	2b00      	cmp	r3, #0
 801999a:	f47f af57 	bne.w	801984c <rmw_wait+0x164>
 801999e:	2d00      	cmp	r5, #0
 80199a0:	f47f af65 	bne.w	801986e <rmw_wait+0x186>
 80199a4:	e7d3      	b.n	801994e <rmw_wait+0x266>
 80199a6:	b17d      	cbz	r5, 80199c8 <rmw_wait+0x2e0>
 80199a8:	682b      	ldr	r3, [r5, #0]
 80199aa:	4647      	mov	r7, r8
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	f47f af60 	bne.w	8019872 <rmw_wait+0x18a>
 80199b2:	2e00      	cmp	r6, #0
 80199b4:	f47f af78 	bne.w	80198a8 <rmw_wait+0x1c0>
 80199b8:	e7cc      	b.n	8019954 <rmw_wait+0x26c>
 80199ba:	bf00      	nop
 80199bc:	0801d3c8 	.word	0x0801d3c8
 80199c0:	20011a5c 	.word	0x20011a5c
 80199c4:	000f4240 	.word	0x000f4240
 80199c8:	2e00      	cmp	r6, #0
 80199ca:	d0c3      	beq.n	8019954 <rmw_wait+0x26c>
 80199cc:	6834      	ldr	r4, [r6, #0]
 80199ce:	462f      	mov	r7, r5
 80199d0:	2c00      	cmp	r4, #0
 80199d2:	f47f af6b 	bne.w	80198ac <rmw_wait+0x1c4>
 80199d6:	e7bd      	b.n	8019954 <rmw_wait+0x26c>

080199d8 <rmw_create_wait_set>:
 80199d8:	b508      	push	{r3, lr}
 80199da:	4803      	ldr	r0, [pc, #12]	@ (80199e8 <rmw_create_wait_set+0x10>)
 80199dc:	f7ff fc1a 	bl	8019214 <get_memory>
 80199e0:	b108      	cbz	r0, 80199e6 <rmw_create_wait_set+0xe>
 80199e2:	6880      	ldr	r0, [r0, #8]
 80199e4:	3010      	adds	r0, #16
 80199e6:	bd08      	pop	{r3, pc}
 80199e8:	20011a9c 	.word	0x20011a9c

080199ec <rmw_destroy_wait_set>:
 80199ec:	b508      	push	{r3, lr}
 80199ee:	4b08      	ldr	r3, [pc, #32]	@ (8019a10 <rmw_destroy_wait_set+0x24>)
 80199f0:	6819      	ldr	r1, [r3, #0]
 80199f2:	b911      	cbnz	r1, 80199fa <rmw_destroy_wait_set+0xe>
 80199f4:	e00a      	b.n	8019a0c <rmw_destroy_wait_set+0x20>
 80199f6:	6849      	ldr	r1, [r1, #4]
 80199f8:	b141      	cbz	r1, 8019a0c <rmw_destroy_wait_set+0x20>
 80199fa:	688b      	ldr	r3, [r1, #8]
 80199fc:	3310      	adds	r3, #16
 80199fe:	4298      	cmp	r0, r3
 8019a00:	d1f9      	bne.n	80199f6 <rmw_destroy_wait_set+0xa>
 8019a02:	4803      	ldr	r0, [pc, #12]	@ (8019a10 <rmw_destroy_wait_set+0x24>)
 8019a04:	f7ff fc16 	bl	8019234 <put_memory>
 8019a08:	2000      	movs	r0, #0
 8019a0a:	bd08      	pop	{r3, pc}
 8019a0c:	2001      	movs	r0, #1
 8019a0e:	bd08      	pop	{r3, pc}
 8019a10:	20011a9c 	.word	0x20011a9c

08019a14 <rmw_uros_epoch_nanos>:
 8019a14:	4b05      	ldr	r3, [pc, #20]	@ (8019a2c <rmw_uros_epoch_nanos+0x18>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	b123      	cbz	r3, 8019a24 <rmw_uros_epoch_nanos+0x10>
 8019a1a:	6898      	ldr	r0, [r3, #8]
 8019a1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019a20:	f7f9 bf68 	b.w	80138f4 <uxr_epoch_nanos>
 8019a24:	2000      	movs	r0, #0
 8019a26:	2100      	movs	r1, #0
 8019a28:	4770      	bx	lr
 8019a2a:	bf00      	nop
 8019a2c:	20011a5c 	.word	0x20011a5c

08019a30 <rosidl_runtime_c__String__init>:
 8019a30:	b510      	push	{r4, lr}
 8019a32:	4604      	mov	r4, r0
 8019a34:	b086      	sub	sp, #24
 8019a36:	b170      	cbz	r0, 8019a56 <rosidl_runtime_c__String__init+0x26>
 8019a38:	a801      	add	r0, sp, #4
 8019a3a:	f7f6 fc77 	bl	801032c <rcutils_get_default_allocator>
 8019a3e:	9b01      	ldr	r3, [sp, #4]
 8019a40:	9905      	ldr	r1, [sp, #20]
 8019a42:	2001      	movs	r0, #1
 8019a44:	4798      	blx	r3
 8019a46:	6020      	str	r0, [r4, #0]
 8019a48:	b128      	cbz	r0, 8019a56 <rosidl_runtime_c__String__init+0x26>
 8019a4a:	2100      	movs	r1, #0
 8019a4c:	2201      	movs	r2, #1
 8019a4e:	7001      	strb	r1, [r0, #0]
 8019a50:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019a54:	4610      	mov	r0, r2
 8019a56:	b006      	add	sp, #24
 8019a58:	bd10      	pop	{r4, pc}
 8019a5a:	bf00      	nop

08019a5c <rosidl_runtime_c__String__fini>:
 8019a5c:	b320      	cbz	r0, 8019aa8 <rosidl_runtime_c__String__fini+0x4c>
 8019a5e:	b510      	push	{r4, lr}
 8019a60:	6803      	ldr	r3, [r0, #0]
 8019a62:	b086      	sub	sp, #24
 8019a64:	4604      	mov	r4, r0
 8019a66:	b173      	cbz	r3, 8019a86 <rosidl_runtime_c__String__fini+0x2a>
 8019a68:	6883      	ldr	r3, [r0, #8]
 8019a6a:	b1f3      	cbz	r3, 8019aaa <rosidl_runtime_c__String__fini+0x4e>
 8019a6c:	a801      	add	r0, sp, #4
 8019a6e:	f7f6 fc5d 	bl	801032c <rcutils_get_default_allocator>
 8019a72:	9b02      	ldr	r3, [sp, #8]
 8019a74:	9905      	ldr	r1, [sp, #20]
 8019a76:	6820      	ldr	r0, [r4, #0]
 8019a78:	4798      	blx	r3
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	e9c4 3300 	strd	r3, r3, [r4]
 8019a80:	60a3      	str	r3, [r4, #8]
 8019a82:	b006      	add	sp, #24
 8019a84:	bd10      	pop	{r4, pc}
 8019a86:	6843      	ldr	r3, [r0, #4]
 8019a88:	b9db      	cbnz	r3, 8019ac2 <rosidl_runtime_c__String__fini+0x66>
 8019a8a:	6883      	ldr	r3, [r0, #8]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d0f8      	beq.n	8019a82 <rosidl_runtime_c__String__fini+0x26>
 8019a90:	4b12      	ldr	r3, [pc, #72]	@ (8019adc <rosidl_runtime_c__String__fini+0x80>)
 8019a92:	4813      	ldr	r0, [pc, #76]	@ (8019ae0 <rosidl_runtime_c__String__fini+0x84>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	2251      	movs	r2, #81	@ 0x51
 8019a98:	68db      	ldr	r3, [r3, #12]
 8019a9a:	2101      	movs	r1, #1
 8019a9c:	f002 fb92 	bl	801c1c4 <fwrite>
 8019aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019aa4:	f002 f84e 	bl	801bb44 <exit>
 8019aa8:	4770      	bx	lr
 8019aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8019adc <rosidl_runtime_c__String__fini+0x80>)
 8019aac:	480d      	ldr	r0, [pc, #52]	@ (8019ae4 <rosidl_runtime_c__String__fini+0x88>)
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	224c      	movs	r2, #76	@ 0x4c
 8019ab2:	68db      	ldr	r3, [r3, #12]
 8019ab4:	2101      	movs	r1, #1
 8019ab6:	f002 fb85 	bl	801c1c4 <fwrite>
 8019aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019abe:	f002 f841 	bl	801bb44 <exit>
 8019ac2:	4b06      	ldr	r3, [pc, #24]	@ (8019adc <rosidl_runtime_c__String__fini+0x80>)
 8019ac4:	4808      	ldr	r0, [pc, #32]	@ (8019ae8 <rosidl_runtime_c__String__fini+0x8c>)
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	224e      	movs	r2, #78	@ 0x4e
 8019aca:	68db      	ldr	r3, [r3, #12]
 8019acc:	2101      	movs	r1, #1
 8019ace:	f002 fb79 	bl	801c1c4 <fwrite>
 8019ad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019ad6:	f002 f835 	bl	801bb44 <exit>
 8019ada:	bf00      	nop
 8019adc:	2000090c 	.word	0x2000090c
 8019ae0:	0801dc48 	.word	0x0801dc48
 8019ae4:	0801dba8 	.word	0x0801dba8
 8019ae8:	0801dbf8 	.word	0x0801dbf8

08019aec <std_msgs__msg__Header__init>:
 8019aec:	b570      	push	{r4, r5, r6, lr}
 8019aee:	4605      	mov	r5, r0
 8019af0:	b1a8      	cbz	r0, 8019b1e <std_msgs__msg__Header__init+0x32>
 8019af2:	f000 f831 	bl	8019b58 <builtin_interfaces__msg__Time__init>
 8019af6:	4604      	mov	r4, r0
 8019af8:	b140      	cbz	r0, 8019b0c <std_msgs__msg__Header__init+0x20>
 8019afa:	f105 0608 	add.w	r6, r5, #8
 8019afe:	4630      	mov	r0, r6
 8019b00:	f7ff ff96 	bl	8019a30 <rosidl_runtime_c__String__init>
 8019b04:	4604      	mov	r4, r0
 8019b06:	b168      	cbz	r0, 8019b24 <std_msgs__msg__Header__init+0x38>
 8019b08:	4620      	mov	r0, r4
 8019b0a:	bd70      	pop	{r4, r5, r6, pc}
 8019b0c:	4628      	mov	r0, r5
 8019b0e:	f000 f827 	bl	8019b60 <builtin_interfaces__msg__Time__fini>
 8019b12:	f105 0008 	add.w	r0, r5, #8
 8019b16:	f7ff ffa1 	bl	8019a5c <rosidl_runtime_c__String__fini>
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	bd70      	pop	{r4, r5, r6, pc}
 8019b1e:	4604      	mov	r4, r0
 8019b20:	4620      	mov	r0, r4
 8019b22:	bd70      	pop	{r4, r5, r6, pc}
 8019b24:	4628      	mov	r0, r5
 8019b26:	f000 f81b 	bl	8019b60 <builtin_interfaces__msg__Time__fini>
 8019b2a:	4630      	mov	r0, r6
 8019b2c:	f7ff ff96 	bl	8019a5c <rosidl_runtime_c__String__fini>
 8019b30:	e7ea      	b.n	8019b08 <std_msgs__msg__Header__init+0x1c>
 8019b32:	bf00      	nop

08019b34 <std_msgs__msg__Header__fini>:
 8019b34:	b148      	cbz	r0, 8019b4a <std_msgs__msg__Header__fini+0x16>
 8019b36:	b510      	push	{r4, lr}
 8019b38:	4604      	mov	r4, r0
 8019b3a:	f000 f811 	bl	8019b60 <builtin_interfaces__msg__Time__fini>
 8019b3e:	f104 0008 	add.w	r0, r4, #8
 8019b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b46:	f7ff bf89 	b.w	8019a5c <rosidl_runtime_c__String__fini>
 8019b4a:	4770      	bx	lr

08019b4c <std_msgs__msg__Int32__init>:
 8019b4c:	3800      	subs	r0, #0
 8019b4e:	bf18      	it	ne
 8019b50:	2001      	movne	r0, #1
 8019b52:	4770      	bx	lr

08019b54 <std_msgs__msg__Int32__fini>:
 8019b54:	4770      	bx	lr
 8019b56:	bf00      	nop

08019b58 <builtin_interfaces__msg__Time__init>:
 8019b58:	3800      	subs	r0, #0
 8019b5a:	bf18      	it	ne
 8019b5c:	2001      	movne	r0, #1
 8019b5e:	4770      	bx	lr

08019b60 <builtin_interfaces__msg__Time__fini>:
 8019b60:	4770      	bx	lr
 8019b62:	bf00      	nop

08019b64 <geometry_msgs__msg__PoseWithCovariance__init>:
 8019b64:	b538      	push	{r3, r4, r5, lr}
 8019b66:	4604      	mov	r4, r0
 8019b68:	b128      	cbz	r0, 8019b76 <geometry_msgs__msg__PoseWithCovariance__init+0x12>
 8019b6a:	f001 f96b 	bl	801ae44 <geometry_msgs__msg__Pose__init>
 8019b6e:	4605      	mov	r5, r0
 8019b70:	b120      	cbz	r0, 8019b7c <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 8019b72:	4628      	mov	r0, r5
 8019b74:	bd38      	pop	{r3, r4, r5, pc}
 8019b76:	4605      	mov	r5, r0
 8019b78:	4628      	mov	r0, r5
 8019b7a:	bd38      	pop	{r3, r4, r5, pc}
 8019b7c:	4620      	mov	r0, r4
 8019b7e:	f001 f985 	bl	801ae8c <geometry_msgs__msg__Pose__fini>
 8019b82:	4628      	mov	r0, r5
 8019b84:	bd38      	pop	{r3, r4, r5, pc}
 8019b86:	bf00      	nop

08019b88 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8019b88:	b108      	cbz	r0, 8019b8e <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 8019b8a:	f001 b97f 	b.w	801ae8c <geometry_msgs__msg__Pose__fini>
 8019b8e:	4770      	bx	lr

08019b90 <geometry_msgs__msg__TwistWithCovariance__init>:
 8019b90:	b538      	push	{r3, r4, r5, lr}
 8019b92:	4604      	mov	r4, r0
 8019b94:	b128      	cbz	r0, 8019ba2 <geometry_msgs__msg__TwistWithCovariance__init+0x12>
 8019b96:	f7f8 fcc5 	bl	8012524 <geometry_msgs__msg__Twist__init>
 8019b9a:	4605      	mov	r5, r0
 8019b9c:	b120      	cbz	r0, 8019ba8 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 8019b9e:	4628      	mov	r0, r5
 8019ba0:	bd38      	pop	{r3, r4, r5, pc}
 8019ba2:	4605      	mov	r5, r0
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	bd38      	pop	{r3, r4, r5, pc}
 8019ba8:	4620      	mov	r0, r4
 8019baa:	f7f8 fcdf 	bl	801256c <geometry_msgs__msg__Twist__fini>
 8019bae:	4628      	mov	r0, r5
 8019bb0:	bd38      	pop	{r3, r4, r5, pc}
 8019bb2:	bf00      	nop

08019bb4 <geometry_msgs__msg__TwistWithCovariance__fini>:
 8019bb4:	b108      	cbz	r0, 8019bba <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 8019bb6:	f7f8 bcd9 	b.w	801256c <geometry_msgs__msg__Twist__fini>
 8019bba:	4770      	bx	lr

08019bbc <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8019bbc:	f001 b942 	b.w	801ae44 <geometry_msgs__msg__Pose__init>

08019bc0 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 8019bc0:	f001 b964 	b.w	801ae8c <geometry_msgs__msg__Pose__fini>

08019bc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8019bc4:	b510      	push	{r4, lr}
 8019bc6:	f001 f989 	bl	801aedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019bca:	4c07      	ldr	r4, [pc, #28]	@ (8019be8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8019bcc:	60e0      	str	r0, [r4, #12]
 8019bce:	f000 f815 	bl	8019bfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019bd2:	4b06      	ldr	r3, [pc, #24]	@ (8019bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8019bd4:	64a0      	str	r0, [r4, #72]	@ 0x48
 8019bd6:	681a      	ldr	r2, [r3, #0]
 8019bd8:	b10a      	cbz	r2, 8019bde <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8019bda:	4804      	ldr	r0, [pc, #16]	@ (8019bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8019bdc:	bd10      	pop	{r4, pc}
 8019bde:	4a04      	ldr	r2, [pc, #16]	@ (8019bf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8019be0:	4802      	ldr	r0, [pc, #8]	@ (8019bec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8019be2:	6812      	ldr	r2, [r2, #0]
 8019be4:	601a      	str	r2, [r3, #0]
 8019be6:	bd10      	pop	{r4, pc}
 8019be8:	20000648 	.word	0x20000648
 8019bec:	200006c0 	.word	0x200006c0
 8019bf0:	20000310 	.word	0x20000310

08019bf4 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8019bf4:	f001 b958 	b.w	801aea8 <geometry_msgs__msg__Quaternion__init>

08019bf8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8019bf8:	f001 b96a 	b.w	801aed0 <geometry_msgs__msg__Quaternion__fini>

08019bfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8019bfc:	4b04      	ldr	r3, [pc, #16]	@ (8019c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8019bfe:	681a      	ldr	r2, [r3, #0]
 8019c00:	b10a      	cbz	r2, 8019c06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8019c02:	4803      	ldr	r0, [pc, #12]	@ (8019c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8019c04:	4770      	bx	lr
 8019c06:	4a03      	ldr	r2, [pc, #12]	@ (8019c14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8019c08:	4801      	ldr	r0, [pc, #4]	@ (8019c10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8019c0a:	6812      	ldr	r2, [r2, #0]
 8019c0c:	601a      	str	r2, [r3, #0]
 8019c0e:	4770      	bx	lr
 8019c10:	200007bc 	.word	0x200007bc
 8019c14:	20000310 	.word	0x20000310

08019c18 <get_serialized_size_geometry_msgs__msg__Pose>:
 8019c18:	b570      	push	{r4, r5, r6, lr}
 8019c1a:	4604      	mov	r4, r0
 8019c1c:	b148      	cbz	r0, 8019c32 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8019c1e:	460d      	mov	r5, r1
 8019c20:	f001 f96a 	bl	801aef8 <get_serialized_size_geometry_msgs__msg__Point>
 8019c24:	4606      	mov	r6, r0
 8019c26:	1829      	adds	r1, r5, r0
 8019c28:	f104 0018 	add.w	r0, r4, #24
 8019c2c:	f000 f868 	bl	8019d00 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8019c30:	4430      	add	r0, r6
 8019c32:	bd70      	pop	{r4, r5, r6, pc}

08019c34 <_Pose__cdr_deserialize>:
 8019c34:	b570      	push	{r4, r5, r6, lr}
 8019c36:	460c      	mov	r4, r1
 8019c38:	b189      	cbz	r1, 8019c5e <_Pose__cdr_deserialize+0x2a>
 8019c3a:	4605      	mov	r5, r0
 8019c3c:	f001 f9e8 	bl	801b010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019c40:	6843      	ldr	r3, [r0, #4]
 8019c42:	4621      	mov	r1, r4
 8019c44:	68db      	ldr	r3, [r3, #12]
 8019c46:	4628      	mov	r0, r5
 8019c48:	4798      	blx	r3
 8019c4a:	f000 f90d 	bl	8019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019c4e:	6843      	ldr	r3, [r0, #4]
 8019c50:	f104 0118 	add.w	r1, r4, #24
 8019c54:	4628      	mov	r0, r5
 8019c56:	68db      	ldr	r3, [r3, #12]
 8019c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c5c:	4718      	bx	r3
 8019c5e:	4608      	mov	r0, r1
 8019c60:	bd70      	pop	{r4, r5, r6, pc}
 8019c62:	bf00      	nop

08019c64 <_Pose__cdr_serialize>:
 8019c64:	b510      	push	{r4, lr}
 8019c66:	b082      	sub	sp, #8
 8019c68:	9101      	str	r1, [sp, #4]
 8019c6a:	b190      	cbz	r0, 8019c92 <_Pose__cdr_serialize+0x2e>
 8019c6c:	4604      	mov	r4, r0
 8019c6e:	f001 f9cf 	bl	801b010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8019c72:	6843      	ldr	r3, [r0, #4]
 8019c74:	9901      	ldr	r1, [sp, #4]
 8019c76:	689b      	ldr	r3, [r3, #8]
 8019c78:	4620      	mov	r0, r4
 8019c7a:	4798      	blx	r3
 8019c7c:	f000 f8f4 	bl	8019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8019c80:	6843      	ldr	r3, [r0, #4]
 8019c82:	9901      	ldr	r1, [sp, #4]
 8019c84:	689b      	ldr	r3, [r3, #8]
 8019c86:	f104 0018 	add.w	r0, r4, #24
 8019c8a:	b002      	add	sp, #8
 8019c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c90:	4718      	bx	r3
 8019c92:	b002      	add	sp, #8
 8019c94:	bd10      	pop	{r4, pc}
 8019c96:	bf00      	nop

08019c98 <_Pose__get_serialized_size>:
 8019c98:	b538      	push	{r3, r4, r5, lr}
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	b148      	cbz	r0, 8019cb2 <_Pose__get_serialized_size+0x1a>
 8019c9e:	2100      	movs	r1, #0
 8019ca0:	f001 f92a 	bl	801aef8 <get_serialized_size_geometry_msgs__msg__Point>
 8019ca4:	4605      	mov	r5, r0
 8019ca6:	4601      	mov	r1, r0
 8019ca8:	f104 0018 	add.w	r0, r4, #24
 8019cac:	f000 f828 	bl	8019d00 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8019cb0:	4428      	add	r0, r5
 8019cb2:	bd38      	pop	{r3, r4, r5, pc}

08019cb4 <_Pose__max_serialized_size>:
 8019cb4:	b510      	push	{r4, lr}
 8019cb6:	b082      	sub	sp, #8
 8019cb8:	2301      	movs	r3, #1
 8019cba:	2100      	movs	r1, #0
 8019cbc:	f10d 0007 	add.w	r0, sp, #7
 8019cc0:	f88d 3007 	strb.w	r3, [sp, #7]
 8019cc4:	f001 f988 	bl	801afd8 <max_serialized_size_geometry_msgs__msg__Point>
 8019cc8:	4604      	mov	r4, r0
 8019cca:	4601      	mov	r1, r0
 8019ccc:	f10d 0007 	add.w	r0, sp, #7
 8019cd0:	f000 f8a8 	bl	8019e24 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8019cd4:	4420      	add	r0, r4
 8019cd6:	b002      	add	sp, #8
 8019cd8:	bd10      	pop	{r4, pc}
 8019cda:	bf00      	nop

08019cdc <max_serialized_size_geometry_msgs__msg__Pose>:
 8019cdc:	2301      	movs	r3, #1
 8019cde:	b570      	push	{r4, r5, r6, lr}
 8019ce0:	7003      	strb	r3, [r0, #0]
 8019ce2:	4605      	mov	r5, r0
 8019ce4:	460e      	mov	r6, r1
 8019ce6:	f001 f977 	bl	801afd8 <max_serialized_size_geometry_msgs__msg__Point>
 8019cea:	4604      	mov	r4, r0
 8019cec:	1831      	adds	r1, r6, r0
 8019cee:	4628      	mov	r0, r5
 8019cf0:	f000 f898 	bl	8019e24 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8019cf4:	4420      	add	r0, r4
 8019cf6:	bd70      	pop	{r4, r5, r6, pc}

08019cf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8019cf8:	4800      	ldr	r0, [pc, #0]	@ (8019cfc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8019cfa:	4770      	bx	lr
 8019cfc:	200007c8 	.word	0x200007c8

08019d00 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8019d00:	b1f0      	cbz	r0, 8019d40 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8019d02:	b570      	push	{r4, r5, r6, lr}
 8019d04:	460d      	mov	r5, r1
 8019d06:	4628      	mov	r0, r5
 8019d08:	2108      	movs	r1, #8
 8019d0a:	f7f4 f913 	bl	800df34 <ucdr_alignment>
 8019d0e:	f105 0308 	add.w	r3, r5, #8
 8019d12:	181e      	adds	r6, r3, r0
 8019d14:	2108      	movs	r1, #8
 8019d16:	4630      	mov	r0, r6
 8019d18:	f7f4 f90c 	bl	800df34 <ucdr_alignment>
 8019d1c:	f100 0408 	add.w	r4, r0, #8
 8019d20:	4434      	add	r4, r6
 8019d22:	2108      	movs	r1, #8
 8019d24:	4620      	mov	r0, r4
 8019d26:	f7f4 f905 	bl	800df34 <ucdr_alignment>
 8019d2a:	3008      	adds	r0, #8
 8019d2c:	4404      	add	r4, r0
 8019d2e:	2108      	movs	r1, #8
 8019d30:	4620      	mov	r0, r4
 8019d32:	f7f4 f8ff 	bl	800df34 <ucdr_alignment>
 8019d36:	f1c5 0508 	rsb	r5, r5, #8
 8019d3a:	4428      	add	r0, r5
 8019d3c:	4420      	add	r0, r4
 8019d3e:	bd70      	pop	{r4, r5, r6, pc}
 8019d40:	4770      	bx	lr
 8019d42:	bf00      	nop

08019d44 <_Quaternion__cdr_deserialize>:
 8019d44:	b538      	push	{r3, r4, r5, lr}
 8019d46:	460c      	mov	r4, r1
 8019d48:	b199      	cbz	r1, 8019d72 <_Quaternion__cdr_deserialize+0x2e>
 8019d4a:	4605      	mov	r5, r0
 8019d4c:	f7f3 ff06 	bl	800db5c <ucdr_deserialize_double>
 8019d50:	f104 0108 	add.w	r1, r4, #8
 8019d54:	4628      	mov	r0, r5
 8019d56:	f7f3 ff01 	bl	800db5c <ucdr_deserialize_double>
 8019d5a:	f104 0110 	add.w	r1, r4, #16
 8019d5e:	4628      	mov	r0, r5
 8019d60:	f7f3 fefc 	bl	800db5c <ucdr_deserialize_double>
 8019d64:	f104 0118 	add.w	r1, r4, #24
 8019d68:	4628      	mov	r0, r5
 8019d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d6e:	f7f3 bef5 	b.w	800db5c <ucdr_deserialize_double>
 8019d72:	4608      	mov	r0, r1
 8019d74:	bd38      	pop	{r3, r4, r5, pc}
 8019d76:	bf00      	nop

08019d78 <_Quaternion__cdr_serialize>:
 8019d78:	b1c0      	cbz	r0, 8019dac <_Quaternion__cdr_serialize+0x34>
 8019d7a:	b538      	push	{r3, r4, r5, lr}
 8019d7c:	ed90 0b00 	vldr	d0, [r0]
 8019d80:	460d      	mov	r5, r1
 8019d82:	4604      	mov	r4, r0
 8019d84:	4608      	mov	r0, r1
 8019d86:	f7f3 fd47 	bl	800d818 <ucdr_serialize_double>
 8019d8a:	ed94 0b02 	vldr	d0, [r4, #8]
 8019d8e:	4628      	mov	r0, r5
 8019d90:	f7f3 fd42 	bl	800d818 <ucdr_serialize_double>
 8019d94:	ed94 0b04 	vldr	d0, [r4, #16]
 8019d98:	4628      	mov	r0, r5
 8019d9a:	f7f3 fd3d 	bl	800d818 <ucdr_serialize_double>
 8019d9e:	ed94 0b06 	vldr	d0, [r4, #24]
 8019da2:	4628      	mov	r0, r5
 8019da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019da8:	f7f3 bd36 	b.w	800d818 <ucdr_serialize_double>
 8019dac:	4770      	bx	lr
 8019dae:	bf00      	nop

08019db0 <_Quaternion__get_serialized_size>:
 8019db0:	b1d0      	cbz	r0, 8019de8 <_Quaternion__get_serialized_size+0x38>
 8019db2:	b538      	push	{r3, r4, r5, lr}
 8019db4:	2108      	movs	r1, #8
 8019db6:	2000      	movs	r0, #0
 8019db8:	f7f4 f8bc 	bl	800df34 <ucdr_alignment>
 8019dbc:	f100 0508 	add.w	r5, r0, #8
 8019dc0:	2108      	movs	r1, #8
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	f7f4 f8b6 	bl	800df34 <ucdr_alignment>
 8019dc8:	f100 0408 	add.w	r4, r0, #8
 8019dcc:	442c      	add	r4, r5
 8019dce:	2108      	movs	r1, #8
 8019dd0:	4620      	mov	r0, r4
 8019dd2:	f7f4 f8af 	bl	800df34 <ucdr_alignment>
 8019dd6:	3008      	adds	r0, #8
 8019dd8:	4404      	add	r4, r0
 8019dda:	2108      	movs	r1, #8
 8019ddc:	4620      	mov	r0, r4
 8019dde:	f7f4 f8a9 	bl	800df34 <ucdr_alignment>
 8019de2:	3008      	adds	r0, #8
 8019de4:	4420      	add	r0, r4
 8019de6:	bd38      	pop	{r3, r4, r5, pc}
 8019de8:	4770      	bx	lr
 8019dea:	bf00      	nop

08019dec <_Quaternion__max_serialized_size>:
 8019dec:	b538      	push	{r3, r4, r5, lr}
 8019dee:	2108      	movs	r1, #8
 8019df0:	2000      	movs	r0, #0
 8019df2:	f7f4 f89f 	bl	800df34 <ucdr_alignment>
 8019df6:	f100 0508 	add.w	r5, r0, #8
 8019dfa:	2108      	movs	r1, #8
 8019dfc:	4628      	mov	r0, r5
 8019dfe:	f7f4 f899 	bl	800df34 <ucdr_alignment>
 8019e02:	f100 0408 	add.w	r4, r0, #8
 8019e06:	442c      	add	r4, r5
 8019e08:	2108      	movs	r1, #8
 8019e0a:	4620      	mov	r0, r4
 8019e0c:	f7f4 f892 	bl	800df34 <ucdr_alignment>
 8019e10:	3008      	adds	r0, #8
 8019e12:	4404      	add	r4, r0
 8019e14:	2108      	movs	r1, #8
 8019e16:	4620      	mov	r0, r4
 8019e18:	f7f4 f88c 	bl	800df34 <ucdr_alignment>
 8019e1c:	3008      	adds	r0, #8
 8019e1e:	4420      	add	r0, r4
 8019e20:	bd38      	pop	{r3, r4, r5, pc}
 8019e22:	bf00      	nop

08019e24 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8019e24:	b570      	push	{r4, r5, r6, lr}
 8019e26:	2301      	movs	r3, #1
 8019e28:	460c      	mov	r4, r1
 8019e2a:	7003      	strb	r3, [r0, #0]
 8019e2c:	2108      	movs	r1, #8
 8019e2e:	4620      	mov	r0, r4
 8019e30:	f7f4 f880 	bl	800df34 <ucdr_alignment>
 8019e34:	f104 0508 	add.w	r5, r4, #8
 8019e38:	1946      	adds	r6, r0, r5
 8019e3a:	2108      	movs	r1, #8
 8019e3c:	4630      	mov	r0, r6
 8019e3e:	f7f4 f879 	bl	800df34 <ucdr_alignment>
 8019e42:	f100 0508 	add.w	r5, r0, #8
 8019e46:	4435      	add	r5, r6
 8019e48:	2108      	movs	r1, #8
 8019e4a:	4628      	mov	r0, r5
 8019e4c:	f7f4 f872 	bl	800df34 <ucdr_alignment>
 8019e50:	3008      	adds	r0, #8
 8019e52:	4405      	add	r5, r0
 8019e54:	2108      	movs	r1, #8
 8019e56:	4628      	mov	r0, r5
 8019e58:	f7f4 f86c 	bl	800df34 <ucdr_alignment>
 8019e5c:	f1c4 0408 	rsb	r4, r4, #8
 8019e60:	4420      	add	r0, r4
 8019e62:	4428      	add	r0, r5
 8019e64:	bd70      	pop	{r4, r5, r6, pc}
 8019e66:	bf00      	nop

08019e68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8019e68:	4800      	ldr	r0, [pc, #0]	@ (8019e6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8019e6a:	4770      	bx	lr
 8019e6c:	200007f0 	.word	0x200007f0

08019e70 <ucdr_serialize_string>:
 8019e70:	b510      	push	{r4, lr}
 8019e72:	b082      	sub	sp, #8
 8019e74:	4604      	mov	r4, r0
 8019e76:	4608      	mov	r0, r1
 8019e78:	9101      	str	r1, [sp, #4]
 8019e7a:	f7e6 f9d3 	bl	8000224 <strlen>
 8019e7e:	9901      	ldr	r1, [sp, #4]
 8019e80:	1c42      	adds	r2, r0, #1
 8019e82:	4620      	mov	r0, r4
 8019e84:	b002      	add	sp, #8
 8019e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e8a:	f7f8 be9f 	b.w	8012bcc <ucdr_serialize_sequence_char>
 8019e8e:	bf00      	nop

08019e90 <ucdr_deserialize_string>:
 8019e90:	b500      	push	{lr}
 8019e92:	b083      	sub	sp, #12
 8019e94:	ab01      	add	r3, sp, #4
 8019e96:	f7f8 feab 	bl	8012bf0 <ucdr_deserialize_sequence_char>
 8019e9a:	b003      	add	sp, #12
 8019e9c:	f85d fb04 	ldr.w	pc, [sp], #4

08019ea0 <uxr_init_input_best_effort_stream>:
 8019ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ea4:	8003      	strh	r3, [r0, #0]
 8019ea6:	4770      	bx	lr

08019ea8 <uxr_reset_input_best_effort_stream>:
 8019ea8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019eac:	8003      	strh	r3, [r0, #0]
 8019eae:	4770      	bx	lr

08019eb0 <uxr_receive_best_effort_message>:
 8019eb0:	b538      	push	{r3, r4, r5, lr}
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	8800      	ldrh	r0, [r0, #0]
 8019eb6:	460d      	mov	r5, r1
 8019eb8:	f000 fd42 	bl	801a940 <uxr_seq_num_cmp>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019ec4:	bfb8      	it	lt
 8019ec6:	8025      	strhlt	r5, [r4, #0]
 8019ec8:	bd38      	pop	{r3, r4, r5, pc}
 8019eca:	bf00      	nop

08019ecc <on_full_input_buffer>:
 8019ecc:	b570      	push	{r4, r5, r6, lr}
 8019ece:	4605      	mov	r5, r0
 8019ed0:	460c      	mov	r4, r1
 8019ed2:	682b      	ldr	r3, [r5, #0]
 8019ed4:	6809      	ldr	r1, [r1, #0]
 8019ed6:	8920      	ldrh	r0, [r4, #8]
 8019ed8:	6862      	ldr	r2, [r4, #4]
 8019eda:	fbb2 f2f0 	udiv	r2, r2, r0
 8019ede:	eba3 0c01 	sub.w	ip, r3, r1
 8019ee2:	fbbc fcf2 	udiv	ip, ip, r2
 8019ee6:	f10c 0c01 	add.w	ip, ip, #1
 8019eea:	fa1f f38c 	uxth.w	r3, ip
 8019eee:	fbb3 f6f0 	udiv	r6, r3, r0
 8019ef2:	fb00 3316 	mls	r3, r0, r6, r3
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	fb02 f303 	mul.w	r3, r2, r3
 8019efc:	1d18      	adds	r0, r3, #4
 8019efe:	4408      	add	r0, r1
 8019f00:	7d26      	ldrb	r6, [r4, #20]
 8019f02:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019f06:	b116      	cbz	r6, 8019f0e <on_full_input_buffer+0x42>
 8019f08:	2600      	movs	r6, #0
 8019f0a:	f840 6c04 	str.w	r6, [r0, #-4]
 8019f0e:	2a03      	cmp	r2, #3
 8019f10:	d801      	bhi.n	8019f16 <on_full_input_buffer+0x4a>
 8019f12:	2001      	movs	r0, #1
 8019f14:	bd70      	pop	{r4, r5, r6, pc}
 8019f16:	3308      	adds	r3, #8
 8019f18:	4419      	add	r1, r3
 8019f1a:	4628      	mov	r0, r5
 8019f1c:	692b      	ldr	r3, [r5, #16]
 8019f1e:	3a04      	subs	r2, #4
 8019f20:	f7f3 fffc 	bl	800df1c <ucdr_init_buffer_origin>
 8019f24:	4628      	mov	r0, r5
 8019f26:	4903      	ldr	r1, [pc, #12]	@ (8019f34 <on_full_input_buffer+0x68>)
 8019f28:	4622      	mov	r2, r4
 8019f2a:	f7f3 ffd3 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 8019f2e:	2000      	movs	r0, #0
 8019f30:	bd70      	pop	{r4, r5, r6, pc}
 8019f32:	bf00      	nop
 8019f34:	08019ecd 	.word	0x08019ecd

08019f38 <uxr_init_input_reliable_stream>:
 8019f38:	b500      	push	{lr}
 8019f3a:	e9c0 1200 	strd	r1, r2, [r0]
 8019f3e:	f04f 0e00 	mov.w	lr, #0
 8019f42:	9a01      	ldr	r2, [sp, #4]
 8019f44:	8103      	strh	r3, [r0, #8]
 8019f46:	6102      	str	r2, [r0, #16]
 8019f48:	f880 e014 	strb.w	lr, [r0, #20]
 8019f4c:	b1d3      	cbz	r3, 8019f84 <uxr_init_input_reliable_stream+0x4c>
 8019f4e:	f8c1 e000 	str.w	lr, [r1]
 8019f52:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019f56:	f1bc 0f01 	cmp.w	ip, #1
 8019f5a:	d913      	bls.n	8019f84 <uxr_init_input_reliable_stream+0x4c>
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	fbb3 f1fc 	udiv	r1, r3, ip
 8019f62:	fb0c 3111 	mls	r1, ip, r1, r3
 8019f66:	b289      	uxth	r1, r1
 8019f68:	6842      	ldr	r2, [r0, #4]
 8019f6a:	fbb2 f2fc 	udiv	r2, r2, ip
 8019f6e:	fb01 f202 	mul.w	r2, r1, r2
 8019f72:	6801      	ldr	r1, [r0, #0]
 8019f74:	f841 e002 	str.w	lr, [r1, r2]
 8019f78:	3301      	adds	r3, #1
 8019f7a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019f7e:	b29b      	uxth	r3, r3
 8019f80:	459c      	cmp	ip, r3
 8019f82:	d8ec      	bhi.n	8019f5e <uxr_init_input_reliable_stream+0x26>
 8019f84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019f88:	60c3      	str	r3, [r0, #12]
 8019f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f8e:	bf00      	nop

08019f90 <uxr_reset_input_reliable_stream>:
 8019f90:	8901      	ldrh	r1, [r0, #8]
 8019f92:	b1e9      	cbz	r1, 8019fd0 <uxr_reset_input_reliable_stream+0x40>
 8019f94:	f04f 0c00 	mov.w	ip, #0
 8019f98:	b500      	push	{lr}
 8019f9a:	4663      	mov	r3, ip
 8019f9c:	46e6      	mov	lr, ip
 8019f9e:	fbb3 f2f1 	udiv	r2, r3, r1
 8019fa2:	fb01 3312 	mls	r3, r1, r2, r3
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	6842      	ldr	r2, [r0, #4]
 8019faa:	fbb2 f2f1 	udiv	r2, r2, r1
 8019fae:	fb02 f303 	mul.w	r3, r2, r3
 8019fb2:	6802      	ldr	r2, [r0, #0]
 8019fb4:	f842 e003 	str.w	lr, [r2, r3]
 8019fb8:	f10c 0c01 	add.w	ip, ip, #1
 8019fbc:	8901      	ldrh	r1, [r0, #8]
 8019fbe:	fa1f f38c 	uxth.w	r3, ip
 8019fc2:	4299      	cmp	r1, r3
 8019fc4:	d8eb      	bhi.n	8019f9e <uxr_reset_input_reliable_stream+0xe>
 8019fc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fca:	60c3      	str	r3, [r0, #12]
 8019fcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019fd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fd4:	60c3      	str	r3, [r0, #12]
 8019fd6:	4770      	bx	lr

08019fd8 <uxr_receive_reliable_message>:
 8019fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fdc:	4604      	mov	r4, r0
 8019fde:	460d      	mov	r5, r1
 8019fe0:	8901      	ldrh	r1, [r0, #8]
 8019fe2:	8980      	ldrh	r0, [r0, #12]
 8019fe4:	4690      	mov	r8, r2
 8019fe6:	461f      	mov	r7, r3
 8019fe8:	f000 fca2 	bl	801a930 <uxr_seq_num_add>
 8019fec:	4629      	mov	r1, r5
 8019fee:	4606      	mov	r6, r0
 8019ff0:	89a0      	ldrh	r0, [r4, #12]
 8019ff2:	f000 fca5 	bl	801a940 <uxr_seq_num_cmp>
 8019ff6:	2800      	cmp	r0, #0
 8019ff8:	db0a      	blt.n	801a010 <uxr_receive_reliable_message+0x38>
 8019ffa:	2600      	movs	r6, #0
 8019ffc:	89e0      	ldrh	r0, [r4, #14]
 8019ffe:	4629      	mov	r1, r5
 801a000:	f000 fc9e 	bl	801a940 <uxr_seq_num_cmp>
 801a004:	2800      	cmp	r0, #0
 801a006:	da00      	bge.n	801a00a <uxr_receive_reliable_message+0x32>
 801a008:	81e5      	strh	r5, [r4, #14]
 801a00a:	4630      	mov	r0, r6
 801a00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a010:	4630      	mov	r0, r6
 801a012:	4629      	mov	r1, r5
 801a014:	f000 fc94 	bl	801a940 <uxr_seq_num_cmp>
 801a018:	2800      	cmp	r0, #0
 801a01a:	dbee      	blt.n	8019ffa <uxr_receive_reliable_message+0x22>
 801a01c:	6923      	ldr	r3, [r4, #16]
 801a01e:	4640      	mov	r0, r8
 801a020:	4798      	blx	r3
 801a022:	2101      	movs	r1, #1
 801a024:	4681      	mov	r9, r0
 801a026:	89a0      	ldrh	r0, [r4, #12]
 801a028:	f000 fc82 	bl	801a930 <uxr_seq_num_add>
 801a02c:	f1b9 0f00 	cmp.w	r9, #0
 801a030:	d101      	bne.n	801a036 <uxr_receive_reliable_message+0x5e>
 801a032:	4285      	cmp	r5, r0
 801a034:	d047      	beq.n	801a0c6 <uxr_receive_reliable_message+0xee>
 801a036:	8922      	ldrh	r2, [r4, #8]
 801a038:	fbb5 f0f2 	udiv	r0, r5, r2
 801a03c:	fb02 5010 	mls	r0, r2, r0, r5
 801a040:	b280      	uxth	r0, r0
 801a042:	6863      	ldr	r3, [r4, #4]
 801a044:	fbb3 f3f2 	udiv	r3, r3, r2
 801a048:	fb00 f303 	mul.w	r3, r0, r3
 801a04c:	6820      	ldr	r0, [r4, #0]
 801a04e:	3304      	adds	r3, #4
 801a050:	4418      	add	r0, r3
 801a052:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d1cf      	bne.n	8019ffa <uxr_receive_reliable_message+0x22>
 801a05a:	4641      	mov	r1, r8
 801a05c:	463a      	mov	r2, r7
 801a05e:	f002 fb0e 	bl	801c67e <memcpy>
 801a062:	8921      	ldrh	r1, [r4, #8]
 801a064:	fbb5 f2f1 	udiv	r2, r5, r1
 801a068:	fb01 5212 	mls	r2, r1, r2, r5
 801a06c:	b292      	uxth	r2, r2
 801a06e:	6863      	ldr	r3, [r4, #4]
 801a070:	fbb3 f3f1 	udiv	r3, r3, r1
 801a074:	fb02 f303 	mul.w	r3, r2, r3
 801a078:	6822      	ldr	r2, [r4, #0]
 801a07a:	50d7      	str	r7, [r2, r3]
 801a07c:	9a08      	ldr	r2, [sp, #32]
 801a07e:	2301      	movs	r3, #1
 801a080:	7013      	strb	r3, [r2, #0]
 801a082:	f1b9 0f00 	cmp.w	r9, #0
 801a086:	d0b8      	beq.n	8019ffa <uxr_receive_reliable_message+0x22>
 801a088:	89a6      	ldrh	r6, [r4, #12]
 801a08a:	4630      	mov	r0, r6
 801a08c:	2101      	movs	r1, #1
 801a08e:	f000 fc4f 	bl	801a930 <uxr_seq_num_add>
 801a092:	8922      	ldrh	r2, [r4, #8]
 801a094:	6863      	ldr	r3, [r4, #4]
 801a096:	fbb3 f3f2 	udiv	r3, r3, r2
 801a09a:	4606      	mov	r6, r0
 801a09c:	fbb0 f0f2 	udiv	r0, r0, r2
 801a0a0:	fb02 6010 	mls	r0, r2, r0, r6
 801a0a4:	b280      	uxth	r0, r0
 801a0a6:	fb00 f303 	mul.w	r3, r0, r3
 801a0aa:	6820      	ldr	r0, [r4, #0]
 801a0ac:	3304      	adds	r3, #4
 801a0ae:	4418      	add	r0, r3
 801a0b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d0a0      	beq.n	8019ffa <uxr_receive_reliable_message+0x22>
 801a0b8:	6923      	ldr	r3, [r4, #16]
 801a0ba:	4798      	blx	r3
 801a0bc:	2802      	cmp	r0, #2
 801a0be:	d008      	beq.n	801a0d2 <uxr_receive_reliable_message+0xfa>
 801a0c0:	2801      	cmp	r0, #1
 801a0c2:	d0e2      	beq.n	801a08a <uxr_receive_reliable_message+0xb2>
 801a0c4:	e799      	b.n	8019ffa <uxr_receive_reliable_message+0x22>
 801a0c6:	9b08      	ldr	r3, [sp, #32]
 801a0c8:	81a5      	strh	r5, [r4, #12]
 801a0ca:	2601      	movs	r6, #1
 801a0cc:	f883 9000 	strb.w	r9, [r3]
 801a0d0:	e794      	b.n	8019ffc <uxr_receive_reliable_message+0x24>
 801a0d2:	2601      	movs	r6, #1
 801a0d4:	e792      	b.n	8019ffc <uxr_receive_reliable_message+0x24>
 801a0d6:	bf00      	nop

0801a0d8 <uxr_next_input_reliable_buffer_available>:
 801a0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a0dc:	4604      	mov	r4, r0
 801a0de:	460f      	mov	r7, r1
 801a0e0:	8980      	ldrh	r0, [r0, #12]
 801a0e2:	2101      	movs	r1, #1
 801a0e4:	4690      	mov	r8, r2
 801a0e6:	f000 fc23 	bl	801a930 <uxr_seq_num_add>
 801a0ea:	8922      	ldrh	r2, [r4, #8]
 801a0ec:	fbb0 f6f2 	udiv	r6, r0, r2
 801a0f0:	fb02 0616 	mls	r6, r2, r6, r0
 801a0f4:	b2b6      	uxth	r6, r6
 801a0f6:	6863      	ldr	r3, [r4, #4]
 801a0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0fc:	fb06 f303 	mul.w	r3, r6, r3
 801a100:	6826      	ldr	r6, [r4, #0]
 801a102:	3304      	adds	r3, #4
 801a104:	441e      	add	r6, r3
 801a106:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a10a:	f1b9 0f00 	cmp.w	r9, #0
 801a10e:	d023      	beq.n	801a158 <uxr_next_input_reliable_buffer_available+0x80>
 801a110:	6923      	ldr	r3, [r4, #16]
 801a112:	4605      	mov	r5, r0
 801a114:	4630      	mov	r0, r6
 801a116:	4798      	blx	r3
 801a118:	4682      	mov	sl, r0
 801a11a:	b300      	cbz	r0, 801a15e <uxr_next_input_reliable_buffer_available+0x86>
 801a11c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a120:	2101      	movs	r1, #1
 801a122:	4650      	mov	r0, sl
 801a124:	f000 fc04 	bl	801a930 <uxr_seq_num_add>
 801a128:	8921      	ldrh	r1, [r4, #8]
 801a12a:	fbb0 f2f1 	udiv	r2, r0, r1
 801a12e:	4682      	mov	sl, r0
 801a130:	fb01 0212 	mls	r2, r1, r2, r0
 801a134:	e9d4 0300 	ldrd	r0, r3, [r4]
 801a138:	b292      	uxth	r2, r2
 801a13a:	fbb3 f3f1 	udiv	r3, r3, r1
 801a13e:	fb02 f303 	mul.w	r3, r2, r3
 801a142:	3304      	adds	r3, #4
 801a144:	4418      	add	r0, r3
 801a146:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a14a:	b12b      	cbz	r3, 801a158 <uxr_next_input_reliable_buffer_available+0x80>
 801a14c:	6923      	ldr	r3, [r4, #16]
 801a14e:	4798      	blx	r3
 801a150:	2802      	cmp	r0, #2
 801a152:	d01b      	beq.n	801a18c <uxr_next_input_reliable_buffer_available+0xb4>
 801a154:	2801      	cmp	r0, #1
 801a156:	d0e3      	beq.n	801a120 <uxr_next_input_reliable_buffer_available+0x48>
 801a158:	2000      	movs	r0, #0
 801a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a15e:	464a      	mov	r2, r9
 801a160:	4631      	mov	r1, r6
 801a162:	4638      	mov	r0, r7
 801a164:	f7f3 fee2 	bl	800df2c <ucdr_init_buffer>
 801a168:	8921      	ldrh	r1, [r4, #8]
 801a16a:	fbb5 f2f1 	udiv	r2, r5, r1
 801a16e:	fb01 5212 	mls	r2, r1, r2, r5
 801a172:	b292      	uxth	r2, r2
 801a174:	6863      	ldr	r3, [r4, #4]
 801a176:	fbb3 f3f1 	udiv	r3, r3, r1
 801a17a:	fb02 f303 	mul.w	r3, r2, r3
 801a17e:	6822      	ldr	r2, [r4, #0]
 801a180:	f842 a003 	str.w	sl, [r2, r3]
 801a184:	2001      	movs	r0, #1
 801a186:	81a5      	strh	r5, [r4, #12]
 801a188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a18c:	8920      	ldrh	r0, [r4, #8]
 801a18e:	fbb5 f3f0 	udiv	r3, r5, r0
 801a192:	fb00 5513 	mls	r5, r0, r3, r5
 801a196:	b2ad      	uxth	r5, r5
 801a198:	6863      	ldr	r3, [r4, #4]
 801a19a:	fbb3 f3f0 	udiv	r3, r3, r0
 801a19e:	fb03 f505 	mul.w	r5, r3, r5
 801a1a2:	6823      	ldr	r3, [r4, #0]
 801a1a4:	2000      	movs	r0, #0
 801a1a6:	5158      	str	r0, [r3, r5]
 801a1a8:	eb06 0108 	add.w	r1, r6, r8
 801a1ac:	eba9 0208 	sub.w	r2, r9, r8
 801a1b0:	4638      	mov	r0, r7
 801a1b2:	f7f3 febb 	bl	800df2c <ucdr_init_buffer>
 801a1b6:	4638      	mov	r0, r7
 801a1b8:	4903      	ldr	r1, [pc, #12]	@ (801a1c8 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a1ba:	4622      	mov	r2, r4
 801a1bc:	f7f3 fe8a 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 801a1c0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a1c4:	2001      	movs	r0, #1
 801a1c6:	e7c8      	b.n	801a15a <uxr_next_input_reliable_buffer_available+0x82>
 801a1c8:	08019ecd 	.word	0x08019ecd

0801a1cc <uxr_process_heartbeat>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4611      	mov	r1, r2
 801a1d0:	4604      	mov	r4, r0
 801a1d2:	89c0      	ldrh	r0, [r0, #14]
 801a1d4:	4615      	mov	r5, r2
 801a1d6:	f000 fbb3 	bl	801a940 <uxr_seq_num_cmp>
 801a1da:	2800      	cmp	r0, #0
 801a1dc:	bfb8      	it	lt
 801a1de:	81e5      	strhlt	r5, [r4, #14]
 801a1e0:	bd38      	pop	{r3, r4, r5, pc}
 801a1e2:	bf00      	nop

0801a1e4 <uxr_compute_acknack>:
 801a1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1e8:	8903      	ldrh	r3, [r0, #8]
 801a1ea:	8985      	ldrh	r5, [r0, #12]
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	460e      	mov	r6, r1
 801a1f0:	b1d3      	cbz	r3, 801a228 <uxr_compute_acknack+0x44>
 801a1f2:	4628      	mov	r0, r5
 801a1f4:	2701      	movs	r7, #1
 801a1f6:	e003      	b.n	801a200 <uxr_compute_acknack+0x1c>
 801a1f8:	4567      	cmp	r7, ip
 801a1fa:	d215      	bcs.n	801a228 <uxr_compute_acknack+0x44>
 801a1fc:	89a0      	ldrh	r0, [r4, #12]
 801a1fe:	3701      	adds	r7, #1
 801a200:	b2b9      	uxth	r1, r7
 801a202:	f000 fb95 	bl	801a930 <uxr_seq_num_add>
 801a206:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a20a:	fbb0 f3fc 	udiv	r3, r0, ip
 801a20e:	fb0c 0313 	mls	r3, ip, r3, r0
 801a212:	b29a      	uxth	r2, r3
 801a214:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a218:	fbb3 f3fc 	udiv	r3, r3, ip
 801a21c:	fb02 f303 	mul.w	r3, r2, r3
 801a220:	58cb      	ldr	r3, [r1, r3]
 801a222:	2b00      	cmp	r3, #0
 801a224:	d1e8      	bne.n	801a1f8 <uxr_compute_acknack+0x14>
 801a226:	4605      	mov	r5, r0
 801a228:	8035      	strh	r5, [r6, #0]
 801a22a:	2101      	movs	r1, #1
 801a22c:	4628      	mov	r0, r5
 801a22e:	89e7      	ldrh	r7, [r4, #14]
 801a230:	f000 fb82 	bl	801a938 <uxr_seq_num_sub>
 801a234:	4601      	mov	r1, r0
 801a236:	4638      	mov	r0, r7
 801a238:	f000 fb7e 	bl	801a938 <uxr_seq_num_sub>
 801a23c:	4605      	mov	r5, r0
 801a23e:	b318      	cbz	r0, 801a288 <uxr_compute_acknack+0xa4>
 801a240:	f04f 0900 	mov.w	r9, #0
 801a244:	464f      	mov	r7, r9
 801a246:	f04f 0801 	mov.w	r8, #1
 801a24a:	fa1f f189 	uxth.w	r1, r9
 801a24e:	8830      	ldrh	r0, [r6, #0]
 801a250:	f000 fb6e 	bl	801a930 <uxr_seq_num_add>
 801a254:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a258:	fbb0 f3fc 	udiv	r3, r0, ip
 801a25c:	e9d4 1200 	ldrd	r1, r2, [r4]
 801a260:	fb03 001c 	mls	r0, r3, ip, r0
 801a264:	b283      	uxth	r3, r0
 801a266:	fbb2 f2fc 	udiv	r2, r2, ip
 801a26a:	fb02 f303 	mul.w	r3, r2, r3
 801a26e:	fa08 f209 	lsl.w	r2, r8, r9
 801a272:	58cb      	ldr	r3, [r1, r3]
 801a274:	f109 0901 	add.w	r9, r9, #1
 801a278:	b90b      	cbnz	r3, 801a27e <uxr_compute_acknack+0x9a>
 801a27a:	4317      	orrs	r7, r2
 801a27c:	b2bf      	uxth	r7, r7
 801a27e:	454d      	cmp	r5, r9
 801a280:	d1e3      	bne.n	801a24a <uxr_compute_acknack+0x66>
 801a282:	4638      	mov	r0, r7
 801a284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a288:	4607      	mov	r7, r0
 801a28a:	4638      	mov	r0, r7
 801a28c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a290 <uxr_init_output_best_effort_stream>:
 801a290:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a294:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a298:	6001      	str	r1, [r0, #0]
 801a29a:	7303      	strb	r3, [r0, #12]
 801a29c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a2a0:	4770      	bx	lr
 801a2a2:	bf00      	nop

0801a2a4 <uxr_reset_output_best_effort_stream>:
 801a2a4:	7b02      	ldrb	r2, [r0, #12]
 801a2a6:	6042      	str	r2, [r0, #4]
 801a2a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a2ac:	81c3      	strh	r3, [r0, #14]
 801a2ae:	4770      	bx	lr

0801a2b0 <uxr_prepare_best_effort_buffer_to_write>:
 801a2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2b2:	4604      	mov	r4, r0
 801a2b4:	b083      	sub	sp, #12
 801a2b6:	6840      	ldr	r0, [r0, #4]
 801a2b8:	460d      	mov	r5, r1
 801a2ba:	4616      	mov	r6, r2
 801a2bc:	f7fb f8cc 	bl	8015458 <uxr_submessage_padding>
 801a2c0:	6863      	ldr	r3, [r4, #4]
 801a2c2:	4418      	add	r0, r3
 801a2c4:	68a3      	ldr	r3, [r4, #8]
 801a2c6:	1942      	adds	r2, r0, r5
 801a2c8:	4293      	cmp	r3, r2
 801a2ca:	bf2c      	ite	cs
 801a2cc:	2701      	movcs	r7, #1
 801a2ce:	2700      	movcc	r7, #0
 801a2d0:	d202      	bcs.n	801a2d8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a2d2:	4638      	mov	r0, r7
 801a2d4:	b003      	add	sp, #12
 801a2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2d8:	9000      	str	r0, [sp, #0]
 801a2da:	6821      	ldr	r1, [r4, #0]
 801a2dc:	4630      	mov	r0, r6
 801a2de:	2300      	movs	r3, #0
 801a2e0:	f7f3 fe12 	bl	800df08 <ucdr_init_buffer_origin_offset>
 801a2e4:	6861      	ldr	r1, [r4, #4]
 801a2e6:	4638      	mov	r0, r7
 801a2e8:	4429      	add	r1, r5
 801a2ea:	6061      	str	r1, [r4, #4]
 801a2ec:	b003      	add	sp, #12
 801a2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a2f0 <uxr_prepare_best_effort_buffer_to_send>:
 801a2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f4:	4604      	mov	r4, r0
 801a2f6:	461d      	mov	r5, r3
 801a2f8:	6840      	ldr	r0, [r0, #4]
 801a2fa:	7b23      	ldrb	r3, [r4, #12]
 801a2fc:	4298      	cmp	r0, r3
 801a2fe:	bf8c      	ite	hi
 801a300:	2601      	movhi	r6, #1
 801a302:	2600      	movls	r6, #0
 801a304:	d802      	bhi.n	801a30c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a306:	4630      	mov	r0, r6
 801a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a30c:	4688      	mov	r8, r1
 801a30e:	89e0      	ldrh	r0, [r4, #14]
 801a310:	2101      	movs	r1, #1
 801a312:	4617      	mov	r7, r2
 801a314:	f000 fb0c 	bl	801a930 <uxr_seq_num_add>
 801a318:	6823      	ldr	r3, [r4, #0]
 801a31a:	81e0      	strh	r0, [r4, #14]
 801a31c:	8028      	strh	r0, [r5, #0]
 801a31e:	f8c8 3000 	str.w	r3, [r8]
 801a322:	6863      	ldr	r3, [r4, #4]
 801a324:	603b      	str	r3, [r7, #0]
 801a326:	7b23      	ldrb	r3, [r4, #12]
 801a328:	6063      	str	r3, [r4, #4]
 801a32a:	4630      	mov	r0, r6
 801a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a330 <on_full_output_buffer>:
 801a330:	b538      	push	{r3, r4, r5, lr}
 801a332:	6802      	ldr	r2, [r0, #0]
 801a334:	460c      	mov	r4, r1
 801a336:	6809      	ldr	r1, [r1, #0]
 801a338:	8923      	ldrh	r3, [r4, #8]
 801a33a:	eba2 0c01 	sub.w	ip, r2, r1
 801a33e:	6862      	ldr	r2, [r4, #4]
 801a340:	fbb2 f2f3 	udiv	r2, r2, r3
 801a344:	fbbc fcf2 	udiv	ip, ip, r2
 801a348:	f10c 0c01 	add.w	ip, ip, #1
 801a34c:	fa1f fc8c 	uxth.w	ip, ip
 801a350:	fbbc fef3 	udiv	lr, ip, r3
 801a354:	fb03 c31e 	mls	r3, r3, lr, ip
 801a358:	b29b      	uxth	r3, r3
 801a35a:	fb02 f303 	mul.w	r3, r2, r3
 801a35e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a362:	58ca      	ldr	r2, [r1, r3]
 801a364:	4463      	add	r3, ip
 801a366:	eba2 020c 	sub.w	r2, r2, ip
 801a36a:	3308      	adds	r3, #8
 801a36c:	4605      	mov	r5, r0
 801a36e:	4419      	add	r1, r3
 801a370:	3a04      	subs	r2, #4
 801a372:	6903      	ldr	r3, [r0, #16]
 801a374:	f7f3 fdd2 	bl	800df1c <ucdr_init_buffer_origin>
 801a378:	4628      	mov	r0, r5
 801a37a:	4903      	ldr	r1, [pc, #12]	@ (801a388 <on_full_output_buffer+0x58>)
 801a37c:	4622      	mov	r2, r4
 801a37e:	f7f3 fda9 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 801a382:	2000      	movs	r0, #0
 801a384:	bd38      	pop	{r3, r4, r5, pc}
 801a386:	bf00      	nop
 801a388:	0801a331 	.word	0x0801a331

0801a38c <uxr_init_output_reliable_stream>:
 801a38c:	b410      	push	{r4}
 801a38e:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a392:	8103      	strh	r3, [r0, #8]
 801a394:	e9c0 1200 	strd	r1, r2, [r0]
 801a398:	f880 c00c 	strb.w	ip, [r0, #12]
 801a39c:	b1d3      	cbz	r3, 801a3d4 <uxr_init_output_reliable_stream+0x48>
 801a39e:	f8c1 c000 	str.w	ip, [r1]
 801a3a2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3a6:	f1bc 0f01 	cmp.w	ip, #1
 801a3aa:	d913      	bls.n	801a3d4 <uxr_init_output_reliable_stream+0x48>
 801a3ac:	2301      	movs	r3, #1
 801a3ae:	fbb3 f1fc 	udiv	r1, r3, ip
 801a3b2:	fb0c 3111 	mls	r1, ip, r1, r3
 801a3b6:	b289      	uxth	r1, r1
 801a3b8:	6842      	ldr	r2, [r0, #4]
 801a3ba:	6804      	ldr	r4, [r0, #0]
 801a3bc:	fbb2 f2fc 	udiv	r2, r2, ip
 801a3c0:	fb01 f202 	mul.w	r2, r1, r2
 801a3c4:	7b01      	ldrb	r1, [r0, #12]
 801a3c6:	50a1      	str	r1, [r4, r2]
 801a3c8:	3301      	adds	r3, #1
 801a3ca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	459c      	cmp	ip, r3
 801a3d2:	d8ec      	bhi.n	801a3ae <uxr_init_output_reliable_stream+0x22>
 801a3d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a3d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a3dc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a3e0:	4905      	ldr	r1, [pc, #20]	@ (801a3f8 <uxr_init_output_reliable_stream+0x6c>)
 801a3e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3e6:	f8c0 100e 	str.w	r1, [r0, #14]
 801a3ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a3ee:	2300      	movs	r3, #0
 801a3f0:	8242      	strh	r2, [r0, #18]
 801a3f2:	8403      	strh	r3, [r0, #32]
 801a3f4:	4770      	bx	lr
 801a3f6:	bf00      	nop
 801a3f8:	ffff0000 	.word	0xffff0000

0801a3fc <uxr_reset_output_reliable_stream>:
 801a3fc:	8901      	ldrh	r1, [r0, #8]
 801a3fe:	b1b1      	cbz	r1, 801a42e <uxr_reset_output_reliable_stream+0x32>
 801a400:	f04f 0c00 	mov.w	ip, #0
 801a404:	4663      	mov	r3, ip
 801a406:	fbb3 f2f1 	udiv	r2, r3, r1
 801a40a:	fb01 3312 	mls	r3, r1, r2, r3
 801a40e:	b29b      	uxth	r3, r3
 801a410:	6842      	ldr	r2, [r0, #4]
 801a412:	fbb2 f2f1 	udiv	r2, r2, r1
 801a416:	6801      	ldr	r1, [r0, #0]
 801a418:	fb02 f303 	mul.w	r3, r2, r3
 801a41c:	7b02      	ldrb	r2, [r0, #12]
 801a41e:	50ca      	str	r2, [r1, r3]
 801a420:	f10c 0c01 	add.w	ip, ip, #1
 801a424:	8901      	ldrh	r1, [r0, #8]
 801a426:	fa1f f38c 	uxth.w	r3, ip
 801a42a:	4299      	cmp	r1, r3
 801a42c:	d8eb      	bhi.n	801a406 <uxr_reset_output_reliable_stream+0xa>
 801a42e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a432:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a436:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a43a:	4904      	ldr	r1, [pc, #16]	@ (801a44c <uxr_reset_output_reliable_stream+0x50>)
 801a43c:	f8c0 100e 	str.w	r1, [r0, #14]
 801a440:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a444:	2300      	movs	r3, #0
 801a446:	8242      	strh	r2, [r0, #18]
 801a448:	8403      	strh	r3, [r0, #32]
 801a44a:	4770      	bx	lr
 801a44c:	ffff0000 	.word	0xffff0000

0801a450 <uxr_prepare_reliable_buffer_to_write>:
 801a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a454:	4604      	mov	r4, r0
 801a456:	b091      	sub	sp, #68	@ 0x44
 801a458:	8900      	ldrh	r0, [r0, #8]
 801a45a:	89e6      	ldrh	r6, [r4, #14]
 801a45c:	6823      	ldr	r3, [r4, #0]
 801a45e:	9204      	str	r2, [sp, #16]
 801a460:	fbb6 f2f0 	udiv	r2, r6, r0
 801a464:	fb00 6212 	mls	r2, r0, r2, r6
 801a468:	b292      	uxth	r2, r2
 801a46a:	6865      	ldr	r5, [r4, #4]
 801a46c:	fbb5 f5f0 	udiv	r5, r5, r0
 801a470:	fb05 3202 	mla	r2, r5, r2, r3
 801a474:	3204      	adds	r2, #4
 801a476:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801a47a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a47e:	9203      	str	r2, [sp, #12]
 801a480:	468b      	mov	fp, r1
 801a482:	1f2f      	subs	r7, r5, #4
 801a484:	2800      	cmp	r0, #0
 801a486:	f000 814c 	beq.w	801a722 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a48a:	f04f 0c00 	mov.w	ip, #0
 801a48e:	46e2      	mov	sl, ip
 801a490:	4661      	mov	r1, ip
 801a492:	fbb1 f2f0 	udiv	r2, r1, r0
 801a496:	fb00 1212 	mls	r2, r0, r2, r1
 801a49a:	b292      	uxth	r2, r2
 801a49c:	fb05 f202 	mul.w	r2, r5, r2
 801a4a0:	f10c 0c01 	add.w	ip, ip, #1
 801a4a4:	589a      	ldr	r2, [r3, r2]
 801a4a6:	454a      	cmp	r2, r9
 801a4a8:	bf08      	it	eq
 801a4aa:	f10a 0a01 	addeq.w	sl, sl, #1
 801a4ae:	fa1f f18c 	uxth.w	r1, ip
 801a4b2:	bf08      	it	eq
 801a4b4:	fa1f fa8a 	uxtheq.w	sl, sl
 801a4b8:	4281      	cmp	r1, r0
 801a4ba:	d3ea      	bcc.n	801a492 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a4bc:	4640      	mov	r0, r8
 801a4be:	2104      	movs	r1, #4
 801a4c0:	f8cd a014 	str.w	sl, [sp, #20]
 801a4c4:	f7f3 fd36 	bl	800df34 <ucdr_alignment>
 801a4c8:	4480      	add	r8, r0
 801a4ca:	eb08 020b 	add.w	r2, r8, fp
 801a4ce:	42ba      	cmp	r2, r7
 801a4d0:	f240 80cd 	bls.w	801a66e <uxr_prepare_reliable_buffer_to_write+0x21e>
 801a4d4:	7b22      	ldrb	r2, [r4, #12]
 801a4d6:	445a      	add	r2, fp
 801a4d8:	42ba      	cmp	r2, r7
 801a4da:	f240 80b5 	bls.w	801a648 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801a4de:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801a4e2:	33fc      	adds	r3, #252	@ 0xfc
 801a4e4:	b2ba      	uxth	r2, r7
 801a4e6:	4413      	add	r3, r2
 801a4e8:	b29b      	uxth	r3, r3
 801a4ea:	fb0a f903 	mul.w	r9, sl, r3
 801a4ee:	45d9      	cmp	r9, fp
 801a4f0:	9305      	str	r3, [sp, #20]
 801a4f2:	9306      	str	r3, [sp, #24]
 801a4f4:	f0c0 80b7 	bcc.w	801a666 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a4f8:	f108 0304 	add.w	r3, r8, #4
 801a4fc:	42bb      	cmp	r3, r7
 801a4fe:	f080 80db 	bcs.w	801a6b8 <uxr_prepare_reliable_buffer_to_write+0x268>
 801a502:	f1a2 0904 	sub.w	r9, r2, #4
 801a506:	eba9 0908 	sub.w	r9, r9, r8
 801a50a:	9b05      	ldr	r3, [sp, #20]
 801a50c:	fa1f f989 	uxth.w	r9, r9
 801a510:	ebab 0b09 	sub.w	fp, fp, r9
 801a514:	fbbb f2f3 	udiv	r2, fp, r3
 801a518:	fb03 b312 	mls	r3, r3, r2, fp
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	f000 80c8 	beq.w	801a6b2 <uxr_prepare_reliable_buffer_to_write+0x262>
 801a522:	3201      	adds	r2, #1
 801a524:	b292      	uxth	r2, r2
 801a526:	9306      	str	r3, [sp, #24]
 801a528:	4552      	cmp	r2, sl
 801a52a:	f200 809c 	bhi.w	801a666 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a52e:	f10d 0b20 	add.w	fp, sp, #32
 801a532:	2a00      	cmp	r2, #0
 801a534:	d042      	beq.n	801a5bc <uxr_prepare_reliable_buffer_to_write+0x16c>
 801a536:	f8cd 801c 	str.w	r8, [sp, #28]
 801a53a:	f04f 0a00 	mov.w	sl, #0
 801a53e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a542:	9505      	str	r5, [sp, #20]
 801a544:	f10d 0b20 	add.w	fp, sp, #32
 801a548:	4615      	mov	r5, r2
 801a54a:	e000      	b.n	801a54e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801a54c:	46c1      	mov	r9, r8
 801a54e:	8920      	ldrh	r0, [r4, #8]
 801a550:	fbb6 f2f0 	udiv	r2, r6, r0
 801a554:	fb00 6112 	mls	r1, r0, r2, r6
 801a558:	b28a      	uxth	r2, r1
 801a55a:	6863      	ldr	r3, [r4, #4]
 801a55c:	fbb3 f1f0 	udiv	r1, r3, r0
 801a560:	6823      	ldr	r3, [r4, #0]
 801a562:	fb02 f101 	mul.w	r1, r2, r1
 801a566:	3104      	adds	r1, #4
 801a568:	4419      	add	r1, r3
 801a56a:	4658      	mov	r0, fp
 801a56c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a570:	9200      	str	r2, [sp, #0]
 801a572:	2300      	movs	r3, #0
 801a574:	463a      	mov	r2, r7
 801a576:	f7f3 fcc7 	bl	800df08 <ucdr_init_buffer_origin_offset>
 801a57a:	464a      	mov	r2, r9
 801a57c:	2300      	movs	r3, #0
 801a57e:	210d      	movs	r1, #13
 801a580:	4658      	mov	r0, fp
 801a582:	f7fa ff29 	bl	80153d8 <uxr_buffer_submessage_header>
 801a586:	8921      	ldrh	r1, [r4, #8]
 801a588:	fbb6 f2f1 	udiv	r2, r6, r1
 801a58c:	fb01 6212 	mls	r2, r1, r2, r6
 801a590:	b292      	uxth	r2, r2
 801a592:	6863      	ldr	r3, [r4, #4]
 801a594:	fbb3 f3f1 	udiv	r3, r3, r1
 801a598:	fb02 f303 	mul.w	r3, r2, r3
 801a59c:	6822      	ldr	r2, [r4, #0]
 801a59e:	4630      	mov	r0, r6
 801a5a0:	50d7      	str	r7, [r2, r3]
 801a5a2:	2101      	movs	r1, #1
 801a5a4:	f000 f9c4 	bl	801a930 <uxr_seq_num_add>
 801a5a8:	f10a 0a01 	add.w	sl, sl, #1
 801a5ac:	fa1f f38a 	uxth.w	r3, sl
 801a5b0:	429d      	cmp	r5, r3
 801a5b2:	4606      	mov	r6, r0
 801a5b4:	d8ca      	bhi.n	801a54c <uxr_prepare_reliable_buffer_to_write+0xfc>
 801a5b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a5ba:	9d05      	ldr	r5, [sp, #20]
 801a5bc:	8920      	ldrh	r0, [r4, #8]
 801a5be:	fbb6 f3f0 	udiv	r3, r6, r0
 801a5c2:	fb00 6313 	mls	r3, r0, r3, r6
 801a5c6:	b299      	uxth	r1, r3
 801a5c8:	6863      	ldr	r3, [r4, #4]
 801a5ca:	fbb3 f3f0 	udiv	r3, r3, r0
 801a5ce:	fb01 f303 	mul.w	r3, r1, r3
 801a5d2:	6821      	ldr	r1, [r4, #0]
 801a5d4:	3304      	adds	r3, #4
 801a5d6:	4419      	add	r1, r3
 801a5d8:	463a      	mov	r2, r7
 801a5da:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a5de:	9000      	str	r0, [sp, #0]
 801a5e0:	2300      	movs	r3, #0
 801a5e2:	4658      	mov	r0, fp
 801a5e4:	f7f3 fc90 	bl	800df08 <ucdr_init_buffer_origin_offset>
 801a5e8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801a5ec:	4658      	mov	r0, fp
 801a5ee:	fa1f f289 	uxth.w	r2, r9
 801a5f2:	2302      	movs	r3, #2
 801a5f4:	210d      	movs	r1, #13
 801a5f6:	f7fa feef 	bl	80153d8 <uxr_buffer_submessage_header>
 801a5fa:	9b03      	ldr	r3, [sp, #12]
 801a5fc:	8927      	ldrh	r7, [r4, #8]
 801a5fe:	7b20      	ldrb	r0, [r4, #12]
 801a600:	f108 0104 	add.w	r1, r8, #4
 801a604:	440b      	add	r3, r1
 801a606:	4619      	mov	r1, r3
 801a608:	fbb6 f3f7 	udiv	r3, r6, r7
 801a60c:	fb07 6313 	mls	r3, r7, r3, r6
 801a610:	f1a5 0208 	sub.w	r2, r5, #8
 801a614:	b29d      	uxth	r5, r3
 801a616:	3004      	adds	r0, #4
 801a618:	6863      	ldr	r3, [r4, #4]
 801a61a:	fbb3 f3f7 	udiv	r3, r3, r7
 801a61e:	fb05 f303 	mul.w	r3, r5, r3
 801a622:	6825      	ldr	r5, [r4, #0]
 801a624:	4448      	add	r0, r9
 801a626:	50e8      	str	r0, [r5, r3]
 801a628:	9d04      	ldr	r5, [sp, #16]
 801a62a:	eba2 0208 	sub.w	r2, r2, r8
 801a62e:	4628      	mov	r0, r5
 801a630:	f7f3 fc7c 	bl	800df2c <ucdr_init_buffer>
 801a634:	4628      	mov	r0, r5
 801a636:	493c      	ldr	r1, [pc, #240]	@ (801a728 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a638:	4622      	mov	r2, r4
 801a63a:	f7f3 fc4b 	bl	800ded4 <ucdr_set_on_full_buffer_callback>
 801a63e:	2001      	movs	r0, #1
 801a640:	81e6      	strh	r6, [r4, #14]
 801a642:	b011      	add	sp, #68	@ 0x44
 801a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a648:	2101      	movs	r1, #1
 801a64a:	89e0      	ldrh	r0, [r4, #14]
 801a64c:	f000 f970 	bl	801a930 <uxr_seq_num_add>
 801a650:	8921      	ldrh	r1, [r4, #8]
 801a652:	4605      	mov	r5, r0
 801a654:	8a60      	ldrh	r0, [r4, #18]
 801a656:	f000 f96b 	bl	801a930 <uxr_seq_num_add>
 801a65a:	4601      	mov	r1, r0
 801a65c:	4628      	mov	r0, r5
 801a65e:	f000 f96f 	bl	801a940 <uxr_seq_num_cmp>
 801a662:	2800      	cmp	r0, #0
 801a664:	dd42      	ble.n	801a6ec <uxr_prepare_reliable_buffer_to_write+0x29c>
 801a666:	2000      	movs	r0, #0
 801a668:	b011      	add	sp, #68	@ 0x44
 801a66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a66e:	8921      	ldrh	r1, [r4, #8]
 801a670:	8a60      	ldrh	r0, [r4, #18]
 801a672:	9205      	str	r2, [sp, #20]
 801a674:	f000 f95c 	bl	801a930 <uxr_seq_num_add>
 801a678:	4601      	mov	r1, r0
 801a67a:	4630      	mov	r0, r6
 801a67c:	f000 f960 	bl	801a940 <uxr_seq_num_cmp>
 801a680:	2800      	cmp	r0, #0
 801a682:	9a05      	ldr	r2, [sp, #20]
 801a684:	dcef      	bgt.n	801a666 <uxr_prepare_reliable_buffer_to_write+0x216>
 801a686:	8927      	ldrh	r7, [r4, #8]
 801a688:	fbb6 f3f7 	udiv	r3, r6, r7
 801a68c:	fb07 6313 	mls	r3, r7, r3, r6
 801a690:	b29d      	uxth	r5, r3
 801a692:	6863      	ldr	r3, [r4, #4]
 801a694:	6824      	ldr	r4, [r4, #0]
 801a696:	fbb3 f3f7 	udiv	r3, r3, r7
 801a69a:	fb05 f303 	mul.w	r3, r5, r3
 801a69e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a6a2:	50e2      	str	r2, [r4, r3]
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	f8cd 8000 	str.w	r8, [sp]
 801a6aa:	f7f3 fc2d 	bl	800df08 <ucdr_init_buffer_origin_offset>
 801a6ae:	2001      	movs	r0, #1
 801a6b0:	e7da      	b.n	801a668 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a6b2:	b293      	uxth	r3, r2
 801a6b4:	461a      	mov	r2, r3
 801a6b6:	e737      	b.n	801a528 <uxr_prepare_reliable_buffer_to_write+0xd8>
 801a6b8:	4630      	mov	r0, r6
 801a6ba:	2101      	movs	r1, #1
 801a6bc:	9207      	str	r2, [sp, #28]
 801a6be:	f000 f937 	bl	801a930 <uxr_seq_num_add>
 801a6c2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a6c6:	fbb0 f1fc 	udiv	r1, r0, ip
 801a6ca:	fb0c 0111 	mls	r1, ip, r1, r0
 801a6ce:	4606      	mov	r6, r0
 801a6d0:	b288      	uxth	r0, r1
 801a6d2:	6863      	ldr	r3, [r4, #4]
 801a6d4:	fbb3 f1fc 	udiv	r1, r3, ip
 801a6d8:	6823      	ldr	r3, [r4, #0]
 801a6da:	9a07      	ldr	r2, [sp, #28]
 801a6dc:	fb00 f101 	mul.w	r1, r0, r1
 801a6e0:	3104      	adds	r1, #4
 801a6e2:	440b      	add	r3, r1
 801a6e4:	9303      	str	r3, [sp, #12]
 801a6e6:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a6ea:	e70a      	b.n	801a502 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a6ec:	8921      	ldrh	r1, [r4, #8]
 801a6ee:	fbb5 f3f1 	udiv	r3, r5, r1
 801a6f2:	fb01 5313 	mls	r3, r1, r3, r5
 801a6f6:	b29a      	uxth	r2, r3
 801a6f8:	6863      	ldr	r3, [r4, #4]
 801a6fa:	fbb3 f3f1 	udiv	r3, r3, r1
 801a6fe:	6821      	ldr	r1, [r4, #0]
 801a700:	9804      	ldr	r0, [sp, #16]
 801a702:	fb02 f303 	mul.w	r3, r2, r3
 801a706:	3304      	adds	r3, #4
 801a708:	7b22      	ldrb	r2, [r4, #12]
 801a70a:	4419      	add	r1, r3
 801a70c:	445a      	add	r2, fp
 801a70e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a712:	7b23      	ldrb	r3, [r4, #12]
 801a714:	9300      	str	r3, [sp, #0]
 801a716:	2300      	movs	r3, #0
 801a718:	f7f3 fbf6 	bl	800df08 <ucdr_init_buffer_origin_offset>
 801a71c:	81e5      	strh	r5, [r4, #14]
 801a71e:	2001      	movs	r0, #1
 801a720:	e7a2      	b.n	801a668 <uxr_prepare_reliable_buffer_to_write+0x218>
 801a722:	4682      	mov	sl, r0
 801a724:	e6ca      	b.n	801a4bc <uxr_prepare_reliable_buffer_to_write+0x6c>
 801a726:	bf00      	nop
 801a728:	0801a331 	.word	0x0801a331

0801a72c <uxr_prepare_next_reliable_buffer_to_send>:
 801a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a72e:	4604      	mov	r4, r0
 801a730:	460f      	mov	r7, r1
 801a732:	8a00      	ldrh	r0, [r0, #16]
 801a734:	2101      	movs	r1, #1
 801a736:	4616      	mov	r6, r2
 801a738:	461d      	mov	r5, r3
 801a73a:	f000 f8f9 	bl	801a930 <uxr_seq_num_add>
 801a73e:	8028      	strh	r0, [r5, #0]
 801a740:	8922      	ldrh	r2, [r4, #8]
 801a742:	fbb0 f3f2 	udiv	r3, r0, r2
 801a746:	fb02 0c13 	mls	ip, r2, r3, r0
 801a74a:	fa1f fc8c 	uxth.w	ip, ip
 801a74e:	6863      	ldr	r3, [r4, #4]
 801a750:	fbb3 f3f2 	udiv	r3, r3, r2
 801a754:	fb0c fc03 	mul.w	ip, ip, r3
 801a758:	6823      	ldr	r3, [r4, #0]
 801a75a:	89e1      	ldrh	r1, [r4, #14]
 801a75c:	f10c 0c04 	add.w	ip, ip, #4
 801a760:	4463      	add	r3, ip
 801a762:	603b      	str	r3, [r7, #0]
 801a764:	6823      	ldr	r3, [r4, #0]
 801a766:	449c      	add	ip, r3
 801a768:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a76c:	6033      	str	r3, [r6, #0]
 801a76e:	f000 f8e7 	bl	801a940 <uxr_seq_num_cmp>
 801a772:	2800      	cmp	r0, #0
 801a774:	dd01      	ble.n	801a77a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a776:	2000      	movs	r0, #0
 801a778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a77a:	7b23      	ldrb	r3, [r4, #12]
 801a77c:	6832      	ldr	r2, [r6, #0]
 801a77e:	429a      	cmp	r2, r3
 801a780:	d9f9      	bls.n	801a776 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a782:	8a61      	ldrh	r1, [r4, #18]
 801a784:	8a20      	ldrh	r0, [r4, #16]
 801a786:	f000 f8d7 	bl	801a938 <uxr_seq_num_sub>
 801a78a:	8923      	ldrh	r3, [r4, #8]
 801a78c:	4283      	cmp	r3, r0
 801a78e:	d0f2      	beq.n	801a776 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a790:	8828      	ldrh	r0, [r5, #0]
 801a792:	89e3      	ldrh	r3, [r4, #14]
 801a794:	8220      	strh	r0, [r4, #16]
 801a796:	4298      	cmp	r0, r3
 801a798:	d001      	beq.n	801a79e <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a79a:	2001      	movs	r0, #1
 801a79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a79e:	2101      	movs	r1, #1
 801a7a0:	f000 f8c6 	bl	801a930 <uxr_seq_num_add>
 801a7a4:	81e0      	strh	r0, [r4, #14]
 801a7a6:	2001      	movs	r0, #1
 801a7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7aa:	bf00      	nop

0801a7ac <uxr_update_output_stream_heartbeat_timestamp>:
 801a7ac:	b570      	push	{r4, r5, r6, lr}
 801a7ae:	8a01      	ldrh	r1, [r0, #16]
 801a7b0:	4604      	mov	r4, r0
 801a7b2:	8a40      	ldrh	r0, [r0, #18]
 801a7b4:	4615      	mov	r5, r2
 801a7b6:	461e      	mov	r6, r3
 801a7b8:	f000 f8c2 	bl	801a940 <uxr_seq_num_cmp>
 801a7bc:	2800      	cmp	r0, #0
 801a7be:	db07      	blt.n	801a7d0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a7c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a7c4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a7c8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a7cc:	2000      	movs	r0, #0
 801a7ce:	bd70      	pop	{r4, r5, r6, pc}
 801a7d0:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a7d4:	b940      	cbnz	r0, 801a7e8 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a7d6:	2301      	movs	r3, #1
 801a7d8:	f884 3020 	strb.w	r3, [r4, #32]
 801a7dc:	3564      	adds	r5, #100	@ 0x64
 801a7de:	f146 0600 	adc.w	r6, r6, #0
 801a7e2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a7e6:	bd70      	pop	{r4, r5, r6, pc}
 801a7e8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a7ec:	4295      	cmp	r5, r2
 801a7ee:	eb76 0303 	sbcs.w	r3, r6, r3
 801a7f2:	bfa5      	ittet	ge
 801a7f4:	3001      	addge	r0, #1
 801a7f6:	f884 0020 	strbge.w	r0, [r4, #32]
 801a7fa:	2000      	movlt	r0, #0
 801a7fc:	2001      	movge	r0, #1
 801a7fe:	e7ed      	b.n	801a7dc <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801a800 <uxr_begin_output_nack_buffer_it>:
 801a800:	8a40      	ldrh	r0, [r0, #18]
 801a802:	4770      	bx	lr

0801a804 <uxr_next_reliable_nack_buffer_to_send>:
 801a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a808:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a80c:	b082      	sub	sp, #8
 801a80e:	f1b8 0f00 	cmp.w	r8, #0
 801a812:	d011      	beq.n	801a838 <uxr_next_reliable_nack_buffer_to_send+0x34>
 801a814:	4604      	mov	r4, r0
 801a816:	8818      	ldrh	r0, [r3, #0]
 801a818:	460e      	mov	r6, r1
 801a81a:	4617      	mov	r7, r2
 801a81c:	461d      	mov	r5, r3
 801a81e:	2101      	movs	r1, #1
 801a820:	f000 f886 	bl	801a930 <uxr_seq_num_add>
 801a824:	8028      	strh	r0, [r5, #0]
 801a826:	8a21      	ldrh	r1, [r4, #16]
 801a828:	f000 f88a 	bl	801a940 <uxr_seq_num_cmp>
 801a82c:	2800      	cmp	r0, #0
 801a82e:	dd07      	ble.n	801a840 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801a830:	f04f 0800 	mov.w	r8, #0
 801a834:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801a838:	4640      	mov	r0, r8
 801a83a:	b002      	add	sp, #8
 801a83c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a840:	8921      	ldrh	r1, [r4, #8]
 801a842:	8828      	ldrh	r0, [r5, #0]
 801a844:	6823      	ldr	r3, [r4, #0]
 801a846:	fbb0 f2f1 	udiv	r2, r0, r1
 801a84a:	fb01 0c12 	mls	ip, r1, r2, r0
 801a84e:	fa1f f28c 	uxth.w	r2, ip
 801a852:	9301      	str	r3, [sp, #4]
 801a854:	6863      	ldr	r3, [r4, #4]
 801a856:	fbb3 fcf1 	udiv	ip, r3, r1
 801a85a:	9b01      	ldr	r3, [sp, #4]
 801a85c:	fb02 fc0c 	mul.w	ip, r2, ip
 801a860:	f10c 0c04 	add.w	ip, ip, #4
 801a864:	4463      	add	r3, ip
 801a866:	6033      	str	r3, [r6, #0]
 801a868:	6823      	ldr	r3, [r4, #0]
 801a86a:	4463      	add	r3, ip
 801a86c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a870:	603b      	str	r3, [r7, #0]
 801a872:	7b22      	ldrb	r2, [r4, #12]
 801a874:	429a      	cmp	r2, r3
 801a876:	d0d2      	beq.n	801a81e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801a878:	4640      	mov	r0, r8
 801a87a:	b002      	add	sp, #8
 801a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a880 <uxr_process_acknack>:
 801a880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a882:	4604      	mov	r4, r0
 801a884:	460e      	mov	r6, r1
 801a886:	4610      	mov	r0, r2
 801a888:	2101      	movs	r1, #1
 801a88a:	f000 f855 	bl	801a938 <uxr_seq_num_sub>
 801a88e:	8a61      	ldrh	r1, [r4, #18]
 801a890:	f000 f852 	bl	801a938 <uxr_seq_num_sub>
 801a894:	b1c0      	cbz	r0, 801a8c8 <uxr_process_acknack+0x48>
 801a896:	4605      	mov	r5, r0
 801a898:	2700      	movs	r7, #0
 801a89a:	2101      	movs	r1, #1
 801a89c:	8a60      	ldrh	r0, [r4, #18]
 801a89e:	f000 f847 	bl	801a930 <uxr_seq_num_add>
 801a8a2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a8a6:	fbb0 f1fc 	udiv	r1, r0, ip
 801a8aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a8ae:	fb0c 0111 	mls	r1, ip, r1, r0
 801a8b2:	b289      	uxth	r1, r1
 801a8b4:	3701      	adds	r7, #1
 801a8b6:	fbb3 f3fc 	udiv	r3, r3, ip
 801a8ba:	fb01 f303 	mul.w	r3, r1, r3
 801a8be:	42bd      	cmp	r5, r7
 801a8c0:	7b21      	ldrb	r1, [r4, #12]
 801a8c2:	8260      	strh	r0, [r4, #18]
 801a8c4:	50d1      	str	r1, [r2, r3]
 801a8c6:	d1e8      	bne.n	801a89a <uxr_process_acknack+0x1a>
 801a8c8:	3e00      	subs	r6, #0
 801a8ca:	f04f 0300 	mov.w	r3, #0
 801a8ce:	bf18      	it	ne
 801a8d0:	2601      	movne	r6, #1
 801a8d2:	f884 3020 	strb.w	r3, [r4, #32]
 801a8d6:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a8dc <uxr_is_output_up_to_date>:
 801a8dc:	8a01      	ldrh	r1, [r0, #16]
 801a8de:	8a40      	ldrh	r0, [r0, #18]
 801a8e0:	b508      	push	{r3, lr}
 801a8e2:	f000 f82d 	bl	801a940 <uxr_seq_num_cmp>
 801a8e6:	fab0 f080 	clz	r0, r0
 801a8ea:	0940      	lsrs	r0, r0, #5
 801a8ec:	bd08      	pop	{r3, pc}
 801a8ee:	bf00      	nop

0801a8f0 <get_available_free_slots>:
 801a8f0:	8902      	ldrh	r2, [r0, #8]
 801a8f2:	b1da      	cbz	r2, 801a92c <get_available_free_slots+0x3c>
 801a8f4:	b530      	push	{r4, r5, lr}
 801a8f6:	2100      	movs	r1, #0
 801a8f8:	6843      	ldr	r3, [r0, #4]
 801a8fa:	6805      	ldr	r5, [r0, #0]
 801a8fc:	7b04      	ldrb	r4, [r0, #12]
 801a8fe:	fbb3 fef2 	udiv	lr, r3, r2
 801a902:	4608      	mov	r0, r1
 801a904:	460b      	mov	r3, r1
 801a906:	fbb3 fcf2 	udiv	ip, r3, r2
 801a90a:	fb02 331c 	mls	r3, r2, ip, r3
 801a90e:	b29b      	uxth	r3, r3
 801a910:	fb0e f303 	mul.w	r3, lr, r3
 801a914:	3101      	adds	r1, #1
 801a916:	f855 c003 	ldr.w	ip, [r5, r3]
 801a91a:	4564      	cmp	r4, ip
 801a91c:	bf08      	it	eq
 801a91e:	3001      	addeq	r0, #1
 801a920:	b28b      	uxth	r3, r1
 801a922:	bf08      	it	eq
 801a924:	b280      	uxtheq	r0, r0
 801a926:	4293      	cmp	r3, r2
 801a928:	d3ed      	bcc.n	801a906 <get_available_free_slots+0x16>
 801a92a:	bd30      	pop	{r4, r5, pc}
 801a92c:	4610      	mov	r0, r2
 801a92e:	4770      	bx	lr

0801a930 <uxr_seq_num_add>:
 801a930:	4408      	add	r0, r1
 801a932:	b280      	uxth	r0, r0
 801a934:	4770      	bx	lr
 801a936:	bf00      	nop

0801a938 <uxr_seq_num_sub>:
 801a938:	1a40      	subs	r0, r0, r1
 801a93a:	b280      	uxth	r0, r0
 801a93c:	4770      	bx	lr
 801a93e:	bf00      	nop

0801a940 <uxr_seq_num_cmp>:
 801a940:	4288      	cmp	r0, r1
 801a942:	d011      	beq.n	801a968 <uxr_seq_num_cmp+0x28>
 801a944:	d309      	bcc.n	801a95a <uxr_seq_num_cmp+0x1a>
 801a946:	4288      	cmp	r0, r1
 801a948:	d910      	bls.n	801a96c <uxr_seq_num_cmp+0x2c>
 801a94a:	1a40      	subs	r0, r0, r1
 801a94c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801a950:	bfd4      	ite	le
 801a952:	2001      	movle	r0, #1
 801a954:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801a958:	4770      	bx	lr
 801a95a:	1a0b      	subs	r3, r1, r0
 801a95c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801a960:	daf1      	bge.n	801a946 <uxr_seq_num_cmp+0x6>
 801a962:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a966:	4770      	bx	lr
 801a968:	2000      	movs	r0, #0
 801a96a:	4770      	bx	lr
 801a96c:	2001      	movs	r0, #1
 801a96e:	4770      	bx	lr

0801a970 <rcl_get_default_domain_id>:
 801a970:	b530      	push	{r4, r5, lr}
 801a972:	b083      	sub	sp, #12
 801a974:	2300      	movs	r3, #0
 801a976:	9300      	str	r3, [sp, #0]
 801a978:	b1d0      	cbz	r0, 801a9b0 <rcl_get_default_domain_id+0x40>
 801a97a:	4604      	mov	r4, r0
 801a97c:	4669      	mov	r1, sp
 801a97e:	4815      	ldr	r0, [pc, #84]	@ (801a9d4 <rcl_get_default_domain_id+0x64>)
 801a980:	f7f5 fd94 	bl	80104ac <rcutils_get_env>
 801a984:	4602      	mov	r2, r0
 801a986:	b110      	cbz	r0, 801a98e <rcl_get_default_domain_id+0x1e>
 801a988:	2001      	movs	r0, #1
 801a98a:	b003      	add	sp, #12
 801a98c:	bd30      	pop	{r4, r5, pc}
 801a98e:	9b00      	ldr	r3, [sp, #0]
 801a990:	b18b      	cbz	r3, 801a9b6 <rcl_get_default_domain_id+0x46>
 801a992:	7818      	ldrb	r0, [r3, #0]
 801a994:	2800      	cmp	r0, #0
 801a996:	d0f8      	beq.n	801a98a <rcl_get_default_domain_id+0x1a>
 801a998:	a901      	add	r1, sp, #4
 801a99a:	4618      	mov	r0, r3
 801a99c:	9201      	str	r2, [sp, #4]
 801a99e:	f001 faf9 	bl	801bf94 <strtoul>
 801a9a2:	4605      	mov	r5, r0
 801a9a4:	b150      	cbz	r0, 801a9bc <rcl_get_default_domain_id+0x4c>
 801a9a6:	1c43      	adds	r3, r0, #1
 801a9a8:	d00d      	beq.n	801a9c6 <rcl_get_default_domain_id+0x56>
 801a9aa:	6025      	str	r5, [r4, #0]
 801a9ac:	2000      	movs	r0, #0
 801a9ae:	e7ec      	b.n	801a98a <rcl_get_default_domain_id+0x1a>
 801a9b0:	200b      	movs	r0, #11
 801a9b2:	b003      	add	sp, #12
 801a9b4:	bd30      	pop	{r4, r5, pc}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	b003      	add	sp, #12
 801a9ba:	bd30      	pop	{r4, r5, pc}
 801a9bc:	9b01      	ldr	r3, [sp, #4]
 801a9be:	781b      	ldrb	r3, [r3, #0]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d0f2      	beq.n	801a9aa <rcl_get_default_domain_id+0x3a>
 801a9c4:	e7e0      	b.n	801a988 <rcl_get_default_domain_id+0x18>
 801a9c6:	f001 fe25 	bl	801c614 <__errno>
 801a9ca:	6803      	ldr	r3, [r0, #0]
 801a9cc:	2b22      	cmp	r3, #34	@ 0x22
 801a9ce:	d1ec      	bne.n	801a9aa <rcl_get_default_domain_id+0x3a>
 801a9d0:	e7da      	b.n	801a988 <rcl_get_default_domain_id+0x18>
 801a9d2:	bf00      	nop
 801a9d4:	0801dccc 	.word	0x0801dccc

0801a9d8 <rcl_expand_topic_name>:
 801a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9dc:	b08b      	sub	sp, #44	@ 0x2c
 801a9de:	9306      	str	r3, [sp, #24]
 801a9e0:	2800      	cmp	r0, #0
 801a9e2:	f000 80ad 	beq.w	801ab40 <rcl_expand_topic_name+0x168>
 801a9e6:	460e      	mov	r6, r1
 801a9e8:	2900      	cmp	r1, #0
 801a9ea:	f000 80a9 	beq.w	801ab40 <rcl_expand_topic_name+0x168>
 801a9ee:	4617      	mov	r7, r2
 801a9f0:	2a00      	cmp	r2, #0
 801a9f2:	f000 80a5 	beq.w	801ab40 <rcl_expand_topic_name+0x168>
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	f000 80a2 	beq.w	801ab40 <rcl_expand_topic_name+0x168>
 801a9fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	f000 809e 	beq.w	801ab40 <rcl_expand_topic_name+0x168>
 801aa04:	2200      	movs	r2, #0
 801aa06:	a909      	add	r1, sp, #36	@ 0x24
 801aa08:	4680      	mov	r8, r0
 801aa0a:	f000 f949 	bl	801aca0 <rcl_validate_topic_name>
 801aa0e:	4604      	mov	r4, r0
 801aa10:	2800      	cmp	r0, #0
 801aa12:	f040 8096 	bne.w	801ab42 <rcl_expand_topic_name+0x16a>
 801aa16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	f040 809a 	bne.w	801ab52 <rcl_expand_topic_name+0x17a>
 801aa1e:	4602      	mov	r2, r0
 801aa20:	a909      	add	r1, sp, #36	@ 0x24
 801aa22:	4630      	mov	r0, r6
 801aa24:	f7f5 ffe0 	bl	80109e8 <rmw_validate_node_name>
 801aa28:	2800      	cmp	r0, #0
 801aa2a:	f040 808e 	bne.w	801ab4a <rcl_expand_topic_name+0x172>
 801aa2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa30:	2a00      	cmp	r2, #0
 801aa32:	f040 8093 	bne.w	801ab5c <rcl_expand_topic_name+0x184>
 801aa36:	a909      	add	r1, sp, #36	@ 0x24
 801aa38:	4638      	mov	r0, r7
 801aa3a:	f7f5 ffb7 	bl	80109ac <rmw_validate_namespace>
 801aa3e:	2800      	cmp	r0, #0
 801aa40:	f040 8083 	bne.w	801ab4a <rcl_expand_topic_name+0x172>
 801aa44:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801aa46:	2c00      	cmp	r4, #0
 801aa48:	f040 80ed 	bne.w	801ac26 <rcl_expand_topic_name+0x24e>
 801aa4c:	217b      	movs	r1, #123	@ 0x7b
 801aa4e:	4640      	mov	r0, r8
 801aa50:	f001 fd54 	bl	801c4fc <strchr>
 801aa54:	f898 3000 	ldrb.w	r3, [r8]
 801aa58:	2b2f      	cmp	r3, #47	@ 0x2f
 801aa5a:	4605      	mov	r5, r0
 801aa5c:	f000 809e 	beq.w	801ab9c <rcl_expand_topic_name+0x1c4>
 801aa60:	2b7e      	cmp	r3, #126	@ 0x7e
 801aa62:	f040 80a2 	bne.w	801abaa <rcl_expand_topic_name+0x1d2>
 801aa66:	4638      	mov	r0, r7
 801aa68:	f7e5 fbdc 	bl	8000224 <strlen>
 801aa6c:	4a82      	ldr	r2, [pc, #520]	@ (801ac78 <rcl_expand_topic_name+0x2a0>)
 801aa6e:	4b83      	ldr	r3, [pc, #524]	@ (801ac7c <rcl_expand_topic_name+0x2a4>)
 801aa70:	2801      	cmp	r0, #1
 801aa72:	bf18      	it	ne
 801aa74:	4613      	movne	r3, r2
 801aa76:	9302      	str	r3, [sp, #8]
 801aa78:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801aa7a:	9300      	str	r3, [sp, #0]
 801aa7c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801aa80:	f108 0301 	add.w	r3, r8, #1
 801aa84:	9305      	str	r3, [sp, #20]
 801aa86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801aa8a:	9301      	str	r3, [sp, #4]
 801aa8c:	ab14      	add	r3, sp, #80	@ 0x50
 801aa8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa90:	f7f5 fd56 	bl	8010540 <rcutils_format_string_limit>
 801aa94:	4682      	mov	sl, r0
 801aa96:	2800      	cmp	r0, #0
 801aa98:	f000 80c7 	beq.w	801ac2a <rcl_expand_topic_name+0x252>
 801aa9c:	2d00      	cmp	r5, #0
 801aa9e:	f000 80a2 	beq.w	801abe6 <rcl_expand_topic_name+0x20e>
 801aaa2:	217b      	movs	r1, #123	@ 0x7b
 801aaa4:	f001 fd2a 	bl	801c4fc <strchr>
 801aaa8:	46d1      	mov	r9, sl
 801aaaa:	4605      	mov	r5, r0
 801aaac:	9407      	str	r4, [sp, #28]
 801aaae:	46d3      	mov	fp, sl
 801aab0:	464c      	mov	r4, r9
 801aab2:	2d00      	cmp	r5, #0
 801aab4:	f000 80be 	beq.w	801ac34 <rcl_expand_topic_name+0x25c>
 801aab8:	217d      	movs	r1, #125	@ 0x7d
 801aaba:	4620      	mov	r0, r4
 801aabc:	f001 fd1e 	bl	801c4fc <strchr>
 801aac0:	eba0 0905 	sub.w	r9, r0, r5
 801aac4:	f109 0a01 	add.w	sl, r9, #1
 801aac8:	486d      	ldr	r0, [pc, #436]	@ (801ac80 <rcl_expand_topic_name+0x2a8>)
 801aaca:	4652      	mov	r2, sl
 801aacc:	4629      	mov	r1, r5
 801aace:	f001 fd22 	bl	801c516 <strncmp>
 801aad2:	2800      	cmp	r0, #0
 801aad4:	d067      	beq.n	801aba6 <rcl_expand_topic_name+0x1ce>
 801aad6:	486b      	ldr	r0, [pc, #428]	@ (801ac84 <rcl_expand_topic_name+0x2ac>)
 801aad8:	4652      	mov	r2, sl
 801aada:	4629      	mov	r1, r5
 801aadc:	f001 fd1b 	bl	801c516 <strncmp>
 801aae0:	b130      	cbz	r0, 801aaf0 <rcl_expand_topic_name+0x118>
 801aae2:	4869      	ldr	r0, [pc, #420]	@ (801ac88 <rcl_expand_topic_name+0x2b0>)
 801aae4:	4652      	mov	r2, sl
 801aae6:	4629      	mov	r1, r5
 801aae8:	f001 fd15 	bl	801c516 <strncmp>
 801aaec:	2800      	cmp	r0, #0
 801aaee:	d137      	bne.n	801ab60 <rcl_expand_topic_name+0x188>
 801aaf0:	46b9      	mov	r9, r7
 801aaf2:	ab16      	add	r3, sp, #88	@ 0x58
 801aaf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aaf8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aafc:	ab14      	add	r3, sp, #80	@ 0x50
 801aafe:	4628      	mov	r0, r5
 801ab00:	cb0c      	ldmia	r3, {r2, r3}
 801ab02:	4651      	mov	r1, sl
 801ab04:	f7f5 fe58 	bl	80107b8 <rcutils_strndup>
 801ab08:	4605      	mov	r5, r0
 801ab0a:	2800      	cmp	r0, #0
 801ab0c:	f000 809c 	beq.w	801ac48 <rcl_expand_topic_name+0x270>
 801ab10:	464a      	mov	r2, r9
 801ab12:	4620      	mov	r0, r4
 801ab14:	ab14      	add	r3, sp, #80	@ 0x50
 801ab16:	4629      	mov	r1, r5
 801ab18:	f7f5 fd4c 	bl	80105b4 <rcutils_repl_str>
 801ab1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ab1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab20:	4604      	mov	r4, r0
 801ab22:	4628      	mov	r0, r5
 801ab24:	4798      	blx	r3
 801ab26:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab28:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ab2a:	4658      	mov	r0, fp
 801ab2c:	4798      	blx	r3
 801ab2e:	2c00      	cmp	r4, #0
 801ab30:	d07b      	beq.n	801ac2a <rcl_expand_topic_name+0x252>
 801ab32:	217b      	movs	r1, #123	@ 0x7b
 801ab34:	4620      	mov	r0, r4
 801ab36:	f001 fce1 	bl	801c4fc <strchr>
 801ab3a:	46a3      	mov	fp, r4
 801ab3c:	4605      	mov	r5, r0
 801ab3e:	e7b8      	b.n	801aab2 <rcl_expand_topic_name+0xda>
 801ab40:	240b      	movs	r4, #11
 801ab42:	4620      	mov	r0, r4
 801ab44:	b00b      	add	sp, #44	@ 0x2c
 801ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab4a:	f7fb ffdb 	bl	8016b04 <rcl_convert_rmw_ret_to_rcl_ret>
 801ab4e:	4604      	mov	r4, r0
 801ab50:	e7f7      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ab52:	2467      	movs	r4, #103	@ 0x67
 801ab54:	4620      	mov	r0, r4
 801ab56:	b00b      	add	sp, #44	@ 0x2c
 801ab58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab5c:	24c9      	movs	r4, #201	@ 0xc9
 801ab5e:	e7f0      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ab60:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801ab64:	9806      	ldr	r0, [sp, #24]
 801ab66:	1c69      	adds	r1, r5, #1
 801ab68:	f7fe f934 	bl	8018dd4 <rcutils_string_map_getn>
 801ab6c:	4681      	mov	r9, r0
 801ab6e:	2800      	cmp	r0, #0
 801ab70:	d1bf      	bne.n	801aaf2 <rcl_expand_topic_name+0x11a>
 801ab72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ab74:	aa16      	add	r2, sp, #88	@ 0x58
 801ab76:	6018      	str	r0, [r3, #0]
 801ab78:	ca07      	ldmia	r2, {r0, r1, r2}
 801ab7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ab7e:	ab14      	add	r3, sp, #80	@ 0x50
 801ab80:	cb0c      	ldmia	r3, {r2, r3}
 801ab82:	4651      	mov	r1, sl
 801ab84:	4628      	mov	r0, r5
 801ab86:	f7f5 fe17 	bl	80107b8 <rcutils_strndup>
 801ab8a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ab8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab8e:	4798      	blx	r3
 801ab90:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ab92:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ab94:	4658      	mov	r0, fp
 801ab96:	2469      	movs	r4, #105	@ 0x69
 801ab98:	4798      	blx	r3
 801ab9a:	e7d2      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ab9c:	2800      	cmp	r0, #0
 801ab9e:	d05b      	beq.n	801ac58 <rcl_expand_topic_name+0x280>
 801aba0:	46c1      	mov	r9, r8
 801aba2:	46a2      	mov	sl, r4
 801aba4:	e782      	b.n	801aaac <rcl_expand_topic_name+0xd4>
 801aba6:	46b1      	mov	r9, r6
 801aba8:	e7a3      	b.n	801aaf2 <rcl_expand_topic_name+0x11a>
 801abaa:	2800      	cmp	r0, #0
 801abac:	d1f8      	bne.n	801aba0 <rcl_expand_topic_name+0x1c8>
 801abae:	4638      	mov	r0, r7
 801abb0:	f7e5 fb38 	bl	8000224 <strlen>
 801abb4:	4a35      	ldr	r2, [pc, #212]	@ (801ac8c <rcl_expand_topic_name+0x2b4>)
 801abb6:	4b36      	ldr	r3, [pc, #216]	@ (801ac90 <rcl_expand_topic_name+0x2b8>)
 801abb8:	f8cd 8010 	str.w	r8, [sp, #16]
 801abbc:	2801      	cmp	r0, #1
 801abbe:	bf18      	it	ne
 801abc0:	4613      	movne	r3, r2
 801abc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801abc6:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801abca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801abcc:	9703      	str	r7, [sp, #12]
 801abce:	9200      	str	r2, [sp, #0]
 801abd0:	ab14      	add	r3, sp, #80	@ 0x50
 801abd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801abd4:	f7f5 fcb4 	bl	8010540 <rcutils_format_string_limit>
 801abd8:	4682      	mov	sl, r0
 801abda:	4653      	mov	r3, sl
 801abdc:	b32b      	cbz	r3, 801ac2a <rcl_expand_topic_name+0x252>
 801abde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801abe0:	f8c3 a000 	str.w	sl, [r3]
 801abe4:	e7ad      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801abe6:	f89a 3000 	ldrb.w	r3, [sl]
 801abea:	2b2f      	cmp	r3, #47	@ 0x2f
 801abec:	d0f7      	beq.n	801abde <rcl_expand_topic_name+0x206>
 801abee:	4638      	mov	r0, r7
 801abf0:	f7e5 fb18 	bl	8000224 <strlen>
 801abf4:	4a25      	ldr	r2, [pc, #148]	@ (801ac8c <rcl_expand_topic_name+0x2b4>)
 801abf6:	4b26      	ldr	r3, [pc, #152]	@ (801ac90 <rcl_expand_topic_name+0x2b8>)
 801abf8:	f8cd a010 	str.w	sl, [sp, #16]
 801abfc:	2801      	cmp	r0, #1
 801abfe:	bf18      	it	ne
 801ac00:	4613      	movne	r3, r2
 801ac02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ac06:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ac0a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ac0c:	9703      	str	r7, [sp, #12]
 801ac0e:	9200      	str	r2, [sp, #0]
 801ac10:	ab14      	add	r3, sp, #80	@ 0x50
 801ac12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ac14:	f7f5 fc94 	bl	8010540 <rcutils_format_string_limit>
 801ac18:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac1a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ac1c:	4605      	mov	r5, r0
 801ac1e:	4650      	mov	r0, sl
 801ac20:	4798      	blx	r3
 801ac22:	46aa      	mov	sl, r5
 801ac24:	e7d9      	b.n	801abda <rcl_expand_topic_name+0x202>
 801ac26:	24ca      	movs	r4, #202	@ 0xca
 801ac28:	e78b      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ac2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	6013      	str	r3, [r2, #0]
 801ac30:	240a      	movs	r4, #10
 801ac32:	e786      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ac34:	465b      	mov	r3, fp
 801ac36:	9c07      	ldr	r4, [sp, #28]
 801ac38:	46da      	mov	sl, fp
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d1d3      	bne.n	801abe6 <rcl_expand_topic_name+0x20e>
 801ac3e:	f898 3000 	ldrb.w	r3, [r8]
 801ac42:	2b2f      	cmp	r3, #47	@ 0x2f
 801ac44:	d0cb      	beq.n	801abde <rcl_expand_topic_name+0x206>
 801ac46:	e7b2      	b.n	801abae <rcl_expand_topic_name+0x1d6>
 801ac48:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801ac4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac4e:	6015      	str	r5, [r2, #0]
 801ac50:	4658      	mov	r0, fp
 801ac52:	4798      	blx	r3
 801ac54:	240a      	movs	r4, #10
 801ac56:	e774      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ac58:	ab17      	add	r3, sp, #92	@ 0x5c
 801ac5a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ac5e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ac62:	ab14      	add	r3, sp, #80	@ 0x50
 801ac64:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ac66:	4640      	mov	r0, r8
 801ac68:	f7f5 fd84 	bl	8010774 <rcutils_strdup>
 801ac6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	6018      	str	r0, [r3, #0]
 801ac72:	bf08      	it	eq
 801ac74:	240a      	moveq	r4, #10
 801ac76:	e764      	b.n	801ab42 <rcl_expand_topic_name+0x16a>
 801ac78:	0801dcdc 	.word	0x0801dcdc
 801ac7c:	0801d9d8 	.word	0x0801d9d8
 801ac80:	0801dce4 	.word	0x0801dce4
 801ac84:	0801dcec 	.word	0x0801dcec
 801ac88:	0801dcf4 	.word	0x0801dcf4
 801ac8c:	0801d6a4 	.word	0x0801d6a4
 801ac90:	0801d69c 	.word	0x0801d69c

0801ac94 <rcl_get_default_topic_name_substitutions>:
 801ac94:	2800      	cmp	r0, #0
 801ac96:	bf0c      	ite	eq
 801ac98:	200b      	moveq	r0, #11
 801ac9a:	2000      	movne	r0, #0
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop

0801aca0 <rcl_validate_topic_name>:
 801aca0:	2800      	cmp	r0, #0
 801aca2:	d07a      	beq.n	801ad9a <rcl_validate_topic_name+0xfa>
 801aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aca8:	460e      	mov	r6, r1
 801acaa:	2900      	cmp	r1, #0
 801acac:	d07c      	beq.n	801ada8 <rcl_validate_topic_name+0x108>
 801acae:	4617      	mov	r7, r2
 801acb0:	4605      	mov	r5, r0
 801acb2:	f7e5 fab7 	bl	8000224 <strlen>
 801acb6:	b1b0      	cbz	r0, 801ace6 <rcl_validate_topic_name+0x46>
 801acb8:	f895 9000 	ldrb.w	r9, [r5]
 801acbc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801ae40 <rcl_validate_topic_name+0x1a0>
 801acc0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801acc4:	f013 0304 	ands.w	r3, r3, #4
 801acc8:	d169      	bne.n	801ad9e <rcl_validate_topic_name+0xfe>
 801acca:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801acce:	f815 2008 	ldrb.w	r2, [r5, r8]
 801acd2:	2a2f      	cmp	r2, #47	@ 0x2f
 801acd4:	d10e      	bne.n	801acf4 <rcl_validate_topic_name+0x54>
 801acd6:	2202      	movs	r2, #2
 801acd8:	6032      	str	r2, [r6, #0]
 801acda:	b36f      	cbz	r7, 801ad38 <rcl_validate_topic_name+0x98>
 801acdc:	f8c7 8000 	str.w	r8, [r7]
 801ace0:	4618      	mov	r0, r3
 801ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ace6:	2301      	movs	r3, #1
 801ace8:	6033      	str	r3, [r6, #0]
 801acea:	b32f      	cbz	r7, 801ad38 <rcl_validate_topic_name+0x98>
 801acec:	2000      	movs	r0, #0
 801acee:	6038      	str	r0, [r7, #0]
 801acf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acf4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801acf8:	461c      	mov	r4, r3
 801acfa:	4619      	mov	r1, r3
 801acfc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ad00:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801ad04:	f1be 0f09 	cmp.w	lr, #9
 801ad08:	d919      	bls.n	801ad3e <rcl_validate_topic_name+0x9e>
 801ad0a:	f022 0e20 	bic.w	lr, r2, #32
 801ad0e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801ad12:	f1be 0f19 	cmp.w	lr, #25
 801ad16:	d912      	bls.n	801ad3e <rcl_validate_topic_name+0x9e>
 801ad18:	2a5f      	cmp	r2, #95	@ 0x5f
 801ad1a:	d019      	beq.n	801ad50 <rcl_validate_topic_name+0xb0>
 801ad1c:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad1e:	d051      	beq.n	801adc4 <rcl_validate_topic_name+0x124>
 801ad20:	2a7e      	cmp	r2, #126	@ 0x7e
 801ad22:	d048      	beq.n	801adb6 <rcl_validate_topic_name+0x116>
 801ad24:	2a7b      	cmp	r2, #123	@ 0x7b
 801ad26:	d054      	beq.n	801add2 <rcl_validate_topic_name+0x132>
 801ad28:	2a7d      	cmp	r2, #125	@ 0x7d
 801ad2a:	d161      	bne.n	801adf0 <rcl_validate_topic_name+0x150>
 801ad2c:	2c00      	cmp	r4, #0
 801ad2e:	d155      	bne.n	801addc <rcl_validate_topic_name+0x13c>
 801ad30:	2305      	movs	r3, #5
 801ad32:	6033      	str	r3, [r6, #0]
 801ad34:	b107      	cbz	r7, 801ad38 <rcl_validate_topic_name+0x98>
 801ad36:	6039      	str	r1, [r7, #0]
 801ad38:	2000      	movs	r0, #0
 801ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad3e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ad42:	0752      	lsls	r2, r2, #29
 801ad44:	d504      	bpl.n	801ad50 <rcl_validate_topic_name+0xb0>
 801ad46:	b11c      	cbz	r4, 801ad50 <rcl_validate_topic_name+0xb0>
 801ad48:	b111      	cbz	r1, 801ad50 <rcl_validate_topic_name+0xb0>
 801ad4a:	1e4a      	subs	r2, r1, #1
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d02d      	beq.n	801adac <rcl_validate_topic_name+0x10c>
 801ad50:	3101      	adds	r1, #1
 801ad52:	4288      	cmp	r0, r1
 801ad54:	d1d2      	bne.n	801acfc <rcl_validate_topic_name+0x5c>
 801ad56:	2c00      	cmp	r4, #0
 801ad58:	d145      	bne.n	801ade6 <rcl_validate_topic_name+0x146>
 801ad5a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801ad5e:	d04f      	beq.n	801ae00 <rcl_validate_topic_name+0x160>
 801ad60:	4620      	mov	r0, r4
 801ad62:	2301      	movs	r3, #1
 801ad64:	e006      	b.n	801ad74 <rcl_validate_topic_name+0xd4>
 801ad66:	428b      	cmp	r3, r1
 801ad68:	f105 0501 	add.w	r5, r5, #1
 801ad6c:	f103 0201 	add.w	r2, r3, #1
 801ad70:	d236      	bcs.n	801ade0 <rcl_validate_topic_name+0x140>
 801ad72:	4613      	mov	r3, r2
 801ad74:	4580      	cmp	r8, r0
 801ad76:	f100 0001 	add.w	r0, r0, #1
 801ad7a:	d0f4      	beq.n	801ad66 <rcl_validate_topic_name+0xc6>
 801ad7c:	782a      	ldrb	r2, [r5, #0]
 801ad7e:	2a2f      	cmp	r2, #47	@ 0x2f
 801ad80:	d1f1      	bne.n	801ad66 <rcl_validate_topic_name+0xc6>
 801ad82:	786a      	ldrb	r2, [r5, #1]
 801ad84:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ad88:	0754      	lsls	r4, r2, #29
 801ad8a:	d5ec      	bpl.n	801ad66 <rcl_validate_topic_name+0xc6>
 801ad8c:	2204      	movs	r2, #4
 801ad8e:	6032      	str	r2, [r6, #0]
 801ad90:	2f00      	cmp	r7, #0
 801ad92:	d0d1      	beq.n	801ad38 <rcl_validate_topic_name+0x98>
 801ad94:	603b      	str	r3, [r7, #0]
 801ad96:	2000      	movs	r0, #0
 801ad98:	e7aa      	b.n	801acf0 <rcl_validate_topic_name+0x50>
 801ad9a:	200b      	movs	r0, #11
 801ad9c:	4770      	bx	lr
 801ad9e:	2304      	movs	r3, #4
 801ada0:	6033      	str	r3, [r6, #0]
 801ada2:	2f00      	cmp	r7, #0
 801ada4:	d1a2      	bne.n	801acec <rcl_validate_topic_name+0x4c>
 801ada6:	e7c7      	b.n	801ad38 <rcl_validate_topic_name+0x98>
 801ada8:	200b      	movs	r0, #11
 801adaa:	e7a1      	b.n	801acf0 <rcl_validate_topic_name+0x50>
 801adac:	2309      	movs	r3, #9
 801adae:	6033      	str	r3, [r6, #0]
 801adb0:	2f00      	cmp	r7, #0
 801adb2:	d1c0      	bne.n	801ad36 <rcl_validate_topic_name+0x96>
 801adb4:	e7c0      	b.n	801ad38 <rcl_validate_topic_name+0x98>
 801adb6:	2900      	cmp	r1, #0
 801adb8:	d0ca      	beq.n	801ad50 <rcl_validate_topic_name+0xb0>
 801adba:	2306      	movs	r3, #6
 801adbc:	6033      	str	r3, [r6, #0]
 801adbe:	2f00      	cmp	r7, #0
 801adc0:	d1b9      	bne.n	801ad36 <rcl_validate_topic_name+0x96>
 801adc2:	e7b9      	b.n	801ad38 <rcl_validate_topic_name+0x98>
 801adc4:	2c00      	cmp	r4, #0
 801adc6:	d0c3      	beq.n	801ad50 <rcl_validate_topic_name+0xb0>
 801adc8:	2308      	movs	r3, #8
 801adca:	6033      	str	r3, [r6, #0]
 801adcc:	2f00      	cmp	r7, #0
 801adce:	d1b2      	bne.n	801ad36 <rcl_validate_topic_name+0x96>
 801add0:	e7b2      	b.n	801ad38 <rcl_validate_topic_name+0x98>
 801add2:	2c00      	cmp	r4, #0
 801add4:	d1f8      	bne.n	801adc8 <rcl_validate_topic_name+0x128>
 801add6:	460b      	mov	r3, r1
 801add8:	2401      	movs	r4, #1
 801adda:	e7b9      	b.n	801ad50 <rcl_validate_topic_name+0xb0>
 801addc:	2400      	movs	r4, #0
 801adde:	e7b7      	b.n	801ad50 <rcl_validate_topic_name+0xb0>
 801ade0:	2000      	movs	r0, #0
 801ade2:	6030      	str	r0, [r6, #0]
 801ade4:	e784      	b.n	801acf0 <rcl_validate_topic_name+0x50>
 801ade6:	2205      	movs	r2, #5
 801ade8:	6032      	str	r2, [r6, #0]
 801adea:	2f00      	cmp	r7, #0
 801adec:	d1d2      	bne.n	801ad94 <rcl_validate_topic_name+0xf4>
 801adee:	e7a3      	b.n	801ad38 <rcl_validate_topic_name+0x98>
 801adf0:	2c00      	cmp	r4, #0
 801adf2:	bf14      	ite	ne
 801adf4:	2308      	movne	r3, #8
 801adf6:	2303      	moveq	r3, #3
 801adf8:	6033      	str	r3, [r6, #0]
 801adfa:	2f00      	cmp	r7, #0
 801adfc:	d19b      	bne.n	801ad36 <rcl_validate_topic_name+0x96>
 801adfe:	e79b      	b.n	801ad38 <rcl_validate_topic_name+0x98>
 801ae00:	2301      	movs	r3, #1
 801ae02:	e00a      	b.n	801ae1a <rcl_validate_topic_name+0x17a>
 801ae04:	2c01      	cmp	r4, #1
 801ae06:	d013      	beq.n	801ae30 <rcl_validate_topic_name+0x190>
 801ae08:	4299      	cmp	r1, r3
 801ae0a:	f104 0401 	add.w	r4, r4, #1
 801ae0e:	f105 0501 	add.w	r5, r5, #1
 801ae12:	f103 0201 	add.w	r2, r3, #1
 801ae16:	d9e3      	bls.n	801ade0 <rcl_validate_topic_name+0x140>
 801ae18:	4613      	mov	r3, r2
 801ae1a:	45a0      	cmp	r8, r4
 801ae1c:	d0f4      	beq.n	801ae08 <rcl_validate_topic_name+0x168>
 801ae1e:	782a      	ldrb	r2, [r5, #0]
 801ae20:	2a2f      	cmp	r2, #47	@ 0x2f
 801ae22:	d1ef      	bne.n	801ae04 <rcl_validate_topic_name+0x164>
 801ae24:	786a      	ldrb	r2, [r5, #1]
 801ae26:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ae2a:	0752      	lsls	r2, r2, #29
 801ae2c:	d5ec      	bpl.n	801ae08 <rcl_validate_topic_name+0x168>
 801ae2e:	e7ad      	b.n	801ad8c <rcl_validate_topic_name+0xec>
 801ae30:	2307      	movs	r3, #7
 801ae32:	6033      	str	r3, [r6, #0]
 801ae34:	2f00      	cmp	r7, #0
 801ae36:	f43f af7f 	beq.w	801ad38 <rcl_validate_topic_name+0x98>
 801ae3a:	603c      	str	r4, [r7, #0]
 801ae3c:	2000      	movs	r0, #0
 801ae3e:	e757      	b.n	801acf0 <rcl_validate_topic_name+0x50>
 801ae40:	0801e87f 	.word	0x0801e87f

0801ae44 <geometry_msgs__msg__Pose__init>:
 801ae44:	b570      	push	{r4, r5, r6, lr}
 801ae46:	4605      	mov	r5, r0
 801ae48:	b1a8      	cbz	r0, 801ae76 <geometry_msgs__msg__Pose__init+0x32>
 801ae4a:	f000 f8e5 	bl	801b018 <geometry_msgs__msg__Point__init>
 801ae4e:	4604      	mov	r4, r0
 801ae50:	b140      	cbz	r0, 801ae64 <geometry_msgs__msg__Pose__init+0x20>
 801ae52:	f105 0618 	add.w	r6, r5, #24
 801ae56:	4630      	mov	r0, r6
 801ae58:	f000 f826 	bl	801aea8 <geometry_msgs__msg__Quaternion__init>
 801ae5c:	4604      	mov	r4, r0
 801ae5e:	b168      	cbz	r0, 801ae7c <geometry_msgs__msg__Pose__init+0x38>
 801ae60:	4620      	mov	r0, r4
 801ae62:	bd70      	pop	{r4, r5, r6, pc}
 801ae64:	4628      	mov	r0, r5
 801ae66:	f000 f8db 	bl	801b020 <geometry_msgs__msg__Point__fini>
 801ae6a:	f105 0018 	add.w	r0, r5, #24
 801ae6e:	f000 f82f 	bl	801aed0 <geometry_msgs__msg__Quaternion__fini>
 801ae72:	4620      	mov	r0, r4
 801ae74:	bd70      	pop	{r4, r5, r6, pc}
 801ae76:	4604      	mov	r4, r0
 801ae78:	4620      	mov	r0, r4
 801ae7a:	bd70      	pop	{r4, r5, r6, pc}
 801ae7c:	4628      	mov	r0, r5
 801ae7e:	f000 f8cf 	bl	801b020 <geometry_msgs__msg__Point__fini>
 801ae82:	4630      	mov	r0, r6
 801ae84:	f000 f824 	bl	801aed0 <geometry_msgs__msg__Quaternion__fini>
 801ae88:	e7ea      	b.n	801ae60 <geometry_msgs__msg__Pose__init+0x1c>
 801ae8a:	bf00      	nop

0801ae8c <geometry_msgs__msg__Pose__fini>:
 801ae8c:	b148      	cbz	r0, 801aea2 <geometry_msgs__msg__Pose__fini+0x16>
 801ae8e:	b510      	push	{r4, lr}
 801ae90:	4604      	mov	r4, r0
 801ae92:	f000 f8c5 	bl	801b020 <geometry_msgs__msg__Point__fini>
 801ae96:	f104 0018 	add.w	r0, r4, #24
 801ae9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae9e:	f000 b817 	b.w	801aed0 <geometry_msgs__msg__Quaternion__fini>
 801aea2:	4770      	bx	lr
 801aea4:	0000      	movs	r0, r0
	...

0801aea8 <geometry_msgs__msg__Quaternion__init>:
 801aea8:	b160      	cbz	r0, 801aec4 <geometry_msgs__msg__Quaternion__init+0x1c>
 801aeaa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 801aec8 <geometry_msgs__msg__Quaternion__init+0x20>
 801aeae:	2200      	movs	r2, #0
 801aeb0:	2300      	movs	r3, #0
 801aeb2:	e9c0 2300 	strd	r2, r3, [r0]
 801aeb6:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801aeba:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801aebe:	ed80 7b06 	vstr	d7, [r0, #24]
 801aec2:	2001      	movs	r0, #1
 801aec4:	4770      	bx	lr
 801aec6:	bf00      	nop
 801aec8:	00000000 	.word	0x00000000
 801aecc:	3ff00000 	.word	0x3ff00000

0801aed0 <geometry_msgs__msg__Quaternion__fini>:
 801aed0:	4770      	bx	lr
 801aed2:	bf00      	nop

0801aed4 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 801aed4:	f000 b8a0 	b.w	801b018 <geometry_msgs__msg__Point__init>

0801aed8 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 801aed8:	f000 b8a2 	b.w	801b020 <geometry_msgs__msg__Point__fini>

0801aedc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801aedc:	4b04      	ldr	r3, [pc, #16]	@ (801aef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801aede:	681a      	ldr	r2, [r3, #0]
 801aee0:	b10a      	cbz	r2, 801aee6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 801aee2:	4803      	ldr	r0, [pc, #12]	@ (801aef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801aee4:	4770      	bx	lr
 801aee6:	4a03      	ldr	r2, [pc, #12]	@ (801aef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 801aee8:	4801      	ldr	r0, [pc, #4]	@ (801aef0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801aeea:	6812      	ldr	r2, [r2, #0]
 801aeec:	601a      	str	r2, [r3, #0]
 801aeee:	4770      	bx	lr
 801aef0:	200008cc 	.word	0x200008cc
 801aef4:	20000310 	.word	0x20000310

0801aef8 <get_serialized_size_geometry_msgs__msg__Point>:
 801aef8:	b1b8      	cbz	r0, 801af2a <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801aefa:	b538      	push	{r3, r4, r5, lr}
 801aefc:	460d      	mov	r5, r1
 801aefe:	4628      	mov	r0, r5
 801af00:	2108      	movs	r1, #8
 801af02:	f7f3 f817 	bl	800df34 <ucdr_alignment>
 801af06:	f105 0308 	add.w	r3, r5, #8
 801af0a:	181c      	adds	r4, r3, r0
 801af0c:	2108      	movs	r1, #8
 801af0e:	4620      	mov	r0, r4
 801af10:	f7f3 f810 	bl	800df34 <ucdr_alignment>
 801af14:	3008      	adds	r0, #8
 801af16:	4404      	add	r4, r0
 801af18:	2108      	movs	r1, #8
 801af1a:	4620      	mov	r0, r4
 801af1c:	f7f3 f80a 	bl	800df34 <ucdr_alignment>
 801af20:	f1c5 0508 	rsb	r5, r5, #8
 801af24:	4428      	add	r0, r5
 801af26:	4420      	add	r0, r4
 801af28:	bd38      	pop	{r3, r4, r5, pc}
 801af2a:	4770      	bx	lr

0801af2c <_Point__cdr_deserialize>:
 801af2c:	b538      	push	{r3, r4, r5, lr}
 801af2e:	460c      	mov	r4, r1
 801af30:	b171      	cbz	r1, 801af50 <_Point__cdr_deserialize+0x24>
 801af32:	4605      	mov	r5, r0
 801af34:	f7f2 fe12 	bl	800db5c <ucdr_deserialize_double>
 801af38:	f104 0108 	add.w	r1, r4, #8
 801af3c:	4628      	mov	r0, r5
 801af3e:	f7f2 fe0d 	bl	800db5c <ucdr_deserialize_double>
 801af42:	f104 0110 	add.w	r1, r4, #16
 801af46:	4628      	mov	r0, r5
 801af48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af4c:	f7f2 be06 	b.w	800db5c <ucdr_deserialize_double>
 801af50:	4608      	mov	r0, r1
 801af52:	bd38      	pop	{r3, r4, r5, pc}

0801af54 <_Point__cdr_serialize>:
 801af54:	b198      	cbz	r0, 801af7e <_Point__cdr_serialize+0x2a>
 801af56:	b538      	push	{r3, r4, r5, lr}
 801af58:	ed90 0b00 	vldr	d0, [r0]
 801af5c:	460d      	mov	r5, r1
 801af5e:	4604      	mov	r4, r0
 801af60:	4608      	mov	r0, r1
 801af62:	f7f2 fc59 	bl	800d818 <ucdr_serialize_double>
 801af66:	ed94 0b02 	vldr	d0, [r4, #8]
 801af6a:	4628      	mov	r0, r5
 801af6c:	f7f2 fc54 	bl	800d818 <ucdr_serialize_double>
 801af70:	ed94 0b04 	vldr	d0, [r4, #16]
 801af74:	4628      	mov	r0, r5
 801af76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af7a:	f7f2 bc4d 	b.w	800d818 <ucdr_serialize_double>
 801af7e:	4770      	bx	lr

0801af80 <_Point__get_serialized_size>:
 801af80:	b198      	cbz	r0, 801afaa <_Point__get_serialized_size+0x2a>
 801af82:	b510      	push	{r4, lr}
 801af84:	2108      	movs	r1, #8
 801af86:	2000      	movs	r0, #0
 801af88:	f7f2 ffd4 	bl	800df34 <ucdr_alignment>
 801af8c:	f100 0408 	add.w	r4, r0, #8
 801af90:	2108      	movs	r1, #8
 801af92:	4620      	mov	r0, r4
 801af94:	f7f2 ffce 	bl	800df34 <ucdr_alignment>
 801af98:	3008      	adds	r0, #8
 801af9a:	4404      	add	r4, r0
 801af9c:	2108      	movs	r1, #8
 801af9e:	4620      	mov	r0, r4
 801afa0:	f7f2 ffc8 	bl	800df34 <ucdr_alignment>
 801afa4:	3008      	adds	r0, #8
 801afa6:	4420      	add	r0, r4
 801afa8:	bd10      	pop	{r4, pc}
 801afaa:	4770      	bx	lr

0801afac <_Point__max_serialized_size>:
 801afac:	b538      	push	{r3, r4, r5, lr}
 801afae:	2108      	movs	r1, #8
 801afb0:	2000      	movs	r0, #0
 801afb2:	f7f2 ffbf 	bl	800df34 <ucdr_alignment>
 801afb6:	f100 0508 	add.w	r5, r0, #8
 801afba:	2108      	movs	r1, #8
 801afbc:	4628      	mov	r0, r5
 801afbe:	f7f2 ffb9 	bl	800df34 <ucdr_alignment>
 801afc2:	f100 0408 	add.w	r4, r0, #8
 801afc6:	442c      	add	r4, r5
 801afc8:	2108      	movs	r1, #8
 801afca:	4620      	mov	r0, r4
 801afcc:	f7f2 ffb2 	bl	800df34 <ucdr_alignment>
 801afd0:	3008      	adds	r0, #8
 801afd2:	4420      	add	r0, r4
 801afd4:	bd38      	pop	{r3, r4, r5, pc}
 801afd6:	bf00      	nop

0801afd8 <max_serialized_size_geometry_msgs__msg__Point>:
 801afd8:	b570      	push	{r4, r5, r6, lr}
 801afda:	2301      	movs	r3, #1
 801afdc:	460c      	mov	r4, r1
 801afde:	7003      	strb	r3, [r0, #0]
 801afe0:	2108      	movs	r1, #8
 801afe2:	4620      	mov	r0, r4
 801afe4:	f7f2 ffa6 	bl	800df34 <ucdr_alignment>
 801afe8:	f104 0508 	add.w	r5, r4, #8
 801afec:	1946      	adds	r6, r0, r5
 801afee:	2108      	movs	r1, #8
 801aff0:	4630      	mov	r0, r6
 801aff2:	f7f2 ff9f 	bl	800df34 <ucdr_alignment>
 801aff6:	f100 0508 	add.w	r5, r0, #8
 801affa:	4435      	add	r5, r6
 801affc:	2108      	movs	r1, #8
 801affe:	4628      	mov	r0, r5
 801b000:	f7f2 ff98 	bl	800df34 <ucdr_alignment>
 801b004:	f1c4 0408 	rsb	r4, r4, #8
 801b008:	4420      	add	r0, r4
 801b00a:	4428      	add	r0, r5
 801b00c:	bd70      	pop	{r4, r5, r6, pc}
 801b00e:	bf00      	nop

0801b010 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 801b010:	4800      	ldr	r0, [pc, #0]	@ (801b014 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801b012:	4770      	bx	lr
 801b014:	200008d8 	.word	0x200008d8

0801b018 <geometry_msgs__msg__Point__init>:
 801b018:	3800      	subs	r0, #0
 801b01a:	bf18      	it	ne
 801b01c:	2001      	movne	r0, #1
 801b01e:	4770      	bx	lr

0801b020 <geometry_msgs__msg__Point__fini>:
 801b020:	4770      	bx	lr
 801b022:	bf00      	nop

0801b024 <cosf>:
 801b024:	ee10 3a10 	vmov	r3, s0
 801b028:	b507      	push	{r0, r1, r2, lr}
 801b02a:	4a1e      	ldr	r2, [pc, #120]	@ (801b0a4 <cosf+0x80>)
 801b02c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b030:	4293      	cmp	r3, r2
 801b032:	d806      	bhi.n	801b042 <cosf+0x1e>
 801b034:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801b0a8 <cosf+0x84>
 801b038:	b003      	add	sp, #12
 801b03a:	f85d eb04 	ldr.w	lr, [sp], #4
 801b03e:	f000 b87b 	b.w	801b138 <__kernel_cosf>
 801b042:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b046:	d304      	bcc.n	801b052 <cosf+0x2e>
 801b048:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b04c:	b003      	add	sp, #12
 801b04e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b052:	4668      	mov	r0, sp
 801b054:	f000 f910 	bl	801b278 <__ieee754_rem_pio2f>
 801b058:	f000 0003 	and.w	r0, r0, #3
 801b05c:	2801      	cmp	r0, #1
 801b05e:	d009      	beq.n	801b074 <cosf+0x50>
 801b060:	2802      	cmp	r0, #2
 801b062:	d010      	beq.n	801b086 <cosf+0x62>
 801b064:	b9b0      	cbnz	r0, 801b094 <cosf+0x70>
 801b066:	eddd 0a01 	vldr	s1, [sp, #4]
 801b06a:	ed9d 0a00 	vldr	s0, [sp]
 801b06e:	f000 f863 	bl	801b138 <__kernel_cosf>
 801b072:	e7eb      	b.n	801b04c <cosf+0x28>
 801b074:	eddd 0a01 	vldr	s1, [sp, #4]
 801b078:	ed9d 0a00 	vldr	s0, [sp]
 801b07c:	f000 f8b4 	bl	801b1e8 <__kernel_sinf>
 801b080:	eeb1 0a40 	vneg.f32	s0, s0
 801b084:	e7e2      	b.n	801b04c <cosf+0x28>
 801b086:	eddd 0a01 	vldr	s1, [sp, #4]
 801b08a:	ed9d 0a00 	vldr	s0, [sp]
 801b08e:	f000 f853 	bl	801b138 <__kernel_cosf>
 801b092:	e7f5      	b.n	801b080 <cosf+0x5c>
 801b094:	eddd 0a01 	vldr	s1, [sp, #4]
 801b098:	ed9d 0a00 	vldr	s0, [sp]
 801b09c:	2001      	movs	r0, #1
 801b09e:	f000 f8a3 	bl	801b1e8 <__kernel_sinf>
 801b0a2:	e7d3      	b.n	801b04c <cosf+0x28>
 801b0a4:	3f490fd8 	.word	0x3f490fd8
 801b0a8:	00000000 	.word	0x00000000

0801b0ac <sinf>:
 801b0ac:	ee10 3a10 	vmov	r3, s0
 801b0b0:	b507      	push	{r0, r1, r2, lr}
 801b0b2:	4a1f      	ldr	r2, [pc, #124]	@ (801b130 <sinf+0x84>)
 801b0b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b0b8:	4293      	cmp	r3, r2
 801b0ba:	d807      	bhi.n	801b0cc <sinf+0x20>
 801b0bc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801b134 <sinf+0x88>
 801b0c0:	2000      	movs	r0, #0
 801b0c2:	b003      	add	sp, #12
 801b0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0c8:	f000 b88e 	b.w	801b1e8 <__kernel_sinf>
 801b0cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b0d0:	d304      	bcc.n	801b0dc <sinf+0x30>
 801b0d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b0d6:	b003      	add	sp, #12
 801b0d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0dc:	4668      	mov	r0, sp
 801b0de:	f000 f8cb 	bl	801b278 <__ieee754_rem_pio2f>
 801b0e2:	f000 0003 	and.w	r0, r0, #3
 801b0e6:	2801      	cmp	r0, #1
 801b0e8:	d00a      	beq.n	801b100 <sinf+0x54>
 801b0ea:	2802      	cmp	r0, #2
 801b0ec:	d00f      	beq.n	801b10e <sinf+0x62>
 801b0ee:	b9c0      	cbnz	r0, 801b122 <sinf+0x76>
 801b0f0:	eddd 0a01 	vldr	s1, [sp, #4]
 801b0f4:	ed9d 0a00 	vldr	s0, [sp]
 801b0f8:	2001      	movs	r0, #1
 801b0fa:	f000 f875 	bl	801b1e8 <__kernel_sinf>
 801b0fe:	e7ea      	b.n	801b0d6 <sinf+0x2a>
 801b100:	eddd 0a01 	vldr	s1, [sp, #4]
 801b104:	ed9d 0a00 	vldr	s0, [sp]
 801b108:	f000 f816 	bl	801b138 <__kernel_cosf>
 801b10c:	e7e3      	b.n	801b0d6 <sinf+0x2a>
 801b10e:	eddd 0a01 	vldr	s1, [sp, #4]
 801b112:	ed9d 0a00 	vldr	s0, [sp]
 801b116:	2001      	movs	r0, #1
 801b118:	f000 f866 	bl	801b1e8 <__kernel_sinf>
 801b11c:	eeb1 0a40 	vneg.f32	s0, s0
 801b120:	e7d9      	b.n	801b0d6 <sinf+0x2a>
 801b122:	eddd 0a01 	vldr	s1, [sp, #4]
 801b126:	ed9d 0a00 	vldr	s0, [sp]
 801b12a:	f000 f805 	bl	801b138 <__kernel_cosf>
 801b12e:	e7f5      	b.n	801b11c <sinf+0x70>
 801b130:	3f490fd8 	.word	0x3f490fd8
 801b134:	00000000 	.word	0x00000000

0801b138 <__kernel_cosf>:
 801b138:	ee10 3a10 	vmov	r3, s0
 801b13c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b140:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801b144:	eef0 6a40 	vmov.f32	s13, s0
 801b148:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b14c:	d204      	bcs.n	801b158 <__kernel_cosf+0x20>
 801b14e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801b152:	ee17 2a90 	vmov	r2, s15
 801b156:	b342      	cbz	r2, 801b1aa <__kernel_cosf+0x72>
 801b158:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801b15c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801b1c8 <__kernel_cosf+0x90>
 801b160:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801b1cc <__kernel_cosf+0x94>
 801b164:	4a1a      	ldr	r2, [pc, #104]	@ (801b1d0 <__kernel_cosf+0x98>)
 801b166:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b16a:	4293      	cmp	r3, r2
 801b16c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b1d4 <__kernel_cosf+0x9c>
 801b170:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b174:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801b1d8 <__kernel_cosf+0xa0>
 801b178:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b17c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801b1dc <__kernel_cosf+0xa4>
 801b180:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b184:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801b1e0 <__kernel_cosf+0xa8>
 801b188:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b18c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801b190:	ee26 6a07 	vmul.f32	s12, s12, s14
 801b194:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b198:	eee7 0a06 	vfma.f32	s1, s14, s12
 801b19c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b1a0:	d804      	bhi.n	801b1ac <__kernel_cosf+0x74>
 801b1a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b1a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b1aa:	4770      	bx	lr
 801b1ac:	4a0d      	ldr	r2, [pc, #52]	@ (801b1e4 <__kernel_cosf+0xac>)
 801b1ae:	4293      	cmp	r3, r2
 801b1b0:	bf9a      	itte	ls
 801b1b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801b1b6:	ee07 3a10 	vmovls	s14, r3
 801b1ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801b1be:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b1c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b1c6:	e7ec      	b.n	801b1a2 <__kernel_cosf+0x6a>
 801b1c8:	ad47d74e 	.word	0xad47d74e
 801b1cc:	310f74f6 	.word	0x310f74f6
 801b1d0:	3e999999 	.word	0x3e999999
 801b1d4:	b493f27c 	.word	0xb493f27c
 801b1d8:	37d00d01 	.word	0x37d00d01
 801b1dc:	bab60b61 	.word	0xbab60b61
 801b1e0:	3d2aaaab 	.word	0x3d2aaaab
 801b1e4:	3f480000 	.word	0x3f480000

0801b1e8 <__kernel_sinf>:
 801b1e8:	ee10 3a10 	vmov	r3, s0
 801b1ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b1f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801b1f4:	d204      	bcs.n	801b200 <__kernel_sinf+0x18>
 801b1f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b1fa:	ee17 3a90 	vmov	r3, s15
 801b1fe:	b35b      	cbz	r3, 801b258 <__kernel_sinf+0x70>
 801b200:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b204:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801b25c <__kernel_sinf+0x74>
 801b208:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801b260 <__kernel_sinf+0x78>
 801b20c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b210:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801b264 <__kernel_sinf+0x7c>
 801b214:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b218:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801b268 <__kernel_sinf+0x80>
 801b21c:	eea7 6a87 	vfma.f32	s12, s15, s14
 801b220:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801b26c <__kernel_sinf+0x84>
 801b224:	ee60 6a07 	vmul.f32	s13, s0, s14
 801b228:	eee6 7a07 	vfma.f32	s15, s12, s14
 801b22c:	b930      	cbnz	r0, 801b23c <__kernel_sinf+0x54>
 801b22e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801b270 <__kernel_sinf+0x88>
 801b232:	eea7 6a27 	vfma.f32	s12, s14, s15
 801b236:	eea6 0a26 	vfma.f32	s0, s12, s13
 801b23a:	4770      	bx	lr
 801b23c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801b240:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801b244:	eee0 7a86 	vfma.f32	s15, s1, s12
 801b248:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801b24c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801b274 <__kernel_sinf+0x8c>
 801b250:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801b254:	ee30 0a60 	vsub.f32	s0, s0, s1
 801b258:	4770      	bx	lr
 801b25a:	bf00      	nop
 801b25c:	2f2ec9d3 	.word	0x2f2ec9d3
 801b260:	b2d72f34 	.word	0xb2d72f34
 801b264:	3638ef1b 	.word	0x3638ef1b
 801b268:	b9500d01 	.word	0xb9500d01
 801b26c:	3c088889 	.word	0x3c088889
 801b270:	be2aaaab 	.word	0xbe2aaaab
 801b274:	3e2aaaab 	.word	0x3e2aaaab

0801b278 <__ieee754_rem_pio2f>:
 801b278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b27a:	ee10 6a10 	vmov	r6, s0
 801b27e:	4b88      	ldr	r3, [pc, #544]	@ (801b4a0 <__ieee754_rem_pio2f+0x228>)
 801b280:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801b284:	429d      	cmp	r5, r3
 801b286:	b087      	sub	sp, #28
 801b288:	4604      	mov	r4, r0
 801b28a:	d805      	bhi.n	801b298 <__ieee754_rem_pio2f+0x20>
 801b28c:	2300      	movs	r3, #0
 801b28e:	ed80 0a00 	vstr	s0, [r0]
 801b292:	6043      	str	r3, [r0, #4]
 801b294:	2000      	movs	r0, #0
 801b296:	e022      	b.n	801b2de <__ieee754_rem_pio2f+0x66>
 801b298:	4b82      	ldr	r3, [pc, #520]	@ (801b4a4 <__ieee754_rem_pio2f+0x22c>)
 801b29a:	429d      	cmp	r5, r3
 801b29c:	d83a      	bhi.n	801b314 <__ieee754_rem_pio2f+0x9c>
 801b29e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b2a2:	2e00      	cmp	r6, #0
 801b2a4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801b4a8 <__ieee754_rem_pio2f+0x230>
 801b2a8:	4a80      	ldr	r2, [pc, #512]	@ (801b4ac <__ieee754_rem_pio2f+0x234>)
 801b2aa:	f023 030f 	bic.w	r3, r3, #15
 801b2ae:	dd18      	ble.n	801b2e2 <__ieee754_rem_pio2f+0x6a>
 801b2b0:	4293      	cmp	r3, r2
 801b2b2:	ee70 7a47 	vsub.f32	s15, s0, s14
 801b2b6:	bf09      	itett	eq
 801b2b8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801b4b0 <__ieee754_rem_pio2f+0x238>
 801b2bc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801b4b4 <__ieee754_rem_pio2f+0x23c>
 801b2c0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801b4b8 <__ieee754_rem_pio2f+0x240>
 801b2c4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801b2c8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801b2cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b2d0:	ed80 7a00 	vstr	s14, [r0]
 801b2d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b2d8:	edc0 7a01 	vstr	s15, [r0, #4]
 801b2dc:	2001      	movs	r0, #1
 801b2de:	b007      	add	sp, #28
 801b2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	ee70 7a07 	vadd.f32	s15, s0, s14
 801b2e8:	bf09      	itett	eq
 801b2ea:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801b4b0 <__ieee754_rem_pio2f+0x238>
 801b2ee:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801b4b4 <__ieee754_rem_pio2f+0x23c>
 801b2f2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801b4b8 <__ieee754_rem_pio2f+0x240>
 801b2f6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801b2fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b2fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b302:	ed80 7a00 	vstr	s14, [r0]
 801b306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b30a:	edc0 7a01 	vstr	s15, [r0, #4]
 801b30e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b312:	e7e4      	b.n	801b2de <__ieee754_rem_pio2f+0x66>
 801b314:	4b69      	ldr	r3, [pc, #420]	@ (801b4bc <__ieee754_rem_pio2f+0x244>)
 801b316:	429d      	cmp	r5, r3
 801b318:	d873      	bhi.n	801b402 <__ieee754_rem_pio2f+0x18a>
 801b31a:	f000 f8dd 	bl	801b4d8 <fabsf>
 801b31e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801b4c0 <__ieee754_rem_pio2f+0x248>
 801b322:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b326:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b32a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b32e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b332:	ee17 0a90 	vmov	r0, s15
 801b336:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b4a8 <__ieee754_rem_pio2f+0x230>
 801b33a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b33e:	281f      	cmp	r0, #31
 801b340:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b4b4 <__ieee754_rem_pio2f+0x23c>
 801b344:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b348:	eeb1 6a47 	vneg.f32	s12, s14
 801b34c:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b350:	ee16 1a90 	vmov	r1, s13
 801b354:	dc09      	bgt.n	801b36a <__ieee754_rem_pio2f+0xf2>
 801b356:	4a5b      	ldr	r2, [pc, #364]	@ (801b4c4 <__ieee754_rem_pio2f+0x24c>)
 801b358:	1e47      	subs	r7, r0, #1
 801b35a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b35e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801b362:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801b366:	4293      	cmp	r3, r2
 801b368:	d107      	bne.n	801b37a <__ieee754_rem_pio2f+0x102>
 801b36a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801b36e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801b372:	2a08      	cmp	r2, #8
 801b374:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801b378:	dc14      	bgt.n	801b3a4 <__ieee754_rem_pio2f+0x12c>
 801b37a:	6021      	str	r1, [r4, #0]
 801b37c:	ed94 7a00 	vldr	s14, [r4]
 801b380:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b384:	2e00      	cmp	r6, #0
 801b386:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b38a:	ed84 0a01 	vstr	s0, [r4, #4]
 801b38e:	daa6      	bge.n	801b2de <__ieee754_rem_pio2f+0x66>
 801b390:	eeb1 7a47 	vneg.f32	s14, s14
 801b394:	eeb1 0a40 	vneg.f32	s0, s0
 801b398:	ed84 7a00 	vstr	s14, [r4]
 801b39c:	ed84 0a01 	vstr	s0, [r4, #4]
 801b3a0:	4240      	negs	r0, r0
 801b3a2:	e79c      	b.n	801b2de <__ieee754_rem_pio2f+0x66>
 801b3a4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801b4b0 <__ieee754_rem_pio2f+0x238>
 801b3a8:	eef0 6a40 	vmov.f32	s13, s0
 801b3ac:	eee6 6a25 	vfma.f32	s13, s12, s11
 801b3b0:	ee70 7a66 	vsub.f32	s15, s0, s13
 801b3b4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b3b8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b4b8 <__ieee754_rem_pio2f+0x240>
 801b3bc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801b3c0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801b3c4:	ee15 2a90 	vmov	r2, s11
 801b3c8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b3cc:	1a5b      	subs	r3, r3, r1
 801b3ce:	2b19      	cmp	r3, #25
 801b3d0:	dc04      	bgt.n	801b3dc <__ieee754_rem_pio2f+0x164>
 801b3d2:	edc4 5a00 	vstr	s11, [r4]
 801b3d6:	eeb0 0a66 	vmov.f32	s0, s13
 801b3da:	e7cf      	b.n	801b37c <__ieee754_rem_pio2f+0x104>
 801b3dc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801b4c8 <__ieee754_rem_pio2f+0x250>
 801b3e0:	eeb0 0a66 	vmov.f32	s0, s13
 801b3e4:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b3e8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b3ec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801b4cc <__ieee754_rem_pio2f+0x254>
 801b3f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b3f4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b3f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b3fc:	ed84 7a00 	vstr	s14, [r4]
 801b400:	e7bc      	b.n	801b37c <__ieee754_rem_pio2f+0x104>
 801b402:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801b406:	d306      	bcc.n	801b416 <__ieee754_rem_pio2f+0x19e>
 801b408:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b40c:	edc0 7a01 	vstr	s15, [r0, #4]
 801b410:	edc0 7a00 	vstr	s15, [r0]
 801b414:	e73e      	b.n	801b294 <__ieee754_rem_pio2f+0x1c>
 801b416:	15ea      	asrs	r2, r5, #23
 801b418:	3a86      	subs	r2, #134	@ 0x86
 801b41a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b41e:	ee07 3a90 	vmov	s15, r3
 801b422:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b426:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801b4d0 <__ieee754_rem_pio2f+0x258>
 801b42a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b42e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b432:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b436:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b43a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b43e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b446:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b44a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b44e:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b456:	edcd 7a05 	vstr	s15, [sp, #20]
 801b45a:	d11e      	bne.n	801b49a <__ieee754_rem_pio2f+0x222>
 801b45c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b464:	bf0c      	ite	eq
 801b466:	2301      	moveq	r3, #1
 801b468:	2302      	movne	r3, #2
 801b46a:	491a      	ldr	r1, [pc, #104]	@ (801b4d4 <__ieee754_rem_pio2f+0x25c>)
 801b46c:	9101      	str	r1, [sp, #4]
 801b46e:	2102      	movs	r1, #2
 801b470:	9100      	str	r1, [sp, #0]
 801b472:	a803      	add	r0, sp, #12
 801b474:	4621      	mov	r1, r4
 801b476:	f000 f837 	bl	801b4e8 <__kernel_rem_pio2f>
 801b47a:	2e00      	cmp	r6, #0
 801b47c:	f6bf af2f 	bge.w	801b2de <__ieee754_rem_pio2f+0x66>
 801b480:	edd4 7a00 	vldr	s15, [r4]
 801b484:	eef1 7a67 	vneg.f32	s15, s15
 801b488:	edc4 7a00 	vstr	s15, [r4]
 801b48c:	edd4 7a01 	vldr	s15, [r4, #4]
 801b490:	eef1 7a67 	vneg.f32	s15, s15
 801b494:	edc4 7a01 	vstr	s15, [r4, #4]
 801b498:	e782      	b.n	801b3a0 <__ieee754_rem_pio2f+0x128>
 801b49a:	2303      	movs	r3, #3
 801b49c:	e7e5      	b.n	801b46a <__ieee754_rem_pio2f+0x1f2>
 801b49e:	bf00      	nop
 801b4a0:	3f490fd8 	.word	0x3f490fd8
 801b4a4:	4016cbe3 	.word	0x4016cbe3
 801b4a8:	3fc90f80 	.word	0x3fc90f80
 801b4ac:	3fc90fd0 	.word	0x3fc90fd0
 801b4b0:	37354400 	.word	0x37354400
 801b4b4:	37354443 	.word	0x37354443
 801b4b8:	2e85a308 	.word	0x2e85a308
 801b4bc:	43490f80 	.word	0x43490f80
 801b4c0:	3f22f984 	.word	0x3f22f984
 801b4c4:	0801e3d0 	.word	0x0801e3d0
 801b4c8:	2e85a300 	.word	0x2e85a300
 801b4cc:	248d3132 	.word	0x248d3132
 801b4d0:	43800000 	.word	0x43800000
 801b4d4:	0801e450 	.word	0x0801e450

0801b4d8 <fabsf>:
 801b4d8:	ee10 3a10 	vmov	r3, s0
 801b4dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b4e0:	ee00 3a10 	vmov	s0, r3
 801b4e4:	4770      	bx	lr
	...

0801b4e8 <__kernel_rem_pio2f>:
 801b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4ec:	ed2d 8b04 	vpush	{d8-d9}
 801b4f0:	b0d9      	sub	sp, #356	@ 0x164
 801b4f2:	4690      	mov	r8, r2
 801b4f4:	9001      	str	r0, [sp, #4]
 801b4f6:	4ab6      	ldr	r2, [pc, #728]	@ (801b7d0 <__kernel_rem_pio2f+0x2e8>)
 801b4f8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801b4fa:	f118 0f04 	cmn.w	r8, #4
 801b4fe:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801b502:	460f      	mov	r7, r1
 801b504:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801b508:	db26      	blt.n	801b558 <__kernel_rem_pio2f+0x70>
 801b50a:	f1b8 0203 	subs.w	r2, r8, #3
 801b50e:	bf48      	it	mi
 801b510:	f108 0204 	addmi.w	r2, r8, #4
 801b514:	10d2      	asrs	r2, r2, #3
 801b516:	1c55      	adds	r5, r2, #1
 801b518:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b51a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b51e:	00e8      	lsls	r0, r5, #3
 801b520:	eba2 060b 	sub.w	r6, r2, fp
 801b524:	9002      	str	r0, [sp, #8]
 801b526:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801b52a:	eb0a 0c0b 	add.w	ip, sl, fp
 801b52e:	ac1c      	add	r4, sp, #112	@ 0x70
 801b530:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801b534:	2000      	movs	r0, #0
 801b536:	4560      	cmp	r0, ip
 801b538:	dd10      	ble.n	801b55c <__kernel_rem_pio2f+0x74>
 801b53a:	a91c      	add	r1, sp, #112	@ 0x70
 801b53c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801b540:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801b544:	2600      	movs	r6, #0
 801b546:	4556      	cmp	r6, sl
 801b548:	dc24      	bgt.n	801b594 <__kernel_rem_pio2f+0xac>
 801b54a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b54e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b552:	4684      	mov	ip, r0
 801b554:	2400      	movs	r4, #0
 801b556:	e016      	b.n	801b586 <__kernel_rem_pio2f+0x9e>
 801b558:	2200      	movs	r2, #0
 801b55a:	e7dc      	b.n	801b516 <__kernel_rem_pio2f+0x2e>
 801b55c:	42c6      	cmn	r6, r0
 801b55e:	bf5d      	ittte	pl
 801b560:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801b564:	ee07 1a90 	vmovpl	s15, r1
 801b568:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b56c:	eef0 7a47 	vmovmi.f32	s15, s14
 801b570:	ece4 7a01 	vstmia	r4!, {s15}
 801b574:	3001      	adds	r0, #1
 801b576:	e7de      	b.n	801b536 <__kernel_rem_pio2f+0x4e>
 801b578:	ecfe 6a01 	vldmia	lr!, {s13}
 801b57c:	ed3c 7a01 	vldmdb	ip!, {s14}
 801b580:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b584:	3401      	adds	r4, #1
 801b586:	455c      	cmp	r4, fp
 801b588:	ddf6      	ble.n	801b578 <__kernel_rem_pio2f+0x90>
 801b58a:	ece9 7a01 	vstmia	r9!, {s15}
 801b58e:	3601      	adds	r6, #1
 801b590:	3004      	adds	r0, #4
 801b592:	e7d8      	b.n	801b546 <__kernel_rem_pio2f+0x5e>
 801b594:	a908      	add	r1, sp, #32
 801b596:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b59a:	9104      	str	r1, [sp, #16]
 801b59c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b59e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801b7dc <__kernel_rem_pio2f+0x2f4>
 801b5a2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801b7d8 <__kernel_rem_pio2f+0x2f0>
 801b5a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801b5aa:	9203      	str	r2, [sp, #12]
 801b5ac:	4654      	mov	r4, sl
 801b5ae:	00a2      	lsls	r2, r4, #2
 801b5b0:	9205      	str	r2, [sp, #20]
 801b5b2:	aa58      	add	r2, sp, #352	@ 0x160
 801b5b4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801b5b8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801b5bc:	a944      	add	r1, sp, #272	@ 0x110
 801b5be:	aa08      	add	r2, sp, #32
 801b5c0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801b5c4:	4694      	mov	ip, r2
 801b5c6:	4626      	mov	r6, r4
 801b5c8:	2e00      	cmp	r6, #0
 801b5ca:	dc4c      	bgt.n	801b666 <__kernel_rem_pio2f+0x17e>
 801b5cc:	4628      	mov	r0, r5
 801b5ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b5d2:	f000 f9f1 	bl	801b9b8 <scalbnf>
 801b5d6:	eeb0 8a40 	vmov.f32	s16, s0
 801b5da:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801b5de:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b5e2:	f000 fa4f 	bl	801ba84 <floorf>
 801b5e6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801b5ea:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b5ee:	2d00      	cmp	r5, #0
 801b5f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b5f4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b5f8:	ee17 9a90 	vmov	r9, s15
 801b5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b600:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b604:	dd41      	ble.n	801b68a <__kernel_rem_pio2f+0x1a2>
 801b606:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801b60a:	a908      	add	r1, sp, #32
 801b60c:	f1c5 0e08 	rsb	lr, r5, #8
 801b610:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801b614:	fa46 f00e 	asr.w	r0, r6, lr
 801b618:	4481      	add	r9, r0
 801b61a:	fa00 f00e 	lsl.w	r0, r0, lr
 801b61e:	1a36      	subs	r6, r6, r0
 801b620:	f1c5 0007 	rsb	r0, r5, #7
 801b624:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801b628:	4106      	asrs	r6, r0
 801b62a:	2e00      	cmp	r6, #0
 801b62c:	dd3c      	ble.n	801b6a8 <__kernel_rem_pio2f+0x1c0>
 801b62e:	f04f 0e00 	mov.w	lr, #0
 801b632:	f109 0901 	add.w	r9, r9, #1
 801b636:	4670      	mov	r0, lr
 801b638:	4574      	cmp	r4, lr
 801b63a:	dc68      	bgt.n	801b70e <__kernel_rem_pio2f+0x226>
 801b63c:	2d00      	cmp	r5, #0
 801b63e:	dd03      	ble.n	801b648 <__kernel_rem_pio2f+0x160>
 801b640:	2d01      	cmp	r5, #1
 801b642:	d074      	beq.n	801b72e <__kernel_rem_pio2f+0x246>
 801b644:	2d02      	cmp	r5, #2
 801b646:	d07d      	beq.n	801b744 <__kernel_rem_pio2f+0x25c>
 801b648:	2e02      	cmp	r6, #2
 801b64a:	d12d      	bne.n	801b6a8 <__kernel_rem_pio2f+0x1c0>
 801b64c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b650:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b654:	b340      	cbz	r0, 801b6a8 <__kernel_rem_pio2f+0x1c0>
 801b656:	4628      	mov	r0, r5
 801b658:	9306      	str	r3, [sp, #24]
 801b65a:	f000 f9ad 	bl	801b9b8 <scalbnf>
 801b65e:	9b06      	ldr	r3, [sp, #24]
 801b660:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b664:	e020      	b.n	801b6a8 <__kernel_rem_pio2f+0x1c0>
 801b666:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b66a:	3e01      	subs	r6, #1
 801b66c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b674:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b678:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b67c:	ecac 0a01 	vstmia	ip!, {s0}
 801b680:	ed30 0a01 	vldmdb	r0!, {s0}
 801b684:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b688:	e79e      	b.n	801b5c8 <__kernel_rem_pio2f+0xe0>
 801b68a:	d105      	bne.n	801b698 <__kernel_rem_pio2f+0x1b0>
 801b68c:	1e60      	subs	r0, r4, #1
 801b68e:	a908      	add	r1, sp, #32
 801b690:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801b694:	11f6      	asrs	r6, r6, #7
 801b696:	e7c8      	b.n	801b62a <__kernel_rem_pio2f+0x142>
 801b698:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b69c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a4:	da31      	bge.n	801b70a <__kernel_rem_pio2f+0x222>
 801b6a6:	2600      	movs	r6, #0
 801b6a8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6b0:	f040 8098 	bne.w	801b7e4 <__kernel_rem_pio2f+0x2fc>
 801b6b4:	1e60      	subs	r0, r4, #1
 801b6b6:	2200      	movs	r2, #0
 801b6b8:	4550      	cmp	r0, sl
 801b6ba:	da4b      	bge.n	801b754 <__kernel_rem_pio2f+0x26c>
 801b6bc:	2a00      	cmp	r2, #0
 801b6be:	d065      	beq.n	801b78c <__kernel_rem_pio2f+0x2a4>
 801b6c0:	3c01      	subs	r4, #1
 801b6c2:	ab08      	add	r3, sp, #32
 801b6c4:	3d08      	subs	r5, #8
 801b6c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d0f8      	beq.n	801b6c0 <__kernel_rem_pio2f+0x1d8>
 801b6ce:	4628      	mov	r0, r5
 801b6d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b6d4:	f000 f970 	bl	801b9b8 <scalbnf>
 801b6d8:	1c63      	adds	r3, r4, #1
 801b6da:	aa44      	add	r2, sp, #272	@ 0x110
 801b6dc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801b7dc <__kernel_rem_pio2f+0x2f4>
 801b6e0:	0099      	lsls	r1, r3, #2
 801b6e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b6e6:	4623      	mov	r3, r4
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	f280 80a9 	bge.w	801b840 <__kernel_rem_pio2f+0x358>
 801b6ee:	4623      	mov	r3, r4
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	f2c0 80c7 	blt.w	801b884 <__kernel_rem_pio2f+0x39c>
 801b6f6:	aa44      	add	r2, sp, #272	@ 0x110
 801b6f8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b6fc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801b7d4 <__kernel_rem_pio2f+0x2ec>
 801b700:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b704:	2000      	movs	r0, #0
 801b706:	1ae2      	subs	r2, r4, r3
 801b708:	e0b1      	b.n	801b86e <__kernel_rem_pio2f+0x386>
 801b70a:	2602      	movs	r6, #2
 801b70c:	e78f      	b.n	801b62e <__kernel_rem_pio2f+0x146>
 801b70e:	f852 1b04 	ldr.w	r1, [r2], #4
 801b712:	b948      	cbnz	r0, 801b728 <__kernel_rem_pio2f+0x240>
 801b714:	b121      	cbz	r1, 801b720 <__kernel_rem_pio2f+0x238>
 801b716:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801b71a:	f842 1c04 	str.w	r1, [r2, #-4]
 801b71e:	2101      	movs	r1, #1
 801b720:	f10e 0e01 	add.w	lr, lr, #1
 801b724:	4608      	mov	r0, r1
 801b726:	e787      	b.n	801b638 <__kernel_rem_pio2f+0x150>
 801b728:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801b72c:	e7f5      	b.n	801b71a <__kernel_rem_pio2f+0x232>
 801b72e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801b732:	aa08      	add	r2, sp, #32
 801b734:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801b73c:	a908      	add	r1, sp, #32
 801b73e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801b742:	e781      	b.n	801b648 <__kernel_rem_pio2f+0x160>
 801b744:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 801b748:	aa08      	add	r2, sp, #32
 801b74a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b74e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b752:	e7f3      	b.n	801b73c <__kernel_rem_pio2f+0x254>
 801b754:	a908      	add	r1, sp, #32
 801b756:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b75a:	3801      	subs	r0, #1
 801b75c:	430a      	orrs	r2, r1
 801b75e:	e7ab      	b.n	801b6b8 <__kernel_rem_pio2f+0x1d0>
 801b760:	3201      	adds	r2, #1
 801b762:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801b766:	2e00      	cmp	r6, #0
 801b768:	d0fa      	beq.n	801b760 <__kernel_rem_pio2f+0x278>
 801b76a:	9905      	ldr	r1, [sp, #20]
 801b76c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801b770:	eb0d 0001 	add.w	r0, sp, r1
 801b774:	18e6      	adds	r6, r4, r3
 801b776:	a91c      	add	r1, sp, #112	@ 0x70
 801b778:	f104 0c01 	add.w	ip, r4, #1
 801b77c:	384c      	subs	r0, #76	@ 0x4c
 801b77e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801b782:	4422      	add	r2, r4
 801b784:	4562      	cmp	r2, ip
 801b786:	da04      	bge.n	801b792 <__kernel_rem_pio2f+0x2aa>
 801b788:	4614      	mov	r4, r2
 801b78a:	e710      	b.n	801b5ae <__kernel_rem_pio2f+0xc6>
 801b78c:	9804      	ldr	r0, [sp, #16]
 801b78e:	2201      	movs	r2, #1
 801b790:	e7e7      	b.n	801b762 <__kernel_rem_pio2f+0x27a>
 801b792:	9903      	ldr	r1, [sp, #12]
 801b794:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b798:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b79c:	9105      	str	r1, [sp, #20]
 801b79e:	ee07 1a90 	vmov	s15, r1
 801b7a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b7a6:	2400      	movs	r4, #0
 801b7a8:	ece6 7a01 	vstmia	r6!, {s15}
 801b7ac:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b7b0:	46b1      	mov	r9, r6
 801b7b2:	455c      	cmp	r4, fp
 801b7b4:	dd04      	ble.n	801b7c0 <__kernel_rem_pio2f+0x2d8>
 801b7b6:	ece0 7a01 	vstmia	r0!, {s15}
 801b7ba:	f10c 0c01 	add.w	ip, ip, #1
 801b7be:	e7e1      	b.n	801b784 <__kernel_rem_pio2f+0x29c>
 801b7c0:	ecfe 6a01 	vldmia	lr!, {s13}
 801b7c4:	ed39 7a01 	vldmdb	r9!, {s14}
 801b7c8:	3401      	adds	r4, #1
 801b7ca:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b7ce:	e7f0      	b.n	801b7b2 <__kernel_rem_pio2f+0x2ca>
 801b7d0:	0801e794 	.word	0x0801e794
 801b7d4:	0801e768 	.word	0x0801e768
 801b7d8:	43800000 	.word	0x43800000
 801b7dc:	3b800000 	.word	0x3b800000
 801b7e0:	00000000 	.word	0x00000000
 801b7e4:	9b02      	ldr	r3, [sp, #8]
 801b7e6:	eeb0 0a48 	vmov.f32	s0, s16
 801b7ea:	eba3 0008 	sub.w	r0, r3, r8
 801b7ee:	f000 f8e3 	bl	801b9b8 <scalbnf>
 801b7f2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801b7d8 <__kernel_rem_pio2f+0x2f0>
 801b7f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7fe:	db19      	blt.n	801b834 <__kernel_rem_pio2f+0x34c>
 801b800:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801b7dc <__kernel_rem_pio2f+0x2f4>
 801b804:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b808:	aa08      	add	r2, sp, #32
 801b80a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b80e:	3508      	adds	r5, #8
 801b810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b814:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b81c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b820:	ee10 3a10 	vmov	r3, s0
 801b824:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b828:	ee17 3a90 	vmov	r3, s15
 801b82c:	3401      	adds	r4, #1
 801b82e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b832:	e74c      	b.n	801b6ce <__kernel_rem_pio2f+0x1e6>
 801b834:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b838:	aa08      	add	r2, sp, #32
 801b83a:	ee10 3a10 	vmov	r3, s0
 801b83e:	e7f6      	b.n	801b82e <__kernel_rem_pio2f+0x346>
 801b840:	a808      	add	r0, sp, #32
 801b842:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b846:	9001      	str	r0, [sp, #4]
 801b848:	ee07 0a90 	vmov	s15, r0
 801b84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b850:	3b01      	subs	r3, #1
 801b852:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b856:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b85a:	ed62 7a01 	vstmdb	r2!, {s15}
 801b85e:	e743      	b.n	801b6e8 <__kernel_rem_pio2f+0x200>
 801b860:	ecfc 6a01 	vldmia	ip!, {s13}
 801b864:	ecb5 7a01 	vldmia	r5!, {s14}
 801b868:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b86c:	3001      	adds	r0, #1
 801b86e:	4550      	cmp	r0, sl
 801b870:	dc01      	bgt.n	801b876 <__kernel_rem_pio2f+0x38e>
 801b872:	4290      	cmp	r0, r2
 801b874:	ddf4      	ble.n	801b860 <__kernel_rem_pio2f+0x378>
 801b876:	a858      	add	r0, sp, #352	@ 0x160
 801b878:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b87c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801b880:	3b01      	subs	r3, #1
 801b882:	e735      	b.n	801b6f0 <__kernel_rem_pio2f+0x208>
 801b884:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b886:	2b02      	cmp	r3, #2
 801b888:	dc09      	bgt.n	801b89e <__kernel_rem_pio2f+0x3b6>
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	dc27      	bgt.n	801b8de <__kernel_rem_pio2f+0x3f6>
 801b88e:	d040      	beq.n	801b912 <__kernel_rem_pio2f+0x42a>
 801b890:	f009 0007 	and.w	r0, r9, #7
 801b894:	b059      	add	sp, #356	@ 0x164
 801b896:	ecbd 8b04 	vpop	{d8-d9}
 801b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b89e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b8a0:	2b03      	cmp	r3, #3
 801b8a2:	d1f5      	bne.n	801b890 <__kernel_rem_pio2f+0x3a8>
 801b8a4:	aa30      	add	r2, sp, #192	@ 0xc0
 801b8a6:	1f0b      	subs	r3, r1, #4
 801b8a8:	4413      	add	r3, r2
 801b8aa:	461a      	mov	r2, r3
 801b8ac:	4620      	mov	r0, r4
 801b8ae:	2800      	cmp	r0, #0
 801b8b0:	dc50      	bgt.n	801b954 <__kernel_rem_pio2f+0x46c>
 801b8b2:	4622      	mov	r2, r4
 801b8b4:	2a01      	cmp	r2, #1
 801b8b6:	dc5d      	bgt.n	801b974 <__kernel_rem_pio2f+0x48c>
 801b8b8:	ab30      	add	r3, sp, #192	@ 0xc0
 801b8ba:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b8be:	440b      	add	r3, r1
 801b8c0:	2c01      	cmp	r4, #1
 801b8c2:	dc67      	bgt.n	801b994 <__kernel_rem_pio2f+0x4ac>
 801b8c4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b8c8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801b8cc:	2e00      	cmp	r6, #0
 801b8ce:	d167      	bne.n	801b9a0 <__kernel_rem_pio2f+0x4b8>
 801b8d0:	edc7 6a00 	vstr	s13, [r7]
 801b8d4:	ed87 7a01 	vstr	s14, [r7, #4]
 801b8d8:	edc7 7a02 	vstr	s15, [r7, #8]
 801b8dc:	e7d8      	b.n	801b890 <__kernel_rem_pio2f+0x3a8>
 801b8de:	ab30      	add	r3, sp, #192	@ 0xc0
 801b8e0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b8e4:	440b      	add	r3, r1
 801b8e6:	4622      	mov	r2, r4
 801b8e8:	2a00      	cmp	r2, #0
 801b8ea:	da24      	bge.n	801b936 <__kernel_rem_pio2f+0x44e>
 801b8ec:	b34e      	cbz	r6, 801b942 <__kernel_rem_pio2f+0x45a>
 801b8ee:	eef1 7a47 	vneg.f32	s15, s14
 801b8f2:	edc7 7a00 	vstr	s15, [r7]
 801b8f6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801b8fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b8fe:	aa31      	add	r2, sp, #196	@ 0xc4
 801b900:	2301      	movs	r3, #1
 801b902:	429c      	cmp	r4, r3
 801b904:	da20      	bge.n	801b948 <__kernel_rem_pio2f+0x460>
 801b906:	b10e      	cbz	r6, 801b90c <__kernel_rem_pio2f+0x424>
 801b908:	eef1 7a67 	vneg.f32	s15, s15
 801b90c:	edc7 7a01 	vstr	s15, [r7, #4]
 801b910:	e7be      	b.n	801b890 <__kernel_rem_pio2f+0x3a8>
 801b912:	ab30      	add	r3, sp, #192	@ 0xc0
 801b914:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801b7e0 <__kernel_rem_pio2f+0x2f8>
 801b918:	440b      	add	r3, r1
 801b91a:	2c00      	cmp	r4, #0
 801b91c:	da05      	bge.n	801b92a <__kernel_rem_pio2f+0x442>
 801b91e:	b10e      	cbz	r6, 801b924 <__kernel_rem_pio2f+0x43c>
 801b920:	eef1 7a67 	vneg.f32	s15, s15
 801b924:	edc7 7a00 	vstr	s15, [r7]
 801b928:	e7b2      	b.n	801b890 <__kernel_rem_pio2f+0x3a8>
 801b92a:	ed33 7a01 	vldmdb	r3!, {s14}
 801b92e:	3c01      	subs	r4, #1
 801b930:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b934:	e7f1      	b.n	801b91a <__kernel_rem_pio2f+0x432>
 801b936:	ed73 7a01 	vldmdb	r3!, {s15}
 801b93a:	3a01      	subs	r2, #1
 801b93c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b940:	e7d2      	b.n	801b8e8 <__kernel_rem_pio2f+0x400>
 801b942:	eef0 7a47 	vmov.f32	s15, s14
 801b946:	e7d4      	b.n	801b8f2 <__kernel_rem_pio2f+0x40a>
 801b948:	ecb2 7a01 	vldmia	r2!, {s14}
 801b94c:	3301      	adds	r3, #1
 801b94e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b952:	e7d6      	b.n	801b902 <__kernel_rem_pio2f+0x41a>
 801b954:	ed72 7a01 	vldmdb	r2!, {s15}
 801b958:	edd2 6a01 	vldr	s13, [r2, #4]
 801b95c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b960:	3801      	subs	r0, #1
 801b962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b966:	ed82 7a00 	vstr	s14, [r2]
 801b96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b96e:	edc2 7a01 	vstr	s15, [r2, #4]
 801b972:	e79c      	b.n	801b8ae <__kernel_rem_pio2f+0x3c6>
 801b974:	ed73 7a01 	vldmdb	r3!, {s15}
 801b978:	edd3 6a01 	vldr	s13, [r3, #4]
 801b97c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b980:	3a01      	subs	r2, #1
 801b982:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b986:	ed83 7a00 	vstr	s14, [r3]
 801b98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b98e:	edc3 7a01 	vstr	s15, [r3, #4]
 801b992:	e78f      	b.n	801b8b4 <__kernel_rem_pio2f+0x3cc>
 801b994:	ed33 7a01 	vldmdb	r3!, {s14}
 801b998:	3c01      	subs	r4, #1
 801b99a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b99e:	e78f      	b.n	801b8c0 <__kernel_rem_pio2f+0x3d8>
 801b9a0:	eef1 6a66 	vneg.f32	s13, s13
 801b9a4:	eeb1 7a47 	vneg.f32	s14, s14
 801b9a8:	edc7 6a00 	vstr	s13, [r7]
 801b9ac:	ed87 7a01 	vstr	s14, [r7, #4]
 801b9b0:	eef1 7a67 	vneg.f32	s15, s15
 801b9b4:	e790      	b.n	801b8d8 <__kernel_rem_pio2f+0x3f0>
 801b9b6:	bf00      	nop

0801b9b8 <scalbnf>:
 801b9b8:	ee10 3a10 	vmov	r3, s0
 801b9bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801b9c0:	d02b      	beq.n	801ba1a <scalbnf+0x62>
 801b9c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801b9c6:	d302      	bcc.n	801b9ce <scalbnf+0x16>
 801b9c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b9cc:	4770      	bx	lr
 801b9ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801b9d2:	d123      	bne.n	801ba1c <scalbnf+0x64>
 801b9d4:	4b24      	ldr	r3, [pc, #144]	@ (801ba68 <scalbnf+0xb0>)
 801b9d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801ba6c <scalbnf+0xb4>
 801b9da:	4298      	cmp	r0, r3
 801b9dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b9e0:	db17      	blt.n	801ba12 <scalbnf+0x5a>
 801b9e2:	ee10 3a10 	vmov	r3, s0
 801b9e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b9ea:	3a19      	subs	r2, #25
 801b9ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801b9f0:	4288      	cmp	r0, r1
 801b9f2:	dd15      	ble.n	801ba20 <scalbnf+0x68>
 801b9f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801ba70 <scalbnf+0xb8>
 801b9f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801ba74 <scalbnf+0xbc>
 801b9fc:	ee10 3a10 	vmov	r3, s0
 801ba00:	eeb0 7a67 	vmov.f32	s14, s15
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	bfb8      	it	lt
 801ba08:	eef0 7a66 	vmovlt.f32	s15, s13
 801ba0c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ba10:	4770      	bx	lr
 801ba12:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ba78 <scalbnf+0xc0>
 801ba16:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ba1a:	4770      	bx	lr
 801ba1c:	0dd2      	lsrs	r2, r2, #23
 801ba1e:	e7e5      	b.n	801b9ec <scalbnf+0x34>
 801ba20:	4410      	add	r0, r2
 801ba22:	28fe      	cmp	r0, #254	@ 0xfe
 801ba24:	dce6      	bgt.n	801b9f4 <scalbnf+0x3c>
 801ba26:	2800      	cmp	r0, #0
 801ba28:	dd06      	ble.n	801ba38 <scalbnf+0x80>
 801ba2a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ba2e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ba32:	ee00 3a10 	vmov	s0, r3
 801ba36:	4770      	bx	lr
 801ba38:	f110 0f16 	cmn.w	r0, #22
 801ba3c:	da09      	bge.n	801ba52 <scalbnf+0x9a>
 801ba3e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801ba78 <scalbnf+0xc0>
 801ba42:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801ba7c <scalbnf+0xc4>
 801ba46:	ee10 3a10 	vmov	r3, s0
 801ba4a:	eeb0 7a67 	vmov.f32	s14, s15
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	e7d9      	b.n	801ba06 <scalbnf+0x4e>
 801ba52:	3019      	adds	r0, #25
 801ba54:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ba58:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ba5c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801ba80 <scalbnf+0xc8>
 801ba60:	ee07 3a90 	vmov	s15, r3
 801ba64:	e7d7      	b.n	801ba16 <scalbnf+0x5e>
 801ba66:	bf00      	nop
 801ba68:	ffff3cb0 	.word	0xffff3cb0
 801ba6c:	4c000000 	.word	0x4c000000
 801ba70:	7149f2ca 	.word	0x7149f2ca
 801ba74:	f149f2ca 	.word	0xf149f2ca
 801ba78:	0da24260 	.word	0x0da24260
 801ba7c:	8da24260 	.word	0x8da24260
 801ba80:	33000000 	.word	0x33000000

0801ba84 <floorf>:
 801ba84:	ee10 3a10 	vmov	r3, s0
 801ba88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ba8c:	3a7f      	subs	r2, #127	@ 0x7f
 801ba8e:	2a16      	cmp	r2, #22
 801ba90:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801ba94:	dc2b      	bgt.n	801baee <floorf+0x6a>
 801ba96:	2a00      	cmp	r2, #0
 801ba98:	da12      	bge.n	801bac0 <floorf+0x3c>
 801ba9a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801bb00 <floorf+0x7c>
 801ba9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801baa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801baa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801baaa:	dd06      	ble.n	801baba <floorf+0x36>
 801baac:	2b00      	cmp	r3, #0
 801baae:	da24      	bge.n	801bafa <floorf+0x76>
 801bab0:	2900      	cmp	r1, #0
 801bab2:	4b14      	ldr	r3, [pc, #80]	@ (801bb04 <floorf+0x80>)
 801bab4:	bf08      	it	eq
 801bab6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801baba:	ee00 3a10 	vmov	s0, r3
 801babe:	4770      	bx	lr
 801bac0:	4911      	ldr	r1, [pc, #68]	@ (801bb08 <floorf+0x84>)
 801bac2:	4111      	asrs	r1, r2
 801bac4:	420b      	tst	r3, r1
 801bac6:	d0fa      	beq.n	801babe <floorf+0x3a>
 801bac8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801bb00 <floorf+0x7c>
 801bacc:	ee30 0a27 	vadd.f32	s0, s0, s15
 801bad0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bad8:	ddef      	ble.n	801baba <floorf+0x36>
 801bada:	2b00      	cmp	r3, #0
 801badc:	bfbe      	ittt	lt
 801bade:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801bae2:	fa40 f202 	asrlt.w	r2, r0, r2
 801bae6:	189b      	addlt	r3, r3, r2
 801bae8:	ea23 0301 	bic.w	r3, r3, r1
 801baec:	e7e5      	b.n	801baba <floorf+0x36>
 801baee:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801baf2:	d3e4      	bcc.n	801babe <floorf+0x3a>
 801baf4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801baf8:	4770      	bx	lr
 801bafa:	2300      	movs	r3, #0
 801bafc:	e7dd      	b.n	801baba <floorf+0x36>
 801bafe:	bf00      	nop
 801bb00:	7149f2ca 	.word	0x7149f2ca
 801bb04:	bf800000 	.word	0xbf800000
 801bb08:	007fffff 	.word	0x007fffff

0801bb0c <calloc>:
 801bb0c:	4b02      	ldr	r3, [pc, #8]	@ (801bb18 <calloc+0xc>)
 801bb0e:	460a      	mov	r2, r1
 801bb10:	4601      	mov	r1, r0
 801bb12:	6818      	ldr	r0, [r3, #0]
 801bb14:	f000 b802 	b.w	801bb1c <_calloc_r>
 801bb18:	2000090c 	.word	0x2000090c

0801bb1c <_calloc_r>:
 801bb1c:	b570      	push	{r4, r5, r6, lr}
 801bb1e:	fba1 5402 	umull	r5, r4, r1, r2
 801bb22:	b934      	cbnz	r4, 801bb32 <_calloc_r+0x16>
 801bb24:	4629      	mov	r1, r5
 801bb26:	f000 f899 	bl	801bc5c <_malloc_r>
 801bb2a:	4606      	mov	r6, r0
 801bb2c:	b928      	cbnz	r0, 801bb3a <_calloc_r+0x1e>
 801bb2e:	4630      	mov	r0, r6
 801bb30:	bd70      	pop	{r4, r5, r6, pc}
 801bb32:	220c      	movs	r2, #12
 801bb34:	6002      	str	r2, [r0, #0]
 801bb36:	2600      	movs	r6, #0
 801bb38:	e7f9      	b.n	801bb2e <_calloc_r+0x12>
 801bb3a:	462a      	mov	r2, r5
 801bb3c:	4621      	mov	r1, r4
 801bb3e:	f000 fcd5 	bl	801c4ec <memset>
 801bb42:	e7f4      	b.n	801bb2e <_calloc_r+0x12>

0801bb44 <exit>:
 801bb44:	b508      	push	{r3, lr}
 801bb46:	4b06      	ldr	r3, [pc, #24]	@ (801bb60 <exit+0x1c>)
 801bb48:	4604      	mov	r4, r0
 801bb4a:	b113      	cbz	r3, 801bb52 <exit+0xe>
 801bb4c:	2100      	movs	r1, #0
 801bb4e:	f3af 8000 	nop.w
 801bb52:	4b04      	ldr	r3, [pc, #16]	@ (801bb64 <exit+0x20>)
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	b103      	cbz	r3, 801bb5a <exit+0x16>
 801bb58:	4798      	blx	r3
 801bb5a:	4620      	mov	r0, r4
 801bb5c:	f7e8 f9da 	bl	8003f14 <_exit>
 801bb60:	00000000 	.word	0x00000000
 801bb64:	20011cac 	.word	0x20011cac

0801bb68 <getenv>:
 801bb68:	b507      	push	{r0, r1, r2, lr}
 801bb6a:	4b04      	ldr	r3, [pc, #16]	@ (801bb7c <getenv+0x14>)
 801bb6c:	4601      	mov	r1, r0
 801bb6e:	aa01      	add	r2, sp, #4
 801bb70:	6818      	ldr	r0, [r3, #0]
 801bb72:	f000 f805 	bl	801bb80 <_findenv_r>
 801bb76:	b003      	add	sp, #12
 801bb78:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb7c:	2000090c 	.word	0x2000090c

0801bb80 <_findenv_r>:
 801bb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb84:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801bbf4 <_findenv_r+0x74>
 801bb88:	4606      	mov	r6, r0
 801bb8a:	4689      	mov	r9, r1
 801bb8c:	4617      	mov	r7, r2
 801bb8e:	f000 fda3 	bl	801c6d8 <__env_lock>
 801bb92:	f8da 4000 	ldr.w	r4, [sl]
 801bb96:	b134      	cbz	r4, 801bba6 <_findenv_r+0x26>
 801bb98:	464b      	mov	r3, r9
 801bb9a:	4698      	mov	r8, r3
 801bb9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bba0:	b13a      	cbz	r2, 801bbb2 <_findenv_r+0x32>
 801bba2:	2a3d      	cmp	r2, #61	@ 0x3d
 801bba4:	d1f9      	bne.n	801bb9a <_findenv_r+0x1a>
 801bba6:	4630      	mov	r0, r6
 801bba8:	f000 fd9c 	bl	801c6e4 <__env_unlock>
 801bbac:	2000      	movs	r0, #0
 801bbae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb2:	eba8 0809 	sub.w	r8, r8, r9
 801bbb6:	46a3      	mov	fp, r4
 801bbb8:	f854 0b04 	ldr.w	r0, [r4], #4
 801bbbc:	2800      	cmp	r0, #0
 801bbbe:	d0f2      	beq.n	801bba6 <_findenv_r+0x26>
 801bbc0:	4642      	mov	r2, r8
 801bbc2:	4649      	mov	r1, r9
 801bbc4:	f000 fca7 	bl	801c516 <strncmp>
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	d1f4      	bne.n	801bbb6 <_findenv_r+0x36>
 801bbcc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801bbd0:	eb03 0508 	add.w	r5, r3, r8
 801bbd4:	f813 3008 	ldrb.w	r3, [r3, r8]
 801bbd8:	2b3d      	cmp	r3, #61	@ 0x3d
 801bbda:	d1ec      	bne.n	801bbb6 <_findenv_r+0x36>
 801bbdc:	f8da 3000 	ldr.w	r3, [sl]
 801bbe0:	ebab 0303 	sub.w	r3, fp, r3
 801bbe4:	109b      	asrs	r3, r3, #2
 801bbe6:	4630      	mov	r0, r6
 801bbe8:	603b      	str	r3, [r7, #0]
 801bbea:	f000 fd7b 	bl	801c6e4 <__env_unlock>
 801bbee:	1c68      	adds	r0, r5, #1
 801bbf0:	e7dd      	b.n	801bbae <_findenv_r+0x2e>
 801bbf2:	bf00      	nop
 801bbf4:	20000004 	.word	0x20000004

0801bbf8 <malloc>:
 801bbf8:	4b02      	ldr	r3, [pc, #8]	@ (801bc04 <malloc+0xc>)
 801bbfa:	4601      	mov	r1, r0
 801bbfc:	6818      	ldr	r0, [r3, #0]
 801bbfe:	f000 b82d 	b.w	801bc5c <_malloc_r>
 801bc02:	bf00      	nop
 801bc04:	2000090c 	.word	0x2000090c

0801bc08 <free>:
 801bc08:	4b02      	ldr	r3, [pc, #8]	@ (801bc14 <free+0xc>)
 801bc0a:	4601      	mov	r1, r0
 801bc0c:	6818      	ldr	r0, [r3, #0]
 801bc0e:	f000 bd6f 	b.w	801c6f0 <_free_r>
 801bc12:	bf00      	nop
 801bc14:	2000090c 	.word	0x2000090c

0801bc18 <sbrk_aligned>:
 801bc18:	b570      	push	{r4, r5, r6, lr}
 801bc1a:	4e0f      	ldr	r6, [pc, #60]	@ (801bc58 <sbrk_aligned+0x40>)
 801bc1c:	460c      	mov	r4, r1
 801bc1e:	6831      	ldr	r1, [r6, #0]
 801bc20:	4605      	mov	r5, r0
 801bc22:	b911      	cbnz	r1, 801bc2a <sbrk_aligned+0x12>
 801bc24:	f000 fcd4 	bl	801c5d0 <_sbrk_r>
 801bc28:	6030      	str	r0, [r6, #0]
 801bc2a:	4621      	mov	r1, r4
 801bc2c:	4628      	mov	r0, r5
 801bc2e:	f000 fccf 	bl	801c5d0 <_sbrk_r>
 801bc32:	1c43      	adds	r3, r0, #1
 801bc34:	d103      	bne.n	801bc3e <sbrk_aligned+0x26>
 801bc36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801bc3a:	4620      	mov	r0, r4
 801bc3c:	bd70      	pop	{r4, r5, r6, pc}
 801bc3e:	1cc4      	adds	r4, r0, #3
 801bc40:	f024 0403 	bic.w	r4, r4, #3
 801bc44:	42a0      	cmp	r0, r4
 801bc46:	d0f8      	beq.n	801bc3a <sbrk_aligned+0x22>
 801bc48:	1a21      	subs	r1, r4, r0
 801bc4a:	4628      	mov	r0, r5
 801bc4c:	f000 fcc0 	bl	801c5d0 <_sbrk_r>
 801bc50:	3001      	adds	r0, #1
 801bc52:	d1f2      	bne.n	801bc3a <sbrk_aligned+0x22>
 801bc54:	e7ef      	b.n	801bc36 <sbrk_aligned+0x1e>
 801bc56:	bf00      	nop
 801bc58:	20011b6c 	.word	0x20011b6c

0801bc5c <_malloc_r>:
 801bc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc60:	1ccd      	adds	r5, r1, #3
 801bc62:	f025 0503 	bic.w	r5, r5, #3
 801bc66:	3508      	adds	r5, #8
 801bc68:	2d0c      	cmp	r5, #12
 801bc6a:	bf38      	it	cc
 801bc6c:	250c      	movcc	r5, #12
 801bc6e:	2d00      	cmp	r5, #0
 801bc70:	4606      	mov	r6, r0
 801bc72:	db01      	blt.n	801bc78 <_malloc_r+0x1c>
 801bc74:	42a9      	cmp	r1, r5
 801bc76:	d904      	bls.n	801bc82 <_malloc_r+0x26>
 801bc78:	230c      	movs	r3, #12
 801bc7a:	6033      	str	r3, [r6, #0]
 801bc7c:	2000      	movs	r0, #0
 801bc7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bd58 <_malloc_r+0xfc>
 801bc86:	f000 f869 	bl	801bd5c <__malloc_lock>
 801bc8a:	f8d8 3000 	ldr.w	r3, [r8]
 801bc8e:	461c      	mov	r4, r3
 801bc90:	bb44      	cbnz	r4, 801bce4 <_malloc_r+0x88>
 801bc92:	4629      	mov	r1, r5
 801bc94:	4630      	mov	r0, r6
 801bc96:	f7ff ffbf 	bl	801bc18 <sbrk_aligned>
 801bc9a:	1c43      	adds	r3, r0, #1
 801bc9c:	4604      	mov	r4, r0
 801bc9e:	d158      	bne.n	801bd52 <_malloc_r+0xf6>
 801bca0:	f8d8 4000 	ldr.w	r4, [r8]
 801bca4:	4627      	mov	r7, r4
 801bca6:	2f00      	cmp	r7, #0
 801bca8:	d143      	bne.n	801bd32 <_malloc_r+0xd6>
 801bcaa:	2c00      	cmp	r4, #0
 801bcac:	d04b      	beq.n	801bd46 <_malloc_r+0xea>
 801bcae:	6823      	ldr	r3, [r4, #0]
 801bcb0:	4639      	mov	r1, r7
 801bcb2:	4630      	mov	r0, r6
 801bcb4:	eb04 0903 	add.w	r9, r4, r3
 801bcb8:	f000 fc8a 	bl	801c5d0 <_sbrk_r>
 801bcbc:	4581      	cmp	r9, r0
 801bcbe:	d142      	bne.n	801bd46 <_malloc_r+0xea>
 801bcc0:	6821      	ldr	r1, [r4, #0]
 801bcc2:	1a6d      	subs	r5, r5, r1
 801bcc4:	4629      	mov	r1, r5
 801bcc6:	4630      	mov	r0, r6
 801bcc8:	f7ff ffa6 	bl	801bc18 <sbrk_aligned>
 801bccc:	3001      	adds	r0, #1
 801bcce:	d03a      	beq.n	801bd46 <_malloc_r+0xea>
 801bcd0:	6823      	ldr	r3, [r4, #0]
 801bcd2:	442b      	add	r3, r5
 801bcd4:	6023      	str	r3, [r4, #0]
 801bcd6:	f8d8 3000 	ldr.w	r3, [r8]
 801bcda:	685a      	ldr	r2, [r3, #4]
 801bcdc:	bb62      	cbnz	r2, 801bd38 <_malloc_r+0xdc>
 801bcde:	f8c8 7000 	str.w	r7, [r8]
 801bce2:	e00f      	b.n	801bd04 <_malloc_r+0xa8>
 801bce4:	6822      	ldr	r2, [r4, #0]
 801bce6:	1b52      	subs	r2, r2, r5
 801bce8:	d420      	bmi.n	801bd2c <_malloc_r+0xd0>
 801bcea:	2a0b      	cmp	r2, #11
 801bcec:	d917      	bls.n	801bd1e <_malloc_r+0xc2>
 801bcee:	1961      	adds	r1, r4, r5
 801bcf0:	42a3      	cmp	r3, r4
 801bcf2:	6025      	str	r5, [r4, #0]
 801bcf4:	bf18      	it	ne
 801bcf6:	6059      	strne	r1, [r3, #4]
 801bcf8:	6863      	ldr	r3, [r4, #4]
 801bcfa:	bf08      	it	eq
 801bcfc:	f8c8 1000 	streq.w	r1, [r8]
 801bd00:	5162      	str	r2, [r4, r5]
 801bd02:	604b      	str	r3, [r1, #4]
 801bd04:	4630      	mov	r0, r6
 801bd06:	f000 f82f 	bl	801bd68 <__malloc_unlock>
 801bd0a:	f104 000b 	add.w	r0, r4, #11
 801bd0e:	1d23      	adds	r3, r4, #4
 801bd10:	f020 0007 	bic.w	r0, r0, #7
 801bd14:	1ac2      	subs	r2, r0, r3
 801bd16:	bf1c      	itt	ne
 801bd18:	1a1b      	subne	r3, r3, r0
 801bd1a:	50a3      	strne	r3, [r4, r2]
 801bd1c:	e7af      	b.n	801bc7e <_malloc_r+0x22>
 801bd1e:	6862      	ldr	r2, [r4, #4]
 801bd20:	42a3      	cmp	r3, r4
 801bd22:	bf0c      	ite	eq
 801bd24:	f8c8 2000 	streq.w	r2, [r8]
 801bd28:	605a      	strne	r2, [r3, #4]
 801bd2a:	e7eb      	b.n	801bd04 <_malloc_r+0xa8>
 801bd2c:	4623      	mov	r3, r4
 801bd2e:	6864      	ldr	r4, [r4, #4]
 801bd30:	e7ae      	b.n	801bc90 <_malloc_r+0x34>
 801bd32:	463c      	mov	r4, r7
 801bd34:	687f      	ldr	r7, [r7, #4]
 801bd36:	e7b6      	b.n	801bca6 <_malloc_r+0x4a>
 801bd38:	461a      	mov	r2, r3
 801bd3a:	685b      	ldr	r3, [r3, #4]
 801bd3c:	42a3      	cmp	r3, r4
 801bd3e:	d1fb      	bne.n	801bd38 <_malloc_r+0xdc>
 801bd40:	2300      	movs	r3, #0
 801bd42:	6053      	str	r3, [r2, #4]
 801bd44:	e7de      	b.n	801bd04 <_malloc_r+0xa8>
 801bd46:	230c      	movs	r3, #12
 801bd48:	6033      	str	r3, [r6, #0]
 801bd4a:	4630      	mov	r0, r6
 801bd4c:	f000 f80c 	bl	801bd68 <__malloc_unlock>
 801bd50:	e794      	b.n	801bc7c <_malloc_r+0x20>
 801bd52:	6005      	str	r5, [r0, #0]
 801bd54:	e7d6      	b.n	801bd04 <_malloc_r+0xa8>
 801bd56:	bf00      	nop
 801bd58:	20011b70 	.word	0x20011b70

0801bd5c <__malloc_lock>:
 801bd5c:	4801      	ldr	r0, [pc, #4]	@ (801bd64 <__malloc_lock+0x8>)
 801bd5e:	f000 bc84 	b.w	801c66a <__retarget_lock_acquire_recursive>
 801bd62:	bf00      	nop
 801bd64:	20011cb5 	.word	0x20011cb5

0801bd68 <__malloc_unlock>:
 801bd68:	4801      	ldr	r0, [pc, #4]	@ (801bd70 <__malloc_unlock+0x8>)
 801bd6a:	f000 bc7f 	b.w	801c66c <__retarget_lock_release_recursive>
 801bd6e:	bf00      	nop
 801bd70:	20011cb5 	.word	0x20011cb5

0801bd74 <srand>:
 801bd74:	b538      	push	{r3, r4, r5, lr}
 801bd76:	4b10      	ldr	r3, [pc, #64]	@ (801bdb8 <srand+0x44>)
 801bd78:	681d      	ldr	r5, [r3, #0]
 801bd7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bd7c:	4604      	mov	r4, r0
 801bd7e:	b9b3      	cbnz	r3, 801bdae <srand+0x3a>
 801bd80:	2018      	movs	r0, #24
 801bd82:	f7ff ff39 	bl	801bbf8 <malloc>
 801bd86:	4602      	mov	r2, r0
 801bd88:	6328      	str	r0, [r5, #48]	@ 0x30
 801bd8a:	b920      	cbnz	r0, 801bd96 <srand+0x22>
 801bd8c:	4b0b      	ldr	r3, [pc, #44]	@ (801bdbc <srand+0x48>)
 801bd8e:	480c      	ldr	r0, [pc, #48]	@ (801bdc0 <srand+0x4c>)
 801bd90:	2146      	movs	r1, #70	@ 0x46
 801bd92:	f000 fc83 	bl	801c69c <__assert_func>
 801bd96:	490b      	ldr	r1, [pc, #44]	@ (801bdc4 <srand+0x50>)
 801bd98:	4b0b      	ldr	r3, [pc, #44]	@ (801bdc8 <srand+0x54>)
 801bd9a:	e9c0 1300 	strd	r1, r3, [r0]
 801bd9e:	4b0b      	ldr	r3, [pc, #44]	@ (801bdcc <srand+0x58>)
 801bda0:	6083      	str	r3, [r0, #8]
 801bda2:	230b      	movs	r3, #11
 801bda4:	8183      	strh	r3, [r0, #12]
 801bda6:	2100      	movs	r1, #0
 801bda8:	2001      	movs	r0, #1
 801bdaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bdae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	611c      	str	r4, [r3, #16]
 801bdb4:	615a      	str	r2, [r3, #20]
 801bdb6:	bd38      	pop	{r3, r4, r5, pc}
 801bdb8:	2000090c 	.word	0x2000090c
 801bdbc:	0801e7a0 	.word	0x0801e7a0
 801bdc0:	0801e7b7 	.word	0x0801e7b7
 801bdc4:	abcd330e 	.word	0xabcd330e
 801bdc8:	e66d1234 	.word	0xe66d1234
 801bdcc:	0005deec 	.word	0x0005deec

0801bdd0 <rand>:
 801bdd0:	4b16      	ldr	r3, [pc, #88]	@ (801be2c <rand+0x5c>)
 801bdd2:	b510      	push	{r4, lr}
 801bdd4:	681c      	ldr	r4, [r3, #0]
 801bdd6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801bdd8:	b9b3      	cbnz	r3, 801be08 <rand+0x38>
 801bdda:	2018      	movs	r0, #24
 801bddc:	f7ff ff0c 	bl	801bbf8 <malloc>
 801bde0:	4602      	mov	r2, r0
 801bde2:	6320      	str	r0, [r4, #48]	@ 0x30
 801bde4:	b920      	cbnz	r0, 801bdf0 <rand+0x20>
 801bde6:	4b12      	ldr	r3, [pc, #72]	@ (801be30 <rand+0x60>)
 801bde8:	4812      	ldr	r0, [pc, #72]	@ (801be34 <rand+0x64>)
 801bdea:	2152      	movs	r1, #82	@ 0x52
 801bdec:	f000 fc56 	bl	801c69c <__assert_func>
 801bdf0:	4911      	ldr	r1, [pc, #68]	@ (801be38 <rand+0x68>)
 801bdf2:	4b12      	ldr	r3, [pc, #72]	@ (801be3c <rand+0x6c>)
 801bdf4:	e9c0 1300 	strd	r1, r3, [r0]
 801bdf8:	4b11      	ldr	r3, [pc, #68]	@ (801be40 <rand+0x70>)
 801bdfa:	6083      	str	r3, [r0, #8]
 801bdfc:	230b      	movs	r3, #11
 801bdfe:	8183      	strh	r3, [r0, #12]
 801be00:	2100      	movs	r1, #0
 801be02:	2001      	movs	r0, #1
 801be04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801be08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801be0a:	480e      	ldr	r0, [pc, #56]	@ (801be44 <rand+0x74>)
 801be0c:	690b      	ldr	r3, [r1, #16]
 801be0e:	694c      	ldr	r4, [r1, #20]
 801be10:	4a0d      	ldr	r2, [pc, #52]	@ (801be48 <rand+0x78>)
 801be12:	4358      	muls	r0, r3
 801be14:	fb02 0004 	mla	r0, r2, r4, r0
 801be18:	fba3 3202 	umull	r3, r2, r3, r2
 801be1c:	3301      	adds	r3, #1
 801be1e:	eb40 0002 	adc.w	r0, r0, r2
 801be22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801be26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801be2a:	bd10      	pop	{r4, pc}
 801be2c:	2000090c 	.word	0x2000090c
 801be30:	0801e7a0 	.word	0x0801e7a0
 801be34:	0801e7b7 	.word	0x0801e7b7
 801be38:	abcd330e 	.word	0xabcd330e
 801be3c:	e66d1234 	.word	0xe66d1234
 801be40:	0005deec 	.word	0x0005deec
 801be44:	5851f42d 	.word	0x5851f42d
 801be48:	4c957f2d 	.word	0x4c957f2d

0801be4c <realloc>:
 801be4c:	4b02      	ldr	r3, [pc, #8]	@ (801be58 <realloc+0xc>)
 801be4e:	460a      	mov	r2, r1
 801be50:	4601      	mov	r1, r0
 801be52:	6818      	ldr	r0, [r3, #0]
 801be54:	f000 b802 	b.w	801be5c <_realloc_r>
 801be58:	2000090c 	.word	0x2000090c

0801be5c <_realloc_r>:
 801be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be60:	4607      	mov	r7, r0
 801be62:	4614      	mov	r4, r2
 801be64:	460d      	mov	r5, r1
 801be66:	b921      	cbnz	r1, 801be72 <_realloc_r+0x16>
 801be68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be6c:	4611      	mov	r1, r2
 801be6e:	f7ff bef5 	b.w	801bc5c <_malloc_r>
 801be72:	b92a      	cbnz	r2, 801be80 <_realloc_r+0x24>
 801be74:	f000 fc3c 	bl	801c6f0 <_free_r>
 801be78:	4625      	mov	r5, r4
 801be7a:	4628      	mov	r0, r5
 801be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be80:	f000 fc80 	bl	801c784 <_malloc_usable_size_r>
 801be84:	4284      	cmp	r4, r0
 801be86:	4606      	mov	r6, r0
 801be88:	d802      	bhi.n	801be90 <_realloc_r+0x34>
 801be8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801be8e:	d8f4      	bhi.n	801be7a <_realloc_r+0x1e>
 801be90:	4621      	mov	r1, r4
 801be92:	4638      	mov	r0, r7
 801be94:	f7ff fee2 	bl	801bc5c <_malloc_r>
 801be98:	4680      	mov	r8, r0
 801be9a:	b908      	cbnz	r0, 801bea0 <_realloc_r+0x44>
 801be9c:	4645      	mov	r5, r8
 801be9e:	e7ec      	b.n	801be7a <_realloc_r+0x1e>
 801bea0:	42b4      	cmp	r4, r6
 801bea2:	4622      	mov	r2, r4
 801bea4:	4629      	mov	r1, r5
 801bea6:	bf28      	it	cs
 801bea8:	4632      	movcs	r2, r6
 801beaa:	f000 fbe8 	bl	801c67e <memcpy>
 801beae:	4629      	mov	r1, r5
 801beb0:	4638      	mov	r0, r7
 801beb2:	f000 fc1d 	bl	801c6f0 <_free_r>
 801beb6:	e7f1      	b.n	801be9c <_realloc_r+0x40>

0801beb8 <_strtoul_l.isra.0>:
 801beb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bebc:	4e34      	ldr	r6, [pc, #208]	@ (801bf90 <_strtoul_l.isra.0+0xd8>)
 801bebe:	4686      	mov	lr, r0
 801bec0:	460d      	mov	r5, r1
 801bec2:	4628      	mov	r0, r5
 801bec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bec8:	5d37      	ldrb	r7, [r6, r4]
 801beca:	f017 0708 	ands.w	r7, r7, #8
 801bece:	d1f8      	bne.n	801bec2 <_strtoul_l.isra.0+0xa>
 801bed0:	2c2d      	cmp	r4, #45	@ 0x2d
 801bed2:	d110      	bne.n	801bef6 <_strtoul_l.isra.0+0x3e>
 801bed4:	782c      	ldrb	r4, [r5, #0]
 801bed6:	2701      	movs	r7, #1
 801bed8:	1c85      	adds	r5, r0, #2
 801beda:	f033 0010 	bics.w	r0, r3, #16
 801bede:	d115      	bne.n	801bf0c <_strtoul_l.isra.0+0x54>
 801bee0:	2c30      	cmp	r4, #48	@ 0x30
 801bee2:	d10d      	bne.n	801bf00 <_strtoul_l.isra.0+0x48>
 801bee4:	7828      	ldrb	r0, [r5, #0]
 801bee6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801beea:	2858      	cmp	r0, #88	@ 0x58
 801beec:	d108      	bne.n	801bf00 <_strtoul_l.isra.0+0x48>
 801beee:	786c      	ldrb	r4, [r5, #1]
 801bef0:	3502      	adds	r5, #2
 801bef2:	2310      	movs	r3, #16
 801bef4:	e00a      	b.n	801bf0c <_strtoul_l.isra.0+0x54>
 801bef6:	2c2b      	cmp	r4, #43	@ 0x2b
 801bef8:	bf04      	itt	eq
 801befa:	782c      	ldrbeq	r4, [r5, #0]
 801befc:	1c85      	addeq	r5, r0, #2
 801befe:	e7ec      	b.n	801beda <_strtoul_l.isra.0+0x22>
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d1f6      	bne.n	801bef2 <_strtoul_l.isra.0+0x3a>
 801bf04:	2c30      	cmp	r4, #48	@ 0x30
 801bf06:	bf14      	ite	ne
 801bf08:	230a      	movne	r3, #10
 801bf0a:	2308      	moveq	r3, #8
 801bf0c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801bf10:	2600      	movs	r6, #0
 801bf12:	fbb8 f8f3 	udiv	r8, r8, r3
 801bf16:	fb03 f908 	mul.w	r9, r3, r8
 801bf1a:	ea6f 0909 	mvn.w	r9, r9
 801bf1e:	4630      	mov	r0, r6
 801bf20:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bf24:	f1bc 0f09 	cmp.w	ip, #9
 801bf28:	d810      	bhi.n	801bf4c <_strtoul_l.isra.0+0x94>
 801bf2a:	4664      	mov	r4, ip
 801bf2c:	42a3      	cmp	r3, r4
 801bf2e:	dd1e      	ble.n	801bf6e <_strtoul_l.isra.0+0xb6>
 801bf30:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801bf34:	d007      	beq.n	801bf46 <_strtoul_l.isra.0+0x8e>
 801bf36:	4580      	cmp	r8, r0
 801bf38:	d316      	bcc.n	801bf68 <_strtoul_l.isra.0+0xb0>
 801bf3a:	d101      	bne.n	801bf40 <_strtoul_l.isra.0+0x88>
 801bf3c:	45a1      	cmp	r9, r4
 801bf3e:	db13      	blt.n	801bf68 <_strtoul_l.isra.0+0xb0>
 801bf40:	fb00 4003 	mla	r0, r0, r3, r4
 801bf44:	2601      	movs	r6, #1
 801bf46:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf4a:	e7e9      	b.n	801bf20 <_strtoul_l.isra.0+0x68>
 801bf4c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801bf50:	f1bc 0f19 	cmp.w	ip, #25
 801bf54:	d801      	bhi.n	801bf5a <_strtoul_l.isra.0+0xa2>
 801bf56:	3c37      	subs	r4, #55	@ 0x37
 801bf58:	e7e8      	b.n	801bf2c <_strtoul_l.isra.0+0x74>
 801bf5a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801bf5e:	f1bc 0f19 	cmp.w	ip, #25
 801bf62:	d804      	bhi.n	801bf6e <_strtoul_l.isra.0+0xb6>
 801bf64:	3c57      	subs	r4, #87	@ 0x57
 801bf66:	e7e1      	b.n	801bf2c <_strtoul_l.isra.0+0x74>
 801bf68:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801bf6c:	e7eb      	b.n	801bf46 <_strtoul_l.isra.0+0x8e>
 801bf6e:	1c73      	adds	r3, r6, #1
 801bf70:	d106      	bne.n	801bf80 <_strtoul_l.isra.0+0xc8>
 801bf72:	2322      	movs	r3, #34	@ 0x22
 801bf74:	f8ce 3000 	str.w	r3, [lr]
 801bf78:	4630      	mov	r0, r6
 801bf7a:	b932      	cbnz	r2, 801bf8a <_strtoul_l.isra.0+0xd2>
 801bf7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf80:	b107      	cbz	r7, 801bf84 <_strtoul_l.isra.0+0xcc>
 801bf82:	4240      	negs	r0, r0
 801bf84:	2a00      	cmp	r2, #0
 801bf86:	d0f9      	beq.n	801bf7c <_strtoul_l.isra.0+0xc4>
 801bf88:	b106      	cbz	r6, 801bf8c <_strtoul_l.isra.0+0xd4>
 801bf8a:	1e69      	subs	r1, r5, #1
 801bf8c:	6011      	str	r1, [r2, #0]
 801bf8e:	e7f5      	b.n	801bf7c <_strtoul_l.isra.0+0xc4>
 801bf90:	0801e87f 	.word	0x0801e87f

0801bf94 <strtoul>:
 801bf94:	4613      	mov	r3, r2
 801bf96:	460a      	mov	r2, r1
 801bf98:	4601      	mov	r1, r0
 801bf9a:	4802      	ldr	r0, [pc, #8]	@ (801bfa4 <strtoul+0x10>)
 801bf9c:	6800      	ldr	r0, [r0, #0]
 801bf9e:	f7ff bf8b 	b.w	801beb8 <_strtoul_l.isra.0>
 801bfa2:	bf00      	nop
 801bfa4:	2000090c 	.word	0x2000090c

0801bfa8 <std>:
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	b510      	push	{r4, lr}
 801bfac:	4604      	mov	r4, r0
 801bfae:	e9c0 3300 	strd	r3, r3, [r0]
 801bfb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bfb6:	6083      	str	r3, [r0, #8]
 801bfb8:	8181      	strh	r1, [r0, #12]
 801bfba:	6643      	str	r3, [r0, #100]	@ 0x64
 801bfbc:	81c2      	strh	r2, [r0, #14]
 801bfbe:	6183      	str	r3, [r0, #24]
 801bfc0:	4619      	mov	r1, r3
 801bfc2:	2208      	movs	r2, #8
 801bfc4:	305c      	adds	r0, #92	@ 0x5c
 801bfc6:	f000 fa91 	bl	801c4ec <memset>
 801bfca:	4b0d      	ldr	r3, [pc, #52]	@ (801c000 <std+0x58>)
 801bfcc:	6263      	str	r3, [r4, #36]	@ 0x24
 801bfce:	4b0d      	ldr	r3, [pc, #52]	@ (801c004 <std+0x5c>)
 801bfd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bfd2:	4b0d      	ldr	r3, [pc, #52]	@ (801c008 <std+0x60>)
 801bfd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bfd6:	4b0d      	ldr	r3, [pc, #52]	@ (801c00c <std+0x64>)
 801bfd8:	6323      	str	r3, [r4, #48]	@ 0x30
 801bfda:	4b0d      	ldr	r3, [pc, #52]	@ (801c010 <std+0x68>)
 801bfdc:	6224      	str	r4, [r4, #32]
 801bfde:	429c      	cmp	r4, r3
 801bfe0:	d006      	beq.n	801bff0 <std+0x48>
 801bfe2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bfe6:	4294      	cmp	r4, r2
 801bfe8:	d002      	beq.n	801bff0 <std+0x48>
 801bfea:	33d0      	adds	r3, #208	@ 0xd0
 801bfec:	429c      	cmp	r4, r3
 801bfee:	d105      	bne.n	801bffc <std+0x54>
 801bff0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bff8:	f000 bb36 	b.w	801c668 <__retarget_lock_init_recursive>
 801bffc:	bd10      	pop	{r4, pc}
 801bffe:	bf00      	nop
 801c000:	0801c271 	.word	0x0801c271
 801c004:	0801c293 	.word	0x0801c293
 801c008:	0801c2cb 	.word	0x0801c2cb
 801c00c:	0801c2ef 	.word	0x0801c2ef
 801c010:	20011b74 	.word	0x20011b74

0801c014 <stdio_exit_handler>:
 801c014:	4a02      	ldr	r2, [pc, #8]	@ (801c020 <stdio_exit_handler+0xc>)
 801c016:	4903      	ldr	r1, [pc, #12]	@ (801c024 <stdio_exit_handler+0x10>)
 801c018:	4803      	ldr	r0, [pc, #12]	@ (801c028 <stdio_exit_handler+0x14>)
 801c01a:	f000 b869 	b.w	801c0f0 <_fwalk_sglue>
 801c01e:	bf00      	nop
 801c020:	20000900 	.word	0x20000900
 801c024:	0801d0e9 	.word	0x0801d0e9
 801c028:	20000910 	.word	0x20000910

0801c02c <cleanup_stdio>:
 801c02c:	6841      	ldr	r1, [r0, #4]
 801c02e:	4b0c      	ldr	r3, [pc, #48]	@ (801c060 <cleanup_stdio+0x34>)
 801c030:	4299      	cmp	r1, r3
 801c032:	b510      	push	{r4, lr}
 801c034:	4604      	mov	r4, r0
 801c036:	d001      	beq.n	801c03c <cleanup_stdio+0x10>
 801c038:	f001 f856 	bl	801d0e8 <_fflush_r>
 801c03c:	68a1      	ldr	r1, [r4, #8]
 801c03e:	4b09      	ldr	r3, [pc, #36]	@ (801c064 <cleanup_stdio+0x38>)
 801c040:	4299      	cmp	r1, r3
 801c042:	d002      	beq.n	801c04a <cleanup_stdio+0x1e>
 801c044:	4620      	mov	r0, r4
 801c046:	f001 f84f 	bl	801d0e8 <_fflush_r>
 801c04a:	68e1      	ldr	r1, [r4, #12]
 801c04c:	4b06      	ldr	r3, [pc, #24]	@ (801c068 <cleanup_stdio+0x3c>)
 801c04e:	4299      	cmp	r1, r3
 801c050:	d004      	beq.n	801c05c <cleanup_stdio+0x30>
 801c052:	4620      	mov	r0, r4
 801c054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c058:	f001 b846 	b.w	801d0e8 <_fflush_r>
 801c05c:	bd10      	pop	{r4, pc}
 801c05e:	bf00      	nop
 801c060:	20011b74 	.word	0x20011b74
 801c064:	20011bdc 	.word	0x20011bdc
 801c068:	20011c44 	.word	0x20011c44

0801c06c <global_stdio_init.part.0>:
 801c06c:	b510      	push	{r4, lr}
 801c06e:	4b0b      	ldr	r3, [pc, #44]	@ (801c09c <global_stdio_init.part.0+0x30>)
 801c070:	4c0b      	ldr	r4, [pc, #44]	@ (801c0a0 <global_stdio_init.part.0+0x34>)
 801c072:	4a0c      	ldr	r2, [pc, #48]	@ (801c0a4 <global_stdio_init.part.0+0x38>)
 801c074:	601a      	str	r2, [r3, #0]
 801c076:	4620      	mov	r0, r4
 801c078:	2200      	movs	r2, #0
 801c07a:	2104      	movs	r1, #4
 801c07c:	f7ff ff94 	bl	801bfa8 <std>
 801c080:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c084:	2201      	movs	r2, #1
 801c086:	2109      	movs	r1, #9
 801c088:	f7ff ff8e 	bl	801bfa8 <std>
 801c08c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c090:	2202      	movs	r2, #2
 801c092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c096:	2112      	movs	r1, #18
 801c098:	f7ff bf86 	b.w	801bfa8 <std>
 801c09c:	20011cac 	.word	0x20011cac
 801c0a0:	20011b74 	.word	0x20011b74
 801c0a4:	0801c015 	.word	0x0801c015

0801c0a8 <__sfp_lock_acquire>:
 801c0a8:	4801      	ldr	r0, [pc, #4]	@ (801c0b0 <__sfp_lock_acquire+0x8>)
 801c0aa:	f000 bade 	b.w	801c66a <__retarget_lock_acquire_recursive>
 801c0ae:	bf00      	nop
 801c0b0:	20011cb6 	.word	0x20011cb6

0801c0b4 <__sfp_lock_release>:
 801c0b4:	4801      	ldr	r0, [pc, #4]	@ (801c0bc <__sfp_lock_release+0x8>)
 801c0b6:	f000 bad9 	b.w	801c66c <__retarget_lock_release_recursive>
 801c0ba:	bf00      	nop
 801c0bc:	20011cb6 	.word	0x20011cb6

0801c0c0 <__sinit>:
 801c0c0:	b510      	push	{r4, lr}
 801c0c2:	4604      	mov	r4, r0
 801c0c4:	f7ff fff0 	bl	801c0a8 <__sfp_lock_acquire>
 801c0c8:	6a23      	ldr	r3, [r4, #32]
 801c0ca:	b11b      	cbz	r3, 801c0d4 <__sinit+0x14>
 801c0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0d0:	f7ff bff0 	b.w	801c0b4 <__sfp_lock_release>
 801c0d4:	4b04      	ldr	r3, [pc, #16]	@ (801c0e8 <__sinit+0x28>)
 801c0d6:	6223      	str	r3, [r4, #32]
 801c0d8:	4b04      	ldr	r3, [pc, #16]	@ (801c0ec <__sinit+0x2c>)
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d1f5      	bne.n	801c0cc <__sinit+0xc>
 801c0e0:	f7ff ffc4 	bl	801c06c <global_stdio_init.part.0>
 801c0e4:	e7f2      	b.n	801c0cc <__sinit+0xc>
 801c0e6:	bf00      	nop
 801c0e8:	0801c02d 	.word	0x0801c02d
 801c0ec:	20011cac 	.word	0x20011cac

0801c0f0 <_fwalk_sglue>:
 801c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0f4:	4607      	mov	r7, r0
 801c0f6:	4688      	mov	r8, r1
 801c0f8:	4614      	mov	r4, r2
 801c0fa:	2600      	movs	r6, #0
 801c0fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c100:	f1b9 0901 	subs.w	r9, r9, #1
 801c104:	d505      	bpl.n	801c112 <_fwalk_sglue+0x22>
 801c106:	6824      	ldr	r4, [r4, #0]
 801c108:	2c00      	cmp	r4, #0
 801c10a:	d1f7      	bne.n	801c0fc <_fwalk_sglue+0xc>
 801c10c:	4630      	mov	r0, r6
 801c10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c112:	89ab      	ldrh	r3, [r5, #12]
 801c114:	2b01      	cmp	r3, #1
 801c116:	d907      	bls.n	801c128 <_fwalk_sglue+0x38>
 801c118:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c11c:	3301      	adds	r3, #1
 801c11e:	d003      	beq.n	801c128 <_fwalk_sglue+0x38>
 801c120:	4629      	mov	r1, r5
 801c122:	4638      	mov	r0, r7
 801c124:	47c0      	blx	r8
 801c126:	4306      	orrs	r6, r0
 801c128:	3568      	adds	r5, #104	@ 0x68
 801c12a:	e7e9      	b.n	801c100 <_fwalk_sglue+0x10>

0801c12c <_fwrite_r>:
 801c12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c130:	9c08      	ldr	r4, [sp, #32]
 801c132:	468a      	mov	sl, r1
 801c134:	4690      	mov	r8, r2
 801c136:	fb02 f903 	mul.w	r9, r2, r3
 801c13a:	4606      	mov	r6, r0
 801c13c:	b118      	cbz	r0, 801c146 <_fwrite_r+0x1a>
 801c13e:	6a03      	ldr	r3, [r0, #32]
 801c140:	b90b      	cbnz	r3, 801c146 <_fwrite_r+0x1a>
 801c142:	f7ff ffbd 	bl	801c0c0 <__sinit>
 801c146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c148:	07dd      	lsls	r5, r3, #31
 801c14a:	d405      	bmi.n	801c158 <_fwrite_r+0x2c>
 801c14c:	89a3      	ldrh	r3, [r4, #12]
 801c14e:	0598      	lsls	r0, r3, #22
 801c150:	d402      	bmi.n	801c158 <_fwrite_r+0x2c>
 801c152:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c154:	f000 fa89 	bl	801c66a <__retarget_lock_acquire_recursive>
 801c158:	89a3      	ldrh	r3, [r4, #12]
 801c15a:	0719      	lsls	r1, r3, #28
 801c15c:	d516      	bpl.n	801c18c <_fwrite_r+0x60>
 801c15e:	6923      	ldr	r3, [r4, #16]
 801c160:	b1a3      	cbz	r3, 801c18c <_fwrite_r+0x60>
 801c162:	2500      	movs	r5, #0
 801c164:	454d      	cmp	r5, r9
 801c166:	d01f      	beq.n	801c1a8 <_fwrite_r+0x7c>
 801c168:	68a7      	ldr	r7, [r4, #8]
 801c16a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801c16e:	3f01      	subs	r7, #1
 801c170:	2f00      	cmp	r7, #0
 801c172:	60a7      	str	r7, [r4, #8]
 801c174:	da04      	bge.n	801c180 <_fwrite_r+0x54>
 801c176:	69a3      	ldr	r3, [r4, #24]
 801c178:	429f      	cmp	r7, r3
 801c17a:	db0f      	blt.n	801c19c <_fwrite_r+0x70>
 801c17c:	290a      	cmp	r1, #10
 801c17e:	d00d      	beq.n	801c19c <_fwrite_r+0x70>
 801c180:	6823      	ldr	r3, [r4, #0]
 801c182:	1c5a      	adds	r2, r3, #1
 801c184:	6022      	str	r2, [r4, #0]
 801c186:	7019      	strb	r1, [r3, #0]
 801c188:	3501      	adds	r5, #1
 801c18a:	e7eb      	b.n	801c164 <_fwrite_r+0x38>
 801c18c:	4621      	mov	r1, r4
 801c18e:	4630      	mov	r0, r6
 801c190:	f000 f92c 	bl	801c3ec <__swsetup_r>
 801c194:	2800      	cmp	r0, #0
 801c196:	d0e4      	beq.n	801c162 <_fwrite_r+0x36>
 801c198:	2500      	movs	r5, #0
 801c19a:	e005      	b.n	801c1a8 <_fwrite_r+0x7c>
 801c19c:	4622      	mov	r2, r4
 801c19e:	4630      	mov	r0, r6
 801c1a0:	f000 f8e6 	bl	801c370 <__swbuf_r>
 801c1a4:	3001      	adds	r0, #1
 801c1a6:	d1ef      	bne.n	801c188 <_fwrite_r+0x5c>
 801c1a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c1aa:	07da      	lsls	r2, r3, #31
 801c1ac:	d405      	bmi.n	801c1ba <_fwrite_r+0x8e>
 801c1ae:	89a3      	ldrh	r3, [r4, #12]
 801c1b0:	059b      	lsls	r3, r3, #22
 801c1b2:	d402      	bmi.n	801c1ba <_fwrite_r+0x8e>
 801c1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c1b6:	f000 fa59 	bl	801c66c <__retarget_lock_release_recursive>
 801c1ba:	fbb5 f0f8 	udiv	r0, r5, r8
 801c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801c1c4 <fwrite>:
 801c1c4:	b507      	push	{r0, r1, r2, lr}
 801c1c6:	9300      	str	r3, [sp, #0]
 801c1c8:	4613      	mov	r3, r2
 801c1ca:	460a      	mov	r2, r1
 801c1cc:	4601      	mov	r1, r0
 801c1ce:	4803      	ldr	r0, [pc, #12]	@ (801c1dc <fwrite+0x18>)
 801c1d0:	6800      	ldr	r0, [r0, #0]
 801c1d2:	f7ff ffab 	bl	801c12c <_fwrite_r>
 801c1d6:	b003      	add	sp, #12
 801c1d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c1dc:	2000090c 	.word	0x2000090c

0801c1e0 <iprintf>:
 801c1e0:	b40f      	push	{r0, r1, r2, r3}
 801c1e2:	b507      	push	{r0, r1, r2, lr}
 801c1e4:	4906      	ldr	r1, [pc, #24]	@ (801c200 <iprintf+0x20>)
 801c1e6:	ab04      	add	r3, sp, #16
 801c1e8:	6808      	ldr	r0, [r1, #0]
 801c1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1ee:	6881      	ldr	r1, [r0, #8]
 801c1f0:	9301      	str	r3, [sp, #4]
 801c1f2:	f000 fc51 	bl	801ca98 <_vfiprintf_r>
 801c1f6:	b003      	add	sp, #12
 801c1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801c1fc:	b004      	add	sp, #16
 801c1fe:	4770      	bx	lr
 801c200:	2000090c 	.word	0x2000090c

0801c204 <sniprintf>:
 801c204:	b40c      	push	{r2, r3}
 801c206:	b530      	push	{r4, r5, lr}
 801c208:	4b18      	ldr	r3, [pc, #96]	@ (801c26c <sniprintf+0x68>)
 801c20a:	1e0c      	subs	r4, r1, #0
 801c20c:	681d      	ldr	r5, [r3, #0]
 801c20e:	b09d      	sub	sp, #116	@ 0x74
 801c210:	da08      	bge.n	801c224 <sniprintf+0x20>
 801c212:	238b      	movs	r3, #139	@ 0x8b
 801c214:	602b      	str	r3, [r5, #0]
 801c216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c21a:	b01d      	add	sp, #116	@ 0x74
 801c21c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c220:	b002      	add	sp, #8
 801c222:	4770      	bx	lr
 801c224:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c228:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c22c:	f04f 0300 	mov.w	r3, #0
 801c230:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c232:	bf14      	ite	ne
 801c234:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c238:	4623      	moveq	r3, r4
 801c23a:	9304      	str	r3, [sp, #16]
 801c23c:	9307      	str	r3, [sp, #28]
 801c23e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c242:	9002      	str	r0, [sp, #8]
 801c244:	9006      	str	r0, [sp, #24]
 801c246:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c24a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c24c:	ab21      	add	r3, sp, #132	@ 0x84
 801c24e:	a902      	add	r1, sp, #8
 801c250:	4628      	mov	r0, r5
 801c252:	9301      	str	r3, [sp, #4]
 801c254:	f000 fafa 	bl	801c84c <_svfiprintf_r>
 801c258:	1c43      	adds	r3, r0, #1
 801c25a:	bfbc      	itt	lt
 801c25c:	238b      	movlt	r3, #139	@ 0x8b
 801c25e:	602b      	strlt	r3, [r5, #0]
 801c260:	2c00      	cmp	r4, #0
 801c262:	d0da      	beq.n	801c21a <sniprintf+0x16>
 801c264:	9b02      	ldr	r3, [sp, #8]
 801c266:	2200      	movs	r2, #0
 801c268:	701a      	strb	r2, [r3, #0]
 801c26a:	e7d6      	b.n	801c21a <sniprintf+0x16>
 801c26c:	2000090c 	.word	0x2000090c

0801c270 <__sread>:
 801c270:	b510      	push	{r4, lr}
 801c272:	460c      	mov	r4, r1
 801c274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c278:	f000 f998 	bl	801c5ac <_read_r>
 801c27c:	2800      	cmp	r0, #0
 801c27e:	bfab      	itete	ge
 801c280:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c282:	89a3      	ldrhlt	r3, [r4, #12]
 801c284:	181b      	addge	r3, r3, r0
 801c286:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c28a:	bfac      	ite	ge
 801c28c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c28e:	81a3      	strhlt	r3, [r4, #12]
 801c290:	bd10      	pop	{r4, pc}

0801c292 <__swrite>:
 801c292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c296:	461f      	mov	r7, r3
 801c298:	898b      	ldrh	r3, [r1, #12]
 801c29a:	05db      	lsls	r3, r3, #23
 801c29c:	4605      	mov	r5, r0
 801c29e:	460c      	mov	r4, r1
 801c2a0:	4616      	mov	r6, r2
 801c2a2:	d505      	bpl.n	801c2b0 <__swrite+0x1e>
 801c2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2a8:	2302      	movs	r3, #2
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	f000 f96c 	bl	801c588 <_lseek_r>
 801c2b0:	89a3      	ldrh	r3, [r4, #12]
 801c2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c2ba:	81a3      	strh	r3, [r4, #12]
 801c2bc:	4632      	mov	r2, r6
 801c2be:	463b      	mov	r3, r7
 801c2c0:	4628      	mov	r0, r5
 801c2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2c6:	f000 b993 	b.w	801c5f0 <_write_r>

0801c2ca <__sseek>:
 801c2ca:	b510      	push	{r4, lr}
 801c2cc:	460c      	mov	r4, r1
 801c2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2d2:	f000 f959 	bl	801c588 <_lseek_r>
 801c2d6:	1c43      	adds	r3, r0, #1
 801c2d8:	89a3      	ldrh	r3, [r4, #12]
 801c2da:	bf15      	itete	ne
 801c2dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c2de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c2e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c2e6:	81a3      	strheq	r3, [r4, #12]
 801c2e8:	bf18      	it	ne
 801c2ea:	81a3      	strhne	r3, [r4, #12]
 801c2ec:	bd10      	pop	{r4, pc}

0801c2ee <__sclose>:
 801c2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2f2:	f000 b939 	b.w	801c568 <_close_r>

0801c2f6 <_vsniprintf_r>:
 801c2f6:	b530      	push	{r4, r5, lr}
 801c2f8:	4614      	mov	r4, r2
 801c2fa:	2c00      	cmp	r4, #0
 801c2fc:	b09b      	sub	sp, #108	@ 0x6c
 801c2fe:	4605      	mov	r5, r0
 801c300:	461a      	mov	r2, r3
 801c302:	da05      	bge.n	801c310 <_vsniprintf_r+0x1a>
 801c304:	238b      	movs	r3, #139	@ 0x8b
 801c306:	6003      	str	r3, [r0, #0]
 801c308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c30c:	b01b      	add	sp, #108	@ 0x6c
 801c30e:	bd30      	pop	{r4, r5, pc}
 801c310:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801c314:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c318:	f04f 0300 	mov.w	r3, #0
 801c31c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c31e:	bf14      	ite	ne
 801c320:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801c324:	4623      	moveq	r3, r4
 801c326:	9302      	str	r3, [sp, #8]
 801c328:	9305      	str	r3, [sp, #20]
 801c32a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c32e:	9100      	str	r1, [sp, #0]
 801c330:	9104      	str	r1, [sp, #16]
 801c332:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c336:	4669      	mov	r1, sp
 801c338:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c33a:	f000 fa87 	bl	801c84c <_svfiprintf_r>
 801c33e:	1c43      	adds	r3, r0, #1
 801c340:	bfbc      	itt	lt
 801c342:	238b      	movlt	r3, #139	@ 0x8b
 801c344:	602b      	strlt	r3, [r5, #0]
 801c346:	2c00      	cmp	r4, #0
 801c348:	d0e0      	beq.n	801c30c <_vsniprintf_r+0x16>
 801c34a:	9b00      	ldr	r3, [sp, #0]
 801c34c:	2200      	movs	r2, #0
 801c34e:	701a      	strb	r2, [r3, #0]
 801c350:	e7dc      	b.n	801c30c <_vsniprintf_r+0x16>
	...

0801c354 <vsniprintf>:
 801c354:	b507      	push	{r0, r1, r2, lr}
 801c356:	9300      	str	r3, [sp, #0]
 801c358:	4613      	mov	r3, r2
 801c35a:	460a      	mov	r2, r1
 801c35c:	4601      	mov	r1, r0
 801c35e:	4803      	ldr	r0, [pc, #12]	@ (801c36c <vsniprintf+0x18>)
 801c360:	6800      	ldr	r0, [r0, #0]
 801c362:	f7ff ffc8 	bl	801c2f6 <_vsniprintf_r>
 801c366:	b003      	add	sp, #12
 801c368:	f85d fb04 	ldr.w	pc, [sp], #4
 801c36c:	2000090c 	.word	0x2000090c

0801c370 <__swbuf_r>:
 801c370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c372:	460e      	mov	r6, r1
 801c374:	4614      	mov	r4, r2
 801c376:	4605      	mov	r5, r0
 801c378:	b118      	cbz	r0, 801c382 <__swbuf_r+0x12>
 801c37a:	6a03      	ldr	r3, [r0, #32]
 801c37c:	b90b      	cbnz	r3, 801c382 <__swbuf_r+0x12>
 801c37e:	f7ff fe9f 	bl	801c0c0 <__sinit>
 801c382:	69a3      	ldr	r3, [r4, #24]
 801c384:	60a3      	str	r3, [r4, #8]
 801c386:	89a3      	ldrh	r3, [r4, #12]
 801c388:	071a      	lsls	r2, r3, #28
 801c38a:	d501      	bpl.n	801c390 <__swbuf_r+0x20>
 801c38c:	6923      	ldr	r3, [r4, #16]
 801c38e:	b943      	cbnz	r3, 801c3a2 <__swbuf_r+0x32>
 801c390:	4621      	mov	r1, r4
 801c392:	4628      	mov	r0, r5
 801c394:	f000 f82a 	bl	801c3ec <__swsetup_r>
 801c398:	b118      	cbz	r0, 801c3a2 <__swbuf_r+0x32>
 801c39a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801c39e:	4638      	mov	r0, r7
 801c3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3a2:	6823      	ldr	r3, [r4, #0]
 801c3a4:	6922      	ldr	r2, [r4, #16]
 801c3a6:	1a98      	subs	r0, r3, r2
 801c3a8:	6963      	ldr	r3, [r4, #20]
 801c3aa:	b2f6      	uxtb	r6, r6
 801c3ac:	4283      	cmp	r3, r0
 801c3ae:	4637      	mov	r7, r6
 801c3b0:	dc05      	bgt.n	801c3be <__swbuf_r+0x4e>
 801c3b2:	4621      	mov	r1, r4
 801c3b4:	4628      	mov	r0, r5
 801c3b6:	f000 fe97 	bl	801d0e8 <_fflush_r>
 801c3ba:	2800      	cmp	r0, #0
 801c3bc:	d1ed      	bne.n	801c39a <__swbuf_r+0x2a>
 801c3be:	68a3      	ldr	r3, [r4, #8]
 801c3c0:	3b01      	subs	r3, #1
 801c3c2:	60a3      	str	r3, [r4, #8]
 801c3c4:	6823      	ldr	r3, [r4, #0]
 801c3c6:	1c5a      	adds	r2, r3, #1
 801c3c8:	6022      	str	r2, [r4, #0]
 801c3ca:	701e      	strb	r6, [r3, #0]
 801c3cc:	6962      	ldr	r2, [r4, #20]
 801c3ce:	1c43      	adds	r3, r0, #1
 801c3d0:	429a      	cmp	r2, r3
 801c3d2:	d004      	beq.n	801c3de <__swbuf_r+0x6e>
 801c3d4:	89a3      	ldrh	r3, [r4, #12]
 801c3d6:	07db      	lsls	r3, r3, #31
 801c3d8:	d5e1      	bpl.n	801c39e <__swbuf_r+0x2e>
 801c3da:	2e0a      	cmp	r6, #10
 801c3dc:	d1df      	bne.n	801c39e <__swbuf_r+0x2e>
 801c3de:	4621      	mov	r1, r4
 801c3e0:	4628      	mov	r0, r5
 801c3e2:	f000 fe81 	bl	801d0e8 <_fflush_r>
 801c3e6:	2800      	cmp	r0, #0
 801c3e8:	d0d9      	beq.n	801c39e <__swbuf_r+0x2e>
 801c3ea:	e7d6      	b.n	801c39a <__swbuf_r+0x2a>

0801c3ec <__swsetup_r>:
 801c3ec:	b538      	push	{r3, r4, r5, lr}
 801c3ee:	4b29      	ldr	r3, [pc, #164]	@ (801c494 <__swsetup_r+0xa8>)
 801c3f0:	4605      	mov	r5, r0
 801c3f2:	6818      	ldr	r0, [r3, #0]
 801c3f4:	460c      	mov	r4, r1
 801c3f6:	b118      	cbz	r0, 801c400 <__swsetup_r+0x14>
 801c3f8:	6a03      	ldr	r3, [r0, #32]
 801c3fa:	b90b      	cbnz	r3, 801c400 <__swsetup_r+0x14>
 801c3fc:	f7ff fe60 	bl	801c0c0 <__sinit>
 801c400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c404:	0719      	lsls	r1, r3, #28
 801c406:	d422      	bmi.n	801c44e <__swsetup_r+0x62>
 801c408:	06da      	lsls	r2, r3, #27
 801c40a:	d407      	bmi.n	801c41c <__swsetup_r+0x30>
 801c40c:	2209      	movs	r2, #9
 801c40e:	602a      	str	r2, [r5, #0]
 801c410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c414:	81a3      	strh	r3, [r4, #12]
 801c416:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c41a:	e033      	b.n	801c484 <__swsetup_r+0x98>
 801c41c:	0758      	lsls	r0, r3, #29
 801c41e:	d512      	bpl.n	801c446 <__swsetup_r+0x5a>
 801c420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c422:	b141      	cbz	r1, 801c436 <__swsetup_r+0x4a>
 801c424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c428:	4299      	cmp	r1, r3
 801c42a:	d002      	beq.n	801c432 <__swsetup_r+0x46>
 801c42c:	4628      	mov	r0, r5
 801c42e:	f000 f95f 	bl	801c6f0 <_free_r>
 801c432:	2300      	movs	r3, #0
 801c434:	6363      	str	r3, [r4, #52]	@ 0x34
 801c436:	89a3      	ldrh	r3, [r4, #12]
 801c438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c43c:	81a3      	strh	r3, [r4, #12]
 801c43e:	2300      	movs	r3, #0
 801c440:	6063      	str	r3, [r4, #4]
 801c442:	6923      	ldr	r3, [r4, #16]
 801c444:	6023      	str	r3, [r4, #0]
 801c446:	89a3      	ldrh	r3, [r4, #12]
 801c448:	f043 0308 	orr.w	r3, r3, #8
 801c44c:	81a3      	strh	r3, [r4, #12]
 801c44e:	6923      	ldr	r3, [r4, #16]
 801c450:	b94b      	cbnz	r3, 801c466 <__swsetup_r+0x7a>
 801c452:	89a3      	ldrh	r3, [r4, #12]
 801c454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c45c:	d003      	beq.n	801c466 <__swsetup_r+0x7a>
 801c45e:	4621      	mov	r1, r4
 801c460:	4628      	mov	r0, r5
 801c462:	f000 fea1 	bl	801d1a8 <__smakebuf_r>
 801c466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c46a:	f013 0201 	ands.w	r2, r3, #1
 801c46e:	d00a      	beq.n	801c486 <__swsetup_r+0x9a>
 801c470:	2200      	movs	r2, #0
 801c472:	60a2      	str	r2, [r4, #8]
 801c474:	6962      	ldr	r2, [r4, #20]
 801c476:	4252      	negs	r2, r2
 801c478:	61a2      	str	r2, [r4, #24]
 801c47a:	6922      	ldr	r2, [r4, #16]
 801c47c:	b942      	cbnz	r2, 801c490 <__swsetup_r+0xa4>
 801c47e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c482:	d1c5      	bne.n	801c410 <__swsetup_r+0x24>
 801c484:	bd38      	pop	{r3, r4, r5, pc}
 801c486:	0799      	lsls	r1, r3, #30
 801c488:	bf58      	it	pl
 801c48a:	6962      	ldrpl	r2, [r4, #20]
 801c48c:	60a2      	str	r2, [r4, #8]
 801c48e:	e7f4      	b.n	801c47a <__swsetup_r+0x8e>
 801c490:	2000      	movs	r0, #0
 801c492:	e7f7      	b.n	801c484 <__swsetup_r+0x98>
 801c494:	2000090c 	.word	0x2000090c

0801c498 <memcmp>:
 801c498:	b510      	push	{r4, lr}
 801c49a:	3901      	subs	r1, #1
 801c49c:	4402      	add	r2, r0
 801c49e:	4290      	cmp	r0, r2
 801c4a0:	d101      	bne.n	801c4a6 <memcmp+0xe>
 801c4a2:	2000      	movs	r0, #0
 801c4a4:	e005      	b.n	801c4b2 <memcmp+0x1a>
 801c4a6:	7803      	ldrb	r3, [r0, #0]
 801c4a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c4ac:	42a3      	cmp	r3, r4
 801c4ae:	d001      	beq.n	801c4b4 <memcmp+0x1c>
 801c4b0:	1b18      	subs	r0, r3, r4
 801c4b2:	bd10      	pop	{r4, pc}
 801c4b4:	3001      	adds	r0, #1
 801c4b6:	e7f2      	b.n	801c49e <memcmp+0x6>

0801c4b8 <memmove>:
 801c4b8:	4288      	cmp	r0, r1
 801c4ba:	b510      	push	{r4, lr}
 801c4bc:	eb01 0402 	add.w	r4, r1, r2
 801c4c0:	d902      	bls.n	801c4c8 <memmove+0x10>
 801c4c2:	4284      	cmp	r4, r0
 801c4c4:	4623      	mov	r3, r4
 801c4c6:	d807      	bhi.n	801c4d8 <memmove+0x20>
 801c4c8:	1e43      	subs	r3, r0, #1
 801c4ca:	42a1      	cmp	r1, r4
 801c4cc:	d008      	beq.n	801c4e0 <memmove+0x28>
 801c4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c4d6:	e7f8      	b.n	801c4ca <memmove+0x12>
 801c4d8:	4402      	add	r2, r0
 801c4da:	4601      	mov	r1, r0
 801c4dc:	428a      	cmp	r2, r1
 801c4de:	d100      	bne.n	801c4e2 <memmove+0x2a>
 801c4e0:	bd10      	pop	{r4, pc}
 801c4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c4ea:	e7f7      	b.n	801c4dc <memmove+0x24>

0801c4ec <memset>:
 801c4ec:	4402      	add	r2, r0
 801c4ee:	4603      	mov	r3, r0
 801c4f0:	4293      	cmp	r3, r2
 801c4f2:	d100      	bne.n	801c4f6 <memset+0xa>
 801c4f4:	4770      	bx	lr
 801c4f6:	f803 1b01 	strb.w	r1, [r3], #1
 801c4fa:	e7f9      	b.n	801c4f0 <memset+0x4>

0801c4fc <strchr>:
 801c4fc:	b2c9      	uxtb	r1, r1
 801c4fe:	4603      	mov	r3, r0
 801c500:	4618      	mov	r0, r3
 801c502:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c506:	b112      	cbz	r2, 801c50e <strchr+0x12>
 801c508:	428a      	cmp	r2, r1
 801c50a:	d1f9      	bne.n	801c500 <strchr+0x4>
 801c50c:	4770      	bx	lr
 801c50e:	2900      	cmp	r1, #0
 801c510:	bf18      	it	ne
 801c512:	2000      	movne	r0, #0
 801c514:	4770      	bx	lr

0801c516 <strncmp>:
 801c516:	b510      	push	{r4, lr}
 801c518:	b16a      	cbz	r2, 801c536 <strncmp+0x20>
 801c51a:	3901      	subs	r1, #1
 801c51c:	1884      	adds	r4, r0, r2
 801c51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c522:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c526:	429a      	cmp	r2, r3
 801c528:	d103      	bne.n	801c532 <strncmp+0x1c>
 801c52a:	42a0      	cmp	r0, r4
 801c52c:	d001      	beq.n	801c532 <strncmp+0x1c>
 801c52e:	2a00      	cmp	r2, #0
 801c530:	d1f5      	bne.n	801c51e <strncmp+0x8>
 801c532:	1ad0      	subs	r0, r2, r3
 801c534:	bd10      	pop	{r4, pc}
 801c536:	4610      	mov	r0, r2
 801c538:	e7fc      	b.n	801c534 <strncmp+0x1e>

0801c53a <strstr>:
 801c53a:	780a      	ldrb	r2, [r1, #0]
 801c53c:	b570      	push	{r4, r5, r6, lr}
 801c53e:	b96a      	cbnz	r2, 801c55c <strstr+0x22>
 801c540:	bd70      	pop	{r4, r5, r6, pc}
 801c542:	429a      	cmp	r2, r3
 801c544:	d109      	bne.n	801c55a <strstr+0x20>
 801c546:	460c      	mov	r4, r1
 801c548:	4605      	mov	r5, r0
 801c54a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c54e:	2b00      	cmp	r3, #0
 801c550:	d0f6      	beq.n	801c540 <strstr+0x6>
 801c552:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c556:	429e      	cmp	r6, r3
 801c558:	d0f7      	beq.n	801c54a <strstr+0x10>
 801c55a:	3001      	adds	r0, #1
 801c55c:	7803      	ldrb	r3, [r0, #0]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d1ef      	bne.n	801c542 <strstr+0x8>
 801c562:	4618      	mov	r0, r3
 801c564:	e7ec      	b.n	801c540 <strstr+0x6>
	...

0801c568 <_close_r>:
 801c568:	b538      	push	{r3, r4, r5, lr}
 801c56a:	4d06      	ldr	r5, [pc, #24]	@ (801c584 <_close_r+0x1c>)
 801c56c:	2300      	movs	r3, #0
 801c56e:	4604      	mov	r4, r0
 801c570:	4608      	mov	r0, r1
 801c572:	602b      	str	r3, [r5, #0]
 801c574:	f7e7 fd12 	bl	8003f9c <_close>
 801c578:	1c43      	adds	r3, r0, #1
 801c57a:	d102      	bne.n	801c582 <_close_r+0x1a>
 801c57c:	682b      	ldr	r3, [r5, #0]
 801c57e:	b103      	cbz	r3, 801c582 <_close_r+0x1a>
 801c580:	6023      	str	r3, [r4, #0]
 801c582:	bd38      	pop	{r3, r4, r5, pc}
 801c584:	20011cb0 	.word	0x20011cb0

0801c588 <_lseek_r>:
 801c588:	b538      	push	{r3, r4, r5, lr}
 801c58a:	4d07      	ldr	r5, [pc, #28]	@ (801c5a8 <_lseek_r+0x20>)
 801c58c:	4604      	mov	r4, r0
 801c58e:	4608      	mov	r0, r1
 801c590:	4611      	mov	r1, r2
 801c592:	2200      	movs	r2, #0
 801c594:	602a      	str	r2, [r5, #0]
 801c596:	461a      	mov	r2, r3
 801c598:	f7e7 fd27 	bl	8003fea <_lseek>
 801c59c:	1c43      	adds	r3, r0, #1
 801c59e:	d102      	bne.n	801c5a6 <_lseek_r+0x1e>
 801c5a0:	682b      	ldr	r3, [r5, #0]
 801c5a2:	b103      	cbz	r3, 801c5a6 <_lseek_r+0x1e>
 801c5a4:	6023      	str	r3, [r4, #0]
 801c5a6:	bd38      	pop	{r3, r4, r5, pc}
 801c5a8:	20011cb0 	.word	0x20011cb0

0801c5ac <_read_r>:
 801c5ac:	b538      	push	{r3, r4, r5, lr}
 801c5ae:	4d07      	ldr	r5, [pc, #28]	@ (801c5cc <_read_r+0x20>)
 801c5b0:	4604      	mov	r4, r0
 801c5b2:	4608      	mov	r0, r1
 801c5b4:	4611      	mov	r1, r2
 801c5b6:	2200      	movs	r2, #0
 801c5b8:	602a      	str	r2, [r5, #0]
 801c5ba:	461a      	mov	r2, r3
 801c5bc:	f7e7 fcb5 	bl	8003f2a <_read>
 801c5c0:	1c43      	adds	r3, r0, #1
 801c5c2:	d102      	bne.n	801c5ca <_read_r+0x1e>
 801c5c4:	682b      	ldr	r3, [r5, #0]
 801c5c6:	b103      	cbz	r3, 801c5ca <_read_r+0x1e>
 801c5c8:	6023      	str	r3, [r4, #0]
 801c5ca:	bd38      	pop	{r3, r4, r5, pc}
 801c5cc:	20011cb0 	.word	0x20011cb0

0801c5d0 <_sbrk_r>:
 801c5d0:	b538      	push	{r3, r4, r5, lr}
 801c5d2:	4d06      	ldr	r5, [pc, #24]	@ (801c5ec <_sbrk_r+0x1c>)
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	4604      	mov	r4, r0
 801c5d8:	4608      	mov	r0, r1
 801c5da:	602b      	str	r3, [r5, #0]
 801c5dc:	f7e7 fd12 	bl	8004004 <_sbrk>
 801c5e0:	1c43      	adds	r3, r0, #1
 801c5e2:	d102      	bne.n	801c5ea <_sbrk_r+0x1a>
 801c5e4:	682b      	ldr	r3, [r5, #0]
 801c5e6:	b103      	cbz	r3, 801c5ea <_sbrk_r+0x1a>
 801c5e8:	6023      	str	r3, [r4, #0]
 801c5ea:	bd38      	pop	{r3, r4, r5, pc}
 801c5ec:	20011cb0 	.word	0x20011cb0

0801c5f0 <_write_r>:
 801c5f0:	b538      	push	{r3, r4, r5, lr}
 801c5f2:	4d07      	ldr	r5, [pc, #28]	@ (801c610 <_write_r+0x20>)
 801c5f4:	4604      	mov	r4, r0
 801c5f6:	4608      	mov	r0, r1
 801c5f8:	4611      	mov	r1, r2
 801c5fa:	2200      	movs	r2, #0
 801c5fc:	602a      	str	r2, [r5, #0]
 801c5fe:	461a      	mov	r2, r3
 801c600:	f7e7 fcb0 	bl	8003f64 <_write>
 801c604:	1c43      	adds	r3, r0, #1
 801c606:	d102      	bne.n	801c60e <_write_r+0x1e>
 801c608:	682b      	ldr	r3, [r5, #0]
 801c60a:	b103      	cbz	r3, 801c60e <_write_r+0x1e>
 801c60c:	6023      	str	r3, [r4, #0]
 801c60e:	bd38      	pop	{r3, r4, r5, pc}
 801c610:	20011cb0 	.word	0x20011cb0

0801c614 <__errno>:
 801c614:	4b01      	ldr	r3, [pc, #4]	@ (801c61c <__errno+0x8>)
 801c616:	6818      	ldr	r0, [r3, #0]
 801c618:	4770      	bx	lr
 801c61a:	bf00      	nop
 801c61c:	2000090c 	.word	0x2000090c

0801c620 <__libc_init_array>:
 801c620:	b570      	push	{r4, r5, r6, lr}
 801c622:	4d0d      	ldr	r5, [pc, #52]	@ (801c658 <__libc_init_array+0x38>)
 801c624:	4c0d      	ldr	r4, [pc, #52]	@ (801c65c <__libc_init_array+0x3c>)
 801c626:	1b64      	subs	r4, r4, r5
 801c628:	10a4      	asrs	r4, r4, #2
 801c62a:	2600      	movs	r6, #0
 801c62c:	42a6      	cmp	r6, r4
 801c62e:	d109      	bne.n	801c644 <__libc_init_array+0x24>
 801c630:	4d0b      	ldr	r5, [pc, #44]	@ (801c660 <__libc_init_array+0x40>)
 801c632:	4c0c      	ldr	r4, [pc, #48]	@ (801c664 <__libc_init_array+0x44>)
 801c634:	f000 fe62 	bl	801d2fc <_init>
 801c638:	1b64      	subs	r4, r4, r5
 801c63a:	10a4      	asrs	r4, r4, #2
 801c63c:	2600      	movs	r6, #0
 801c63e:	42a6      	cmp	r6, r4
 801c640:	d105      	bne.n	801c64e <__libc_init_array+0x2e>
 801c642:	bd70      	pop	{r4, r5, r6, pc}
 801c644:	f855 3b04 	ldr.w	r3, [r5], #4
 801c648:	4798      	blx	r3
 801c64a:	3601      	adds	r6, #1
 801c64c:	e7ee      	b.n	801c62c <__libc_init_array+0xc>
 801c64e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c652:	4798      	blx	r3
 801c654:	3601      	adds	r6, #1
 801c656:	e7f2      	b.n	801c63e <__libc_init_array+0x1e>
 801c658:	0801e988 	.word	0x0801e988
 801c65c:	0801e988 	.word	0x0801e988
 801c660:	0801e988 	.word	0x0801e988
 801c664:	0801e9a4 	.word	0x0801e9a4

0801c668 <__retarget_lock_init_recursive>:
 801c668:	4770      	bx	lr

0801c66a <__retarget_lock_acquire_recursive>:
 801c66a:	4770      	bx	lr

0801c66c <__retarget_lock_release_recursive>:
 801c66c:	4770      	bx	lr

0801c66e <strcpy>:
 801c66e:	4603      	mov	r3, r0
 801c670:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c674:	f803 2b01 	strb.w	r2, [r3], #1
 801c678:	2a00      	cmp	r2, #0
 801c67a:	d1f9      	bne.n	801c670 <strcpy+0x2>
 801c67c:	4770      	bx	lr

0801c67e <memcpy>:
 801c67e:	440a      	add	r2, r1
 801c680:	4291      	cmp	r1, r2
 801c682:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801c686:	d100      	bne.n	801c68a <memcpy+0xc>
 801c688:	4770      	bx	lr
 801c68a:	b510      	push	{r4, lr}
 801c68c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c690:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c694:	4291      	cmp	r1, r2
 801c696:	d1f9      	bne.n	801c68c <memcpy+0xe>
 801c698:	bd10      	pop	{r4, pc}
	...

0801c69c <__assert_func>:
 801c69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c69e:	4614      	mov	r4, r2
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	4b09      	ldr	r3, [pc, #36]	@ (801c6c8 <__assert_func+0x2c>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	4605      	mov	r5, r0
 801c6a8:	68d8      	ldr	r0, [r3, #12]
 801c6aa:	b14c      	cbz	r4, 801c6c0 <__assert_func+0x24>
 801c6ac:	4b07      	ldr	r3, [pc, #28]	@ (801c6cc <__assert_func+0x30>)
 801c6ae:	9100      	str	r1, [sp, #0]
 801c6b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c6b4:	4906      	ldr	r1, [pc, #24]	@ (801c6d0 <__assert_func+0x34>)
 801c6b6:	462b      	mov	r3, r5
 801c6b8:	f000 fd3e 	bl	801d138 <fiprintf>
 801c6bc:	f000 fdd2 	bl	801d264 <abort>
 801c6c0:	4b04      	ldr	r3, [pc, #16]	@ (801c6d4 <__assert_func+0x38>)
 801c6c2:	461c      	mov	r4, r3
 801c6c4:	e7f3      	b.n	801c6ae <__assert_func+0x12>
 801c6c6:	bf00      	nop
 801c6c8:	2000090c 	.word	0x2000090c
 801c6cc:	0801e80f 	.word	0x0801e80f
 801c6d0:	0801e81c 	.word	0x0801e81c
 801c6d4:	0801e84a 	.word	0x0801e84a

0801c6d8 <__env_lock>:
 801c6d8:	4801      	ldr	r0, [pc, #4]	@ (801c6e0 <__env_lock+0x8>)
 801c6da:	f7ff bfc6 	b.w	801c66a <__retarget_lock_acquire_recursive>
 801c6de:	bf00      	nop
 801c6e0:	20011cb4 	.word	0x20011cb4

0801c6e4 <__env_unlock>:
 801c6e4:	4801      	ldr	r0, [pc, #4]	@ (801c6ec <__env_unlock+0x8>)
 801c6e6:	f7ff bfc1 	b.w	801c66c <__retarget_lock_release_recursive>
 801c6ea:	bf00      	nop
 801c6ec:	20011cb4 	.word	0x20011cb4

0801c6f0 <_free_r>:
 801c6f0:	b538      	push	{r3, r4, r5, lr}
 801c6f2:	4605      	mov	r5, r0
 801c6f4:	2900      	cmp	r1, #0
 801c6f6:	d041      	beq.n	801c77c <_free_r+0x8c>
 801c6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c6fc:	1f0c      	subs	r4, r1, #4
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	bfb8      	it	lt
 801c702:	18e4      	addlt	r4, r4, r3
 801c704:	f7ff fb2a 	bl	801bd5c <__malloc_lock>
 801c708:	4a1d      	ldr	r2, [pc, #116]	@ (801c780 <_free_r+0x90>)
 801c70a:	6813      	ldr	r3, [r2, #0]
 801c70c:	b933      	cbnz	r3, 801c71c <_free_r+0x2c>
 801c70e:	6063      	str	r3, [r4, #4]
 801c710:	6014      	str	r4, [r2, #0]
 801c712:	4628      	mov	r0, r5
 801c714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c718:	f7ff bb26 	b.w	801bd68 <__malloc_unlock>
 801c71c:	42a3      	cmp	r3, r4
 801c71e:	d908      	bls.n	801c732 <_free_r+0x42>
 801c720:	6820      	ldr	r0, [r4, #0]
 801c722:	1821      	adds	r1, r4, r0
 801c724:	428b      	cmp	r3, r1
 801c726:	bf01      	itttt	eq
 801c728:	6819      	ldreq	r1, [r3, #0]
 801c72a:	685b      	ldreq	r3, [r3, #4]
 801c72c:	1809      	addeq	r1, r1, r0
 801c72e:	6021      	streq	r1, [r4, #0]
 801c730:	e7ed      	b.n	801c70e <_free_r+0x1e>
 801c732:	461a      	mov	r2, r3
 801c734:	685b      	ldr	r3, [r3, #4]
 801c736:	b10b      	cbz	r3, 801c73c <_free_r+0x4c>
 801c738:	42a3      	cmp	r3, r4
 801c73a:	d9fa      	bls.n	801c732 <_free_r+0x42>
 801c73c:	6811      	ldr	r1, [r2, #0]
 801c73e:	1850      	adds	r0, r2, r1
 801c740:	42a0      	cmp	r0, r4
 801c742:	d10b      	bne.n	801c75c <_free_r+0x6c>
 801c744:	6820      	ldr	r0, [r4, #0]
 801c746:	4401      	add	r1, r0
 801c748:	1850      	adds	r0, r2, r1
 801c74a:	4283      	cmp	r3, r0
 801c74c:	6011      	str	r1, [r2, #0]
 801c74e:	d1e0      	bne.n	801c712 <_free_r+0x22>
 801c750:	6818      	ldr	r0, [r3, #0]
 801c752:	685b      	ldr	r3, [r3, #4]
 801c754:	6053      	str	r3, [r2, #4]
 801c756:	4408      	add	r0, r1
 801c758:	6010      	str	r0, [r2, #0]
 801c75a:	e7da      	b.n	801c712 <_free_r+0x22>
 801c75c:	d902      	bls.n	801c764 <_free_r+0x74>
 801c75e:	230c      	movs	r3, #12
 801c760:	602b      	str	r3, [r5, #0]
 801c762:	e7d6      	b.n	801c712 <_free_r+0x22>
 801c764:	6820      	ldr	r0, [r4, #0]
 801c766:	1821      	adds	r1, r4, r0
 801c768:	428b      	cmp	r3, r1
 801c76a:	bf04      	itt	eq
 801c76c:	6819      	ldreq	r1, [r3, #0]
 801c76e:	685b      	ldreq	r3, [r3, #4]
 801c770:	6063      	str	r3, [r4, #4]
 801c772:	bf04      	itt	eq
 801c774:	1809      	addeq	r1, r1, r0
 801c776:	6021      	streq	r1, [r4, #0]
 801c778:	6054      	str	r4, [r2, #4]
 801c77a:	e7ca      	b.n	801c712 <_free_r+0x22>
 801c77c:	bd38      	pop	{r3, r4, r5, pc}
 801c77e:	bf00      	nop
 801c780:	20011b70 	.word	0x20011b70

0801c784 <_malloc_usable_size_r>:
 801c784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c788:	1f18      	subs	r0, r3, #4
 801c78a:	2b00      	cmp	r3, #0
 801c78c:	bfbc      	itt	lt
 801c78e:	580b      	ldrlt	r3, [r1, r0]
 801c790:	18c0      	addlt	r0, r0, r3
 801c792:	4770      	bx	lr

0801c794 <__ssputs_r>:
 801c794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c798:	688e      	ldr	r6, [r1, #8]
 801c79a:	461f      	mov	r7, r3
 801c79c:	42be      	cmp	r6, r7
 801c79e:	680b      	ldr	r3, [r1, #0]
 801c7a0:	4682      	mov	sl, r0
 801c7a2:	460c      	mov	r4, r1
 801c7a4:	4690      	mov	r8, r2
 801c7a6:	d82d      	bhi.n	801c804 <__ssputs_r+0x70>
 801c7a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c7ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c7b0:	d026      	beq.n	801c800 <__ssputs_r+0x6c>
 801c7b2:	6965      	ldr	r5, [r4, #20]
 801c7b4:	6909      	ldr	r1, [r1, #16]
 801c7b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c7ba:	eba3 0901 	sub.w	r9, r3, r1
 801c7be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c7c2:	1c7b      	adds	r3, r7, #1
 801c7c4:	444b      	add	r3, r9
 801c7c6:	106d      	asrs	r5, r5, #1
 801c7c8:	429d      	cmp	r5, r3
 801c7ca:	bf38      	it	cc
 801c7cc:	461d      	movcc	r5, r3
 801c7ce:	0553      	lsls	r3, r2, #21
 801c7d0:	d527      	bpl.n	801c822 <__ssputs_r+0x8e>
 801c7d2:	4629      	mov	r1, r5
 801c7d4:	f7ff fa42 	bl	801bc5c <_malloc_r>
 801c7d8:	4606      	mov	r6, r0
 801c7da:	b360      	cbz	r0, 801c836 <__ssputs_r+0xa2>
 801c7dc:	6921      	ldr	r1, [r4, #16]
 801c7de:	464a      	mov	r2, r9
 801c7e0:	f7ff ff4d 	bl	801c67e <memcpy>
 801c7e4:	89a3      	ldrh	r3, [r4, #12]
 801c7e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c7ee:	81a3      	strh	r3, [r4, #12]
 801c7f0:	6126      	str	r6, [r4, #16]
 801c7f2:	6165      	str	r5, [r4, #20]
 801c7f4:	444e      	add	r6, r9
 801c7f6:	eba5 0509 	sub.w	r5, r5, r9
 801c7fa:	6026      	str	r6, [r4, #0]
 801c7fc:	60a5      	str	r5, [r4, #8]
 801c7fe:	463e      	mov	r6, r7
 801c800:	42be      	cmp	r6, r7
 801c802:	d900      	bls.n	801c806 <__ssputs_r+0x72>
 801c804:	463e      	mov	r6, r7
 801c806:	6820      	ldr	r0, [r4, #0]
 801c808:	4632      	mov	r2, r6
 801c80a:	4641      	mov	r1, r8
 801c80c:	f7ff fe54 	bl	801c4b8 <memmove>
 801c810:	68a3      	ldr	r3, [r4, #8]
 801c812:	1b9b      	subs	r3, r3, r6
 801c814:	60a3      	str	r3, [r4, #8]
 801c816:	6823      	ldr	r3, [r4, #0]
 801c818:	4433      	add	r3, r6
 801c81a:	6023      	str	r3, [r4, #0]
 801c81c:	2000      	movs	r0, #0
 801c81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c822:	462a      	mov	r2, r5
 801c824:	f7ff fb1a 	bl	801be5c <_realloc_r>
 801c828:	4606      	mov	r6, r0
 801c82a:	2800      	cmp	r0, #0
 801c82c:	d1e0      	bne.n	801c7f0 <__ssputs_r+0x5c>
 801c82e:	6921      	ldr	r1, [r4, #16]
 801c830:	4650      	mov	r0, sl
 801c832:	f7ff ff5d 	bl	801c6f0 <_free_r>
 801c836:	230c      	movs	r3, #12
 801c838:	f8ca 3000 	str.w	r3, [sl]
 801c83c:	89a3      	ldrh	r3, [r4, #12]
 801c83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c842:	81a3      	strh	r3, [r4, #12]
 801c844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c848:	e7e9      	b.n	801c81e <__ssputs_r+0x8a>
	...

0801c84c <_svfiprintf_r>:
 801c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c850:	4698      	mov	r8, r3
 801c852:	898b      	ldrh	r3, [r1, #12]
 801c854:	061b      	lsls	r3, r3, #24
 801c856:	b09d      	sub	sp, #116	@ 0x74
 801c858:	4607      	mov	r7, r0
 801c85a:	460d      	mov	r5, r1
 801c85c:	4614      	mov	r4, r2
 801c85e:	d510      	bpl.n	801c882 <_svfiprintf_r+0x36>
 801c860:	690b      	ldr	r3, [r1, #16]
 801c862:	b973      	cbnz	r3, 801c882 <_svfiprintf_r+0x36>
 801c864:	2140      	movs	r1, #64	@ 0x40
 801c866:	f7ff f9f9 	bl	801bc5c <_malloc_r>
 801c86a:	6028      	str	r0, [r5, #0]
 801c86c:	6128      	str	r0, [r5, #16]
 801c86e:	b930      	cbnz	r0, 801c87e <_svfiprintf_r+0x32>
 801c870:	230c      	movs	r3, #12
 801c872:	603b      	str	r3, [r7, #0]
 801c874:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c878:	b01d      	add	sp, #116	@ 0x74
 801c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c87e:	2340      	movs	r3, #64	@ 0x40
 801c880:	616b      	str	r3, [r5, #20]
 801c882:	2300      	movs	r3, #0
 801c884:	9309      	str	r3, [sp, #36]	@ 0x24
 801c886:	2320      	movs	r3, #32
 801c888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c88c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c890:	2330      	movs	r3, #48	@ 0x30
 801c892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ca30 <_svfiprintf_r+0x1e4>
 801c896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c89a:	f04f 0901 	mov.w	r9, #1
 801c89e:	4623      	mov	r3, r4
 801c8a0:	469a      	mov	sl, r3
 801c8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8a6:	b10a      	cbz	r2, 801c8ac <_svfiprintf_r+0x60>
 801c8a8:	2a25      	cmp	r2, #37	@ 0x25
 801c8aa:	d1f9      	bne.n	801c8a0 <_svfiprintf_r+0x54>
 801c8ac:	ebba 0b04 	subs.w	fp, sl, r4
 801c8b0:	d00b      	beq.n	801c8ca <_svfiprintf_r+0x7e>
 801c8b2:	465b      	mov	r3, fp
 801c8b4:	4622      	mov	r2, r4
 801c8b6:	4629      	mov	r1, r5
 801c8b8:	4638      	mov	r0, r7
 801c8ba:	f7ff ff6b 	bl	801c794 <__ssputs_r>
 801c8be:	3001      	adds	r0, #1
 801c8c0:	f000 80a7 	beq.w	801ca12 <_svfiprintf_r+0x1c6>
 801c8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c8c6:	445a      	add	r2, fp
 801c8c8:	9209      	str	r2, [sp, #36]	@ 0x24
 801c8ca:	f89a 3000 	ldrb.w	r3, [sl]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	f000 809f 	beq.w	801ca12 <_svfiprintf_r+0x1c6>
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c8de:	f10a 0a01 	add.w	sl, sl, #1
 801c8e2:	9304      	str	r3, [sp, #16]
 801c8e4:	9307      	str	r3, [sp, #28]
 801c8e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c8ea:	931a      	str	r3, [sp, #104]	@ 0x68
 801c8ec:	4654      	mov	r4, sl
 801c8ee:	2205      	movs	r2, #5
 801c8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8f4:	484e      	ldr	r0, [pc, #312]	@ (801ca30 <_svfiprintf_r+0x1e4>)
 801c8f6:	f7e3 fca3 	bl	8000240 <memchr>
 801c8fa:	9a04      	ldr	r2, [sp, #16]
 801c8fc:	b9d8      	cbnz	r0, 801c936 <_svfiprintf_r+0xea>
 801c8fe:	06d0      	lsls	r0, r2, #27
 801c900:	bf44      	itt	mi
 801c902:	2320      	movmi	r3, #32
 801c904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c908:	0711      	lsls	r1, r2, #28
 801c90a:	bf44      	itt	mi
 801c90c:	232b      	movmi	r3, #43	@ 0x2b
 801c90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c912:	f89a 3000 	ldrb.w	r3, [sl]
 801c916:	2b2a      	cmp	r3, #42	@ 0x2a
 801c918:	d015      	beq.n	801c946 <_svfiprintf_r+0xfa>
 801c91a:	9a07      	ldr	r2, [sp, #28]
 801c91c:	4654      	mov	r4, sl
 801c91e:	2000      	movs	r0, #0
 801c920:	f04f 0c0a 	mov.w	ip, #10
 801c924:	4621      	mov	r1, r4
 801c926:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c92a:	3b30      	subs	r3, #48	@ 0x30
 801c92c:	2b09      	cmp	r3, #9
 801c92e:	d94b      	bls.n	801c9c8 <_svfiprintf_r+0x17c>
 801c930:	b1b0      	cbz	r0, 801c960 <_svfiprintf_r+0x114>
 801c932:	9207      	str	r2, [sp, #28]
 801c934:	e014      	b.n	801c960 <_svfiprintf_r+0x114>
 801c936:	eba0 0308 	sub.w	r3, r0, r8
 801c93a:	fa09 f303 	lsl.w	r3, r9, r3
 801c93e:	4313      	orrs	r3, r2
 801c940:	9304      	str	r3, [sp, #16]
 801c942:	46a2      	mov	sl, r4
 801c944:	e7d2      	b.n	801c8ec <_svfiprintf_r+0xa0>
 801c946:	9b03      	ldr	r3, [sp, #12]
 801c948:	1d19      	adds	r1, r3, #4
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	9103      	str	r1, [sp, #12]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	bfbb      	ittet	lt
 801c952:	425b      	neglt	r3, r3
 801c954:	f042 0202 	orrlt.w	r2, r2, #2
 801c958:	9307      	strge	r3, [sp, #28]
 801c95a:	9307      	strlt	r3, [sp, #28]
 801c95c:	bfb8      	it	lt
 801c95e:	9204      	strlt	r2, [sp, #16]
 801c960:	7823      	ldrb	r3, [r4, #0]
 801c962:	2b2e      	cmp	r3, #46	@ 0x2e
 801c964:	d10a      	bne.n	801c97c <_svfiprintf_r+0x130>
 801c966:	7863      	ldrb	r3, [r4, #1]
 801c968:	2b2a      	cmp	r3, #42	@ 0x2a
 801c96a:	d132      	bne.n	801c9d2 <_svfiprintf_r+0x186>
 801c96c:	9b03      	ldr	r3, [sp, #12]
 801c96e:	1d1a      	adds	r2, r3, #4
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	9203      	str	r2, [sp, #12]
 801c974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c978:	3402      	adds	r4, #2
 801c97a:	9305      	str	r3, [sp, #20]
 801c97c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ca40 <_svfiprintf_r+0x1f4>
 801c980:	7821      	ldrb	r1, [r4, #0]
 801c982:	2203      	movs	r2, #3
 801c984:	4650      	mov	r0, sl
 801c986:	f7e3 fc5b 	bl	8000240 <memchr>
 801c98a:	b138      	cbz	r0, 801c99c <_svfiprintf_r+0x150>
 801c98c:	9b04      	ldr	r3, [sp, #16]
 801c98e:	eba0 000a 	sub.w	r0, r0, sl
 801c992:	2240      	movs	r2, #64	@ 0x40
 801c994:	4082      	lsls	r2, r0
 801c996:	4313      	orrs	r3, r2
 801c998:	3401      	adds	r4, #1
 801c99a:	9304      	str	r3, [sp, #16]
 801c99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9a0:	4824      	ldr	r0, [pc, #144]	@ (801ca34 <_svfiprintf_r+0x1e8>)
 801c9a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c9a6:	2206      	movs	r2, #6
 801c9a8:	f7e3 fc4a 	bl	8000240 <memchr>
 801c9ac:	2800      	cmp	r0, #0
 801c9ae:	d036      	beq.n	801ca1e <_svfiprintf_r+0x1d2>
 801c9b0:	4b21      	ldr	r3, [pc, #132]	@ (801ca38 <_svfiprintf_r+0x1ec>)
 801c9b2:	bb1b      	cbnz	r3, 801c9fc <_svfiprintf_r+0x1b0>
 801c9b4:	9b03      	ldr	r3, [sp, #12]
 801c9b6:	3307      	adds	r3, #7
 801c9b8:	f023 0307 	bic.w	r3, r3, #7
 801c9bc:	3308      	adds	r3, #8
 801c9be:	9303      	str	r3, [sp, #12]
 801c9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c9c2:	4433      	add	r3, r6
 801c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9c6:	e76a      	b.n	801c89e <_svfiprintf_r+0x52>
 801c9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c9cc:	460c      	mov	r4, r1
 801c9ce:	2001      	movs	r0, #1
 801c9d0:	e7a8      	b.n	801c924 <_svfiprintf_r+0xd8>
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	3401      	adds	r4, #1
 801c9d6:	9305      	str	r3, [sp, #20]
 801c9d8:	4619      	mov	r1, r3
 801c9da:	f04f 0c0a 	mov.w	ip, #10
 801c9de:	4620      	mov	r0, r4
 801c9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c9e4:	3a30      	subs	r2, #48	@ 0x30
 801c9e6:	2a09      	cmp	r2, #9
 801c9e8:	d903      	bls.n	801c9f2 <_svfiprintf_r+0x1a6>
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d0c6      	beq.n	801c97c <_svfiprintf_r+0x130>
 801c9ee:	9105      	str	r1, [sp, #20]
 801c9f0:	e7c4      	b.n	801c97c <_svfiprintf_r+0x130>
 801c9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c9f6:	4604      	mov	r4, r0
 801c9f8:	2301      	movs	r3, #1
 801c9fa:	e7f0      	b.n	801c9de <_svfiprintf_r+0x192>
 801c9fc:	ab03      	add	r3, sp, #12
 801c9fe:	9300      	str	r3, [sp, #0]
 801ca00:	462a      	mov	r2, r5
 801ca02:	4b0e      	ldr	r3, [pc, #56]	@ (801ca3c <_svfiprintf_r+0x1f0>)
 801ca04:	a904      	add	r1, sp, #16
 801ca06:	4638      	mov	r0, r7
 801ca08:	f3af 8000 	nop.w
 801ca0c:	1c42      	adds	r2, r0, #1
 801ca0e:	4606      	mov	r6, r0
 801ca10:	d1d6      	bne.n	801c9c0 <_svfiprintf_r+0x174>
 801ca12:	89ab      	ldrh	r3, [r5, #12]
 801ca14:	065b      	lsls	r3, r3, #25
 801ca16:	f53f af2d 	bmi.w	801c874 <_svfiprintf_r+0x28>
 801ca1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ca1c:	e72c      	b.n	801c878 <_svfiprintf_r+0x2c>
 801ca1e:	ab03      	add	r3, sp, #12
 801ca20:	9300      	str	r3, [sp, #0]
 801ca22:	462a      	mov	r2, r5
 801ca24:	4b05      	ldr	r3, [pc, #20]	@ (801ca3c <_svfiprintf_r+0x1f0>)
 801ca26:	a904      	add	r1, sp, #16
 801ca28:	4638      	mov	r0, r7
 801ca2a:	f000 f9bb 	bl	801cda4 <_printf_i>
 801ca2e:	e7ed      	b.n	801ca0c <_svfiprintf_r+0x1c0>
 801ca30:	0801e84b 	.word	0x0801e84b
 801ca34:	0801e855 	.word	0x0801e855
 801ca38:	00000000 	.word	0x00000000
 801ca3c:	0801c795 	.word	0x0801c795
 801ca40:	0801e851 	.word	0x0801e851

0801ca44 <__sfputc_r>:
 801ca44:	6893      	ldr	r3, [r2, #8]
 801ca46:	3b01      	subs	r3, #1
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	b410      	push	{r4}
 801ca4c:	6093      	str	r3, [r2, #8]
 801ca4e:	da08      	bge.n	801ca62 <__sfputc_r+0x1e>
 801ca50:	6994      	ldr	r4, [r2, #24]
 801ca52:	42a3      	cmp	r3, r4
 801ca54:	db01      	blt.n	801ca5a <__sfputc_r+0x16>
 801ca56:	290a      	cmp	r1, #10
 801ca58:	d103      	bne.n	801ca62 <__sfputc_r+0x1e>
 801ca5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca5e:	f7ff bc87 	b.w	801c370 <__swbuf_r>
 801ca62:	6813      	ldr	r3, [r2, #0]
 801ca64:	1c58      	adds	r0, r3, #1
 801ca66:	6010      	str	r0, [r2, #0]
 801ca68:	7019      	strb	r1, [r3, #0]
 801ca6a:	4608      	mov	r0, r1
 801ca6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ca70:	4770      	bx	lr

0801ca72 <__sfputs_r>:
 801ca72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca74:	4606      	mov	r6, r0
 801ca76:	460f      	mov	r7, r1
 801ca78:	4614      	mov	r4, r2
 801ca7a:	18d5      	adds	r5, r2, r3
 801ca7c:	42ac      	cmp	r4, r5
 801ca7e:	d101      	bne.n	801ca84 <__sfputs_r+0x12>
 801ca80:	2000      	movs	r0, #0
 801ca82:	e007      	b.n	801ca94 <__sfputs_r+0x22>
 801ca84:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca88:	463a      	mov	r2, r7
 801ca8a:	4630      	mov	r0, r6
 801ca8c:	f7ff ffda 	bl	801ca44 <__sfputc_r>
 801ca90:	1c43      	adds	r3, r0, #1
 801ca92:	d1f3      	bne.n	801ca7c <__sfputs_r+0xa>
 801ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ca98 <_vfiprintf_r>:
 801ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca9c:	460d      	mov	r5, r1
 801ca9e:	b09d      	sub	sp, #116	@ 0x74
 801caa0:	4614      	mov	r4, r2
 801caa2:	4698      	mov	r8, r3
 801caa4:	4606      	mov	r6, r0
 801caa6:	b118      	cbz	r0, 801cab0 <_vfiprintf_r+0x18>
 801caa8:	6a03      	ldr	r3, [r0, #32]
 801caaa:	b90b      	cbnz	r3, 801cab0 <_vfiprintf_r+0x18>
 801caac:	f7ff fb08 	bl	801c0c0 <__sinit>
 801cab0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cab2:	07d9      	lsls	r1, r3, #31
 801cab4:	d405      	bmi.n	801cac2 <_vfiprintf_r+0x2a>
 801cab6:	89ab      	ldrh	r3, [r5, #12]
 801cab8:	059a      	lsls	r2, r3, #22
 801caba:	d402      	bmi.n	801cac2 <_vfiprintf_r+0x2a>
 801cabc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cabe:	f7ff fdd4 	bl	801c66a <__retarget_lock_acquire_recursive>
 801cac2:	89ab      	ldrh	r3, [r5, #12]
 801cac4:	071b      	lsls	r3, r3, #28
 801cac6:	d501      	bpl.n	801cacc <_vfiprintf_r+0x34>
 801cac8:	692b      	ldr	r3, [r5, #16]
 801caca:	b99b      	cbnz	r3, 801caf4 <_vfiprintf_r+0x5c>
 801cacc:	4629      	mov	r1, r5
 801cace:	4630      	mov	r0, r6
 801cad0:	f7ff fc8c 	bl	801c3ec <__swsetup_r>
 801cad4:	b170      	cbz	r0, 801caf4 <_vfiprintf_r+0x5c>
 801cad6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cad8:	07dc      	lsls	r4, r3, #31
 801cada:	d504      	bpl.n	801cae6 <_vfiprintf_r+0x4e>
 801cadc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cae0:	b01d      	add	sp, #116	@ 0x74
 801cae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cae6:	89ab      	ldrh	r3, [r5, #12]
 801cae8:	0598      	lsls	r0, r3, #22
 801caea:	d4f7      	bmi.n	801cadc <_vfiprintf_r+0x44>
 801caec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801caee:	f7ff fdbd 	bl	801c66c <__retarget_lock_release_recursive>
 801caf2:	e7f3      	b.n	801cadc <_vfiprintf_r+0x44>
 801caf4:	2300      	movs	r3, #0
 801caf6:	9309      	str	r3, [sp, #36]	@ 0x24
 801caf8:	2320      	movs	r3, #32
 801cafa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cafe:	f8cd 800c 	str.w	r8, [sp, #12]
 801cb02:	2330      	movs	r3, #48	@ 0x30
 801cb04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ccb4 <_vfiprintf_r+0x21c>
 801cb08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cb0c:	f04f 0901 	mov.w	r9, #1
 801cb10:	4623      	mov	r3, r4
 801cb12:	469a      	mov	sl, r3
 801cb14:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb18:	b10a      	cbz	r2, 801cb1e <_vfiprintf_r+0x86>
 801cb1a:	2a25      	cmp	r2, #37	@ 0x25
 801cb1c:	d1f9      	bne.n	801cb12 <_vfiprintf_r+0x7a>
 801cb1e:	ebba 0b04 	subs.w	fp, sl, r4
 801cb22:	d00b      	beq.n	801cb3c <_vfiprintf_r+0xa4>
 801cb24:	465b      	mov	r3, fp
 801cb26:	4622      	mov	r2, r4
 801cb28:	4629      	mov	r1, r5
 801cb2a:	4630      	mov	r0, r6
 801cb2c:	f7ff ffa1 	bl	801ca72 <__sfputs_r>
 801cb30:	3001      	adds	r0, #1
 801cb32:	f000 80a7 	beq.w	801cc84 <_vfiprintf_r+0x1ec>
 801cb36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb38:	445a      	add	r2, fp
 801cb3a:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb3c:	f89a 3000 	ldrb.w	r3, [sl]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	f000 809f 	beq.w	801cc84 <_vfiprintf_r+0x1ec>
 801cb46:	2300      	movs	r3, #0
 801cb48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cb4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cb50:	f10a 0a01 	add.w	sl, sl, #1
 801cb54:	9304      	str	r3, [sp, #16]
 801cb56:	9307      	str	r3, [sp, #28]
 801cb58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cb5c:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb5e:	4654      	mov	r4, sl
 801cb60:	2205      	movs	r2, #5
 801cb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb66:	4853      	ldr	r0, [pc, #332]	@ (801ccb4 <_vfiprintf_r+0x21c>)
 801cb68:	f7e3 fb6a 	bl	8000240 <memchr>
 801cb6c:	9a04      	ldr	r2, [sp, #16]
 801cb6e:	b9d8      	cbnz	r0, 801cba8 <_vfiprintf_r+0x110>
 801cb70:	06d1      	lsls	r1, r2, #27
 801cb72:	bf44      	itt	mi
 801cb74:	2320      	movmi	r3, #32
 801cb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb7a:	0713      	lsls	r3, r2, #28
 801cb7c:	bf44      	itt	mi
 801cb7e:	232b      	movmi	r3, #43	@ 0x2b
 801cb80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cb84:	f89a 3000 	ldrb.w	r3, [sl]
 801cb88:	2b2a      	cmp	r3, #42	@ 0x2a
 801cb8a:	d015      	beq.n	801cbb8 <_vfiprintf_r+0x120>
 801cb8c:	9a07      	ldr	r2, [sp, #28]
 801cb8e:	4654      	mov	r4, sl
 801cb90:	2000      	movs	r0, #0
 801cb92:	f04f 0c0a 	mov.w	ip, #10
 801cb96:	4621      	mov	r1, r4
 801cb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cb9c:	3b30      	subs	r3, #48	@ 0x30
 801cb9e:	2b09      	cmp	r3, #9
 801cba0:	d94b      	bls.n	801cc3a <_vfiprintf_r+0x1a2>
 801cba2:	b1b0      	cbz	r0, 801cbd2 <_vfiprintf_r+0x13a>
 801cba4:	9207      	str	r2, [sp, #28]
 801cba6:	e014      	b.n	801cbd2 <_vfiprintf_r+0x13a>
 801cba8:	eba0 0308 	sub.w	r3, r0, r8
 801cbac:	fa09 f303 	lsl.w	r3, r9, r3
 801cbb0:	4313      	orrs	r3, r2
 801cbb2:	9304      	str	r3, [sp, #16]
 801cbb4:	46a2      	mov	sl, r4
 801cbb6:	e7d2      	b.n	801cb5e <_vfiprintf_r+0xc6>
 801cbb8:	9b03      	ldr	r3, [sp, #12]
 801cbba:	1d19      	adds	r1, r3, #4
 801cbbc:	681b      	ldr	r3, [r3, #0]
 801cbbe:	9103      	str	r1, [sp, #12]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	bfbb      	ittet	lt
 801cbc4:	425b      	neglt	r3, r3
 801cbc6:	f042 0202 	orrlt.w	r2, r2, #2
 801cbca:	9307      	strge	r3, [sp, #28]
 801cbcc:	9307      	strlt	r3, [sp, #28]
 801cbce:	bfb8      	it	lt
 801cbd0:	9204      	strlt	r2, [sp, #16]
 801cbd2:	7823      	ldrb	r3, [r4, #0]
 801cbd4:	2b2e      	cmp	r3, #46	@ 0x2e
 801cbd6:	d10a      	bne.n	801cbee <_vfiprintf_r+0x156>
 801cbd8:	7863      	ldrb	r3, [r4, #1]
 801cbda:	2b2a      	cmp	r3, #42	@ 0x2a
 801cbdc:	d132      	bne.n	801cc44 <_vfiprintf_r+0x1ac>
 801cbde:	9b03      	ldr	r3, [sp, #12]
 801cbe0:	1d1a      	adds	r2, r3, #4
 801cbe2:	681b      	ldr	r3, [r3, #0]
 801cbe4:	9203      	str	r2, [sp, #12]
 801cbe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cbea:	3402      	adds	r4, #2
 801cbec:	9305      	str	r3, [sp, #20]
 801cbee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ccc4 <_vfiprintf_r+0x22c>
 801cbf2:	7821      	ldrb	r1, [r4, #0]
 801cbf4:	2203      	movs	r2, #3
 801cbf6:	4650      	mov	r0, sl
 801cbf8:	f7e3 fb22 	bl	8000240 <memchr>
 801cbfc:	b138      	cbz	r0, 801cc0e <_vfiprintf_r+0x176>
 801cbfe:	9b04      	ldr	r3, [sp, #16]
 801cc00:	eba0 000a 	sub.w	r0, r0, sl
 801cc04:	2240      	movs	r2, #64	@ 0x40
 801cc06:	4082      	lsls	r2, r0
 801cc08:	4313      	orrs	r3, r2
 801cc0a:	3401      	adds	r4, #1
 801cc0c:	9304      	str	r3, [sp, #16]
 801cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc12:	4829      	ldr	r0, [pc, #164]	@ (801ccb8 <_vfiprintf_r+0x220>)
 801cc14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cc18:	2206      	movs	r2, #6
 801cc1a:	f7e3 fb11 	bl	8000240 <memchr>
 801cc1e:	2800      	cmp	r0, #0
 801cc20:	d03f      	beq.n	801cca2 <_vfiprintf_r+0x20a>
 801cc22:	4b26      	ldr	r3, [pc, #152]	@ (801ccbc <_vfiprintf_r+0x224>)
 801cc24:	bb1b      	cbnz	r3, 801cc6e <_vfiprintf_r+0x1d6>
 801cc26:	9b03      	ldr	r3, [sp, #12]
 801cc28:	3307      	adds	r3, #7
 801cc2a:	f023 0307 	bic.w	r3, r3, #7
 801cc2e:	3308      	adds	r3, #8
 801cc30:	9303      	str	r3, [sp, #12]
 801cc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc34:	443b      	add	r3, r7
 801cc36:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc38:	e76a      	b.n	801cb10 <_vfiprintf_r+0x78>
 801cc3a:	fb0c 3202 	mla	r2, ip, r2, r3
 801cc3e:	460c      	mov	r4, r1
 801cc40:	2001      	movs	r0, #1
 801cc42:	e7a8      	b.n	801cb96 <_vfiprintf_r+0xfe>
 801cc44:	2300      	movs	r3, #0
 801cc46:	3401      	adds	r4, #1
 801cc48:	9305      	str	r3, [sp, #20]
 801cc4a:	4619      	mov	r1, r3
 801cc4c:	f04f 0c0a 	mov.w	ip, #10
 801cc50:	4620      	mov	r0, r4
 801cc52:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc56:	3a30      	subs	r2, #48	@ 0x30
 801cc58:	2a09      	cmp	r2, #9
 801cc5a:	d903      	bls.n	801cc64 <_vfiprintf_r+0x1cc>
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d0c6      	beq.n	801cbee <_vfiprintf_r+0x156>
 801cc60:	9105      	str	r1, [sp, #20]
 801cc62:	e7c4      	b.n	801cbee <_vfiprintf_r+0x156>
 801cc64:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc68:	4604      	mov	r4, r0
 801cc6a:	2301      	movs	r3, #1
 801cc6c:	e7f0      	b.n	801cc50 <_vfiprintf_r+0x1b8>
 801cc6e:	ab03      	add	r3, sp, #12
 801cc70:	9300      	str	r3, [sp, #0]
 801cc72:	462a      	mov	r2, r5
 801cc74:	4b12      	ldr	r3, [pc, #72]	@ (801ccc0 <_vfiprintf_r+0x228>)
 801cc76:	a904      	add	r1, sp, #16
 801cc78:	4630      	mov	r0, r6
 801cc7a:	f3af 8000 	nop.w
 801cc7e:	4607      	mov	r7, r0
 801cc80:	1c78      	adds	r0, r7, #1
 801cc82:	d1d6      	bne.n	801cc32 <_vfiprintf_r+0x19a>
 801cc84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc86:	07d9      	lsls	r1, r3, #31
 801cc88:	d405      	bmi.n	801cc96 <_vfiprintf_r+0x1fe>
 801cc8a:	89ab      	ldrh	r3, [r5, #12]
 801cc8c:	059a      	lsls	r2, r3, #22
 801cc8e:	d402      	bmi.n	801cc96 <_vfiprintf_r+0x1fe>
 801cc90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cc92:	f7ff fceb 	bl	801c66c <__retarget_lock_release_recursive>
 801cc96:	89ab      	ldrh	r3, [r5, #12]
 801cc98:	065b      	lsls	r3, r3, #25
 801cc9a:	f53f af1f 	bmi.w	801cadc <_vfiprintf_r+0x44>
 801cc9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cca0:	e71e      	b.n	801cae0 <_vfiprintf_r+0x48>
 801cca2:	ab03      	add	r3, sp, #12
 801cca4:	9300      	str	r3, [sp, #0]
 801cca6:	462a      	mov	r2, r5
 801cca8:	4b05      	ldr	r3, [pc, #20]	@ (801ccc0 <_vfiprintf_r+0x228>)
 801ccaa:	a904      	add	r1, sp, #16
 801ccac:	4630      	mov	r0, r6
 801ccae:	f000 f879 	bl	801cda4 <_printf_i>
 801ccb2:	e7e4      	b.n	801cc7e <_vfiprintf_r+0x1e6>
 801ccb4:	0801e84b 	.word	0x0801e84b
 801ccb8:	0801e855 	.word	0x0801e855
 801ccbc:	00000000 	.word	0x00000000
 801ccc0:	0801ca73 	.word	0x0801ca73
 801ccc4:	0801e851 	.word	0x0801e851

0801ccc8 <_printf_common>:
 801ccc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cccc:	4616      	mov	r6, r2
 801ccce:	4698      	mov	r8, r3
 801ccd0:	688a      	ldr	r2, [r1, #8]
 801ccd2:	690b      	ldr	r3, [r1, #16]
 801ccd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	bfb8      	it	lt
 801ccdc:	4613      	movlt	r3, r2
 801ccde:	6033      	str	r3, [r6, #0]
 801cce0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cce4:	4607      	mov	r7, r0
 801cce6:	460c      	mov	r4, r1
 801cce8:	b10a      	cbz	r2, 801ccee <_printf_common+0x26>
 801ccea:	3301      	adds	r3, #1
 801ccec:	6033      	str	r3, [r6, #0]
 801ccee:	6823      	ldr	r3, [r4, #0]
 801ccf0:	0699      	lsls	r1, r3, #26
 801ccf2:	bf42      	ittt	mi
 801ccf4:	6833      	ldrmi	r3, [r6, #0]
 801ccf6:	3302      	addmi	r3, #2
 801ccf8:	6033      	strmi	r3, [r6, #0]
 801ccfa:	6825      	ldr	r5, [r4, #0]
 801ccfc:	f015 0506 	ands.w	r5, r5, #6
 801cd00:	d106      	bne.n	801cd10 <_printf_common+0x48>
 801cd02:	f104 0a19 	add.w	sl, r4, #25
 801cd06:	68e3      	ldr	r3, [r4, #12]
 801cd08:	6832      	ldr	r2, [r6, #0]
 801cd0a:	1a9b      	subs	r3, r3, r2
 801cd0c:	42ab      	cmp	r3, r5
 801cd0e:	dc26      	bgt.n	801cd5e <_printf_common+0x96>
 801cd10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801cd14:	6822      	ldr	r2, [r4, #0]
 801cd16:	3b00      	subs	r3, #0
 801cd18:	bf18      	it	ne
 801cd1a:	2301      	movne	r3, #1
 801cd1c:	0692      	lsls	r2, r2, #26
 801cd1e:	d42b      	bmi.n	801cd78 <_printf_common+0xb0>
 801cd20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801cd24:	4641      	mov	r1, r8
 801cd26:	4638      	mov	r0, r7
 801cd28:	47c8      	blx	r9
 801cd2a:	3001      	adds	r0, #1
 801cd2c:	d01e      	beq.n	801cd6c <_printf_common+0xa4>
 801cd2e:	6823      	ldr	r3, [r4, #0]
 801cd30:	6922      	ldr	r2, [r4, #16]
 801cd32:	f003 0306 	and.w	r3, r3, #6
 801cd36:	2b04      	cmp	r3, #4
 801cd38:	bf02      	ittt	eq
 801cd3a:	68e5      	ldreq	r5, [r4, #12]
 801cd3c:	6833      	ldreq	r3, [r6, #0]
 801cd3e:	1aed      	subeq	r5, r5, r3
 801cd40:	68a3      	ldr	r3, [r4, #8]
 801cd42:	bf0c      	ite	eq
 801cd44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cd48:	2500      	movne	r5, #0
 801cd4a:	4293      	cmp	r3, r2
 801cd4c:	bfc4      	itt	gt
 801cd4e:	1a9b      	subgt	r3, r3, r2
 801cd50:	18ed      	addgt	r5, r5, r3
 801cd52:	2600      	movs	r6, #0
 801cd54:	341a      	adds	r4, #26
 801cd56:	42b5      	cmp	r5, r6
 801cd58:	d11a      	bne.n	801cd90 <_printf_common+0xc8>
 801cd5a:	2000      	movs	r0, #0
 801cd5c:	e008      	b.n	801cd70 <_printf_common+0xa8>
 801cd5e:	2301      	movs	r3, #1
 801cd60:	4652      	mov	r2, sl
 801cd62:	4641      	mov	r1, r8
 801cd64:	4638      	mov	r0, r7
 801cd66:	47c8      	blx	r9
 801cd68:	3001      	adds	r0, #1
 801cd6a:	d103      	bne.n	801cd74 <_printf_common+0xac>
 801cd6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd74:	3501      	adds	r5, #1
 801cd76:	e7c6      	b.n	801cd06 <_printf_common+0x3e>
 801cd78:	18e1      	adds	r1, r4, r3
 801cd7a:	1c5a      	adds	r2, r3, #1
 801cd7c:	2030      	movs	r0, #48	@ 0x30
 801cd7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801cd82:	4422      	add	r2, r4
 801cd84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801cd88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801cd8c:	3302      	adds	r3, #2
 801cd8e:	e7c7      	b.n	801cd20 <_printf_common+0x58>
 801cd90:	2301      	movs	r3, #1
 801cd92:	4622      	mov	r2, r4
 801cd94:	4641      	mov	r1, r8
 801cd96:	4638      	mov	r0, r7
 801cd98:	47c8      	blx	r9
 801cd9a:	3001      	adds	r0, #1
 801cd9c:	d0e6      	beq.n	801cd6c <_printf_common+0xa4>
 801cd9e:	3601      	adds	r6, #1
 801cda0:	e7d9      	b.n	801cd56 <_printf_common+0x8e>
	...

0801cda4 <_printf_i>:
 801cda4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cda8:	7e0f      	ldrb	r7, [r1, #24]
 801cdaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801cdac:	2f78      	cmp	r7, #120	@ 0x78
 801cdae:	4691      	mov	r9, r2
 801cdb0:	4680      	mov	r8, r0
 801cdb2:	460c      	mov	r4, r1
 801cdb4:	469a      	mov	sl, r3
 801cdb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801cdba:	d807      	bhi.n	801cdcc <_printf_i+0x28>
 801cdbc:	2f62      	cmp	r7, #98	@ 0x62
 801cdbe:	d80a      	bhi.n	801cdd6 <_printf_i+0x32>
 801cdc0:	2f00      	cmp	r7, #0
 801cdc2:	f000 80d1 	beq.w	801cf68 <_printf_i+0x1c4>
 801cdc6:	2f58      	cmp	r7, #88	@ 0x58
 801cdc8:	f000 80b8 	beq.w	801cf3c <_printf_i+0x198>
 801cdcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801cdd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801cdd4:	e03a      	b.n	801ce4c <_printf_i+0xa8>
 801cdd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801cdda:	2b15      	cmp	r3, #21
 801cddc:	d8f6      	bhi.n	801cdcc <_printf_i+0x28>
 801cdde:	a101      	add	r1, pc, #4	@ (adr r1, 801cde4 <_printf_i+0x40>)
 801cde0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cde4:	0801ce3d 	.word	0x0801ce3d
 801cde8:	0801ce51 	.word	0x0801ce51
 801cdec:	0801cdcd 	.word	0x0801cdcd
 801cdf0:	0801cdcd 	.word	0x0801cdcd
 801cdf4:	0801cdcd 	.word	0x0801cdcd
 801cdf8:	0801cdcd 	.word	0x0801cdcd
 801cdfc:	0801ce51 	.word	0x0801ce51
 801ce00:	0801cdcd 	.word	0x0801cdcd
 801ce04:	0801cdcd 	.word	0x0801cdcd
 801ce08:	0801cdcd 	.word	0x0801cdcd
 801ce0c:	0801cdcd 	.word	0x0801cdcd
 801ce10:	0801cf4f 	.word	0x0801cf4f
 801ce14:	0801ce7b 	.word	0x0801ce7b
 801ce18:	0801cf09 	.word	0x0801cf09
 801ce1c:	0801cdcd 	.word	0x0801cdcd
 801ce20:	0801cdcd 	.word	0x0801cdcd
 801ce24:	0801cf71 	.word	0x0801cf71
 801ce28:	0801cdcd 	.word	0x0801cdcd
 801ce2c:	0801ce7b 	.word	0x0801ce7b
 801ce30:	0801cdcd 	.word	0x0801cdcd
 801ce34:	0801cdcd 	.word	0x0801cdcd
 801ce38:	0801cf11 	.word	0x0801cf11
 801ce3c:	6833      	ldr	r3, [r6, #0]
 801ce3e:	1d1a      	adds	r2, r3, #4
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	6032      	str	r2, [r6, #0]
 801ce44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ce48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ce4c:	2301      	movs	r3, #1
 801ce4e:	e09c      	b.n	801cf8a <_printf_i+0x1e6>
 801ce50:	6833      	ldr	r3, [r6, #0]
 801ce52:	6820      	ldr	r0, [r4, #0]
 801ce54:	1d19      	adds	r1, r3, #4
 801ce56:	6031      	str	r1, [r6, #0]
 801ce58:	0606      	lsls	r6, r0, #24
 801ce5a:	d501      	bpl.n	801ce60 <_printf_i+0xbc>
 801ce5c:	681d      	ldr	r5, [r3, #0]
 801ce5e:	e003      	b.n	801ce68 <_printf_i+0xc4>
 801ce60:	0645      	lsls	r5, r0, #25
 801ce62:	d5fb      	bpl.n	801ce5c <_printf_i+0xb8>
 801ce64:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ce68:	2d00      	cmp	r5, #0
 801ce6a:	da03      	bge.n	801ce74 <_printf_i+0xd0>
 801ce6c:	232d      	movs	r3, #45	@ 0x2d
 801ce6e:	426d      	negs	r5, r5
 801ce70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ce74:	4858      	ldr	r0, [pc, #352]	@ (801cfd8 <_printf_i+0x234>)
 801ce76:	230a      	movs	r3, #10
 801ce78:	e011      	b.n	801ce9e <_printf_i+0xfa>
 801ce7a:	6821      	ldr	r1, [r4, #0]
 801ce7c:	6833      	ldr	r3, [r6, #0]
 801ce7e:	0608      	lsls	r0, r1, #24
 801ce80:	f853 5b04 	ldr.w	r5, [r3], #4
 801ce84:	d402      	bmi.n	801ce8c <_printf_i+0xe8>
 801ce86:	0649      	lsls	r1, r1, #25
 801ce88:	bf48      	it	mi
 801ce8a:	b2ad      	uxthmi	r5, r5
 801ce8c:	2f6f      	cmp	r7, #111	@ 0x6f
 801ce8e:	4852      	ldr	r0, [pc, #328]	@ (801cfd8 <_printf_i+0x234>)
 801ce90:	6033      	str	r3, [r6, #0]
 801ce92:	bf14      	ite	ne
 801ce94:	230a      	movne	r3, #10
 801ce96:	2308      	moveq	r3, #8
 801ce98:	2100      	movs	r1, #0
 801ce9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ce9e:	6866      	ldr	r6, [r4, #4]
 801cea0:	60a6      	str	r6, [r4, #8]
 801cea2:	2e00      	cmp	r6, #0
 801cea4:	db05      	blt.n	801ceb2 <_printf_i+0x10e>
 801cea6:	6821      	ldr	r1, [r4, #0]
 801cea8:	432e      	orrs	r6, r5
 801ceaa:	f021 0104 	bic.w	r1, r1, #4
 801ceae:	6021      	str	r1, [r4, #0]
 801ceb0:	d04b      	beq.n	801cf4a <_printf_i+0x1a6>
 801ceb2:	4616      	mov	r6, r2
 801ceb4:	fbb5 f1f3 	udiv	r1, r5, r3
 801ceb8:	fb03 5711 	mls	r7, r3, r1, r5
 801cebc:	5dc7      	ldrb	r7, [r0, r7]
 801cebe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801cec2:	462f      	mov	r7, r5
 801cec4:	42bb      	cmp	r3, r7
 801cec6:	460d      	mov	r5, r1
 801cec8:	d9f4      	bls.n	801ceb4 <_printf_i+0x110>
 801ceca:	2b08      	cmp	r3, #8
 801cecc:	d10b      	bne.n	801cee6 <_printf_i+0x142>
 801cece:	6823      	ldr	r3, [r4, #0]
 801ced0:	07df      	lsls	r7, r3, #31
 801ced2:	d508      	bpl.n	801cee6 <_printf_i+0x142>
 801ced4:	6923      	ldr	r3, [r4, #16]
 801ced6:	6861      	ldr	r1, [r4, #4]
 801ced8:	4299      	cmp	r1, r3
 801ceda:	bfde      	ittt	le
 801cedc:	2330      	movle	r3, #48	@ 0x30
 801cede:	f806 3c01 	strble.w	r3, [r6, #-1]
 801cee2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801cee6:	1b92      	subs	r2, r2, r6
 801cee8:	6122      	str	r2, [r4, #16]
 801ceea:	f8cd a000 	str.w	sl, [sp]
 801ceee:	464b      	mov	r3, r9
 801cef0:	aa03      	add	r2, sp, #12
 801cef2:	4621      	mov	r1, r4
 801cef4:	4640      	mov	r0, r8
 801cef6:	f7ff fee7 	bl	801ccc8 <_printf_common>
 801cefa:	3001      	adds	r0, #1
 801cefc:	d14a      	bne.n	801cf94 <_printf_i+0x1f0>
 801cefe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf02:	b004      	add	sp, #16
 801cf04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf08:	6823      	ldr	r3, [r4, #0]
 801cf0a:	f043 0320 	orr.w	r3, r3, #32
 801cf0e:	6023      	str	r3, [r4, #0]
 801cf10:	4832      	ldr	r0, [pc, #200]	@ (801cfdc <_printf_i+0x238>)
 801cf12:	2778      	movs	r7, #120	@ 0x78
 801cf14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801cf18:	6823      	ldr	r3, [r4, #0]
 801cf1a:	6831      	ldr	r1, [r6, #0]
 801cf1c:	061f      	lsls	r7, r3, #24
 801cf1e:	f851 5b04 	ldr.w	r5, [r1], #4
 801cf22:	d402      	bmi.n	801cf2a <_printf_i+0x186>
 801cf24:	065f      	lsls	r7, r3, #25
 801cf26:	bf48      	it	mi
 801cf28:	b2ad      	uxthmi	r5, r5
 801cf2a:	6031      	str	r1, [r6, #0]
 801cf2c:	07d9      	lsls	r1, r3, #31
 801cf2e:	bf44      	itt	mi
 801cf30:	f043 0320 	orrmi.w	r3, r3, #32
 801cf34:	6023      	strmi	r3, [r4, #0]
 801cf36:	b11d      	cbz	r5, 801cf40 <_printf_i+0x19c>
 801cf38:	2310      	movs	r3, #16
 801cf3a:	e7ad      	b.n	801ce98 <_printf_i+0xf4>
 801cf3c:	4826      	ldr	r0, [pc, #152]	@ (801cfd8 <_printf_i+0x234>)
 801cf3e:	e7e9      	b.n	801cf14 <_printf_i+0x170>
 801cf40:	6823      	ldr	r3, [r4, #0]
 801cf42:	f023 0320 	bic.w	r3, r3, #32
 801cf46:	6023      	str	r3, [r4, #0]
 801cf48:	e7f6      	b.n	801cf38 <_printf_i+0x194>
 801cf4a:	4616      	mov	r6, r2
 801cf4c:	e7bd      	b.n	801ceca <_printf_i+0x126>
 801cf4e:	6833      	ldr	r3, [r6, #0]
 801cf50:	6825      	ldr	r5, [r4, #0]
 801cf52:	6961      	ldr	r1, [r4, #20]
 801cf54:	1d18      	adds	r0, r3, #4
 801cf56:	6030      	str	r0, [r6, #0]
 801cf58:	062e      	lsls	r6, r5, #24
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	d501      	bpl.n	801cf62 <_printf_i+0x1be>
 801cf5e:	6019      	str	r1, [r3, #0]
 801cf60:	e002      	b.n	801cf68 <_printf_i+0x1c4>
 801cf62:	0668      	lsls	r0, r5, #25
 801cf64:	d5fb      	bpl.n	801cf5e <_printf_i+0x1ba>
 801cf66:	8019      	strh	r1, [r3, #0]
 801cf68:	2300      	movs	r3, #0
 801cf6a:	6123      	str	r3, [r4, #16]
 801cf6c:	4616      	mov	r6, r2
 801cf6e:	e7bc      	b.n	801ceea <_printf_i+0x146>
 801cf70:	6833      	ldr	r3, [r6, #0]
 801cf72:	1d1a      	adds	r2, r3, #4
 801cf74:	6032      	str	r2, [r6, #0]
 801cf76:	681e      	ldr	r6, [r3, #0]
 801cf78:	6862      	ldr	r2, [r4, #4]
 801cf7a:	2100      	movs	r1, #0
 801cf7c:	4630      	mov	r0, r6
 801cf7e:	f7e3 f95f 	bl	8000240 <memchr>
 801cf82:	b108      	cbz	r0, 801cf88 <_printf_i+0x1e4>
 801cf84:	1b80      	subs	r0, r0, r6
 801cf86:	6060      	str	r0, [r4, #4]
 801cf88:	6863      	ldr	r3, [r4, #4]
 801cf8a:	6123      	str	r3, [r4, #16]
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801cf92:	e7aa      	b.n	801ceea <_printf_i+0x146>
 801cf94:	6923      	ldr	r3, [r4, #16]
 801cf96:	4632      	mov	r2, r6
 801cf98:	4649      	mov	r1, r9
 801cf9a:	4640      	mov	r0, r8
 801cf9c:	47d0      	blx	sl
 801cf9e:	3001      	adds	r0, #1
 801cfa0:	d0ad      	beq.n	801cefe <_printf_i+0x15a>
 801cfa2:	6823      	ldr	r3, [r4, #0]
 801cfa4:	079b      	lsls	r3, r3, #30
 801cfa6:	d413      	bmi.n	801cfd0 <_printf_i+0x22c>
 801cfa8:	68e0      	ldr	r0, [r4, #12]
 801cfaa:	9b03      	ldr	r3, [sp, #12]
 801cfac:	4298      	cmp	r0, r3
 801cfae:	bfb8      	it	lt
 801cfb0:	4618      	movlt	r0, r3
 801cfb2:	e7a6      	b.n	801cf02 <_printf_i+0x15e>
 801cfb4:	2301      	movs	r3, #1
 801cfb6:	4632      	mov	r2, r6
 801cfb8:	4649      	mov	r1, r9
 801cfba:	4640      	mov	r0, r8
 801cfbc:	47d0      	blx	sl
 801cfbe:	3001      	adds	r0, #1
 801cfc0:	d09d      	beq.n	801cefe <_printf_i+0x15a>
 801cfc2:	3501      	adds	r5, #1
 801cfc4:	68e3      	ldr	r3, [r4, #12]
 801cfc6:	9903      	ldr	r1, [sp, #12]
 801cfc8:	1a5b      	subs	r3, r3, r1
 801cfca:	42ab      	cmp	r3, r5
 801cfcc:	dcf2      	bgt.n	801cfb4 <_printf_i+0x210>
 801cfce:	e7eb      	b.n	801cfa8 <_printf_i+0x204>
 801cfd0:	2500      	movs	r5, #0
 801cfd2:	f104 0619 	add.w	r6, r4, #25
 801cfd6:	e7f5      	b.n	801cfc4 <_printf_i+0x220>
 801cfd8:	0801e85c 	.word	0x0801e85c
 801cfdc:	0801e86d 	.word	0x0801e86d

0801cfe0 <__sflush_r>:
 801cfe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfe8:	0716      	lsls	r6, r2, #28
 801cfea:	4605      	mov	r5, r0
 801cfec:	460c      	mov	r4, r1
 801cfee:	d454      	bmi.n	801d09a <__sflush_r+0xba>
 801cff0:	684b      	ldr	r3, [r1, #4]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	dc02      	bgt.n	801cffc <__sflush_r+0x1c>
 801cff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cff8:	2b00      	cmp	r3, #0
 801cffa:	dd48      	ble.n	801d08e <__sflush_r+0xae>
 801cffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cffe:	2e00      	cmp	r6, #0
 801d000:	d045      	beq.n	801d08e <__sflush_r+0xae>
 801d002:	2300      	movs	r3, #0
 801d004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d008:	682f      	ldr	r7, [r5, #0]
 801d00a:	6a21      	ldr	r1, [r4, #32]
 801d00c:	602b      	str	r3, [r5, #0]
 801d00e:	d030      	beq.n	801d072 <__sflush_r+0x92>
 801d010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d012:	89a3      	ldrh	r3, [r4, #12]
 801d014:	0759      	lsls	r1, r3, #29
 801d016:	d505      	bpl.n	801d024 <__sflush_r+0x44>
 801d018:	6863      	ldr	r3, [r4, #4]
 801d01a:	1ad2      	subs	r2, r2, r3
 801d01c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d01e:	b10b      	cbz	r3, 801d024 <__sflush_r+0x44>
 801d020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d022:	1ad2      	subs	r2, r2, r3
 801d024:	2300      	movs	r3, #0
 801d026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d028:	6a21      	ldr	r1, [r4, #32]
 801d02a:	4628      	mov	r0, r5
 801d02c:	47b0      	blx	r6
 801d02e:	1c43      	adds	r3, r0, #1
 801d030:	89a3      	ldrh	r3, [r4, #12]
 801d032:	d106      	bne.n	801d042 <__sflush_r+0x62>
 801d034:	6829      	ldr	r1, [r5, #0]
 801d036:	291d      	cmp	r1, #29
 801d038:	d82b      	bhi.n	801d092 <__sflush_r+0xb2>
 801d03a:	4a2a      	ldr	r2, [pc, #168]	@ (801d0e4 <__sflush_r+0x104>)
 801d03c:	40ca      	lsrs	r2, r1
 801d03e:	07d6      	lsls	r6, r2, #31
 801d040:	d527      	bpl.n	801d092 <__sflush_r+0xb2>
 801d042:	2200      	movs	r2, #0
 801d044:	6062      	str	r2, [r4, #4]
 801d046:	04d9      	lsls	r1, r3, #19
 801d048:	6922      	ldr	r2, [r4, #16]
 801d04a:	6022      	str	r2, [r4, #0]
 801d04c:	d504      	bpl.n	801d058 <__sflush_r+0x78>
 801d04e:	1c42      	adds	r2, r0, #1
 801d050:	d101      	bne.n	801d056 <__sflush_r+0x76>
 801d052:	682b      	ldr	r3, [r5, #0]
 801d054:	b903      	cbnz	r3, 801d058 <__sflush_r+0x78>
 801d056:	6560      	str	r0, [r4, #84]	@ 0x54
 801d058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d05a:	602f      	str	r7, [r5, #0]
 801d05c:	b1b9      	cbz	r1, 801d08e <__sflush_r+0xae>
 801d05e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d062:	4299      	cmp	r1, r3
 801d064:	d002      	beq.n	801d06c <__sflush_r+0x8c>
 801d066:	4628      	mov	r0, r5
 801d068:	f7ff fb42 	bl	801c6f0 <_free_r>
 801d06c:	2300      	movs	r3, #0
 801d06e:	6363      	str	r3, [r4, #52]	@ 0x34
 801d070:	e00d      	b.n	801d08e <__sflush_r+0xae>
 801d072:	2301      	movs	r3, #1
 801d074:	4628      	mov	r0, r5
 801d076:	47b0      	blx	r6
 801d078:	4602      	mov	r2, r0
 801d07a:	1c50      	adds	r0, r2, #1
 801d07c:	d1c9      	bne.n	801d012 <__sflush_r+0x32>
 801d07e:	682b      	ldr	r3, [r5, #0]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d0c6      	beq.n	801d012 <__sflush_r+0x32>
 801d084:	2b1d      	cmp	r3, #29
 801d086:	d001      	beq.n	801d08c <__sflush_r+0xac>
 801d088:	2b16      	cmp	r3, #22
 801d08a:	d11e      	bne.n	801d0ca <__sflush_r+0xea>
 801d08c:	602f      	str	r7, [r5, #0]
 801d08e:	2000      	movs	r0, #0
 801d090:	e022      	b.n	801d0d8 <__sflush_r+0xf8>
 801d092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d096:	b21b      	sxth	r3, r3
 801d098:	e01b      	b.n	801d0d2 <__sflush_r+0xf2>
 801d09a:	690f      	ldr	r7, [r1, #16]
 801d09c:	2f00      	cmp	r7, #0
 801d09e:	d0f6      	beq.n	801d08e <__sflush_r+0xae>
 801d0a0:	0793      	lsls	r3, r2, #30
 801d0a2:	680e      	ldr	r6, [r1, #0]
 801d0a4:	bf08      	it	eq
 801d0a6:	694b      	ldreq	r3, [r1, #20]
 801d0a8:	600f      	str	r7, [r1, #0]
 801d0aa:	bf18      	it	ne
 801d0ac:	2300      	movne	r3, #0
 801d0ae:	eba6 0807 	sub.w	r8, r6, r7
 801d0b2:	608b      	str	r3, [r1, #8]
 801d0b4:	f1b8 0f00 	cmp.w	r8, #0
 801d0b8:	dde9      	ble.n	801d08e <__sflush_r+0xae>
 801d0ba:	6a21      	ldr	r1, [r4, #32]
 801d0bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d0be:	4643      	mov	r3, r8
 801d0c0:	463a      	mov	r2, r7
 801d0c2:	4628      	mov	r0, r5
 801d0c4:	47b0      	blx	r6
 801d0c6:	2800      	cmp	r0, #0
 801d0c8:	dc08      	bgt.n	801d0dc <__sflush_r+0xfc>
 801d0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d0d2:	81a3      	strh	r3, [r4, #12]
 801d0d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0dc:	4407      	add	r7, r0
 801d0de:	eba8 0800 	sub.w	r8, r8, r0
 801d0e2:	e7e7      	b.n	801d0b4 <__sflush_r+0xd4>
 801d0e4:	20400001 	.word	0x20400001

0801d0e8 <_fflush_r>:
 801d0e8:	b538      	push	{r3, r4, r5, lr}
 801d0ea:	690b      	ldr	r3, [r1, #16]
 801d0ec:	4605      	mov	r5, r0
 801d0ee:	460c      	mov	r4, r1
 801d0f0:	b913      	cbnz	r3, 801d0f8 <_fflush_r+0x10>
 801d0f2:	2500      	movs	r5, #0
 801d0f4:	4628      	mov	r0, r5
 801d0f6:	bd38      	pop	{r3, r4, r5, pc}
 801d0f8:	b118      	cbz	r0, 801d102 <_fflush_r+0x1a>
 801d0fa:	6a03      	ldr	r3, [r0, #32]
 801d0fc:	b90b      	cbnz	r3, 801d102 <_fflush_r+0x1a>
 801d0fe:	f7fe ffdf 	bl	801c0c0 <__sinit>
 801d102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d0f3      	beq.n	801d0f2 <_fflush_r+0xa>
 801d10a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d10c:	07d0      	lsls	r0, r2, #31
 801d10e:	d404      	bmi.n	801d11a <_fflush_r+0x32>
 801d110:	0599      	lsls	r1, r3, #22
 801d112:	d402      	bmi.n	801d11a <_fflush_r+0x32>
 801d114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d116:	f7ff faa8 	bl	801c66a <__retarget_lock_acquire_recursive>
 801d11a:	4628      	mov	r0, r5
 801d11c:	4621      	mov	r1, r4
 801d11e:	f7ff ff5f 	bl	801cfe0 <__sflush_r>
 801d122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d124:	07da      	lsls	r2, r3, #31
 801d126:	4605      	mov	r5, r0
 801d128:	d4e4      	bmi.n	801d0f4 <_fflush_r+0xc>
 801d12a:	89a3      	ldrh	r3, [r4, #12]
 801d12c:	059b      	lsls	r3, r3, #22
 801d12e:	d4e1      	bmi.n	801d0f4 <_fflush_r+0xc>
 801d130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d132:	f7ff fa9b 	bl	801c66c <__retarget_lock_release_recursive>
 801d136:	e7dd      	b.n	801d0f4 <_fflush_r+0xc>

0801d138 <fiprintf>:
 801d138:	b40e      	push	{r1, r2, r3}
 801d13a:	b503      	push	{r0, r1, lr}
 801d13c:	4601      	mov	r1, r0
 801d13e:	ab03      	add	r3, sp, #12
 801d140:	4805      	ldr	r0, [pc, #20]	@ (801d158 <fiprintf+0x20>)
 801d142:	f853 2b04 	ldr.w	r2, [r3], #4
 801d146:	6800      	ldr	r0, [r0, #0]
 801d148:	9301      	str	r3, [sp, #4]
 801d14a:	f7ff fca5 	bl	801ca98 <_vfiprintf_r>
 801d14e:	b002      	add	sp, #8
 801d150:	f85d eb04 	ldr.w	lr, [sp], #4
 801d154:	b003      	add	sp, #12
 801d156:	4770      	bx	lr
 801d158:	2000090c 	.word	0x2000090c

0801d15c <__swhatbuf_r>:
 801d15c:	b570      	push	{r4, r5, r6, lr}
 801d15e:	460c      	mov	r4, r1
 801d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d164:	2900      	cmp	r1, #0
 801d166:	b096      	sub	sp, #88	@ 0x58
 801d168:	4615      	mov	r5, r2
 801d16a:	461e      	mov	r6, r3
 801d16c:	da0d      	bge.n	801d18a <__swhatbuf_r+0x2e>
 801d16e:	89a3      	ldrh	r3, [r4, #12]
 801d170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d174:	f04f 0100 	mov.w	r1, #0
 801d178:	bf14      	ite	ne
 801d17a:	2340      	movne	r3, #64	@ 0x40
 801d17c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d180:	2000      	movs	r0, #0
 801d182:	6031      	str	r1, [r6, #0]
 801d184:	602b      	str	r3, [r5, #0]
 801d186:	b016      	add	sp, #88	@ 0x58
 801d188:	bd70      	pop	{r4, r5, r6, pc}
 801d18a:	466a      	mov	r2, sp
 801d18c:	f000 f848 	bl	801d220 <_fstat_r>
 801d190:	2800      	cmp	r0, #0
 801d192:	dbec      	blt.n	801d16e <__swhatbuf_r+0x12>
 801d194:	9901      	ldr	r1, [sp, #4]
 801d196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d19a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d19e:	4259      	negs	r1, r3
 801d1a0:	4159      	adcs	r1, r3
 801d1a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d1a6:	e7eb      	b.n	801d180 <__swhatbuf_r+0x24>

0801d1a8 <__smakebuf_r>:
 801d1a8:	898b      	ldrh	r3, [r1, #12]
 801d1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d1ac:	079d      	lsls	r5, r3, #30
 801d1ae:	4606      	mov	r6, r0
 801d1b0:	460c      	mov	r4, r1
 801d1b2:	d507      	bpl.n	801d1c4 <__smakebuf_r+0x1c>
 801d1b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d1b8:	6023      	str	r3, [r4, #0]
 801d1ba:	6123      	str	r3, [r4, #16]
 801d1bc:	2301      	movs	r3, #1
 801d1be:	6163      	str	r3, [r4, #20]
 801d1c0:	b003      	add	sp, #12
 801d1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1c4:	ab01      	add	r3, sp, #4
 801d1c6:	466a      	mov	r2, sp
 801d1c8:	f7ff ffc8 	bl	801d15c <__swhatbuf_r>
 801d1cc:	9f00      	ldr	r7, [sp, #0]
 801d1ce:	4605      	mov	r5, r0
 801d1d0:	4639      	mov	r1, r7
 801d1d2:	4630      	mov	r0, r6
 801d1d4:	f7fe fd42 	bl	801bc5c <_malloc_r>
 801d1d8:	b948      	cbnz	r0, 801d1ee <__smakebuf_r+0x46>
 801d1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1de:	059a      	lsls	r2, r3, #22
 801d1e0:	d4ee      	bmi.n	801d1c0 <__smakebuf_r+0x18>
 801d1e2:	f023 0303 	bic.w	r3, r3, #3
 801d1e6:	f043 0302 	orr.w	r3, r3, #2
 801d1ea:	81a3      	strh	r3, [r4, #12]
 801d1ec:	e7e2      	b.n	801d1b4 <__smakebuf_r+0xc>
 801d1ee:	89a3      	ldrh	r3, [r4, #12]
 801d1f0:	6020      	str	r0, [r4, #0]
 801d1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d1f6:	81a3      	strh	r3, [r4, #12]
 801d1f8:	9b01      	ldr	r3, [sp, #4]
 801d1fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d1fe:	b15b      	cbz	r3, 801d218 <__smakebuf_r+0x70>
 801d200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d204:	4630      	mov	r0, r6
 801d206:	f000 f81d 	bl	801d244 <_isatty_r>
 801d20a:	b128      	cbz	r0, 801d218 <__smakebuf_r+0x70>
 801d20c:	89a3      	ldrh	r3, [r4, #12]
 801d20e:	f023 0303 	bic.w	r3, r3, #3
 801d212:	f043 0301 	orr.w	r3, r3, #1
 801d216:	81a3      	strh	r3, [r4, #12]
 801d218:	89a3      	ldrh	r3, [r4, #12]
 801d21a:	431d      	orrs	r5, r3
 801d21c:	81a5      	strh	r5, [r4, #12]
 801d21e:	e7cf      	b.n	801d1c0 <__smakebuf_r+0x18>

0801d220 <_fstat_r>:
 801d220:	b538      	push	{r3, r4, r5, lr}
 801d222:	4d07      	ldr	r5, [pc, #28]	@ (801d240 <_fstat_r+0x20>)
 801d224:	2300      	movs	r3, #0
 801d226:	4604      	mov	r4, r0
 801d228:	4608      	mov	r0, r1
 801d22a:	4611      	mov	r1, r2
 801d22c:	602b      	str	r3, [r5, #0]
 801d22e:	f7e6 fec1 	bl	8003fb4 <_fstat>
 801d232:	1c43      	adds	r3, r0, #1
 801d234:	d102      	bne.n	801d23c <_fstat_r+0x1c>
 801d236:	682b      	ldr	r3, [r5, #0]
 801d238:	b103      	cbz	r3, 801d23c <_fstat_r+0x1c>
 801d23a:	6023      	str	r3, [r4, #0]
 801d23c:	bd38      	pop	{r3, r4, r5, pc}
 801d23e:	bf00      	nop
 801d240:	20011cb0 	.word	0x20011cb0

0801d244 <_isatty_r>:
 801d244:	b538      	push	{r3, r4, r5, lr}
 801d246:	4d06      	ldr	r5, [pc, #24]	@ (801d260 <_isatty_r+0x1c>)
 801d248:	2300      	movs	r3, #0
 801d24a:	4604      	mov	r4, r0
 801d24c:	4608      	mov	r0, r1
 801d24e:	602b      	str	r3, [r5, #0]
 801d250:	f7e6 fec0 	bl	8003fd4 <_isatty>
 801d254:	1c43      	adds	r3, r0, #1
 801d256:	d102      	bne.n	801d25e <_isatty_r+0x1a>
 801d258:	682b      	ldr	r3, [r5, #0]
 801d25a:	b103      	cbz	r3, 801d25e <_isatty_r+0x1a>
 801d25c:	6023      	str	r3, [r4, #0]
 801d25e:	bd38      	pop	{r3, r4, r5, pc}
 801d260:	20011cb0 	.word	0x20011cb0

0801d264 <abort>:
 801d264:	b508      	push	{r3, lr}
 801d266:	2006      	movs	r0, #6
 801d268:	f000 f82c 	bl	801d2c4 <raise>
 801d26c:	2001      	movs	r0, #1
 801d26e:	f7e6 fe51 	bl	8003f14 <_exit>

0801d272 <_raise_r>:
 801d272:	291f      	cmp	r1, #31
 801d274:	b538      	push	{r3, r4, r5, lr}
 801d276:	4605      	mov	r5, r0
 801d278:	460c      	mov	r4, r1
 801d27a:	d904      	bls.n	801d286 <_raise_r+0x14>
 801d27c:	2316      	movs	r3, #22
 801d27e:	6003      	str	r3, [r0, #0]
 801d280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d284:	bd38      	pop	{r3, r4, r5, pc}
 801d286:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d288:	b112      	cbz	r2, 801d290 <_raise_r+0x1e>
 801d28a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d28e:	b94b      	cbnz	r3, 801d2a4 <_raise_r+0x32>
 801d290:	4628      	mov	r0, r5
 801d292:	f000 f831 	bl	801d2f8 <_getpid_r>
 801d296:	4622      	mov	r2, r4
 801d298:	4601      	mov	r1, r0
 801d29a:	4628      	mov	r0, r5
 801d29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d2a0:	f000 b818 	b.w	801d2d4 <_kill_r>
 801d2a4:	2b01      	cmp	r3, #1
 801d2a6:	d00a      	beq.n	801d2be <_raise_r+0x4c>
 801d2a8:	1c59      	adds	r1, r3, #1
 801d2aa:	d103      	bne.n	801d2b4 <_raise_r+0x42>
 801d2ac:	2316      	movs	r3, #22
 801d2ae:	6003      	str	r3, [r0, #0]
 801d2b0:	2001      	movs	r0, #1
 801d2b2:	e7e7      	b.n	801d284 <_raise_r+0x12>
 801d2b4:	2100      	movs	r1, #0
 801d2b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	4798      	blx	r3
 801d2be:	2000      	movs	r0, #0
 801d2c0:	e7e0      	b.n	801d284 <_raise_r+0x12>
	...

0801d2c4 <raise>:
 801d2c4:	4b02      	ldr	r3, [pc, #8]	@ (801d2d0 <raise+0xc>)
 801d2c6:	4601      	mov	r1, r0
 801d2c8:	6818      	ldr	r0, [r3, #0]
 801d2ca:	f7ff bfd2 	b.w	801d272 <_raise_r>
 801d2ce:	bf00      	nop
 801d2d0:	2000090c 	.word	0x2000090c

0801d2d4 <_kill_r>:
 801d2d4:	b538      	push	{r3, r4, r5, lr}
 801d2d6:	4d07      	ldr	r5, [pc, #28]	@ (801d2f4 <_kill_r+0x20>)
 801d2d8:	2300      	movs	r3, #0
 801d2da:	4604      	mov	r4, r0
 801d2dc:	4608      	mov	r0, r1
 801d2de:	4611      	mov	r1, r2
 801d2e0:	602b      	str	r3, [r5, #0]
 801d2e2:	f7e6 fe07 	bl	8003ef4 <_kill>
 801d2e6:	1c43      	adds	r3, r0, #1
 801d2e8:	d102      	bne.n	801d2f0 <_kill_r+0x1c>
 801d2ea:	682b      	ldr	r3, [r5, #0]
 801d2ec:	b103      	cbz	r3, 801d2f0 <_kill_r+0x1c>
 801d2ee:	6023      	str	r3, [r4, #0]
 801d2f0:	bd38      	pop	{r3, r4, r5, pc}
 801d2f2:	bf00      	nop
 801d2f4:	20011cb0 	.word	0x20011cb0

0801d2f8 <_getpid_r>:
 801d2f8:	f7e6 bdf4 	b.w	8003ee4 <_getpid>

0801d2fc <_init>:
 801d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2fe:	bf00      	nop
 801d300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d302:	bc08      	pop	{r3}
 801d304:	469e      	mov	lr, r3
 801d306:	4770      	bx	lr

0801d308 <_fini>:
 801d308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d30a:	bf00      	nop
 801d30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d30e:	bc08      	pop	{r3}
 801d310:	469e      	mov	lr, r3
 801d312:	4770      	bx	lr
